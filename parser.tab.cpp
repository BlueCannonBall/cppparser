#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,   39,   39,   40,   40,   41,   41,   42,
   42,   38,   38,   72,   72,   67,   67,   67,   67,   67,
   67,   68,   69,   69,   70,   70,   70,   70,   70,   70,
   71,   35,   35,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    4,    4,   11,   11,   11,   11,   11,   12,
   12,   12,   12,    9,    9,    9,    9,   10,   10,   10,
   25,   25,   24,   23,    3,    3,    3,    3,    3,    3,
   16,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   14,   14,   14,   60,   60,   46,   47,    8,   43,   43,
   44,   45,   45,   45,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,   22,   22,   22,   18,   18,   18,
   18,   19,   19,   62,   62,   62,   62,   62,   62,   62,
   61,   61,   61,   61,   59,   59,   59,   49,   50,   73,
   50,   74,   50,   50,   48,   75,   48,   48,   54,   54,
   54,   52,   53,   76,   53,   77,   53,   51,   51,   51,
   20,   20,   21,   17,   17,   17,   56,   56,   57,   57,
   58,   58,   58,   28,   28,   78,   27,   27,   63,   63,
   63,   64,   64,   64,   64,   13,   13,   55,   55,   55,
   55,   30,   31,   31,   32,   32,   33,   33,   34,    6,
    6,    1,    1,    1,    1,   65,   65,   65,   29,   66,
   66,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   37,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    7,    6,    8,    9,
   11,    0,    1,    1,    2,    4,    3,    4,    4,    4,
    4,    3,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    1,    1,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    3,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    2,    9,    8,    2,    1,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    3,    0,    1,    3,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    0,    2,    2,    3,    0,    1,    1,    2,    5,    0,
   11,    0,   13,    2,    4,    0,    6,    2,    0,    5,
    6,    2,    4,    0,   10,    0,   12,    4,    5,    7,
    8,    8,    2,    2,    2,    3,    0,    1,    1,    2,
    0,    1,    2,    2,    1,    0,    8,    2,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    1,    1,    1,
    1,    4,    1,    3,    1,    1,    2,    2,    3,    1,
    1,    0,    1,    4,    2,    2,    2,    2,    4,    1,
    3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    4,    3,    4,    4,
    7,    7,    7,    7,    3,    2,    2,    4,    2,    1,
    2,
};
static int yydefred[] = {                                      0,
    0,  262,  263,  264,    0,    0,    0,    0,    0,    0,
  241,    0,   62,   63,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  186,  114,    0,    0,    0,    0,  187,    0,    0,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,    0,  265,    3,   27,    8,    9,   12,    0,    0,
    0,    6,    0,    7,    0,    0,   10,    0,    0,   11,
   26,    0,   13,    0,   14,   15,   16,   17,   18,    0,
   19,    0,   20,   21,    0,   22,   23,    0,   24,   25,
    0,    0,    0,    0,   28,   29,   30,   31,   32,    0,
    0,    0,    0,    0,    0,    0,  115,    0,    0,    0,
    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  139,  140,  141,  142,  143,  144,  145,  146,  147,
  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
  158,  159,  161,  162,  137,  138,  126,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  160,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  179,  180,    0,    0,    0,    0,    0,
    0,    0,   58,    0,   60,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  176,    0,  174,    0,
    0,   72,    0,    0,  219,    0,    0,    0,    0,    0,
  214,  215,    0,  213,    0,   92,   91,    0,    0,    0,
    4,    5,  224,    0,  238,  239,  240,    0,    0,  228,
  124,    0,  194,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  273,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  321,  121,    0,  116,  188,    0,    0,    0,  202,    0,
    0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
    0,    0,    0,  168,  166,    0,  171,    0,  216,  255,
    0,    0,  118,    0,    0,    0,    0,   80,    0,  250,
    0,    0,    0,  243,    0,  246,    0,    0,    0,    0,
    0,  163,  164,    0,    0,  315,    0,   61,    0,   52,
   53,   54,   55,   56,   57,   59,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  266,    0,    0,    0,    0,
    0,  172,    0,  173,    0,    0,  220,    0,    0,  103,
    0,    0,    0,   93,  256,  257,  258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  308,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,    0,    0,    0,    0,    0,    0,  204,
  254,    0,  195,    0,    0,    0,    0,   80,   90,    0,
    0,  248,  247,  242,    0,    0,  259,    0,    0,    0,
    0,  208,    0,    0,   46,   49,   50,   48,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,  107,    0,    0,    0,  190,    0,    0,  309,  307,
  117,    0,    0,    0,  203,    0,    0,  237,    0,    0,
  102,    0,    0,    0,    0,    0,  167,    0,    0,   80,
   88,    0,    0,    0,    0,    0,    0,   81,   77,   78,
    0,  244,    0,    0,    0,    0,    0,    0,    0,   34,
    0,    0,   36,    0,    0,    0,    0,    0,  192,    0,
  106,    0,    0,    0,    0,    0,  189,  233,  234,  235,
    0,    0,  226,    0,  105,    0,    0,  209,    0,    0,
    0,  223,   94,    0,    0,   80,   89,    0,   82,   84,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
   74,    0,    0,    0,    0,  206,    0,    0,  200,    0,
    0,    0,    0,    0,  111,  104,  197,    0,    0,    0,
    0,   87,    0,    0,  311,  312,  313,  314,  210,   35,
    0,   37,    0,    0,  181,    0,    0,    0,    0,    0,
  201,    0,    0,    0,    0,    0,    0,    0,   85,    0,
    0,   39,    0,    0,    0,    0,    0,  211,  212,  227,
  113,    0,  181,    0,    0,   86,    0,   40,    0,    0,
  182,  183,    0,    0,    0,  112,    0,    0,  205,    0,
  120,  184,    0,    0,    0,  191,   41,  119,    0,    0,
    0,  207,  193,
};
static int yydgoto[] = {                                      49,
   50,  172,   52,  120,   53,  322,   54,   55,   56,   57,
  508,  441,   58,   59,   60,   61,   62,  305,  363,   63,
   64,  306,   65,   66,   67,   68,   69,   70,   71,   72,
  323,  324,  325,  326,   73,   74,   75,  349,   76,   77,
   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
   88,   89,   90,  287,   91,  435,  436,  499,   92,   93,
  624,   94,  487,  541,  232,  206,   95,   96,   97,   98,
   99,  100,  429,  575,  426,  496,  608,  583,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
    0,  -15,    0,    0,  539,    0,  -83,    0,   10,   26,
  120,  122, 6312, 4154, 4154, 4154, 4154, 4154, 4210, 4154,
  108,    0,    0,    0,    0, -270, -132,    0, 3881,  176,
  180,  190, 3550, 4154,  701,   28,    0, 4154,    0, 1050,
  124,   34,    0,    0,    0,    0,    0,    0,  539,  497,
  147,    0,   86,    0,  198,  224,    0, 3468,  246,    0,
    0,  249,    0, 6274,    0,    0,    0,    0,    0,  257,
    0,   75,    0,    0,  401,    0,    0,   79,    0,    0,
    0,  768,    0,  151,    0,    0,    0,    0,    0,    0,
    0,  539,  539,  539,   67,    0,    0,  262,  276,   88,
  321, 1050,  354,  768,    0,    0,    0,  322,  167,  313,
    0,    0,    0,  463,    0,    0,    0,   88,   88,   88,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  431,  361,
 4154,  184,    0,    0,   -4,   -4,   -4,    0,   -4,   -4,
  461, 6588,  220,    0,    0,  239,  252,  269, -203,  250,
  287,  293,    0,  255,    0, 4154, 4154, 4154,    0,  242,
    0,  482,    0,    0, 7590,  -14,    0,  537,    0,   88,
  665,    0,    0,  539,    0,  539,  100,  -41, 4154,    0,
    0,    0,    0,    0,  335,    0,    0,  529,  569,  585,
    0,    0,    0,  608,    0,    0,    0,   88,  206,    0,
    0,    0,    0,    0,    0, 4154, 4154, 4154, 4154, 4154,
 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154, 4154,
 4154, 4154,    0,    0, 4154, 4154, 4154, 4154, 4154, 4154,
 4154, 4154, 4154, 4154, 4154, 4154, 4154, 3893, 4154, 4154,
    0,    0,    0,    0,    0,  393,   14,    0,    0,  321,
  719,  -54,    0,  539,    0,  398,   88,    0,    0,  400,
  226,  539,  603,    0,    0,  209,    0,  539,    0,    0,
  440,  537,    0,  666,    0,  539,   32,    0,  766,    0,
  474,  478,  152,    0,  679,    0, 2339,  676,  682,  686,
  688,    0,    0,  710, 4154,    0,  712,    0,  506,    0,
    0,    0,    0,    0,    0,    0, 6615, 7590,  729, 6653,
 2428, 6274,  731, 4154, 4154,    0,  534,  218,  760,    0,
    0,    0,  740,    0,  184,  184,    0,  184, 3980,    0,
 7590,  666,  666,    0,    0,    0,    0,  547,    0,  867,
  558,    0,    0,    0,    0,    0,    0,    0,    0,  530,
  530,    0,    0, 1355,    0,    0,    0,    0,   -4,    0,
    0,    0,  436,  436,  530,  530,  530,    0,  365,  365,
 1355,    0,  232, 6722,   -4, 2510,  777,  566,    0, 2599,
  773,  -47,    0,  666,  103,  799,  801,    0,  806,    0,
    0,    0,    0,  807,  812,  811,  -28,    0,    0,  539,
   22,    0,    0,    0,  463, 4154,    0,  819,  820,  825,
  827,    0,    0,  832,    0,    0,    0,    0,    0, 3637,
 4154, 3724,  544, 4154,    0, 7590,  848,  840,  534,  -98,
    0,    0, 6942,  812,  812,    0,    0,  773,    0,    0,
    0, 4154,  854, 2688,    0,  154,   20,    0,  812, 4067,
    0,    0,  857,  218,    0,  870,    0,  874,  656,    0,
    0,   66,  128,  855,    0,  559,  860,    0,    0,    0,
    0,    0, 9614, 4154, 4154, 4154, 4154,  864,    0,    0,
  869,    0,    0,  895, 7000,  680,    0,  899,    0,  685,
    0,   88,   88,  689, 7027, 4154,    0,    0,    0,    0,
  539,  154,    0,  -48,    0, 7055,  622,    0,  903,  633,
  910,    0,    0,  112,  905,    0,    0, 4154,    0,    0,
 7092, 7129, 7403, 7429,  694, 2770, 4154, 2859, 4154,    0,
    0,  925,  647,  680,  927,    0,  539,  539,    0, 7464,
  184,  539,    0, 4123,    0,    0,    0,    0,  919,  846,
  921,    0,  314, 7590,    0,    0,    0,    0,    0,    0,
  937,    0, 7499,  942,    0,  957,    0,  960,  228,  228,
    0,  184, 2948,   88, 7525,  652,   44,    0,    0,  944,
 3806,    0,    0,  -53,  965,  658,  966,    0,    0,    0,
    0,   88,    0,    0, 3030,    0,    0,    0,  671,  750,
    0,    0,    0,  919,  889,    0,  -53, 3119,    0, 3208,
    0,    0,  672,   72,    0,    0,    0,    0,    0, 3290,
 3379,    0,    0,
};
static int yyrindex[] = {                                     57,
 6207,    0,    0,    0,  771, 4934,  896,    0,    0,    0,
    0,    0,    0,    0,    0, 5984,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  415,    0,    0,    0, 3163,  532, 2651,    0,    0,    0,
    0,    0,    0,    0,    0, 5122,    0,    0,    0, 1076,
 7552,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1020,  795,    0,
    0,  136,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   76,    0,    0,    0,    0,    0,
    0,    0,  901, 2399,    0,    0,    0,    0,    0,  973,
 1063,    0,    0,    0,    0,  -17,    0, 5899,    0, 1076,
  590, 1076,    0,    0,    0, 4992, 4461,  908,    0,    0,
 6056, 6122, 6138,    0, 4520, 9640, -112, 1076, 1076, 1076,
 1076,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5050, 1045, 1247,  131, 4253, 4590, 6499, 5061, 5392,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  985,    0, -112,    0,
 2696,    0, 2795, 2956,   24,    0,    0,  717,    0, 1076,
    0,    0,  771,    0,    0,    0,    0,  788,    0,   97,
    0,    0,   97,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  604,    0,    0,    0, 1076,    0,    0,
    0,  986,    0,    0, 2399,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -112,    0,    0,    0,    0, -112,    0, 5800,
    0,    0, 2616,    0, 2480,    0, 1076,    0,   -1,    0,
 5819,  677,  678,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   -5, 4579,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  177,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  891,    0,
    0,    0,    0,    0,    0,    0,    0,  349,    0,    0,
    0,   -6,    0,    0,    0,    0, 1007,    0,    0, 6428,
 4650,    0,    0,    0,  838,  873,    0,  911,    0,    0,
  142,  -13,  -13,    0,    0,    0,    0,    0,  717,    0,
    0, 3055, 3216, 3315, 3476, 3511, 3779, 4269, 4407,  166,
 5497, 4804, 4874, 5562, 5579, 5584, 5595, 5612, 5403, 5624,
 5635, 5654,  624,  775, 5525, 5534, 5555, 5674, 5439, 5464,
 5685,    0,    0,    0, 5428,    0,    0,    0, -112,    0,
   74,    0,    0, 6066,  788,    0,    0,  717,    0,    0,
    0,   61,    0,    0,  794, 6131,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5714,    0,    0,    0,    0,    0,    0,    0,
  985,    0,    0,    0, 5739,   56,    0,    0, 1007,    0,
    0,    0,    0,  413,  413,    0,  793,   82,    0,    0,
    0,    0,    0,    0,    0, 1039,    0,    0, 4744,    0,
    0,  -17,    0,    0,  -17,    0,    0, 5489,    0,    0,
    0,    0,    0,  554,   -2,    0,    0,    0,    0,    0,
  -24,    0, 1015,    0,    0,    0,    0,    0, -112,    0,
    0, -112,    0,    0,    0, 1049,  -17,    0,    0,    0,
    0, 1062, 1062,    0,    0,    0,    0,    0,    0,    0,
    0, 1039,    0,  427,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1051,    0,    0,    0,
    0,    0,    0, 1049,    0,    0,    0,    0,    0,    0,
  113,    0, -112,    0,    0,    0,    0,  -17,   76,    0,
    0,    0,    0,  573,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -17,    0,  292,  292,
    0,  141,    0,  427,    0,    0,    0, -112,    0,    0,
    0,    0,  -17,   81,    0,    0,    0,    0,    0,    0,
    0,  427,    0, -112,    0,    0, -112,    0,    0,    0,
    0,    0,  -17,   76,    0,    0,   99,    0,    0,    0,
    0,    0,    0,    0, -112,    0,    0,    0, -112,    0,
    0,    0,    0,
};
static int yycindex[] = {                                   1146,
  683,    0,    0,    0, 3350, 2347,    0, 2570, 2670, 2732,
    0,    0,    0,    0,    0, 2830,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2867,    0,    0, 2911,  967,    0,    0,    0,    0,    0,
    0,    0, 6555,    0,    0,   11,    0,    0,    0,    0,
  288,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 6846,    0,    0,
    0, 3602,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2930,    0, 3423,  837,    0,    0,    0,    0,    0,  759,
  233,    0,    0,    0,    0, 4019,    0,  234,    0,    0,
  843,    0,    0,    0,    0, 2992,  299,    0,    0,    0,
  315,  329,  330,    0,  334, 5872, 1228,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7864, 7890, 6904, 9504, 9533, 1070, 9663, 9686,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1315,    0,
 7925,    0, 7960, 7986,    0,    0,    0,  859,    0,    0,
    0,    0, 3645,    0,    0,    0,    0,    0,    0,  202,
    0,    0,  263,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -211,    0,    0,    0,    0,    0,    0,
    0,  -29,    0,  861,  863,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1402,    0,    0,    0,    0, 1484,    0,  208,
    0,    0,  294,    0,  -34,    0,    0,    0,    0,    0,
  267,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  347,    0,    0,    0,  865,    0,
    0,    0,    0,    0,    0,    0, 9470,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  550,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9857,    0,    0,    0,    0,    0,    0,    0,    0,  844,
  360,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  871,    0,
    0, 8021, 8295, 8321, 8356, 8391, 8417, 8452, 8726, 9715,
 9755, 8752, 8787, 9799, 8822, 8848, 8883, 9157, 9937, 9183,
 9218, 9253, 9966,10010,10050,10073,10096, 9279,10119,10148,
10188,    0,    0,    0,10221, 9875,    0,    0, 1571,10270,
    0,    0,    0,    0,    0,    0,    0,  877,    0,    0,
    0, 7829,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 9314,    0,    0,    0,    0,    0,    0,10283,
    0,10296,    0,    0, 9588,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  862,    0,    0,    0,
    0,    0,    0,10354,    0,    0,    0,    0,    0,    0,
    0, 8260,    0,    0, 8691,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -159,    0,    0,    0,    0,    0,
  783,    0, 1074,    0,    0,    0,    0,    0, 1658,    0,
    0, 1740,    0,    0,    0,    0, 9122,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10367,    0,10380,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1827,    0,    0,    0,    0,10619,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10632,    0,    0,    0,
    0,    0,10438,    0,    0,    0,    0, 1914,    0,    0,
10451,    0,10690,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1996,10464,    0, 2083,    0,    0,    0,
    0,    0,10703,    0,    0,    0,    0,10522,    0,10535,
    0,    0,    0,    0, 2170,    0,    0,    0, 2252,10548,
10606,    0,    0,
};
static int yygindex[] = {                                      0,
   30,    1,  -92, -445, -332,    0,  -20,    0,    0,    0,
  632, -404,    0,  215,    3,  -43,    0,  707,    0,    0,
    0,  104,    0,    0,    0,  271, 1071,    0,    0,    0,
    0,  697,    0,    0, -427,  507,    0, -407,    0,    0,
    0,    0,   16,    0, 1073,    0,    0, 1075,    0, 1078,
    0,    0,    0, -500, 1079, -184, 1094, -390,   62,    2,
  515,  300,    0,  613,    0,  883,    0,    0,    0, -423,
    0, -422,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 11022
static int yytable[] = {                                     293,
   51,  108,  110,  109,  423, 1423,  117,  640,  121,  122,
  123,  488,    2,  509, 1416,  125,  126,  510,  511,   79,
  113,  314,  200,  165,  217,  468,  165,  530, 1420,  355,
  501,  321,  217,  502,  112,  278,   64,  260,  190,  127,
   64,   83,  584,   51,  124,  469,  184,  231,  387,  369,
  390,  209,  384,  521,  341,  381,    2,  418,   64,  218,
   30, 1410,  304,  542,  260,  505,  114,  260,   51,  128,
 1413,  216,  239,  209,  509,  215,  342,  509,  510,  511,
  572,  510,  511,  532,  533,  129,  279,  418,  617,  440,
  439,  292,  108, 1416,  500,  554,  261, 4499,  544,  261,
   79,  238,  121,  122,  123,  125,  108,  110,  303,  505,
  356, 4502, 4505,  209,  108,  418,  315,  229,  260,  199,
  291,  307,   83,  297,  108,  229,  509,   51,  606,  223,
  510,  511,   64,  284,  185,  112,  419,  289,  185,  123,
   30,  367,  543,  654,  224,   28,  507,   31,  260,   27,
   48,  593,   26,  171,  438,  505,  230,  122,  529,  601,
 4508,  549,    2,    2,    2,  509,  634,  267,  267,  510,
  511,  267,  267,  267,  267,  267,  267,  267, 4511,  130,
  261,  131,  101,  185,  231,  101,  557,  474,  475,  267,
  555,  267,  300,  490,  659,  445,  229,  283,  199,   51,
  101,  288,  295,  123,  229,  222,  295,  295,  295,  295,
  295,  361,  295,  444,  365,  196,  366,  368,  308,  197,
  245,  122,  469,  267,  295,  308,  295,  212,  364,  198,
   48,  308,   79,  171,  212,  230,  591,  358,  245,  489,
  212,  225,  112,  217,  308,  181,   79,   79,  217,  433,
  556,  217,  432,  212,  267,  267,  226,  641,  295,  217,
  217,  642,   32,  231,  208,  311,  431,  372,  217,   32,
   38,   64,  479,  381,  297,  355,  296,   38,  504,  370,
   64,  372,  227,   51,  373,    2,    3,    4,   51,    6,
  295,  422,   13,   14,  425,   79,  252,  217,  252,  252,
   15,  116,  218,   64,  233,  217,  231,  294,  361,   18,
   19,   20,   21,   22,   23,  282,  437,  375,  378,  121,
  302,  213,  504,  299,  294,  395,  312,   51,    6,  395,
  231,    2,    2,    2,  309,  185,   13,   14,  214,   15,
  116,  506,  328,  329,  330,  331,   64,  393,   18,  210,
  185,   51,  321,  185,  424,   64,  115,  505,  185,   47,
  311,    6,   44,   45,   46,    2,    3,    4,  504,  185,
  185,  245,   15,  116,  252,  308,  252,  252,  185,  316,
  361,   18,   13,   14,  212,  506,  467,  267,  304,   43,
   19,   20,   21,   22,   23,  231,  211,  327,   32,  231,
  308,  267,  267,   47,  278,  212,   38,   43,  358,  212,
  280,  210,  313,   32,   24,   25,   51,  118,   32,   51,
   51,   38,  295,  317,  359,  119,   38,  362,  538,  539,
  540,  506,  108,  110,  303,  318,  295,  295,  620,  520,
  503,  523,   44,   45,   46,  108,  252,  307,  304,   47,
  267,  304,  379,  333,  252,  279,  308,  494,  286,  285,
   51,  112,   51,  231,  469,  212,  185,  185,  267,  351,
  185,  332,  273,  275,  115,  278,  337,  271,  380,    6,
 1413,  280,  272,  304,   51,  295,  491,  212,  185, 1413,
   15,  116,  108,  110,  303,  108,  110,  303,  528,   18,
  308,  335,  338,  295,   23,  440,  463,  307,  339,  212,
  307,  428, 1404,  343,  440,  466,   11,   12,  346,   51,
 1407,  112,   51,  469,  112,  340,  279,  108,  110,  303,
  173,  174,  175,  176,  177,  179,  180,  182,   32, 1413,
  220,  581,  307,  344,  304,  231,   38,  231, 1413,  345,
  201,  203,  204,  416,  205,  221,  112,  219,  420,  276,
   33,   34,  207,  304,   36,   37,   51,  275,   51,  278,
  504,  472,  353, 1404,  354,  280,  357,  609,  610,  304,
  475, 1407,  612,   51,   13,   14,  375,  478,  108,  110,
  303,  374,  231,  577,  578,  547,  481,   75,  550,  304,
  638,  484,  490,  307, 1404,  585,  496,  108,  110,  303,
  487,  493, 1407,   51,  231,  499,   76,  112,   51, 1426,
  279,   51,  307,  108,  110,  303,  376,  231, 1429,  231,
  573,  253, 1450,  506,   51,   51,  112,   51,  307,  231,
  231, 1453,  377,  108,  110,  303,  302,  106,   51,  417,
   51,   47,  112,  276,  427,   51,  430,  175,  307,   51,
   51,   51,  587,  219,  276,  432,  276,  276,  276,  221,
  628,  629,  112,  589,  221,  631,  432,  179,   75,  185,
  185,  185,  276,  185,  276,  221,  221,  605,  185,  484,
  432,  616,  633,  646,  221,  432,  434,   76,  644,  185,
  185,  432,  347,  348,  350,  352,  302,  215,  185,  302,
  626,  651,  658,  185,  432,  432,  276,  170,  169,  115,
  170,  169,  201,  221,    6,  371,  639,  319,  103,  104,
  442,  221,  320,   30,  443,   15,   16,  448,   28,  446,
   31,  302,   27,  449,   18,   26,  653,  450,  276,  451,
  452,  454,  382,  383,  384,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  459,
  464,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  205,  414,  415,  461,  175,  566,
  111,  202,  568,  175,  225,  115,  175,  175,  175,  469,
    6,  471,  302,  476,  175,  175, 1435, 1438, 1441, 1444,
   75,   15,  116,  175,  478,  277,  482,  277,  277,  277,
   18,  302,  483,   48,   75,   75,  171,  225,  185,   76,
  486,  185,  225,  277,  225,  277,  225,  302,  492,  225,
  493,  453,  175,   76,   76,  495,  185,  431,  185,  498,
  175,  253,  367,  613,  253,  253,  253,  302,  514,  515,
  465,  466,  253,  253,  516,  253,  517,  277,  253,  253,
  253,  253,  518,   75,  524,  473,  253,  253,  110,  527,
  276,  110,  190,  191,  192,  193,  194,  195,  635,  526,
   47,   75,   76,  536,  276,  276,  110,  548,  110,  277,
  253,  253,  253,  253,  648,  253,  253,  650,  253,  551,
   76,  552,  553,  109,  253,  558,  109,  225,  560,  225,
  225,  360,  253,   47,  565,  660,    6,  567,   47,  661,
   47,  109,   47,  109,  569,   47,  571,   15,  116,  167,
  574,  576,  588,  276,  171,  529,   18,  175,  179,  183,
  590,  108,  513,  599,  108,  187,  192,  115,    2,    3,
    4,  276,    6,  592,  196,  604,  607,  348,  618,  108,
  525,  108,   33,   15,  116,  421,  286,  621,  252,  619,
    6,  623,   18,   19,   20,   21,   22,   23,  535,  252,
  252,   15,  116,  204,  207,  210,  546,  625,  252,  627,
   18,  213,  636,  252,  643,   33,  645,   24,   25,  652,
   33,  655,   33,   47,   33,   47,   47,   33,   73,    1,
  561,  562,  563,  564,  115,  352,  174,    6,  352,    6,
   74,  277,  102,  103,  104,   44,   45,   46,   15,  116,
   15,   16,  580,   42,  198,  277,  277,   18,  252,   18,
  221,  225,  225,  225,  225,  225,  225,  225,  249,  225,
  225,  225,  225,  225,  594,  225,  225,  225,  225,  225,
  225,  225,  225,  348,   64,  603,  225,  225,  225,  225,
  225,  225,  252,  252,  252,  272,  252,  252,  272,   73,
  615,   42,  322,  435,  277,   33,  438,   33,   33,  469,
   64,  225,  225,  272,   64,  225,  225,  225,  225,  939,
  225,  225,  277,  225,  225, 1401, 1447, 1401,  225,  435,
 4514, 1432,   64,  477,  225,  225,  225, 1401,    6,  225,
  225,  225,  225, 1401, 4496, 4517,  559,  272,  497,   15,
  116,  512,  240,  352,  241,  217,  242,  647,   18,  243,
  244,   47,   47,   47,  582,   47,   47,   47,   47,   47,
  413,   47,   47,   47,   47,   47,   47,   47,   47,  272,
    0,    0,   47,   47,   47,   47,   47,   47,  103,    0,
    0,    0,    0,   97,    0,  106,    0,   94,    0,    0,
   91,    0,    0,    0,    0,    0,    0,   47,   47,    0,
    0,   47,   47,   47,   47,    0,   47,   47,    0,   47,
   47,    0,    0,    0,   47,    0,    0,    0,    0,    0,
   47,   47,   47,    0,    0,   47,   47,   47,   47,   33,
   33,   33,   33,   33,   33,   33,    0,   33,   33,   33,
   33,   33,    0,   33,   33,   33,   33,   33,   33,   33,
   33,    0,    0,    0,   33,   33,   33,   33,   33,   33,
  103,    0,    0,    0,    0,   97,    0,  106,  164,   94,
    0,  100,   91,    0,    0,    0,    0,    0,    0,   33,
   33,    0,    0,   33,   33,   33,   33,  274,   33,   33,
  274,   33,   33,    0,    0,  232,   33,    0,    0,    0,
  232,  272,   33,   33,   33,  274,    0,   33,   33,   33,
    0,  232,  232,    0,    0,  272,  272,    0,  185,  255,
  232,    0,    0,  185,  255,    0,    0,  255,  255,  255,
    0,    0,  185,    0,  185,  185,  255,  185,    0,  274,
  185,  185,  185,  185,    0,    0,    0,  103,  185,  185,
  164,    0,   97,  100,  106,    0,   94,  185,    0,   91,
   32,   33,   34,  207,  272,   36,   37,   64,   38,    0,
    0,  274,    0,  255,  255,  255,  255,    0,  255,  255,
    0,  255,  272,    0,    0,    0,    0,    0,    0,    0,
    0,  273,  275,    0,  278,    0,  271,  269,    0,  270,
  280,  272,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,  277,   46,   49,   52,   57,
    0,    0,    0,   62,    0,    0,    0,   65,   70,   73,
   76,   79,   82,    0,  103,    0,    0,  164,    0,   97,
  100,  106,    0,   94,    0,  279,   91,    0,    0,    0,
    0,    0,   85,   88,    0,    0,  109,  113,  117,  121,
    0,  125,  129,    0,  133,  137,    0,    0,    0,  140,
    0,    0,    0,    0,    0,  143,  146,  149,  276,    0,
  152,  155,  158,  161,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,    0,   46,   49,
   52,   57,    0,  274,    0,   62,    0,    0,    0,   65,
   70,   73,   76,   79,   82,    0,  103,  274,  274,    0,
    0,   97,    0,  106,  164,   94,    0,  100,   91,    0,
    0,    0,    0,    0,   85,   88,    0,    0,  109,  113,
  117,  121,    0,  125,  129,    0,  133,  137,    0,    0,
    0,  140,    0,    0,    0,    0,    0,  143,  146,  149,
    0,    0,  152,  155,  158,  161,  274,    0,    0,    0,
    0,    0,    5,    8,   11,   14,   17,   22,    0,   25,
   30,   35,   40,   43,  274,   46,   49,   52,   57,    0,
    0,    0,   62,    0,    0,    0,   65,   70,   73,   76,
   79,   82,    0,  103,    0,    0,  164,    0,   97,  100,
  106,    0,   94,    0,    0,   91,    0,    0,    0,    0,
    0,   85,   88,    0,    0,  109,  113,  117,  121,    0,
  125,  129,    0,  133,  137,    0,    0,    0,  140,    0,
    0,    0,    0,    0,  143,  146,  149,    0,    0,  152,
  155,  158,  161,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,    0,   46,   49,   52,   57,    0,    0,    0,   62,
    0,    0,    0,   65,   70,   73,   76,   79,   82,    0,
  103,    0,    0,  164,    0,   97,  100,  106,    0,   94,
    0,    0,   91,    0,    0,    0,    0,    0,   85,   88,
    0,    0,  109,  113,  117,  121,    0,  125,  129,    0,
  133,  137,    0,    0,    0,  140,    0,    0,    0,    0,
    0,  143,  146,  149,    0,    0,  152,  155,  158,  161,
    0,    5,    8,   11,   14,   17,   22,    0,   25,   30,
   35,   40,   43,    0,   46,   49,   52,   57,    0,    0,
    0,   62,    0,    0,    0,   65,   70,   73,   76,   79,
   82,    0,  103,    0,    0,    0,    0,   97,    0,  106,
  164,   94,    0,  100,   91,    0,    0,    0,    0,    0,
   85,   88,    0,    0,  109,  113,  117,  121,    0,  125,
  129,    0,  133,  137,    0,    0,    0,  140,    0,    0,
    0,    0,    0,  143,  146,  149,    0,    0,  152,  155,
  158,  161,    0,    0,    0,    0,    0,    0,    5,    8,
   11,   14,   17,   22,    0,   25,   30,   35,   40,   43,
    0,   46,   49,   52,   57,    0,    0,    0,   62,    0,
    0,    0,   65,   70,   73,   76,   79,   82,    0,  103,
    0,    0,  164,    0,   97,  100,  106,    0,   94,    0,
    0,   91,    0,    0,    0,    0,    0,   85,   88,    0,
    0,  109,  113,  117,  121,    0,  125,  129,    0,  133,
  137,    0,    0,    0,  140,    0,    0,    0,    0,    0,
  143,  146,  149,    0,    0,  152,  155,  158,  161,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,    0,   46,   49,
   52,   57,    0,    0,    0,   62,    0,    0,    0,   65,
   70,   73,   76,   79,   82,    0,  103,    0,    0,  164,
    0,   97,  100,  106,    0,   94,    0,    0,   91,    0,
    0,    0,    0,    0,   85,   88,    0,    0,  109,  113,
  117,  121,    0,  125,  129,    0,  133,  137,    0,    0,
    0,  140,    0,    0,    0,    0,    0,  143,  146,  149,
    0,    0,  152,  155,  158,  161,    0,    5,    8,   11,
   14,   17,   22,    0,   25,   30,   35,   40,   43,    0,
   46,   49,   52,   57,    0,    0,    0,   62,    0,    0,
    0,   65,   70,   73,   76,   79,   82,    0,  103,    0,
    0,    0,    0,   97,    0,  106,  164,   94,    0,  100,
   91,    0,    0,    0,    0,    0,   85,   88,    0,    0,
  109,  113,  117,  121,    0,  125,  129,    0,  133,  137,
    0,    0,    0,  140,    0,    0,    0,    0,    0,  143,
  146,  149,    0,    0,  152,  155,  158,  161,    0,    0,
    0,    0,    0,    0,    5,    8,   11,   14,   17,   22,
    0,   25,   30,   35,   40,   43,    0,   46,   49,   52,
   57,    0,    0,    0,   62,    0,    0,    0,   65,   70,
   73,   76,   79,   82,    0,  103,    0,    0,  164,    0,
   97,  100,  106,    0,   94,    0,    0,   91,    0,    0,
    0,    0,    0,   85,   88,    0,    0,  109,  113,  117,
  121,    0,  125,  129,    0,  133,  137,    0,    0,    0,
  140,    0,    0,    0,    0,    0,  143,  146,  149,    0,
    0,  152,  155,  158,  161,    0,    0,    0,    0,    0,
    0,    5,    8,   11,   14,   17,   22,    0,   25,   30,
   35,   40,   43,    0,   46,   49,   52,   57,    0,    0,
    0,   62,    0,    0,    0,   65,   70,   73,   76,   79,
   82,    0,  103,    0,    0,  164,    0,   97,  100,  106,
    0,   94,    0,    0,   91,    0,    0,    0,    0,    0,
   85,   88,    0,    0,  109,  113,  117,  121,    0,  125,
  129,    0,  133,  137,    0,    0,    0,  140,    0,    0,
    0,    0,    0,  143,  146,  149,    0,    0,  152,  155,
  158,  161,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,    0,   46,   49,   52,   57,
    0,    0,    0,   62,    0,    0,    0,   65,   70,   73,
   76,   79,   82,    0,  103,    0,    0,    0,    0,   97,
    0,  106,  164,   94,    0,  100,   91,    0,    0,    0,
    0,    0,   85,   88,    0,    0,  109,  113,  117,  121,
    0,  125,  129,    0,  133,  137,    0,    0,    0,  140,
    0,    0,    0,    0,    0,  143,  146,  149,    0,    0,
  152,  155,  158,  161,    0,    0,    0,    0,    0,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,    0,   46,   49,   52,   57,    0,    0,    0,
   62,    0,    0,    0,   65,   70,   73,   76,   79,   82,
    0,   30,    0,    0,  164,    0,   28,  100,   31,    0,
   27,    0,    0,   26,    0,    0,    0,    0,    0,   85,
   88,    0,    0,  109,  113,  117,  121,    0,  125,  129,
    0,  133,  137,    0,    0,    0,  140,    0,    0,    0,
    0,    0,  143,  146,  149,    0,    0,  152,  155,  158,
  161,    0,    0,    0,    0,    0,    0,    5,    8,   11,
   14,   17,   22,    0,   25,   30,   35,   40,   43,    0,
   46,   49,   52,   57,    0,    0,    0,   62,    0,    0,
    0,   65,   70,   73,   76,   79,   82,    0,    0,    0,
   30,   48,    0,  447,   29,   28,    0,   31,    0,   27,
    0,    0,   26,    0,    0,    0,   85,   88,    0,    0,
  109,  113,  117,  121,    0,  125,  129,    0,  133,  137,
    0,    0,    0,  140,    0,    0,    0,    0,    0,  143,
  146,  149,    0,    0,  152,  155,  158,  161,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,    0,   46,   49,   52,   57,    0,    0,    0,   62,
    0,    0,    0,   65,   70,   73,   76,   79,   82,    0,
    0,    0,   30,    0,    0,    0,    0,   28,    0,   31,
   48,   27,  463,   29,   26,    0,    0,    0,   85,   88,
    0,    0,  109,  113,  117,  121,    0,  125,  129,    0,
  133,  137,    0,    0,    0,  140,    0,    0,    0,    0,
    0,  143,  146,  149,    0,    0,  152,  155,  158,  161,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,  229,    0,    0,   11,   12,  232,   13,
   14,    0,    0,  228,  229,  230,   17,    0,    0,  235,
  238,   19,   20,   21,   22,   23,    0,    0,  241,    0,
    0,   30,   48,    0,  481,   29,   28,    0,   31,    0,
   27,    0,    0,   26,    0,   24,   25,    0,    0,    0,
    0,    0,    0,  185,    0,  185,  185,  185,   39,  185,
  252,    0,   40,  252,  252,  252,    0,    0,   41,   42,
   43,  252,  252,   44,   45,   46,   47,  185,    0,    0,
  252,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,  228,  229,  230,   17,  185,    0,    0,  252,
   19,   20,   21,   22,   23,    0,    0,  252,    0,    0,
   30,   48,    0,  485,   29,   28,    0,   31,    0,   27,
    0,    0,   26,    0,   24,   25,  316,    0,    0,  316,
    0,  253,    0,    0,  253,  253,  253,   39,    0,    0,
    0,   40,  253,  253,  316,    0,    0,   41,   42,   43,
    0,  253,   44,   45,   46,   47,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,  178,   11,   12,    0,
   13,   14,    0,    0,  228,  229,  230,   17,  316,    0,
  253,    0,   19,   20,   21,   22,   23,    0,  253,    0,
    0,    0,   30,    0,    0,    0,    0,   28,    0,   31,
   48,   27,  537,   29,   26,    0,   24,   25,    0,    0,
  316,    0,    0,    0,    0,    0,  244,    0,    0,   39,
    0,  247,    0,   40,    0,  317,    0,    0,  317,   41,
   42,   43,  250,  253,   44,   45,   46,   47,    0,    0,
    0,  256,    0,  317,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,  185,  228,  229,  230,   17,  185,    0,    0,
    0,   19,   20,   21,   22,   23,    0,  317,  185,  185,
    0,   30,   48,    0,  600,   29,   28,  185,   31,    0,
   27,    0,  185,   26,    0,   24,   25,  178,    0,    0,
    0,    0,  178,    0,    0,  178,  178,  178,   39,  317,
    0,    0,   40,  178,  178,    0,  259,    0,   41,   42,
   43,  262,  178,   44,   45,   46,   47,    0,    0,    0,
    0,    0,  265,  268,    0,    2,    3,    4,    5,    0,
    7,  271,  316,    0,    0,   11,   12,    0,   13,   14,
    0,  178,  228,  229,  230,   17,  316,  316,    0,  178,
   19,   20,   21,   22,   23,    0,    0,    0,    0,    0,
   30,   48,    0,  602,   29,   28,    0,   31,  274,   27,
    0,    0,   26,  277,   24,   25,  319,    0,    0,  319,
    0,    0,    0,    0,  280,  283,    0,   39,    0,    0,
    0,   40,    0,  286,  319,  316,    0,   41,   42,   43,
    0,    0,   44,   45,   46,   47,    0,    2,    3,    4,
    5,    0,    7,  316,    0,    0,  318,   11,   12,    0,
   13,   14,    0,    0,  228,  229,  230,   17,  319,    0,
    0,  317,   19,   20,   21,   22,   23,    0,    0,    0,
    0,    0,   30,    0,    0,  317,  317,   28,    0,   31,
   48,   27,  630,   29,   26,    0,   24,   25,    0,    0,
  319,    0,    0,    0,    0,    0,  289,    0,    0,   39,
    0,  292,    0,   40,    0,  287,    0,    0,  287,   41,
   42,   43,  295,  298,   44,   45,   46,   47,    0,    0,
    0,  301,    0,  287,  317,    0,    2,    3,    4,    5,
    0,    7,    0,  304,    0,    0,   11,   12,  307,   13,
   14,    0,  317,  228,  229,  230,   17,    0,    0,  310,
  313,   19,   20,   21,   22,   23,    0,  287,  316,    0,
    0,   30,   48,    0,  649,   29,   28,    0,   31,    0,
   27,    0,    0,   26,    0,   24,   25,  318,    0,    0,
    0,    0,  318,    0,    0,  318,  318,  318,   39,  287,
    0,    0,   40,  318,  318,    0,  423,    0,   41,   42,
   43,  402,  318,   44,   45,   46,   47,    0,    0,    0,
    0,    0,  414,  417,    0,    2,    3,    4,    5,    0,
    7,  420,  319,    0,    0,   11,   12,    0,   13,   14,
    0,  318,  228,  229,  230,   17,  319,  319,    0,  318,
   19,   20,   21,   22,   23,    0,    0,    0,    0,    0,
   30,   48,    0,  656,   29,   28,    0,   31,  289,   27,
    0,    0,   26,  292,   24,   25,  288,    0,    0,  288,
    0,    0,    0,    0,  295,  298,    0,   39,    0,    0,
    0,   40,    0,  301,  288,  319,    0,   41,   42,   43,
    0,    0,   44,   45,   46,   47,    0,    2,    3,    4,
    5,    0,    7,  319,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  228,  229,  230,   17,  288,    0,
    0,  287,   19,   20,   21,   22,   23,    0,    0,    0,
    0,    0,   30,    0,    0,  287,  287,   28,    0,   31,
   48,   27,  657,   29,   26,    0,   24,   25,    0,    0,
  288,    0,    0,    0,    0,    0,    0,    0,    0,   39,
    0,    0,    0,   40,    0,  289,    0,    0,  289,   41,
   42,   43,    0,    0,   44,   45,   46,   47,    0,    0,
    0,    0,    0,  289,  287,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,  287,  228,  229,  230,   17,    0,    0,    0,
    0,   19,   20,   21,   22,   23,    0,  289,    0,    0,
    0,   30,   48,    0,  662,   29,   28,    0,   31,  176,
   27,    0,    0,   26,  176,   24,   25,  176,  176,  176,
    0,    0,    0,    0,    0,  176,  176,    0,   39,  289,
    0,    0,   40,    0,  176,    0,    0,    0,   41,   42,
   43,    0,    0,   44,   45,   46,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,  288,  176,    0,   11,   12,    0,   13,   14,
    0,  176,  228,  229,  230,   17,  288,  288,    0,    0,
   19,   20,   21,   22,   23,    0,    0,    0,    0,    0,
   30,   48,    0,  663,   29,   28,    0,   31,    0,   27,
    0,    0,   26,    0,   24,   25,  290,    0,    0,  290,
    0,    0,    0,    0,    0,    0,    0,   39,    0,    0,
    0,   40,    0,    0,  290,  288,    0,   41,   42,   43,
    0,    0,   44,   45,   46,   47,    0,    2,    3,    4,
    5,  291,    7,  288,  291,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  228,  229,  230,   17,  290,  291,
    0,  289,   19,   20,   21,   22,   23,    0,    0,    0,
    0,    0,   30,    0,    0,  289,  289,   28,    0,   31,
   48,   27,    0,   29,   26,    0,   24,   25,    0,    0,
  290,    0,    0,  291,    0,    0,  216,    0,    0,   39,
    0,  219,    0,   40,  219,  219,  219,    0,    0,   41,
   42,   43,  219,  219,   44,   45,   46,   47,    0,    0,
    0,  219,    0,    0,  289,  291,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,  289,  228,  229,  230,   17,    0,    0,    0,
  223,   19,   20,   21,   22,   23,    0,    0,  226,   30,
    0,    0,  199,    0,   28,   29,   31,    0,   27,  425,
    0,   26,    0,    0,  425,   24,   25,  425,  425,  425,
    0,    0,    0,    0,    0,  425,  425,    0,   39,    0,
    0,    0,   40,    0,  425,    0,    0,    0,   41,   42,
   43,    0,    0,   44,   45,   46,   47,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,  290,  429,    0,   11,   12,    0,   13,   14,
    0,  432,  228,  229,  230,   17,  290,  290,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,    0,  519,
    0,   28,   29,   31,    0,   27,    0,  291,   26,    0,
    0,    0,    0,    0,   24,   25,    0,    0,    0,    0,
    0,  291,  291,    0,    0,    0,    0,   39,    0,    0,
    0,   40,    0,    0,    0,  290,    0,   41,   42,   43,
    0,    0,   44,   45,   46,   47,    0,    2,    3,    4,
    5,    0,    7,  290,    0,    0,    0,   11,   12,  292,
   13,   14,  292,    0,    0,    0,    0,   17,    0,    0,
  291,    0,   19,   20,   21,   22,   23,  292,   30,    0,
    0,    0,    0,   28,    0,   31,  522,   27,  291,   29,
   26,    0,    0,    0,    0,    0,   24,   25,  399,    0,
    0,    0,    0,  402,    0,    0,  405,  408,  411,   39,
    0,  292,    0,   40,  414,  417,    0,    0,    0,   41,
   42,   43,    0,  420,   44,   45,   46,   47,    0,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    0,    7,
    0,  216,    0,  292,   11,   12,  219,   13,   14,  219,
  219,  219,    0,    0,   17,    0,    0,  219,  219,   19,
   20,   21,   22,   23,    0,   30,  219,    0,  637,    0,
   28,   29,   31,  412,   27,    0,    0,   26,    0,    0,
    0,    0,    0,   24,   25,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  223,   39,    0,    0,    0,
   40,    0,    0,  226,    0,    0,   41,   42,   43,    0,
    0,   44,   45,   46,   47,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,    0,    0,
    0,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,    0,   48,    0,   28,  171,   31,
    0,   27,    0,    0,   26,    0,    0,    0,    0,    0,
   24,   25,    0,    0,    0,  292,    0,    0,    0,    0,
    0,    0,    0,   39,    0,    0,    0,   40,    0,  292,
  292,    0,    0,   41,   42,   43,    0,    0,   44,   45,
   46,   47,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,  472,   11,   12,    0,   13,   14,    0,    0,
    0,    0,    0,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   23,    0,    0,    0,    0,    0,  292,   30,
    0,    0,   48,    0,   28,  171,   31,    0,   27,    0,
    0,   26,   24,   25,    0,    0,  292,    0,    0,    0,
    0,    0,    0,    0,    0,   39,    0,    0,    0,   40,
    0,    0,    0,    0,    0,   41,   42,   43,    0,    0,
   44,   45,   46,   47,    0,    0,    0,    0,    0,  115,
    2,    3,    4,    0,    6,   30,    0,    0,    0,  545,
   28,  186,   31,    0,   27,   15,  116,   26,    0,    0,
    0,    0,    0,    0,   18,   19,   20,   21,   22,   23,
    0,    0,    0,    0,    0,    0,   30,    0,    0,   48,
    0,   28,  171,   31,    0,   27,    0,    0,   26,   24,
   25,  187,  188,  189,  190,  191,  192,  193,  194,  195,
    0,    0,    0,    0,    0,  614,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   44,   45,   46,
    0,    0,    0,    0,    0,    0,  115,    2,    3,    4,
    0,    6,   30,    0,    0,   48,    0,   28,  171,   31,
    0,   27,   15,  116,   26,    0,    0,    0,    0,    0,
    0,   18,   19,   20,   21,   22,   23,    0,    0,    0,
    0,    0,    0,    0,    0,  444,   48,    0,    0,  171,
  329,    0,    0,  448,  452,  456,   24,   25,    0,  270,
  270,  345,  349,  270,  270,  270,  270,  270,  270,  270,
  353,    0,    0,    0,    0,    0,    0,    0,    0,  293,
    0,  270,  293,  270,   44,   45,   46,    0,    0,    0,
    0,    0,    0,  115,    2,    3,    4,  293,    6,  223,
  357,  460,   48,    0,    0,  171,    0,  226,    0,   15,
  116,    0,    0,    0,    0,  270,    0,    0,   18,   19,
   20,   21,   22,   23,    0,    0,    0,    0,    0,    0,
    0,  293,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   24,   25,    0,  270,  270,    0,  115,
    2,    3,    4,    0,    6,    0,    0,    0,    0,    0,
    0,    0,    0,  293,    0,   15,  116,    0,    0,    0,
    0,   44,   45,   46,   18,   19,   20,   21,   22,   23,
  115,    2,    3,    4,    0,    6,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,  116,    0,   24,
   25,    0,    0,    0,    0,   18,   19,   20,   21,   22,
   23,    0,    0,    0,    0,    0,    0,  294,    0,    0,
  294,    0,    0,    0,    0,    0,    0,   44,   45,   46,
   24,   25,    0,    0,    0,  294,  178,    2,    3,    4,
    0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   15,  116,    0,    0,    0,    0,   44,   45,
   46,   18,   19,   20,   21,   22,   23,   68,   68,  294,
   68,   68,   68,   68,   68,   68,   68,   68,    0,  270,
    0,    0,    0,    0,    0,    0,   24,   25,    0,   68,
   68,   68,   68,  270,  270,  293,    0,    0,    0,    0,
    0,  294,    0,    0,    0,    0,    0,    0,    0,  293,
  293,    0,    0,    0,   44,   45,   46,    0,    0,    0,
    0,   68,    0,   68,   68,    0,   65,   65,    0,   65,
   65,   65,   65,   65,   65,   65,   65,    0,    0,    0,
    0,    0,  270,    0,    0,    0,    0,    0,   65,   65,
   65,   65,    0,   68,   68,   68,    0,    0,  293,    0,
  270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  293,    0,    0,    0,
   65,    0,   65,   65,    0,   70,   70,    0,   70,   70,
   70,   70,   70,   70,   70,   70,  271,  271,    0,    0,
  271,  271,  271,  271,  271,  271,  271,   70,   70,   70,
   70,    0,   65,   65,   65,    0,    0,    0,  271,    0,
  271,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  294,    0,    0,    0,    0,    0,   70,
    0,   70,   70,    0,    0,    0,    0,  294,  294,    0,
    0,    0,  271,    0,    0,    0,   66,   66,    0,   66,
   66,   66,   66,   66,   66,   66,   66,    0,    0,    0,
    0,   70,   70,   70,    0,    0,    0,    0,   66,   66,
   66,   66,    0,  271,  271,    0,    0,   68,    0,    0,
    0,    0,   68,    0,    0,    0,  294,    0,    0,    0,
    0,   68,   68,    0,   68,    0,    0,    0,    0,    0,
   66,    0,   66,   66,  294,    0,    0,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,    0,   68,   68,   68,
   68,   68,   66,   66,   66,    0,   65,    0,    0,   68,
   68,   65,    0,  221,  221,    0,    0,  221,    0,    0,
   65,   65,    0,   65,    0,    0,    0,    0,   68,    0,
    0,    0,    0,    0,    0,  221,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,    0,   65,   65,   65,   65,
   65,    0,    0,    0,  221,   70,    0,    0,   65,   65,
   70,    0,    0,    0,  297,    0,  271,  297,    0,   70,
   70,    0,   70,    0,    0,    0,    0,   65,    0,    0,
  271,  271,  297,    0,    0,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,    0,   70,   70,   70,   70,   70,
    0,    0,    0,    0,    0,    0,  297,   70,   70,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,  271,
    0,   66,    0,    0,  298,    0,   70,  298,    0,    0,
   66,   66,    0,   66,    0,    0,    0,  271,  297,    0,
    0,    0,  298,    0,    0,    0,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,    0,   66,   66,   66,   66,
   66,    0,    0,    0,    0,    0,  298,    0,   66,   66,
   67,   67,    0,   67,   67,   67,   67,   67,   67,   67,
   67,    0,    0,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   67,   67,   67,   67,    0,    0,  298,    0,
  221,    0,    0,    0,    0,  221,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  221,  221,    0,    0,
    0,    0,    0,    0,   67,  221,   67,   67,   69,   69,
  221,   69,   69,   69,   69,   69,   69,   69,   69,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   69,   69,   69,   69,  221,    0,   67,   67,   67,    0,
  297,    0,  221,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  297,  297,    0,    0,    0,    0,
    0,    0,   69,    0,   69,   69,  125,  125,    0,  125,
  125,  125,  125,  125,  125,  125,  125,  268,  268,    0,
    0,  268,  268,  268,  268,  268,  268,  268,  125,  125,
  125,  125,    0,    0,   69,   69,   69,    0,    0,  268,
    0,  268,    0,  297,    0,    0,    0,    0,    0,    0,
  298,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  125,  297,  125,  125,  298,  298,    0,    0,    0,    0,
    0,    0,    0,  268,    0,    0,    0,    0,  320,    0,
    0,    0,  320,    0,  320,  320,    0,  320,  320,    0,
    0,    0,    0,  125,  125,    0,    0,    0,    0,    0,
  320,  320,  320,  320,  268,  268,    0,    0,    0,    0,
    0,    0,    0,  298,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   67,   67,    0,    0,    0,    0,
    0,  298,  320,    0,  320,  320,    0,    0,    0,    0,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,    0,
   67,   67,   67,   67,   67,  320,  320,    0,    0,    0,
    0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
    0,    0,   69,   69,    0,    0,    0,    0,    0,    0,
    0,   67,    0,    0,    0,    0,    0,    0,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,    0,   69,   69,
   69,   69,   69,    0,    0,    0,  125,    0,    0,    0,
   69,   69,    0,    0,    0,    0,    0,  268,    0,    0,
  125,  125,    0,    0,    0,    0,    0,    0,    0,   69,
    0,  268,  268,    0,    0,    0,    0,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,    0,    0,  125,  125,  125,  125,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  268,    0,    0,    0,    0,    0,    0,  125,    0,    0,
    0,    0,  320,  320,    0,    0,    0,    0,  268,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
  320,  320,  320,  320,  320,  320,    0,    0,  269,  269,
  320,  320,  269,  269,  269,  269,  269,  269,  269,  305,
  305,  320,    0,  305,  305,  305,  305,  305,  305,  305,
  269,    0,  269,    0,    0,    0,    0,    0,    0,  320,
    0,  305,    0,  305,  304,  304,    0,    0,  304,  304,
  304,  304,  304,  304,  304,  281,  281,    0,    0,  281,
  281,  281,  281,  281,  269,  281,  304,    0,  304,    0,
    0,    0,    0,    0,    0,  305,    0,  281,    0,  281,
  282,  282,    0,    0,  282,  282,  282,  282,  282,    0,
  282,    0,    0,    0,    0,  269,  269,    0,    0,    0,
  304,    0,  282,    0,  282,    0,  305,  305,  222,  222,
    0,  281,  222,  296,    0,    0,    0,  296,  296,  296,
  296,  296,    0,  296,    0,    0,    0,    0,    0,    0,
  222,  304,  304,    0,    0,  296,  282,  296,    0,    0,
    0,  278,  281,  281,    0,  278,  278,  278,  278,  278,
  279,  278,    0,    0,  279,  279,  279,  279,  279,  222,
  279,    0,    0,  278,    0,  278,    0,  282,  282,  296,
    0,  280,  279,    0,  279,  280,  280,  280,  280,  280,
    0,  280,  299,    0,    0,  299,    0,    0,    0,    0,
    0,    0,    0,  280,    0,  280,    0,  278,    0,  300,
  299,  296,  300,    0,  301,    0,  279,  301,    0,    0,
    0,    0,    0,    0,    0,  302,    0,  300,  302,    0,
    0,    0,  301,    0,    0,    0,    0,  280,  269,  278,
    0,    0,  303,  302,  299,  303,    0,    0,  279,  305,
    0,    0,  269,  269,  306,    0,    0,  306,    0,    0,
  303,  300,    0,  305,  305,  285,  301,    0,  285,  280,
    0,    0,  306,    0,  304,    0,  299,  302,    0,    0,
    0,    0,    0,  285,  286,  281,    0,  286,  304,  304,
    0,    0,    0,  300,  303,    0,    0,    0,  301,  281,
  281,  269,  286,    0,  283,    0,  306,  283,    0,  302,
  282,    0,  305,    0,    0,  284,    0,  285,  284,  269,
    0,    0,  283,    0,  282,  282,  303,    0,    0,    0,
  305,    0,    0,  284,    0,  222,  286,  304,  306,    0,
  222,    0,    0,  296,  310,    0,    0,  310,  281,  285,
    0,  222,  222,    0,    0,  304,  283,  296,  296,    0,
  222,    0,  310,    0,    0,  222,  281,  284,  286,  318,
    0,  278,  318,  282,    0,    0,    0,    0,    0,    0,
  279,    0,    0,    0,    0,  278,  278,  318,  283,  222,
    0,  282,    0,    0,  279,  279,  310,  222,    0,  284,
    0,  280,    0,    0,    0,    0,  296,    0,  299,    0,
    0,    0,    0,    0,    0,  280,  280,    0,    0,    0,
    0,  318,  299,  299,  296,  300,    0,   64,  310,    0,
  301,   64,    0,    0,  278,    0,    0,    0,    0,  300,
  300,  302,    0,  279,  301,  301,   64,    0,   64,   64,
   64,    0,  278,  318,    0,  302,  302,    0,  303,    0,
    0,  279,    0,    0,  280,    0,    0,    0,   64,    0,
  306,  299,  303,  303,    0,    0,    0,    0,    0,    0,
    0,  285,  280,    0,  306,  306,    0,    0,  300,  299,
    0,    0,    0,  301,    0,  285,  285,    0,    0,  501,
  286,  501,  501,  501,  302,  501,  300,    0,    0,    0,
    0,  301,    0,    0,  286,  286,    0,    0,    0,    0,
  283,  303,  302,  501,    0,    0,   95,    0,   95,   95,
   95,  284,   95,  306,  283,  283,    0,    0,    0,  303,
    0,    0,    0,    0,  285,  284,  284,    0,    0,    0,
   95,  306,  501,    0,    0,    0,    0,    0,    0,    0,
  310,    0,  285,  286,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  310,  310,    0,    0,    0,   95,
    0,  286,    0,  283,    0,  318,    0,    0,    0,    0,
    0,    0,    0,    0,  284,    0,    0,    0,    0,  318,
  318,  283,    0,    0,    0,    0,    0,    0,    0,    0,
   69,   69,  284,   69,   69,   69,   69,   69,   69,   69,
   69,    0,    0,  310,    0,    0,    0,    0,    0,    0,
    0,    0,   69,   69,   69,   69,    0,    0,    0,    0,
    0,  310,    0,    0,    0,    0,    0,    0,  318,    0,
    0,  253,    0,    0,  253,  253,  253,    0,    0,    0,
    0,    0,    0,  253,   69,    0,  318,   69,    0,    0,
  253,    0,    0,  253,  253,  253,    0,    0,    0,    0,
    0,    0,  253,   97,    0,   97,   97,   97,    0,   97,
    0,    0,    0,  217,   64,  217,  217,   69,   69,  217,
  253,  253,  253,  253,    0,  253,  253,   97,  253,    0,
    0,    0,    0,   64,    0,    0,    0,  217,  501,  253,
  253,  253,  253,  501,  253,  253,    0,  253,    0,    0,
    0,    0,    0,    0,  505,  501,   97,    0,    0,    0,
    0,    0,    0,  509,    0,   95,  217,    0,  501,   98,
   95,   98,   98,   98,    0,   98,    0,    0,  218,    0,
  218,  218,   95,    0,  218,   99,  501,   99,   99,   99,
    0,   99,  501,   98,    0,   95,    0,    0,    0,    0,
  501,    0,  218,    0,    0,    0,    0,    0,    0,   99,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   95,
    0,    0,   98,    0,    0,    0,    0,   95,    0,    0,
    0,  218,    0,    0,    0,    0,    0,    0,   99,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   64,   64,    0,    0,    0,   64,   64,
   64,   64,   64,   64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   64,   64,   64,   64,    0,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,    0,
   69,   69,   69,   69,   69,    0,    0,   64,    0,    0,
   64,    0,   69,    0,    0,    0,    0,    0,    0,    0,
  273,  275,   97,  278,    0,  271,  269,   97,  270,  280,
  272,    0,  217,    0,    0,    0,    0,  217,    0,   97,
   64,   64,  281,  267,  277,  268,    0,    0,  217,  217,
    0,    0,   97,    0,  166,    0,    0,  217,  161,  163,
    0,  169,  217,  159,  157,  168,  158,    0,  160,    0,
   97,    0,    0,    0,  279,    0,   97,  274,    0,    0,
    0,  155,  167,  156,   97,    0,  217,    0,   98,    0,
    0,    0,    0,   98,  217,    0,    0,  218,    0,    0,
    0,    0,  218,    0,   99,   98,    0,  276,    0,   99,
    0,    0,  170,  218,  218,  162,    0,    0,   98,    0,
    0,   99,  218,    0,    0,    0,    0,  218,    0,    0,
    0,    0,    0,    0,   99,    0,   98,    0,    0,    0,
    0,    0,   98,    0,    0,  164,    0,  165,    0,    0,
   98,  218,   99,    0,    0,    0,    0,    0,   99,  218,
    0,    0,    0,    0,    0,    0,   99,    0,    0,    0,
    0,    0,    0,    0,   64,   64,    0,   64,    0,   64,
   64,   64,   64,   64,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   64,   64,   64,   64,
    0,    0,    0,    0,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,    0,   64,   64,   64,   64,    0,   64,    0,
  253,   64,  253,  253,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   64,   64,    0,    0,    0,
   64,   64,   64,   64,   64,   64,    0,    0,    0,    0,
    0,   64,   64,    0,    0,    0,    0,   64,   64,   64,
   64,  246,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,    0,    0,
  263,  264,  265,  266,    0,    0,    0,    0,    0,   64,
    0,    0,   64,    0,    0,    0,    0,    0,    0,  132,
  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,   64,   64,  273,  275,    0,  278,  336,  271,
  269,    0,  270,  280,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  267,  277,  268,
    0,  273,  275,    0,  278,  460,  271,  269,    0,  270,
  280,  272,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,  277,  268,    0,  279,    0,
    0,  274,    0,    0,    0,    0,    0,    0,    0,  273,
  275,    0,  278,  462,  271,  269,    0,  270,  280,  272,
    0,    0,    0,    0,    0,  279,    0,    0,  274,   64,
    0,  276,  267,  277,  268,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,    0,   64,   64,   64,   64,  276,    0,
    0,    0,    0,  279,    0,    0,  274,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  273,  275,
    0,  278,    0,  271,  269,    0,  270,  280,  272,    0,
    0,   64,    0,    0,    0,    0,  276,    0,    0,    0,
   64,  267,  277,  268,    0,    0,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,    0,    0,   64,   64,   64,   64,    0,
    0,  325,  279,    0,  480,  274,  329,    0,    0,  333,
  337,  341,    0,    0,    0,    0,    0,  345,  349,    0,
    0,    0,    0,    0,    0,    0,  353,    0,    0,    0,
    0,    0,    0,    0,    0,  276,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  223,  357,  360,  363,    0,
  366,  369,    0,  226,    0,  246,  247,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,    0,    0,  263,  264,  265,  266,    0,    0,
    0,    0,  246,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,    0,
    0,  263,  264,  265,  266,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,    0,    0,  263,
  264,  265,  266,  786,    0,  789,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  273,  275,
    0,  278,    0,  271,  269,    0,  270,  280,  272,    0,
    0,    0,    0,    0,    0,    0,    0,  792,    0,    0,
    0,  267,  277,  268,    0,    0,    0,    0,    0,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,    0,    0,  263,  264,
  265,  266,  279,    0,  531,  274,  273,  275,    0,  278,
  570,  271,  269,    0,  270,  280,  272,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  267,
  277,  268,    0,  273,  275,  276,  278,  579,  271,  269,
    0,  270,  280,  272,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  267,  277,  268,    0,
  279,  273,  275,  274,  278,    0,  271,  269,    0,  270,
  280,  272,  325,    0,    0,    0,    0,  329,    0,    0,
  333,  337,  341,    0,  267,  277,  268,  279,  345,  349,
  274,    0,    0,  276,    0,    0,    0,  353,  273,  275,
    0,  278,  595,  271,  269,    0,  270,  280,  272,    0,
    0,    0,    0,    0,    0,  279,    0,  586,  274,    0,
  276,  267,  277,  268,    0,    0,  223,  357,  360,  363,
    0,  366,  369,    0,  226,  273,  275,    0,  278,  596,
  271,  269,    0,  270,  280,  272,    0,    0,  276,    0,
    0,    0,  279,    0,    0,  274,    0,    0,  267,  277,
  268,  723,  726,  729,  732,  735,  738,  741,  744,  747,
  750,  753,  756,  759,  762,  765,  768,  771,    0,    0,
  774,  777,  780,  783,    0,  276,    0,    0,    0,  279,
    0,    0,  274,    0,    0,    0,    0,    0,    0,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,    0,    0,  263,  264,
  265,  266,  276,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  246,  247,  248,
  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
  259,  260,  261,  262,    0,    0,  263,  264,  265,  266,
    0,    0,    0,    0,  246,  247,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,    0,    0,  263,  264,  265,  266,    0,    0,    0,
    0,    0,  246,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,    0,
    0,  263,  264,  265,  266,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,    0,    0,  263,  264,
  265,  266,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  246,  247,  248,  249,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,    0,    0,  263,  264,  265,  266,  273,
  275,    0,  278,  597,  271,  269,    0,  270,  280,  272,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  267,  277,  268,  273,  275,    0,  278,  598,
  271,  269,    0,  270,  280,  272,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  267,  277,
  268,    0,    0,  279,    0,    0,  274,    0,    0,    0,
  273,  275,    0,  278,  611,  271,  269,    0,  270,  280,
  272,    0,    0,    0,    0,    0,    0,    0,    0,  279,
    0,    0,  274,  267,  277,  268,  276,    0,    0,    0,
    0,    0,    0,    0,    0,  273,  275,    0,  278,  622,
  271,  269,    0,  270,  280,  272,    0,    0,    0,    0,
    0,    0,  276,    0,  279,    0,    0,  274,  267,  277,
  268,  273,  275,    0,  278,    0,  271,  269,    0,  270,
  280,  272,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,  277,  268,  276,  125,  279,
    0,  125,  274,    0,  125,  125,  125,  125,  125,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  125,    0,  125,  125,    0,  279,    0,  632,  274,    0,
    0,    0,  276,    0,    0,    0,  273,  275,    0,  278,
    0,  271,  269,    0,  270,  280,  272,    0,    0,    0,
    0,    0,  125,    0,    0,  125,    0,    0,  276,  267,
  277,  268,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,  125,    0,    0,    0,
  279,    0,    0,  274,    0,    0,    0,    0,    0,    0,
  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,    0,    0,  263,
  264,  265,  266,  276,    0,    0,  246,  247,  248,  249,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,    0,    0,  263,  264,  265,  266,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  246,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,    0,    0,
  263,  264,  265,  266,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  246,  247,  248,  249,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,    0,    0,  263,  264,  265,  266,    0,
    0,    0,  246,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,    0,
    0,  263,  264,  265,  266,    0,    0,    0,    0,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,   95,    0,  125,  125,
  125,  125,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  246,  247,  248,
  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
  259,  260,  261,  262,    0,    0,  263,  264,  265,  266,
  594,  600,    0,  609,    0,  588,  582,    0,  585,  615,
  591,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  576,  606,  579,  699,  705,    0,  714,
    0,  693,  687,    0,  690,  720,  696,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  681,
  711,  684,    0,    0,  612,    0,    0,  597,    0,    0,
    0, 1167, 1173,    0, 1182,    0, 1161, 1155,    0, 1158,
 1188, 1164,    0,    0,    0,    0,    0,    0,    0,    0,
  717,    0,    0,  702, 1149, 1179, 1152,  603,    0,    0,
    0,    0,    0,    0,    0,    0, 1272, 1278,    0, 1287,
    0, 1266, 1260,    0, 1263, 1293, 1269,    0,    0,    0,
    0,    0,    0,  708,    0, 1185,    0,    0, 1170, 1254,
 1284, 1257, 1377, 1383,    0, 1392,    0, 1371, 1365,    0,
 1368, 1398, 1374,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1359, 1389, 1362, 1176,    0,
 1290,    0,    0, 1275,    0,    0,    0, 1537, 1543,    0,
 1552,    0, 1531, 1525,    0, 1528, 1558, 1534,    0,    0,
    0,    0,    0,    0,    0,    0, 1395,    0,    0, 1380,
 1519, 1549, 1522, 1281,    0, 4282,    0,    0,    0,    0,
  329,    0,    0,  448,  452,  456,    0,    0,    0,    0,
    0,  345,  349,    0,    0,    0,    0,    0,    0, 1386,
  353, 1555,    0,    0, 1540,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  223,
  357,  460,    0,    0, 1546,    0,    0,  226,    0,    0,
    0,  513,  516,  519,  522,  525,  528,  531,  534,  537,
  540,  543,  546,  549,  552,  555,  558,  561,    0,    0,
  564,  567,  570,  573,    0,    0,    0,  618,  621,  624,
  627,  630,  633,  636,  639,  642,  645,  648,  651,  654,
  657,  660,  663,  666,    0,    0,  669,  672,  675,  678,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107,
 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134,    0,
    0, 1137, 1140, 1143, 1146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1191, 1194, 1197,
 1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227,
 1230, 1233, 1236, 1239,    0,    0, 1242, 1245, 1248, 1251,
    0,    0,    0, 1296, 1299, 1302, 1305, 1308, 1311, 1314,
 1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 1344,
    0,    0, 1347, 1350, 1353, 1356,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1456, 1459,
 1462, 1465, 1468, 1471, 1474, 1477, 1480, 1483, 1486, 1489,
 1492, 1495, 1498, 1501, 1504,    0,    0, 1507, 1510, 1513,
 1516, 1642, 1648,    0, 1657,    0, 1636, 1630,    0, 1633,
 1663, 1639,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1624, 1654, 1627, 1747, 1753,    0,
 1762,    0, 1741, 1735,    0, 1738, 1768, 1744,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1729, 1759, 1732,    0,    0, 1660,    0,    0, 1645,    0,
    0,    0, 1852, 1858,    0, 1867,    0, 1846, 1840,    0,
 1843, 1873, 1849,    0,    0,    0,    0,    0,    0,    0,
    0, 1765,    0,    0, 1750, 1834, 1864, 1837, 1651,    0,
    0,    0,    0,    0,    0,    0,    0, 1957, 1963,    0,
 1972,    0, 1951, 1945,    0, 1948, 1978, 1954,    0,    0,
    0,    0,    0,    0, 1756,    0, 1870,    0,    0, 1855,
 1939, 1969, 1942, 2062, 2068,    0, 2077,    0, 2056, 2050,
    0, 2053, 2083, 2059,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2044, 2074, 2047, 1861,
    0, 1975,    0,    0, 1960,    0,    0,    0, 2167, 2173,
    0, 2182,    0, 2161, 2155,    0, 2158, 2188, 2164,    0,
    0,    0,    0,    0,    0,    0,    0, 2080,    0,    0,
 2065, 2149, 2179, 2152, 1966,    0, 4282,    0,    0,    0,
    0,  329,    0,    0,  448,  452,  456,    0,    0,    0,
    0,    0,  345,  349,    0,    0,    0,    0,    0,    0,
 2071,  353, 2185,    0,    0, 2170,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  223,  357,  460,    0,    0, 2176,    0,    0,  226,    0,
    0,    0, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582,
 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609,    0,
    0, 1612, 1615, 1618, 1621,    0,    0,    0, 1666, 1669,
 1672, 1675, 1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699,
 1702, 1705, 1708, 1711, 1714,    0,    0, 1717, 1720, 1723,
 1726,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1771, 1774, 1777, 1780, 1783, 1786, 1789,
 1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819,
    0,    0, 1822, 1825, 1828, 1831,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1876, 1879,
 1882, 1885, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 1909,
 1912, 1915, 1918, 1921, 1924,    0,    0, 1927, 1930, 1933,
 1936,    0,    0,    0, 1981, 1984, 1987, 1990, 1993, 1996,
 1999, 2002, 2005, 2008, 2011, 2014, 2017, 2020, 2023, 2026,
 2029,    0,    0, 2032, 2035, 2038, 2041,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2086,
 2089, 2092, 2095, 2098, 2101, 2104, 2107, 2110, 2113, 2116,
 2119, 2122, 2125, 2128, 2131, 2134,    0,    0, 2137, 2140,
 2143, 2146, 2272, 2278,    0, 2287,    0, 2266, 2260,    0,
 2263, 2293, 2269,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2254, 2284, 2257, 2521, 2527,
    0, 2536,    0, 2515, 2509,    0, 2512, 2542, 2518,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2503, 2533, 2506,    0,    0, 2290,    0,    0, 2275,
    0,    0,    0, 2626, 2632,    0, 2641,    0, 2620, 2614,
    0, 2617, 2647, 2623,    0,    0,    0,    0,    0,    0,
    0,    0, 2539,    0,    0, 2524, 2608, 2638, 2611, 2281,
    0,    0,    0,    0,    0,    0,    0,    0, 2803, 2809,
    0, 2818,    0, 2797, 2791,    0, 2794, 2824, 2800,    0,
    0,    0,    0,    0,    0, 2530,    0, 2644,    0,    0,
 2629, 2785, 2815, 2788, 2908, 2914,    0, 2923,    0, 2902,
 2896,    0, 2899, 2929, 2905,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2890, 2920, 2893,
 2635,    0, 2821,    0,    0, 2806,    0,    0,    0, 3013,
 3019,    0, 3028,    0, 3007, 3001,    0, 3004, 3034, 3010,
    0,    0,    0,    0,    0,    0,    0,    0, 2926,    0,
    0, 2911, 2995, 3025, 2998, 2812,    0, 4282,    0,    0,
    0,    0,  329,    0,    0,  448,  452,  456,    0,    0,
    0,    0,    0,  345,  349,    0,    0,    0,    0,    0,
    0, 2917,  353, 3031,    0,    0, 3016,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  223,  357,  460,    0,    0, 3022,    0,    0,  226,
    0,    0,    0, 2191, 2194, 2197, 2200, 2203, 2206, 2209,
 2212, 2215, 2218, 2221, 2224, 2227, 2230, 2233, 2236, 2239,
    0,    0, 2242, 2245, 2248, 2251,    0,    0,    0, 2440,
 2443, 2446, 2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470,
 2473, 2476, 2479, 2482, 2485, 2488,    0,    0, 2491, 2494,
 2497, 2500,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2545, 2548, 2551, 2554, 2557, 2560,
 2563, 2566, 2569, 2572, 2575, 2578, 2581, 2584, 2587, 2590,
 2593,    0,    0, 2596, 2599, 2602, 2605,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2722,
 2725, 2728, 2731, 2734, 2737, 2740, 2743, 2746, 2749, 2752,
 2755, 2758, 2761, 2764, 2767, 2770,    0,    0, 2773, 2776,
 2779, 2782,    0,    0,    0, 2827, 2830, 2833, 2836, 2839,
 2842, 2845, 2848, 2851, 2854, 2857, 2860, 2863, 2866, 2869,
 2872, 2875,    0,    0, 2878, 2881, 2884, 2887,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 2959,
 2962, 2965, 2968, 2971, 2974, 2977, 2980,    0,    0, 2983,
 2986, 2989, 2992, 3118, 3124,    0, 3133,    0, 3112, 3106,
    0, 3109, 3139, 3115,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3100, 3130, 3103, 3295,
 3301,    0, 3310,    0, 3289, 3283,    0, 3286, 3316, 3292,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3277, 3307, 3280,    0,    0, 3136,    0,    0,
 3121,    0,    0,    0, 3400, 3406,    0, 3415,    0, 3394,
 3388,    0, 3391, 3421, 3397,    0,    0,    0,    0,    0,
    0,    0,    0, 3313,    0,    0, 3298, 3382, 3412, 3385,
 3127,    0,    0,    0,    0,    0,    0,    0,    0, 3505,
 3511,    0, 3520,    0, 3499, 3493,    0, 3496, 3526, 3502,
    0,    0,    0,    0,    0,    0, 3304,    0, 3418,    0,
    0, 3403, 3487, 3517, 3490, 3970, 3976,    0, 3985,    0,
 3964, 3958,    0, 3961, 3991, 3967,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3952, 3982,
 3955, 3409,    0, 3523,    0,    0, 3508,    0,    0,    0,
 4367, 4373,    0, 4382,    0, 4361, 4355,    0, 4358, 4388,
 4364,    0,    0,    0,    0,    0,    0,    0,    0, 3988,
    0,    0, 3973, 4349, 4379, 4352, 3514,    0, 4282,    0,
    0,    0,    0,  329,    0,    0,  448,  452,  456,    0,
    0,    0,    0,    0,  345,  349,    0,    0,    0,    0,
    0,    0, 3979,  353, 4385,    0,    0, 4370,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  223,  357,  460,    0,    0, 4376,    0,    0,
  226,    0,    0,    0, 3037, 3040, 3043, 3046, 3049, 3052,
 3055, 3058, 3061, 3064, 3067, 3070, 3073, 3076, 3079, 3082,
 3085,    0,    0, 3088, 3091, 3094, 3097,    0,    0,    0,
 3214, 3217, 3220, 3223, 3226, 3229, 3232, 3235, 3238, 3241,
 3244, 3247, 3250, 3253, 3256, 3259, 3262,    0,    0, 3265,
 3268, 3271, 3274,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3319, 3322, 3325, 3328, 3331,
 3334, 3337, 3340, 3343, 3346, 3349, 3352, 3355, 3358, 3361,
 3364, 3367,    0,    0, 3370, 3373, 3376, 3379,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3424, 3427, 3430, 3433, 3436, 3439, 3442, 3445, 3448, 3451,
 3454, 3457, 3460, 3463, 3466, 3469, 3472,    0,    0, 3475,
 3478, 3481, 3484,  858,    0,  861, 3889, 3892, 3895, 3898,
 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922, 3925, 3928,
 3931, 3934, 3937,    0,    0, 3940, 3943, 3946, 3949,    0,
    0,    0,  930,    0,  933,    0,    0,  864,    0,    0,
    0, 4286, 4289, 4292, 4295, 4298, 4301, 4304, 4307, 4310,
 4313, 4316, 4319, 4322, 4325, 4328, 4331, 4334,    0,    0,
 4337, 4340, 4343, 4346, 4472, 4478,  936, 4487,    0, 4466,
 4460,    0, 4463, 4493, 4469,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4454, 4484, 4457,
  273,  275,    0,  278,    0,  271,  269,    0,  270,  280,
  272,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  267,  277,    0,   70,    0, 4490,    0,
    0, 4475,   70,    0,   70,   70,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   70,   70,
   70,    0,    0,    0,  279,    0,    0,  274,    0,    0,
    0, 4481,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1005,    0, 1008,    0,  325,    0,    0,    0,
    0,  329,    0,   70,  333,  337,  341,  276,    0,    0,
    0,    0,  345,  349,    0, 1077,    0, 1080,    0,    0,
    0,  353,    0,    0,    0,    0, 1011,    0,    0,    0,
    0,    0,    0,   70,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2359,    0, 2362,    0,    0, 1083,
  223,  357,  360,  363,    0,  366,  369,    0,  226,    0,
    0,  795,  798,  801,  804,  807,  810,  813,  816,  819,
  822,  825,  828,  831,  834,  837,  840,  843, 2365,    0,
  846,  849,  852,  855, 2431,    0, 2434,    0,    0,    0,
  867,  870,  873,  876,  879,  882,  885,  888,  891,  894,
  897,  900,  903,  906,  909,  912,  915,    0,    0,  918,
  921,  924,  927,    0,    0,    0,    0,    0, 2437,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2713,    0,
 2716,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4391, 4394, 4397, 4400, 4403,
 4406, 4409, 4412, 4415, 4418, 4421, 4424, 4427, 4430, 4433,
 4436, 4439, 2719,    0, 4442, 4445, 4448, 4451,    0,    0,
    0,  246,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,    0,    0,
  263,  264,  265,  266,    0,    0,    0,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,    0,    0,   70,   70,   70,   70,
  942,  945,  948,  951,  954,  957,  960,  963,  966,  969,
  972,  975,  978,  981,  984,  987,  990,    0,    0,  993,
  996,  999, 1002, 1014, 1017, 1020, 1023, 1026, 1029, 1032,
 1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062,
    0,    0, 1065, 1068, 1071, 1074, 3205,    0, 3208,    0,
    0,    0, 2296, 2299, 2302, 2305, 2308, 2311, 2314, 2317,
 2320, 2323, 2326, 2329, 2332, 2335, 2338, 2341, 2344,    0,
    0, 2347, 2350, 2353, 2356, 3592,    0, 3595,    0,    0,
 3211,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2368, 2371, 2374, 2377, 2380, 2383, 2386, 2389,
 2392, 2395, 2398, 2401, 2404, 2407, 2410, 2413, 2416, 3598,
    0, 2419, 2422, 2425, 2428,    0,    0,    0,    0, 3664,
    0, 3667,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2650, 2653, 2656, 2659,
 2662, 2665, 2668, 2671, 2674, 2677, 2680, 2683, 2686, 2689,
 2692, 2695, 2698, 3670,    0, 2701, 2704, 2707, 2710, 3736,
    0, 3739,    0,  325,    0,    0,    0,    0,  329,    0,
    0,  333,  337,  341,    0,    0,    0,    0,    0,  345,
  349,  325, 3808,    0, 3811,    0,  329,    0,  353,  333,
  337,  341,    0, 3742,    0,    0,    0,  345,  349,    0,
    0,    0,    0,    0,    0, 3880,  353, 3883,    0,    0,
    0,    0,    0,    0,    0,    0, 3814,  223,  357,  360,
  363,    0,  366,  369,    0,  226,    0,    0, 4057,    0,
 4060,    0,    0,    0,    0,  223,  357,  360,  363, 3886,
  366,  369,    0,  226,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4129,    0, 4132,
    0,    0, 4063,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3142, 3145, 3148, 3151, 3154, 3157,
 3160, 3163, 3166, 3169, 3172, 3175, 3178, 3181, 3184, 3187,
 3190, 4135,    0, 3193, 3196, 3199, 3202, 4201,    0, 4204,
    0,    0,    0, 3529, 3532, 3535, 3538, 3541, 3544, 3547,
 3550, 3553, 3556, 3559, 3562, 3565, 3568, 3571, 3574, 3577,
    0,    0, 3580, 3583, 3586, 3589,    0,    0,    0,    0,
 4273, 4207, 4276,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3601, 3604, 3607,
 3610, 3613, 3616, 3619, 3622, 3625, 3628, 3631, 3634, 3637,
 3640, 3643, 3646, 3649, 4279,    0, 3652, 3655, 3658, 3661,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3673, 3676, 3679,
 3682, 3685, 3688, 3691, 3694, 3697, 3700, 3703, 3706, 3709,
 3712, 3715, 3718, 3721,    0,    0, 3724, 3727, 3730, 3733,
 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766, 3769, 3772,
 3775, 3778, 3781, 3784, 3787, 3790, 3793,    0,    0, 3796,
 3799, 3802, 3805, 3817, 3820, 3823, 3826, 3829, 3832, 3835,
 3838, 3841, 3844, 3847, 3850, 3853, 3856, 3859, 3862, 3865,
    0,    0, 3868, 3871, 3874, 3877, 3994, 3997, 4000, 4003,
 4006, 4009, 4012, 4015, 4018, 4021, 4024, 4027, 4030, 4033,
 4036, 4039, 4042,    0,    0, 4045, 4048, 4051, 4054,    0,
    0,    0,    0,    0,    0, 4066, 4069, 4072, 4075, 4078,
 4081, 4084, 4087, 4090, 4093, 4096, 4099, 4102, 4105, 4108,
 4111, 4114,    0,    0, 4117, 4120, 4123, 4126,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4138, 4141, 4144, 4147, 4150,
 4153, 4156, 4159, 4162, 4165, 4168, 4171, 4174, 4177, 4180,
 4183, 4186,    0,    0, 4189, 4192, 4195, 4198,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4210, 4213,
 4216, 4219, 4222, 4225, 4228, 4231, 4234, 4237, 4240, 4243,
 4246, 4249, 4252, 4255, 4258,    0,  325, 4261, 4264, 4267,
 4270,  329,    0,    0,  333,  337,  341,    0,    0,  325,
    0,    0,  345,  349,  329,    0,    0,  333,  337,  341,
    0,  353,  325,    0,    0,  345,  349,  329,    0,    0,
  333,  337,  341,    0,  353,    0,    0,    0,  345,  349,
    0,    0,    0,    0,    0,    0,    0,  353,    0,    0,
  223,  357,  360,  363,    0,  366,  369,    0,  226,    0,
    0,    0,    0,  223,  357,  360,  363,    0,  366,  369,
    0,  226,    0,    0,    0,    0,  223,  357,  360,  363,
  325,  366,  369,    0,  226,  329,    0,    0,  333,  337,
  341,    0,    0,  325,    0,    0,  345,  349,  329,    0,
    0,  333,  337,  341,    0,  353,  325,    0,    0,  345,
  349,  329,    0,    0,  333,  337,  341,    0,  353,    0,
    0,    0,  345,  349,    0,    0,    0,    0,    0,    0,
    0,  353,    0,    0,  223,  357,  360,  363,    0,  366,
  369,    0,  226,    0,    0,    0,    0,  223,  357,  360,
  363,    0,  366,  369,    0,  226,    0,    0,    0,    0,
  223,  357,  360,  363,  325,  366,  369,    0,  226,  329,
    0,    0,  333,  337,  341,    0,    0,  325,    0,    0,
  345,  349,  329,    0,    0,  333,  337,  341,    0,  353,
  325,    0,    0,  345,  349,  329,    0,    0,  333,  337,
  341,    0,  353,    0,    0,    0,  345,  349,    0,    0,
    0,    0,    0,    0,    0,  353,    0,    0,  223,  357,
  360,  363,    0,  366,  369,    0,  226,    0,    0,    0,
    0,  223,  357,  360,  363,    0,  366,  369,    0,  226,
    0,    0,    0,    0,  223,  357,  360,  363,  325,  366,
  369,    0,  226,  329,    0,    0,  333,  337,  341,    0,
    0,  325,    0,    0,  345,  349,  329,    0,    0,  333,
  337,  341,    0,  353,  325,    0,    0,  345,  349,  329,
    0,    0,  333,  337,  341,    0,  353,    0,    0,    0,
  345,  349,    0,    0,    0,    0,    0,    0,    0,  353,
    0,    0,  223,  357,  360,  363,    0,  366,  369,    0,
  226,    0,    0,    0,    0,  223,  357,  360,  363,    0,
  366,  369,    0,  226,    0,    0,    0,    0,  223,  357,
  360,  363,  325,  366,  369,    0,  226,  329,    0,    0,
  333,  337,  341,    0,    0, 4282,    0,    0,  345,  349,
  329,    0,    0,  448,  452,  456,    0,  353, 4282,    0,
    0,  345,  349,  329,    0,    0,  448,  452,  456,    0,
  353,    0,    0,    0,  345,  349,    0,    0,    0,    0,
    0,    0,    0,  353,    0,    0,  223,  357,  360,  363,
    0,  366,  369,    0,  226,    0,    0,    0,    0,  223,
  357,  460,    0,    0,    0,    0,    0,  226,    0,    0,
    0,    0,  223,  357,  460,    0, 4282,    0,    0,    0,
  226,  329,    0,    0,  448,  452,  456,    0,    0, 4282,
    0,    0,  345,  349,  329,    0,    0,  448,  452,  456,
    0,  353,    0,    0,    0,  345,  349,    0,    0,    0,
    0,    0,    0,    0,  353,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  223,  357,  460,    0,    0,    0,    0,    0,  226,    0,
    0,    0,    0,  223,  357,  460,    0,    0,    0,    0,
    0,  226,
};
static int yycheck[] = {                                      92,
    0,    1,    1,    1,   59,   40,    6,   61,    8,    9,
   10,   59,  125,  441,   44,   15,   16,  441,  441,   44,
    5,  114,   43,   41,   38,  358,   44,  126,   58,   44,
   59,  124,   38,  438,    5,   40,   38,   44,   40,  123,
   42,   44,   91,   43,   60,  257,  317,   68,   38,   91,
   40,   50,   42,  461,  258,   45,    0,   44,   60,   59,
   33,  273,  106,   44,   41,   44,    5,   44,   68,   60,
  282,   38,   72,   72,  502,   42,  280,  505,  502,  502,
  526,  505,  505,  474,  475,   60,   91,   44,  589,   58,
   59,   91,   92,  123,  123,  500,   41,  257,  489,   44,
  125,   72,  102,  103,  104,  105,  106,  106,  106,   44,
  125,  271,  272,  112,  114,   44,  116,   44,  125,   44,
   91,  106,  125,   94,  124,   44,  554,  127,  574,   44,
  554,  554,   59,   59,   38,  106,  123,   59,   42,   59,
   33,   42,  123,  644,   59,   38,  125,   40,  125,   42,
  123,  556,   45,  126,  123,   44,   44,   59,  257,  567,
  320,  494,  275,  276,  277,  593,  123,   37,   38,  593,
  593,   41,   42,   43,   44,   45,   46,   47,  338,   60,
  125,   60,   41,  316,   44,   44,   59,  372,  373,   59,
  125,   61,  126,   91,  123,   44,  123,  123,  123,  199,
   59,  123,   37,  123,  123,   59,   41,   42,   43,   44,
   45,  211,   47,   62,  214,   40,  216,  217,  273,   40,
   44,  123,  257,   93,   59,  273,   61,  282,  213,   40,
  123,  273,  257,  126,  282,  123,  125,  208,   62,  424,
  282,   44,  213,  257,  273,   31,  271,  272,  262,   41,
  123,  257,   44,  282,  124,  125,   59,  311,   93,  273,
  274,  315,  311,  123,   50,   40,   41,  257,  282,  311,
  319,  273,   41,  244,  245,   44,  126,  319,  257,  218,
  282,  220,   59,  283,  223,  258,  259,  260,  288,  262,
  125,  291,  271,  272,  294,  320,  314,  311,  316,  317,
  273,  274,  302,  305,   59,  319,  327,   93,  308,  282,
  283,  284,  285,  286,  287,   59,  316,  307,  308,  319,
  106,   60,  257,  257,  110,   38,  112,  327,  262,   42,
  351,  275,  276,  277,   59,   44,  271,  272,  305,  273,
  274,  320,  128,  129,  130,  131,  273,   60,  282,   50,
   59,  351,  445,  257,  293,  282,  257,   44,  262,  338,
   40,  262,  335,  336,  337,  258,  259,  260,  257,  273,
  274,   72,  273,  274,  314,  273,  316,  317,  282,   58,
  380,  282,  271,  272,  282,  320,  357,  257,  432,   41,
  283,  284,  285,  286,  287,  416,  273,  127,  311,  420,
  273,  271,  272,  338,   40,  282,  319,   59,  379,  282,
   46,  112,   59,  311,  307,  308,  416,  257,  311,  419,
  420,  319,  257,  257,  210,  265,  319,  213,  275,  276,
  277,  320,  432,  432,  432,  123,  271,  272,  125,  460,
  440,  462,  335,  336,  337,  445,  311,  432,  492,  338,
  320,  495,  238,   93,  319,   91,  273,  428,   58,   59,
  460,  432,  462,  484,  257,  282,   40,   41,  338,  199,
   44,   41,   37,   38,  257,   40,  257,   42,  273,  262,
  273,   46,   47,  527,  484,  320,  425,  282,   62,  282,
  273,  274,  492,  492,  492,  495,  495,  495,  469,  282,
  273,   41,  264,  338,  287,  273,  273,  492,  257,  282,
  495,  297,  311,  264,  282,  282,  268,  269,  264,  519,
  319,  492,  522,  257,  495,  257,   91,  527,  527,  527,
   24,   25,   26,   27,   28,   29,   30,   31,  311,  273,
   44,  541,  527,  257,  588,  566,  319,  568,  282,  257,
   44,   45,   46,  283,   48,   59,  527,   61,  288,  124,
  312,  313,  314,  607,  316,  317,  566,   38,  568,   40,
  257,  273,  331,  311,   93,   46,   40,  577,  578,  623,
  282,  319,  582,  583,  271,  272,   58,  273,  588,  588,
  588,  257,  613,  532,  533,  492,  282,   44,  495,  643,
  621,  273,  273,  588,  311,  544,  273,  607,  607,  607,
  282,  282,  319,  613,  635,  282,   44,  588,  618,  273,
   91,  621,  607,  623,  623,  623,   58,  648,  282,  650,
  527,   42,  273,  320,  634,  635,  607,  637,  623,  660,
  661,  282,   58,  643,  643,  643,  432,   40,  648,  257,
  650,  338,  623,  124,  257,  655,  257,  126,  643,  659,
  660,  661,   41,   61,   41,   44,   43,   44,   45,  257,
  609,  610,  643,   41,  262,  614,   44,  171,  125,  265,
  266,  267,   59,  257,   61,  273,  274,   41,  262,  419,
   44,  588,   41,  632,  282,   44,  257,  125,   41,  273,
  274,   44,  196,  197,  198,  199,  492,   42,  282,  495,
  607,   41,   41,  287,   44,   44,   93,   41,   41,  257,
   44,   44,   40,  311,  262,  219,  623,  265,  266,  267,
  257,  319,  270,   33,  257,  273,  274,   62,   38,   61,
   40,  527,   42,   62,  282,   45,  643,   62,  125,   62,
   41,   40,  246,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  264,
   40,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,   59,  257,  519,
  257,   91,  522,  262,    0,  257,  265,  266,  267,   40,
  262,   62,  588,  257,  273,  274,  257,  258,  259,  260,
  257,  273,  274,  282,  257,   41,   40,   43,   44,   45,
  282,  607,  257,  123,  271,  272,  126,   33,   41,  257,
   58,   44,   38,   59,   40,   61,   42,  623,   40,   45,
   40,  335,  311,  271,  272,   40,   59,   41,   61,   38,
  319,  262,   42,  583,  265,  266,  267,  643,   40,   40,
  354,  355,  273,  274,   40,  262,   40,   93,  265,  266,
  267,  282,   41,  320,  331,  369,  287,  274,   41,   40,
  257,   44,  324,  325,  326,  327,  328,  329,  618,   42,
    0,  338,  320,   40,  271,  272,   59,   41,   61,  125,
  311,  312,  313,  314,  634,  316,  317,  637,  319,   40,
  338,   38,  257,   41,  311,   61,   44,  123,   59,  125,
  126,  257,  319,   33,   61,  655,  262,   59,   38,  659,
   40,   59,   42,   61,   40,   45,  257,  273,  274,  257,
   42,  257,   40,  320,  262,  257,  282,  265,  266,  267,
   41,   41,  446,  260,   44,  273,  274,  257,  258,  259,
  260,  338,  262,   59,  282,   41,   40,  461,  123,   59,
  464,   61,    0,  273,  274,  257,   58,   41,  262,   59,
  262,   40,  282,  283,  284,  285,  286,  287,  482,  273,
  274,  273,  274,  311,  312,  313,  490,   41,  282,   40,
  282,  319,   59,  287,   40,   33,   41,  307,  308,  260,
   38,  123,   40,  123,   42,  125,  126,   45,  123,    0,
  514,  515,  516,  517,  257,  519,  126,  262,  522,  262,
  123,  257,  265,  266,  267,  335,  336,  337,  273,  274,
  273,  274,  536,   59,   59,  271,  272,  282,   42,  282,
  257,  257,  258,  259,  260,  261,  262,  263,   44,  265,
  266,  267,  268,  269,  558,  271,  272,  273,  274,  275,
  276,  277,  278,  567,  282,  569,  282,  283,  284,  285,
  286,  287,  312,  313,  314,   41,  316,  317,   44,   41,
  584,   41,  126,  257,  320,  123,  338,  125,  126,  257,
   38,  307,  308,   59,   42,  311,  312,  313,  314,   40,
  316,  317,  338,  319,  320,  257,  273,  257,  324,  257,
  338,  257,   60,  257,  330,  331,  332,  257,  262,  335,
  336,  337,  338,  257,  273,   62,  505,   93,  432,  273,
  274,  445,   72,  637,   72,   52,   72,  633,  282,   72,
   72,  261,  262,  263,  542,  265,  266,  267,  268,  269,
  278,  271,  272,  273,  274,  275,  276,  277,  278,  125,
   -1,   -1,  282,  283,  284,  285,  286,  287,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,  338,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,  275,  276,  277,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,
   -1,  126,   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,  311,  312,  313,  314,   41,  316,  317,
   44,  319,  320,   -1,   -1,  257,  324,   -1,   -1,   -1,
  262,  257,  330,  331,  332,   59,   -1,  335,  336,  337,
   -1,  273,  274,   -1,   -1,  271,  272,   -1,  257,  257,
  282,   -1,   -1,  262,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,  273,  274,  274,  262,   -1,   93,
  265,  266,  267,  282,   -1,   -1,   -1,   33,  273,  274,
  123,   -1,   38,  126,   40,   -1,   42,  282,   -1,   45,
  311,  312,  313,  314,  320,  316,  317,  305,  319,   -1,
   -1,  125,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   61,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,
  126,   40,   -1,   42,   -1,   91,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,  124,   -1,
  335,  336,  337,  338,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,  257,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,  271,  272,   -1,
   -1,   38,   -1,   40,  123,   42,   -1,  126,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,  320,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,  338,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,  338,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,   -1,  126,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,  338,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,   -1,  126,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,  338,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,   -1,  126,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,
  338,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,  125,  126,   45,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,  338,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,  257,   -1,   -1,  268,  269,  262,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,  273,
  274,  283,  284,  285,  286,  287,   -1,   -1,  282,   -1,
   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   40,   41,   42,  320,   44,
  262,   -1,  324,  265,  266,  267,   -1,   -1,  330,  331,
  332,  273,  274,  335,  336,  337,  338,   62,   -1,   -1,
  282,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,  275,  276,  277,  278,   91,   -1,   -1,  311,
  283,  284,  285,  286,  287,   -1,   -1,  319,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,  307,  308,   41,   -1,   -1,   44,
   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,   -1,
   -1,  324,  273,  274,   59,   -1,   -1,  330,  331,  332,
   -1,  282,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,  126,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   93,   -1,
  311,   -1,  283,  284,  285,  286,  287,   -1,  319,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,  125,  126,   45,   -1,  307,  308,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  320,
   -1,  262,   -1,  324,   -1,   41,   -1,   -1,   44,  330,
  331,  332,  273,  274,  335,  336,  337,  338,   -1,   -1,
   -1,  282,   -1,   59,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,  257,  275,  276,  277,  278,  262,   -1,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   93,  273,  274,
   -1,   33,  123,   -1,  125,  126,   38,  282,   40,   -1,
   42,   -1,  287,   45,   -1,  307,  308,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,  125,
   -1,   -1,  324,  273,  274,   -1,  257,   -1,  330,  331,
  332,  262,  282,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  258,  259,  260,  261,   -1,
  263,  282,  257,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,  311,  275,  276,  277,  278,  271,  272,   -1,  319,
  283,  284,  285,  286,  287,   -1,   -1,   -1,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,  257,   42,
   -1,   -1,   45,  262,  307,  308,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  273,  274,   -1,  320,   -1,   -1,
   -1,  324,   -1,  282,   59,  320,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   -1,  263,  338,   -1,   -1,  126,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   93,   -1,
   -1,  257,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  271,  272,   38,   -1,   40,
  123,   42,  125,  126,   45,   -1,  307,  308,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  320,
   -1,  262,   -1,  324,   -1,   41,   -1,   -1,   44,  330,
  331,  332,  273,  274,  335,  336,  337,  338,   -1,   -1,
   -1,  282,   -1,   59,  320,   -1,  258,  259,  260,  261,
   -1,  263,   -1,  257,   -1,   -1,  268,  269,  262,  271,
  272,   -1,  338,  275,  276,  277,  278,   -1,   -1,  273,
  274,  283,  284,  285,  286,  287,   -1,   93,  282,   -1,
   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,  307,  308,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,  125,
   -1,   -1,  324,  273,  274,   -1,  257,   -1,  330,  331,
  332,  262,  282,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  258,  259,  260,  261,   -1,
  263,  282,  257,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,  311,  275,  276,  277,  278,  271,  272,   -1,  319,
  283,  284,  285,  286,  287,   -1,   -1,   -1,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,  257,   42,
   -1,   -1,   45,  262,  307,  308,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  273,  274,   -1,  320,   -1,   -1,
   -1,  324,   -1,  282,   59,  320,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   -1,  263,  338,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   93,   -1,
   -1,  257,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  271,  272,   38,   -1,   40,
  123,   42,  125,  126,   45,   -1,  307,  308,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,
   -1,   -1,   -1,  324,   -1,   41,   -1,   -1,   44,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,
   -1,   -1,   -1,   59,  320,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,  338,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   93,   -1,   -1,
   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,  257,
   42,   -1,   -1,   45,  262,  307,  308,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  320,  125,
   -1,   -1,  324,   -1,  282,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,  257,  311,   -1,  268,  269,   -1,  271,  272,
   -1,  319,  275,  276,  277,  278,  271,  272,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   -1,   -1,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,  307,  308,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,   59,  320,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   41,  263,  338,   44,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   93,   59,
   -1,  257,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  271,  272,   38,   -1,   40,
  123,   42,   -1,  126,   45,   -1,  307,  308,   -1,   -1,
  125,   -1,   -1,   93,   -1,   -1,  257,   -1,   -1,  320,
   -1,  262,   -1,  324,  265,  266,  267,   -1,   -1,  330,
  331,  332,  273,  274,  335,  336,  337,  338,   -1,   -1,
   -1,  282,   -1,   -1,  320,  125,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,  338,  275,  276,  277,  278,   -1,   -1,   -1,
  311,  283,  284,  285,  286,  287,   -1,   -1,  319,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,  257,
   -1,   45,   -1,   -1,  262,  307,  308,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  320,   -1,
   -1,   -1,  324,   -1,  282,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,  257,  311,   -1,  268,  269,   -1,  271,  272,
   -1,  319,  275,  276,  277,  278,  271,  272,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,  257,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,  320,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   -1,  263,  338,   -1,   -1,   -1,  268,  269,   41,
  271,  272,   44,   -1,   -1,   -1,   -1,  278,   -1,   -1,
  320,   -1,  283,  284,  285,  286,  287,   59,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,  338,  126,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,
   -1,   93,   -1,  324,  273,  274,   -1,   -1,   -1,  330,
  331,  332,   -1,  282,  335,  336,  337,  338,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,  257,   -1,  125,  268,  269,  262,  271,  272,  265,
  266,  267,   -1,   -1,  278,   -1,   -1,  273,  274,  283,
  284,  285,  286,  287,   -1,   33,  282,   -1,  123,   -1,
   38,  126,   40,   41,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  311,  320,   -1,   -1,   -1,
  324,   -1,   -1,  319,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  320,   -1,   -1,   -1,  324,   -1,  271,
  272,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,  338,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   93,  268,  269,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   -1,   -1,  320,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,  307,  308,   -1,   -1,  338,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,  262,   33,   -1,   -1,   -1,   93,
   38,  281,   40,   -1,   42,  273,  274,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,  307,
  308,  321,  322,  323,  324,  325,  326,  327,  328,  329,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
   -1,  262,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,  273,  274,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  123,   -1,   -1,  126,
  262,   -1,   -1,  265,  266,  267,  307,  308,   -1,   37,
   38,  273,  274,   41,   42,   43,   44,   45,   46,   47,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   59,   44,   61,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   59,  262,  311,
  312,  313,  123,   -1,   -1,  126,   -1,  319,   -1,  273,
  274,   -1,   -1,   -1,   -1,   93,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,  124,  125,   -1,  257,
  258,  259,  260,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,  273,  274,   -1,   -1,   -1,
   -1,  335,  336,  337,  282,  283,  284,  285,  286,  287,
  257,  258,  259,  260,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  307,
  308,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,  335,  336,  337,
  307,  308,   -1,   -1,   -1,   59,  257,  258,  259,  260,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,  335,  336,
  337,  282,  283,  284,  285,  286,  287,   37,   38,   93,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   59,
   60,   61,   62,  271,  272,  257,   -1,   -1,   -1,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,  335,  336,  337,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,  123,  124,  125,   -1,   -1,  320,   -1,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  338,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   59,   60,   61,
   62,   -1,  123,  124,  125,   -1,   -1,   -1,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,  123,  124,  125,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,  124,  125,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,  320,   -1,   -1,   -1,
   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,  338,   -1,   -1,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  311,  123,  124,  125,   -1,  257,   -1,   -1,  319,
  320,  262,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
  271,  272,   -1,  274,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   62,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,   -1,  307,  308,  309,  310,
  311,   -1,   -1,   -1,   91,  257,   -1,   -1,  319,  320,
  262,   -1,   -1,   -1,   41,   -1,  257,   44,   -1,  271,
  272,   -1,  274,   -1,   -1,   -1,   -1,  338,   -1,   -1,
  271,  272,   59,   -1,   -1,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,   -1,  307,  308,  309,  310,  311,
   -1,   -1,   -1,   -1,   -1,   -1,   93,  319,  320,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  320,
   -1,  262,   -1,   -1,   41,   -1,  338,   44,   -1,   -1,
  271,  272,   -1,  274,   -1,   -1,   -1,  338,  125,   -1,
   -1,   -1,   59,   -1,   -1,   -1,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,   -1,  307,  308,  309,  310,
  311,   -1,   -1,   -1,   -1,   -1,   93,   -1,  319,  320,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  338,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,  125,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   91,  282,   93,   94,   37,   38,
  287,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,  311,   -1,  123,  124,  125,   -1,
  257,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   59,   60,
   61,   62,   -1,   -1,  123,  124,  125,   -1,   -1,   59,
   -1,   61,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,  338,   93,   94,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   37,   -1,
   -1,   -1,   41,   -1,   43,   44,   -1,   46,   47,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,  338,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,   -1,
  307,  308,  309,  310,  311,  124,  125,   -1,   -1,   -1,
   -1,   -1,  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  311,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  319,  320,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,
   -1,  271,  272,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  320,   -1,   -1,   -1,   -1,   -1,   -1,  338,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,   37,   38,
  309,  310,   41,   42,   43,   44,   45,   46,   47,   37,
   38,  320,   -1,   41,   42,   43,   44,   45,   46,   47,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,  338,
   -1,   59,   -1,   61,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   93,   47,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   59,   -1,   61,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   93,   -1,   59,   -1,   61,   -1,  124,  125,   40,   41,
   -1,   93,   44,   37,   -1,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   62,  124,  125,   -1,   -1,   59,   93,   61,   -1,   -1,
   -1,   37,  124,  125,   -1,   41,   42,   43,   44,   45,
   37,   47,   -1,   -1,   41,   42,   43,   44,   45,   91,
   47,   -1,   -1,   59,   -1,   61,   -1,  124,  125,   93,
   -1,   37,   59,   -1,   61,   41,   42,   43,   44,   45,
   -1,   47,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,   93,   -1,   41,
   59,  125,   44,   -1,   41,   -1,   93,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   59,   44,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   93,  257,  125,
   -1,   -1,   41,   59,   93,   44,   -1,   -1,  125,  257,
   -1,   -1,  271,  272,   41,   -1,   -1,   44,   -1,   -1,
   59,   93,   -1,  271,  272,   41,   93,   -1,   44,  125,
   -1,   -1,   59,   -1,  257,   -1,  125,   93,   -1,   -1,
   -1,   -1,   -1,   59,   41,  257,   -1,   44,  271,  272,
   -1,   -1,   -1,  125,   93,   -1,   -1,   -1,  125,  271,
  272,  320,   59,   -1,   41,   -1,   93,   44,   -1,  125,
  257,   -1,  320,   -1,   -1,   41,   -1,   93,   44,  338,
   -1,   -1,   59,   -1,  271,  272,  125,   -1,   -1,   -1,
  338,   -1,   -1,   59,   -1,  257,   93,  320,  125,   -1,
  262,   -1,   -1,  257,   41,   -1,   -1,   44,  320,  125,
   -1,  273,  274,   -1,   -1,  338,   93,  271,  272,   -1,
  282,   -1,   59,   -1,   -1,  287,  338,   93,  125,   41,
   -1,  257,   44,  320,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  271,  272,   59,  125,  311,
   -1,  338,   -1,   -1,  271,  272,   93,  319,   -1,  125,
   -1,  257,   -1,   -1,   -1,   -1,  320,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,   93,  271,  272,  338,  257,   -1,   38,  125,   -1,
  257,   42,   -1,   -1,  320,   -1,   -1,   -1,   -1,  271,
  272,  257,   -1,  320,  271,  272,   38,   -1,   59,   60,
   42,   -1,  338,  125,   -1,  271,  272,   -1,  257,   -1,
   -1,  338,   -1,   -1,  320,   -1,   -1,   -1,   60,   -1,
  257,  320,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  338,   -1,  271,  272,   -1,   -1,  320,  338,
   -1,   -1,   -1,  320,   -1,  271,  272,   -1,   -1,   38,
  257,   40,   41,   42,  320,   44,  338,   -1,   -1,   -1,
   -1,  338,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
  257,  320,  338,   62,   -1,   -1,   38,   -1,   40,   41,
   42,  257,   44,  320,  271,  272,   -1,   -1,   -1,  338,
   -1,   -1,   -1,   -1,  320,  271,  272,   -1,   -1,   -1,
   62,  338,   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  338,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   91,
   -1,  338,   -1,  320,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  320,   -1,   -1,   -1,   -1,  271,
  272,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,  338,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,   -1,  274,   91,   -1,  338,   94,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   38,   -1,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,   38,  305,   40,   41,  124,  125,   44,
  311,  312,  313,  314,   -1,  316,  317,   62,  319,   -1,
   -1,   -1,   -1,  305,   -1,   -1,   -1,   62,  257,  311,
  312,  313,  314,  262,  316,  317,   -1,  319,   -1,   -1,
   -1,   -1,   -1,   -1,  273,  274,   91,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,  257,   91,   -1,  287,   38,
  262,   40,   41,   42,   -1,   44,   -1,   -1,   38,   -1,
   40,   41,  274,   -1,   44,   38,  305,   40,   41,   42,
   -1,   44,  311,   62,   -1,  287,   -1,   -1,   -1,   -1,
  319,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   62,
   -1,   -1,   -1,  305,   -1,   -1,   -1,   -1,   -1,  311,
   -1,   -1,   91,   -1,   -1,   -1,   -1,  319,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,   -1,
  307,  308,  309,  310,  311,   -1,   -1,   91,   -1,   -1,
   94,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,  257,   40,   -1,   42,   43,  262,   45,   46,
   47,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,  274,
  124,  125,   59,   60,   61,   62,   -1,   -1,  273,  274,
   -1,   -1,  287,   -1,   33,   -1,   -1,  282,   37,   38,
   -1,   40,  287,   42,   43,   44,   45,   -1,   47,   -1,
  305,   -1,   -1,   -1,   91,   -1,  311,   94,   -1,   -1,
   -1,   60,   61,   62,  319,   -1,  311,   -1,  257,   -1,
   -1,   -1,   -1,  262,  319,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,  257,  274,   -1,  124,   -1,  262,
   -1,   -1,   91,  273,  274,   94,   -1,   -1,  287,   -1,
   -1,  274,  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,
   -1,   -1,   -1,   -1,  287,   -1,  305,   -1,   -1,   -1,
   -1,   -1,  311,   -1,   -1,  124,   -1,  126,   -1,   -1,
  319,  311,  305,   -1,   -1,   -1,   -1,   -1,  311,  319,
   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,  308,  309,  310,   -1,   91,   -1,
  314,   94,  316,  317,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  124,  125,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,  282,
   -1,  124,   60,   61,   62,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,  308,  309,  310,  124,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,  273,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
  282,   60,   61,   62,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,  257,   91,   -1,   93,   94,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   91,   -1,   93,   94,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   37,   38,  124,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   91,   37,   38,   94,   40,   -1,   42,   43,   -1,   45,
   46,   47,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   60,   61,   62,   91,  273,  274,
   94,   -1,   -1,  124,   -1,   -1,   -1,  282,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
  124,   60,   61,   62,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,  124,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   60,   61,
   62,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,  124,   -1,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,  124,   37,   91,
   -1,   40,   94,   -1,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   62,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  124,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,  124,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  282,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,
  312,  313,   -1,   -1,  124,   -1,   -1,  319,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  282,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  311,  312,  313,   -1,   -1,  124,   -1,   -1,  319,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,  124,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  282,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  311,  312,  313,   -1,   -1,  124,   -1,   -1,  319,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  282,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  311,  312,  313,   -1,   -1,  124,   -1,   -1,
  319,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   60,   -1,   62,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   94,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   37,   38,   94,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   -1,   37,   -1,   91,   -1,
   -1,   94,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   94,  265,  266,  267,  124,   -1,   -1,
   -1,   -1,  273,  274,   -1,   60,   -1,   62,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   94,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   94,   -1,
  307,  308,  309,  310,   60,   -1,   62,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   94,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   60,   -1,   62,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   60,   -1,   62,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   94,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   94,   -1,  307,  308,  309,  310,   60,
   -1,   62,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,  257,   60,   -1,   62,   -1,  262,   -1,  282,  265,
  266,  267,   -1,   94,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   60,  282,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   94,
  316,  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   94,   -1,  307,  308,  309,  310,   60,   -1,   62,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   60,   94,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   94,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  257,  307,  308,  309,
  310,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,
   -1,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,   -1,   -1,   -1,   -1,  311,  312,  313,  314,
  257,  316,  317,   -1,  319,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,
   -1,  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,
  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,   -1,   -1,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,   -1,   -1,   -1,   -1,
  311,  312,  313,  314,  257,  316,  317,   -1,  319,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,  257,   -1,   -1,
  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,   -1,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,   -1,   -1,  311,  312,  313,  314,  257,  316,
  317,   -1,  319,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,   -1,   -1,   -1,  311,  312,
  313,  314,  257,  316,  317,   -1,  319,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,   -1,   -1,   -1,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
   -1,   -1,  311,  312,  313,   -1,  257,   -1,   -1,   -1,
  319,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,  319,   -1,
   -1,   -1,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,  319,
};
static int yyctable[] = {                                      1,
    2,  185,  252,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  185,  252,
   -1,    7,    2,   -1,    8,    2,  185,  252,   -1,    9,
    2,  185,  252,   -1,   10,    2,  185,  252,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
   -1,   15,    2,  185,  252,   -1,   16,    2,  185,  252,
   -1,   17,    2,   -1,   18,    2,  185,  252,   -1,   19,
    2,   -1,   20,    2,   -1,   21,    2,   -1,   22,    2,
   -1,   23,    2,   -1,   24,    2,   -1,   25,    2,   -1,
   26,    2,   -1,   27,    2,   -1,   28,    2,   -1,   29,
    2,   -1,   30,    2,   -1,   31,    2,   -1,   32,    2,
  252,   -1,   33,    2,  252,   -1,   34,    2,  252,   -1,
   35,    2,  252,   -1,   36,    2,  252,   -1,   37,    2,
  252,   -1,   38,    2,  252,   -1,   39,    2,   -1,   40,
    2,   -1,   41,    2,   -1,   42,    2,   -1,   43,    2,
   -1,   44,    2,   -1,   45,    2,   -1,   46,    2,   -1,
   47,    2,   -1,   48,    2,   -1,  101,  185,  253,   -1,
    6,  185,  253,   -1,  102,  185,  253,   -1,  103,  185,
  253,   -1,  104,  185,  253,   -1,  105,   64,  185,  253,
   -1,   16,  185,  253,   -1,   18,   64,  185,  253,   -1,
  106,   64,   -1,   32,  253,   -1,   33,  253,   -1,  107,
  253,   -1,   38,  253,   -1,  111,  185,  252,   -1,  185,
  252,   -1,   32,  252,   -1,   38,  252,   -1,  115,   67,
   -1,    6,   67,   -1,   15,   67,   -1,  116,   67,   -1,
   18,   67,   -1,  115,  238,   -1,    6,  238,   -1,   15,
  238,   -1,  116,  238,   -1,   18,  238,   -1,  115,  239,
   -1,    6,  239,   -1,   15,  239,   -1,  116,  239,   -1,
   18,  239,   -1,  115,  240,   -1,    6,  240,   -1,   15,
  240,   -1,  116,  240,   -1,   18,  240,   -1,  115,   69,
   -1,    6,   69,   -1,   15,   69,   -1,  116,   69,   -1,
   18,   69,   -1,  115,  185,   -1,    6,  185,   -1,   15,
  185,   -1,  116,  185,   -1,   18,  185,   -1,  115,  177,
   -1,  183,  176,   -1,    1,  185,  252,   -1,    6,  185,
  252,   -1,    8,  185,  252,   -1,    9,  185,  252,   -1,
   10,  185,  252,   -1,   15,  185,  252,   -1,   16,  185,
  252,   -1,   18,  185,  252,   -1,   33,  252,   -1,   34,
  252,   -1,   35,  252,   -1,   36,  252,   -1,   37,  252,
   -1,  115,  320,   -1,   24,  320,   -1,   25,  320,   -1,
   26,  320,   -1,   27,  320,   -1,   28,  320,   -1,   31,
  320,   -1,  213,  125,   -1,   95,  125,   -1,  234,  252,
   -1,    6,  252,   -1,  235,  252,   -1,  236,  252,   -1,
  237,  252,   -1,   15,  252,   -1,  116,  252,   -1,   18,
  252,   -1,  290,  252,   -1,  174,  185,   -1,   32,  174,
   -1,   38,  174,   -1,  295,  252,   -1,  298,   33,   -1,
   64,  255,   -1,  301,  185,  252,   -1,  102,  185,  252,
   -1,  103,  185,  252,   -1,  104,  185,  252,   -1,  107,
  252,   -1,  308,   95,   -1,  212,   95,   -1,  310,  253,
   -1,  308,   68,   -1,  212,   68,   -1,  308,   97,   -1,
  212,   97,   -1,  308,   98,   -1,  212,   98,   -1,  308,
   99,   -1,  212,   99,   -1,  308,   65,   -1,  212,   65,
   -1,   70,   96,   -1,  308,   70,   96,   -1,  212,   70,
   96,   -1,  246,  272,   -1,  247,  272,   -1,  248,  272,
   -1,  249,  272,   -1,  250,  272,   -1,  251,  272,   -1,
  252,  272,   -1,  253,  272,   -1,  254,  272,   -1,  255,
  272,   -1,  256,  272,   -1,  257,  272,   -1,  258,  272,
   -1,  259,  272,   -1,  260,  272,   -1,  261,  272,   -1,
  262,  272,   -1,  263,  272,   -1,  264,  272,   -1,  265,
  272,   -1,  266,  272,   -1,  267,  272,   -1,  268,  272,
   -1,  269,  272,   -1,  270,  272,   -1,  271,  272,   -1,
  272,  272,   -1,  273,  272,   -1,  274,  272,   -1,  275,
  272,   -1,  276,  272,   -1,  277,  272,   -1,  278,  272,
   -1,  279,  272,   -1,  280,  272,   -1,  246,  274,   -1,
  247,  274,   -1,  248,  274,   -1,  249,  274,   -1,  250,
  274,   -1,  251,  274,   -1,  252,  274,   -1,  253,  274,
   -1,  254,  274,   -1,  255,  274,   -1,  256,  274,   -1,
  257,  274,   -1,  258,  274,   -1,  259,  274,   -1,  260,
  274,   -1,  261,  274,   -1,  262,  274,   -1,  263,  274,
   -1,  264,  274,   -1,  265,  274,   -1,  266,  274,   -1,
  267,  274,   -1,  268,  274,   -1,  269,  274,   -1,  270,
  274,   -1,  271,  274,   -1,  272,  274,   -1,  273,  274,
   -1,  274,  274,   -1,  275,  274,   -1,  276,  274,   -1,
  277,  274,   -1,  278,  274,   -1,  279,  274,   -1,  280,
  274,   -1,  246,  267,   -1,  247,  267,   -1,  248,  267,
   -1,  249,  267,   -1,  250,  267,   -1,  251,  267,   -1,
  252,  267,   -1,  253,  267,   -1,  254,  267,   -1,  255,
  267,   -1,  256,  267,   -1,  257,  267,   -1,  258,  267,
   -1,  259,  267,   -1,  260,  267,   -1,  261,  267,   -1,
  262,  267,   -1,  263,  267,   -1,  264,  267,   -1,  265,
  267,   -1,  266,  267,   -1,  267,  267,   -1,  268,  267,
   -1,  274,  267,   -1,  246,  270,   -1,  247,  270,   -1,
  248,  270,   -1,  249,  270,   -1,  250,  270,   -1,  251,
  270,   -1,  252,  270,   -1,  253,  270,   -1,  254,  270,
   -1,  255,  270,   -1,  256,  270,   -1,  257,  270,   -1,
  258,  270,   -1,  259,  270,   -1,  260,  270,   -1,  261,
  270,   -1,  262,  270,   -1,  263,  270,   -1,  264,  270,
   -1,  265,  270,   -1,  266,  270,   -1,  267,  270,   -1,
  268,  270,   -1,  274,  270,   -1,  246,  271,   -1,  247,
  271,   -1,  248,  271,   -1,  249,  271,   -1,  250,  271,
   -1,  251,  271,   -1,  252,  271,   -1,  253,  271,   -1,
  254,  271,   -1,  255,  271,   -1,  256,  271,   -1,  257,
  271,   -1,  258,  271,   -1,  259,  271,   -1,  260,  271,
   -1,  261,  271,   -1,  262,  271,   -1,  263,  271,   -1,
  264,  271,   -1,  265,  271,   -1,  266,  271,   -1,  267,
  271,   -1,  268,  271,   -1,  274,  271,   -1,  334,   64,
   -1,  246,  268,   -1,  247,  268,   -1,  248,  268,   -1,
  249,  268,   -1,  250,  268,   -1,  251,  268,   -1,  252,
  268,   -1,  253,  268,   -1,  254,  268,   -1,  255,  268,
   -1,  256,  268,   -1,  257,  268,   -1,  258,  268,   -1,
  259,  268,   -1,  260,  268,   -1,  261,  268,   -1,  262,
  268,   -1,  263,  268,   -1,  264,  268,   -1,  265,  268,
   -1,  266,  268,   -1,  267,  268,   -1,  268,  268,   -1,
  274,  268,   -1,  246,  269,   -1,  247,  269,   -1,  248,
  269,   -1,  249,  269,   -1,  250,  269,   -1,  251,  269,
   -1,  252,  269,   -1,  253,  269,   -1,  254,  269,   -1,
  255,  269,   -1,  256,  269,   -1,  257,  269,   -1,  258,
  269,   -1,  259,  269,   -1,  260,  269,   -1,  261,  269,
   -1,  262,  269,   -1,  263,  269,   -1,  264,  269,   -1,
  265,  269,   -1,  266,  269,   -1,  267,  269,   -1,  268,
  269,   -1,  274,  269,   -1,  246,  316,   -1,  247,  316,
   -1,  248,  316,   -1,  249,  316,   -1,  250,  316,   -1,
  251,  316,   -1,  252,  316,   -1,  253,  316,   -1,  254,
  316,   -1,  255,  316,   -1,  256,  316,   -1,  257,  316,
   -1,  258,  316,   -1,  259,  316,   -1,  260,  316,   -1,
  261,  316,   -1,  262,  316,   -1,  263,  316,   -1,  264,
  316,   -1,  265,  316,   -1,  266,  316,   -1,  267,  316,
   -1,  268,  316,   -1,  269,  316,   -1,  270,  316,   -1,
  271,  316,   -1,  272,  316,   -1,  273,  316,   -1,  274,
  316,   -1,  275,  316,   -1,  276,  316,   -1,  277,  316,
   -1,  278,  316,   -1,  279,  316,   -1,  280,  316,   -1,
  246,  317,   -1,  247,  317,   -1,  248,  317,   -1,  249,
  317,   -1,  250,  317,   -1,  251,  317,   -1,  252,  317,
   -1,  253,  317,   -1,  254,  317,   -1,  255,  317,   -1,
  256,  317,   -1,  257,  317,   -1,  258,  317,   -1,  259,
  317,   -1,  260,  317,   -1,  261,  317,   -1,  262,  317,
   -1,  263,  317,   -1,  264,  317,   -1,  265,  317,   -1,
  266,  317,   -1,  267,  317,   -1,  268,  317,   -1,  269,
  317,   -1,  270,  317,   -1,  271,  317,   -1,  272,  317,
   -1,  273,  317,   -1,  274,  317,   -1,  275,  317,   -1,
  276,  317,   -1,  277,  317,   -1,  278,  317,   -1,  279,
  317,   -1,  280,  317,   -1,  246,  319,   -1,  247,  319,
   -1,  248,  319,   -1,  249,  319,   -1,  250,  319,   -1,
  251,  319,   -1,  252,  319,   -1,  253,  319,   -1,  254,
  319,   -1,  255,  319,   -1,  256,  319,   -1,  257,  319,
   -1,  258,  319,   -1,  259,  319,   -1,  260,  319,   -1,
  261,  319,   -1,  262,  319,   -1,  263,  319,   -1,  264,
  319,   -1,  265,  319,   -1,  266,  319,   -1,  267,  319,
   -1,  268,  319,   -1,  269,  319,   -1,  270,  319,   -1,
  271,  319,   -1,  272,  319,   -1,  273,  319,   -1,  274,
  319,   -1,  275,  319,   -1,  276,  319,   -1,  277,  319,
   -1,  278,  319,   -1,  279,  319,   -1,  280,  319,   -1,
  111,  252,   -1,   32,  185,   -1,   38,  185,   -1,  378,
   64,  253,   -1,   64,  253,   -1,  198,  199,   -1,  286,
  198,   -1,  311,  196,   -1,  308,   70,   -1,  212,   70,
   -1,  115,  251,   -1,  455,   47,   -1,  456,   47,   -1,
  457,   47,   -1,  458,   47,   -1,  470,   64,   -1,  308,
   66,   -1,  212,   66,   -1,  246,  287,   -1,  247,  287,
   -1,  248,  287,   -1,  249,  287,   -1,  250,  287,   -1,
  251,  287,   -1,  252,  287,   -1,  253,  287,   -1,  254,
  287,   -1,  255,  287,   -1,  256,  287,   -1,  257,  287,
   -1,  258,  287,   -1,  259,  287,   -1,  260,  287,   -1,
  261,  287,   -1,  262,  287,   -1,  263,  287,   -1,  264,
  287,   -1,  265,  287,   -1,  266,  287,   -1,  267,  287,
   -1,  268,  287,   -1,  269,  287,   -1,  270,  287,   -1,
  271,  287,   -1,  272,  287,   -1,  273,  287,   -1,  274,
  287,   -1,  275,  287,   -1,  276,  287,   -1,  277,  287,
   -1,  278,  287,   -1,  279,  287,   -1,  280,  287,   -1,
  246,  288,   -1,  247,  288,   -1,  248,  288,   -1,  249,
  288,   -1,  250,  288,   -1,  251,  288,   -1,  252,  288,
   -1,  253,  288,   -1,  254,  288,   -1,  255,  288,   -1,
  256,  288,   -1,  257,  288,   -1,  258,  288,   -1,  259,
  288,   -1,  260,  288,   -1,  261,  288,   -1,  262,  288,
   -1,  263,  288,   -1,  264,  288,   -1,  265,  288,   -1,
  266,  288,   -1,  267,  288,   -1,  268,  288,   -1,  269,
  288,   -1,  270,  288,   -1,  271,  288,   -1,  272,  288,
   -1,  273,  288,   -1,  274,  288,   -1,  275,  288,   -1,
  276,  288,   -1,  277,  288,   -1,  278,  288,   -1,  279,
  288,   -1,  280,  288,   -1,  246,  289,   -1,  247,  289,
   -1,  248,  289,   -1,  249,  289,   -1,  250,  289,   -1,
  251,  289,   -1,  252,  289,   -1,  253,  289,   -1,  254,
  289,   -1,  255,  289,   -1,  256,  289,   -1,  257,  289,
   -1,  258,  289,   -1,  259,  289,   -1,  260,  289,   -1,
  261,  289,   -1,  262,  289,   -1,  263,  289,   -1,  264,
  289,   -1,  265,  289,   -1,  266,  289,   -1,  267,  289,
   -1,  268,  289,   -1,  269,  289,   -1,  270,  289,   -1,
  271,  289,   -1,  272,  289,   -1,  273,  289,   -1,  274,
  289,   -1,  275,  289,   -1,  276,  289,   -1,  277,  289,
   -1,  278,  289,   -1,  279,  289,   -1,  280,  289,   -1,
  246,  290,   -1,  247,  290,   -1,  248,  290,   -1,  249,
  290,   -1,  250,  290,   -1,  251,  290,   -1,  252,  290,
   -1,  253,  290,   -1,  254,  290,   -1,  255,  290,   -1,
  256,  290,   -1,  257,  290,   -1,  258,  290,   -1,  259,
  290,   -1,  260,  290,   -1,  261,  290,   -1,  262,  290,
   -1,  263,  290,   -1,  264,  290,   -1,  265,  290,   -1,
  266,  290,   -1,  267,  290,   -1,  268,  290,   -1,  269,
  290,   -1,  270,  290,   -1,  271,  290,   -1,  272,  290,
   -1,  273,  290,   -1,  274,  290,   -1,  275,  290,   -1,
  276,  290,   -1,  277,  290,   -1,  278,  290,   -1,  279,
  290,   -1,  280,  290,   -1,  246,  291,   -1,  247,  291,
   -1,  248,  291,   -1,  249,  291,   -1,  250,  291,   -1,
  251,  291,   -1,  252,  291,   -1,  253,  291,   -1,  254,
  291,   -1,  255,  291,   -1,  256,  291,   -1,  257,  291,
   -1,  258,  291,   -1,  259,  291,   -1,  260,  291,   -1,
  261,  291,   -1,  262,  291,   -1,  263,  291,   -1,  264,
  291,   -1,  265,  291,   -1,  266,  291,   -1,  267,  291,
   -1,  268,  291,   -1,  269,  291,   -1,  270,  291,   -1,
  271,  291,   -1,  272,  291,   -1,  273,  291,   -1,  274,
  291,   -1,  275,  291,   -1,  276,  291,   -1,  277,  291,
   -1,  278,  291,   -1,  279,  291,   -1,  280,  291,   -1,
  246,  292,   -1,  247,  292,   -1,  248,  292,   -1,  249,
  292,   -1,  250,  292,   -1,  251,  292,   -1,  252,  292,
   -1,  253,  292,   -1,  254,  292,   -1,  255,  292,   -1,
  256,  292,   -1,  257,  292,   -1,  258,  292,   -1,  259,
  292,   -1,  260,  292,   -1,  261,  292,   -1,  262,  292,
   -1,  263,  292,   -1,  264,  292,   -1,  265,  292,   -1,
  266,  292,   -1,  267,  292,   -1,  268,  292,   -1,  269,
  292,   -1,  270,  292,   -1,  271,  292,   -1,  272,  292,
   -1,  273,  292,   -1,  274,  292,   -1,  275,  292,   -1,
  276,  292,   -1,  277,  292,   -1,  278,  292,   -1,  279,
  292,   -1,  280,  292,   -1,  246,  293,   -1,  247,  293,
   -1,  248,  293,   -1,  249,  293,   -1,  250,  293,   -1,
  251,  293,   -1,  252,  293,   -1,  253,  293,   -1,  254,
  293,   -1,  255,  293,   -1,  256,  293,   -1,  257,  293,
   -1,  258,  293,   -1,  259,  293,   -1,  260,  293,   -1,
  261,  293,   -1,  262,  293,   -1,  263,  293,   -1,  264,
  293,   -1,  265,  293,   -1,  266,  293,   -1,  267,  293,
   -1,  268,  293,   -1,  269,  293,   -1,  270,  293,   -1,
  271,  293,   -1,  272,  293,   -1,  273,  293,   -1,  274,
  293,   -1,  275,  293,   -1,  276,  293,   -1,  277,  293,
   -1,  278,  293,   -1,  279,  293,   -1,  280,  293,   -1,
  246,  294,   -1,  247,  294,   -1,  248,  294,   -1,  249,
  294,   -1,  250,  294,   -1,  251,  294,   -1,  252,  294,
   -1,  253,  294,   -1,  254,  294,   -1,  255,  294,   -1,
  256,  294,   -1,  257,  294,   -1,  258,  294,   -1,  259,
  294,   -1,  260,  294,   -1,  261,  294,   -1,  262,  294,
   -1,  263,  294,   -1,  264,  294,   -1,  265,  294,   -1,
  266,  294,   -1,  267,  294,   -1,  268,  294,   -1,  269,
  294,   -1,  270,  294,   -1,  271,  294,   -1,  272,  294,
   -1,  273,  294,   -1,  274,  294,   -1,  275,  294,   -1,
  276,  294,   -1,  277,  294,   -1,  278,  294,   -1,  279,
  294,   -1,  280,  294,   -1,  246,  295,   -1,  247,  295,
   -1,  248,  295,   -1,  249,  295,   -1,  250,  295,   -1,
  251,  295,   -1,  252,  295,   -1,  253,  295,   -1,  254,
  295,   -1,  255,  295,   -1,  256,  295,   -1,  257,  295,
   -1,  258,  295,   -1,  259,  295,   -1,  260,  295,   -1,
  261,  295,   -1,  262,  295,   -1,  263,  295,   -1,  264,
  295,   -1,  265,  295,   -1,  266,  295,   -1,  267,  295,
   -1,  268,  295,   -1,  274,  295,   -1,  246,  296,   -1,
  247,  296,   -1,  248,  296,   -1,  249,  296,   -1,  250,
  296,   -1,  251,  296,   -1,  252,  296,   -1,  253,  296,
   -1,  254,  296,   -1,  255,  296,   -1,  256,  296,   -1,
  257,  296,   -1,  258,  296,   -1,  259,  296,   -1,  260,
  296,   -1,  261,  296,   -1,  262,  296,   -1,  263,  296,
   -1,  264,  296,   -1,  265,  296,   -1,  266,  296,   -1,
  267,  296,   -1,  268,  296,   -1,  274,  296,   -1,  246,
  297,   -1,  247,  297,   -1,  248,  297,   -1,  249,  297,
   -1,  250,  297,   -1,  251,  297,   -1,  252,  297,   -1,
  253,  297,   -1,  254,  297,   -1,  255,  297,   -1,  256,
  297,   -1,  257,  297,   -1,  258,  297,   -1,  259,  297,
   -1,  260,  297,   -1,  261,  297,   -1,  262,  297,   -1,
  263,  297,   -1,  264,  297,   -1,  265,  297,   -1,  266,
  297,   -1,  267,  297,   -1,  268,  297,   -1,  269,  297,
   -1,  270,  297,   -1,  271,  297,   -1,  272,  297,   -1,
  273,  297,   -1,  274,  297,   -1,  275,  297,   -1,  276,
  297,   -1,  277,  297,   -1,  278,  297,   -1,  279,  297,
   -1,  280,  297,   -1,  246,  298,   -1,  247,  298,   -1,
  248,  298,   -1,  249,  298,   -1,  250,  298,   -1,  251,
  298,   -1,  252,  298,   -1,  253,  298,   -1,  254,  298,
   -1,  255,  298,   -1,  256,  298,   -1,  257,  298,   -1,
  258,  298,   -1,  259,  298,   -1,  260,  298,   -1,  261,
  298,   -1,  262,  298,   -1,  263,  298,   -1,  264,  298,
   -1,  265,  298,   -1,  266,  298,   -1,  267,  298,   -1,
  268,  298,   -1,  269,  298,   -1,  270,  298,   -1,  271,
  298,   -1,  272,  298,   -1,  273,  298,   -1,  274,  298,
   -1,  275,  298,   -1,  276,  298,   -1,  277,  298,   -1,
  278,  298,   -1,  279,  298,   -1,  280,  298,   -1,  246,
  299,   -1,  247,  299,   -1,  248,  299,   -1,  249,  299,
   -1,  250,  299,   -1,  251,  299,   -1,  252,  299,   -1,
  253,  299,   -1,  254,  299,   -1,  255,  299,   -1,  256,
  299,   -1,  257,  299,   -1,  258,  299,   -1,  259,  299,
   -1,  260,  299,   -1,  261,  299,   -1,  262,  299,   -1,
  263,  299,   -1,  264,  299,   -1,  265,  299,   -1,  266,
  299,   -1,  267,  299,   -1,  268,  299,   -1,  274,  299,
   -1,  246,  300,   -1,  247,  300,   -1,  248,  300,   -1,
  249,  300,   -1,  250,  300,   -1,  251,  300,   -1,  252,
  300,   -1,  253,  300,   -1,  254,  300,   -1,  255,  300,
   -1,  256,  300,   -1,  257,  300,   -1,  258,  300,   -1,
  259,  300,   -1,  260,  300,   -1,  261,  300,   -1,  262,
  300,   -1,  263,  300,   -1,  264,  300,   -1,  265,  300,
   -1,  266,  300,   -1,  267,  300,   -1,  268,  300,   -1,
  269,  300,   -1,  270,  300,   -1,  271,  300,   -1,  272,
  300,   -1,  273,  300,   -1,  274,  300,   -1,  275,  300,
   -1,  276,  300,   -1,  277,  300,   -1,  278,  300,   -1,
  279,  300,   -1,  280,  300,   -1,  246,  301,   -1,  247,
  301,   -1,  248,  301,   -1,  249,  301,   -1,  250,  301,
   -1,  251,  301,   -1,  252,  301,   -1,  253,  301,   -1,
  254,  301,   -1,  255,  301,   -1,  256,  301,   -1,  257,
  301,   -1,  258,  301,   -1,  259,  301,   -1,  260,  301,
   -1,  261,  301,   -1,  262,  301,   -1,  263,  301,   -1,
  264,  301,   -1,  265,  301,   -1,  266,  301,   -1,  267,
  301,   -1,  268,  301,   -1,  269,  301,   -1,  270,  301,
   -1,  271,  301,   -1,  272,  301,   -1,  273,  301,   -1,
  274,  301,   -1,  275,  301,   -1,  276,  301,   -1,  277,
  301,   -1,  278,  301,   -1,  279,  301,   -1,  280,  301,
   -1,  246,  302,   -1,  247,  302,   -1,  248,  302,   -1,
  249,  302,   -1,  250,  302,   -1,  251,  302,   -1,  252,
  302,   -1,  253,  302,   -1,  254,  302,   -1,  255,  302,
   -1,  256,  302,   -1,  257,  302,   -1,  258,  302,   -1,
  259,  302,   -1,  260,  302,   -1,  261,  302,   -1,  262,
  302,   -1,  263,  302,   -1,  264,  302,   -1,  265,  302,
   -1,  266,  302,   -1,  267,  302,   -1,  268,  302,   -1,
  269,  302,   -1,  270,  302,   -1,  271,  302,   -1,  272,
  302,   -1,  273,  302,   -1,  274,  302,   -1,  275,  302,
   -1,  276,  302,   -1,  277,  302,   -1,  278,  302,   -1,
  279,  302,   -1,  280,  302,   -1,  246,  303,   -1,  247,
  303,   -1,  248,  303,   -1,  249,  303,   -1,  250,  303,
   -1,  251,  303,   -1,  252,  303,   -1,  253,  303,   -1,
  254,  303,   -1,  255,  303,   -1,  256,  303,   -1,  257,
  303,   -1,  258,  303,   -1,  259,  303,   -1,  260,  303,
   -1,  261,  303,   -1,  262,  303,   -1,  263,  303,   -1,
  264,  303,   -1,  265,  303,   -1,  266,  303,   -1,  267,
  303,   -1,  268,  303,   -1,  269,  303,   -1,  270,  303,
   -1,  271,  303,   -1,  272,  303,   -1,  273,  303,   -1,
  274,  303,   -1,  275,  303,   -1,  276,  303,   -1,  277,
  303,   -1,  278,  303,   -1,  279,  303,   -1,  280,  303,
   -1,  246,  305,   -1,  247,  305,   -1,  248,  305,   -1,
  249,  305,   -1,  250,  305,   -1,  251,  305,   -1,  252,
  305,   -1,  253,  305,   -1,  254,  305,   -1,  255,  305,
   -1,  256,  305,   -1,  257,  305,   -1,  258,  305,   -1,
  259,  305,   -1,  260,  305,   -1,  261,  305,   -1,  262,
  305,   -1,  263,  305,   -1,  264,  305,   -1,  265,  305,
   -1,  266,  305,   -1,  267,  305,   -1,  268,  305,   -1,
  274,  305,   -1,  246,  306,   -1,  247,  306,   -1,  248,
  306,   -1,  249,  306,   -1,  250,  306,   -1,  251,  306,
   -1,  252,  306,   -1,  253,  306,   -1,  254,  306,   -1,
  255,  306,   -1,  256,  306,   -1,  257,  306,   -1,  258,
  306,   -1,  259,  306,   -1,  260,  306,   -1,  261,  306,
   -1,  262,  306,   -1,  263,  306,   -1,  264,  306,   -1,
  265,  306,   -1,  266,  306,   -1,  267,  306,   -1,  268,
  306,   -1,  269,  306,   -1,  270,  306,   -1,  271,  306,
   -1,  272,  306,   -1,  273,  306,   -1,  274,  306,   -1,
  275,  306,   -1,  276,  306,   -1,  277,  306,   -1,  278,
  306,   -1,  279,  306,   -1,  280,  306,   -1,  246,  285,
   -1,  247,  285,   -1,  248,  285,   -1,  249,  285,   -1,
  250,  285,   -1,  251,  285,   -1,  252,  285,   -1,  253,
  285,   -1,  254,  285,   -1,  255,  285,   -1,  256,  285,
   -1,  257,  285,   -1,  258,  285,   -1,  259,  285,   -1,
  260,  285,   -1,  261,  285,   -1,  262,  285,   -1,  263,
  285,   -1,  264,  285,   -1,  265,  285,   -1,  266,  285,
   -1,  267,  285,   -1,  268,  285,   -1,  269,  285,   -1,
  270,  285,   -1,  271,  285,   -1,  272,  285,   -1,  273,
  285,   -1,  274,  285,   -1,  275,  285,   -1,  276,  285,
   -1,  277,  285,   -1,  278,  285,   -1,  279,  285,   -1,
  280,  285,   -1,  246,  286,   -1,  247,  286,   -1,  248,
  286,   -1,  249,  286,   -1,  250,  286,   -1,  251,  286,
   -1,  252,  286,   -1,  253,  286,   -1,  254,  286,   -1,
  255,  286,   -1,  256,  286,   -1,  257,  286,   -1,  258,
  286,   -1,  259,  286,   -1,  260,  286,   -1,  261,  286,
   -1,  262,  286,   -1,  263,  286,   -1,  264,  286,   -1,
  265,  286,   -1,  266,  286,   -1,  267,  286,   -1,  268,
  286,   -1,  269,  286,   -1,  270,  286,   -1,  271,  286,
   -1,  272,  286,   -1,  273,  286,   -1,  274,  286,   -1,
  275,  286,   -1,  276,  286,   -1,  277,  286,   -1,  278,
  286,   -1,  279,  286,   -1,  280,  286,   -1,  246,  276,
   -1,  247,  276,   -1,  248,  276,   -1,  249,  276,   -1,
  250,  276,   -1,  251,  276,   -1,  252,  276,   -1,  253,
  276,   -1,  254,  276,   -1,  255,  276,   -1,  256,  276,
   -1,  257,  276,   -1,  258,  276,   -1,  259,  276,   -1,
  260,  276,   -1,  261,  276,   -1,  262,  276,   -1,  263,
  276,   -1,  264,  276,   -1,  265,  276,   -1,  266,  276,
   -1,  267,  276,   -1,  268,  276,   -1,  274,  276,   -1,
  246,  277,   -1,  247,  277,   -1,  248,  277,   -1,  249,
  277,   -1,  250,  277,   -1,  251,  277,   -1,  252,  277,
   -1,  253,  277,   -1,  254,  277,   -1,  255,  277,   -1,
  256,  277,   -1,  257,  277,   -1,  258,  277,   -1,  259,
  277,   -1,  260,  277,   -1,  261,  277,   -1,  262,  277,
   -1,  263,  277,   -1,  264,  277,   -1,  265,  277,   -1,
  266,  277,   -1,  267,  277,   -1,  268,  277,   -1,  274,
  277,   -1,  246,  278,   -1,  247,  278,   -1,  248,  278,
   -1,  249,  278,   -1,  250,  278,   -1,  251,  278,   -1,
  252,  278,   -1,  253,  278,   -1,  254,  278,   -1,  255,
  278,   -1,  256,  278,   -1,  257,  278,   -1,  258,  278,
   -1,  259,  278,   -1,  260,  278,   -1,  261,  278,   -1,
  262,  278,   -1,  263,  278,   -1,  264,  278,   -1,  265,
  278,   -1,  266,  278,   -1,  267,  278,   -1,  268,  278,
   -1,  274,  278,   -1,  246,  279,   -1,  247,  279,   -1,
  248,  279,   -1,  249,  279,   -1,  250,  279,   -1,  251,
  279,   -1,  252,  279,   -1,  253,  279,   -1,  254,  279,
   -1,  255,  279,   -1,  256,  279,   -1,  257,  279,   -1,
  258,  279,   -1,  259,  279,   -1,  260,  279,   -1,  261,
  279,   -1,  262,  279,   -1,  263,  279,   -1,  264,  279,
   -1,  265,  279,   -1,  266,  279,   -1,  267,  279,   -1,
  268,  279,   -1,  274,  279,   -1,  246,  280,   -1,  247,
  280,   -1,  248,  280,   -1,  249,  280,   -1,  250,  280,
   -1,  251,  280,   -1,  252,  280,   -1,  253,  280,   -1,
  254,  280,   -1,  255,  280,   -1,  256,  280,   -1,  257,
  280,   -1,  258,  280,   -1,  259,  280,   -1,  260,  280,
   -1,  261,  280,   -1,  262,  280,   -1,  263,  280,   -1,
  264,  280,   -1,  265,  280,   -1,  266,  280,   -1,  267,
  280,   -1,  268,  280,   -1,  274,  280,   -1,  246,  283,
   -1,  247,  283,   -1,  248,  283,   -1,  249,  283,   -1,
  250,  283,   -1,  251,  283,   -1,  252,  283,   -1,  253,
  283,   -1,  254,  283,   -1,  255,  283,   -1,  256,  283,
   -1,  257,  283,   -1,  258,  283,   -1,  259,  283,   -1,
  260,  283,   -1,  261,  283,   -1,  262,  283,   -1,  263,
  283,   -1,  264,  283,   -1,  265,  283,   -1,  266,  283,
   -1,  267,  283,   -1,  268,  283,   -1,  269,  283,   -1,
  270,  283,   -1,  271,  283,   -1,  272,  283,   -1,  273,
  283,   -1,  274,  283,   -1,  275,  283,   -1,  276,  283,
   -1,  277,  283,   -1,  278,  283,   -1,  279,  283,   -1,
  280,  283,   -1,  246,  281,   -1,  247,  281,   -1,  248,
  281,   -1,  249,  281,   -1,  250,  281,   -1,  251,  281,
   -1,  252,  281,   -1,  253,  281,   -1,  254,  281,   -1,
  255,  281,   -1,  256,  281,   -1,  257,  281,   -1,  258,
  281,   -1,  259,  281,   -1,  260,  281,   -1,  261,  281,
   -1,  262,  281,   -1,  263,  281,   -1,  264,  281,   -1,
  265,  281,   -1,  266,  281,   -1,  267,  281,   -1,  268,
  281,   -1,  274,  281,   -1,  246,  282,   -1,  247,  282,
   -1,  248,  282,   -1,  249,  282,   -1,  250,  282,   -1,
  251,  282,   -1,  252,  282,   -1,  253,  282,   -1,  254,
  282,   -1,  255,  282,   -1,  256,  282,   -1,  257,  282,
   -1,  258,  282,   -1,  259,  282,   -1,  260,  282,   -1,
  261,  282,   -1,  262,  282,   -1,  263,  282,   -1,  264,
  282,   -1,  265,  282,   -1,  266,  282,   -1,  267,  282,
   -1,  268,  282,   -1,  274,  282,   -1,  246,  284,   -1,
  247,  284,   -1,  248,  284,   -1,  249,  284,   -1,  250,
  284,   -1,  251,  284,   -1,  252,  284,   -1,  253,  284,
   -1,  254,  284,   -1,  255,  284,   -1,  256,  284,   -1,
  257,  284,   -1,  258,  284,   -1,  259,  284,   -1,  260,
  284,   -1,  261,  284,   -1,  262,  284,   -1,  263,  284,
   -1,  264,  284,   -1,  265,  284,   -1,  266,  284,   -1,
  267,  284,   -1,  268,  284,   -1,  274,  284,   -1,  246,
  304,   -1,  247,  304,   -1,  248,  304,   -1,  249,  304,
   -1,  250,  304,   -1,  251,  304,   -1,  252,  304,   -1,
  253,  304,   -1,  254,  304,   -1,  255,  304,   -1,  256,
  304,   -1,  257,  304,   -1,  258,  304,   -1,  259,  304,
   -1,  260,  304,   -1,  261,  304,   -1,  262,  304,   -1,
  263,  304,   -1,  264,  304,   -1,  265,  304,   -1,  266,
  304,   -1,  267,  304,   -1,  268,  304,   -1,  274,  304,
   -1,  290,  185,  252,   -1,  246,  310,   -1,  247,  310,
   -1,  248,  310,   -1,  249,  310,   -1,  250,  310,   -1,
  251,  310,   -1,  252,  310,   -1,  253,  310,   -1,  254,
  310,   -1,  255,  310,   -1,  256,  310,   -1,  257,  310,
   -1,  258,  310,   -1,  259,  310,   -1,  260,  310,   -1,
  261,  310,   -1,  262,  310,   -1,  263,  310,   -1,  264,
  310,   -1,  265,  310,   -1,  266,  310,   -1,  267,  310,
   -1,  268,  310,   -1,  269,  310,   -1,  270,  310,   -1,
  271,  310,   -1,  272,  310,   -1,  273,  310,   -1,  274,
  310,   -1,  275,  310,   -1,  276,  310,   -1,  277,  310,
   -1,  278,  310,   -1,  279,  310,   -1,  280,  310,   -1,
  246,  318,   -1,  247,  318,   -1,  248,  318,   -1,  249,
  318,   -1,  250,  318,   -1,  251,  318,   -1,  252,  318,
   -1,  253,  318,   -1,  254,  318,   -1,  255,  318,   -1,
  256,  318,   -1,  257,  318,   -1,  258,  318,   -1,  259,
  318,   -1,  260,  318,   -1,  261,  318,   -1,  262,  318,
   -1,  263,  318,   -1,  264,  318,   -1,  265,  318,   -1,
  266,  318,   -1,  267,  318,   -1,  268,  318,   -1,  269,
  318,   -1,  270,  318,   -1,  271,  318,   -1,  272,  318,
   -1,  273,  318,   -1,  274,  318,   -1,  275,  318,   -1,
  276,  318,   -1,  277,  318,   -1,  278,  318,   -1,  279,
  318,   -1,  280,  318,   -1,  534,   64,   -1,  504,   83,
   -1,   13,   83,   -1,   14,   83,   -1,  506,   83,   -1,
   47,   83,   -1,  298,   79,   -1,  268,  249,   -1,
};
#define YYFINAL 49
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 348
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq",
"tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift",
"tknRShift","tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq",
"tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow",
"tknArrowStar","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew",
"tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1052 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3789 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 282 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4179 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 289 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4185 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4195 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4205 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4211 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4217 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4223 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4229 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4235 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4241 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4247 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4253 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4259 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4265 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4271 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4277 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4283 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4289 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4295 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4301 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4307 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4313 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4319 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4325 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4331 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4337 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4343 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4349 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4355 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4361 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4367 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4373 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 4379 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4388 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 337 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4397 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 343 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4406 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 347 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4415 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 353 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4424 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 357 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4433 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 363 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4441 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4449 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 371 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4457 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4465 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 379 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 4471 "y_tab.c"
break;
case 45:
  if (!yytrial)
#line 380 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 4477 "y_tab.c"
break;
case 46:
#line 383 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4482 "y_tab.c"
  if (!yytrial)
#line 383 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4489 "y_tab.c"
break;
case 47:
#line 387 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4494 "y_tab.c"
  if (!yytrial)
#line 387 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4501 "y_tab.c"
break;
case 48:
#line 391 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4506 "y_tab.c"
  if (!yytrial)
#line 391 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4513 "y_tab.c"
break;
case 49:
#line 395 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4518 "y_tab.c"
  if (!yytrial)
#line 395 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4525 "y_tab.c"
break;
case 50:
#line 399 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4530 "y_tab.c"
  if (!yytrial)
#line 399 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4537 "y_tab.c"
break;
case 51:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4542 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4549 "y_tab.c"
break;
case 52:
#line 409 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4554 "y_tab.c"
  if (!yytrial)
#line 409 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4558 "y_tab.c"
break;
case 53:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4563 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4567 "y_tab.c"
break;
case 54:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4572 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4576 "y_tab.c"
break;
case 55:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4581 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4585 "y_tab.c"
break;
case 56:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4590 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4594 "y_tab.c"
break;
case 57:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4599 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4603 "y_tab.c"
break;
case 58:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4608 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4612 "y_tab.c"
break;
case 59:
#line 423 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4617 "y_tab.c"
  if (!yytrial)
#line 423 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4621 "y_tab.c"
break;
case 60:
#line 424 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4626 "y_tab.c"
  if (!yytrial)
#line 424 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4630 "y_tab.c"
break;
case 61:
#line 427 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4635 "y_tab.c"
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4639 "y_tab.c"
break;
case 62:
#line 430 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4644 "y_tab.c"
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4648 "y_tab.c"
break;
case 63:
#line 431 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4653 "y_tab.c"
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4657 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4663 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4669 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4675 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4681 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4687 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 439 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4693 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4699 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4705 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4711 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4717 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4723 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 449 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4729 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4735 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4741 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4747 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 4753 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4759 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4768 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4777 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4785 "y_tab.c"
break;
case 84:
#line 470 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4790 "y_tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4796 "y_tab.c"
break;
case 85:
#line 473 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4801 "y_tab.c"
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4807 "y_tab.c"
break;
case 86:
#line 476 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4812 "y_tab.c"
  if (!yytrial)
#line 476 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4818 "y_tab.c"
break;
case 87:
#line 479 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4823 "y_tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4829 "y_tab.c"
break;
case 88:
#line 483 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4834 "y_tab.c"
  if (!yytrial)
#line 483 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4840 "y_tab.c"
break;
case 89:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4845 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4851 "y_tab.c"
break;
case 90:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4856 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4862 "y_tab.c"
break;
case 91:
#line 494 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4867 "y_tab.c"
  if (!yytrial)
#line 494 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4871 "y_tab.c"
break;
case 92:
#line 495 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4876 "y_tab.c"
  if (!yytrial)
#line 495 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4880 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4886 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4895 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 507 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4901 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 508 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4907 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4913 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 510 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4919 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 511 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4925 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 512 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4934 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 518 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4940 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 521 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4951 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 527 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4961 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 532 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4972 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 538 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4982 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 543 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4993 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 549 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 5003 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 558 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 5011 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 561 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 5019 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 564 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 5027 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 570 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 5035 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 573 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 5044 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 5052 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 582 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 5058 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 583 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5064 "y_tab.c"
break;
case 116:
#line 586 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5069 "y_tab.c"
  if (!yytrial)
#line 586 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5073 "y_tab.c"
break;
case 117:
#line 589 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5078 "y_tab.c"
  if (!yytrial)
#line 589 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 5086 "y_tab.c"
break;
case 118:
#line 596 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5091 "y_tab.c"
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5098 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 601 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5108 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 606 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5118 "y_tab.c"
break;
case 121:
#line 613 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5123 "y_tab.c"
  if (!yytrial)
#line 613 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5127 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 616 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5137 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5147 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5156 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5162 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5168 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5174 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5180 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5186 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5192 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5198 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5204 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5210 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5216 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5222 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5228 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5234 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5240 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5246 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5252 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5258 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5264 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5270 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5276 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5282 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5288 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5294 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5300 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5306 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5312 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5318 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5324 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5330 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5336 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5342 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5348 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5354 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5360 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5366 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5372 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5378 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5384 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5390 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5396 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5402 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5411 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5420 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5426 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5432 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5438 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5444 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5450 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5456 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 5462 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 5468 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 5474 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 5480 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 5486 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5492 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5498 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5504 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5510 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5516 "y_tab.c"
break;
case 184:
#line 707 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5521 "y_tab.c"
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5525 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5531 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5537 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5543 "y_tab.c"
break;
case 188:
#line 716 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5548 "y_tab.c"
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5552 "y_tab.c"
break;
case 189:
#line 722 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5557 "y_tab.c"
  if (!yytrial)
#line 723 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5565 "y_tab.c"
break;
case 190:
#line 728 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5570 "y_tab.c"
break;
case 191:
#line 732 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5575 "y_tab.c"
  if (!yytrial)
#line 733 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5582 "y_tab.c"
break;
case 192:
#line 737 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5587 "y_tab.c"
break;
case 193:
#line 741 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5592 "y_tab.c"
  if (!yytrial)
#line 742 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5599 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 746 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5608 "y_tab.c"
break;
case 195:
#line 753 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5620 "y_tab.c"
  if (!yytrial)
#line 761 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5626 "y_tab.c"
break;
case 196:
#line 764 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5631 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 765 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5639 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 768 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5648 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 774 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5654 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 775 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5660 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 776 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5666 "y_tab.c"
break;
case 202:
#line 779 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5671 "y_tab.c"
  if (!yytrial)
#line 779 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5675 "y_tab.c"
break;
case 203:
#line 782 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5680 "y_tab.c"
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5687 "y_tab.c"
break;
case 204:
#line 787 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5692 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 789 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5701 "y_tab.c"
break;
case 206:
#line 793 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5706 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 795 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5715 "y_tab.c"
break;
case 208:
#line 802 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5727 "y_tab.c"
  if (!yytrial)
#line 810 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5735 "y_tab.c"
break;
case 209:
#line 816 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5747 "y_tab.c"
  if (!yytrial)
#line 824 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5755 "y_tab.c"
break;
case 210:
#line 830 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5767 "y_tab.c"
  if (!yytrial)
#line 838 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5775 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 845 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5785 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 850 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5794 "y_tab.c"
break;
case 213:
#line 856 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5799 "y_tab.c"
  if (!yytrial)
#line 856 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5803 "y_tab.c"
break;
case 214:
#line 859 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5808 "y_tab.c"
  if (!yytrial)
#line 859 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5812 "y_tab.c"
break;
case 215:
#line 860 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5817 "y_tab.c"
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5821 "y_tab.c"
break;
case 216:
#line 861 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5826 "y_tab.c"
  if (!yytrial)
#line 861 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5830 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5836 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 865 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5842 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5848 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5854 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5860 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5866 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5872 "y_tab.c"
break;
case 224:
#line 877 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5877 "y_tab.c"
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5881 "y_tab.c"
break;
case 225:
#line 879 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5891 "y_tab.c"
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5897 "y_tab.c"
break;
case 226:
#line 891 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5902 "y_tab.c"
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5906 "y_tab.c"
break;
case 227:
#line 893 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5911 "y_tab.c"
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5924 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5933 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5939 "y_tab.c"
break;
case 230:
#line 911 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5944 "y_tab.c"
  if (!yytrial)
#line 911 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5948 "y_tab.c"
break;
case 231:
#line 912 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5953 "y_tab.c"
  if (!yytrial)
#line 912 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5957 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5963 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5969 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5975 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5981 "y_tab.c"
break;
case 236:
#line 921 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5986 "y_tab.c"
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5990 "y_tab.c"
break;
case 237:
#line 922 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5995 "y_tab.c"
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5999 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 6005 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 6011 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 6017 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 6023 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 6031 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6040 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6049 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6055 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 947 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6061 "y_tab.c"
break;
case 247:
#line 950 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6066 "y_tab.c"
  if (!yytrial)
#line 950 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6072 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6080 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6089 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 964 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6095 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 965 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6101 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 968 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 6107 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 969 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6113 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6119 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6125 "y_tab.c"
break;
case 256:
#line 974 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6130 "y_tab.c"
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6134 "y_tab.c"
break;
case 257:
#line 975 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6139 "y_tab.c"
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6143 "y_tab.c"
break;
case 258:
#line 976 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6148 "y_tab.c"
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6152 "y_tab.c"
break;
case 259:
#line 979 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6157 "y_tab.c"
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6161 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6167 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6173 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 986 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6179 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6185 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6191 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6197 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6203 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6209 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6215 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 993 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6221 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6227 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6233 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6239 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 997 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6245 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6251 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6257 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6263 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6269 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6275 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6281 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6287 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6293 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6299 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6305 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6311 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6317 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6323 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6329 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6335 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6341 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6347 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6353 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6359 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6365 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6371 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6377 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6383 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6389 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6395 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6401 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6407 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6413 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6419 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6425 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6431 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6437 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6443 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6449 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6455 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6461 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6467 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6473 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6479 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6485 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6491 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6497 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6503 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6509 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6515 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6521 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6527 "y_tab.c"
break;
case 321:
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6532 "y_tab.c"
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6536 "y_tab.c"
break;
#line 6538 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
