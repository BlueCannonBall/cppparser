#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   25,   25,   25,   25,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,   33,   33,   34,   34,   35,   35,   36,
   36,   32,   32,   66,   66,   61,   61,   61,   61,   61,
   61,   62,   63,   63,   64,   64,   64,   64,   64,   64,
   65,   29,   29,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    4,    4,   10,   10,   10,   10,   10,   11,
   11,   11,   11,    8,    8,    8,    8,    9,    9,    9,
   24,   24,   23,   22,    3,    3,    3,    3,    3,    3,
   15,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   13,   13,   13,   54,   54,   40,   41,    7,   37,   37,
   38,   39,   39,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   21,   21,   21,   17,   17,   17,   17,
   18,   18,   56,   56,   56,   56,   56,   56,   56,   55,
   55,   55,   55,   53,   53,   53,   43,   44,   67,   44,
   68,   44,   42,   69,   42,   48,   48,   48,   46,   47,
   70,   47,   71,   47,   45,   45,   45,   19,   19,   20,
   16,   16,   16,   50,   50,   51,   51,   52,   52,   52,
   27,   27,   72,   26,   57,   57,   57,   58,   58,   58,
   58,   12,   12,   49,   49,   49,   49,    1,    1,   59,
   59,   59,   28,   60,   60,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   31,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    7,    6,    8,    9,
   11,    0,    1,    1,    2,    4,    3,    4,    4,    4,
    4,    3,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    1,    1,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    3,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    2,    9,    8,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    0,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    0,
    2,    2,    3,    0,    1,    1,    2,    5,    0,   11,
    0,   13,    4,    0,    6,    0,    5,    6,    2,    4,
    0,   10,    0,   12,    4,    5,    7,    8,    8,    2,
    2,    2,    3,    0,    1,    1,    2,    0,    1,    2,
    2,    1,    0,    8,    0,    3,    4,    0,    1,    1,
    1,    3,    4,    1,    1,    1,    1,    0,    1,    2,
    2,    2,    4,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    4,    3,    4,    4,    7,    7,    7,    7,    3,    2,
    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  246,  247,  248,    0,    0,    0,    0,    0,    0,
  237,   62,   63,    0,    0,    0,   71,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,  114,    0,    0,    0,    0,  186,    0,    0,    0,
    0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
    0,  249,    3,   27,    8,    9,   12,    0,    0,    0,
    6,    0,    7,    0,    0,   10,    0,    0,   11,   26,
   13,    0,   14,   15,   16,   17,   18,    0,   19,    0,
   20,   21,    0,   22,   23,    0,   24,   25,    0,    0,
    0,    0,   28,   29,   30,   31,   32,    0,   64,    0,
    0,    0,    0,    0,  115,    0,    0,    0,  239,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  138,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,  155,  156,  157,  158,  160,  161,
  136,  137,  125,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  159,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  178,
  179,    0,    0,    0,    0,    0,    0,    0,   58,    0,
   60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  175,    0,  173,    0,    0,   72,    0,    0,
  216,    0,    0,    0,    0,    0,  211,  212,    0,  210,
    0,   92,   91,    0,    0,    0,    4,    5,  221,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  257,  259,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  305,  121,    0,  116,  187,    0,
    0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
    0,   45,    0,    0,    0,    0,  167,  165,    0,  170,
    0,  213,    0,  118,    0,    0,    0,    0,   80,    0,
    0,    0,    0,    0,  162,  163,    0,    0,  299,    0,
   61,    0,   52,   53,   54,   55,   56,   57,   59,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,    0,
    0,    0,    0,    0,  171,    0,  172,    0,    0,  217,
    0,    0,  103,    0,    0,    0,   93,  240,  241,  242,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  292,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  232,    0,    0,    0,    0,    0,    0,  201,    0,
  193,    0,    0,    0,   80,   90,    0,    0,  243,    0,
    0,    0,    0,  205,    0,    0,   46,   49,   50,   48,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  100,  107,    0,    0,    0,  293,  291,  117,
    0,    0,    0,  200,    0,    0,  233,    0,    0,  102,
    0,    0,    0,    0,    0,  166,    0,    0,   80,   88,
    0,    0,    0,    0,    0,    0,   81,   77,   78,    0,
    0,    0,    0,    0,    0,    0,   34,    0,    0,   36,
    0,    0,    0,    0,    0,  191,    0,  106,    0,    0,
    0,    0,  188,  229,  230,  231,    0,    0,  223,    0,
  105,    0,    0,  206,    0,    0,    0,  220,   94,    0,
    0,   80,   89,    0,   82,   84,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,   74,    0,    0,    0,
    0,  203,    0,    0,  197,    0,    0,    0,    0,    0,
  111,  104,  195,    0,    0,    0,    0,   87,    0,    0,
  295,  296,  297,  298,  207,   35,    0,   37,    0,    0,
  180,    0,    0,    0,    0,    0,  198,    0,    0,    0,
    0,    0,    0,    0,   85,    0,    0,   39,    0,    0,
    0,    0,    0,  208,  209,  224,  113,    0,  180,    0,
    0,   86,    0,   40,    0,    0,  181,  182,    0,    0,
    0,  112,    0,    0,  202,    0,  120,  183,    0,    0,
    0,  190,   41,  119,    0,    0,    0,  204,  192,
};
static int yydgoto[] = {                                      48,
   49,  168,   51,  117,   52,   53,   54,   55,   56,  467,
  408,   57,   58,   59,   60,   61,  288,  336,   62,   63,
  289,   64,   65,   66,   67,   68,   69,   70,   71,   72,
   73,  322,   74,   75,   76,   77,   78,   79,   80,   81,
   82,   83,   84,   85,   86,   87,   88,  271,   89,  402,
  403,  458,   90,   91,  580,   92,  446,  497,  228,  202,
   93,   94,   95,   96,   97,   98,  398,  531,  395,  455,
  564,  539,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,   76,    0,    0,    0,
    0,    0,    0,  654,    0,  -81,    0,   35,   69,  115,
  152, 6108, 4175, 4175, 4175, 4175, 4175, 4192, 4175,   25,
    0,    0,    0,    0, -254, -226,    0,  624,  188,  200,
  207, 3499, 4175, 3839,  429,    0, 4175,    0,  907,   92,
   12,    0,    0,    0,    0,    0,    0,  654,  460,  212,
    0,  158,    0,  285,  219,    0, 3420,  246,    0,    0,
    0, 6326,    0,    0,    0,    0,    0,  264,    0,  -24,
    0,    0,  370,    0,    0,  118,    0,    0,    0, 1358,
    0,  -17,    0,    0,    0,    0,    0,    0,    0,  654,
  654,  654,  371,    0,    0,  252,  278,  117,    0,  907,
  281, 1358,    0,    0,  293,   98,  250,    0,    0,    0,
    0,    0,    0,  117,  117,  117,  117,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  328,  288, 4175,   97,    0,    0,
  190,  190,  190,    0,  190,  190,  344, 6391,  155,    0,
    0,  153,  185,  208, -222,  224,  214,  226,    0,  238,
    0, 4175, 4175, 4175,    0,  180,    0,  383,    0,    0,
 7589,   22,    0,  484,    0,  117,  858,    0,    0,  654,
    0,  654,  531,  -91, 4175,    0,    0,    0,    0,    0,
  280,    0,    0,  480,  490,  491,    0,    0,    0, 4175,
 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175,
 4175, 4175, 4175, 4175, 4175, 4175,    0,    0, 4175, 4175,
 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175, 4175,
 4175, 3906, 4175, 4175,    0,    0,    0,    0,    0,  287,
   30,    0,    0,    0,  883,  -34,    0,  654,    0,  300,
  117,    0,    0,  305,  654,  492,    0,    0,  223,    0,
  654,    0,  484,    0,  521,    0,  654,  151,    0, 2303,
  505,  514,  527,  535,    0,    0,  542, 4175,    0,  553,
    0,  334,    0,    0,    0,    0,    0,    0,    0, 6418,
 7589,  545, 6609, 2392, 6326,  563, 4175, 4175,    0,  363,
  552,  590,    0,    0,    0,  572,    0,   97,   97,    0,
   97, 4007,    0, 7589,  521,  521,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    6,    6,
    0,    0, 1466,    0,    0,    0,    0,  190,    0,    0,
    0,  971,  971,    6,    6,    6,    0,   37,   37, 1466,
    0,  485, 6692,  190, 2471,  592,  381,    0, 2560,  613,
  -10,    0,  521,  -29,  599,  608,    0,  629,    0,    0,
    0,  642,  640,  -47,    0,    0,  654,  -25,    0,  643,
  646,  653,  656,    0,    0,  662,    0,    0,    0,    0,
    0, 3586, 4175, 3673,  365, 4175,    0, 7589,  663,  658,
  363, -108,    0,    0, 6718,  642,  642,    0,    0,    0,
 4175,  667, 2649,    0,  465,   49,    0,  642, 4023,    0,
    0,  674,  552,    0,  668,    0,  687,  493,    0,    0,
   20,   23,  686,    0,  776,  689,    0,    0,    0,    0,
 4175, 4175, 4175, 4175,  694,    0,    0,  700,    0,    0,
  725, 6753,  511,    0,  732,    0,  520,    0,  117,  117,
 6788, 4175,    0,    0,    0,    0,  654,  465,    0,  -57,
    0, 6827,  517,    0,  744,  544,  745,    0,    0,   79,
  726,    0,    0, 4175,    0,    0, 7099, 7125, 7160, 7195,
  532, 2728, 4175, 2817, 4175,    0,    0,  746,  555,  511,
  759,    0,  654,  654,    0, 7221,   97,  654,    0, 4110,
    0,    0,    0,    0,  742,  681,  751,    0,  194, 7589,
    0,    0,    0,    0,    0,    0,  764,    0, 7256,  772,
    0,  774,    0,  778,   82,   82,    0,   97, 2906,  117,
 7528,  570,   64,    0,    0,  760, 3752,    0,    0,  -55,
  780,  580,  781,    0,    0,    0,    0,  117,    0,    0,
 2985,    0,    0,    0,  603,  565,    0,    0,    0,  742,
  708,    0,  -55, 3074,    0, 3163,    0,    0,  605,   74,
    0,    0,    0,    0,    0, 3242, 3331,    0,    0,
};
static int yyrindex[] = {                                     53,
 6012,    0,    0,    0,  621, 4914,  717,    0,    0,    0,
    0,    0,    0,    0, 5921,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  486,
    0,    0,    0, 4726, 1005, 1104,    0,    0,    0,    0,
    0,    0,    0,    0, 5100,    0,    0,    0, 1490, 7554,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  843,  461,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   99,    0,    0,    0,    0,    0,    0,    0,
  718,  802,    0,    0,    0,    0,    0,  930,    0,    0,
    0,    0,    0,   31,    0,  819,    0, 1490,    0, 1490,
    0,    0, 4972, 4445,  723,    0,    0, 5806, 5822, 5979,
 4503, 9366, -112, 1490, 1490, 1490, 1490,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5030,  114,  123,
   95, 2658, 3172, 6298, 3926, 4572,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  788,    0, -112,    0,  581,    0,  914, 2980,
  -27,    0,    0,  536,    0, 1490,    0,    0,  621,    0,
    0,    0,    0,  609,    0,  297,    0,    0,  297,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -112,    0,    0,    0,
    0, -112,    0,  775,    0,    0, 4620,    0, 1267,    0,
 1490,    0,  657,    0,  611,  632,    0,    0,    0,    0,
    0,    0,    0,    0,  -30, 4561,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  716,    0,    0,    0,    0,    0,    0,    0,    0,
   28,    0,    0,    0,   34,    0,    0,    0,    0,  810,
    0,    0, 6231, 4632,    0,    0,    0,  631, 1053,    0,
 1108,    0,    0,  258,  647,  647,    0,    0,    0,    0,
 3429, 3591, 3641, 4068, 5250, 5384, 5474, 5480, 4377, 5404,
 5491, 5497, 5505, 5519, 5533, 5538, 5562, 5041, 5569, 5583,
 5588,   -4, 3757, 5415, 5441, 5469, 5616,  -14, 5379, 5659,
    0,    0,    0, 5368,    0,    0,    0, -112,    0,  140,
    0,    0, 4091,  609,    0,    0,  536,    0,    0, -114,
    0,  596, 5855,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5675,    0,    0,    0,    0,    0,
    0,    0,  788,    0,    0,    0, 5686,   40,    0,    0,
  810,    0,    0,    0,    0,  808,  808,    0,    0,    0,
    0,    0,    0,    0, 1037,    0,    0,  861,    0,    0,
   31,    0,    0,   31,    0,    0, 5848,    0,    0,    0,
    0,    0,  366,   78,    0,    0,    0,    0,    0,  125,
    0,    0,    0,    0,    0, -112,    0,    0, -112,    0,
    0,    0,  813,   31,    0,    0,    0,    0, 1189, 1189,
    0,    0,    0,    0,    0,    0,    0, 1037,    0,  256,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  814,    0,    0,    0,    0,    0,    0,  813,
    0,    0,    0,    0,    0,    0,  100,    0, -112,    0,
    0,    0,    0,   31,   99,    0,    0,    0,    0,  512,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   31,    0,  317,  317,    0,  106,    0,  256,
    0,    0,    0, -112,    0,    0,    0,    0,   31,  126,
    0,    0,    0,    0,    0,    0,    0,  256,    0, -112,
    0,    0, -112,    0,    0,    0,    0,    0,   31,   99,
    0,    0,  146,    0,    0,    0,    0,    0,    0,    0,
 -112,    0,    0,    0, -112,    0,    0,    0,    0,
};
static int yycindex[] = {                                   1021,
 1209,    0,    0,    0, 5768, 1206,    0, 1245, 1391, 1558,
    0,    0,    0,    0, 1645,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1744,
    0,    0, 4784,  730,    0,    0,    0,    0,    0,    0,
    0, 4860,    0,    0,  141,    0,    0,    0,    0,  253,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6066,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1812,    0,
 5916,  601,    0,    0,    0,    0,    0,  526,    0,    0,
    0,    0,    0,10183,    0,  108,    0,    0,    0,    0,
    0,    0, 1899,  116,    0,    0,    0,  138,  150,  165,
  204, 5780, 1120,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7624, 7650,
 4285, 6200, 9389,  860, 9412, 9435,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1283,    0, 7685,    0, 7957, 7983,
    0,    0,    0,  649,    0,    0,    0,    0, 5978,    0,
    0,    0,    0,    0,    0,  131,    0,    0,  173,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1374,    0,    0,    0,
    0, 1454,    0,  225,    0,    0,  199,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  251,    0,    0,    0, 7064,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7493,    0,    0,    0,    0,    0,    0,
    0,    0,  636,  271,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8018, 8053, 8079, 8114, 8386, 8412, 8447, 8482, 9459, 9520,
 8508, 8543, 9555, 8815, 8841, 8876, 8911, 9708, 8937, 8972,
 9244, 9735, 9770, 9805, 9828, 9851, 9270, 9874, 9897, 9923,
    0,    0,    0, 9958, 7922,    0,    0, 1541, 8351,    0,
    0,    0,    0,    0,    0,    0,  651,    0,    0,10194,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 9305,    0,    0,    0,    0,    0,
    0, 8780,    0, 9190,    0,    0, 9340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 9609,    0,    0,    0,    0,    0,    0,    0,
10205,    0,    0,10216,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -184,    0,    0,    0,    0,    0,  576,
    0,    0,    0,    0,    0, 1628,    0,    0, 1708,    0,
    0,    0,    0,10272,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9629,    0,10005,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1795,    0,
    0,    0,    0,10283,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10294,    0,    0,    0,    0,    0,10016,    0,
    0,    0,    0, 1882,    0,    0,10027,    0,10305,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1962,
10038,    0, 2049,    0,    0,    0,    0,    0,10361,    0,
    0,    0,    0,10094,    0,10105,    0,    0,    0,    0,
 2136,    0,    0,    0, 2216,10116,10127,    0,    0,
};
static int yygindex[] = {                                      0,
   27,    1,  -52, -315, -326,   50,    0,    0,    0,  449,
 -334,    0,   66,    3,  -84,    0,  515,    0,    0,    0,
 -130,    0,    0,    0, -101,    0,    0,    0,  -42,  634,
    0, -397,    0,    0,    0,    0,   16,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -465,    0, -111,
  863, -242,   43,    2,  331,  111,    0,  424,    0,  676,
    0,    0,    0,  296,    0,  372,    0,    0,    0,    0,
    0,    0,
};
#define YYTABLESIZE 10678
static int yytable[] = {                                     342,
   50,  106,  108,  107,  430,  596,  114,  214,  118,  119,
  120,  460,    2,  244,  121,  122,  244,  487,  464,  287,
  111,  300,  265,  265,  392,  478,  265,  265,  265,  265,
  265,  110,  265,  540,  268,  314,  260,  277,  260,  260,
  260,  123,   50,  259,  265,  262,  265,  112,  447,  212,
  205,  264,    2,  211,  260,  315,  260,   29,  214,  295,
  180,  449,   27,  464,   30,  328,   26,   50,   43,   25,
  461,  164, 4455,  387,  164,  459,  262,  244,  265,  573,
  245,  513,  264,  245, 4458, 4461,   43,  181,  260,  276,
  106,  196,  498,  324,  124,  177,  263,  244,  267,  466,
  118,  119,  120,  121,  106,  108,  286,  387,  280,  265,
  265,  205,  106,  296,  204,  275,  227,  387,  281,  290,
  260,   83,  464,   50,  510,  557,  505,  263,  125,  260,
  110,  251,  251, 4464,  610,  251,  251,  251,  251,  251,
  251,  251,  196,  226,  511,  512,  329,   47,  486,  227,
  167, 4467,  388,  251,  256,  251,  278,  256,  244,  206,
    2,    2,    2,  258,  245,  385,  258,  528,   79,  285,
  389,  499,  256,  278,  126,  293,  273,  549,  384,  291,
  387,  258,  381,  225,  123,  378,  590,  251,  208,  301,
  302,  303,  304,  489,  490,   50,  615,  238,   64,  238,
  238,  219,   83,  547,  122,  500,  256,  334,  407,  406,
  338,  127,  339,  341,  562,  258,  220,   31,  251,  251,
  206,  196,  226,  291,  337,   37,  214,  192,  227,  262,
  331,  463,  208,  436,  437,  110,  291,  464,  256,  193,
  272,  291,  265,   12,   13,  208,  194,  258,  123,   79,
  208,   31,  260,  597,  265,  265,  343,  598,  345,   37,
  291,  346,  225,  401,  260,  260,  400,   50,  122,  208,
  218,  332,   50,  405,  335,  391,  463,  223,  394,   31,
  263,  448,    2,    3,    4,  214,  443,   37,   12,   13,
  392,  334,  465,  291,  392,  184,  184,  404,  101,  184,
   50,  101,  208,  265,  229,   18,   19,   20,   21,   22,
   46,  209,  390,  260,  210,  287,  101,  184,  576,  393,
  503,  265,  266,  506,   50,    2,    2,    2,  221,   23,
   24,  260,  115,   31,  184,  463,  292,  465,  184,  294,
  116,   37,  238,  222,  238,  238,  397,   12,   13,  227,
  297,  251,  291,  529,  298,   46,  429,   43,   44,   45,
  184,  208,  207,  251,  251,  468,  287,  291,  305,  287,
  256,  208,  299,  227,  522,  184,  208,  524,  445,  258,
  306,   79,  256,  256,  308,   50,  451,  448,   50,   50,
   31,  258,  258,   79,   79,  454,  465,  369,   37,  287,
  106,  108,  286, 1398, 1401, 1404, 1407,  462,  457,   75,
   64,  310,  251,  572,   46,  290,  311,  460,  468,   64,
  463,  468,   50,  453,   50,   31,  110,  270,  269,  466,
  251,  256,  582,   37,  227,  469,  450,  569,  227, 1383,
  258,  312,   79,   50,  472,  372,  375, 1386,  595,  256,
  463,  106,  108,  286,  106,  108,  286,  485,  258,  287,
  222,   29,   12,   13,  313,  285,  290,  468,  609,  290,
  317,  477,  591,  480,  475,  327,   50,  110,  287,   50,
  110, 1383,  318,  478,  106,  108,  286,  316,  604, 1386,
   75,  606,  227,  222,  287, 1388,  284,  537,  222,  290,
  222,  319,  222,  216, 1388,  222,  468, 1383,  326,  616,
  110,  465,  184,  617,  287, 1386,  285,  184,  217,  285,
  215, 1392,   50,  330,   50,  438,  184,  184,  328,   46,
 1395,  533,  534,  565,  566,  184,  347,  348,  568,   50,
  184, 1413,  541,  386,  106,  108,  286,  349,  350,  285,
 1416,   47,  215,  184,  167,   76,  396,  543,  184,  290,
  400,  399,  211,  106,  108,  286,  410,  184,  184,   50,
  110,  227,  340,  227,   50,  411,  184,   50,  290,  106,
  108,  286,  414,  222,  545,  222,  222,  400,  412,  110,
   50,   50,  416,   50,  290,  561,  413,  421,  400,  106,
  108,  286,  426,  423,   50,  110,   50,  584,  585,  285,
  589,   50,  587,  400,  290,   50,   50,   50,  227,  109,
  600,  300,   75,  400,  300,  110,  594,  283,  285,  431,
  602,  441,    6,  433,   75,   75,   76,  442,  451,  300,
  227,   14,  113,  607,  285,  614,  400,  452,  400,  184,
   17,  169,  184,  227,  169,  227,  169,  170,  171,  172,
  173,  175,  176,  178,  285,  227,  227,  184,  454,  184,
  445,  110,  168,  300,  110,  168,  197,  199,  200,  457,
  201,  340,  471,   75,  214,  472,    2,    3,    4,  110,
    6,  110,  473,  481,   64,  474,  189,  484,   64,   14,
  113,   75,  475,  469,  483,  300,  492,  507,   17,   18,
   19,   20,   21,   22,  504,   47,   64,  222,  222,  222,
  222,  222,  222,  222,  508,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  494,  495,  496,
  222,  222,  222,  222,  222,  222,  514,  516,   47,  509,
  184,  184,  184,   47,  521,   47,  469,   47,  523,  469,
   47,   43,   44,   45,  525,  222,  222,  527,   76,  222,
  222,  222,  222,  530,  222,  222,  532,  222,  222,  470,
   76,   76,  222,  544,  548,  546,  560,   99,  222,  222,
  222,  555,    6,  222,  222,  222,  222,  238,  563,  270,
  175,   14,  113,  574,  577,  469,  238,  238,   99,  575,
   17,  579,   64,    6,  581,  238,   64,  583,  592,  599,
  238,  601,   14,  113,  608,  320,  321,  323,  325,   76,
  611,   17,  470,   64,   64,  470,   22,  300,   47,   73,
   47,   47,    1,  173,  469,   74,   42,   76,  344,  300,
  300,  238,  218,   73,   42,  319,   95,  420,   95,   95,
   95,  423,   95,  351,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   95,  470,  368,  369,  370,  371,  372,  373,  374,  375,
  376,  377,  378,  379,  380,  201,  383,  384,  300,  918,
  218,  218,  182,  214,  218, 1380, 1410, 1380,  214,   95,
   99, 4470,  515,  213,  456,    6,  300,  214,  214,  603,
  470,  538,  218,    0,   14,  113,  214,   64,    0,   33,
  238,  238,  238,   17,  238,  238,   64,  382,    0,    0,
    0,  415,  183,  184,  185,  186,  187,  188,  189,  190,
  191,  218,    0,    0,  301,  214,    0,  301,    0,   64,
  427,  428,   33,  214,    0,    0,    0,   33,    0,   33,
    0,   33,  301,    0,   33,  435,   47,   47,   47,    0,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,    0,    0,    0,   47,   47,   47,   47,   47,
   47,    0,    0,    0,    0,    0,  301,  257,  259,    0,
  262,    0,  255,    0,    0,    0,  264,  256,    0,    0,
   47,   47,    0,    0,   47,   47,   47,   47,    0,   47,
   47,  239,   47,   47,    0,    0,  239,   47,  301,  239,
  239,  239,    0,   47,   47,   47,  239,    0,   47,   47,
   47,   47,   33,  100,   33,   33,  321,    0,   94,  482,
  103,  263,   91,  238,  218,   88,  238,  238,  238,  218,
    0,    0,  238,  238,  491,   95,    0,   64,  218,  218,
   95,  238,  502,  239,  239,  239,  239,  218,  239,  239,
   95,  239,    0,  109,  260,    0,  109,  186,  187,  188,
  189,  190,  191,   95,  517,  518,  519,  520,    0,  325,
  238,  109,  325,  109,  333,    0,  218,  218,  238,    6,
    0,   95,  218,    0,  218,  536,    0,   95,   14,  113,
  174,  218,  218,    0,    0,   95,    0,   17,    0,  390,
  218,    0,    0,  161,    6,  218,   97,  550,  108,    0,
    0,  108,  100,   14,  113,    0,  321,   94,  559,  103,
    0,   91,   17,    0,   88,    0,  108,    0,  108,  218,
  301,    0,    0,  571,    0,    0,    0,  218,    0,    0,
    0,    0,  301,  301,    0,    0,   33,   33,   33,   33,
   33,   33,   33,    0,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,    0,    0,    0,   33,
   33,   33,   33,   33,   33,   31,   32,   33,  203,    0,
   35,   36,    0,   37,    0,    0,  325,    0,    0,  177,
    0,  301,    0,    0,   33,   33,    0,    0,   33,   33,
   33,   33,  161,   33,   33,   97,   33,   33,  198,  301,
    0,   33,    0,    0,    0,    0,    0,   33,   33,   33,
    0,  174,   33,   33,   33,    0,  174,    0,    0,  174,
  174,  174,    0,    0,    0,  174,  174,    0,    5,    8,
   11,   14,   17,   22,  174,   25,   30,   35,   40,   43,
   46,   49,   54,  228,    0,    0,   59,    0,  228,    0,
   62,   67,   70,   73,   76,   79,  194,  228,  228,    0,
    0,    0,    0,  174,    0,  100,  228,    0,    0,    0,
   94,  174,  103,    0,   91,   82,   85,   88,    0,  106,
  110,  114,  118,    0,  122,  126,    0,  130,  134,    0,
    0,    0,  137,    0,    0,    0,    0,    0,  140,  143,
  146,    0,    0,  149,  152,  155,  158,    0,    0,    0,
  177,    0,    0,    0,    0,  177,    0,    0,  177,  177,
  177,    0,    0,    0,  177,  177,    0,    5,    8,   11,
   14,   17,   22,  177,   25,   30,   35,   40,   43,   46,
   49,   54,    0,    0,    0,   59,    0,    0,    0,   62,
   67,   70,   73,   76,   79,  161,  100,    0,   97,    0,
    0,   94,  177,  103,    0,   91,    0,    0,   88,    0,
  177,    0,    0,    0,   82,   85,    0,    0,  106,  110,
  114,  118,    0,  122,  126,    0,  130,  134,    0,    0,
    0,  137,    0,    0,    0,  184,    0,  140,  143,  146,
  184,    0,  149,  152,  155,  158,    0,    0,    0,  184,
  184,    0,  226,    0,    0,  164,    0,  229,  184,    0,
  168,    0,    0,  172,  176,  180,  232,  235,    0,  184,
  189,    0,    0,    0,    0,  238,  100,    0,  193,    0,
    0,   94,    0,  103,    0,   91,  161,    0,   88,   97,
    0,  241,  257,  259,    0,  262,  244,  255,  253,    0,
  254,  264,  256,    0,    0,  247,  250,  201,  204,  207,
    0,    0,    0,  239,  253,  210,  261,    0,  239,    0,
    0,  239,  239,  239,    0,    0,    0,  239,  239,    0,
    5,    8,   11,   14,   17,   22,  239,   25,   30,   35,
   40,   43,   46,   49,   54,    0,  263,    0,   59,    0,
    0,    0,   62,   67,   70,   73,   76,   79,    0,    0,
    0,    0,    0,  100,    0,  239,  161,    0,   94,   97,
  103,    0,   91,  239,    0,   88,    0,   82,   85,  260,
    0,  106,  110,  114,  118,    0,  122,  126,    0,  130,
  134,    0,    0,    0,  137,    0,    0,    0,    0,    0,
  140,  143,  146,    0,   99,  149,  152,  155,  158,    6,
    0,    0,  100,  101,  102,    0,    0,    0,   14,   15,
    0,    5,    8,   11,   14,   17,   22,   17,   25,   30,
   35,   40,   43,   46,   49,   54,    0,  256,    0,   59,
    0,    0,  259,   62,   67,   70,   73,   76,   79,    0,
  100,  262,  265,  161,    0,   94,   97,  103,    0,   91,
  268,    0,   88,    0,    0,    0,    0,    0,   82,   85,
    0,    0,  106,  110,  114,  118,    0,  122,  126,    0,
  130,  134,    0,    0,    0,  137,    0,    0,    0,    0,
    0,  140,  143,  146,    0,    0,  149,  152,  155,  158,
    0,    5,    8,   11,   14,   17,   22,    0,   25,   30,
   35,   40,   43,   46,   49,   54,    0,    0,    0,   59,
    0,    0,    0,   62,   67,   70,   73,   76,   79,    0,
  100,    0,    0,    0,    0,   94,  184,  103,    0,   91,
  161,  184,   88,   97,  184,  184,  184,    0,   82,   85,
  184,  184,  106,  110,  114,  118,    0,  122,  126,  184,
  130,  134,    0,    0,    0,  137,    0,    0,    0,    0,
    0,  140,  143,  146,    0,    0,  149,  152,  155,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    5,    8,
   11,   14,   17,   22,    0,   25,   30,   35,   40,   43,
   46,   49,   54,    0,  271,    0,   59,    0,    0,  274,
   62,   67,   70,   73,   76,   79,    0,  100,  277,  280,
  161,    0,   94,   97,  103,    0,   91,  283,    0,   88,
    0,    0,    0,    0,    0,   82,   85,    0,    0,  106,
  110,  114,  118,    0,  122,  126,    0,  130,  134,    0,
    0,    0,  137,    0,    0,    0,    0,    0,  140,  143,
  146,    0,    0,  149,  152,  155,  158,    0,    0,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,   46,   49,   54,
    0,  286,    0,   59,    0,    0,  289,   62,   67,   70,
   73,   76,   79,    0,  100,  292,  295,  161,    0,   94,
   97,  103,    0,   91,  298,    0,   88,    0,    0,    0,
    0,    0,   82,   85,    0,    0,  106,  110,  114,  118,
    0,  122,  126,    0,  130,  134,    0,    0,    0,  137,
    0,    0,    0,    0,    0,  140,  143,  146,    0,    0,
  149,  152,  155,  158,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,   46,   49,   54,
    0,    0,    0,   59,    0,    0,    0,   62,   67,   70,
   73,   76,   79,    0,  100,    0,    0,    0,    0,   94,
  301,  103,    0,   91,  161,  304,   88,   97,    0,    0,
    0,    0,   82,   85,  307,  310,  106,  110,  114,  118,
    0,  122,  126,  313,  130,  134,    0,    0,    0,  137,
    0,    0,    0,    0,    0,  140,  143,  146,    0,    0,
  149,  152,  155,  158,    0,    0,    0,    0,    0,    0,
    0,    0,    5,    8,   11,   14,   17,   22,    0,   25,
   30,   35,   40,   43,   46,   49,   54,    0,  396,    0,
   59,    0,    0,  399,   62,   67,   70,   73,   76,   79,
    0,  100,  402,  405,  161,    0,   94,   97,  103,    0,
   91,  408,    0,   88,    0,    0,    0,    0,    0,   82,
   85,    0,    0,  106,  110,  114,  118,    0,  122,  126,
    0,  130,  134,    0,    0,    0,  137,    0,    0,    0,
    0,    0,  140,  143,  146,    0,    0,  149,  152,  155,
  158,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,  286,    0,   59,    0,    0,
  289,   62,   67,   70,   73,   76,   79,    0,  100,  292,
  295,  161,    0,   94,   97,  103,    0,   91,  298,    0,
   88,    0,    0,    0,    0,    0,   82,   85,    0,    0,
  106,  110,  114,  118,    0,  122,  126,    0,  130,  134,
    0,    0,    0,  137,    0,    0,    0,    0,    0,  140,
  143,  146,    0,    0,  149,  152,  155,  158,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   70,   73,   76,   79,    0,  100,    0,
    0,    0,    0,   94,    0,  103,    0,   91,  161,    0,
   88,   97,    0,    0,    0,    0,   82,   85,    0,    0,
  106,  110,  114,  118,    0,  122,  126,    0,  130,  134,
    0,    0,    0,  137,    0,    0,    0,    0,    0,  140,
  143,  146,    0,    0,  149,  152,  155,  158,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,    0,   29,    0,    0,  161,    0,
   27,   97,   30,    0,   26,    0,    0,   25,    0,    0,
    0,    0,    0,   82,   85,    0,    0,  106,  110,  114,
  118,    0,  122,  126,    0,  130,  134,    0,    0,    0,
  137,    0,    0,    0,    0,    0,  140,  143,  146,    0,
    0,  149,  152,  155,  158,    0,    0,    0,    0,    0,
    0,    0,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,   46,   49,   54,    0,    0,
    0,   59,    0,    0,    0,   62,   67,   70,   73,   76,
   79,    0,    0,    0,   29,   47,    0,  409,   28,   27,
    0,   30,    0,   26,    0,    0,   25,    0,    0,    0,
   82,   85,    0,    0,  106,  110,  114,  118,    0,  122,
  126,    0,  130,  134,    0,    0,    0,  137,    0,    0,
    0,    0,    0,  140,  143,  146,    0,    0,  149,  152,
  155,  158,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,   46,   49,   54,    0,    0,
    0,   59,    0,    0,    0,   62,   67,   70,   73,   76,
   79,    0,    0,   29,    0,    0,    0,    0,   27,    0,
   30,    0,   26,    0,   47,   25,  425,   28,    0,    0,
   82,   85,    0,    0,  106,  110,  114,  118,    0,  122,
  126,    0,  130,  134,    0,    0,    0,  137,    0,    0,
    0,    0,    0,  140,  143,  146,    0,    0,  149,  152,
  155,  158,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,   13,    0,    0,  224,  225,  226,   16,    0,
    0,    0,    0,   18,   19,   20,   21,   22,    0,    0,
    0,    0,   29,   47,    0,  440,   28,   27,    0,   30,
    0,   26,    0,    0,   25,    0,    0,   23,   24,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,   39,    0,    0,    0,    0,    0,
   40,   41,   42,    0,    0,   43,   44,   45,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,   13,    0,    0,  224,  225,  226,   16,    0,    0,
    0,    0,   18,   19,   20,   21,   22,    0,    0,    0,
    0,   29,   47,    0,  444,   28,   27,    0,   30,    0,
   26,    0,    0,   25,  254,  254,   23,   24,  254,  254,
  254,  254,  254,  254,  254,    0,    0,    0,    0,   38,
    0,    0,    0,   39,    0,    0,  254,    0,  254,   40,
   41,   42,    0,    0,   43,   44,   45,   46,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
   13,    0,    0,  224,  225,  226,   16,    0,    0,    0,
  254,   18,   19,   20,   21,   22,    0,    0,    0,    0,
   29,    0,    0,    0,    0,   27,    0,   30,    0,   26,
    0,   47,   25,  493,   28,   23,   24,    0,    0,    0,
    0,  254,  254,    0,    0,    0,    0,    0,   38,    0,
    0,    0,   39,    0,    0,    0,    0,    0,   40,   41,
   42,    0,    0,   43,   44,   45,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,   13,
    0,    0,  224,  225,  226,   16,    0,    0,    0,    0,
   18,   19,   20,   21,   22,    0,    0,    0,    0,   29,
   47,    0,  556,   28,   27,    0,   30,    0,   26,    0,
    0,   25,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,    0,   40,   41,   42,
    0,    0,   43,   44,   45,   46,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,  254,    0,   11,   12,   13,    0,
    0,  224,  225,  226,   16,    0,  254,  254,    0,   18,
   19,   20,   21,   22,    0,    0,    0,    0,   29,   47,
    0,  558,   28,   27,    0,   30,    0,   26,    0,    0,
   25,    0,    0,   23,   24,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
   39,    0,    0,    0,    0,  254,   40,   41,   42,    0,
    0,   43,   44,   45,   46,    2,    3,    4,    5,    0,
    7,    0,    0,  254,    0,   11,   12,   13,    0,    0,
  224,  225,  226,   16,    0,    0,    0,    0,   18,   19,
   20,   21,   22,    0,    0,    0,    0,   29,    0,    0,
  303,    0,   27,  303,   30,    0,   26,    0,   47,   25,
  586,   28,   23,   24,    0,    0,    0,    0,  303,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,   39,
    0,    0,    0,    0,    0,   40,   41,   42,    0,    0,
   43,   44,   45,   46,    0,    0,    0,    0,    0,    0,
    0,    0,  303,    0,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,   13,    0,    0,  224,
  225,  226,   16,    0,    0,    0,    0,   18,   19,   20,
   21,   22,    0,    0,  303,    0,   29,   47,    0,  605,
   28,   27,    0,   30,    0,   26,    0,    0,   25,    0,
    0,   23,   24,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,   39,    0,
    0,    0,    0,    0,   40,   41,   42,    0,    0,   43,
   44,   45,   46,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,   13,    0,    0,  224,  225,
  226,   16,    0,    0,    0,    0,   18,   19,   20,   21,
   22,    0,    0,    0,    0,   29,   47,    0,  612,   28,
   27,    0,   30,    0,   26,    0,    0,   25,  255,  255,
   23,   24,  255,  255,  255,  255,  255,  255,  255,    0,
    0,    0,    0,   38,    0,    0,    0,   39,    0,    0,
  255,    0,  255,   40,   41,   42,  303,    0,   43,   44,
   45,   46,    2,    3,    4,    5,    0,    7,  303,  303,
    0,    0,   11,   12,   13,    0,    0,  224,  225,  226,
   16,    0,    0,    0,  255,   18,   19,   20,   21,   22,
    0,    0,    0,    0,   29,    0,    0,    0,    0,   27,
    0,   30,    0,   26,    0,   47,   25,  613,   28,   23,
   24,    0,    0,    0,    0,  255,  255,  303,    0,    0,
    0,    0,   38,    0,    0,    0,   39,    0,    0,    0,
    0,    0,   40,   41,   42,  303,    0,   43,   44,   45,
   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,   13,    0,    0,  224,  225,  226,   16,
    0,    0,    0,    0,   18,   19,   20,   21,   22,    0,
    0,    0,    0,   29,   47,    0,  618,   28,   27,    0,
   30,    0,   26,    0,    0,   25,    0,    0,   23,   24,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,   39,    0,    0,    0,    0,
    0,   40,   41,   42,    0,    0,   43,   44,   45,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,  255,    0,
   11,   12,   13,    0,    0,  224,  225,  226,   16,    0,
  255,  255,    0,   18,   19,   20,   21,   22,    0,    0,
    0,    0,   29,   47,    0,  619,   28,   27,    0,   30,
    0,   26,    0,    0,   25,    0,    0,   23,   24,  271,
    0,    0,  271,    0,    0,    0,    0,    0,    0,    0,
   38,    0,    0,    0,   39,    0,    0,  271,    0,  255,
   40,   41,   42,    0,    0,   43,   44,   45,   46,    2,
    3,    4,    5,    0,    7,    0,    0,  255,    0,   11,
   12,   13,    0,    0,  224,  225,  226,   16,    0,    0,
    0,  271,   18,   19,   20,   21,   22,    0,    0,    0,
    0,   29,    0,    0,    0,    0,   27,    0,   30,    0,
   26,    0,   47,   25,    0,   28,   23,   24,    0,    0,
    0,    0,    0,  271,    0,    0,    0,    0,    0,   38,
    0,    0,    0,   39,    0,    0,    0,    0,    0,   40,
   41,   42,    0,    0,   43,   44,   45,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
   13,    0,    0,  224,  225,  226,   16,    0,    0,    0,
    0,   18,   19,   20,   21,   22,    0,    0,   29,    0,
    0,  195,    0,   27,   28,   30,    0,   26,    0,    0,
   25,  272,    0,    0,  272,   23,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,  272,
    0,    0,   39,    0,    0,    0,    0,    0,   40,   41,
   42,    0,    0,   43,   44,   45,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,  273,    7,  272,  273,  271,    0,   11,   12,   13,
    0,    0,  224,  225,  226,   16,    0,  271,  271,  273,
   18,   19,   20,   21,   22,   29,    0,    0,  476,    0,
   27,   28,   30,    0,   26,  272,    0,   25,    0,    0,
    0,    0,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    0,    0,  273,    0,    0,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,  271,   40,   41,   42,
    0,    0,   43,   44,   45,   46,    2,    3,    4,    5,
    0,    7,    0,    0,  271,  273,   11,   12,   13,    0,
    0,    0,    0,    0,   16,    0,    0,    0,    0,   18,
   19,   20,   21,   22,   29,    0,    0,    0,    0,   27,
    0,   30,    0,   26,    0,  479,   25,  261,   28,  261,
  261,  261,    0,   23,   24,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  261,   38,  261,    0,    0,
   39,    0,    0,    0,    0,    0,   40,   41,   42,    0,
    0,   43,   44,   45,   46,    0,    0,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,  272,    7,  261,
    0,    0,    0,   11,   12,   13,    0,    0,    0,  272,
  272,   16,    0,    0,    0,    0,   18,   19,   20,   21,
   22,   29,    0,    0,  593,    0,   27,   28,   30,    0,
   26,  261,    0,   25,    0,    0,    0,    0,    0,    0,
   23,   24,    0,    0,    0,    0,    0,  273,    0,    0,
    0,    0,    0,   38,    0,    0,    0,   39,  272,  273,
  273,    0,    0,   40,   41,   42,    0,    0,   43,   44,
   45,   46,    0,    0,    0,    0,  272,    0,    0,  198,
    2,    3,    4,    5,    0,    7,    0,    0,   29,    0,
   11,   12,   13,   27,    0,   30,  381,   26,   16,    0,
   25,    0,    0,   18,   19,   20,   21,   22,  273,    0,
    0,   47,  252,  252,  167,    0,  252,  252,  252,  252,
  252,  252,  252,    0,    0,    0,  273,   23,   24,    0,
    0,    0,    0,    0,  252,    0,  252,    0,    0,    0,
   38,    0,    0,    0,   39,    0,    0,    0,    0,    0,
   40,   41,   42,    0,    0,   43,   44,   45,   46,    2,
    3,    4,    5,  261,    7,    0,    0,    0,  252,   11,
   12,   13,    0,    0,    0,  261,  261,   16,   47,    0,
    0,  167,   18,   19,   20,   21,   22,    0,    0,   29,
    0,    0,    0,    0,   27,    0,   30,    0,   26,  252,
  252,   25,    0,    0,    0,   29,   23,   24,    0,    0,
   27,    0,   30,    0,   26,    0,    0,   25,    0,   38,
    0,    0,    0,   39,  261,    0,    0,    0,    0,   40,
   41,   42,    0,    0,   43,   44,   45,   46,    0,    0,
    0,    0,  261,    0,    0,   99,    2,    3,    4,  434,
    6,    0,    0,    0,    0,    0,    0,    0,  274,   14,
  113,  274,    0,    0,    0,  501,    0,    0,   17,   18,
   19,   20,   21,   22,    0,    0,  274,    0,  214,   47,
  214,  214,  167,    0,  214,    0,    0,    0,    0,    0,
    0,    0,   29,   23,   24,   47,    0,   27,  167,   30,
    0,   26,  214,    0,   25,    0,    0,    0,    0,    0,
  274,    0,   99,    2,    3,    4,    0,    6,    0,    0,
    0,   43,   44,   45,    0,    0,   14,  113,    0,    0,
    0,  214,  252,    0,    0,   17,   18,   19,   20,   21,
   22,    0,  274,    0,  252,  252,    0,    0,    0,    0,
    0,    0,  570,    0,    0,    0,    0,   29,    0,    0,
   23,   24,   27,    0,   30,    0,   26,    0,    0,   25,
    0,    0,    0,    0,   29,    0,    0,    0,    0,   27,
    0,   30,   47,   26,    0,  167,   25,    0,   43,   44,
   45,    0,    0,  252,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  252,    0,   99,    2,    3,    4,    0,    6,    0,
    0,    0,    0,    0,    0,    0,    0,   14,  113,   99,
    2,    3,    4,    0,    6,    0,   17,   18,   19,   20,
   21,   22,    0,   14,  113,    0,    0,   47,    0,    0,
  167,    0,   17,   18,   19,   20,   21,   22,    0,    0,
    0,   23,   24,    0,   47,    0,    0,  167,    0,    0,
    0,    0,    0,    0,  274,    0,    0,   23,   24,    0,
    0,    0,    0,    0,    0,    0,  274,  274,    0,   43,
   44,   45,    0,    0,  765,    0,  768,  214,    0,    0,
    0,    0,  214,    0,    0,   43,   44,   45,    0,    0,
    0,  214,  214,    0,    0,    0,   99,    2,    3,    4,
  214,    6,    0,    0,    0,  214,    0,    0,  771,    0,
   14,  113,    0,    0,    0,  274,    0,    0,    0,   17,
   18,   19,   20,   21,   22,    0,    0,    0,    0,  214,
    0,    0,    0,  274,    0,    0,    0,  214,    0,    0,
    0,    0,    0,  279,   23,   24,    0,  279,  279,  279,
  279,  279,    0,  279,    0,    0,    0,    0,    0,    0,
    0,   99,    2,    3,    4,  279,    6,  279,    0,    0,
    0,    0,   43,   44,   45,   14,  113,    0,  174,    2,
    3,    4,    0,    6,   17,   18,   19,   20,   21,   22,
    0,    0,   14,  113,    0,    0,    0,    0,    0,  279,
    0,   17,   18,   19,   20,   21,   22,    0,    0,   23,
   24,   68,   68,    0,   68,   68,   68,   68,   68,   68,
   68,   68,    0,    0,    0,    0,   23,   24,    0,    0,
    0,  279,    0,   68,   68,   68,   68,   43,   44,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   44,   45,    0,    0,    0,
    0,    0,    0,    0,    0,   68,    0,   68,   68,   65,
   65,    0,   65,   65,   65,   65,   65,   65,   65,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   65,   65,   65,   65,    0,    0,   68,   68,   68,
  702,  705,  708,  711,  714,  717,  720,  723,  726,  729,
  732,  735,  738,  741,  744,  747,  750,    0,    0,  753,
  756,  759,  762,   65,    0,   65,   65,   70,   70,    0,
   70,   70,   70,   70,   70,   70,   70,   70,  253,  253,
    0,    0,  253,  253,  253,  253,  253,  253,  253,   70,
   70,   70,   70,    0,    0,   65,   65,   65,    0,    0,
  253,    0,  253,  279,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  279,  279,    0,    0,    0,
    0,   70,    0,   70,   70,    0,    0,  184,    0,  184,
  184,  184,    0,  184,  253,    0,    0,    0,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,    0,
    0,  184,    0,   70,   70,   70,    0,    0,    0,    0,
   66,   66,   66,   66,  279,  253,  253,    0,    0,    0,
    0,   68,    0,    0,    0,    0,   68,    0,    0,    0,
  184,    0,  279,   68,   68,    0,   68,    0,    0,    0,
    0,    0,   66,    0,   66,   66,    0,    0,    0,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,    0,   68,
   68,   68,   68,   68,   66,   66,   66,    0,    0,   65,
    0,   68,   68,    0,   65,    0,    0,    0,    0,    0,
    0,   65,   65,    0,   65,    0,    0,    0,    0,    0,
   68,    0,    0,    0,    0,    0,    0,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,    0,   65,   65,   65,
   65,   65,    0,    0,    0,    0,    0,   70,    0,   65,
   65,    0,   70,    0,    0,    0,    0,    0,  253,   70,
   70,    0,   70,    0,    0,    0,    0,    0,   65,    0,
  253,  253,    0,    0,    0,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,    0,   70,   70,   70,   70,   70,
    0,    0,    0,    0,    0,    0,  184,   70,   70,    0,
    0,  184,    0,    0,    0,    0,    0,    0,   66,  253,
  184,  184,    0,   66,    0,    0,   70,    0,    0,  184,
   66,   66,    0,   66,  184,    0,    0,  253,    0,  315,
    0,    0,    0,    0,    0,    0,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,    0,   66,   66,   66,   66,
   66,    0,    0,    0,    0,    0,    0,    0,   66,   66,
   67,   67,    0,   67,   67,   67,   67,   67,   67,   67,
   67,    0,    0,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   67,   67,   67,   67,    0,    0,    0,    0,
    0,    0,  175,    0,    0,    0,    0,  175,    0,    0,
  175,  175,  175,    0,    0,    0,  175,  175,    0,    0,
    0,    0,    0,    0,   67,  175,   67,   67,   69,   69,
    0,   69,   69,   69,   69,   69,   69,   69,   69,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   69,   69,   69,   69,  175,    0,   67,   67,   67,    0,
  315,    0,  175,    0,    0,  315,    0,    0,  315,  315,
  315,    0,    0,    0,  315,  315,    0,    0,    0,    0,
    0,    0,   69,  315,   69,   69,  124,  124,    0,  124,
  124,  124,  124,  124,  124,  124,  124,  289,  289,    0,
    0,  289,  289,  289,  289,  289,  289,  289,  124,  124,
  124,  124,  315,    0,   69,   69,   69,    0,    0,  289,
  315,  289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  322,    0,    0,    0,
  124,  326,  124,  124,  330,  334,  338,    0,    0,    0,
  342,  346,    0,  289,    0,    0,  304,    0,    0,  350,
  304,    0,  304,  304,    0,  304,  304,    0,    0,    0,
    0,    0,    0,  124,  124,    0,    0,    0,  304,  304,
  304,  304,    0,    0,  289,  289,    0,    0,  220,  354,
  357,  360,    0,  363,  366,    0,  223,    0,    0,    0,
    0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
  304,    0,  304,  304,    0,    0,    0,    0,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,    0,   67,   67,
   67,   67,   67,  304,  304,    0,    0,    0,    0,    0,
   67,   67,    0,    0,    0,    0,    0,    0,    0,    0,
   69,   69,    0,    0,    0,    0,    0,    0,    0,   67,
    0,    0,    0,    0,    0,    0,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,    0,   69,   69,   69,   69,
   69,    0,    0,    0,    0,    0,  124,    0,   69,   69,
  275,    0,    0,  275,    0,    0,    0,  289,  124,  124,
    0,    0,    0,    0,    0,    0,    0,   69,  275,  289,
  289,    0,    0,    0,    0,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,    0,    0,  124,  124,  124,  124,    0,    0,
    0,    0,  275,    0,    0,    0,    0,  124,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  289,    0,
    0,    0,    0,    0,    0,  124,    0,    0,  304,  304,
    0,    0,    0,    0,  275,    0,  289,    0,    0,    0,
    0,    0,    0,    0,    0,  304,  304,  304,  304,  304,
  304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
  304,  304,    0,    0,  288,  288,  304,  304,  288,  288,
  288,  288,  288,  288,  288,  266,  266,  304,    0,  266,
  266,  266,  266,  266,  276,  266,  288,  276,  288,    0,
    0,    0,    0,    0,    0,  304,    0,  266,    0,  266,
  280,    0,  276,    0,  280,  280,  280,  280,  280,    0,
  280,  262,    0,    0,    0,  262,  262,  262,  262,  262,
  288,  262,  280,    0,  280,    0,    0,    0,    0,    0,
    0,  266,    0,  262,    0,  262,  276,  263,    0,    0,
    0,  263,  263,  263,  263,  263,    0,  263,    0,    0,
    0,  288,  288,    0,    0,    0,  280,    0,    0,  263,
    0,  263,  266,  266,    0,  264,  275,  262,  276,  264,
  264,  264,  264,  264,  277,  264,    0,  277,  275,  275,
  278,    0,    0,  278,    0,    0,    0,  264,  280,  264,
    0,  281,  277,  263,  281,    0,    0,  282,  278,  262,
  282,    0,    0,    0,    0,  283,    0,    0,  283,  281,
    0,    0,    0,    0,    0,  282,    0,    0,    0,  284,
    0,  264,  284,  283,    0,  263,  277,  275,    0,    0,
    0,    0,  278,  285,    0,    0,  285,  284,  286,    0,
    0,  286,    0,  281,    0,  275,    0,    0,    0,  282,
    0,  285,    0,  264,    0,    0,  286,  283,  277,    0,
    0,    0,  287,    0,  278,  287,    0,    0,    0,  290,
    0,  284,  290,    0,    0,  281,    0,    0,    0,    0,
  287,  282,    0,  269,  288,  285,  269,  290,  270,  283,
  286,  270,    0,    0,    0,  266,  288,  288,    0,    0,
  276,  269,    0,  284,    0,    0,  270,  266,  266,    0,
    0,    0,  276,  276,  287,    0,  267,  285,    0,  267,
  280,  290,  286,    0,    0,    0,    0,    0,    0,    0,
    0,  262,  280,  280,  267,  269,    0,    0,    0,    0,
  270,    0,    0,  262,  262,  288,  287,    0,    0,    0,
    0,    0,    0,  290,    0,    0,  266,  263,    0,  268,
    0,  276,  268,  288,    0,    0,    0,  269,  267,  263,
  263,    0,  270,    0,  266,  294,    0,  268,  294,  276,
    0,  280,    0,    0,    0,  264,  302,    0,    0,  302,
  277,    0,  262,  294,    0,    0,  278,  264,  264,  280,
  267,    0,  277,  277,  302,    0,    0,  281,  278,  278,
  262,  268,    0,  282,    0,    0,    0,    0,  263,  281,
  281,  283,    0,    0,    0,  282,  282,  294,    0,    0,
    0,    0,    0,  283,  283,  284,  263,    0,  302,    0,
    0,    0,    0,  268,    0,    0,  264,  284,  284,  285,
    0,  277,    0,    0,  286,    0,    0,  278,    0,  294,
    0,  285,  285,    0,  264,    0,  286,  286,  281,  277,
  302,    0,    0,    0,  282,  278,    0,  480,  287,  480,
  480,  480,  283,  480,    0,  290,  281,    0,    0,    0,
  287,  287,  282,    0,    0,    0,  284,  290,  290,  269,
  283,  480,    0,   97,  270,   97,   97,   97,    0,   97,
  285,  269,  269,    0,  284,  286,  270,  270,    0,   98,
    0,   98,   98,   98,    0,   98,    0,   97,  285,    0,
  480,    0,  267,  286,    0,    0,    0,    0,    0,  287,
    0,    0,    0,   98,  267,  267,  290,  219,  219,    0,
    0,  219,  215,    0,  215,  215,   97,  287,  215,    0,
  269,    0,    0,    0,  290,  270,    0,    0,    0,  219,
    0,    0,   98,    0,    0,  268,  215,    0,  269,    0,
    0,    0,    0,  270,    0,    0,    0,  268,  268,    0,
    0,  294,    0,  267,    0,    0,    0,    0,  219,    0,
    0,    0,  302,  294,  294,  215,    0,    0,    0,    0,
    0,  267,    0,    0,  302,  302,    0,   69,   69,    0,
   69,   69,   69,   69,   69,   69,   69,   69,    0,    0,
    0,    0,    0,    0,    0,    0,  268,    0,    0,   69,
   69,   69,   69,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  294,    0,  268,    0,    0,    0,    0,    0,
    0,    0,    0,  302,    0,    0,    0,    0,    0,    0,
  294,   69,    0,    0,   69,    0,   99,    0,   99,   99,
   99,  302,   99,    0,  213,    0,    0,    0,    0,  216,
    0,    0,  216,  216,  216,    0,  480,    0,  216,  216,
   99,  480,    0,    0,   69,   69,    0,  216,   64,   64,
  484,  480,    0,   64,   64,   64,   64,   64,   64,  488,
    0,    0,   97,    0,  480,    0,    0,   97,    0,   99,
   64,   64,   64,   64,    0,    0,  220,   97,   98,    0,
    0,    0,  480,   98,  223,    0,    0,    0,  480,    0,
   97,    0,    0,   98,    0,    0,  480,    0,    0,    0,
    0,    0,   64,    0,  219,   64,   98,    0,   97,  219,
    0,  215,    0,    0,   97,    0,  215,    0,  219,  219,
    0,    0,   97,    0,   98,  215,  215,  219,    0,    0,
   98,    0,  219,    0,  215,   64,   64,    0,   98,  215,
  162,    0,    0,    0,  157,  159,    0,  165,    0,  155,
  153,  164,  154,    0,  156,    0,  219,    0,    0,    0,
    0,    0,    0,  215,  219,    0,    0,  151,  163,  152,
    0,  215,  410,    0,    0,    0,    0,  410,    0,    0,
  410,  410,  410,    0,    0,    0,  410,  410,    0,    0,
    0,    0,    0,    0,    0,  410,    0,    0,  166,    0,
    0,  158,    0,    0,    0,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,  414,   69,   69,   69,   69,   69,
    0,  160,  417,  161,  213,   99,    0,   69,    0,  216,
   99,    0,  216,  216,  216,    0,    0,    0,  216,  216,
   99,    0,    0,    0,    0,    0,    0,  216,    0,  837,
    0,  840,    0,   99,    0,    0,    0,   64,   64,    0,
   64,    0,   64,   64,   64,   64,   64,   64,    0,    0,
    0,   99,    0,    0,    0,    0,  220,   99,    0,   64,
   64,   64,   64,  843,  223,   99,    0,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,    0,   64,   64,   64,   64,
    0,   64,  322,  239,   64,  239,  239,  326,    0,    0,
  330,  334,  338,    0,   64,   64,  342,  346,    0,   64,
   64,   64,   64,   64,   64,  350,    0,    0,    0,    0,
    0,    0,    0,    0,   64,   64,   64,   64,   64,   64,
    0,    0,  257,  259,    0,  262,    0,  255,  253,    0,
  254,  264,  256,    0,  220,  354,  357,  360,    0,  363,
  366,    0,  223,    0,  265,  251,  261,  252,   64,    0,
    0,   64,    0,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  263,    0,    0,  258,
    0,   64,   64,    0,    0,    0,    0,  257,  259,    0,
  262,  309,  255,  253,    0,  254,  264,  256,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  260,
  251,  261,  252,    0,  257,  259,    0,  262,  422,  255,
  253,    0,  254,  264,  256,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  251,  261,  252,
    0,  263,    0,    0,  258,  774,  777,  780,  783,  786,
  789,  792,  795,  798,  801,  804,  807,  810,  813,  816,
  819,  822,    0,    0,  825,  828,  831,  834,  263,    0,
   64,  258,    0,    0,  260,    0,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,    0,   64,   64,   64,   64,    0,
    0,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,   64,    0,    0,
    0,    0,    0,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
    0,    0,   64,   64,   64,   64,    0,    0,    0,    0,
    0,  230,  231,  232,  233,  234,  235,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,    0,    0,
  247,  248,  249,  250,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  257,  259,    0,  262,  424,
  255,  253,    0,  254,  264,  256,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  251,  261,
  252,    0,    0,    0,    0,    0,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
  244,  245,  246,    0,    0,  247,  248,  249,  250,  263,
    0,    0,  258,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    0,    0,  247,  248,  249,  250,    0,    0,  257,  259,
    0,  262,  260,  255,  253,    0,  254,  264,  256,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  251,  261,  252,  257,  259,    0,  262,    0,  255,
  253,    0,  254,  264,  256,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  251,  261,  252,
    0,    0,  263,    0,  439,  258,    0,    0,    0,  257,
  259,    0,  262,  526,  255,  253,    0,  254,  264,  256,
    0,    0,    0,    0,    0,    0,    0,    0,  263,    0,
  488,  258,  251,  261,  252,  260,    0,    0,    0,    0,
    0,    0,    0,    0,  257,  259,    0,  262,  535,  255,
  253,    0,  254,  264,  256,    0,    0,    0,    0,    0,
    0,  260,    0,  263,    0,    0,  258,  251,  261,  252,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  257,  259,    0,  262,    0,  255,  253,
    0,  254,  264,  256,    0,    0,  260,    0,  263,    0,
    0,  258,    0,    0,    0,    0,  251,  261,  252,    0,
    0,    0,    0,    0,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  260,    0,  247,  248,  249,  250,  263,    0,  542,
  258,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  260,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  230,  231,  232,
  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,    0,    0,  247,  248,  249,  250,
    0,    0,    0,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    0,    0,  247,  248,  249,  250,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  230,  231,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,    0,    0,  247,  248,  249,
  250,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    0,    0,  247,  248,  249,  250,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  230,  231,  232,  233,  234,  235,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,    0,
    0,  247,  248,  249,  250,  257,  259,    0,  262,  551,
  255,  253,    0,  254,  264,  256,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  251,  261,
  252,  257,  259,    0,  262,  552,  255,  253,    0,  254,
  264,  256,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  251,  261,  252,    0,    0,  263,
    0,    0,  258,    0,    0,    0,  257,  259,    0,  262,
  553,  255,  253,    0,  254,  264,  256,    0,    0,    0,
    0,    0,    0,    0,    0,  263,    0,    0,  258,  251,
  261,  252,  260,    0,    0,    0,    0,    0,    0,    0,
    0,  257,  259,    0,  262,  554,  255,  253,    0,  254,
  264,  256,    0,    0,    0,    0,    0,    0,  260,    0,
  263,    0,    0,  258,  251,  261,  252,  257,  259,    0,
  262,  567,  255,  253,    0,  254,  264,  256,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  251,  261,  252,  260,    0,  263,    0,    0,  258,    0,
    0,    0,  257,  259,    0,  262,  578,  255,  253,    0,
  254,  264,  256,    0,    0,    0,    0,    0,    0,    0,
    0,  263,    0,    0,  258,  251,  261,  252,  260,    0,
  322,    0,    0,    0,    0,  326,    0,    0,  330,  334,
  338,    0,    0,    0,  342,  346,    0,    0,    0,    0,
    0,    0,    0,  350,  260,    0,  263,    0,    0,  258,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  220,  354,  357,  360,    0,  363,  366,  260,
  223,    0,    0,    0,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,    0,    0,  247,  248,  249,  250,    0,    0,    0,
  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,    0,    0,  247,
  248,  249,  250,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  230,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,    0,    0,  247,  248,  249,  250,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,    0,    0,  247,
  248,  249,  250,    0,    0,    0,  230,  231,  232,  233,
  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
  244,  245,  246,    0,    0,  247,  248,  249,  250,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  230,  231,  232,  233,  234,  235,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,    0,    0,
  247,  248,  249,  250,  257,  259,    0,  262,    0,  255,
  253,    0,  254,  264,  256,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  251,  261,  252,
  124,    0,    0,  124,    0,    0,  124,  124,  124,  124,
  124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  124,    0,  124,  124,    0,    0,  263,    0,
  588,  258,    0,    0,    0,  257,  259,    0,  262,    0,
  255,  253,    0,  254,  264,  256,    0,    0,    0,    0,
    0,    0,    0,    0,  124,    0,    0,  124,  251,  261,
  252,  260,    0,    0,    0,    0,    0,    0,    0,    0,
  573,  579,    0,  588,    0,  567,  561,    0,  564,  594,
  570,    0,    0,    0,    0,    0,    0,  124,  124,  263,
    0,    0,  258,  555,  585,  558,  678,  684,    0,  693,
    0,  672,  666,    0,  669,  699,  675,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  660,
  690,  663,  260,    0,  591,    0,    0,  576,    0,    0,
    0, 1146, 1152,    0, 1161,    0, 1140, 1134,    0, 1137,
 1167, 1143,    0,    0,    0,    0,    0,    0,    0,    0,
  696,    0,    0,  681, 1128, 1158, 1131,  582,    0,  322,
    0,    0,    0,    0,  326,    0,    0,  330,  334,  338,
    0,    0,    0,  342,  346,    0,    0,    0,    0,    0,
    0,    0,  350,  687,    0, 1164,    0,    0, 1149,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  220,  354,  357,  360,    0,  363,  366, 1155,  223,
    0,    0,    0,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
    0,    0,  247,  248,  249,  250,    0,    0,    0,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,   95,    0,  124,  124,
  124,  124,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  230,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,    0,    0,  247,  248,  249,  250,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  492,
  495,  498,  501,  504,  507,  510,  513,  516,  519,  522,
  525,  528,  531,  534,  537,  540,    0,    0,  543,  546,
  549,  552,    0,    0,    0,  597,  600,  603,  606,  609,
  612,  615,  618,  621,  624,  627,  630,  633,  636,  639,
  642,  645,    0,    0,  648,  651,  654,  657,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092,
 1095, 1098, 1101, 1104, 1107, 1110, 1113,    0,    0, 1116,
 1119, 1122, 1125, 1251, 1257,    0, 1266,    0, 1245, 1239,
    0, 1242, 1272, 1248,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1233, 1263, 1236, 1356,
 1362,    0, 1371,    0, 1350, 1344,    0, 1347, 1377, 1353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1338, 1368, 1341,    0,    0, 1269,    0,    0,
 1254,    0,    0,    0, 1500, 1506,    0, 1515,    0, 1494,
 1488,    0, 1491, 1521, 1497,    0,    0,    0,    0,    0,
    0,    0,    0, 1374,    0,    0, 1359, 1482, 1512, 1485,
 1260,    0,    0,    0,    0,    0,    0,    0,    0, 1605,
 1611,    0, 1620,    0, 1599, 1593,    0, 1596, 1626, 1602,
    0,    0,    0,    0,    0,    0, 1365,    0, 1518,    0,
    0, 1503, 1587, 1617, 1590, 1710, 1716,    0, 1725,    0,
 1704, 1698,    0, 1701, 1731, 1707,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1692, 1722,
 1695, 1509,    0, 1623,    0,    0, 1608,    0,    0,    0,
 1815, 1821,    0, 1830,    0, 1809, 1803,    0, 1806, 1836,
 1812,    0,    0,    0,    0,    0,    0,    0,    0, 1728,
    0,    0, 1713, 1797, 1827, 1800, 1614,    0,  322,    0,
    0,    0,    0,  326,    0,    0,  330,  334,  338,    0,
    0,    0,  342,  346,    0,    0,    0,    0,    0,    0,
    0,  350, 1719,    0, 1833,    0,    0, 1818,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  220,  354,  357,  360,    0,  363,  366, 1824,  223,    0,
    0,    0, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191,
 1194, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218,    0,
    0, 1221, 1224, 1227, 1230,    0,    0,    0, 1275, 1278,
 1281, 1284, 1287, 1290, 1293, 1296, 1299, 1302, 1305, 1308,
 1311, 1314, 1317, 1320, 1323,    0,    0, 1326, 1329, 1332,
 1335,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1419, 1422, 1425, 1428, 1431, 1434, 1437,
 1440, 1443, 1446, 1449, 1452, 1455, 1458, 1461, 1464, 1467,
    0,    0, 1470, 1473, 1476, 1479,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1524, 1527,
 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554, 1557,
 1560, 1563, 1566, 1569, 1572,    0,    0, 1575, 1578, 1581,
 1584,    0,    0,    0, 1629, 1632, 1635, 1638, 1641, 1644,
 1647, 1650, 1653, 1656, 1659, 1662, 1665, 1668, 1671, 1674,
 1677,    0,    0, 1680, 1683, 1686, 1689,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1734,
 1737, 1740, 1743, 1746, 1749, 1752, 1755, 1758, 1761, 1764,
 1767, 1770, 1773, 1776, 1779, 1782,    0,    0, 1785, 1788,
 1791, 1794, 1920, 1926,    0, 1935,    0, 1914, 1908,    0,
 1911, 1941, 1917,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1902, 1932, 1905, 2025, 2031,
    0, 2040,    0, 2019, 2013,    0, 2016, 2046, 2022,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2007, 2037, 2010,    0,    0, 1938,    0,    0, 1923,
    0,    0,    0, 2130, 2136,    0, 2145,    0, 2124, 2118,
    0, 2121, 2151, 2127,    0,    0,    0,    0,    0,    0,
    0,    0, 2043,    0,    0, 2028, 2112, 2142, 2115, 1929,
    0,    0,    0,    0,    0,    0,    0,    0, 2235, 2241,
    0, 2250,    0, 2229, 2223,    0, 2226, 2256, 2232,    0,
    0,    0,    0,    0,    0, 2034,    0, 2148,    0,    0,
 2133, 2217, 2247, 2220, 2484, 2490,    0, 2499,    0, 2478,
 2472,    0, 2475, 2505, 2481,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2466, 2496, 2469,
 2139,    0, 2253,    0,    0, 2238,    0,    0,    0, 2589,
 2595,    0, 2604,    0, 2583, 2577,    0, 2580, 2610, 2586,
    0,    0,    0,    0,    0,    0,    0,    0, 2502,    0,
    0, 2487, 2571, 2601, 2574, 2244,    0,  322,    0,    0,
    0,    0,  326,    0,    0,  330,  334,  338,    0,    0,
    0,  342,  346,    0,    0,    0,    0,    0,    0,    0,
  350, 2493,    0, 2607,    0,    0, 2592,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
  354,  357,  360,    0,  363,  366, 2598,  223,    0,    0,
    0, 1839, 1842, 1845, 1848, 1851, 1854, 1857, 1860, 1863,
 1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887,    0,    0,
 1890, 1893, 1896, 1899,    0,    0,    0, 1944, 1947, 1950,
 1953, 1956, 1959, 1962, 1965, 1968, 1971, 1974, 1977, 1980,
 1983, 1986, 1989, 1992,    0,    0, 1995, 1998, 2001, 2004,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2049, 2052, 2055, 2058, 2061, 2064, 2067, 2070,
 2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 2097,    0,
    0, 2100, 2103, 2106, 2109,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2154, 2157, 2160,
 2163, 2166, 2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190,
 2193, 2196, 2199, 2202,    0,    0, 2205, 2208, 2211, 2214,
    0,    0,    0, 2403, 2406, 2409, 2412, 2415, 2418, 2421,
 2424, 2427, 2430, 2433, 2436, 2439, 2442, 2445, 2448, 2451,
    0,    0, 2454, 2457, 2460, 2463,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2508, 2511,
 2514, 2517, 2520, 2523, 2526, 2529, 2532, 2535, 2538, 2541,
 2544, 2547, 2550, 2553, 2556,    0,    0, 2559, 2562, 2565,
 2568, 2766, 2772,    0, 2781,    0, 2760, 2754,    0, 2757,
 2787, 2763,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2748, 2778, 2751, 2871, 2877,    0,
 2886,    0, 2865, 2859,    0, 2862, 2892, 2868,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2853, 2883, 2856,    0,    0, 2784,    0,    0, 2769,    0,
    0,    0, 2976, 2982,    0, 2991,    0, 2970, 2964,    0,
 2967, 2997, 2973,    0,    0,    0,    0,    0,    0,    0,
    0, 2889,    0,    0, 2874, 2958, 2988, 2961, 2775,    0,
    0,    0,    0,    0,    0,    0,    0, 3081, 3087,    0,
 3096,    0, 3075, 3069,    0, 3072, 3102, 3078,    0,    0,
    0,    0,    0,    0, 2880,    0, 2994,    0,    0, 2979,
 3063, 3093, 3066, 3258, 3264,    0, 3273,    0, 3252, 3246,
    0, 3249, 3279, 3255,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3240, 3270, 3243, 2985,
    0, 3099,    0,    0, 3084,    0,    0,    0, 3363, 3369,
    0, 3378,    0, 3357, 3351,    0, 3354, 3384, 3360,    0,
    0,    0,    0,    0,    0,    0,    0, 3276,    0,    0,
 3261, 3345, 3375, 3348, 3090,    0,  322,    0,    0,    0,
    0,  326,    0,    0,  330,  334,  338,    0,    0,    0,
  342,  346,    0,    0,    0,    0,    0,    0,    0,  350,
 3267,    0, 3381,    0,    0, 3366,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  220,  354,
  357,  360,    0,  363,  366, 3372,  223,    0,    0,    0,
 2685, 2688, 2691, 2694, 2697, 2700, 2703, 2706, 2709, 2712,
 2715, 2718, 2721, 2724, 2727, 2730, 2733,    0,    0, 2736,
 2739, 2742, 2745,    0,    0,    0, 2790, 2793, 2796, 2799,
 2802, 2805, 2808, 2811, 2814, 2817, 2820, 2823, 2826, 2829,
 2832, 2835, 2838,    0,    0, 2841, 2844, 2847, 2850,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2895, 2898, 2901, 2904, 2907, 2910, 2913, 2916, 2919,
 2922, 2925, 2928, 2931, 2934, 2937, 2940, 2943,    0,    0,
 2946, 2949, 2952, 2955,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3000, 3003, 3006, 3009,
 3012, 3015, 3018, 3021, 3024, 3027, 3030, 3033, 3036, 3039,
 3042, 3045, 3048,    0,    0, 3051, 3054, 3057, 3060,    0,
    0,    0, 3177, 3180, 3183, 3186, 3189, 3192, 3195, 3198,
 3201, 3204, 3207, 3210, 3213, 3216, 3219, 3222, 3225,    0,
    0, 3228, 3231, 3234, 3237,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3282, 3285, 3288,
 3291, 3294, 3297, 3300, 3303, 3306, 3309, 3312, 3315, 3318,
 3321, 3324, 3327, 3330,    0,    0, 3333, 3336, 3339, 3342,
 3468, 3474,    0, 3483,    0, 3462, 3456,    0, 3459, 3489,
 3465,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3450, 3480, 3453, 3933, 3939,    0, 3948,
    0, 3927, 3921,    0, 3924, 3954, 3930,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3915,
 3945, 3918,    0,    0, 3486,    0,    0, 3471,    0,    0,
    0, 4326, 4332,    0, 4341,    0, 4320, 4314,    0, 4317,
 4347, 4323,    0,    0,    0,    0,    0,    0,    0,    0,
 3951,    0,    0, 3936, 4308, 4338, 4311, 3477,    0,    0,
    0,    0,    0,    0,    0,    0, 4431, 4437,    0, 4446,
    0, 4425, 4419,    0, 4422, 4452, 4428,    0,    0,    0,
    0,    0,    0, 3942,    0, 4344,    0,    0, 4329, 4413,
 4443, 4416,   70,    0,    0,    0,    0,    0,   70,    0,
   70,   70,   70,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   70,   70,   70,    0, 4335,    0,
 4449,    0,    0, 4434,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  322,    0,  909,    0,
  912,  326,    0,    0,  330,  334,  338,    0,    0,   70,
  342,  346,    0, 4440,    0,    0,    0,    0,    0,  350,
    0,  984,    0,  987,    0,    0,    0,    0,    0,    0,
    0,    0,  915,    0,    0,    0,    0,    0,    0,   70,
   70,    0,    0,    0, 1056,    0, 1059,    0,  220,  354,
  357,  360,    0,  363,  366,  990,  223,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2322,    0,
 2325,    0,    0,    0,    0,    0,    0,    0, 1062, 3387,
 3390, 3393, 3396, 3399, 3402, 3405, 3408, 3411, 3414, 3417,
 3420, 3423, 3426, 3429, 3432, 3435,    0,    0, 3438, 3441,
 3444, 3447, 2328,    0,    0, 3852, 3855, 3858, 3861, 3864,
 3867, 3870, 3873, 3876, 3879, 3882, 3885, 3888, 3891, 3894,
 3897, 3900,    0,    0, 3903, 3906, 3909, 3912,    0, 2394,
    0, 2397,    0,    0,    0,    0,    0,    0,    0,    0,
 4245, 4248, 4251, 4254, 4257, 4260, 4263, 4266, 4269, 4272,
 4275, 4278, 4281, 4284, 4287, 4290, 4293,    0,    0, 4296,
 4299, 4302, 4305, 2400, 2676,    0, 2679,    0,    0,    0,
    0,    0,    0,    0,    0, 4350, 4353, 4356, 4359, 4362,
 4365, 4368, 4371, 4374, 4377, 4380, 4383, 4386, 4389, 4392,
 4395, 4398,    0,    0, 4401, 4404, 4407, 4410, 2682,    0,
    0,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,    0,    0,
   70,   70,   70,   70,  846,  849,  852,  855,  858,  861,
  864,  867,  870,  873,  876,  879,  882,  885,  888,  891,
  894,    0,    0,  897,  900,  903,  906,  921,  924,  927,
  930,  933,  936,  939,  942,  945,  948,  951,  954,  957,
  960,  963,  966,  969,    0,    0,  972,  975,  978,  981,
  993,  996,  999, 1002, 1005, 1008, 1011, 1014, 1017, 1020,
 1023, 1026, 1029, 1032, 1035, 1038, 1041,    0,    0, 1044,
 1047, 1050, 1053,    0, 2259, 2262, 2265, 2268, 2271, 2274,
 2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304,
 2307,    0,    0, 2310, 2313, 2316, 2319, 3168,    0, 3171,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3555,    0, 3558,    0,    0,    0,
    0, 3174,    0,    0,    0, 2331, 2334, 2337, 2340, 2343,
 2346, 2349, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373,
 2376, 2379,    0,    0, 2382, 2385, 2388, 2391, 3561, 3627,
    0, 3630,    0,    0,    0,    0,    0,    0,    0,    0,
 2613, 2616, 2619, 2622, 2625, 2628, 2631, 2634, 2637, 2640,
 2643, 2646, 2649, 2652, 2655, 2658, 2661,    0,    0, 2664,
 2667, 2670, 2673, 3633, 3699,  322, 3702,    0,    0,    0,
  326,    0,    0,  330,  334,  338,    0,    0,    0,  342,
  346,    0,    0,    0,    0,  322,    0, 3771,  350, 3774,
  326,    0,    0,  330,  334,  338,    0,    0, 3705,  342,
  346,    0,    0,    0,    0,    0,    0,    0,  350,    0,
 3843,    0, 3846,    0,    0,    0,    0,  220,  354,  357,
  360, 3777,  363,  366,    0,  223,    0,    0,    0,    0,
    0,    0,    0, 4020,    0, 4023,    0,  220,  354,  357,
  360,    0,  363,  366, 3849,  223,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4092,    0, 4095,    0,
    0,    0,    0,    0,    0,    0,    0, 4026,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4164,    0, 4167,    0,    0,    0,    0,    0,
 4098,    0,    0, 3105, 3108, 3111, 3114, 3117, 3120, 3123,
 3126, 3129, 3132, 3135, 3138, 3141, 3144, 3147, 3150, 3153,
    0,    0, 3156, 3159, 3162, 3165, 4170, 4236,    0, 4239,
 3492, 3495, 3498, 3501, 3504, 3507, 3510, 3513, 3516, 3519,
 3522, 3525, 3528, 3531, 3534, 3537, 3540,    0,    0, 3543,
 3546, 3549, 3552,    0,    0,    0,    0,    0,    0,    0,
    0, 4242,    0,    0,    0, 3564, 3567, 3570, 3573, 3576,
 3579, 3582, 3585, 3588, 3591, 3594, 3597, 3600, 3603, 3606,
 3609, 3612,    0,    0, 3615, 3618, 3621, 3624,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3636, 3639, 3642, 3645, 3648, 3651, 3654, 3657, 3660, 3663,
 3666, 3669, 3672, 3675, 3678, 3681, 3684,    0,    0, 3687,
 3690, 3693, 3696, 3708, 3711, 3714, 3717, 3720, 3723, 3726,
 3729, 3732, 3735, 3738, 3741, 3744, 3747, 3750, 3753, 3756,
    0,    0, 3759, 3762, 3765, 3768, 3780, 3783, 3786, 3789,
 3792, 3795, 3798, 3801, 3804, 3807, 3810, 3813, 3816, 3819,
 3822, 3825, 3828,    0,    0, 3831, 3834, 3837, 3840, 3957,
 3960, 3963, 3966, 3969, 3972, 3975, 3978, 3981, 3984, 3987,
 3990, 3993, 3996, 3999, 4002, 4005,    0,    0, 4008, 4011,
 4014, 4017, 4029, 4032, 4035, 4038, 4041, 4044, 4047, 4050,
 4053, 4056, 4059, 4062, 4065, 4068, 4071, 4074, 4077,    0,
    0, 4080, 4083, 4086, 4089,    0,    0,    0, 4101, 4104,
 4107, 4110, 4113, 4116, 4119, 4122, 4125, 4128, 4131, 4134,
 4137, 4140, 4143, 4146, 4149,    0,    0, 4152, 4155, 4158,
 4161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4173, 4176, 4179, 4182, 4185, 4188, 4191,
 4194, 4197, 4200, 4203, 4206, 4209, 4212, 4215, 4218, 4221,
    0,  322, 4224, 4227, 4230, 4233,  326,    0,    0,  330,
  334,  338,  322,    0,    0,  342,  346,  326,    0,    0,
  330,  334,  338,  322,  350,    0,  342,  346,  326,    0,
    0,  330,  334,  338,  322,  350,    0,  342,  346,  326,
    0,    0,  330,  334,  338,    0,  350,    0,  342,  346,
    0,    0,    0,  220,  354,  357,  360,  350,  363,  366,
    0,  223,    0,    0,  220,  354,  357,  360,    0,  363,
  366,    0,  223,    0,    0,  220,  354,  357,  360,    0,
  363,  366,    0,  223,    0,    0,  220,  354,  357,  360,
  322,  363,  366,    0,  223,  326,    0,    0,  330,  334,
  338,  322,    0,    0,  342,  346,  326,    0,    0,  330,
  334,  338,  322,  350,    0,  342,  346,  326,    0,    0,
  330,  334,  338,  322,  350,    0,  342,  346,  326,    0,
    0,  330,  334,  338,    0,  350,    0,  342,  346,    0,
    0,    0,  220,  354,  357,  360,  350,  363,  366,    0,
  223,    0,    0,  220,  354,  357,  360,    0,  363,  366,
    0,  223,    0,    0,  220,  354,  357,  360,    0,  363,
  366,    0,  223,    0,    0,  220,  354,  357,  360,  426,
  363,  366,    0,  223,  326,    0,    0,  430,  434,  438,
  426,    0,    0,  342,  346,  326,    0,    0,  430,  434,
  438,  426,  350,    0,  342,  346,  326,    0,    0,  430,
  434,  438,  426,  350,    0,  342,  346,  326,    0,    0,
  430,  434,  438,    0,  350,    0,  342,  346,    0,    0,
    0,  220,  354,  442,    0,  350,    0,    0,    0,  223,
    0,    0,  220,  354,  442,    0,    0,    0,    0,    0,
  223,    0,    0,  220,  354,  442,    0,    0,    0,    0,
    0,  223,    0,    0,  220,  354,  442,    0,  426,    0,
    0,    0,  223,  326,    0,    0,  430,  434,  438,  426,
    0,    0,  342,  346,  326,    0,    0,  430,  434,  438,
  426,  350,    0,  342,  346,  326,    0,    0,  430,  434,
  438,  426,  350,    0,  342,  346,  326,    0,    0,  430,
  434,  438,    0,  350,    0,  342,  346,    0,    0,    0,
  220,  354,  442,    0,  350,    0,    0,    0,  223,    0,
    0,  220,  354,  442,    0,    0,    0,    0,    0,  223,
    0,    0,  220,  354,  442,    0,    0,    0,    0,    0,
  223,    0,    0,  220,  354,  442,    0,  426,    0,    0,
    0,  223,  326,    0,    0,  430,  434,  438,    0,    0,
    0,  342,  346,    0,    0,    0,    0,    0,    0,    0,
  350,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
  354,  442,    0,    0,    0,    0,    0,  223,
};
static int yycheck[] = {                                      91,
    0,    1,    1,    1,  331,   61,    6,   38,    8,    9,
   10,   59,  125,   41,   14,   15,   44,  126,   44,  104,
    5,  123,   37,   38,   59,  423,   41,   42,   43,   44,
   45,    5,   47,   91,   59,  258,   41,   90,   43,   44,
   45,  123,   42,   38,   59,   40,   61,    5,   59,   38,
   49,   46,    0,   42,   59,  278,   61,   33,   58,  112,
  315,   91,   38,   44,   40,   44,   42,   67,   41,   45,
  405,   41,  257,   44,   44,  123,   40,   44,   93,  545,
   41,   59,   46,   44,  269,  270,   59,  314,   93,   89,
   90,   42,   44,  195,   60,   30,   91,  125,  123,  125,
  100,  101,  102,  103,  104,  104,  104,   44,  126,  124,
  125,  110,  112,  113,   49,   89,   67,   44,   92,  104,
  125,   44,   44,  123,  459,  523,  453,   91,   60,  124,
  104,   37,   38,  318,  600,   41,   42,   43,   44,   45,
   46,   47,   44,   44,  125,  123,  125,  123,  257,   44,
  126,  336,  123,   59,   41,   61,   91,   44,  125,   49,
  273,  274,  275,   41,  125,  267,   44,  483,   44,  104,
  272,  123,   59,  108,   60,  110,   59,  512,   38,  271,
   40,   59,   42,   44,   59,   45,  123,   93,  280,  124,
  125,  126,  127,  436,  437,  195,  123,  312,   59,  314,
  315,   44,  125,  125,   59,  448,   93,  207,   58,   59,
  210,   60,  212,  213,  530,   93,   59,  309,  124,  125,
  110,  123,  123,  271,  209,  317,  257,   40,  123,   40,
  204,  257,  280,  345,  346,  209,  271,   44,  125,   40,
  123,  271,  257,  269,  270,  280,   40,  125,  123,  125,
  280,  309,  257,  309,  269,  270,  214,  313,  216,  317,
  271,  219,  123,   41,  269,  270,   44,  267,  123,  280,
   59,  206,  272,  123,  209,  275,  257,   59,  278,  309,
   91,  393,  258,  259,  260,  285,  388,  317,  269,  270,
   38,  291,  318,  271,   42,   40,   41,  297,   41,   44,
  300,   44,  280,  318,   59,  281,  282,  283,  284,  285,
  336,   60,   60,  318,  303,  400,   59,   62,  125,  277,
  451,  336,   59,  454,  324,  273,  274,  275,   44,  305,
  306,  336,  257,  309,   38,  257,   59,  318,   42,   59,
  265,  317,  312,   59,  314,  315,  281,  269,  270,  300,
   58,  257,  271,  484,  257,  336,  330,  333,  334,  335,
   44,  280,  271,  269,  270,  408,  451,  271,   41,  454,
  257,  280,  123,  324,  476,   59,  280,  479,  271,  257,
   93,  257,  269,  270,   41,  385,  271,  280,  388,  389,
  309,  269,  270,  269,  270,  280,  318,  257,  317,  484,
  400,  400,  400,  257,  258,  259,  260,  407,  271,   44,
  271,  257,  318,  544,  336,  400,  264,  280,  461,  280,
  271,  464,  422,  397,  424,  309,  400,   58,   59,  280,
  336,  318,  563,  317,  385,  271,  394,  539,  389,  309,
  318,  257,  318,  443,  280,  305,  306,  317,  579,  336,
  257,  451,  451,  451,  454,  454,  454,  431,  336,  544,
    0,   33,  269,  270,  257,  400,  451,  510,  599,  454,
  257,  422,  574,  424,  271,   93,  476,  451,  563,  479,
  454,  309,  257,  280,  484,  484,  484,  264,  590,  317,
  125,  593,  443,   33,  579,  271,  126,  497,   38,  484,
   40,  264,   42,   44,  280,   45,  549,  309,  329,  611,
  484,  318,  257,  615,  599,  317,  451,  262,   59,  454,
   61,  271,  522,   40,  524,   41,  271,  272,   44,  336,
  280,  489,  490,  533,  534,  280,  257,   58,  538,  539,
  285,  271,  500,  257,  544,  544,  544,   58,   58,  484,
  280,  123,   61,  257,  126,   44,  257,   41,  262,  544,
   44,  257,   42,  563,  563,  563,   62,  271,  272,  569,
  544,  522,   42,  524,  574,   62,  280,  577,  563,  579,
  579,  579,   41,  123,   41,  125,  126,   44,   62,  563,
  590,  591,   40,  593,  579,   41,   62,  264,   44,  599,
  599,  599,   40,   59,  604,  579,  606,  565,  566,  544,
   41,  611,  570,   44,  599,  615,  616,  617,  569,  257,
   41,   41,  257,   44,   44,  599,  577,  257,  563,   40,
  588,   40,  262,   62,  269,  270,  125,  257,   40,   59,
  591,  271,  272,   41,  579,   41,   44,   40,   44,   41,
  280,   41,   44,  604,   44,  606,   23,   24,   25,   26,
   27,   28,   29,   30,  599,  616,  617,   59,   40,   61,
   58,   41,   41,   93,   44,   44,   43,   44,   45,   38,
   47,   42,   40,  318,   38,   40,  258,  259,  260,   59,
  262,   61,   40,  329,   38,   40,   40,   40,   42,  271,
  272,  336,   41,  408,   42,  125,   40,   40,  280,  281,
  282,  283,  284,  285,   41,    0,   60,  257,  258,  259,
  260,  261,  262,  263,   38,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  273,  274,  275,
  280,  281,  282,  283,  284,  285,   61,   59,   33,  257,
  265,  266,  267,   38,   61,   40,  461,   42,   59,  464,
   45,  333,  334,  335,   40,  305,  306,  257,  257,  309,
  310,  311,  312,   42,  314,  315,  257,  317,  318,  408,
  269,  270,  322,   40,   59,   41,   41,  257,  328,  329,
  330,  260,  262,  333,  334,  335,  336,  262,   40,   58,
  167,  271,  272,  123,   41,  510,  271,  272,  257,   59,
  280,   40,   38,  262,   41,  280,   42,   40,   59,   40,
  285,   41,  271,  272,  260,  192,  193,  194,  195,  318,
  123,  280,  461,   59,   60,  464,  285,  257,  123,  123,
  125,  126,    0,  126,  549,  123,   59,  336,  215,  269,
  270,   42,  257,   41,   41,  126,   38,  257,   40,   41,
   42,  336,   44,  230,  231,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
   62,  510,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  318,   40,
   40,   41,  279,  257,   44,  257,  271,  257,  262,   91,
  257,  336,  464,   51,  400,  262,  336,  271,  272,  589,
  549,  498,   62,   -1,  271,  272,  280,  271,   -1,    0,
  310,  311,  312,  280,  314,  315,  280,  262,   -1,   -1,
   -1,  308,  319,  320,  321,  322,  323,  324,  325,  326,
  327,   91,   -1,   -1,   41,  309,   -1,   44,   -1,  303,
  327,  328,   33,  317,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   59,   -1,   45,  342,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  285,   -1,   -1,   -1,   -1,   -1,   93,   37,   38,   -1,
   40,   -1,   42,   -1,   -1,   -1,   46,   47,   -1,   -1,
  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,  257,  317,  318,   -1,   -1,  262,  322,  125,  265,
  266,  267,   -1,  328,  329,  330,  272,   -1,  333,  334,
  335,  336,  123,   33,  125,  126,  423,   -1,   38,  426,
   40,   91,   42,  262,  257,   45,  265,  266,  267,  262,
   -1,   -1,  271,  272,  441,  257,   -1,  303,  271,  272,
  262,  280,  449,  309,  310,  311,  312,  280,  314,  315,
  272,  317,   -1,   41,  124,   -1,   44,  322,  323,  324,
  325,  326,  327,  285,  471,  472,  473,  474,   -1,  476,
  309,   59,  479,   61,  257,   -1,  309,  257,  317,  262,
   -1,  303,  262,   -1,  317,  492,   -1,  309,  271,  272,
  126,  271,  272,   -1,   -1,  317,   -1,  280,   -1,  257,
  280,   -1,   -1,  123,  262,  285,  126,  514,   41,   -1,
   -1,   44,   33,  271,  272,   -1,  523,   38,  525,   40,
   -1,   42,  280,   -1,   45,   -1,   59,   -1,   61,  309,
  257,   -1,   -1,  540,   -1,   -1,   -1,  317,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  285,  309,  310,  311,  312,   -1,
  314,  315,   -1,  317,   -1,   -1,  593,   -1,   -1,  126,
   -1,  318,   -1,   -1,  305,  306,   -1,   -1,  309,  310,
  311,  312,  123,  314,  315,  126,  317,  318,   40,  336,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,
   -1,  257,  333,  334,  335,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,  257,  258,  259,
  260,  261,  262,  263,  280,  265,  266,  267,  268,  269,
  270,  271,  272,  257,   -1,   -1,  276,   -1,  262,   -1,
  280,  281,  282,  283,  284,  285,   40,  271,  272,   -1,
   -1,   -1,   -1,  309,   -1,   33,  280,   -1,   -1,   -1,
   38,  317,   40,   -1,   42,  305,  306,   45,   -1,  309,
  310,  311,  312,   -1,  314,  315,   -1,  317,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,  257,  258,  259,  260,
  261,  262,  263,  280,  265,  266,  267,  268,  269,  270,
  271,  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  285,  123,   33,   -1,  126,   -1,
   -1,   38,  309,   40,   -1,   42,   -1,   -1,   45,   -1,
  317,   -1,   -1,   -1,  305,  306,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,   -1,  317,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,  257,   -1,  328,  329,  330,
  262,   -1,  333,  334,  335,  336,   -1,   -1,   -1,  271,
  272,   -1,  257,   -1,   -1,  257,   -1,  262,  280,   -1,
  262,   -1,   -1,  265,  266,  267,  271,  272,   -1,  271,
  272,   -1,   -1,   -1,   -1,  280,   33,   -1,  280,   -1,
   -1,   38,   -1,   40,   -1,   42,  123,   -1,   45,  126,
   -1,  257,   37,   38,   -1,   40,  262,   42,   43,   -1,
   45,   46,   47,   -1,   -1,  271,  272,  309,  310,  311,
   -1,   -1,   -1,  257,  280,  317,   61,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,  257,
  258,  259,  260,  261,  262,  263,  280,  265,  266,  267,
  268,  269,  270,  271,  272,   -1,   91,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   -1,   33,   -1,  309,  123,   -1,   38,  126,
   40,   -1,   42,  317,   -1,   45,   -1,  305,  306,  124,
   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,  317,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,  329,  330,   -1,  257,  333,  334,  335,  336,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
  257,  258,  259,  260,  261,  262,  263,  280,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,  257,   -1,  276,
   -1,   -1,  262,  280,  281,  282,  283,  284,  285,   -1,
   33,  271,  272,  123,   -1,   38,  126,   40,   -1,   42,
  280,   -1,   45,   -1,   -1,   -1,   -1,   -1,  305,  306,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,
  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,   -1,   -1,  276,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,   -1,
   33,   -1,   -1,   -1,   -1,   38,  257,   40,   -1,   42,
  123,  262,   45,  126,  265,  266,  267,   -1,  305,  306,
  271,  272,  309,  310,  311,  312,   -1,  314,  315,  280,
  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
  270,  271,  272,   -1,  257,   -1,  276,   -1,   -1,  262,
  280,  281,  282,  283,  284,  285,   -1,   33,  271,  272,
  123,   -1,   38,  126,   40,   -1,   42,  280,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,  309,
  310,  311,  312,   -1,  314,  315,   -1,  317,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,  257,   -1,  276,   -1,   -1,  262,  280,  281,  282,
  283,  284,  285,   -1,   33,  271,  272,  123,   -1,   38,
  126,   40,   -1,   42,  280,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  305,  306,   -1,   -1,  309,  310,  311,  312,
   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,
  333,  334,  335,  336,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,  282,
  283,  284,  285,   -1,   33,   -1,   -1,   -1,   -1,   38,
  257,   40,   -1,   42,  123,  262,   45,  126,   -1,   -1,
   -1,   -1,  305,  306,  271,  272,  309,  310,  311,  312,
   -1,  314,  315,  280,  317,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,
  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,  257,   -1,
  276,   -1,   -1,  262,  280,  281,  282,  283,  284,  285,
   -1,   33,  271,  272,  123,   -1,   38,  126,   40,   -1,
   42,  280,   -1,   45,   -1,   -1,   -1,   -1,   -1,  305,
  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,  257,   -1,  276,   -1,   -1,
  262,  280,  281,  282,  283,  284,  285,   -1,   33,  271,
  272,  123,   -1,   38,  126,   40,   -1,   42,  280,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,   -1,  317,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,  123,   -1,
   45,  126,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,   -1,  317,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  305,  306,   -1,   -1,  309,  310,  311,
  312,   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  285,   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,  336,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  285,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,  123,   45,  125,  126,   -1,   -1,
  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,  305,  306,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   37,   38,  305,  306,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   59,   -1,   61,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,
   93,  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   -1,  123,   45,  125,  126,  305,  306,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,  270,
   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,
  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,   33,
  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,
   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,  257,   -1,  268,  269,  270,   -1,
   -1,  273,  274,  275,  276,   -1,  269,  270,   -1,  281,
  282,  283,  284,  285,   -1,   -1,   -1,   -1,   33,  123,
   -1,  125,  126,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,  318,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,  258,  259,  260,  261,   -1,
  263,   -1,   -1,  336,   -1,  268,  269,  270,   -1,   -1,
  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,
  283,  284,  285,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   41,   -1,   38,   44,   40,   -1,   42,   -1,  123,   45,
  125,  126,  305,  306,   -1,   -1,   -1,   -1,   59,   -1,
   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,
  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,
  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,  283,
  284,  285,   -1,   -1,  125,   -1,   33,  123,   -1,  125,
  126,   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,
  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,   -1,   -1,   -1,   -1,  281,  282,  283,  284,
  285,   -1,   -1,   -1,   -1,   33,  123,   -1,  125,  126,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   37,   38,
  305,  306,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   59,   -1,   61,  328,  329,  330,  257,   -1,  333,  334,
  335,  336,  258,  259,  260,  261,   -1,  263,  269,  270,
   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   93,  281,  282,  283,  284,  285,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   -1,  123,   45,  125,  126,  305,
  306,   -1,   -1,   -1,   -1,  124,  125,  318,   -1,   -1,
   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,  336,   -1,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,  276,
   -1,   -1,   -1,   -1,  281,  282,  283,  284,  285,   -1,
   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  305,  306,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,  257,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
  269,  270,   -1,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,  305,  306,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   59,   -1,  318,
  328,  329,  330,   -1,   -1,  333,  334,  335,  336,  258,
  259,  260,  261,   -1,  263,   -1,   -1,  336,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
   -1,   93,  281,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,  123,   45,   -1,  126,  305,  306,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,
   -1,  281,  282,  283,  284,  285,   -1,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   41,   -1,   -1,   44,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   59,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   41,  263,   93,   44,  257,   -1,  268,  269,  270,
   -1,   -1,  273,  274,  275,  276,   -1,  269,  270,   59,
  281,  282,  283,  284,  285,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,  125,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,  318,  328,  329,  330,
   -1,   -1,  333,  334,  335,  336,  258,  259,  260,  261,
   -1,  263,   -1,   -1,  336,  125,  268,  269,  270,   -1,
   -1,   -1,   -1,   -1,  276,   -1,   -1,   -1,   -1,  281,
  282,  283,  284,  285,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   -1,  123,   45,   41,  126,   43,
   44,   45,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,  318,   61,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,  257,  263,   93,
   -1,   -1,   -1,  268,  269,  270,   -1,   -1,   -1,  269,
  270,  276,   -1,   -1,   -1,   -1,  281,  282,  283,  284,
  285,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  305,  306,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,  318,  269,
  270,   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,  336,   -1,   -1,   -1,   -1,  336,   -1,   -1,   91,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   33,   -1,
  268,  269,  270,   38,   -1,   40,   41,   42,  276,   -1,
   45,   -1,   -1,  281,  282,  283,  284,  285,  318,   -1,
   -1,  123,   37,   38,  126,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,  336,  305,  306,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,  329,  330,   -1,   -1,  333,  334,  335,  336,  258,
  259,  260,  261,  257,  263,   -1,   -1,   -1,   93,  268,
  269,  270,   -1,   -1,   -1,  269,  270,  276,  123,   -1,
   -1,  126,  281,  282,  283,  284,  285,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,  124,
  125,   45,   -1,   -1,   -1,   33,  305,  306,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,  318,
   -1,   -1,   -1,  322,  318,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,  336,   -1,   -1,  257,  258,  259,  260,   93,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,  271,
  272,   44,   -1,   -1,   -1,   93,   -1,   -1,  280,  281,
  282,  283,  284,  285,   -1,   -1,   59,   -1,   38,  123,
   40,   41,  126,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,  305,  306,  123,   -1,   38,  126,   40,
   -1,   42,   62,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   93,   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,
   -1,  333,  334,  335,   -1,   -1,  271,  272,   -1,   -1,
   -1,   91,  257,   -1,   -1,  280,  281,  282,  283,  284,
  285,   -1,  125,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   33,   -1,   -1,
  305,  306,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,   -1,  126,   45,   -1,  333,  334,
  335,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,   -1,  257,  258,  259,  260,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,  257,
  258,  259,  260,   -1,  262,   -1,  280,  281,  282,  283,
  284,  285,   -1,  271,  272,   -1,   -1,  123,   -1,   -1,
  126,   -1,  280,  281,  282,  283,  284,  285,   -1,   -1,
   -1,  305,  306,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  305,  306,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,  333,
  334,  335,   -1,   -1,   60,   -1,   62,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  333,  334,  335,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,  257,  258,  259,  260,
  280,  262,   -1,   -1,   -1,  285,   -1,   -1,   94,   -1,
  271,  272,   -1,   -1,   -1,  318,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,  309,
   -1,   -1,   -1,  336,   -1,   -1,   -1,  317,   -1,   -1,
   -1,   -1,   -1,   37,  305,  306,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,   59,  262,   61,   -1,   -1,
   -1,   -1,  333,  334,  335,  271,  272,   -1,  257,  258,
  259,  260,   -1,  262,  280,  281,  282,  283,  284,  285,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   93,
   -1,  280,  281,  282,  283,  284,  285,   -1,   -1,  305,
  306,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,
   -1,  125,   -1,   59,   60,   61,   62,  333,  334,  335,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,  334,  335,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,  123,  124,  125,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   91,   -1,   93,   94,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   59,
   60,   61,   62,   -1,   -1,  123,  124,  125,   -1,   -1,
   59,   -1,   61,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   38,   -1,   40,
   41,   42,   -1,   44,   93,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   62,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,  318,  124,  125,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   91,   -1,  336,  269,  270,   -1,  272,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,   -1,  305,
  306,  307,  308,  309,  123,  124,  125,   -1,   -1,  257,
   -1,  317,  318,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,   -1,  272,   -1,   -1,   -1,   -1,   -1,
  336,   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,   -1,  305,  306,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,  257,   -1,  317,
  318,   -1,  262,   -1,   -1,   -1,   -1,   -1,  257,  269,
  270,   -1,  272,   -1,   -1,   -1,   -1,   -1,  336,   -1,
  269,  270,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,   -1,  305,  306,  307,  308,  309,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  317,  318,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  257,  318,
  271,  272,   -1,  262,   -1,   -1,  336,   -1,   -1,  280,
  269,  270,   -1,  272,  285,   -1,   -1,  336,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,  318,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   91,  280,   93,   94,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,  309,   -1,  123,  124,  125,   -1,
  257,   -1,  317,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  280,   93,   94,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   59,   60,
   61,   62,  309,   -1,  123,  124,  125,   -1,   -1,   59,
  317,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   91,  262,   93,   94,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   93,   -1,   -1,   37,   -1,   -1,  280,
   41,   -1,   43,   44,   -1,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,  124,  125,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,   -1,  317,   -1,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  124,  125,   -1,   -1,   -1,   -1,   -1,
  317,  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,   -1,   -1,   -1,   -1,   -1,  257,   -1,  317,  318,
   41,   -1,   -1,   44,   -1,   -1,   -1,  257,  269,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,   59,  269,
  270,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,  318,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,   -1,  269,  270,
   -1,   -1,   -1,   -1,  125,   -1,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,   37,   38,  307,  308,   41,   42,
   43,   44,   45,   46,   47,   37,   38,  318,   -1,   41,
   42,   43,   44,   45,   41,   47,   59,   44,   61,   -1,
   -1,   -1,   -1,   -1,   -1,  336,   -1,   59,   -1,   61,
   37,   -1,   59,   -1,   41,   42,   43,   44,   45,   -1,
   47,   37,   -1,   -1,   -1,   41,   42,   43,   44,   45,
   93,   47,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   59,   -1,   61,   93,   37,   -1,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   93,   -1,   -1,   59,
   -1,   61,  124,  125,   -1,   37,  257,   93,  125,   41,
   42,   43,   44,   45,   41,   47,   -1,   44,  269,  270,
   41,   -1,   -1,   44,   -1,   -1,   -1,   59,  125,   61,
   -1,   41,   59,   93,   44,   -1,   -1,   41,   59,  125,
   44,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   59,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   41,
   -1,   93,   44,   59,   -1,  125,   93,  318,   -1,   -1,
   -1,   -1,   93,   41,   -1,   -1,   44,   59,   41,   -1,
   -1,   44,   -1,   93,   -1,  336,   -1,   -1,   -1,   93,
   -1,   59,   -1,  125,   -1,   -1,   59,   93,  125,   -1,
   -1,   -1,   41,   -1,  125,   44,   -1,   -1,   -1,   41,
   -1,   93,   44,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   59,  125,   -1,   41,  257,   93,   44,   59,   41,  125,
   93,   44,   -1,   -1,   -1,  257,  269,  270,   -1,   -1,
  257,   59,   -1,  125,   -1,   -1,   59,  269,  270,   -1,
   -1,   -1,  269,  270,   93,   -1,   41,  125,   -1,   44,
  257,   93,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  269,  270,   59,   93,   -1,   -1,   -1,   -1,
   93,   -1,   -1,  269,  270,  318,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,  318,  257,   -1,   41,
   -1,  318,   44,  336,   -1,   -1,   -1,  125,   93,  269,
  270,   -1,  125,   -1,  336,   41,   -1,   59,   44,  336,
   -1,  318,   -1,   -1,   -1,  257,   41,   -1,   -1,   44,
  257,   -1,  318,   59,   -1,   -1,  257,  269,  270,  336,
  125,   -1,  269,  270,   59,   -1,   -1,  257,  269,  270,
  336,   93,   -1,  257,   -1,   -1,   -1,   -1,  318,  269,
  270,  257,   -1,   -1,   -1,  269,  270,   93,   -1,   -1,
   -1,   -1,   -1,  269,  270,  257,  336,   -1,   93,   -1,
   -1,   -1,   -1,  125,   -1,   -1,  318,  269,  270,  257,
   -1,  318,   -1,   -1,  257,   -1,   -1,  318,   -1,  125,
   -1,  269,  270,   -1,  336,   -1,  269,  270,  318,  336,
  125,   -1,   -1,   -1,  318,  336,   -1,   38,  257,   40,
   41,   42,  318,   44,   -1,  257,  336,   -1,   -1,   -1,
  269,  270,  336,   -1,   -1,   -1,  318,  269,  270,  257,
  336,   62,   -1,   38,  257,   40,   41,   42,   -1,   44,
  318,  269,  270,   -1,  336,  318,  269,  270,   -1,   38,
   -1,   40,   41,   42,   -1,   44,   -1,   62,  336,   -1,
   91,   -1,  257,  336,   -1,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,   62,  269,  270,  318,   40,   41,   -1,
   -1,   44,   38,   -1,   40,   41,   91,  336,   44,   -1,
  318,   -1,   -1,   -1,  336,  318,   -1,   -1,   -1,   62,
   -1,   -1,   91,   -1,   -1,  257,   62,   -1,  336,   -1,
   -1,   -1,   -1,  336,   -1,   -1,   -1,  269,  270,   -1,
   -1,  257,   -1,  318,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   -1,  257,  269,  270,   91,   -1,   -1,   -1,   -1,
   -1,  336,   -1,   -1,  269,  270,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  318,   -1,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,   -1,
  336,   91,   -1,   -1,   94,   -1,   38,   -1,   40,   41,
   42,  336,   44,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,  257,   -1,  271,  272,
   62,  262,   -1,   -1,  124,  125,   -1,  280,   37,   38,
  271,  272,   -1,   42,   43,   44,   45,   46,   47,  280,
   -1,   -1,  257,   -1,  285,   -1,   -1,  262,   -1,   91,
   59,   60,   61,   62,   -1,   -1,  309,  272,  257,   -1,
   -1,   -1,  303,  262,  317,   -1,   -1,   -1,  309,   -1,
  285,   -1,   -1,  272,   -1,   -1,  317,   -1,   -1,   -1,
   -1,   -1,   91,   -1,  257,   94,  285,   -1,  303,  262,
   -1,  257,   -1,   -1,  309,   -1,  262,   -1,  271,  272,
   -1,   -1,  317,   -1,  303,  271,  272,  280,   -1,   -1,
  309,   -1,  285,   -1,  280,  124,  125,   -1,  317,  285,
   33,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   44,   45,   -1,   47,   -1,  309,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  317,   -1,   -1,   60,   61,   62,
   -1,  317,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  309,  305,  306,  307,  308,  309,
   -1,  124,  317,  126,  257,  257,   -1,  317,   -1,  262,
  262,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
  272,   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,   60,
   -1,   62,   -1,  285,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,  303,   -1,   -1,   -1,   -1,  309,  309,   -1,   59,
   60,   61,   62,   94,  317,  317,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,   -1,  305,  306,  307,  308,
   -1,   91,  257,  312,   94,  314,  315,  262,   -1,   -1,
  265,  266,  267,   -1,   37,   38,  271,  272,   -1,   42,
   43,   44,   45,   46,   47,  280,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   59,   60,   61,   62,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,   -1,   59,   60,   61,   62,   91,   -1,
   -1,   94,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   91,   -1,   -1,   94,
   -1,  124,  125,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   60,   61,   62,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   91,   -1,   -1,   94,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   91,   -1,
  280,   94,   -1,   -1,  124,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,   -1,  305,  306,  307,  308,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   91,
   -1,   -1,   94,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   37,   38,
   -1,   40,  124,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  124,   -1,  305,  306,  307,  308,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,  124,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  124,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,  124,
  317,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   37,   -1,   -1,   40,   -1,   -1,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   62,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,
   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   91,
   -1,   -1,   94,   60,   61,   62,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  280,  124,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  309,  310,  311,  312,   -1,  314,  315,  124,  317,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,  305,  306,
  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,  124,  317,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,  124,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  280,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
  310,  311,  312,   -1,  314,  315,  124,  317,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,  124,  317,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   37,   -1,   -1,   -1,   -1,   -1,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   -1,  124,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   60,   -1,
   62,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   94,
  271,  272,   -1,  124,   -1,   -1,   -1,   -1,   -1,  280,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   60,   -1,   62,   -1,  309,  310,
  311,  312,   -1,  314,  315,   94,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,   94,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   94,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   94,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   94,   60,  257,   62,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,   -1,  257,   -1,   60,  280,   62,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   94,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,  309,  310,  311,
  312,   94,  314,  315,   -1,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,  309,  310,  311,
  312,   -1,  314,  315,   94,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   94,   60,   -1,   62,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,  257,  305,  306,  307,  308,  262,   -1,   -1,  265,
  266,  267,  257,   -1,   -1,  271,  272,  262,   -1,   -1,
  265,  266,  267,  257,  280,   -1,  271,  272,  262,   -1,
   -1,  265,  266,  267,  257,  280,   -1,  271,  272,  262,
   -1,   -1,  265,  266,  267,   -1,  280,   -1,  271,  272,
   -1,   -1,   -1,  309,  310,  311,  312,  280,  314,  315,
   -1,  317,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,   -1,  317,   -1,   -1,  309,  310,  311,  312,
  257,  314,  315,   -1,  317,  262,   -1,   -1,  265,  266,
  267,  257,   -1,   -1,  271,  272,  262,   -1,   -1,  265,
  266,  267,  257,  280,   -1,  271,  272,  262,   -1,   -1,
  265,  266,  267,  257,  280,   -1,  271,  272,  262,   -1,
   -1,  265,  266,  267,   -1,  280,   -1,  271,  272,   -1,
   -1,   -1,  309,  310,  311,  312,  280,  314,  315,   -1,
  317,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,   -1,   -1,  309,  310,  311,  312,  257,
  314,  315,   -1,  317,  262,   -1,   -1,  265,  266,  267,
  257,   -1,   -1,  271,  272,  262,   -1,   -1,  265,  266,
  267,  257,  280,   -1,  271,  272,  262,   -1,   -1,  265,
  266,  267,  257,  280,   -1,  271,  272,  262,   -1,   -1,
  265,  266,  267,   -1,  280,   -1,  271,  272,   -1,   -1,
   -1,  309,  310,  311,   -1,  280,   -1,   -1,   -1,  317,
   -1,   -1,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,
  317,   -1,   -1,  309,  310,  311,   -1,   -1,   -1,   -1,
   -1,  317,   -1,   -1,  309,  310,  311,   -1,  257,   -1,
   -1,   -1,  317,  262,   -1,   -1,  265,  266,  267,  257,
   -1,   -1,  271,  272,  262,   -1,   -1,  265,  266,  267,
  257,  280,   -1,  271,  272,  262,   -1,   -1,  265,  266,
  267,  257,  280,   -1,  271,  272,  262,   -1,   -1,  265,
  266,  267,   -1,  280,   -1,  271,  272,   -1,   -1,   -1,
  309,  310,  311,   -1,  280,   -1,   -1,   -1,  317,   -1,
   -1,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,
  317,   -1,   -1,  309,  310,  311,   -1,  257,   -1,   -1,
   -1,  317,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
  310,  311,   -1,   -1,   -1,   -1,   -1,  317,
};
static int yyctable[] = {                                      1,
    2,  184,  238,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  184,  238,
   -1,    7,    2,   -1,    8,    2,  184,  238,   -1,    9,
    2,  184,  238,   -1,   10,    2,  184,  238,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
  184,  238,   -1,   15,    2,  184,  238,   -1,   16,    2,
   -1,   17,    2,  184,  238,   -1,   18,    2,   -1,   19,
    2,   -1,   20,    2,   -1,   21,    2,   -1,   22,    2,
   -1,   23,    2,   -1,   24,    2,   -1,   25,    2,   -1,
   26,    2,   -1,   27,    2,   -1,   28,    2,   -1,   29,
    2,   -1,   30,    2,   -1,   31,    2,  238,   -1,   32,
    2,  238,   -1,   33,    2,  238,   -1,   34,    2,  238,
   -1,   35,    2,  238,   -1,   36,    2,  238,   -1,   37,
    2,  238,   -1,   38,    2,   -1,   39,    2,   -1,   40,
    2,   -1,   41,    2,   -1,   42,    2,   -1,   43,    2,
   -1,   44,    2,   -1,   45,    2,   -1,   46,    2,   -1,
   47,    2,   -1,   99,  184,  239,   -1,    6,  184,  239,
   -1,  100,  184,  239,   -1,  101,  184,  239,   -1,  102,
  184,  239,   -1,  103,   64,  184,  239,   -1,   15,  184,
  239,   -1,   17,   64,  184,  239,   -1,  104,   64,   -1,
   31,  239,   -1,   32,  239,   -1,  105,  239,   -1,   37,
  239,   -1,  109,  184,  238,   -1,  184,  238,   -1,   31,
  238,   -1,   37,  238,   -1,   99,   67,   -1,    6,   67,
   -1,   14,   67,   -1,  113,   67,   -1,   17,   67,   -1,
   99,  234,   -1,    6,  234,   -1,   14,  234,   -1,  113,
  234,   -1,   17,  234,   -1,   99,  235,   -1,    6,  235,
   -1,   14,  235,   -1,  113,  235,   -1,   17,  235,   -1,
   99,  236,   -1,    6,  236,   -1,   14,  236,   -1,  113,
  236,   -1,   17,  236,   -1,   99,   69,   -1,    6,   69,
   -1,   14,   69,   -1,  113,   69,   -1,   17,   69,   -1,
   99,  184,   -1,    6,  184,   -1,   14,  184,   -1,  113,
  184,   -1,   17,  184,   -1,  115,  176,   -1,  179,  175,
   -1,    1,  184,  238,   -1,    6,  184,  238,   -1,    8,
  184,  238,   -1,    9,  184,  238,   -1,   10,  184,  238,
   -1,   14,  184,  238,   -1,   15,  184,  238,   -1,   17,
  184,  238,   -1,   32,  238,   -1,   33,  238,   -1,   34,
  238,   -1,   35,  238,   -1,   36,  238,   -1,   99,  304,
   -1,   23,  304,   -1,   24,  304,   -1,   25,  304,   -1,
   26,  304,   -1,   27,  304,   -1,   30,  304,   -1,  209,
  124,   -1,   95,  124,   -1,  274,  238,   -1,    6,  238,
   -1,   14,  238,   -1,  113,  238,   -1,   17,  238,   -1,
  173,  184,   -1,   31,  173,   -1,   37,  173,   -1,  279,
  238,   -1,  282,   33,   -1,  274,  184,  238,   -1,  100,
  184,  238,   -1,  101,  184,  238,   -1,  102,  184,  238,
   -1,  105,  238,   -1,  291,   95,   -1,  208,   95,   -1,
  291,   68,   -1,  208,   68,   -1,  291,   97,   -1,  208,
   97,   -1,  291,   98,   -1,  208,   98,   -1,  291,   99,
   -1,  208,   99,   -1,  291,   65,   -1,  208,   65,   -1,
   70,   96,   -1,  291,   70,   96,   -1,  208,   70,   96,
   -1,  230,  256,   -1,  231,  256,   -1,  232,  256,   -1,
  233,  256,   -1,  234,  256,   -1,  235,  256,   -1,  236,
  256,   -1,  237,  256,   -1,  238,  256,   -1,  239,  256,
   -1,  240,  256,   -1,  241,  256,   -1,  242,  256,   -1,
  243,  256,   -1,  244,  256,   -1,  245,  256,   -1,  246,
  256,   -1,  247,  256,   -1,  248,  256,   -1,  249,  256,
   -1,  250,  256,   -1,  251,  256,   -1,  252,  256,   -1,
  253,  256,   -1,  254,  256,   -1,  255,  256,   -1,  256,
  256,   -1,  257,  256,   -1,  258,  256,   -1,  259,  256,
   -1,  260,  256,   -1,  261,  256,   -1,  262,  256,   -1,
  263,  256,   -1,  264,  256,   -1,  230,  258,   -1,  231,
  258,   -1,  232,  258,   -1,  233,  258,   -1,  234,  258,
   -1,  235,  258,   -1,  236,  258,   -1,  237,  258,   -1,
  238,  258,   -1,  239,  258,   -1,  240,  258,   -1,  241,
  258,   -1,  242,  258,   -1,  243,  258,   -1,  244,  258,
   -1,  245,  258,   -1,  246,  258,   -1,  247,  258,   -1,
  248,  258,   -1,  249,  258,   -1,  250,  258,   -1,  251,
  258,   -1,  252,  258,   -1,  253,  258,   -1,  254,  258,
   -1,  255,  258,   -1,  256,  258,   -1,  257,  258,   -1,
  258,  258,   -1,  259,  258,   -1,  260,  258,   -1,  261,
  258,   -1,  262,  258,   -1,  263,  258,   -1,  264,  258,
   -1,  230,  251,   -1,  231,  251,   -1,  232,  251,   -1,
  233,  251,   -1,  234,  251,   -1,  235,  251,   -1,  236,
  251,   -1,  237,  251,   -1,  238,  251,   -1,  239,  251,
   -1,  240,  251,   -1,  241,  251,   -1,  242,  251,   -1,
  243,  251,   -1,  244,  251,   -1,  245,  251,   -1,  246,
  251,   -1,  247,  251,   -1,  248,  251,   -1,  249,  251,
   -1,  250,  251,   -1,  251,  251,   -1,  252,  251,   -1,
  258,  251,   -1,  230,  254,   -1,  231,  254,   -1,  232,
  254,   -1,  233,  254,   -1,  234,  254,   -1,  235,  254,
   -1,  236,  254,   -1,  237,  254,   -1,  238,  254,   -1,
  239,  254,   -1,  240,  254,   -1,  241,  254,   -1,  242,
  254,   -1,  243,  254,   -1,  244,  254,   -1,  245,  254,
   -1,  246,  254,   -1,  247,  254,   -1,  248,  254,   -1,
  249,  254,   -1,  250,  254,   -1,  251,  254,   -1,  252,
  254,   -1,  258,  254,   -1,  230,  255,   -1,  231,  255,
   -1,  232,  255,   -1,  233,  255,   -1,  234,  255,   -1,
  235,  255,   -1,  236,  255,   -1,  237,  255,   -1,  238,
  255,   -1,  239,  255,   -1,  240,  255,   -1,  241,  255,
   -1,  242,  255,   -1,  243,  255,   -1,  244,  255,   -1,
  245,  255,   -1,  246,  255,   -1,  247,  255,   -1,  248,
  255,   -1,  249,  255,   -1,  250,  255,   -1,  251,  255,
   -1,  252,  255,   -1,  258,  255,   -1,  307,   64,   -1,
  230,  252,   -1,  231,  252,   -1,  232,  252,   -1,  233,
  252,   -1,  234,  252,   -1,  235,  252,   -1,  236,  252,
   -1,  237,  252,   -1,  238,  252,   -1,  239,  252,   -1,
  240,  252,   -1,  241,  252,   -1,  242,  252,   -1,  243,
  252,   -1,  244,  252,   -1,  245,  252,   -1,  246,  252,
   -1,  247,  252,   -1,  248,  252,   -1,  249,  252,   -1,
  250,  252,   -1,  251,  252,   -1,  252,  252,   -1,  258,
  252,   -1,  230,  253,   -1,  231,  253,   -1,  232,  253,
   -1,  233,  253,   -1,  234,  253,   -1,  235,  253,   -1,
  236,  253,   -1,  237,  253,   -1,  238,  253,   -1,  239,
  253,   -1,  240,  253,   -1,  241,  253,   -1,  242,  253,
   -1,  243,  253,   -1,  244,  253,   -1,  245,  253,   -1,
  246,  253,   -1,  247,  253,   -1,  248,  253,   -1,  249,
  253,   -1,  250,  253,   -1,  251,  253,   -1,  252,  253,
   -1,  258,  253,   -1,  230,  300,   -1,  231,  300,   -1,
  232,  300,   -1,  233,  300,   -1,  234,  300,   -1,  235,
  300,   -1,  236,  300,   -1,  237,  300,   -1,  238,  300,
   -1,  239,  300,   -1,  240,  300,   -1,  241,  300,   -1,
  242,  300,   -1,  243,  300,   -1,  244,  300,   -1,  245,
  300,   -1,  246,  300,   -1,  247,  300,   -1,  248,  300,
   -1,  249,  300,   -1,  250,  300,   -1,  251,  300,   -1,
  252,  300,   -1,  253,  300,   -1,  254,  300,   -1,  255,
  300,   -1,  256,  300,   -1,  257,  300,   -1,  258,  300,
   -1,  259,  300,   -1,  260,  300,   -1,  261,  300,   -1,
  262,  300,   -1,  263,  300,   -1,  264,  300,   -1,  230,
  301,   -1,  231,  301,   -1,  232,  301,   -1,  233,  301,
   -1,  234,  301,   -1,  235,  301,   -1,  236,  301,   -1,
  237,  301,   -1,  238,  301,   -1,  239,  301,   -1,  240,
  301,   -1,  241,  301,   -1,  242,  301,   -1,  243,  301,
   -1,  244,  301,   -1,  245,  301,   -1,  246,  301,   -1,
  247,  301,   -1,  248,  301,   -1,  249,  301,   -1,  250,
  301,   -1,  251,  301,   -1,  252,  301,   -1,  253,  301,
   -1,  254,  301,   -1,  255,  301,   -1,  256,  301,   -1,
  257,  301,   -1,  258,  301,   -1,  259,  301,   -1,  260,
  301,   -1,  261,  301,   -1,  262,  301,   -1,  263,  301,
   -1,  264,  301,   -1,  230,  303,   -1,  231,  303,   -1,
  232,  303,   -1,  233,  303,   -1,  234,  303,   -1,  235,
  303,   -1,  236,  303,   -1,  237,  303,   -1,  238,  303,
   -1,  239,  303,   -1,  240,  303,   -1,  241,  303,   -1,
  242,  303,   -1,  243,  303,   -1,  244,  303,   -1,  245,
  303,   -1,  246,  303,   -1,  247,  303,   -1,  248,  303,
   -1,  249,  303,   -1,  250,  303,   -1,  251,  303,   -1,
  252,  303,   -1,  253,  303,   -1,  254,  303,   -1,  255,
  303,   -1,  256,  303,   -1,  257,  303,   -1,  258,  303,
   -1,  259,  303,   -1,  260,  303,   -1,  261,  303,   -1,
  262,  303,   -1,  263,  303,   -1,  264,  303,   -1,  109,
  238,   -1,   31,  184,   -1,   37,  184,   -1,   64,  239,
   -1,  291,   70,   -1,  208,   70,   -1,  417,   47,   -1,
  418,   47,   -1,  419,   47,   -1,  420,   47,   -1,  432,
   64,   -1,  291,   66,   -1,  208,   66,   -1,  230,  271,
   -1,  231,  271,   -1,  232,  271,   -1,  233,  271,   -1,
  234,  271,   -1,  235,  271,   -1,  236,  271,   -1,  237,
  271,   -1,  238,  271,   -1,  239,  271,   -1,  240,  271,
   -1,  241,  271,   -1,  242,  271,   -1,  243,  271,   -1,
  244,  271,   -1,  245,  271,   -1,  246,  271,   -1,  247,
  271,   -1,  248,  271,   -1,  249,  271,   -1,  250,  271,
   -1,  251,  271,   -1,  252,  271,   -1,  253,  271,   -1,
  254,  271,   -1,  255,  271,   -1,  256,  271,   -1,  257,
  271,   -1,  258,  271,   -1,  259,  271,   -1,  260,  271,
   -1,  261,  271,   -1,  262,  271,   -1,  263,  271,   -1,
  264,  271,   -1,  230,  272,   -1,  231,  272,   -1,  232,
  272,   -1,  233,  272,   -1,  234,  272,   -1,  235,  272,
   -1,  236,  272,   -1,  237,  272,   -1,  238,  272,   -1,
  239,  272,   -1,  240,  272,   -1,  241,  272,   -1,  242,
  272,   -1,  243,  272,   -1,  244,  272,   -1,  245,  272,
   -1,  246,  272,   -1,  247,  272,   -1,  248,  272,   -1,
  249,  272,   -1,  250,  272,   -1,  251,  272,   -1,  252,
  272,   -1,  253,  272,   -1,  254,  272,   -1,  255,  272,
   -1,  256,  272,   -1,  257,  272,   -1,  258,  272,   -1,
  259,  272,   -1,  260,  272,   -1,  261,  272,   -1,  262,
  272,   -1,  263,  272,   -1,  264,  272,   -1,  230,  273,
   -1,  231,  273,   -1,  232,  273,   -1,  233,  273,   -1,
  234,  273,   -1,  235,  273,   -1,  236,  273,   -1,  237,
  273,   -1,  238,  273,   -1,  239,  273,   -1,  240,  273,
   -1,  241,  273,   -1,  242,  273,   -1,  243,  273,   -1,
  244,  273,   -1,  245,  273,   -1,  246,  273,   -1,  247,
  273,   -1,  248,  273,   -1,  249,  273,   -1,  250,  273,
   -1,  251,  273,   -1,  252,  273,   -1,  253,  273,   -1,
  254,  273,   -1,  255,  273,   -1,  256,  273,   -1,  257,
  273,   -1,  258,  273,   -1,  259,  273,   -1,  260,  273,
   -1,  261,  273,   -1,  262,  273,   -1,  263,  273,   -1,
  264,  273,   -1,  230,  274,   -1,  231,  274,   -1,  232,
  274,   -1,  233,  274,   -1,  234,  274,   -1,  235,  274,
   -1,  236,  274,   -1,  237,  274,   -1,  238,  274,   -1,
  239,  274,   -1,  240,  274,   -1,  241,  274,   -1,  242,
  274,   -1,  243,  274,   -1,  244,  274,   -1,  245,  274,
   -1,  246,  274,   -1,  247,  274,   -1,  248,  274,   -1,
  249,  274,   -1,  250,  274,   -1,  251,  274,   -1,  252,
  274,   -1,  253,  274,   -1,  254,  274,   -1,  255,  274,
   -1,  256,  274,   -1,  257,  274,   -1,  258,  274,   -1,
  259,  274,   -1,  260,  274,   -1,  261,  274,   -1,  262,
  274,   -1,  263,  274,   -1,  264,  274,   -1,  230,  275,
   -1,  231,  275,   -1,  232,  275,   -1,  233,  275,   -1,
  234,  275,   -1,  235,  275,   -1,  236,  275,   -1,  237,
  275,   -1,  238,  275,   -1,  239,  275,   -1,  240,  275,
   -1,  241,  275,   -1,  242,  275,   -1,  243,  275,   -1,
  244,  275,   -1,  245,  275,   -1,  246,  275,   -1,  247,
  275,   -1,  248,  275,   -1,  249,  275,   -1,  250,  275,
   -1,  251,  275,   -1,  252,  275,   -1,  253,  275,   -1,
  254,  275,   -1,  255,  275,   -1,  256,  275,   -1,  257,
  275,   -1,  258,  275,   -1,  259,  275,   -1,  260,  275,
   -1,  261,  275,   -1,  262,  275,   -1,  263,  275,   -1,
  264,  275,   -1,  230,  276,   -1,  231,  276,   -1,  232,
  276,   -1,  233,  276,   -1,  234,  276,   -1,  235,  276,
   -1,  236,  276,   -1,  237,  276,   -1,  238,  276,   -1,
  239,  276,   -1,  240,  276,   -1,  241,  276,   -1,  242,
  276,   -1,  243,  276,   -1,  244,  276,   -1,  245,  276,
   -1,  246,  276,   -1,  247,  276,   -1,  248,  276,   -1,
  249,  276,   -1,  250,  276,   -1,  251,  276,   -1,  252,
  276,   -1,  253,  276,   -1,  254,  276,   -1,  255,  276,
   -1,  256,  276,   -1,  257,  276,   -1,  258,  276,   -1,
  259,  276,   -1,  260,  276,   -1,  261,  276,   -1,  262,
  276,   -1,  263,  276,   -1,  264,  276,   -1,  230,  277,
   -1,  231,  277,   -1,  232,  277,   -1,  233,  277,   -1,
  234,  277,   -1,  235,  277,   -1,  236,  277,   -1,  237,
  277,   -1,  238,  277,   -1,  239,  277,   -1,  240,  277,
   -1,  241,  277,   -1,  242,  277,   -1,  243,  277,   -1,
  244,  277,   -1,  245,  277,   -1,  246,  277,   -1,  247,
  277,   -1,  248,  277,   -1,  249,  277,   -1,  250,  277,
   -1,  251,  277,   -1,  252,  277,   -1,  253,  277,   -1,
  254,  277,   -1,  255,  277,   -1,  256,  277,   -1,  257,
  277,   -1,  258,  277,   -1,  259,  277,   -1,  260,  277,
   -1,  261,  277,   -1,  262,  277,   -1,  263,  277,   -1,
  264,  277,   -1,  230,  278,   -1,  231,  278,   -1,  232,
  278,   -1,  233,  278,   -1,  234,  278,   -1,  235,  278,
   -1,  236,  278,   -1,  237,  278,   -1,  238,  278,   -1,
  239,  278,   -1,  240,  278,   -1,  241,  278,   -1,  242,
  278,   -1,  243,  278,   -1,  244,  278,   -1,  245,  278,
   -1,  246,  278,   -1,  247,  278,   -1,  248,  278,   -1,
  249,  278,   -1,  250,  278,   -1,  251,  278,   -1,  252,
  278,   -1,  253,  278,   -1,  254,  278,   -1,  255,  278,
   -1,  256,  278,   -1,  257,  278,   -1,  258,  278,   -1,
  259,  278,   -1,  260,  278,   -1,  261,  278,   -1,  262,
  278,   -1,  263,  278,   -1,  264,  278,   -1,  230,  279,
   -1,  231,  279,   -1,  232,  279,   -1,  233,  279,   -1,
  234,  279,   -1,  235,  279,   -1,  236,  279,   -1,  237,
  279,   -1,  238,  279,   -1,  239,  279,   -1,  240,  279,
   -1,  241,  279,   -1,  242,  279,   -1,  243,  279,   -1,
  244,  279,   -1,  245,  279,   -1,  246,  279,   -1,  247,
  279,   -1,  248,  279,   -1,  249,  279,   -1,  250,  279,
   -1,  251,  279,   -1,  252,  279,   -1,  258,  279,   -1,
  230,  280,   -1,  231,  280,   -1,  232,  280,   -1,  233,
  280,   -1,  234,  280,   -1,  235,  280,   -1,  236,  280,
   -1,  237,  280,   -1,  238,  280,   -1,  239,  280,   -1,
  240,  280,   -1,  241,  280,   -1,  242,  280,   -1,  243,
  280,   -1,  244,  280,   -1,  245,  280,   -1,  246,  280,
   -1,  247,  280,   -1,  248,  280,   -1,  249,  280,   -1,
  250,  280,   -1,  251,  280,   -1,  252,  280,   -1,  258,
  280,   -1,  230,  281,   -1,  231,  281,   -1,  232,  281,
   -1,  233,  281,   -1,  234,  281,   -1,  235,  281,   -1,
  236,  281,   -1,  237,  281,   -1,  238,  281,   -1,  239,
  281,   -1,  240,  281,   -1,  241,  281,   -1,  242,  281,
   -1,  243,  281,   -1,  244,  281,   -1,  245,  281,   -1,
  246,  281,   -1,  247,  281,   -1,  248,  281,   -1,  249,
  281,   -1,  250,  281,   -1,  251,  281,   -1,  252,  281,
   -1,  253,  281,   -1,  254,  281,   -1,  255,  281,   -1,
  256,  281,   -1,  257,  281,   -1,  258,  281,   -1,  259,
  281,   -1,  260,  281,   -1,  261,  281,   -1,  262,  281,
   -1,  263,  281,   -1,  264,  281,   -1,  230,  282,   -1,
  231,  282,   -1,  232,  282,   -1,  233,  282,   -1,  234,
  282,   -1,  235,  282,   -1,  236,  282,   -1,  237,  282,
   -1,  238,  282,   -1,  239,  282,   -1,  240,  282,   -1,
  241,  282,   -1,  242,  282,   -1,  243,  282,   -1,  244,
  282,   -1,  245,  282,   -1,  246,  282,   -1,  247,  282,
   -1,  248,  282,   -1,  249,  282,   -1,  250,  282,   -1,
  251,  282,   -1,  252,  282,   -1,  253,  282,   -1,  254,
  282,   -1,  255,  282,   -1,  256,  282,   -1,  257,  282,
   -1,  258,  282,   -1,  259,  282,   -1,  260,  282,   -1,
  261,  282,   -1,  262,  282,   -1,  263,  282,   -1,  264,
  282,   -1,  230,  283,   -1,  231,  283,   -1,  232,  283,
   -1,  233,  283,   -1,  234,  283,   -1,  235,  283,   -1,
  236,  283,   -1,  237,  283,   -1,  238,  283,   -1,  239,
  283,   -1,  240,  283,   -1,  241,  283,   -1,  242,  283,
   -1,  243,  283,   -1,  244,  283,   -1,  245,  283,   -1,
  246,  283,   -1,  247,  283,   -1,  248,  283,   -1,  249,
  283,   -1,  250,  283,   -1,  251,  283,   -1,  252,  283,
   -1,  258,  283,   -1,  230,  284,   -1,  231,  284,   -1,
  232,  284,   -1,  233,  284,   -1,  234,  284,   -1,  235,
  284,   -1,  236,  284,   -1,  237,  284,   -1,  238,  284,
   -1,  239,  284,   -1,  240,  284,   -1,  241,  284,   -1,
  242,  284,   -1,  243,  284,   -1,  244,  284,   -1,  245,
  284,   -1,  246,  284,   -1,  247,  284,   -1,  248,  284,
   -1,  249,  284,   -1,  250,  284,   -1,  251,  284,   -1,
  252,  284,   -1,  253,  284,   -1,  254,  284,   -1,  255,
  284,   -1,  256,  284,   -1,  257,  284,   -1,  258,  284,
   -1,  259,  284,   -1,  260,  284,   -1,  261,  284,   -1,
  262,  284,   -1,  263,  284,   -1,  264,  284,   -1,  230,
  285,   -1,  231,  285,   -1,  232,  285,   -1,  233,  285,
   -1,  234,  285,   -1,  235,  285,   -1,  236,  285,   -1,
  237,  285,   -1,  238,  285,   -1,  239,  285,   -1,  240,
  285,   -1,  241,  285,   -1,  242,  285,   -1,  243,  285,
   -1,  244,  285,   -1,  245,  285,   -1,  246,  285,   -1,
  247,  285,   -1,  248,  285,   -1,  249,  285,   -1,  250,
  285,   -1,  251,  285,   -1,  252,  285,   -1,  253,  285,
   -1,  254,  285,   -1,  255,  285,   -1,  256,  285,   -1,
  257,  285,   -1,  258,  285,   -1,  259,  285,   -1,  260,
  285,   -1,  261,  285,   -1,  262,  285,   -1,  263,  285,
   -1,  264,  285,   -1,  230,  286,   -1,  231,  286,   -1,
  232,  286,   -1,  233,  286,   -1,  234,  286,   -1,  235,
  286,   -1,  236,  286,   -1,  237,  286,   -1,  238,  286,
   -1,  239,  286,   -1,  240,  286,   -1,  241,  286,   -1,
  242,  286,   -1,  243,  286,   -1,  244,  286,   -1,  245,
  286,   -1,  246,  286,   -1,  247,  286,   -1,  248,  286,
   -1,  249,  286,   -1,  250,  286,   -1,  251,  286,   -1,
  252,  286,   -1,  253,  286,   -1,  254,  286,   -1,  255,
  286,   -1,  256,  286,   -1,  257,  286,   -1,  258,  286,
   -1,  259,  286,   -1,  260,  286,   -1,  261,  286,   -1,
  262,  286,   -1,  263,  286,   -1,  264,  286,   -1,  230,
  287,   -1,  231,  287,   -1,  232,  287,   -1,  233,  287,
   -1,  234,  287,   -1,  235,  287,   -1,  236,  287,   -1,
  237,  287,   -1,  238,  287,   -1,  239,  287,   -1,  240,
  287,   -1,  241,  287,   -1,  242,  287,   -1,  243,  287,
   -1,  244,  287,   -1,  245,  287,   -1,  246,  287,   -1,
  247,  287,   -1,  248,  287,   -1,  249,  287,   -1,  250,
  287,   -1,  251,  287,   -1,  252,  287,   -1,  253,  287,
   -1,  254,  287,   -1,  255,  287,   -1,  256,  287,   -1,
  257,  287,   -1,  258,  287,   -1,  259,  287,   -1,  260,
  287,   -1,  261,  287,   -1,  262,  287,   -1,  263,  287,
   -1,  264,  287,   -1,  230,  289,   -1,  231,  289,   -1,
  232,  289,   -1,  233,  289,   -1,  234,  289,   -1,  235,
  289,   -1,  236,  289,   -1,  237,  289,   -1,  238,  289,
   -1,  239,  289,   -1,  240,  289,   -1,  241,  289,   -1,
  242,  289,   -1,  243,  289,   -1,  244,  289,   -1,  245,
  289,   -1,  246,  289,   -1,  247,  289,   -1,  248,  289,
   -1,  249,  289,   -1,  250,  289,   -1,  251,  289,   -1,
  252,  289,   -1,  258,  289,   -1,  230,  290,   -1,  231,
  290,   -1,  232,  290,   -1,  233,  290,   -1,  234,  290,
   -1,  235,  290,   -1,  236,  290,   -1,  237,  290,   -1,
  238,  290,   -1,  239,  290,   -1,  240,  290,   -1,  241,
  290,   -1,  242,  290,   -1,  243,  290,   -1,  244,  290,
   -1,  245,  290,   -1,  246,  290,   -1,  247,  290,   -1,
  248,  290,   -1,  249,  290,   -1,  250,  290,   -1,  251,
  290,   -1,  252,  290,   -1,  253,  290,   -1,  254,  290,
   -1,  255,  290,   -1,  256,  290,   -1,  257,  290,   -1,
  258,  290,   -1,  259,  290,   -1,  260,  290,   -1,  261,
  290,   -1,  262,  290,   -1,  263,  290,   -1,  264,  290,
   -1,  230,  269,   -1,  231,  269,   -1,  232,  269,   -1,
  233,  269,   -1,  234,  269,   -1,  235,  269,   -1,  236,
  269,   -1,  237,  269,   -1,  238,  269,   -1,  239,  269,
   -1,  240,  269,   -1,  241,  269,   -1,  242,  269,   -1,
  243,  269,   -1,  244,  269,   -1,  245,  269,   -1,  246,
  269,   -1,  247,  269,   -1,  248,  269,   -1,  249,  269,
   -1,  250,  269,   -1,  251,  269,   -1,  252,  269,   -1,
  253,  269,   -1,  254,  269,   -1,  255,  269,   -1,  256,
  269,   -1,  257,  269,   -1,  258,  269,   -1,  259,  269,
   -1,  260,  269,   -1,  261,  269,   -1,  262,  269,   -1,
  263,  269,   -1,  264,  269,   -1,  230,  270,   -1,  231,
  270,   -1,  232,  270,   -1,  233,  270,   -1,  234,  270,
   -1,  235,  270,   -1,  236,  270,   -1,  237,  270,   -1,
  238,  270,   -1,  239,  270,   -1,  240,  270,   -1,  241,
  270,   -1,  242,  270,   -1,  243,  270,   -1,  244,  270,
   -1,  245,  270,   -1,  246,  270,   -1,  247,  270,   -1,
  248,  270,   -1,  249,  270,   -1,  250,  270,   -1,  251,
  270,   -1,  252,  270,   -1,  253,  270,   -1,  254,  270,
   -1,  255,  270,   -1,  256,  270,   -1,  257,  270,   -1,
  258,  270,   -1,  259,  270,   -1,  260,  270,   -1,  261,
  270,   -1,  262,  270,   -1,  263,  270,   -1,  264,  270,
   -1,  230,  260,   -1,  231,  260,   -1,  232,  260,   -1,
  233,  260,   -1,  234,  260,   -1,  235,  260,   -1,  236,
  260,   -1,  237,  260,   -1,  238,  260,   -1,  239,  260,
   -1,  240,  260,   -1,  241,  260,   -1,  242,  260,   -1,
  243,  260,   -1,  244,  260,   -1,  245,  260,   -1,  246,
  260,   -1,  247,  260,   -1,  248,  260,   -1,  249,  260,
   -1,  250,  260,   -1,  251,  260,   -1,  252,  260,   -1,
  258,  260,   -1,  230,  261,   -1,  231,  261,   -1,  232,
  261,   -1,  233,  261,   -1,  234,  261,   -1,  235,  261,
   -1,  236,  261,   -1,  237,  261,   -1,  238,  261,   -1,
  239,  261,   -1,  240,  261,   -1,  241,  261,   -1,  242,
  261,   -1,  243,  261,   -1,  244,  261,   -1,  245,  261,
   -1,  246,  261,   -1,  247,  261,   -1,  248,  261,   -1,
  249,  261,   -1,  250,  261,   -1,  251,  261,   -1,  252,
  261,   -1,  258,  261,   -1,  230,  262,   -1,  231,  262,
   -1,  232,  262,   -1,  233,  262,   -1,  234,  262,   -1,
  235,  262,   -1,  236,  262,   -1,  237,  262,   -1,  238,
  262,   -1,  239,  262,   -1,  240,  262,   -1,  241,  262,
   -1,  242,  262,   -1,  243,  262,   -1,  244,  262,   -1,
  245,  262,   -1,  246,  262,   -1,  247,  262,   -1,  248,
  262,   -1,  249,  262,   -1,  250,  262,   -1,  251,  262,
   -1,  252,  262,   -1,  258,  262,   -1,  230,  263,   -1,
  231,  263,   -1,  232,  263,   -1,  233,  263,   -1,  234,
  263,   -1,  235,  263,   -1,  236,  263,   -1,  237,  263,
   -1,  238,  263,   -1,  239,  263,   -1,  240,  263,   -1,
  241,  263,   -1,  242,  263,   -1,  243,  263,   -1,  244,
  263,   -1,  245,  263,   -1,  246,  263,   -1,  247,  263,
   -1,  248,  263,   -1,  249,  263,   -1,  250,  263,   -1,
  251,  263,   -1,  252,  263,   -1,  258,  263,   -1,  230,
  264,   -1,  231,  264,   -1,  232,  264,   -1,  233,  264,
   -1,  234,  264,   -1,  235,  264,   -1,  236,  264,   -1,
  237,  264,   -1,  238,  264,   -1,  239,  264,   -1,  240,
  264,   -1,  241,  264,   -1,  242,  264,   -1,  243,  264,
   -1,  244,  264,   -1,  245,  264,   -1,  246,  264,   -1,
  247,  264,   -1,  248,  264,   -1,  249,  264,   -1,  250,
  264,   -1,  251,  264,   -1,  252,  264,   -1,  258,  264,
   -1,  230,  267,   -1,  231,  267,   -1,  232,  267,   -1,
  233,  267,   -1,  234,  267,   -1,  235,  267,   -1,  236,
  267,   -1,  237,  267,   -1,  238,  267,   -1,  239,  267,
   -1,  240,  267,   -1,  241,  267,   -1,  242,  267,   -1,
  243,  267,   -1,  244,  267,   -1,  245,  267,   -1,  246,
  267,   -1,  247,  267,   -1,  248,  267,   -1,  249,  267,
   -1,  250,  267,   -1,  251,  267,   -1,  252,  267,   -1,
  253,  267,   -1,  254,  267,   -1,  255,  267,   -1,  256,
  267,   -1,  257,  267,   -1,  258,  267,   -1,  259,  267,
   -1,  260,  267,   -1,  261,  267,   -1,  262,  267,   -1,
  263,  267,   -1,  264,  267,   -1,  230,  265,   -1,  231,
  265,   -1,  232,  265,   -1,  233,  265,   -1,  234,  265,
   -1,  235,  265,   -1,  236,  265,   -1,  237,  265,   -1,
  238,  265,   -1,  239,  265,   -1,  240,  265,   -1,  241,
  265,   -1,  242,  265,   -1,  243,  265,   -1,  244,  265,
   -1,  245,  265,   -1,  246,  265,   -1,  247,  265,   -1,
  248,  265,   -1,  249,  265,   -1,  250,  265,   -1,  251,
  265,   -1,  252,  265,   -1,  258,  265,   -1,  230,  266,
   -1,  231,  266,   -1,  232,  266,   -1,  233,  266,   -1,
  234,  266,   -1,  235,  266,   -1,  236,  266,   -1,  237,
  266,   -1,  238,  266,   -1,  239,  266,   -1,  240,  266,
   -1,  241,  266,   -1,  242,  266,   -1,  243,  266,   -1,
  244,  266,   -1,  245,  266,   -1,  246,  266,   -1,  247,
  266,   -1,  248,  266,   -1,  249,  266,   -1,  250,  266,
   -1,  251,  266,   -1,  252,  266,   -1,  258,  266,   -1,
  230,  268,   -1,  231,  268,   -1,  232,  268,   -1,  233,
  268,   -1,  234,  268,   -1,  235,  268,   -1,  236,  268,
   -1,  237,  268,   -1,  238,  268,   -1,  239,  268,   -1,
  240,  268,   -1,  241,  268,   -1,  242,  268,   -1,  243,
  268,   -1,  244,  268,   -1,  245,  268,   -1,  246,  268,
   -1,  247,  268,   -1,  248,  268,   -1,  249,  268,   -1,
  250,  268,   -1,  251,  268,   -1,  252,  268,   -1,  258,
  268,   -1,  230,  288,   -1,  231,  288,   -1,  232,  288,
   -1,  233,  288,   -1,  234,  288,   -1,  235,  288,   -1,
  236,  288,   -1,  237,  288,   -1,  238,  288,   -1,  239,
  288,   -1,  240,  288,   -1,  241,  288,   -1,  242,  288,
   -1,  243,  288,   -1,  244,  288,   -1,  245,  288,   -1,
  246,  288,   -1,  247,  288,   -1,  248,  288,   -1,  249,
  288,   -1,  250,  288,   -1,  251,  288,   -1,  252,  288,
   -1,  258,  288,   -1,  230,  294,   -1,  231,  294,   -1,
  232,  294,   -1,  233,  294,   -1,  234,  294,   -1,  235,
  294,   -1,  236,  294,   -1,  237,  294,   -1,  238,  294,
   -1,  239,  294,   -1,  240,  294,   -1,  241,  294,   -1,
  242,  294,   -1,  243,  294,   -1,  244,  294,   -1,  245,
  294,   -1,  246,  294,   -1,  247,  294,   -1,  248,  294,
   -1,  249,  294,   -1,  250,  294,   -1,  251,  294,   -1,
  252,  294,   -1,  253,  294,   -1,  254,  294,   -1,  255,
  294,   -1,  256,  294,   -1,  257,  294,   -1,  258,  294,
   -1,  259,  294,   -1,  260,  294,   -1,  261,  294,   -1,
  262,  294,   -1,  263,  294,   -1,  264,  294,   -1,  230,
  302,   -1,  231,  302,   -1,  232,  302,   -1,  233,  302,
   -1,  234,  302,   -1,  235,  302,   -1,  236,  302,   -1,
  237,  302,   -1,  238,  302,   -1,  239,  302,   -1,  240,
  302,   -1,  241,  302,   -1,  242,  302,   -1,  243,  302,
   -1,  244,  302,   -1,  245,  302,   -1,  246,  302,   -1,
  247,  302,   -1,  248,  302,   -1,  249,  302,   -1,  250,
  302,   -1,  251,  302,   -1,  252,  302,   -1,  253,  302,
   -1,  254,  302,   -1,  255,  302,   -1,  256,  302,   -1,
  257,  302,   -1,  258,  302,   -1,  259,  302,   -1,  260,
  302,   -1,  261,  302,   -1,  262,  302,   -1,  263,  302,
   -1,  264,  302,   -1,  463,   83,   -1,   12,   83,   -1,
   13,   83,   -1,  465,   83,   -1,   46,   83,   -1,  282,
   79,   -1,
};
#define YYFINAL 48
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 346
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknEllipsis","tknConstCast","tknStaticCast","tknDynamicCast",
"tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq","tknMulEq",
"tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknConst","tknStatic","tknExtern","tknVirtual","tknOverride","tknInline",
"tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine","tknUndef",
"tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf",
"tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew","tknDelete",
"tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX",
"POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 991 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3673 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 277 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4063 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 284 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4069 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 285 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4079 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4089 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4095 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 298 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4101 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4107 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4113 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4119 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4125 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4131 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4137 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4143 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4149 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4155 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4161 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4167 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4173 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4179 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4185 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4191 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4197 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4203 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4209 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4215 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4221 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4227 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4233 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4239 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4245 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4251 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4257 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 4263 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4272 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4281 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4290 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4299 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4308 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 352 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4317 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 358 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4325 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 361 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4333 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4341 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 369 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4349 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 4355 "y_tab.c"
break;
case 45:
  if (!yytrial)
#line 375 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 4361 "y_tab.c"
break;
case 46:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4366 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4373 "y_tab.c"
break;
case 47:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4378 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4385 "y_tab.c"
break;
case 48:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4390 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4397 "y_tab.c"
break;
case 49:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4402 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4409 "y_tab.c"
break;
case 50:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4414 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4421 "y_tab.c"
break;
case 51:
#line 398 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4426 "y_tab.c"
  if (!yytrial)
#line 398 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4433 "y_tab.c"
break;
case 52:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4438 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4442 "y_tab.c"
break;
case 53:
#line 407 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4447 "y_tab.c"
  if (!yytrial)
#line 407 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4451 "y_tab.c"
break;
case 54:
#line 408 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4456 "y_tab.c"
  if (!yytrial)
#line 408 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4460 "y_tab.c"
break;
case 55:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4465 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4469 "y_tab.c"
break;
case 56:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4474 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4478 "y_tab.c"
break;
case 57:
#line 416 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4483 "y_tab.c"
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4487 "y_tab.c"
break;
case 58:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4492 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4496 "y_tab.c"
break;
case 59:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4501 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4505 "y_tab.c"
break;
case 60:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4510 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4514 "y_tab.c"
break;
case 61:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4519 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4523 "y_tab.c"
break;
case 62:
#line 425 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4528 "y_tab.c"
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 4532 "y_tab.c"
break;
case 63:
#line 426 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4537 "y_tab.c"
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 4541 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4547 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4553 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4559 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4565 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4571 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4577 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4583 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4589 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4595 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4601 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4607 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4613 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4619 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4625 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4631 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 448 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 4637 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4643 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4652 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4661 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4669 "y_tab.c"
break;
case 84:
#line 465 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4674 "y_tab.c"
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4680 "y_tab.c"
break;
case 85:
#line 468 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4685 "y_tab.c"
  if (!yytrial)
#line 468 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4691 "y_tab.c"
break;
case 86:
#line 471 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4696 "y_tab.c"
  if (!yytrial)
#line 471 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4702 "y_tab.c"
break;
case 87:
#line 474 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4707 "y_tab.c"
  if (!yytrial)
#line 474 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4713 "y_tab.c"
break;
case 88:
#line 478 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4718 "y_tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4724 "y_tab.c"
break;
case 89:
#line 481 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4729 "y_tab.c"
  if (!yytrial)
#line 481 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4735 "y_tab.c"
break;
case 90:
#line 484 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4740 "y_tab.c"
  if (!yytrial)
#line 484 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4746 "y_tab.c"
break;
case 91:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4751 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4755 "y_tab.c"
break;
case 92:
#line 490 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4760 "y_tab.c"
  if (!yytrial)
#line 490 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4764 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 493 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4770 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4779 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 502 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4785 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4791 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4797 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4803 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 506 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4809 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 507 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4818 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4824 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 516 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4835 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 522 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4845 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 527 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4856 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 533 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4866 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 538 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4877 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 544 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4887 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4895 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 556 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4903 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 559 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4911 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4919 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 568 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4928 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4936 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4942 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4948 "y_tab.c"
break;
case 116:
#line 581 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4953 "y_tab.c"
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4957 "y_tab.c"
break;
case 117:
#line 584 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4962 "y_tab.c"
  if (!yytrial)
#line 584 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 4970 "y_tab.c"
break;
case 118:
#line 591 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4975 "y_tab.c"
  if (!yytrial)
#line 591 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4982 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4992 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 601 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5002 "y_tab.c"
break;
case 121:
#line 608 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5007 "y_tab.c"
  if (!yytrial)
#line 608 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5011 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 611 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5021 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 616 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5031 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 623 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5037 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5043 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5049 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5055 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5061 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 628 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5067 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 629 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5073 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5079 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5085 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5091 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5097 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5103 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5109 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5115 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5121 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5127 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5133 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5139 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5145 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5151 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5157 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5163 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5169 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5175 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5181 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5187 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5193 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5199 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5205 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5211 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5217 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5223 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5229 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5235 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5241 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5247 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5253 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5259 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5265 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5271 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5277 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5286 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5295 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5301 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5307 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5313 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5319 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5325 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5331 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 5337 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 5343 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 5349 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 5355 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 5361 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5367 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5373 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5379 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5385 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5391 "y_tab.c"
break;
case 183:
#line 698 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5396 "y_tab.c"
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5400 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5406 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5412 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5418 "y_tab.c"
break;
case 187:
#line 707 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5423 "y_tab.c"
  if (!yytrial)
#line 707 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5427 "y_tab.c"
break;
case 188:
#line 713 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5432 "y_tab.c"
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5440 "y_tab.c"
break;
case 189:
#line 719 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5445 "y_tab.c"
break;
case 190:
#line 723 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5450 "y_tab.c"
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5457 "y_tab.c"
break;
case 191:
#line 728 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5462 "y_tab.c"
break;
case 192:
#line 732 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5467 "y_tab.c"
  if (!yytrial)
#line 733 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5474 "y_tab.c"
break;
case 193:
#line 740 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5486 "y_tab.c"
  if (!yytrial)
#line 748 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5492 "y_tab.c"
break;
case 194:
#line 751 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5497 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 752 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5505 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5511 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 758 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5517 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 759 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5523 "y_tab.c"
break;
case 199:
#line 762 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5528 "y_tab.c"
  if (!yytrial)
#line 762 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5532 "y_tab.c"
break;
case 200:
#line 765 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5537 "y_tab.c"
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5544 "y_tab.c"
break;
case 201:
#line 770 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5549 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 772 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5558 "y_tab.c"
break;
case 203:
#line 776 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5563 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 778 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5572 "y_tab.c"
break;
case 205:
#line 785 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5584 "y_tab.c"
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5592 "y_tab.c"
break;
case 206:
#line 799 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5604 "y_tab.c"
  if (!yytrial)
#line 807 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5612 "y_tab.c"
break;
case 207:
#line 813 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5624 "y_tab.c"
  if (!yytrial)
#line 821 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5632 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 828 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5642 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 833 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5651 "y_tab.c"
break;
case 210:
#line 839 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5656 "y_tab.c"
  if (!yytrial)
#line 839 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5660 "y_tab.c"
break;
case 211:
#line 842 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5665 "y_tab.c"
  if (!yytrial)
#line 842 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5669 "y_tab.c"
break;
case 212:
#line 843 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5674 "y_tab.c"
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5678 "y_tab.c"
break;
case 213:
#line 844 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5683 "y_tab.c"
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5687 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5693 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5699 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 851 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5705 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 852 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5711 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 855 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5717 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 856 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5723 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5729 "y_tab.c"
break;
case 221:
#line 860 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5734 "y_tab.c"
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5738 "y_tab.c"
break;
case 222:
#line 862 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5748 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5754 "y_tab.c"
break;
case 223:
#line 874 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5759 "y_tab.c"
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5763 "y_tab.c"
break;
case 224:
#line 876 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5768 "y_tab.c"
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5781 "y_tab.c"
break;
case 225:
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5787 "y_tab.c"
break;
case 226:
#line 889 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5792 "y_tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5796 "y_tab.c"
break;
case 227:
#line 890 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5801 "y_tab.c"
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5805 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5811 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5817 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5823 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 896 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5829 "y_tab.c"
break;
case 232:
#line 899 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5834 "y_tab.c"
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5838 "y_tab.c"
break;
case 233:
#line 900 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5843 "y_tab.c"
  if (!yytrial)
#line 900 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5847 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5853 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5859 "y_tab.c"
break;
case 236:
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5865 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5871 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5877 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5883 "y_tab.c"
break;
case 240:
#line 913 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5888 "y_tab.c"
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 5892 "y_tab.c"
break;
case 241:
#line 914 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5897 "y_tab.c"
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5901 "y_tab.c"
break;
case 242:
#line 915 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5906 "y_tab.c"
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 5910 "y_tab.c"
break;
case 243:
#line 918 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5915 "y_tab.c"
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 5919 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 5925 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 5931 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5937 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5943 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5949 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5955 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 5961 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 5967 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 5973 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 932 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 5979 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 5985 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 5991 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 5997 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6003 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 937 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6009 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6015 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 939 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6021 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6027 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6033 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 942 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6039 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 943 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6045 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6051 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6057 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6063 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 947 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6069 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 948 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6075 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 949 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6081 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 950 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6087 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6093 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6099 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6105 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 954 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6111 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 955 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6117 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6123 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 957 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6129 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6135 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6141 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 960 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6147 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 961 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6153 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 962 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6159 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6165 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 964 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6171 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 965 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6177 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6183 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 968 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6189 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 969 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6195 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6201 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6207 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 972 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6213 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6219 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6225 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6231 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6237 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6243 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6249 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6255 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6261 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6267 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6273 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6279 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6285 "y_tab.c"
break;
case 305:
#line 987 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6290 "y_tab.c"
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6294 "y_tab.c"
break;
#line 6296 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
