#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   25,   25,   25,   25,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,   33,   33,   34,   34,   35,   35,   36,
   36,   32,   32,   66,   66,   61,   61,   61,   61,   61,
   61,   62,   63,   63,   64,   64,   64,   64,   64,   64,
   65,   29,   29,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    4,    4,   10,   10,   10,   10,   10,   11,
   11,   11,   11,    8,    8,    8,    8,    9,    9,    9,
   24,   24,   23,   22,    3,    3,    3,    3,    3,    3,
   15,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   13,   13,   13,   54,   54,   40,   41,    7,   37,   37,
   38,   39,   39,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   21,   21,   21,   17,   17,   17,   17,
   18,   18,   56,   56,   56,   56,   56,   56,   56,   55,
   55,   55,   55,   53,   53,   53,   43,   44,   67,   44,
   68,   44,   42,   69,   42,   48,   48,   48,   46,   47,
   70,   47,   71,   47,   45,   45,   45,   19,   19,   20,
   16,   16,   16,   50,   50,   51,   51,   52,   52,   52,
   27,   27,   72,   26,   57,   57,   57,   58,   58,   58,
   58,   12,   12,   49,   49,   49,   49,    1,    1,    1,
    1,   59,   59,   59,   28,   60,   60,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   31,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    7,    6,    8,    9,
   11,    0,    1,    1,    2,    4,    3,    4,    4,    4,
    4,    3,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    1,    1,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    3,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    2,    9,    8,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    0,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    0,
    2,    2,    3,    0,    1,    1,    2,    5,    0,   11,
    0,   13,    4,    0,    6,    0,    5,    6,    2,    4,
    0,   10,    0,   12,    4,    5,    7,    8,    8,    2,
    2,    2,    3,    0,    1,    1,    2,    0,    1,    2,
    2,    1,    0,    8,    0,    3,    4,    0,    1,    1,
    1,    3,    4,    1,    1,    1,    1,    0,    1,    4,
    2,    2,    2,    2,    4,    1,    3,    1,    1,    1,
    1,    3,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    4,    3,    4,    4,    7,    7,    7,    7,
    3,    2,    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  248,  249,  250,    0,    0,    0,    0,    0,    0,
  237,   62,   63,    0,    0,    0,   71,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  185,  114,    0,    0,    0,    0,  186,    0,    0,    0,
    0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
    0,  251,    3,   27,    8,    9,   12,    0,    0,    0,
    6,    0,    7,    0,    0,   10,    0,    0,   11,   26,
   13,    0,   14,   15,   16,   17,   18,    0,   19,    0,
   20,   21,    0,   22,   23,    0,   24,   25,    0,    0,
    0,    0,   28,   29,   30,   31,   32,    0,    0,    0,
    0,    0,    0,    0,  115,    0,    0,    0,    0,    0,
    0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  138,  139,
  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,  160,
  161,  136,  137,  125,  126,  127,  128,  129,  130,  131,
  132,  133,  134,  135,  159,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  178,  179,    0,    0,    0,    0,    0,    0,    0,   58,
    0,   60,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  175,    0,  173,    0,    0,   72,    0,
    0,  216,    0,    0,    0,    0,    0,  211,  212,    0,
  210,    0,   92,   91,    0,    0,    0,    4,    5,  221,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  259,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  307,  121,    0,  116,  187,
    0,    0,    0,  199,    0,    0,    0,    0,    0,    0,
    0,    0,   45,    0,    0,    0,    0,    0,  167,  165,
    0,  170,    0,  213,  241,    0,    0,  118,    0,    0,
    0,    0,   80,    0,    0,    0,    0,    0,  162,  163,
    0,    0,  301,    0,   61,    0,   52,   53,   54,   55,
   56,   57,   59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  252,    0,    0,    0,    0,    0,  171,    0,
  172,    0,    0,  217,    0,    0,  103,    0,    0,    0,
   93,  242,  243,  244,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  294,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  232,    0,    0,    0,    0,
    0,    0,  201,  240,    0,  193,    0,    0,    0,    0,
   80,   90,    0,    0,  245,    0,    0,    0,    0,  205,
    0,    0,   46,   49,   50,   48,   51,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  100,  107,
    0,    0,    0,  295,  293,  117,    0,    0,    0,  200,
    0,    0,  233,    0,    0,  102,    0,    0,    0,    0,
    0,  166,    0,    0,   80,   88,    0,    0,    0,    0,
    0,    0,   81,   77,   78,    0,    0,    0,    0,    0,
    0,    0,   34,    0,    0,   36,    0,    0,    0,    0,
    0,  191,    0,  106,    0,    0,    0,    0,  188,  229,
  230,  231,    0,    0,  223,    0,  105,    0,    0,  206,
    0,    0,    0,  220,   94,    0,    0,   80,   89,    0,
   82,   84,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,   74,    0,    0,    0,    0,  203,    0,    0,
  197,    0,    0,    0,    0,    0,  111,  104,  195,    0,
    0,    0,    0,   87,    0,    0,  297,  298,  299,  300,
  207,   35,    0,   37,    0,    0,  180,    0,    0,    0,
    0,    0,  198,    0,    0,    0,    0,    0,    0,    0,
   85,    0,    0,   39,    0,    0,    0,    0,    0,  208,
  209,  224,  113,    0,  180,    0,    0,   86,    0,   40,
    0,    0,  181,  182,    0,    0,    0,  112,    0,    0,
  202,    0,  120,  183,    0,    0,    0,  190,   41,  119,
    0,    0,    0,  204,  192,
};
static int yydgoto[] = {                                      48,
   49,  169,   51,  118,   52,   53,   54,   55,   56,  473,
  414,   57,   58,   59,   60,   61,  290,  340,   62,   63,
  291,   64,   65,   66,   67,   68,   69,   70,   71,   72,
   73,  326,   74,   75,   76,   77,   78,   79,   80,   81,
   82,   83,   84,   85,   86,   87,   88,  272,   89,  408,
  409,  464,   90,   91,  586,   92,  452,  503,  229,  203,
   93,   94,   95,   96,   97,   98,  402,  537,  399,  461,
  570,  545,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
    0,    0,    0,  418,    0,  -66,    0,   36,  148,  150,
  180, 6367, 4224, 4224, 4224, 4224, 4224, 4255, 4224,   25,
    0,    0,    0,    0,  -39,  -85,    0,  330,  206,  272,
  276, 3527, 4224, 3867,   64,    0, 4224,    0, 1256,  -69,
  -25,    0,    0,    0,    0,    0,    0,  418,  341,  233,
    0,   39,    0,  127,  328,    0, 3440,  350,    0,    0,
    0, 6275,    0,    0,    0,    0,    0,  351,    0,  -14,
    0,    0,   18,    0,    0,  -12,    0,    0,    0,  809,
    0,  266,    0,    0,    0,    0,    0,    0,    0,  418,
  418,  418,  -92,    0,    0,  355,  357,  251,  395, 1256,
  386,  809,    0,    0,    0,  364,  194,  329,    0,    0,
    0,    0,    0,    0,  251,  251,  251,  251,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  415,  374, 4224,   47,    0,
    0,  212,  212,  212,    0,  212,  212,  430, 6495,  258,
    0,    0,  279,  269,  287, -218,  284,  305,  316,    0,
  310,    0, 4224, 4224, 4224,    0,  260,    0,  486,    0,
    0, 7546,   -2,    0,  552,    0,  251,  467,    0,    0,
  418,    0,  418,  262,  -79, 4224,    0,    0,    0,    0,
    0,  336,    0,    0,  536,  546,  568,    0,    0,    0,
 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224,
 4224, 4224, 4224, 4224, 4224, 4224, 4224,    0,    0, 4224,
 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224, 4224,
 4224, 4224, 3883, 4224, 4224,    0,    0,    0,    0,    0,
  353,   10,    0,    0,  395,  589,  -53,    0,  418,    0,
  370,  251,    0,    0,  388,  298,  418,  600,    0,    0,
   12,    0,  418,    0,    0,  414,  552,    0,  634,    0,
  418,  228,    0, 2333,  619,  626,  638,  643,    0,    0,
  665, 4224,    0,  679,    0,  462,    0,    0,    0,    0,
    0,    0,    0, 6553, 7546,  672, 6645, 2412, 6275,  692,
 4224, 4224,    0,  485,  582,  705,    0,    0,    0,  671,
    0,   47,   47,    0,   47, 3949,    0, 7546,  634,  634,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,   33,    0,    0, 4817,    0,    0,    0,
    0,  212,    0,    0,    0, 1436, 1436,   33,   33,   33,
    0,  222,  222, 4817,    0,  140, 6771,  212, 2501,  713,
  499,    0, 2590,  710,   70,    0,  634,  125,  723,  725,
    0,  731,    0,    0,    0,    0,  734,  739,  743,  -29,
    0,    0,  418,  -36,    0,  741,  749,  758,  759,    0,
    0,  760,    0,    0,    0,    0,    0, 3614, 4224, 3693,
  475, 4224,    0, 7546,  764,  767,  485, -102,    0,    0,
 6830,  739,  739,    0,    0,    0, 4224,  771, 2669,    0,
  522,   17,    0,  739, 4051,    0,    0,  776,  582,    0,
  781,    0,  785,  569,    0,    0,   -3,  -23,  769,    0,
  825,  766,    0,    0,    0,    0, 4224, 4224, 4224, 4224,
  779,    0,    0,  778,    0,    0,  802, 6865,  586,    0,
  813,    0,  593,    0,  251,  251, 6920, 4224,    0,    0,
    0,    0,  418,  522,    0,  -86,    0, 6956,  162,    0,
  823,  270,  827,    0,    0,  422,  805,    0,    0, 4224,
    0,    0, 6991, 7050, 7141, 7268,  606, 2758, 4224, 2847,
 4224,    0,    0,  829,  299,  586,  848,    0,  418,  418,
    0, 7326,   47,  418,    0, 4142,    0,    0,    0,    0,
  831,  784,  849,    0,  458, 7546,    0,    0,    0,    0,
    0,    0,  871,    0, 7361,  875,    0,  885,    0,  888,
  252,  252,    0,   47, 2926,  251, 7416,  323,   66,    0,
    0,  872, 3780,    0,    0,   19,  892,  333,  902,    0,
    0,    0,    0,  251,    0,    0, 3015,    0,    0,    0,
  376,  685,    0,    0,    0,  831,  826,    0,   19, 3104,
    0, 3183,    0,    0,  453,   82,    0,    0,    0,    0,
    0, 3272, 3361,    0,    0,
};
static int yyrindex[] = {                                     22,
 6056,    0,    0,    0,  964, 4844,  828,    0,    0,    0,
    0,    0,    0,    0, 5897,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  701,
    0,    0,    0, 5447,  -89,  548,    0,    0,    0,    0,
    0,    0,    0,    0, 5194,    0,    0,    0, 1179, 7453,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  946,  722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   84,    0,    0,    0,    0,    0,    0,    0,
  834,  507,    0,    0,    0,    0,    0, 1064, 1155,    0,
    0,    0,    0,    5,    0, 5780,    0, 1179, 4912, 1179,
    0,    0,    0, 4975, 4396,  842,    0,    0, 5955, 5962,
 5989, 4504, 9215, -111, 1179, 1179, 1179, 1179,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5126,  154,
  360,  100,  876, 2599, 6460, 3113, 5253,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  898,    0, -111,    0,  389,    0,  523,
  693,   11,    0,    0,  250,    0, 1179,    0,    0,  964,
    0,    0,    0,    0,  700,    0,  111,    0,    0,  111,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -111,    0,    0,
    0,    0, -111,    0,  644,    0,    0, 4208,    0, 4603,
    0, 1179,    0,   92,    0, 4334,  514,  677,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -18, 4693,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  975,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,    0,    0,   49,    0,
    0,    0,    0,  928,    0,    0, 6422, 4786,    0,    0,
    0,  768,  883,    0, 1001,    0,    0,  321,  437,  437,
    0,    0,    0,    0,  707, 2407, 2921, 3370, 3532, 4035,
 4286, 4324,  466, 1049, 4582, 5459, 5513, 5532, 5534, 5539,
 5559, 5279, 5569, 5596, 5610,  200, 3619, 4010, 5406, 5518,
 5612, 5347, 5497, 5633,    0,    0,    0, 5312,    0,    0,
    0, -111,    0,  -15,    0,    0, 6016,  700,    0,    0,
  250,    0,    0,    0,  476,    0,    0,  716, 6023,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5637,    0,    0,    0,    0,    0,    0,    0,  898,    0,
    0,    0, 5647,   44,    0,    0,  928,    0,    0,    0,
    0,  440,  440,    0,    0,    0,    0,    0,    0,    0,
  668,    0,    0, 6116,    0,    0,    5,    0,    0,    5,
    0,    0, 6169,    0,    0,    0,    0,    0,  513,   74,
    0,    0,    0,    0,    0,  156,    0,    0,    0,    0,
    0, -111,    0,    0, -111,    0,    0,    0,  933,    5,
    0,    0,    0,    0,  859,  859,    0,    0,    0,    0,
    0,    0,    0,  668,    0, 2799,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  937,    0,
    0,    0,    0,    0,    0,  933,    0,    0,    0,    0,
    0,    0,  141,    0, -111,    0,    0,    0,    0,    5,
   84,    0,    0,    0,    0,  808,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    5,    0,
  160,  160,    0,  152,    0, 2799,    0,    0,    0, -111,
    0,    0,    0,    0,    5,   -9,    0,    0,    0,    0,
    0,    0,    0, 2799,    0, -111,    0,    0, -111,    0,
    0,    0,    0,    0,    5,   84,    0,    0,   99,    0,
    0,    0,    0,    0,    0,    0, -111,    0,    0,    0,
 -111,    0,    0,    0,    0,
};
static int yycindex[] = {                                    896,
 1143,    0,    0,    0, 5778, 1154,    0, 1176, 1334, 1433,
    0,    0,    0,    0, 1501,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1588,
    0,    0, 4345,  873,    0,    0,    0,    0,    0,    0,
    0, 7208,    0,    0,   -7,    0,    0,    0,    0,   24,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8225,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1687,    0,
 7513,  752,    0,    0,    0,    0,    0,  674,   95,    0,
    0,    0,    0, 5653,    0,  132,    0,    0,  755,    0,
    0,    0,    0, 1755,  167,    0,    0,    0,  169,  225,
  257,  283, 5709, 1228,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 7638,
 7726, 5837, 9239, 9297,  974, 9338, 9387,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1317,    0, 7764,    0, 7823,
 7858,    0,    0,    0,  761,    0,    0,    0,    0, 8621,
    0,    0,    0,    0,    0,    0,  286,    0,    0,  327,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1397,    0,    0,
    0,    0, 1484,    0,  197,    0,    0,  384,    0,  -22,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
    0,    0,    0, 8474,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  382,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8970,    0,    0,
    0,    0,    0,    0,    0,    0,  745,  319,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 7913, 7949, 8043, 8134, 8222, 8261,
 8319, 8354, 9430, 9488, 8409, 8539, 9512, 8627, 8682, 8718,
 8757, 9547, 8812, 8903, 9030, 9596, 9639, 9679, 9703, 9762,
 9088, 9805, 9848, 9888,    0,    0,    0, 9952, 9763,    0,
    0, 1571, 9852,    0,    0,    0,    0,    0,    0,    0,
  773,    0,    0,    0, 7270,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9123,    0,    0,    0,    0,    0,    0, 9953,    0,10009,
    0,    0, 9178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10020,    0,
    0,    0,    0,    0,    0,    0, 8009,    0,    0,10220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
    0,    0,    0,    0,    0,  687,    0,    0,    0,    0,
    0, 1651,    0,    0, 1738,    0,    0,    0,    0,10276,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,10031,    0,10042,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1825,    0,    0,    0,    0,10287,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10298,    0,
    0,    0,    0,    0,10098,    0,    0,    0,    0, 1905,
    0,    0,10109,    0,10309,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1992,10120,    0, 2079,    0,
    0,    0,    0,    0,10365,    0,    0,    0,    0,10131,
    0,10187,    0,    0,    0,    0, 2159,    0,    0,    0,
 2246,10198,10209,    0,    0,
};
static int yygindex[] = {                                      0,
   27,    1,  -26, -462, -309,   50,    0,    0,    0,  551,
 -383,    0,  145,    3, -104,    0,  621,    0,    0,    0,
  253,    0,    0,    0, -101,    0,    0,    0, -395,  640,
    0, -390,    0,    0,    0,    0,   16,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -452,    0,  -60,
  973,   46,   43,    2,  443,  107,    0,  531,    0,  783,
    0,    0,    0, -389,    0,  161,    0,    0,    0,    0,
    0,    0,
};
#define YYTABLESIZE 10682
static int yytable[] = {                                     289,
   50,  106,  108,  107,  546,  396,  115,  470,  119,  120,
  121,  346,  213,    2,  122,  123,  212, 1398,  474,  214,
  111,    2,  304,  493,  475,  436,  534,  467,  225,  466,
  384,  110,  387,  285,  381,  519,  174,  378,  484,  318,
  470,  332,   50,   64,  269,  164,  274,  112,  164,  123,
  206,  246,  406,  391,  246,  405,  124,   29,  215,  319,
  504,  392,   27,  278,   30,  392,   26,   50,   43,   25,
  260,  474,  263,  568,  474,  271,  270,  475,  265,  602,
  475,  516,  220,  390,  247,  299,   43,  247,  472,  277,
  106,  197,  246,  465,  328,  125,   29,  221,  579,  518,
  119,  120,  121,  122,  106,  108,  288,  225,  268,  391,
  273,  206,  106,  123,  300,  276,  228,   83,  282,  292,
  474,  517,  333,  264,   50,  391,  475,  196,  453,   64,
  110,  189,  392,   64,  555,  246,  253,  253,  563,  505,
  253,  253,  253,  253,  253,  253,  253,   47,  184,  511,
  168,   64,  184,  616,  492,  207,  261,  122,  253,  474,
  253,    2,    2,    2,  284,  475,  389,  174,  247,    6,
  222,  393,  174,  246,  178,  174,  174,  174,   14,  114,
  444,  174,  174,  332,  226,  223,   47,   17,  596,  168,
  174,  293,  253,  205,  258,  227,   50,  258,   83,   79,
  209,  208,  549,  184,  621,  405,  196,  126,  338,  127,
  209,  342,  258,  343,  345,  455,  207,  293,  184,  174,
  469,  122,   31,  253,  253,  341,  209,  174,  182,   31,
   37,  335,   12,   13,  454,  279,  110,   37,  214,  128,
  262,  293,  262,  262,  262,  193,  258,  293,  287,  369,
  209,  263,  279,  469,  297,   64,  209,  347,  262,  349,
  262,  263,  350,  226,   64,   12,   13,  265,   50,  305,
  306,  307,  308,   50,  227,  181,  395,  211,  258,  398,
   79,  471,    2,    3,    4,  413,  412,  215,  442,  443,
  449,  219,  262,  338,    2,    2,    2,  372,  375,   46,
  289,  410,  264,  344,   50,   18,   19,   20,   21,   22,
  551,  194,  264,  405,  471,  195,  238,  293,  238,  238,
  397,    2,    3,    4,  262,    6,  209,  603,   50,   23,
   24,  604,   46,   31,   14,  114,  454,  296,  404,  567,
  293,   37,  405,   17,   18,   19,   20,   21,   22,  209,
  411,  336,  289,  228,  339,  289,  253,   43,   44,   45,
  435,  101,   64,  595,  101,  425,  405,  184,  253,  253,
  116,   64,  184,  606,  425, 4468,  405,  228,  117,  101,
  528,  184,  184,  530,  217,  289,  224, 4471, 4474,   50,
  184,  281,   50,   50,   64,  293,   43,   44,   45,  218,
  260,  216,  448,  260,  209,  106,  108,  288,  230,  267,
  258,  451,   79,  468,  210,  294,  613,  253,  260,  405,
  292,  301,  258,  258,   79,   79,  401,  459,   50,  302,
   50,  110,  302,   31,  296,  253, 4477,  457,  228,  463,
  456,   37,  228,  575,  298,  289,  460,  302,  466,   50,
  302,  303,  260,  454, 4480,  309,  262,  106,  108,  288,
  106,  108,  288,  491,  289,  470,  310, 1394,  262,  262,
  312,  258,  292,   79,  214,  292, 1394,  483,  597,  486,
  289,  302,   50,  110,  260,   50,  110,  495,  496,  258,
  106,  108,  288,  620,  610,  469,  405,  612,  228,  506,
  289,  470,  281,  543,  472,  292,  281,  281,  281,  281,
  281,  238,  281,  302,  314,  622,  110,  262,  113,  623,
  238,  238,  293,    6,  281,  316,  281,  475,   50,  238,
   50,  209,   14,  114,  238,  262,  478,  539,  540,  571,
  572,   17,  315,  317,  574,   50,  553,  320,  547,  287,
  106,  108,  288,  481,  169, 1401,   75,  169,  281,   31,
   31,  321,  484,  303, 1404,  292,  303,   37,   37,  106,
  108,  288,  322,  323,  476,   50,  110,  228,  331,  228,
   50,  303,  582,   50,  292,  106,  108,  288,  330, 1422,
  281,  334,  351,  352, 1389,  110,   50,   50, 1425,   50,
  292,  287, 1392,  353,  287,  106,  108,  288,  183,  390,
   50,  110,   50,  590,  591,  303,  260,   50,  593,  454,
  292,   50,   50,   50,  228,  354,  400,  476,  260,  260,
  476,  110,  600, 1394,  287, 1389,  608,   75, 1407, 1410,
 1413, 1416, 1394, 1392,  403,  302,  228,  303,  184,  185,
  186,  187,  188,  189,  190,  191,  192,  302,  302,  228,
  216,  228,  170,  171,  172,  173,  174,  176,  177,  179,
  407,  228,  228,  177,  113,  212,  476,  260,  469,    6,
  416,   64,  198,  200,  201,   64,  202,  417,   14,  114,
   12,   13, 1389,  214,  287,  260,  218,   17,  214,  418,
 1392,  218,   64,   64,  419,  420,  302,  214,  214,  509,
  218,  218,  512,  287,  469,  476,  214,  168,  422,  218,
  168,  222,  281,  337,  302,  427,   12,   13,    6,  287,
  429,  432,  439,  305,  281,  281,  305,   14,  114,  471,
  184,  109,  535,  184,  437,  214,   17,  273,  218,  287,
  273,  305,  447,  214,  222,  448,  218,   46,  184,  222,
  184,  222,  457,  222,  458,  273,  222,  451,  238,   75,
  460,  238,  238,  238,  404,  471,  463,  238,  238,  303,
  477,   75,   75,  281,  344,  305,  238,  238,  478,  238,
  238,  303,  303,   46,  500,  501,  502,  479,  480,  273,
  481,  281,  578,  487,  177,  489,  490,  176,  110,  177,
  498,  110,  177,  177,  177,  238,  510,  305,  177,  177,
  513,  588,  514,  238,  522,  515,  110,  177,  110,  520,
   75,  273,  324,  325,  327,  329,  529,  601,  113,  527,
  303,  531,  533,    6,  222,  394,  222,  222,   75,  538,
    6,   76,   14,  114,  536,  348,  177,  615,  303,   14,
  114,   17,  550,  554,  177,  561,   22,  552,   17,  566,
  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
  365,  366,  367,  368,  369,  370,  371,  569,  271,  372,
  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
  383,  384,  202,  387,  388,  239,  580,  581,  239,  239,
  239,  583,  256,  256,  585,  239,  256,  256,  256,  256,
  256,  256,  256,  109,  228,  587,  109,  589,  100,  228,
  598,  605,   76,   94,  256,  103,  256,   91,  228,  228,
   88,  109,  607,  109,  614,    1,   64,  228,  617,  305,
   73,  421,  239,  239,  239,  239,   42,  239,  239,  173,
  239,  305,  305,  273,   74,  184,  184,  184,  256,  238,
  433,  434,  218,   73,   47,  273,  273,   42,  222,  222,
  222,  222,  222,  222,  222,  441,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  319,  256,
  256,  222,  222,  222,  222,  222,  222,   47,  420,  423,
  305,  454,   47,  924,   47, 1419,   47, 1386,  161,   47,
  521,   97, 4483,  214,  273,  462,  222,  222,  305, 1386,
  222,  222,  222,  222,  544,  222,  222,  609,  222,  222,
    0,  108,  273,  222,  108,  386,    0,    0,    0,  222,
  222,  222,    0,    0,  222,  222,  222,  222,    0,  108,
    0,  108,    0,   33,   76,  113,    0,    0,  325,    0,
    6,  488,    0,  100,  101,  102,   76,   76,    0,   14,
   15,    0,    0,    0,    0,  282,  497,    0,   17,  282,
  282,  282,  282,  282,  508,  282,   33,   47,    0,   47,
   47,   33,    0,   33,    0,   33,    0,  282,   33,  282,
    0,    0,    0,    0,    0,  184,  523,  524,  525,  526,
  184,  329,    0,    0,  329,   76,    0,    0,    0,  184,
  184,    0,  256,    0,    0,    0,    0,  542,  184,    0,
    0,  282,    0,   76,  256,  256,  187,  188,  189,  190,
  191,  192,    0,    5,    8,   11,   14,   17,   22,  556,
   25,   30,   35,   40,   43,   46,   49,   54,  325,    0,
  565,   59,    0,  282,    0,   62,   67,   70,   73,   76,
   79,    0,  198,    0,    0,  577,   33,    0,   33,   33,
    0,    0,   64,  256,    0,    0,   64,    0,    0,    0,
   82,   85,    0,    0,  106,  110,  114,  118,    0,  122,
  126,  256,  130,  134,   64,    0,    0,  137,    0,    0,
    0,    0,    0,  140,  143,  146,    0,    0,  149,  152,
  155,  158,    0,    0,    0,   47,   47,   47,  329,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,    0,    0,    0,   47,   47,   47,   47,   47,   47,
  100,    0,    0,    0,    0,   94,    0,  103,    0,   91,
    0,    0,   88,  238,  238,  238,    0,  238,  238,   47,
   47,    0,    0,   47,   47,   47,   47,    0,   47,   47,
    0,   47,   47,    0,    0,    0,   47,    0,    0,    0,
    0,    0,   47,   47,   47,  282,    0,   47,   47,   47,
   47,    0,    0,    0,    0,    0,    0,  282,  282,    0,
   33,   33,   33,   33,   33,   33,   33,    0,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
    0,    0,    0,   33,   33,   33,   33,   33,   33,  100,
  161,    0,    0,   97,   94,    0,  103,    0,   91,    0,
    0,   88,    0,    0,    0,    0,  282,    0,   33,   33,
    0,    0,   33,   33,   33,   33,    0,   33,   33,    0,
   33,   33,    0,    0,  282,   33,    0,    0,    0,    0,
    0,   33,   33,   33,    0,    0,   33,   33,   33,  164,
    0,    0,    0,    0,  168,    0,    0,  172,  176,  180,
  226,  241,    0,  184,  189,  229,  241,    0,    0,  241,
  241,  241,  193,    0,  232,  235,  241,    0,    0,  100,
    0,    0,  241,  238,   94,  184,  103,  244,   91,  161,
  184,   88,   97,  184,  184,  184,  247,  250,    0,  184,
  184,  201,  204,  207,    0,  253,    0,   64,  184,  210,
    0,    0,    0,  241,  241,  241,  241,    0,  241,  241,
    0,  241,  258,  260,    0,  263,    0,  256,    0,    0,
    0,  265,  257,    0,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,   46,   49,   54,
    0,    0,    0,   59,    0,    0,    0,   62,   67,   70,
   73,   76,   79,    0,    0,    0,  100,    0,    0,  161,
    0,   94,   97,  103,    0,   91,  264,    0,   88,    0,
    0,    0,   82,   85,    0,    0,  106,  110,  114,  118,
    0,  122,  126,    0,  130,  134,    0,    0,    0,  137,
    0,    0,    0,    0,    0,  140,  143,  146,    0,  261,
  149,  152,  155,  158,   31,   32,   33,  204,    0,   35,
   36,    0,   37,    0,    5,    8,   11,   14,   17,   22,
    0,   25,   30,   35,   40,   43,   46,   49,   54,    0,
  256,    0,   59,    0,    0,  259,   62,   67,   70,   73,
   76,   79,    0,  100,  262,  265,  161,    0,   94,   97,
  103,    0,   91,  268,    0,   88,    0,    0,    0,    0,
    0,   82,   85,    0,    0,  106,  110,  114,  118,    0,
  122,  126,    0,  130,  134,    0,    0,    0,  137,    0,
    0,    0,    0,    0,  140,  143,  146,    0,    0,  149,
  152,  155,  158,    0,    5,    8,   11,   14,   17,   22,
    0,   25,   30,   35,   40,   43,   46,   49,   54,    0,
    0,    0,   59,    0,    0,    0,   62,   67,   70,   73,
   76,   79,    0,  100,    0,    0,    0,    0,   94,  271,
  103,    0,   91,  161,  274,   88,   97,    0,    0,    0,
    0,   82,   85,  277,  280,  106,  110,  114,  118,    0,
  122,  126,  283,  130,  134,    0,    0,    0,  137,    0,
    0,    0,    0,    0,  140,  143,  146,    0,    0,  149,
  152,  155,  158,    0,    0,    0,    0,    0,    0,    0,
    0,    5,    8,   11,   14,   17,   22,    0,   25,   30,
   35,   40,   43,   46,   49,   54,    0,  286,    0,   59,
    0,    0,  289,   62,   67,   70,   73,   76,   79,    0,
  100,  292,  295,  161,    0,   94,   97,  103,    0,   91,
  298,    0,   88,    0,    0,    0,    0,    0,   82,   85,
    0,    0,  106,  110,  114,  118,    0,  122,  126,    0,
  130,  134,    0,    0,    0,  137,    0,    0,    0,    0,
    0,  140,  143,  146,    0,    0,  149,  152,  155,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    5,    8,
   11,   14,   17,   22,    0,   25,   30,   35,   40,   43,
   46,   49,   54,    0,  301,    0,   59,    0,    0,  304,
   62,   67,   70,   73,   76,   79,    0,  100,  307,  310,
  161,    0,   94,   97,  103,    0,   91,  313,    0,   88,
    0,    0,    0,    0,    0,   82,   85,    0,    0,  106,
  110,  114,  118,    0,  122,  126,    0,  130,  134,    0,
    0,    0,  137,    0,    0,    0,    0,    0,  140,  143,
  146,    0,    0,  149,  152,  155,  158,    0,    5,    8,
   11,   14,   17,   22,    0,   25,   30,   35,   40,   43,
   46,   49,   54,    0,    0,    0,   59,    0,    0,    0,
   62,   67,   70,   73,   76,   79,    0,  100,    0,    0,
    0,    0,   94,  396,  103,    0,   91,  161,  399,   88,
   97,    0,    0,    0,    0,   82,   85,  402,  405,  106,
  110,  114,  118,    0,  122,  126,  408,  130,  134,    0,
    0,    0,  137,    0,    0,    0,    0,    0,  140,  143,
  146,    0,    0,  149,  152,  155,  158,    0,    0,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,   46,   49,   54,
    0,  286,    0,   59,    0,    0,  289,   62,   67,   70,
   73,   76,   79,    0,  100,  292,  295,  161,    0,   94,
   97,  103,    0,   91,  298,    0,   88,    0,    0,    0,
    0,    0,   82,   85,    0,    0,  106,  110,  114,  118,
    0,  122,  126,    0,  130,  134,    0,    0,    0,  137,
    0,    0,    0,    0,    0,  140,  143,  146,    0,    0,
  149,  152,  155,  158,    0,    0,    0,    0,    0,    0,
    0,    0,    5,    8,   11,   14,   17,   22,    0,   25,
   30,   35,   40,   43,   46,   49,   54,    0,    0,    0,
   59,    0,    0,    0,   62,   67,   70,   73,   76,   79,
    0,  100,    0,    0,  161,    0,   94,   97,  103,    0,
   91,    0,    0,   88,    0,    0,    0,    0,    0,   82,
   85,    0,    0,  106,  110,  114,  118,    0,  122,  126,
    0,  130,  134,    0,    0,    0,  137,    0,    0,    0,
    0,    0,  140,  143,  146,    0,    0,  149,  152,  155,
  158,    0,    5,    8,   11,   14,   17,   22,    0,   25,
   30,   35,   40,   43,   46,   49,   54,    0,    0,    0,
   59,    0,    0,    0,   62,   67,   70,   73,   76,   79,
    0,  100,    0,    0,    0,    0,   94,    0,  103,    0,
   91,  161,    0,   88,   97,    0,    0,    0,    0,   82,
   85,    0,    0,  106,  110,  114,  118,    0,  122,  126,
    0,  130,  134,    0,    0,    0,  137,    0,    0,    0,
    0,    0,  140,  143,  146,    0,    0,  149,  152,  155,
  158,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   70,   73,   76,   79,    0,  100,    0,
    0,  161,    0,   94,   97,  103,    0,   91,    0,    0,
   88,    0,    0,    0,    0,    0,   82,   85,    0,    0,
  106,  110,  114,  118,    0,  122,  126,    0,  130,  134,
    0,    0,    0,  137,    0,    0,    0,    0,    0,  140,
  143,  146,    0,    0,  149,  152,  155,  158,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,    0,   29,    0,    0,  161,    0,
   27,   97,   30,    0,   26,    0,    0,   25,    0,    0,
    0,    0,    0,   82,   85,    0,    0,  106,  110,  114,
  118,    0,  122,  126,    0,  130,  134,    0,    0,    0,
  137,    0,    0,    0,    0,    0,  140,  143,  146,    0,
    0,  149,  152,  155,  158,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   29,    0,    0,  274,    0,   27,
  274,   30,    0,   26,    0,   47,   25,  415,   28,    0,
    0,    0,    0,   82,   85,  274,    0,  106,  110,  114,
  118,    0,  122,  126,    0,  130,  134,    0,    0,    0,
  137,    0,    0,    0,    0,    0,  140,  143,  146,    0,
    0,  149,  152,  155,  158,    0,    0,    0,    0,  274,
    0,    0,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,   46,   49,   54,    0,    0,
    0,   59,    0,    0,    0,   62,   67,   70,   73,   76,
   79,  274,    0,   29,   47,    0,  431,   28,   27,    0,
   30,    0,   26,    0,    0,   25,    0,    0,    0,    0,
   82,   85,    0,    0,  106,  110,  114,  118,    0,  122,
  126,    0,  130,  134,    0,    0,    0,  137,    0,    0,
    0,    0,    0,  140,  143,  146,    0,    0,  149,  152,
  155,  158,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,   13,    0,    0,  225,  226,  227,   16,    0,
    0,    0,    0,   18,   19,   20,   21,   22,    0,    0,
    0,    0,   29,   47,    0,  446,   28,   27,    0,   30,
    0,   26,    0,    0,   25,  257,  257,   23,   24,  257,
  257,  257,  257,  257,  257,  257,    0,    0,    0,    0,
   38,    0,    0,    0,   39,    0,    0,  257,    0,  257,
   40,   41,   42,  274,    0,   43,   44,   45,   46,    2,
    3,    4,    5,    0,    7,  274,  274,    0,    0,   11,
   12,   13,    0,    0,  225,  226,  227,   16,    0,    0,
    0,  257,   18,   19,   20,   21,   22,    0,    0,    0,
    0,   29,    0,    0,    0,    0,   27,    0,   30,    0,
   26,    0,   47,   25,  450,   28,   23,   24,    0,    0,
    0,    0,  257,  257,  274,    0,    0,    0,    0,   38,
    0,    0,    0,   39,    0,    0,    0,    0,    0,   40,
   41,   42,  274,    0,   43,   44,   45,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
   13,    0,    0,  225,  226,  227,   16,    0,    0,    0,
    0,   18,   19,   20,   21,   22,    0,    0,    0,    0,
   29,   47,    0,  499,   28,   27,    0,   30,    0,   26,
    0,    0,   25,    0,    0,   23,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,   39,    0,    0,    0,    0,    0,   40,   41,
   42,    0,    0,   43,   44,   45,   46,    0,  184,  184,
    0,    0,  184,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,  257,    0,   11,   12,   13,
  184,    0,  225,  226,  227,   16,    0,  257,  257,    0,
   18,   19,   20,   21,   22,    0,    0,    0,    0,   29,
   47,    0,  562,   28,   27,    0,   30,    0,   26,    0,
    0,   25,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,  257,   40,   41,   42,
    0,    0,   43,   44,   45,   46,    2,    3,    4,    5,
    0,    7,    0,    0,  257,    0,   11,   12,   13,    0,
    0,  225,  226,  227,   16,    0,    0,    0,    0,   18,
   19,   20,   21,   22,    0,    0,    0,    0,   29,    0,
    0,  275,    0,   27,  275,   30,    0,   26,    0,   47,
   25,  564,   28,   23,   24,    0,    0,    0,    0,  275,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
   39,    0,    0,    0,    0,    0,   40,   41,   42,    0,
    0,   43,   44,   45,   46,    0,    0,    0,    0,    0,
    0,    0,    0,  275,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,   13,    0,    0,
  225,  226,  227,   16,    0,    0,    0,    0,   18,   19,
   20,   21,   22,    0,    0,  275,    0,   29,   47,    0,
  592,   28,   27,    0,   30,  184,   26,    0,    0,   25,
  184,    0,   23,   24,    0,    0,    0,    0,    0,  184,
  184,    0,    0,    0,    0,   38,    0,    0,  184,   39,
    0,    0,    0,  184,    0,   40,   41,   42,    0,    0,
   43,   44,   45,   46,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,   13,    0,    0,  225,
  226,  227,   16,    0,    0,    0,    0,   18,   19,   20,
   21,   22,    0,    0,    0,    0,   29,   47,    0,  611,
   28,   27,    0,   30,    0,   26,    0,    0,   25,  254,
  254,   23,   24,  254,  254,  254,  254,  254,  254,  254,
    0,    0,    0,    0,   38,    0,    0,    0,   39,    0,
    0,  254,    0,  254,   40,   41,   42,  275,    0,   43,
   44,   45,   46,    2,    3,    4,    5,    0,    7,  275,
  275,    0,    0,   11,   12,   13,    0,    0,  225,  226,
  227,   16,    0,    0,    0,  254,   18,   19,   20,   21,
   22,    0,    0,    0,    0,   29,    0,    0,    0,    0,
   27,    0,   30,    0,   26,    0,   47,   25,  618,   28,
   23,   24,    0,    0,    0,    0,  254,  254,  275,    0,
    0,    0,    0,   38,    0,    0,    0,   39,    0,    0,
    0,    0,    0,   40,   41,   42,  275,    0,   43,   44,
   45,   46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,   13,    0,    0,  225,  226,  227,
   16,    0,    0,    0,    0,   18,   19,   20,   21,   22,
    0,    0,    0,    0,   29,   47,    0,  619,   28,   27,
    0,   30,    0,   26,    0,    0,   25,    0,    0,   23,
   24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   38,    0,    0,    0,   39,    0,    0,    0,
    0,    0,   40,   41,   42,    0,    0,   43,   44,   45,
   46,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,  254,
    0,   11,   12,   13,    0,    0,  225,  226,  227,   16,
    0,  254,  254,    0,   18,   19,   20,   21,   22,    0,
    0,    0,    0,   29,   47,    0,  624,   28,   27,    0,
   30,    0,   26,    0,    0,   25,    0,    0,   23,   24,
  276,    0,    0,  276,    0,    0,    0,    0,    0,    0,
    0,   38,    0,    0,    0,   39,    0,    0,  276,    0,
  254,   40,   41,   42,    0,    0,   43,   44,   45,   46,
    2,    3,    4,    5,    0,    7,    0,    0,  254,    0,
   11,   12,   13,    0,    0,  225,  226,  227,   16,    0,
    0,    0,  276,   18,   19,   20,   21,   22,    0,    0,
    0,    0,   29,    0,    0,    0,    0,   27,    0,   30,
    0,   26,    0,   47,   25,  625,   28,   23,   24,    0,
    0,    0,    0,    0,  276,    0,    0,    0,    0,    0,
   38,    0,    0,    0,   39,    0,    0,    0,    0,    0,
   40,   41,   42,    0,    0,   43,   44,   45,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,   13,    0,    0,  225,  226,  227,   16,    0,    0,
    0,    0,   18,   19,   20,   21,   22,    0,    0,   29,
    0,    0,   47,    0,   27,   28,   30,    0,   26,    0,
    0,   25,  277,    0,    0,  277,   23,   24,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
  277,    0,    0,   39,    0,    0,    0,    0,    0,   40,
   41,   42,    0,    0,   43,   44,   45,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    0,    7,  277,    0,  276,    0,   11,   12,
   13,    0,    0,  225,  226,  227,   16,    0,  276,  276,
    0,   18,   19,   20,   21,   22,   29,    0,    0,  196,
    0,   27,   28,   30,    0,   26,  277,    0,   25,  263,
    0,  263,  263,  263,    0,   23,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  263,   38,  263,
    0,    0,   39,    0,    0,    0,    0,  276,   40,   41,
   42,    0,    0,   43,   44,   45,   46,    2,    3,    4,
    5,    0,    7,    0,    0,  276,    0,   11,   12,   13,
    0,  263,  225,  226,  227,   16,    0,    0,    0,    0,
   18,   19,   20,   21,   22,   29,    0,    0,    0,    0,
   27,    0,   30,    0,   26,    0,  482,   25,    0,   28,
    0,    0,    0,  263,   23,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   38,    0,    0,
    0,   39,    0,    0,    0,    0,    0,   40,   41,   42,
    0,    0,   43,   44,   45,   46,    0,    0,    0,    0,
    0,    0,    0,    0,    2,    3,    4,    5,  277,    7,
    0,    0,    0,    0,   11,   12,   13,    0,    0,    0,
  277,  277,   16,    0,    0,    0,    0,   18,   19,   20,
   21,   22,   29,    0,    0,  485,    0,   27,   28,   30,
    0,   26,    0,    0,   25,    0,    0,    0,    0,    0,
    0,   23,   24,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   38,    0,    0,    0,   39,  277,
    0,    0,    0,    0,   40,   41,   42,    0,    0,   43,
   44,   45,   46,    0,    0,    0,    0,  277,    0,    0,
    0,    2,    3,    4,    5,  263,    7,    0,    0,    0,
    0,   11,   12,   13,    0,    0,    0,  263,  263,   16,
    0,    0,    0,    0,   18,   19,   20,   21,   22,   29,
    0,    0,  599,    0,   27,   28,   30,    0,   26,    0,
    0,   25,    0,    0,    0,   29,    0,    0,   23,   24,
   27,    0,   30,  385,   26,    0,    0,   25,    0,    0,
    0,   38,    0,    0,    0,   39,  263,    0,    0,    0,
    0,   40,   41,   42,    0,    0,   43,   44,   45,   46,
    2,    3,    4,    5,  263,    7,    0,  199,    0,    0,
   11,   12,   13,    0,    0,    0,    0,    0,   16,    0,
    0,    0,    0,   18,   19,   20,   21,   22,    0,    0,
    0,   29,    0,    0,    0,    0,   27,    0,   30,   47,
   26,    0,  168,   25,    0,    0,    0,   23,   24,    0,
    0,    0,    0,    0,    0,   47,    0,    0,  168,    0,
   38,    0,    0,    0,   39,    0,    0,    0,    0,    0,
   40,   41,   42,    0,    0,   43,   44,   45,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,  440,    7,    0,    0,    0,  264,   11,   12,   13,
  264,  264,  264,  264,  264,   16,  264,    0,    0,    0,
   18,   19,   20,   21,   22,    0,    0,    0,  264,    0,
  264,   47,    0,    0,  168,  278,    0,    0,  278,    0,
    0,    0,    0,   29,   23,   24,    0,    0,   27,    0,
   30,    0,   26,  278,    0,   25,    0,   38,    0,    0,
    0,   39,  264,    0,    0,    0,    0,   40,   41,   42,
    0,    0,   43,   44,   45,   46,    0,    0,    0,    0,
    0,    0,    0,  113,    2,    3,    4,  278,    6,    0,
    0,    0,    0,    0,  264,    0,    0,   14,  114,  113,
    2,    3,    4,  507,    6,    0,   17,   18,   19,   20,
   21,   22,    0,   14,  114,    0,    0,    0,    0,  278,
    0,    0,   17,   18,   19,   20,   21,   22,    0,    0,
    0,   23,   24,   47,   29,    0,  168,    0,    0,   27,
    0,   30,    0,   26,    0,    0,   25,   23,   24,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   43,
   44,   45,    0,    0,    0,  113,    2,    3,    4,    0,
    6,    0,    0,    0,    0,   43,   44,   45,    0,   14,
  114,    0,    0,    0,    0,    0,    0,    0,   17,   18,
   19,   20,   21,   22,  576,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  184,    0,  184,  184,  184,
    0,  184,    0,   23,   24,    0,   29,    0,    0,    0,
    0,   27,    0,   30,   47,   26,  264,  168,   25,  184,
    0,    0,    0,    0,    0,    0,    0,    0,  264,  264,
    0,   43,   44,   45,    0,    0,    0,   29,    0,    0,
    0,  278,   27,    0,   30,    0,   26,    0,  184,   25,
    0,    0,    0,  278,  278,    0,    0,  113,    2,    3,
    4,    0,    6,    0,    0,    0,    0,    0,    0,    0,
    0,   14,  114,    0,    0,    0,  279,  264,    0,  279,
   17,   18,   19,   20,   21,   22,    0,    0,    0,    0,
    0,    0,    0,    0,  279,  264,   47,    0,    0,  168,
    0,    0,  278,    0,    0,   23,   24,    0,    0,    0,
    0,    0,    0,    0,  280,    0,    0,  280,    0,    0,
  278,   64,    0,    0,    0,   64,    0,   47,  279,    0,
  168,    0,  280,   43,   44,   45,    0,    0,    0,    0,
    0,    0,    0,   64,    0,    0,    0,    0,  113,    2,
    3,    4,    0,    6,    0,    0,    0,    0,    0,    0,
  279,    0,   14,  114,    0,    0,  280,    0,    0,    0,
    0,   17,   18,   19,   20,   21,   22,    0,    0,    0,
    0,    0,   68,   68,    0,   68,   68,   68,   68,   68,
   68,   68,   68,    0,    0,    0,   23,   24,  280,    0,
    0,    0,    0,    0,   68,   68,   68,   68,    0,    0,
    0,    0,    0,    0,  184,    0,    0,    0,    0,  184,
  315,    0,    0,    0,   43,   44,   45,    0,  184,  184,
  113,    2,    3,    4,    0,    6,   68,  184,   68,   68,
    0,    0,  184,    0,   14,  114,    0,    0,    0,    0,
    0,    0,    0,   17,   18,   19,   20,   21,   22,    0,
    0,  175,    2,    3,    4,    0,    6,    0,   68,   68,
   68,    0,    0,    0,    0,   14,  114,    0,   23,   24,
    0,    0,    0,    0,   17,   18,   19,   20,   21,   22,
   65,   65,  279,   65,   65,   65,   65,   65,   65,   65,
   65,    0,    0,    0,  279,  279,   43,   44,   45,   23,
   24,    0,   65,   65,   65,   65,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  280,    0,    0,    0,    0,    0,    0,   43,   44,   45,
    0,    0,  280,  280,   65,  239,   65,   65,  239,  239,
  239,  315,    0,  279,    0,  239,  315,    0,    0,  315,
  315,  315,    0,    0,    0,  315,  315,    0,    0,    0,
    0,  279,  283,    0,  315,  283,   65,   65,   65,    0,
    0,    0,    0,    0,    0,    0,   64,    0,    0,    0,
  283,  280,  239,  239,  239,  239,    0,  239,  239,    0,
  239,    0,   68,  315,    0,    0,    0,   68,    0,  280,
    0,  315,    0,    0,   68,   68,    0,   68,    0,    0,
    0,    0,    0,    0,  283,    0,    0,    0,    0,    0,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,    0,
   68,   68,   68,   68,   68,    0,  283,    0,    0,    0,
    0,    0,   68,   68,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
   70,   68,   70,   70,   70,   70,   70,   70,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   70,   70,   70,   70,    0,    0,    0,    0,    0,
   65,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,   65,   65,    0,   65,    0,    0,    0,    0,
    0,    0,    0,   70,    0,   70,   70,    0,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,    0,   65,   65,
   65,   65,   65,    0,    0,   70,   70,   70,    0,    0,
   65,   65,   66,   66,    0,   66,   66,   66,   66,   66,
   66,   66,   66,    0,    0,    0,    0,    0,  283,   65,
    0,    0,    0,    0,   66,   66,   66,   66,    0,    0,
  283,  283,    0,  258,  260,    0,  263,    0,  256,  254,
    0,  255,  265,  257,  239,    0,    0,  239,  239,  239,
    0,    0,    0,  239,  239,    0,   66,  262,   66,   66,
   67,   67,  239,   67,   67,   67,   67,   67,   67,   67,
   67,    0,    0,    0,    0,    0,    0,    0,    0,  283,
    0,    0,   67,   67,   67,   67,    0,  264,   66,   66,
   66,  239,    0,    0,    0,    0,    0,  283,    0,  239,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   67,    0,   67,   67,    0,    0,
  261,    0,    0,    0,    0,    0,    0,    0,    0,   70,
    0,    0,    0,  239,   70,    0,    0,    0,    0,    0,
    0,   70,   70,    0,   70,    0,   67,   67,   67,    0,
    0,    0,    0,    0,    0,    0,    0,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,    0,   70,   70,   70,
   70,   70,    0,    0,    0,    0,    0,    0,    0,   70,
   70,   69,   69,    0,   69,   69,   69,   69,   69,   69,
   69,   69,    0,    0,    0,    0,    0,    0,   70,    0,
    0,    0,    0,   69,   69,   69,   69,    0,    0,    0,
    0,    0,   66,    0,    0,    0,    0,   66,    0,    0,
    0,    0,    0,    0,   66,   66,    0,   66,    0,    0,
    0,    0,    0,    0,    0,   69,    0,   69,   69,    0,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,    0,
   66,   66,   66,   66,   66,    0,    0,   69,   69,   69,
    0,    0,   66,   66,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,    0,    0,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,    0,   67,   67,
   67,   67,   67,    0,    0,    0,    0,    0,    0,    0,
   67,   67,  124,  124,    0,  124,  124,  124,  124,  124,
  124,  124,  124,  239,    0,    0,  239,  239,  239,   67,
    0,    0,  239,  239,  124,  124,  124,  124,    0,    0,
    0,  239,    0,    0,    0,    0,  239,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  124,    0,  124,  124,
  239,  239,  239,  239,    0,  239,  239,    0,  239,    0,
  306,    0,    0,    0,  306,    0,  306,  306,    0,  306,
  306,    0,    0,   69,   69,    0,    0,    0,    0,  124,
  124,    0,  306,  306,  306,  306,    0,    0,    0,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,    0,   69,
   69,   69,   69,   69,  306,    0,  306,  306,    0,  255,
  255,   69,   69,  255,  255,  255,  255,  255,  255,  255,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   69,  255,    0,  255,    0,  291,  291,  306,  306,  291,
  291,  291,  291,  291,  291,  291,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  291,    0,  291,
    0,    0,    0,    0,    0,  255,    0,    0,  290,  290,
    0,    0,  290,  290,  290,  290,  290,  290,  290,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  290,  291,  290,    0,    0,    0,  255,  255,    0,    0,
    0,    0,  124,  267,  267,    0,    0,  267,  267,  267,
  267,  267,    0,  267,  124,  124,    0,    0,    0,    0,
    0,    0,  291,  291,  290,  267,    0,  267,    0,    0,
    0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,    0,    0,
  124,  124,  124,  124,    0,  290,  290,    0,    0,  267,
    0,    0,  265,  124,    0,    0,  265,  265,  265,  265,
  265,    0,  265,    0,    0,    0,    0,    0,    0,    0,
    0,  124,  306,  306,  265,    0,  265,    0,    0,    0,
  267,  267,    0,    0,    0,    0,    0,    0,    0,  306,
  306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
  306,  306,  306,  306,  306,  306,    0,    0,  265,  284,
  306,  306,  284,    0,    0,    0,    0,    0,    0,  255,
    0,  306,    0,    0,    0,    0,    0,  284,    0,    0,
    0,  255,  255,    0,    0,    0,    0,    0,    0,  306,
  265,    0,    0,  268,  268,  291,    0,  268,  268,  268,
  268,  268,    0,  268,    0,    0,    0,  291,  291,    0,
    0,  284,    0,  285,  266,  268,  285,  268,  266,  266,
  266,  266,  266,    0,  266,    0,    0,    0,  290,    0,
  255,  285,  286,    0,  287,  286,  266,  287,  266,  288,
  290,  290,  288,  284,    0,    0,    0,    0,  255,  268,
  286,    0,  287,    0,    0,    0,  291,  288,    0,  289,
    0,    0,  289,  267,    0,  285,    0,    0,    0,  292,
  266,    0,  292,    0,  291,  267,  267,  289,    0,    0,
  268,  268,    0,    0,  286,    0,  287,  292,    0,  290,
    0,  288,    0,    0,    0,    0,  271,  285,    0,  271,
    0,    0,  266,    0,    0,    0,    0,  290,    0,    0,
  272,  289,  269,  272,  271,  269,  286,    0,  287,    0,
    0,  292,  265,  288,  267,    0,    0,    0,  272,    0,
  269,    0,    0,  270,  265,  265,  270,  296,    0,    0,
  296,    0,  267,  289,    0,    0,    0,  304,  271,    0,
  304,  270,    0,  292,    0,  296,    0,    0,    0,    0,
    0,    0,  272,  175,  269,  304,    0,    0,  175,    0,
    0,  175,  175,  175,    0,  284,    0,  175,  175,    0,
  271,    0,    0,  265,    0,  270,  175,  284,  284,  296,
    0,    0,    0,    0,  272,    0,  269,    0,    0,  304,
    0,  265,    0,    0,    0,    0,  486,    0,  486,  486,
  486,    0,  486,  268,    0,  175,    0,  270,    0,    0,
    0,  296,    0,  175,    0,  268,  268,    0,    0,  285,
  486,  304,    0,    0,  266,    0,  284,    0,    0,    0,
    0,  285,  285,    0,    0,    0,  266,  266,  286,    0,
  287,    0,    0,    0,  284,  288,    0,    0,    0,  486,
  286,  286,  287,  287,    0,    0,    0,  288,  288,    0,
    0,    0,    0,    0,  268,  289,    0,   95,    0,   95,
   95,   95,    0,   95,    0,  292,    0,  289,  289,    0,
  285,    0,  268,    0,    0,  266,    0,  292,  292,    0,
    0,   95,    0,    0,    0,    0,    0,    0,  285,  286,
    0,  287,  271,  266,    0,    0,  288,    0,    0,    0,
    0,    0,    0,    0,  271,  271,  272,  286,  269,  287,
   95,    0,    0,    0,  288,    0,  289,    0,  272,  272,
  269,  269,    0,    0,    0,    0,  292,    0,    0,  270,
    0,    0,    0,  296,  289,    0,  771,    0,  774,    0,
    0,  270,  270,  304,  292,  296,  296,    0,    0,  429,
    0,    0,    0,  271,  326,  304,  304,  433,  437,  441,
    0,    0,    0,  342,  346,    0,    0,  272,    0,  269,
  777,  271,  350,   69,   69,    0,   69,   69,   69,   69,
   69,   69,   69,   69,    0,  272,    0,  269,    0,    0,
  270,    0,    0,    0,  296,   69,   69,   69,   69,    0,
    0,  220,  354,  445,  304,  486,    0,    0,  270,  223,
  486,    0,  296,    0,    0,    0,    0,    0,    0,  490,
  486,    0,  304,    0,    0,    0,    0,   69,  494,    0,
   69,    0,   97,  486,   97,   97,   97,    0,   97,   98,
    0,   98,   98,   98,    0,   98,    0,    0,    0,    0,
    0,  486,    0,    0,    0,    0,   97,  486,    0,    0,
   69,   69,    0,   98,    0,  486,   99,    0,   99,   99,
   99,    0,   99,    0,  213,    0,   95,    0,    0,  216,
    0,   95,  216,  216,  216,   97,    0,    0,  216,  216,
   99,   95,   98,  214,    0,  214,  214,  216,    0,  214,
  215,    0,  215,  215,   95,    0,  215,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  214,    0,   99,
    0,    0,   95,    0,  215,    0,  220,    0,   95,    0,
    0,    0,   64,   64,  223,    0,   95,   64,   64,   64,
   64,   64,   64,    0,    0,    0,  214,    0,    0,    0,
    0,    0,    0,  215,   64,   64,   64,   64,    0,    0,
    0,    0,  708,  711,  714,  717,  720,  723,  726,  729,
  732,  735,  738,  741,  744,  747,  750,  753,  756,    0,
    0,  759,  762,  765,  768,    0,   64,    0,    0,   64,
    0,    0,    0,    0,    0,  218,  218,    0,    0,  218,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  218,    0,   64,
   64,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
    0,   69,   69,   69,   69,   69,  218,    0,  219,  219,
    0,   97,  219,   69,    0,    0,   97,    0,   98,    0,
    0,    0,    0,   98,    0,    0,   97,    0,    0,    0,
  219,    0,    0,   98,    0,    0,    0,    0,    0,   97,
    0,    0,    0,    0,    0,   99,   98,    0,    0,    0,
   99,    0,    0,    0,    0,    0,    0,   97,    0,  219,
   99,    0,    0,   97,   98,    0,    0,    0,    0,    0,
   98,   97,  214,   99,    0,    0,    0,  214,   98,  215,
    0,    0,    0,    0,  215,    0,  214,  214,    0,    0,
    0,   99,    0,  215,  215,  214,    0,   99,    0,    0,
  214,    0,  215,    0,    0,   99,    0,  215,    0,    0,
    0,  258,  260,    0,  263,    0,  256,  254,    0,  255,
  265,  257,    0,    0,  214,    0,    0,    0,    0,    0,
    0,  215,  214,  266,  252,  262,  253,    0,    0,  215,
    0,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,    0,
   64,   64,   64,   64,    0,  264,    0,  239,  259,  239,
  239,    0,  218,    0,    0,    0,    0,  218,    0,    0,
    0,    0,    0,    0,    0,    0,  218,  218,    0,    0,
    0,    0,    0,    0,    0,  218,    0,    0,  261,  163,
  218,    0,    0,  158,  160,    0,  166,    0,  156,  154,
  165,  155,    0,  157,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  218,  219,  152,  164,  153,    0,
  219,    0,  218,    0,    0,    0,    0,    0,    0,  219,
  219,    0,    0,    0,    0,    0,    0,    0,  219,    0,
    0,    0,    0,  219,    0,    0,    0,  167,   64,   64,
  159,   64,    0,   64,   64,   64,   64,   64,   64,    0,
    0,    0,    0,    0,    0,    0,    0,  219,    0,    0,
   64,   64,   64,   64,    0,  219,    0,    0,    0,    0,
  161,    0,  162,    0,    0,    0,   64,   64,    0,    0,
    0,   64,   64,   64,   64,   64,   64,    0,    0,    0,
    0,    0,   64,    0,    0,   64,    0,    0,   64,   64,
   64,   64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  258,  260,    0,  263,  313,  256,  254,    0,  255,
  265,  257,    0,    0,    0,   64,   64,    0,    0,    0,
   64,    0,    0,   64,  252,  262,  253,    0,    0,    0,
  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,    0,    0,  248,
  249,  250,  251,   64,   64,  264,    0,    0,  259,  258,
  260,    0,  263,  428,  256,  254,    0,  255,  265,  257,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  252,  262,  253,    0,    0,    0,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  264,    0,    0,  259,    0,    0,    0,
    0,    0,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,    0,  261,    0,    0,    0,
    0,  258,  260,    0,  263,  430,  256,  254,    0,  255,
  265,  257,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   64,    0,    0,  252,  262,  253,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,    0,   64,   64,   64,   64,
   64,    0,    0,    0,    0,  264,    0,    0,  259,   64,
    0,    0,    0,    0,    0,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,    0,    0,   64,   64,   64,   64,  261,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,    0,    0,  248,
  249,  250,  251,    0,    0,    0,    0,  258,  260,    0,
  263,    0,  256,  254,    0,  255,  265,  257,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  252,  262,  253,    0,    0,    0,    0,    0,  231,  232,
  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,    0,    0,  248,  249,  250,
  251,  264,    0,  445,  259,    0,  258,  260,    0,  263,
    0,  256,  254,    0,  255,  265,  257,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  252,
  262,  253,    0,    0,  261,    0,    0,    0,    0,    0,
    0,  258,  260,    0,  263,  532,  256,  254,    0,  255,
  265,  257,    0,    0,    0,    0,    0,    0,    0,    0,
  264,    0,  494,  259,  252,  262,  253,    0,    0,    0,
  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,    0,    0,  248,
  249,  250,  251,  261,    0,  264,  258,  260,  259,  263,
  541,  256,  254,    0,  255,  265,  257,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  252,
  262,  253,    0,    0,    0,    0,    0,    0,  261,    0,
    0,    0,  258,  260,    0,  263,    0,  256,  254,    0,
  255,  265,  257,    0,    0,    0,    0,    0,    0,    0,
  264,    0,    0,  259,    0,  252,  262,  253,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  258,  260,    0,
  263,  557,  256,  254,    0,  255,  265,  257,    0,    0,
    0,    0,    0,  261,    0,    0,  264,    0,  548,  259,
  252,  262,  253,    0,    0,    0,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,    0,    0,  248,  249,  250,  251,  261,
    0,  264,    0,    0,  259,    0,  258,  260,    0,  263,
  558,  256,  254,    0,  255,  265,  257,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  252,
  262,  253,    0,    0,  261,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,    0,    0,  248,  249,  250,  251,    0,    0,
  264,    0,    0,  259,    0,    0,    0,    0,    0,    0,
  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,    0,    0,  248,
  249,  250,  251,  261,    0,    0,    0,  258,  260,    0,
  263,  559,  256,  254,    0,  255,  265,  257,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  252,  262,  253,    0,    0,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,    0,    0,  248,  249,  250,  251,    0,    0,
    0,  264,    0,    0,  259,    0,    0,    0,    0,    0,
    0,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,    0,    0,
  248,  249,  250,  251,  261,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,    0,    0,  248,  249,  250,  251,    0,
    0,    0,    0,    0,  258,  260,    0,  263,  560,  256,
  254,    0,  255,  265,  257,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  252,  262,  253,
    0,    0,    0,    0,    0,  231,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,    0,    0,  248,  249,  250,  251,  264,    0,
    0,  259,  258,  260,    0,  263,  573,  256,  254,    0,
  255,  265,  257,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  252,  262,  253,    0,    0,
    0,  261,    0,    0,    0,    0,    0,  258,  260,    0,
  263,  584,  256,  254,    0,  255,  265,  257,    0,    0,
    0,    0,    0,    0,    0,    0,  264,    0,    0,  259,
  252,  262,  253,    0,    0,    0,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,    0,    0,  248,  249,  250,  251,  261,
    0,  264,  258,  260,  259,  263,    0,  256,  254,    0,
  255,  265,  257,    0,  322,    0,    0,    0,    0,  326,
    0,    0,  330,  334,  338,  252,  262,  253,  342,  346,
    0,    0,    0,    0,  261,    0,    0,  350,    0,  124,
    0,    0,  124,    0,    0,  124,  124,  124,  124,  124,
    0,    0,    0,    0,    0,    0,  264,    0,  594,  259,
    0,  124,    0,  124,  124,    0,  220,  354,  357,  360,
    0,  363,  366,    0,  223,    0, 4254,    0,    0,    0,
    0,  326,    0,    0,  433,  437,  441,    0,    0,  261,
  342,  346,    0,  124,    0,    0,  124,    0,    0,  350,
    0,    0,    0,  231,  232,  233,  234,  235,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
    0,    0,  248,  249,  250,  251,  124,  124,  220,  354,
  445,    0,  258,  260,    0,  263,  223,  256,  254,    0,
  255,  265,  257,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  252,  262,  253,    0,    0,
    0,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,    0,    0,
  248,  249,  250,  251,    0,    0,  264,    0,    0,  259,
    0,    0,    0,    0,    0,    0,  231,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,    0,    0,  248,  249,  250,  251,  261,
    0,    0,    0,    0,  579,  585,    0,  594,    0,  573,
  567,    0,  570,  600,  576,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  561,  591,  564,
    0,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,    0,    0,
  248,  249,  250,  251,    0,    0,    0,    0,  597,    0,
    0,  582,    0,    0,    0,    0,    0,    0,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,   95,    0,  124,  124,  124,
  124,  588,  684,  690,    0,  699,    0,  678,  672,  410,
  675,  705,  681,    0,  410,    0,    0,  410,  410,  410,
    0,    0,    0,  410,  410,  666,  696,  669,    0,    0,
    0,    0,  410,    0,    0,    0,    0,    0,    0,    0,
 1152, 1158,    0, 1167,    0, 1146, 1140,    0, 1143, 1173,
 1149,    0,    0,    0,    0,    0,  702,    0,    0,  687,
    0,  414,    0, 1134, 1164, 1137,    0,    0,    0,  417,
    0,  231,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,    0,  693,
  248,  249,  250,  251, 1170,    0,    0, 1155,    0, 1257,
 1263,    0, 1272,    0, 1251, 1245,    0, 1248, 1278, 1254,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1239, 1269, 1242,    0,    0, 1161,    0,    0,
    0,    0,    0,    0, 1362, 1368,    0, 1377,    0, 1356,
 1350,    0, 1353, 1383, 1359,    0,    0,    0,    0,    0,
    0,    0,    0, 1275,    0,    0, 1260, 1344, 1374, 1347,
    0,    0,    0,  498,  501,  504,  507,  510,  513,  516,
  519,  522,  525,  528,  531,  534,  537,  540,  543,  546,
    0,    0,  549,  552,  555,  558, 1266,    0, 1380, 1509,
 1515, 1365, 1524,    0, 1503, 1497,    0, 1500, 1530, 1506,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1491, 1521, 1494,    0,    0,    0,    0,    0,
    0, 1371,    0,    0,    0, 1614, 1620,    0, 1629,    0,
 1608, 1602,    0, 1605, 1635, 1611,    0,    0,    0,    0,
    0,    0,    0, 1527,    0,    0, 1512,    0, 1596, 1626,
 1599,  603,  606,  609,  612,  615,  618,  621,  624,  627,
  630,  633,  636,  639,  642,  645,  648,  651,    0,    0,
  654,  657,  660,  663,    0,    0, 1518,    0,    0, 1632,
    0,    0, 1617,    0,    0,    0,    0,    0,    0, 1071,
 1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101,
 1104, 1107, 1110, 1113, 1116, 1119,    0,    0, 1122, 1125,
 1128, 1131, 1623,    0,    0,    0,    0,    0,    0, 1719,
 1725,    0, 1734,    0, 1713, 1707,    0, 1710, 1740, 1716,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1701, 1731, 1704,    0,    0,    0, 1176, 1179,
 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209,
 1212, 1215, 1218, 1221, 1224,    0,    0, 1227, 1230, 1233,
 1236,    0,    0, 1737,    0,    0, 1722,    0,    0,    0,
    0,    0,    0, 1281, 1284, 1287, 1290, 1293, 1296, 1299,
 1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 1326, 1329,
    0,    0, 1332, 1335, 1338, 1341, 1728,    0,    0,    0,
 1824, 1830,    0, 1839,    0, 1818, 1812,    0, 1815, 1845,
 1821,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1806, 1836, 1809,    0,    0, 1428, 1431,
 1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 1461,
 1464, 1467, 1470, 1473, 1476,    0,    0, 1479, 1482, 1485,
 1488,    0,    0,    0, 1842,    0,    0, 1827,    0,    0,
    0,    0,    0,    0, 1533, 1536, 1539, 1542, 1545, 1548,
 1551, 1554, 1557, 1560, 1563, 1566, 1569, 1572, 1575, 1578,
 1581,    0,    0, 1584, 1587, 1590, 1593, 1833, 1929, 1935,
    0, 1944,    0, 1923, 1917, 4254, 1920, 1950, 1926,    0,
  326,    0,    0,  433,  437,  441,    0,    0,    0,  342,
  346, 1911, 1941, 1914,    0,    0,    0,    0,  350,    0,
    0,    0,    0,    0,    0,    0,    0, 2034, 2040,    0,
 2049,    0, 2028, 2022,    0, 2025, 2055, 2031,    0,    0,
    0,    0, 1947,    0,    0, 1932,    0,  220,  354,  445,
 2016, 2046, 2019,    0,    0,  223,    0,    0, 1638, 1641,
 1644, 1647, 1650, 1653, 1656, 1659, 1662, 1665, 1668, 1671,
 1674, 1677, 1680, 1683, 1686, 1938,    0, 1689, 1692, 1695,
 1698, 2052,    0,    0, 2037, 2139, 2145,    0, 2154,    0,
 2133, 2127,    0, 2130, 2160, 2136,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2121, 2151,
 2124,    0,    0,    0, 2043,    0,    0,    0,    0,    0,
 2244, 2250,    0, 2259,    0, 2238, 2232,    0, 2235, 2265,
 2241,    0,    0,    0,    0,    0,    0,    0,    0, 2157,
    0,    0, 2142, 2226, 2256, 2229,    0,    0,    0, 1743,
 1746, 1749, 1752, 1755, 1758, 1761, 1764, 1767, 1770, 1773,
 1776, 1779, 1782, 1785, 1788, 1791,    0,    0, 1794, 1797,
 1800, 1803, 2148,    0, 2262, 2493, 2499, 2247, 2508,    0,
 2487, 2481,    0, 2484, 2514, 2490,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2475, 2505,
 2478,    0,    0,    0,    0,    0,    0, 2253,    0,    0,
    0,  322,    0,    0,    0,    0,  326,    0,    0,  330,
  334,  338,    0,    0,    0,  342,  346,    0,    0, 2511,
    0,    0, 2496,    0,  350,    0,    0, 1848, 1851, 1854,
 1857, 1860, 1863, 1866, 1869, 1872, 1875, 1878, 1881, 1884,
 1887, 1890, 1893, 1896,    0,    0, 1899, 1902, 1905, 1908,
    0,    0, 2502,  220,  354,  357,  360,    0,  363,  366,
    0,  223,    0,    0,    0,    0, 1953, 1956, 1959, 1962,
 1965, 1968, 1971, 1974, 1977, 1980, 1983, 1986, 1989, 1992,
 1995, 1998, 2001,    0,    0, 2004, 2007, 2010, 2013,    0,
    0,    0,    0,    0,    0, 2598, 2604,    0, 2613,    0,
 2592, 2586,    0, 2589, 2619, 2595,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2580, 2610,
 2583,    0,    0,    0, 2058, 2061, 2064, 2067, 2070, 2073,
 2076, 2079, 2082, 2085, 2088, 2091, 2094, 2097, 2100, 2103,
 2106,    0,    0, 2109, 2112, 2115, 2118,    0,    0, 2616,
    0,    0, 2601,    0,    0,    0,    0,    0,    0, 2163,
 2166, 2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 2193,
 2196, 2199, 2202, 2205, 2208, 2211,    0,    0, 2214, 2217,
 2220, 2223, 2607, 2775, 2781,    0, 2790,    0, 2769, 2763,
    0, 2766, 2796, 2772,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2757, 2787, 2760,    0,
    0,    0,    0,    0, 2412, 2415, 2418, 2421, 2424, 2427,
 2430, 2433, 2436, 2439, 2442, 2445, 2448, 2451, 2454, 2457,
 2460,    0,    0, 2463, 2466, 2469, 2472, 2793, 2880, 2886,
 2778, 2895,    0, 2874, 2868,    0, 2871, 2901, 2877,    0,
  322,    0,    0,    0,    0,  326,    0,    0,  330,  334,
  338, 2862, 2892, 2865,  342,  346,    0,    0,    0,    0,
 2784,    0,    0,  350, 2985, 2991,    0, 3000,    0, 2979,
 2973,    0, 2976, 3006, 2982,    0,    0,    0,    0,    0,
    0,    0, 2898,    0,    0, 2883,    0, 2967, 2997, 2970,
    0,    0,  220,  354,  357,  360,    0,  363,  366,    0,
  223,    0,    0, 3090, 3096,    0, 3105,    0, 3084, 3078,
    0, 3081, 3111, 3087,    0, 2889,    0,    0, 3003,    0,
    0, 2988,    0,    0,    0,    0, 3072, 3102, 3075,    0,
    0,    0,    0,    0, 2517, 2520, 2523, 2526, 2529, 2532,
 2535, 2538, 2541, 2544, 2547, 2550, 2553, 2556, 2559, 2562,
 2565, 2994,    0, 2568, 2571, 2574, 2577, 3108, 3267, 3273,
 3093, 3282,    0, 3261, 3255,    0, 3258, 3288, 3264,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3249, 3279, 3252,    0,    0,    0,  213,    0,    0,
 3099,    0,  216,    0,    0,  216,  216,  216,    0,    0,
    0,  216,  216,    0,    0,    0,    0,    0,    0,    0,
  216,    0, 3285,    0,    0, 3270,    0,    0,    0,    0,
    0,    0, 2694, 2697, 2700, 2703, 2706, 2709, 2712, 2715,
 2718, 2721, 2724, 2727, 2730, 2733, 2736, 2739, 2742,  220,
    0, 2745, 2748, 2751, 2754, 3276,    0,  223,    0, 3372,
 3378,    0, 3387,    0, 3366, 3360,    0, 3363, 3393, 3369,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3354, 3384, 3357,    0,    0, 2799, 2802, 2805,
 2808, 2811, 2814, 2817, 2820, 2823, 2826, 2829, 2832, 2835,
 2838, 2841, 2844, 2847,    0,    0, 2850, 2853, 2856, 2859,
    0,    0,    0, 3390,    0,    0, 3375,    0,    0,    0,
    0,    0,    0, 2904, 2907, 2910, 2913, 2916, 2919, 2922,
 2925, 2928, 2931, 2934, 2937, 2940, 2943, 2946, 2949, 2952,
    0,    0, 2955, 2958, 2961, 2964, 3381,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3009, 3012, 3015, 3018, 3021, 3024, 3027, 3030,
 3033, 3036, 3039, 3042, 3045, 3048, 3051, 3054, 3057,    0,
    0, 3060, 3063, 3066, 3069,    0, 3477, 3483,    0, 3492,
    0, 3471, 3465,    0, 3468, 3498, 3474,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3459,
 3489, 3462,    0,    0,    0,    0,    0, 3186, 3189, 3192,
 3195, 3198, 3201, 3204, 3207, 3210, 3213, 3216, 3219, 3222,
 3225, 3228, 3231, 3234,    0,    0, 3237, 3240, 3243, 3246,
 3495,    0,    0, 3480, 3942, 3948,    0, 3957,    0, 3936,
 3930,    0, 3933, 3963, 3939,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3924, 3954, 3927,
    0,    0,    0, 3486,    0,    0,    0,    0,    0, 4339,
 4345,    0, 4354,    0, 4333, 4327,    0, 4330, 4360, 4336,
    0,    0,    0,    0,    0,    0,    0,    0, 3960,    0,
    0, 3945, 4321, 4351, 4324,    0,    0,    0, 3291, 3294,
 3297, 3300, 3303, 3306, 3309, 3312, 3315, 3318, 3321, 3324,
 3327, 3330, 3333, 3336, 3339,    0,    0, 3342, 3345, 3348,
 3351, 3951,    0, 4357, 4444, 4450, 4342, 4459,    0, 4438,
 4432,    0, 4435, 4465, 4441,    0,  322,    0,    0,    0,
    0,  326,    0,    0,  330,  334,  338, 4426, 4456, 4429,
  342,  346,    0,    0,    0,    0, 4348,    0,    0,  350,
    0,   70,    0,    0,    0,    0,    0,   70,    0,   70,
   70,   70,    0,    0,    0,    0,    0,    0, 4462,    0,
    0, 4447,    0,   70,   70,   70,    0,    0,  220,  354,
  357,  360,    0,  363,  366,    0,  223,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  843,    0,
  846, 4453,    0,    0,    0,    0,    0,    0,   70,    0,
    0,    0,    0,    0,    0, 3396, 3399, 3402, 3405, 3408,
 3411, 3414, 3417, 3420, 3423, 3426, 3429, 3432, 3435, 3438,
 3441, 3444,  849,    0, 3447, 3450, 3453, 3456,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  915,    0,  918,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3861, 3864, 3867, 3870, 3873, 3876, 3879,
 3882, 3885, 3888, 3891, 3894, 3897, 3900, 3903, 3906, 3909,
  921,    0, 3912, 3915, 3918, 3921,    0,  990,    0,  993,
    0,    0,    0,    0,    0,    0,    0,    0, 4258, 4261,
 4264, 4267, 4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291,
 4294, 4297, 4300, 4303, 4306,    0,    0, 4309, 4312, 4315,
 4318,  996,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1062,    0, 1065,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4363, 4366, 4369, 4372, 4375, 4378, 4381,
 4384, 4387, 4390, 4393, 4396, 4399, 4402, 4405, 4408, 4411,
 1068,    0, 4414, 4417, 4420, 4423,    0,    0,    0, 2331,
    0, 2334,    0,    0,    0,    0,    0,    0,    0,    0,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,    0,    0,   70,
   70,   70,   70, 2337,  780,  783,  786,  789,  792,  795,
  798,  801,  804,  807,  810,  813,  816,  819,  822,  825,
  828,    0,    0,  831,  834,  837,  840, 2403,    0, 2406,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2685,    0, 2688,    0,    0,    0,    0,    0,    0,
    0, 2409,  852,  855,  858,  861,  864,  867,  870,  873,
  876,  879,  882,  885,  888,  891,  894,  897,  900,    0,
    0,  903,  906,  909,  912, 2691, 3177,    0, 3180,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  927,  930,  933,  936,  939,  942,  945,
  948,  951,  954,  957,  960,  963,  966,  969,  972,  975,
 3183,    0,  978,  981,  984,  987,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3564,    0, 3567,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  999, 1002, 1005, 1008, 1011, 1014, 1017, 1020,
 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 3570,
    0, 1050, 1053, 1056, 1059,    0,    0,    0, 3636,    0,
 3639,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2268, 2271, 2274, 2277, 2280,
 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310,
 2313, 2316, 3642,    0, 2319, 2322, 2325, 2328, 3708,    0,
 3711,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3780,    0, 3783,    0,    0,    0,    0,    0,
    0,    0, 3714, 2340, 2343, 2346, 2349, 2352, 2355, 2358,
 2361, 2364, 2367, 2370, 2373, 2376, 2379, 2382, 2385, 2388,
    0,    0, 2391, 2394, 2397, 2400, 3786, 2622, 2625, 2628,
 2631, 2634, 2637, 2640, 2643, 2646, 2649, 2652, 2655, 2658,
 2661, 2664, 2667, 2670,    0,    0, 2673, 2676, 2679, 2682,
    0, 3852,    0, 3855,    0,    0,    0,    0,    0,    0,
    0,    0, 3114, 3117, 3120, 3123, 3126, 3129, 3132, 3135,
 3138, 3141, 3144, 3147, 3150, 3153, 3156, 3159, 3162,    0,
    0, 3165, 3168, 3171, 3174, 3858,    0,    0,    0,    0,
    0,    0,    0,    0, 4029,    0, 4032,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3501, 3504, 3507, 3510, 3513, 3516, 3519, 3522, 3525,
 3528, 3531, 3534, 3537, 3540, 3543, 3546, 3549, 4035,    0,
 3552, 3555, 3558, 3561,    0,    0,    0, 4101,    0, 4104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3573, 3576, 3579, 3582, 3585, 3588,
 3591, 3594, 3597, 3600, 3603, 3606, 3609, 3612, 3615, 3618,
 3621, 4107,    0, 3624, 3627, 3630, 3633, 4173,    0, 4176,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3645, 3648, 3651, 3654, 3657, 3660,
 3663, 3666, 3669, 3672, 3675, 3678, 3681, 3684, 3687, 3690,
 3693, 4179,    0, 3696, 3699, 3702, 3705,    0, 3717, 3720,
 3723, 3726, 3729, 3732, 3735, 3738, 3741, 3744, 3747, 3750,
 3753, 3756, 3759, 3762, 3765,    0,    0, 3768, 3771, 3774,
 3777, 4245,    0, 4248,    0,    0,    0,    0,    0,  322,
    0,    0,    0,    0,  326,    0,    0,  330,  334,  338,
    0,    0,    0,  342,  346,    0,    0,    0,    0,    0,
    0,    0,  350,    0,    0, 4251,    0, 3789, 3792, 3795,
 3798, 3801, 3804, 3807, 3810, 3813, 3816, 3819, 3822, 3825,
 3828, 3831, 3834, 3837,    0,    0, 3840, 3843, 3846, 3849,
    0,  220,  354,  357,  360,    0,  363,  366,    0,  223,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3966, 3969, 3972, 3975, 3978, 3981, 3984, 3987, 3990, 3993,
 3996, 3999, 4002, 4005, 4008, 4011, 4014,    0,  322, 4017,
 4020, 4023, 4026,  326,    0,    0,  330,  334,  338,    0,
    0,    0,  342,  346,    0,    0,    0,    0,    0,    0,
    0,  350,    0, 4038, 4041, 4044, 4047, 4050, 4053, 4056,
 4059, 4062, 4065, 4068, 4071, 4074, 4077, 4080, 4083, 4086,
    0,    0, 4089, 4092, 4095, 4098,    0,    0,    0,    0,
  220,  354,  357,  360,    0,  363,  366,    0,  223,    0,
    0,    0,    0, 4110, 4113, 4116, 4119, 4122, 4125, 4128,
 4131, 4134, 4137, 4140, 4143, 4146, 4149, 4152, 4155, 4158,
    0,    0, 4161, 4164, 4167, 4170,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  322,
    0,    0,    0,    0,  326,    0,    0,  330,  334,  338,
    0,    0,    0,  342,  346,    0,    0,    0,    0,    0,
    0,    0,  350,    0,    0,    0,    0, 4182, 4185, 4188,
 4191, 4194, 4197, 4200, 4203, 4206, 4209, 4212, 4215, 4218,
 4221, 4224, 4227, 4230,    0,    0, 4233, 4236, 4239, 4242,
    0,  220,  354,  357,  360,  322,  363,  366,    0,  223,
  326,    0,    0,  330,  334,  338,  322,    0,    0,  342,
  346,  326,    0,    0,  330,  334,  338,  322,  350,    0,
  342,  346,  326,    0,    0,  330,  334,  338,  322,  350,
    0,  342,  346,  326,    0,    0,  330,  334,  338,    0,
  350,    0,  342,  346,    0,    0,    0,  220,  354,  357,
  360,  350,  363,  366,    0,  223,    0,    0,  220,  354,
  357,  360,    0,  363,  366,    0,  223,    0,    0,  220,
  354,  357,  360,    0,  363,  366,    0,  223,    0,    0,
  220,  354,  357,  360,  322,  363,  366,    0,  223,  326,
    0,    0,  330,  334,  338,  322,    0,    0,  342,  346,
  326,    0,    0,  330,  334,  338,  322,  350,    0,  342,
  346,  326,    0,    0,  330,  334,  338,  322,  350,    0,
  342,  346,  326,    0,    0,  330,  334,  338,    0,  350,
    0,  342,  346,    0,    0,    0,  220,  354,  357,  360,
  350,  363,  366,    0,  223,    0,    0,  220,  354,  357,
  360,    0,  363,  366,    0,  223,    0,    0,  220,  354,
  357,  360,    0,  363,  366,    0,  223,    0,    0,  220,
  354,  357,  360,  322,  363,  366,    0,  223,  326,    0,
    0,  330,  334,  338,  322,    0,    0,  342,  346,  326,
    0,    0,  330,  334,  338,  322,  350,    0,  342,  346,
  326,    0,    0,  330,  334,  338, 4254,  350,    0,  342,
  346,  326,    0,    0,  433,  437,  441,    0,  350,    0,
  342,  346,    0,    0,    0,  220,  354,  357,  360,  350,
  363,  366,    0,  223,    0,    0,  220,  354,  357,  360,
    0,  363,  366,    0,  223,    0,    0,  220,  354,  357,
  360,    0,  363,  366,    0,  223,    0,    0,  220,  354,
  445,    0, 4254,    0,    0,    0,  223,  326,    0,    0,
  433,  437,  441, 4254,    0,    0,  342,  346,  326,    0,
    0,  433,  437,  441, 4254,  350,    0,  342,  346,  326,
    0,    0,  433,  437,  441, 4254,  350,    0,  342,  346,
  326,    0,    0,  433,  437,  441,    0,  350,    0,  342,
  346,    0,    0,    0,  220,  354,  445,    0,  350,    0,
    0,    0,  223,    0,    0,  220,  354,  445,    0,    0,
    0,    0,    0,  223,    0,    0,  220,  354,  445,    0,
    0,    0,    0,    0,  223,    0,    0,  220,  354,  445,
    0, 4254,    0,    0,    0,  223,  326,    0,    0,  433,
  437,  441,    0,    0,    0,  342,  346,    0,    0,    0,
    0,    0,    0,    0,  350,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  220,  354,  445,    0,    0,    0,    0,
    0,  223,
};
static int yycheck[] = {                                     104,
    0,    1,    1,    1,   91,   59,    6,   44,    8,    9,
   10,   91,   38,  125,   14,   15,   42,   40,  414,   38,
    5,    0,  124,  126,  414,  335,  489,  411,   44,   59,
   38,    5,   40,  126,   42,   59,  126,   45,  429,  258,
   44,   44,   42,   59,   59,   41,   59,    5,   44,   59,
   49,   41,   41,   44,   44,   44,  123,   33,   58,  278,
   44,   38,   38,   90,   40,   42,   42,   67,   41,   45,
   38,  467,   40,  536,  470,   58,   59,  467,   46,   61,
  470,  465,   44,   60,   41,  112,   59,   44,  125,   89,
   90,   42,   44,  123,  196,   60,   33,   59,  551,  123,
  100,  101,  102,  103,  104,  104,  104,  123,  123,   44,
  123,  110,  112,  123,  114,   89,   67,   44,   92,  104,
  516,  125,  125,   91,  124,   44,  516,   44,   59,   38,
  104,   40,  123,   42,  518,  125,   37,   38,  529,  123,
   41,   42,   43,   44,   45,   46,   47,  123,   38,  459,
  126,   60,   42,  606,  257,   49,  124,   59,   59,  555,
   61,  273,  274,  275,  257,  555,  268,  257,  125,  262,
   44,  273,  262,  125,   30,  265,  266,  267,  271,  272,
   41,  271,  272,   44,   44,   59,  123,  280,  123,  126,
  280,  271,   93,   49,   41,   44,  196,   44,  125,   44,
  280,  271,   41,   44,  123,   44,  123,   60,  208,   60,
  280,  211,   59,  213,  214,   91,  110,  271,   59,  309,
  257,  123,  309,  124,  125,  210,  280,  317,  314,  309,
  317,  205,  269,  270,  257,   91,  210,  317,  257,   60,
   41,  271,   43,   44,   45,   40,   93,  271,  104,  257,
  280,   40,  108,  257,  110,  271,  280,  215,   59,  217,
   61,   40,  220,  123,  280,  269,  270,   46,  268,  125,
  126,  127,  128,  273,  123,  315,  276,  303,  125,  279,
  125,  318,  258,  259,  260,   58,   59,  287,  349,  350,
  392,   59,   93,  293,  273,  274,  275,  305,  306,  336,
  405,  301,   91,   42,  304,  281,  282,  283,  284,  285,
   41,   40,   91,   44,  318,   40,  312,  271,  314,  315,
  278,  258,  259,  260,  125,  262,  280,  309,  328,  305,
  306,  313,  336,  309,  271,  272,  397,   40,   41,   41,
  271,  317,   44,  280,  281,  282,  283,  284,  285,  280,
  123,  207,  457,  304,  210,  460,  257,  333,  334,  335,
  334,   41,  271,   41,   44,  271,   44,  257,  269,  270,
  257,  280,  262,   41,  280,  257,   44,  328,  265,   59,
  482,  271,  272,  485,   44,  490,   59,  269,  270,  389,
  280,  126,  392,  393,  303,  271,  333,  334,  335,   59,
   41,   61,  271,   44,  280,  405,  405,  405,   59,   59,
  257,  280,  257,  413,   60,   59,   41,  318,   59,   44,
  405,   58,  269,  270,  269,  270,  282,  401,  428,   41,
  430,  405,   44,  309,   40,  336,  318,  271,  389,  271,
  398,  317,  393,  545,   59,  550,  280,   59,  280,  449,
  257,  123,   93,  257,  336,   41,  257,  457,  457,  457,
  460,  460,  460,  437,  569,   44,   93,  271,  269,  270,
   41,  318,  457,  318,   38,  460,  280,  428,  580,  430,
  585,   93,  482,  457,  125,  485,  460,  442,  443,  336,
  490,  490,  490,   41,  596,  271,   44,  599,  449,  454,
  605,   44,   37,  503,  280,  490,   41,   42,   43,   44,
   45,  262,   47,  125,  257,  617,  490,  318,  257,  621,
  271,  272,  271,  262,   59,  257,   61,  271,  528,  280,
  530,  280,  271,  272,  285,  336,  280,  495,  496,  539,
  540,  280,  264,  257,  544,  545,  125,  264,  506,  405,
  550,  550,  550,  271,   41,  271,   44,   44,   93,  309,
  309,  257,  280,   41,  280,  550,   44,  317,  317,  569,
  569,  569,  257,  264,  414,  575,  550,  528,   93,  530,
  580,   59,  125,  583,  569,  585,  585,  585,  329,  271,
  125,   40,  257,   58,  309,  569,  596,  597,  280,  599,
  585,  457,  317,   58,  460,  605,  605,  605,  279,  257,
  610,  585,  612,  571,  572,   93,  257,  617,  576,  257,
  605,  621,  622,  623,  575,   58,  257,  467,  269,  270,
  470,  605,  583,  271,  490,  309,  594,  125,  257,  258,
  259,  260,  280,  317,  257,  257,  597,  125,  319,  320,
  321,  322,  323,  324,  325,  326,  327,  269,  270,  610,
   61,  612,   23,   24,   25,   26,   27,   28,   29,   30,
  257,  622,  623,  126,  257,   42,  516,  318,  257,  262,
   62,   38,   43,   44,   45,   42,   47,   62,  271,  272,
  269,  270,  309,  257,  550,  336,  257,  280,  262,   62,
  317,  262,   59,   60,   62,   41,  318,  271,  272,  457,
  271,  272,  460,  569,  257,  555,  280,   41,   40,  280,
   44,    0,  257,  257,  336,  264,  269,  270,  262,  585,
   59,   40,   62,   41,  269,  270,   44,  271,  272,  318,
   41,  257,  490,   44,   40,  309,  280,   41,  309,  605,
   44,   59,   40,  317,   33,  257,  317,  336,   59,   38,
   61,   40,   40,   42,   40,   59,   45,   58,  262,  257,
   40,  265,  266,  267,   41,  318,   38,  271,  272,  257,
   40,  269,  270,  318,   42,   93,  280,  312,   40,  314,
  315,  269,  270,  336,  273,  274,  275,   40,   40,   93,
   41,  336,  550,  329,  257,   42,   40,  168,   41,  262,
   40,   44,  265,  266,  267,  309,   41,  125,  271,  272,
   40,  569,   38,  317,   59,  257,   59,  280,   61,   61,
  318,  125,  193,  194,  195,  196,   59,  585,  257,   61,
  318,   40,  257,  262,  123,  257,  125,  126,  336,  257,
  262,   44,  271,  272,   42,  216,  309,  605,  336,  271,
  272,  280,   40,   59,  317,  260,  285,   41,  280,   41,
  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,   40,   58,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  262,  123,   59,  265,  266,
  267,   41,   37,   38,   40,  272,   41,   42,   43,   44,
   45,   46,   47,   41,  257,   41,   44,   40,   33,  262,
   59,   40,  125,   38,   59,   40,   61,   42,  271,  272,
   45,   59,   41,   61,  260,    0,  303,  280,  123,  257,
  123,  312,  309,  310,  311,  312,   59,  314,  315,  126,
  317,  269,  270,  257,  123,  265,  266,  267,   93,   42,
  331,  332,  257,   41,    0,  269,  270,   41,  257,  258,
  259,  260,  261,  262,  263,  346,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  126,  124,
  125,  280,  281,  282,  283,  284,  285,   33,  257,  336,
  318,  257,   38,   40,   40,  271,   42,  257,  123,   45,
  470,  126,  336,   51,  318,  405,  305,  306,  336,  257,
  309,  310,  311,  312,  504,  314,  315,  595,  317,  318,
   -1,   41,  336,  322,   44,  263,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   59,
   -1,   61,   -1,    0,  257,  257,   -1,   -1,  429,   -1,
  262,  432,   -1,  265,  266,  267,  269,  270,   -1,  271,
  272,   -1,   -1,   -1,   -1,   37,  447,   -1,  280,   41,
   42,   43,   44,   45,  455,   47,   33,  123,   -1,  125,
  126,   38,   -1,   40,   -1,   42,   -1,   59,   45,   61,
   -1,   -1,   -1,   -1,   -1,  257,  477,  478,  479,  480,
  262,  482,   -1,   -1,  485,  318,   -1,   -1,   -1,  271,
  272,   -1,  257,   -1,   -1,   -1,   -1,  498,  280,   -1,
   -1,   93,   -1,  336,  269,  270,  322,  323,  324,  325,
  326,  327,  257,  258,  259,  260,  261,  262,  263,  520,
  265,  266,  267,  268,  269,  270,  271,  272,  529,   -1,
  531,  276,   -1,  125,   -1,  280,  281,  282,  283,  284,
  285,   -1,   40,   -1,   -1,  546,  123,   -1,  125,  126,
   -1,   -1,   38,  318,   -1,   -1,   42,   -1,   -1,   -1,
  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,  336,  317,  318,   60,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,  336,   -1,   -1,   -1,  261,  262,  263,  599,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,  310,  311,  312,   -1,  314,  315,  305,
  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,  257,   -1,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,   33,
  123,   -1,   -1,  126,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,  318,   -1,  305,  306,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,
  317,  318,   -1,   -1,  336,  322,   -1,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
  257,  257,   -1,  271,  272,  262,  262,   -1,   -1,  265,
  266,  267,  280,   -1,  271,  272,  272,   -1,   -1,   33,
   -1,   -1,  257,  280,   38,  257,   40,  262,   42,  123,
  262,   45,  126,  265,  266,  267,  271,  272,   -1,  271,
  272,  309,  310,  311,   -1,  280,   -1,  303,  280,  317,
   -1,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,   37,   38,   -1,   40,   -1,   42,   -1,   -1,
   -1,   46,   47,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,  282,
  283,  284,  285,   -1,   -1,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   91,   -1,   45,   -1,
   -1,   -1,  305,  306,   -1,   -1,  309,  310,  311,  312,
   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,  124,
  333,  334,  335,  336,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
  257,   -1,  276,   -1,   -1,  262,  280,  281,  282,  283,
  284,  285,   -1,   33,  271,  272,  123,   -1,   38,  126,
   40,   -1,   42,  280,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,   -1,  317,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,
  334,  335,  336,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
   -1,   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,
  284,  285,   -1,   33,   -1,   -1,   -1,   -1,   38,  257,
   40,   -1,   42,  123,  262,   45,  126,   -1,   -1,   -1,
   -1,  305,  306,  271,  272,  309,  310,  311,  312,   -1,
  314,  315,  280,  317,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,
  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,  257,   -1,  276,
   -1,   -1,  262,  280,  281,  282,  283,  284,  285,   -1,
   33,  271,  272,  123,   -1,   38,  126,   40,   -1,   42,
  280,   -1,   45,   -1,   -1,   -1,   -1,   -1,  305,  306,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,
  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
  270,  271,  272,   -1,  257,   -1,  276,   -1,   -1,  262,
  280,  281,  282,  283,  284,  285,   -1,   33,  271,  272,
  123,   -1,   38,  126,   40,   -1,   42,  280,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,  309,
  310,  311,  312,   -1,  314,  315,   -1,  317,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,
  280,  281,  282,  283,  284,  285,   -1,   33,   -1,   -1,
   -1,   -1,   38,  257,   40,   -1,   42,  123,  262,   45,
  126,   -1,   -1,   -1,   -1,  305,  306,  271,  272,  309,
  310,  311,  312,   -1,  314,  315,  280,  317,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,  257,   -1,  276,   -1,   -1,  262,  280,  281,  282,
  283,  284,  285,   -1,   33,  271,  272,  123,   -1,   38,
  126,   40,   -1,   42,  280,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  305,  306,   -1,   -1,  309,  310,  311,  312,
   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,
  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,   -1,   -1,
  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  305,
  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,
  336,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,   -1,   -1,
  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,  123,   -1,   45,  126,   -1,   -1,   -1,   -1,  305,
  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  305,  306,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,   -1,  317,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  305,  306,   -1,   -1,  309,  310,  311,
  312,   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,   33,   -1,   -1,   41,   -1,   38,
   44,   40,   -1,   42,   -1,  123,   45,  125,  126,   -1,
   -1,   -1,   -1,  305,  306,   59,   -1,  309,  310,  311,
  312,   -1,  314,  315,   -1,  317,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,   93,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  285,  125,   -1,   33,  123,   -1,  125,  126,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
  305,  306,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,   -1,  317,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,
  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   37,   38,  305,  306,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   59,   -1,   61,
  328,  329,  330,  257,   -1,  333,  334,  335,  336,  258,
  259,  260,  261,   -1,  263,  269,  270,   -1,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
   -1,   93,  281,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,  123,   45,  125,  126,  305,  306,   -1,   -1,
   -1,   -1,  124,  125,  318,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,  336,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,
   -1,  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,
   33,  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,  257,   -1,  268,  269,  270,
   62,   -1,  273,  274,  275,  276,   -1,  269,  270,   -1,
  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,   33,
  123,   -1,  125,  126,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,  318,  328,  329,  330,
   -1,   -1,  333,  334,  335,  336,  258,  259,  260,  261,
   -1,  263,   -1,   -1,  336,   -1,  268,  269,  270,   -1,
   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,
  282,  283,  284,  285,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   41,   -1,   38,   44,   40,   -1,   42,   -1,  123,
   45,  125,  126,  305,  306,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,   -1,
   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   -1,
  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,
  283,  284,  285,   -1,   -1,  125,   -1,   33,  123,   -1,
  125,  126,   38,   -1,   40,  257,   42,   -1,   -1,   45,
  262,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,   -1,  318,   -1,   -1,  280,  322,
   -1,   -1,   -1,  285,   -1,  328,  329,  330,   -1,   -1,
  333,  334,  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,
  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,  283,
  284,  285,   -1,   -1,   -1,   -1,   33,  123,   -1,  125,
  126,   38,   -1,   40,   -1,   42,   -1,   -1,   45,   37,
   38,  305,  306,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   59,   -1,   61,  328,  329,  330,  257,   -1,  333,
  334,  335,  336,  258,  259,  260,  261,   -1,  263,  269,
  270,   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,   -1,   -1,   -1,   93,  281,  282,  283,  284,
  285,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,  123,   45,  125,  126,
  305,  306,   -1,   -1,   -1,   -1,  124,  125,  318,   -1,
   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,  328,  329,  330,  336,   -1,  333,  334,
  335,  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   -1,  281,  282,  283,  284,  285,
   -1,   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  305,
  306,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,
  336,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,  257,
   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,  276,
   -1,  269,  270,   -1,  281,  282,  283,  284,  285,   -1,
   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  305,  306,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   59,   -1,
  318,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
  258,  259,  260,  261,   -1,  263,   -1,   -1,  336,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   93,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   -1,  123,   45,  125,  126,  305,  306,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   41,   -1,   -1,   44,  305,  306,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,
   59,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,
  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,   -1,  263,   93,   -1,  257,   -1,  268,  269,
  270,   -1,   -1,  273,  274,  275,  276,   -1,  269,  270,
   -1,  281,  282,  283,  284,  285,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,  125,   -1,   45,   41,
   -1,   43,   44,   45,   -1,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,  318,   61,
   -1,   -1,  322,   -1,   -1,   -1,   -1,  318,  328,  329,
  330,   -1,   -1,  333,  334,  335,  336,  258,  259,  260,
  261,   -1,  263,   -1,   -1,  336,   -1,  268,  269,  270,
   -1,   93,  273,  274,  275,  276,   -1,   -1,   -1,   -1,
  281,  282,  283,  284,  285,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,  123,   45,   -1,  126,
   -1,   -1,   -1,  125,  305,  306,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  328,  329,  330,
   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  257,  263,
   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   -1,   -1,
  269,  270,  276,   -1,   -1,   -1,   -1,  281,  282,  283,
  284,  285,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  318,   -1,   -1,   -1,  322,  318,
   -1,   -1,   -1,   -1,  328,  329,  330,   -1,   -1,  333,
  334,  335,  336,   -1,   -1,   -1,   -1,  336,   -1,   -1,
   -1,  258,  259,  260,  261,  257,  263,   -1,   -1,   -1,
   -1,  268,  269,  270,   -1,   -1,   -1,  269,  270,  276,
   -1,   -1,   -1,   -1,  281,  282,  283,  284,  285,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   33,   -1,   -1,  305,  306,
   38,   -1,   40,   41,   42,   -1,   -1,   45,   -1,   -1,
   -1,  318,   -1,   -1,   -1,  322,  318,   -1,   -1,   -1,
   -1,  328,  329,  330,   -1,   -1,  333,  334,  335,  336,
  258,  259,  260,  261,  336,  263,   -1,   91,   -1,   -1,
  268,  269,  270,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,
   42,   -1,  126,   45,   -1,   -1,   -1,  305,  306,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  328,  329,  330,   -1,   -1,  333,  334,  335,  336,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   93,  263,   -1,   -1,   -1,   37,  268,  269,  270,
   41,   42,   43,   44,   45,  276,   47,   -1,   -1,   -1,
  281,  282,  283,  284,  285,   -1,   -1,   -1,   59,   -1,
   61,  123,   -1,   -1,  126,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   33,  305,  306,   -1,   -1,   38,   -1,
   40,   -1,   42,   59,   -1,   45,   -1,  318,   -1,   -1,
   -1,  322,   93,   -1,   -1,   -1,   -1,  328,  329,  330,
   -1,   -1,  333,  334,  335,  336,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   93,  262,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,  271,  272,  257,
  258,  259,  260,   93,  262,   -1,  280,  281,  282,  283,
  284,  285,   -1,  271,  272,   -1,   -1,   -1,   -1,  125,
   -1,   -1,  280,  281,  282,  283,  284,  285,   -1,   -1,
   -1,  305,  306,  123,   33,   -1,  126,   -1,   -1,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,  305,  306,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
  334,  335,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   -1,   -1,   -1,   -1,  333,  334,  335,   -1,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   -1,   44,   -1,  305,  306,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,  257,  126,   45,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
   -1,  333,  334,  335,   -1,   -1,   -1,   33,   -1,   -1,
   -1,  257,   38,   -1,   40,   -1,   42,   -1,   91,   45,
   -1,   -1,   -1,  269,  270,   -1,   -1,  257,  258,  259,
  260,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   41,  318,   -1,   44,
  280,  281,  282,  283,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,  336,  123,   -1,   -1,  126,
   -1,   -1,  318,   -1,   -1,  305,  306,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
  336,   38,   -1,   -1,   -1,   42,   -1,  123,   93,   -1,
  126,   -1,   59,  333,  334,  335,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,  271,  272,   -1,   -1,   93,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,  305,  306,  125,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,
  126,   -1,   -1,   -1,  333,  334,  335,   -1,  271,  272,
  257,  258,  259,  260,   -1,  262,   91,  280,   93,   94,
   -1,   -1,  285,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,   -1,
   -1,  257,  258,  259,  260,   -1,  262,   -1,  123,  124,
  125,   -1,   -1,   -1,   -1,  271,  272,   -1,  305,  306,
   -1,   -1,   -1,   -1,  280,  281,  282,  283,  284,  285,
   37,   38,  257,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,  269,  270,  333,  334,  335,  305,
  306,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  333,  334,  335,
   -1,   -1,  269,  270,   91,  262,   93,   94,  265,  266,
  267,  257,   -1,  318,   -1,  272,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,  336,   41,   -1,  280,   44,  123,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,
   59,  318,  309,  310,  311,  312,   -1,  314,  315,   -1,
  317,   -1,  257,  309,   -1,   -1,   -1,  262,   -1,  336,
   -1,  317,   -1,   -1,  269,  270,   -1,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,   -1,  125,   -1,   -1,   -1,
   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,  336,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,   -1,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,   -1,   -1,  123,  124,  125,   -1,   -1,
  317,  318,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,  257,  336,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
  269,  270,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   91,   61,   93,   94,
   37,   38,  280,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,
   -1,   -1,   59,   60,   61,   62,   -1,   91,  123,  124,
  125,  309,   -1,   -1,   -1,   -1,   -1,  336,   -1,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   42,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,   -1,  272,   -1,  123,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,   -1,  305,  306,  307,
  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,
  318,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  336,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  269,  270,   -1,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,   -1,   -1,  123,  124,  125,
   -1,   -1,  317,  318,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,   -1,   -1,   -1,   -1,   -1,   -1,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,  318,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,  262,   -1,   -1,  265,  266,  267,  336,
   -1,   -1,  271,  272,   59,   60,   61,   62,   -1,   -1,
   -1,  280,   -1,   -1,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
  309,  310,  311,  312,   -1,  314,  315,   -1,  317,   -1,
   37,   -1,   -1,   -1,   41,   -1,   43,   44,   -1,   46,
   47,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,  124,
  125,   -1,   59,   60,   61,   62,   -1,   -1,   -1,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,   -1,  305,
  306,  307,  308,  309,   91,   -1,   93,   94,   -1,   37,
   38,  317,  318,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  336,   59,   -1,   61,   -1,   37,   38,  124,  125,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   93,   61,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,   -1,  257,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   93,   59,   -1,   61,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,  124,  125,   -1,   -1,   93,
   -1,   -1,   37,  318,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,  269,  270,   59,   -1,   61,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,   93,   41,
  307,  308,   44,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  318,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,  336,
  125,   -1,   -1,   37,   38,  257,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,  269,  270,   -1,
   -1,   93,   -1,   41,   37,   59,   44,   61,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,  257,   -1,
  318,   59,   41,   -1,   41,   44,   59,   44,   61,   41,
  269,  270,   44,  125,   -1,   -1,   -1,   -1,  336,   93,
   59,   -1,   59,   -1,   -1,   -1,  318,   59,   -1,   41,
   -1,   -1,   44,  257,   -1,   93,   -1,   -1,   -1,   41,
   93,   -1,   44,   -1,  336,  269,  270,   59,   -1,   -1,
  124,  125,   -1,   -1,   93,   -1,   93,   59,   -1,  318,
   -1,   93,   -1,   -1,   -1,   -1,   41,  125,   -1,   44,
   -1,   -1,  125,   -1,   -1,   -1,   -1,  336,   -1,   -1,
   41,   93,   41,   44,   59,   44,  125,   -1,  125,   -1,
   -1,   93,  257,  125,  318,   -1,   -1,   -1,   59,   -1,
   59,   -1,   -1,   41,  269,  270,   44,   41,   -1,   -1,
   44,   -1,  336,  125,   -1,   -1,   -1,   41,   93,   -1,
   44,   59,   -1,  125,   -1,   59,   -1,   -1,   -1,   -1,
   -1,   -1,   93,  257,   93,   59,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,  257,   -1,  271,  272,   -1,
  125,   -1,   -1,  318,   -1,   93,  280,  269,  270,   93,
   -1,   -1,   -1,   -1,  125,   -1,  125,   -1,   -1,   93,
   -1,  336,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   -1,   44,  257,   -1,  309,   -1,  125,   -1,   -1,
   -1,  125,   -1,  317,   -1,  269,  270,   -1,   -1,  257,
   62,  125,   -1,   -1,  257,   -1,  318,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,  269,  270,  257,   -1,
  257,   -1,   -1,   -1,  336,  257,   -1,   -1,   -1,   91,
  269,  270,  269,  270,   -1,   -1,   -1,  269,  270,   -1,
   -1,   -1,   -1,   -1,  318,  257,   -1,   38,   -1,   40,
   41,   42,   -1,   44,   -1,  257,   -1,  269,  270,   -1,
  318,   -1,  336,   -1,   -1,  318,   -1,  269,  270,   -1,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,  336,  318,
   -1,  318,  257,  336,   -1,   -1,  318,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  269,  270,  257,  336,  257,  336,
   91,   -1,   -1,   -1,  336,   -1,  318,   -1,  269,  270,
  269,  270,   -1,   -1,   -1,   -1,  318,   -1,   -1,  257,
   -1,   -1,   -1,  257,  336,   -1,   60,   -1,   62,   -1,
   -1,  269,  270,  257,  336,  269,  270,   -1,   -1,  257,
   -1,   -1,   -1,  318,  262,  269,  270,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   -1,  318,   -1,  318,
   94,  336,  280,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,  336,   -1,  336,   -1,   -1,
  318,   -1,   -1,   -1,  318,   59,   60,   61,   62,   -1,
   -1,  309,  310,  311,  318,  257,   -1,   -1,  336,  317,
  262,   -1,  336,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,  336,   -1,   -1,   -1,   -1,   91,  280,   -1,
   94,   -1,   38,  285,   40,   41,   42,   -1,   44,   38,
   -1,   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,
   -1,  303,   -1,   -1,   -1,   -1,   62,  309,   -1,   -1,
  124,  125,   -1,   62,   -1,  317,   38,   -1,   40,   41,
   42,   -1,   44,   -1,  257,   -1,  257,   -1,   -1,  262,
   -1,  262,  265,  266,  267,   91,   -1,   -1,  271,  272,
   62,  272,   91,   38,   -1,   40,   41,  280,   -1,   44,
   38,   -1,   40,   41,  285,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   62,   -1,   91,
   -1,   -1,  303,   -1,   62,   -1,  309,   -1,  309,   -1,
   -1,   -1,   37,   38,  317,   -1,  317,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   40,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   62,   -1,  124,
  125,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
   -1,  305,  306,  307,  308,  309,   91,   -1,   40,   41,
   -1,  257,   44,  317,   -1,   -1,  262,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  272,   -1,   -1,   -1,
   62,   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,   91,
  272,   -1,   -1,  309,  303,   -1,   -1,   -1,   -1,   -1,
  309,  317,  257,  285,   -1,   -1,   -1,  262,  317,  257,
   -1,   -1,   -1,   -1,  262,   -1,  271,  272,   -1,   -1,
   -1,  303,   -1,  271,  272,  280,   -1,  309,   -1,   -1,
  285,   -1,  280,   -1,   -1,  317,   -1,  285,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,  309,   -1,   -1,   -1,   -1,   -1,
   -1,  309,  317,   59,   60,   61,   62,   -1,   -1,  317,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,   -1,
  305,  306,  307,  308,   -1,   91,   -1,  312,   94,  314,
  315,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,   -1,   -1,  124,   33,
  285,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,  257,   60,   61,   62,   -1,
  262,   -1,  317,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   91,   37,   38,
   94,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,
   59,   60,   61,   62,   -1,  317,   -1,   -1,   -1,   -1,
  124,   -1,  126,   -1,   -1,   -1,   37,   38,   -1,   -1,
   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  124,  125,   91,   -1,   -1,   94,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  124,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,   -1,   60,   61,   62,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,   -1,  305,  306,  307,  308,
  271,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,  280,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   91,   -1,   93,   94,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   60,   61,   62,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  124,   -1,   91,   37,   38,   94,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   91,   -1,   93,   94,
   60,   61,   62,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  124,
   -1,   91,   -1,   -1,   94,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,  124,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  124,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,  308,   91,   -1,
   -1,   94,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  124,
   -1,   91,   37,   38,   94,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   60,   61,   62,  271,  272,
   -1,   -1,   -1,   -1,  124,   -1,   -1,  280,   -1,   37,
   -1,   -1,   40,   -1,   -1,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   59,   -1,   61,   62,   -1,  309,  310,  311,  312,
   -1,  314,  315,   -1,  317,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  124,
  271,  272,   -1,   91,   -1,   -1,   94,   -1,   -1,  280,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,  124,  125,  309,  310,
  311,   -1,   37,   38,   -1,   40,  317,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  124,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,   -1,  305,  306,  307,
  308,  124,   37,   38,   -1,   40,   -1,   42,   43,  257,
   45,   46,   47,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   60,   61,   62,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,  309,   -1,   60,   61,   62,   -1,   -1,   -1,  317,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,  124,
  305,  306,  307,  308,   91,   -1,   -1,   94,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,  124,   -1,   91,   37,
   38,   94,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   60,   61,
   62,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,   -1,
  305,  306,  307,  308,   -1,   -1,  124,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,  124,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,  124,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  124,   37,   38,
   -1,   40,   -1,   42,   43,  257,   45,   46,   47,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   60,   61,   62,   -1,   -1,   -1,   -1,  280,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,  309,  310,  311,
   60,   61,   62,   -1,   -1,  317,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  124,   -1,  305,  306,  307,
  308,   91,   -1,   -1,   94,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,  124,   -1,   91,   37,   38,   94,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   91,
   -1,   -1,   94,   -1,  280,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,  124,  309,  310,  311,  312,   -1,  314,  315,
   -1,  317,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,   -1,   -1,  305,  306,
  307,  308,  124,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   91,   37,   38,
   94,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   60,   61,   62,  271,  272,   -1,   -1,   -1,   -1,
  124,   -1,   -1,  280,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   60,   61,   62,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,
  317,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,  124,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  124,   -1,  305,  306,  307,  308,   91,   37,   38,
   94,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,  257,   -1,   -1,
  124,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  309,
   -1,  305,  306,  307,  308,  124,   -1,  317,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   91,   -1,   -1,   94,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,  124,   -1,   91,   37,   38,   94,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   60,   61,   62,
  271,  272,   -1,   -1,   -1,   -1,  124,   -1,   -1,  280,
   -1,   37,   -1,   -1,   -1,   -1,   -1,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   59,   60,   61,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,   -1,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   94,   -1,  305,  306,  307,  308,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   94,   -1,  305,  306,  307,  308,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   94,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,   94,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   94,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   94,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   94,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   94,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   94,   -1,  305,  306,  307,  308,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   94,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   94,   -1,
  305,  306,  307,  308,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   94,   -1,  305,  306,  307,  308,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,   94,   -1,  305,  306,  307,  308,   -1,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   94,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,  309,  310,  311,  312,   -1,  314,  315,   -1,  317,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   -1,  257,  305,
  306,  307,  308,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,   -1,  317,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
   -1,   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  280,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,   -1,   -1,  305,  306,  307,  308,
   -1,  309,  310,  311,  312,  257,  314,  315,   -1,  317,
  262,   -1,   -1,  265,  266,  267,  257,   -1,   -1,  271,
  272,  262,   -1,   -1,  265,  266,  267,  257,  280,   -1,
  271,  272,  262,   -1,   -1,  265,  266,  267,  257,  280,
   -1,  271,  272,  262,   -1,   -1,  265,  266,  267,   -1,
  280,   -1,  271,  272,   -1,   -1,   -1,  309,  310,  311,
  312,  280,  314,  315,   -1,  317,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,   -1,  317,   -1,   -1,  309,
  310,  311,  312,   -1,  314,  315,   -1,  317,   -1,   -1,
  309,  310,  311,  312,  257,  314,  315,   -1,  317,  262,
   -1,   -1,  265,  266,  267,  257,   -1,   -1,  271,  272,
  262,   -1,   -1,  265,  266,  267,  257,  280,   -1,  271,
  272,  262,   -1,   -1,  265,  266,  267,  257,  280,   -1,
  271,  272,  262,   -1,   -1,  265,  266,  267,   -1,  280,
   -1,  271,  272,   -1,   -1,   -1,  309,  310,  311,  312,
  280,  314,  315,   -1,  317,   -1,   -1,  309,  310,  311,
  312,   -1,  314,  315,   -1,  317,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,   -1,  317,   -1,   -1,  309,
  310,  311,  312,  257,  314,  315,   -1,  317,  262,   -1,
   -1,  265,  266,  267,  257,   -1,   -1,  271,  272,  262,
   -1,   -1,  265,  266,  267,  257,  280,   -1,  271,  272,
  262,   -1,   -1,  265,  266,  267,  257,  280,   -1,  271,
  272,  262,   -1,   -1,  265,  266,  267,   -1,  280,   -1,
  271,  272,   -1,   -1,   -1,  309,  310,  311,  312,  280,
  314,  315,   -1,  317,   -1,   -1,  309,  310,  311,  312,
   -1,  314,  315,   -1,  317,   -1,   -1,  309,  310,  311,
  312,   -1,  314,  315,   -1,  317,   -1,   -1,  309,  310,
  311,   -1,  257,   -1,   -1,   -1,  317,  262,   -1,   -1,
  265,  266,  267,  257,   -1,   -1,  271,  272,  262,   -1,
   -1,  265,  266,  267,  257,  280,   -1,  271,  272,  262,
   -1,   -1,  265,  266,  267,  257,  280,   -1,  271,  272,
  262,   -1,   -1,  265,  266,  267,   -1,  280,   -1,  271,
  272,   -1,   -1,   -1,  309,  310,  311,   -1,  280,   -1,
   -1,   -1,  317,   -1,   -1,  309,  310,  311,   -1,   -1,
   -1,   -1,   -1,  317,   -1,   -1,  309,  310,  311,   -1,
   -1,   -1,   -1,   -1,  317,   -1,   -1,  309,  310,  311,
   -1,  257,   -1,   -1,   -1,  317,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  280,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,   -1,   -1,   -1,   -1,
   -1,  317,
};
static int yyctable[] = {                                      1,
    2,  184,  238,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  184,  238,
   -1,    7,    2,   -1,    8,    2,  184,  238,   -1,    9,
    2,  184,  238,   -1,   10,    2,  184,  238,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
  184,  238,   -1,   15,    2,  184,  238,   -1,   16,    2,
   -1,   17,    2,  184,  238,   -1,   18,    2,   -1,   19,
    2,   -1,   20,    2,   -1,   21,    2,   -1,   22,    2,
   -1,   23,    2,   -1,   24,    2,   -1,   25,    2,   -1,
   26,    2,   -1,   27,    2,   -1,   28,    2,   -1,   29,
    2,   -1,   30,    2,   -1,   31,    2,  238,   -1,   32,
    2,  238,   -1,   33,    2,  238,   -1,   34,    2,  238,
   -1,   35,    2,  238,   -1,   36,    2,  238,   -1,   37,
    2,  238,   -1,   38,    2,   -1,   39,    2,   -1,   40,
    2,   -1,   41,    2,   -1,   42,    2,   -1,   43,    2,
   -1,   44,    2,   -1,   45,    2,   -1,   46,    2,   -1,
   47,    2,   -1,   99,  184,  239,   -1,    6,  184,  239,
   -1,  100,  184,  239,   -1,  101,  184,  239,   -1,  102,
  184,  239,   -1,  103,   64,  184,  239,   -1,   15,  184,
  239,   -1,   17,   64,  184,  239,   -1,  104,   64,   -1,
   31,  239,   -1,   32,  239,   -1,  105,  239,   -1,   37,
  239,   -1,  109,  184,  238,   -1,  184,  238,   -1,   31,
  238,   -1,   37,  238,   -1,  113,   67,   -1,    6,   67,
   -1,   14,   67,   -1,  114,   67,   -1,   17,   67,   -1,
  113,  234,   -1,    6,  234,   -1,   14,  234,   -1,  114,
  234,   -1,   17,  234,   -1,  113,  235,   -1,    6,  235,
   -1,   14,  235,   -1,  114,  235,   -1,   17,  235,   -1,
  113,  236,   -1,    6,  236,   -1,   14,  236,   -1,  114,
  236,   -1,   17,  236,   -1,  113,   69,   -1,    6,   69,
   -1,   14,   69,   -1,  114,   69,   -1,   17,   69,   -1,
  113,  184,   -1,    6,  184,   -1,   14,  184,   -1,  114,
  184,   -1,   17,  184,   -1,  115,  176,   -1,  180,  175,
   -1,    1,  184,  238,   -1,    6,  184,  238,   -1,    8,
  184,  238,   -1,    9,  184,  238,   -1,   10,  184,  238,
   -1,   14,  184,  238,   -1,   15,  184,  238,   -1,   17,
  184,  238,   -1,   32,  238,   -1,   33,  238,   -1,   34,
  238,   -1,   35,  238,   -1,   36,  238,   -1,  113,  306,
   -1,   23,  306,   -1,   24,  306,   -1,   25,  306,   -1,
   26,  306,   -1,   27,  306,   -1,   30,  306,   -1,  210,
  124,   -1,   95,  124,   -1,  275,  238,   -1,    6,  238,
   -1,   14,  238,   -1,  114,  238,   -1,   17,  238,   -1,
  173,  184,   -1,   31,  173,   -1,   37,  173,   -1,  280,
  238,   -1,  283,   33,   -1,   64,  241,   -1,  286,  184,
  238,   -1,  100,  184,  238,   -1,  101,  184,  238,   -1,
  102,  184,  238,   -1,  105,  238,   -1,  293,   95,   -1,
  209,   95,   -1,  295,  239,   -1,  293,   68,   -1,  209,
   68,   -1,  293,   97,   -1,  209,   97,   -1,  293,   98,
   -1,  209,   98,   -1,  293,   99,   -1,  209,   99,   -1,
  293,   65,   -1,  209,   65,   -1,   70,   96,   -1,  293,
   70,   96,   -1,  209,   70,   96,   -1,  231,  258,   -1,
  232,  258,   -1,  233,  258,   -1,  234,  258,   -1,  235,
  258,   -1,  236,  258,   -1,  237,  258,   -1,  238,  258,
   -1,  239,  258,   -1,  240,  258,   -1,  241,  258,   -1,
  242,  258,   -1,  243,  258,   -1,  244,  258,   -1,  245,
  258,   -1,  246,  258,   -1,  247,  258,   -1,  248,  258,
   -1,  249,  258,   -1,  250,  258,   -1,  251,  258,   -1,
  252,  258,   -1,  253,  258,   -1,  254,  258,   -1,  255,
  258,   -1,  256,  258,   -1,  257,  258,   -1,  258,  258,
   -1,  259,  258,   -1,  260,  258,   -1,  261,  258,   -1,
  262,  258,   -1,  263,  258,   -1,  264,  258,   -1,  265,
  258,   -1,  231,  260,   -1,  232,  260,   -1,  233,  260,
   -1,  234,  260,   -1,  235,  260,   -1,  236,  260,   -1,
  237,  260,   -1,  238,  260,   -1,  239,  260,   -1,  240,
  260,   -1,  241,  260,   -1,  242,  260,   -1,  243,  260,
   -1,  244,  260,   -1,  245,  260,   -1,  246,  260,   -1,
  247,  260,   -1,  248,  260,   -1,  249,  260,   -1,  250,
  260,   -1,  251,  260,   -1,  252,  260,   -1,  253,  260,
   -1,  254,  260,   -1,  255,  260,   -1,  256,  260,   -1,
  257,  260,   -1,  258,  260,   -1,  259,  260,   -1,  260,
  260,   -1,  261,  260,   -1,  262,  260,   -1,  263,  260,
   -1,  264,  260,   -1,  265,  260,   -1,  231,  253,   -1,
  232,  253,   -1,  233,  253,   -1,  234,  253,   -1,  235,
  253,   -1,  236,  253,   -1,  237,  253,   -1,  238,  253,
   -1,  239,  253,   -1,  240,  253,   -1,  241,  253,   -1,
  242,  253,   -1,  243,  253,   -1,  244,  253,   -1,  245,
  253,   -1,  246,  253,   -1,  247,  253,   -1,  248,  253,
   -1,  249,  253,   -1,  250,  253,   -1,  251,  253,   -1,
  252,  253,   -1,  253,  253,   -1,  259,  253,   -1,  231,
  256,   -1,  232,  256,   -1,  233,  256,   -1,  234,  256,
   -1,  235,  256,   -1,  236,  256,   -1,  237,  256,   -1,
  238,  256,   -1,  239,  256,   -1,  240,  256,   -1,  241,
  256,   -1,  242,  256,   -1,  243,  256,   -1,  244,  256,
   -1,  245,  256,   -1,  246,  256,   -1,  247,  256,   -1,
  248,  256,   -1,  249,  256,   -1,  250,  256,   -1,  251,
  256,   -1,  252,  256,   -1,  253,  256,   -1,  259,  256,
   -1,  231,  257,   -1,  232,  257,   -1,  233,  257,   -1,
  234,  257,   -1,  235,  257,   -1,  236,  257,   -1,  237,
  257,   -1,  238,  257,   -1,  239,  257,   -1,  240,  257,
   -1,  241,  257,   -1,  242,  257,   -1,  243,  257,   -1,
  244,  257,   -1,  245,  257,   -1,  246,  257,   -1,  247,
  257,   -1,  248,  257,   -1,  249,  257,   -1,  250,  257,
   -1,  251,  257,   -1,  252,  257,   -1,  253,  257,   -1,
  259,  257,   -1,  311,   64,   -1,  231,  254,   -1,  232,
  254,   -1,  233,  254,   -1,  234,  254,   -1,  235,  254,
   -1,  236,  254,   -1,  237,  254,   -1,  238,  254,   -1,
  239,  254,   -1,  240,  254,   -1,  241,  254,   -1,  242,
  254,   -1,  243,  254,   -1,  244,  254,   -1,  245,  254,
   -1,  246,  254,   -1,  247,  254,   -1,  248,  254,   -1,
  249,  254,   -1,  250,  254,   -1,  251,  254,   -1,  252,
  254,   -1,  253,  254,   -1,  259,  254,   -1,  231,  255,
   -1,  232,  255,   -1,  233,  255,   -1,  234,  255,   -1,
  235,  255,   -1,  236,  255,   -1,  237,  255,   -1,  238,
  255,   -1,  239,  255,   -1,  240,  255,   -1,  241,  255,
   -1,  242,  255,   -1,  243,  255,   -1,  244,  255,   -1,
  245,  255,   -1,  246,  255,   -1,  247,  255,   -1,  248,
  255,   -1,  249,  255,   -1,  250,  255,   -1,  251,  255,
   -1,  252,  255,   -1,  253,  255,   -1,  259,  255,   -1,
  231,  302,   -1,  232,  302,   -1,  233,  302,   -1,  234,
  302,   -1,  235,  302,   -1,  236,  302,   -1,  237,  302,
   -1,  238,  302,   -1,  239,  302,   -1,  240,  302,   -1,
  241,  302,   -1,  242,  302,   -1,  243,  302,   -1,  244,
  302,   -1,  245,  302,   -1,  246,  302,   -1,  247,  302,
   -1,  248,  302,   -1,  249,  302,   -1,  250,  302,   -1,
  251,  302,   -1,  252,  302,   -1,  253,  302,   -1,  254,
  302,   -1,  255,  302,   -1,  256,  302,   -1,  257,  302,
   -1,  258,  302,   -1,  259,  302,   -1,  260,  302,   -1,
  261,  302,   -1,  262,  302,   -1,  263,  302,   -1,  264,
  302,   -1,  265,  302,   -1,  231,  303,   -1,  232,  303,
   -1,  233,  303,   -1,  234,  303,   -1,  235,  303,   -1,
  236,  303,   -1,  237,  303,   -1,  238,  303,   -1,  239,
  303,   -1,  240,  303,   -1,  241,  303,   -1,  242,  303,
   -1,  243,  303,   -1,  244,  303,   -1,  245,  303,   -1,
  246,  303,   -1,  247,  303,   -1,  248,  303,   -1,  249,
  303,   -1,  250,  303,   -1,  251,  303,   -1,  252,  303,
   -1,  253,  303,   -1,  254,  303,   -1,  255,  303,   -1,
  256,  303,   -1,  257,  303,   -1,  258,  303,   -1,  259,
  303,   -1,  260,  303,   -1,  261,  303,   -1,  262,  303,
   -1,  263,  303,   -1,  264,  303,   -1,  265,  303,   -1,
  231,  305,   -1,  232,  305,   -1,  233,  305,   -1,  234,
  305,   -1,  235,  305,   -1,  236,  305,   -1,  237,  305,
   -1,  238,  305,   -1,  239,  305,   -1,  240,  305,   -1,
  241,  305,   -1,  242,  305,   -1,  243,  305,   -1,  244,
  305,   -1,  245,  305,   -1,  246,  305,   -1,  247,  305,
   -1,  248,  305,   -1,  249,  305,   -1,  250,  305,   -1,
  251,  305,   -1,  252,  305,   -1,  253,  305,   -1,  254,
  305,   -1,  255,  305,   -1,  256,  305,   -1,  257,  305,
   -1,  258,  305,   -1,  259,  305,   -1,  260,  305,   -1,
  261,  305,   -1,  262,  305,   -1,  263,  305,   -1,  264,
  305,   -1,  265,  305,   -1,  109,  238,   -1,   31,  184,
   -1,   37,  184,   -1,   64,  239,   -1,  296,  194,   -1,
  293,   70,   -1,  209,   70,   -1,  423,   47,   -1,  424,
   47,   -1,  425,   47,   -1,  426,   47,   -1,  438,   64,
   -1,  293,   66,   -1,  209,   66,   -1,  231,  273,   -1,
  232,  273,   -1,  233,  273,   -1,  234,  273,   -1,  235,
  273,   -1,  236,  273,   -1,  237,  273,   -1,  238,  273,
   -1,  239,  273,   -1,  240,  273,   -1,  241,  273,   -1,
  242,  273,   -1,  243,  273,   -1,  244,  273,   -1,  245,
  273,   -1,  246,  273,   -1,  247,  273,   -1,  248,  273,
   -1,  249,  273,   -1,  250,  273,   -1,  251,  273,   -1,
  252,  273,   -1,  253,  273,   -1,  254,  273,   -1,  255,
  273,   -1,  256,  273,   -1,  257,  273,   -1,  258,  273,
   -1,  259,  273,   -1,  260,  273,   -1,  261,  273,   -1,
  262,  273,   -1,  263,  273,   -1,  264,  273,   -1,  265,
  273,   -1,  231,  274,   -1,  232,  274,   -1,  233,  274,
   -1,  234,  274,   -1,  235,  274,   -1,  236,  274,   -1,
  237,  274,   -1,  238,  274,   -1,  239,  274,   -1,  240,
  274,   -1,  241,  274,   -1,  242,  274,   -1,  243,  274,
   -1,  244,  274,   -1,  245,  274,   -1,  246,  274,   -1,
  247,  274,   -1,  248,  274,   -1,  249,  274,   -1,  250,
  274,   -1,  251,  274,   -1,  252,  274,   -1,  253,  274,
   -1,  254,  274,   -1,  255,  274,   -1,  256,  274,   -1,
  257,  274,   -1,  258,  274,   -1,  259,  274,   -1,  260,
  274,   -1,  261,  274,   -1,  262,  274,   -1,  263,  274,
   -1,  264,  274,   -1,  265,  274,   -1,  231,  275,   -1,
  232,  275,   -1,  233,  275,   -1,  234,  275,   -1,  235,
  275,   -1,  236,  275,   -1,  237,  275,   -1,  238,  275,
   -1,  239,  275,   -1,  240,  275,   -1,  241,  275,   -1,
  242,  275,   -1,  243,  275,   -1,  244,  275,   -1,  245,
  275,   -1,  246,  275,   -1,  247,  275,   -1,  248,  275,
   -1,  249,  275,   -1,  250,  275,   -1,  251,  275,   -1,
  252,  275,   -1,  253,  275,   -1,  254,  275,   -1,  255,
  275,   -1,  256,  275,   -1,  257,  275,   -1,  258,  275,
   -1,  259,  275,   -1,  260,  275,   -1,  261,  275,   -1,
  262,  275,   -1,  263,  275,   -1,  264,  275,   -1,  265,
  275,   -1,  231,  276,   -1,  232,  276,   -1,  233,  276,
   -1,  234,  276,   -1,  235,  276,   -1,  236,  276,   -1,
  237,  276,   -1,  238,  276,   -1,  239,  276,   -1,  240,
  276,   -1,  241,  276,   -1,  242,  276,   -1,  243,  276,
   -1,  244,  276,   -1,  245,  276,   -1,  246,  276,   -1,
  247,  276,   -1,  248,  276,   -1,  249,  276,   -1,  250,
  276,   -1,  251,  276,   -1,  252,  276,   -1,  253,  276,
   -1,  254,  276,   -1,  255,  276,   -1,  256,  276,   -1,
  257,  276,   -1,  258,  276,   -1,  259,  276,   -1,  260,
  276,   -1,  261,  276,   -1,  262,  276,   -1,  263,  276,
   -1,  264,  276,   -1,  265,  276,   -1,  231,  277,   -1,
  232,  277,   -1,  233,  277,   -1,  234,  277,   -1,  235,
  277,   -1,  236,  277,   -1,  237,  277,   -1,  238,  277,
   -1,  239,  277,   -1,  240,  277,   -1,  241,  277,   -1,
  242,  277,   -1,  243,  277,   -1,  244,  277,   -1,  245,
  277,   -1,  246,  277,   -1,  247,  277,   -1,  248,  277,
   -1,  249,  277,   -1,  250,  277,   -1,  251,  277,   -1,
  252,  277,   -1,  253,  277,   -1,  254,  277,   -1,  255,
  277,   -1,  256,  277,   -1,  257,  277,   -1,  258,  277,
   -1,  259,  277,   -1,  260,  277,   -1,  261,  277,   -1,
  262,  277,   -1,  263,  277,   -1,  264,  277,   -1,  265,
  277,   -1,  231,  278,   -1,  232,  278,   -1,  233,  278,
   -1,  234,  278,   -1,  235,  278,   -1,  236,  278,   -1,
  237,  278,   -1,  238,  278,   -1,  239,  278,   -1,  240,
  278,   -1,  241,  278,   -1,  242,  278,   -1,  243,  278,
   -1,  244,  278,   -1,  245,  278,   -1,  246,  278,   -1,
  247,  278,   -1,  248,  278,   -1,  249,  278,   -1,  250,
  278,   -1,  251,  278,   -1,  252,  278,   -1,  253,  278,
   -1,  254,  278,   -1,  255,  278,   -1,  256,  278,   -1,
  257,  278,   -1,  258,  278,   -1,  259,  278,   -1,  260,
  278,   -1,  261,  278,   -1,  262,  278,   -1,  263,  278,
   -1,  264,  278,   -1,  265,  278,   -1,  231,  279,   -1,
  232,  279,   -1,  233,  279,   -1,  234,  279,   -1,  235,
  279,   -1,  236,  279,   -1,  237,  279,   -1,  238,  279,
   -1,  239,  279,   -1,  240,  279,   -1,  241,  279,   -1,
  242,  279,   -1,  243,  279,   -1,  244,  279,   -1,  245,
  279,   -1,  246,  279,   -1,  247,  279,   -1,  248,  279,
   -1,  249,  279,   -1,  250,  279,   -1,  251,  279,   -1,
  252,  279,   -1,  253,  279,   -1,  254,  279,   -1,  255,
  279,   -1,  256,  279,   -1,  257,  279,   -1,  258,  279,
   -1,  259,  279,   -1,  260,  279,   -1,  261,  279,   -1,
  262,  279,   -1,  263,  279,   -1,  264,  279,   -1,  265,
  279,   -1,  231,  280,   -1,  232,  280,   -1,  233,  280,
   -1,  234,  280,   -1,  235,  280,   -1,  236,  280,   -1,
  237,  280,   -1,  238,  280,   -1,  239,  280,   -1,  240,
  280,   -1,  241,  280,   -1,  242,  280,   -1,  243,  280,
   -1,  244,  280,   -1,  245,  280,   -1,  246,  280,   -1,
  247,  280,   -1,  248,  280,   -1,  249,  280,   -1,  250,
  280,   -1,  251,  280,   -1,  252,  280,   -1,  253,  280,
   -1,  254,  280,   -1,  255,  280,   -1,  256,  280,   -1,
  257,  280,   -1,  258,  280,   -1,  259,  280,   -1,  260,
  280,   -1,  261,  280,   -1,  262,  280,   -1,  263,  280,
   -1,  264,  280,   -1,  265,  280,   -1,  231,  281,   -1,
  232,  281,   -1,  233,  281,   -1,  234,  281,   -1,  235,
  281,   -1,  236,  281,   -1,  237,  281,   -1,  238,  281,
   -1,  239,  281,   -1,  240,  281,   -1,  241,  281,   -1,
  242,  281,   -1,  243,  281,   -1,  244,  281,   -1,  245,
  281,   -1,  246,  281,   -1,  247,  281,   -1,  248,  281,
   -1,  249,  281,   -1,  250,  281,   -1,  251,  281,   -1,
  252,  281,   -1,  253,  281,   -1,  259,  281,   -1,  231,
  282,   -1,  232,  282,   -1,  233,  282,   -1,  234,  282,
   -1,  235,  282,   -1,  236,  282,   -1,  237,  282,   -1,
  238,  282,   -1,  239,  282,   -1,  240,  282,   -1,  241,
  282,   -1,  242,  282,   -1,  243,  282,   -1,  244,  282,
   -1,  245,  282,   -1,  246,  282,   -1,  247,  282,   -1,
  248,  282,   -1,  249,  282,   -1,  250,  282,   -1,  251,
  282,   -1,  252,  282,   -1,  253,  282,   -1,  259,  282,
   -1,  231,  283,   -1,  232,  283,   -1,  233,  283,   -1,
  234,  283,   -1,  235,  283,   -1,  236,  283,   -1,  237,
  283,   -1,  238,  283,   -1,  239,  283,   -1,  240,  283,
   -1,  241,  283,   -1,  242,  283,   -1,  243,  283,   -1,
  244,  283,   -1,  245,  283,   -1,  246,  283,   -1,  247,
  283,   -1,  248,  283,   -1,  249,  283,   -1,  250,  283,
   -1,  251,  283,   -1,  252,  283,   -1,  253,  283,   -1,
  254,  283,   -1,  255,  283,   -1,  256,  283,   -1,  257,
  283,   -1,  258,  283,   -1,  259,  283,   -1,  260,  283,
   -1,  261,  283,   -1,  262,  283,   -1,  263,  283,   -1,
  264,  283,   -1,  265,  283,   -1,  231,  284,   -1,  232,
  284,   -1,  233,  284,   -1,  234,  284,   -1,  235,  284,
   -1,  236,  284,   -1,  237,  284,   -1,  238,  284,   -1,
  239,  284,   -1,  240,  284,   -1,  241,  284,   -1,  242,
  284,   -1,  243,  284,   -1,  244,  284,   -1,  245,  284,
   -1,  246,  284,   -1,  247,  284,   -1,  248,  284,   -1,
  249,  284,   -1,  250,  284,   -1,  251,  284,   -1,  252,
  284,   -1,  253,  284,   -1,  254,  284,   -1,  255,  284,
   -1,  256,  284,   -1,  257,  284,   -1,  258,  284,   -1,
  259,  284,   -1,  260,  284,   -1,  261,  284,   -1,  262,
  284,   -1,  263,  284,   -1,  264,  284,   -1,  265,  284,
   -1,  231,  285,   -1,  232,  285,   -1,  233,  285,   -1,
  234,  285,   -1,  235,  285,   -1,  236,  285,   -1,  237,
  285,   -1,  238,  285,   -1,  239,  285,   -1,  240,  285,
   -1,  241,  285,   -1,  242,  285,   -1,  243,  285,   -1,
  244,  285,   -1,  245,  285,   -1,  246,  285,   -1,  247,
  285,   -1,  248,  285,   -1,  249,  285,   -1,  250,  285,
   -1,  251,  285,   -1,  252,  285,   -1,  253,  285,   -1,
  259,  285,   -1,  231,  286,   -1,  232,  286,   -1,  233,
  286,   -1,  234,  286,   -1,  235,  286,   -1,  236,  286,
   -1,  237,  286,   -1,  238,  286,   -1,  239,  286,   -1,
  240,  286,   -1,  241,  286,   -1,  242,  286,   -1,  243,
  286,   -1,  244,  286,   -1,  245,  286,   -1,  246,  286,
   -1,  247,  286,   -1,  248,  286,   -1,  249,  286,   -1,
  250,  286,   -1,  251,  286,   -1,  252,  286,   -1,  253,
  286,   -1,  254,  286,   -1,  255,  286,   -1,  256,  286,
   -1,  257,  286,   -1,  258,  286,   -1,  259,  286,   -1,
  260,  286,   -1,  261,  286,   -1,  262,  286,   -1,  263,
  286,   -1,  264,  286,   -1,  265,  286,   -1,  231,  287,
   -1,  232,  287,   -1,  233,  287,   -1,  234,  287,   -1,
  235,  287,   -1,  236,  287,   -1,  237,  287,   -1,  238,
  287,   -1,  239,  287,   -1,  240,  287,   -1,  241,  287,
   -1,  242,  287,   -1,  243,  287,   -1,  244,  287,   -1,
  245,  287,   -1,  246,  287,   -1,  247,  287,   -1,  248,
  287,   -1,  249,  287,   -1,  250,  287,   -1,  251,  287,
   -1,  252,  287,   -1,  253,  287,   -1,  254,  287,   -1,
  255,  287,   -1,  256,  287,   -1,  257,  287,   -1,  258,
  287,   -1,  259,  287,   -1,  260,  287,   -1,  261,  287,
   -1,  262,  287,   -1,  263,  287,   -1,  264,  287,   -1,
  265,  287,   -1,  231,  288,   -1,  232,  288,   -1,  233,
  288,   -1,  234,  288,   -1,  235,  288,   -1,  236,  288,
   -1,  237,  288,   -1,  238,  288,   -1,  239,  288,   -1,
  240,  288,   -1,  241,  288,   -1,  242,  288,   -1,  243,
  288,   -1,  244,  288,   -1,  245,  288,   -1,  246,  288,
   -1,  247,  288,   -1,  248,  288,   -1,  249,  288,   -1,
  250,  288,   -1,  251,  288,   -1,  252,  288,   -1,  253,
  288,   -1,  254,  288,   -1,  255,  288,   -1,  256,  288,
   -1,  257,  288,   -1,  258,  288,   -1,  259,  288,   -1,
  260,  288,   -1,  261,  288,   -1,  262,  288,   -1,  263,
  288,   -1,  264,  288,   -1,  265,  288,   -1,  231,  289,
   -1,  232,  289,   -1,  233,  289,   -1,  234,  289,   -1,
  235,  289,   -1,  236,  289,   -1,  237,  289,   -1,  238,
  289,   -1,  239,  289,   -1,  240,  289,   -1,  241,  289,
   -1,  242,  289,   -1,  243,  289,   -1,  244,  289,   -1,
  245,  289,   -1,  246,  289,   -1,  247,  289,   -1,  248,
  289,   -1,  249,  289,   -1,  250,  289,   -1,  251,  289,
   -1,  252,  289,   -1,  253,  289,   -1,  254,  289,   -1,
  255,  289,   -1,  256,  289,   -1,  257,  289,   -1,  258,
  289,   -1,  259,  289,   -1,  260,  289,   -1,  261,  289,
   -1,  262,  289,   -1,  263,  289,   -1,  264,  289,   -1,
  265,  289,   -1,  231,  291,   -1,  232,  291,   -1,  233,
  291,   -1,  234,  291,   -1,  235,  291,   -1,  236,  291,
   -1,  237,  291,   -1,  238,  291,   -1,  239,  291,   -1,
  240,  291,   -1,  241,  291,   -1,  242,  291,   -1,  243,
  291,   -1,  244,  291,   -1,  245,  291,   -1,  246,  291,
   -1,  247,  291,   -1,  248,  291,   -1,  249,  291,   -1,
  250,  291,   -1,  251,  291,   -1,  252,  291,   -1,  253,
  291,   -1,  259,  291,   -1,  231,  292,   -1,  232,  292,
   -1,  233,  292,   -1,  234,  292,   -1,  235,  292,   -1,
  236,  292,   -1,  237,  292,   -1,  238,  292,   -1,  239,
  292,   -1,  240,  292,   -1,  241,  292,   -1,  242,  292,
   -1,  243,  292,   -1,  244,  292,   -1,  245,  292,   -1,
  246,  292,   -1,  247,  292,   -1,  248,  292,   -1,  249,
  292,   -1,  250,  292,   -1,  251,  292,   -1,  252,  292,
   -1,  253,  292,   -1,  254,  292,   -1,  255,  292,   -1,
  256,  292,   -1,  257,  292,   -1,  258,  292,   -1,  259,
  292,   -1,  260,  292,   -1,  261,  292,   -1,  262,  292,
   -1,  263,  292,   -1,  264,  292,   -1,  265,  292,   -1,
  231,  271,   -1,  232,  271,   -1,  233,  271,   -1,  234,
  271,   -1,  235,  271,   -1,  236,  271,   -1,  237,  271,
   -1,  238,  271,   -1,  239,  271,   -1,  240,  271,   -1,
  241,  271,   -1,  242,  271,   -1,  243,  271,   -1,  244,
  271,   -1,  245,  271,   -1,  246,  271,   -1,  247,  271,
   -1,  248,  271,   -1,  249,  271,   -1,  250,  271,   -1,
  251,  271,   -1,  252,  271,   -1,  253,  271,   -1,  254,
  271,   -1,  255,  271,   -1,  256,  271,   -1,  257,  271,
   -1,  258,  271,   -1,  259,  271,   -1,  260,  271,   -1,
  261,  271,   -1,  262,  271,   -1,  263,  271,   -1,  264,
  271,   -1,  265,  271,   -1,  231,  272,   -1,  232,  272,
   -1,  233,  272,   -1,  234,  272,   -1,  235,  272,   -1,
  236,  272,   -1,  237,  272,   -1,  238,  272,   -1,  239,
  272,   -1,  240,  272,   -1,  241,  272,   -1,  242,  272,
   -1,  243,  272,   -1,  244,  272,   -1,  245,  272,   -1,
  246,  272,   -1,  247,  272,   -1,  248,  272,   -1,  249,
  272,   -1,  250,  272,   -1,  251,  272,   -1,  252,  272,
   -1,  253,  272,   -1,  254,  272,   -1,  255,  272,   -1,
  256,  272,   -1,  257,  272,   -1,  258,  272,   -1,  259,
  272,   -1,  260,  272,   -1,  261,  272,   -1,  262,  272,
   -1,  263,  272,   -1,  264,  272,   -1,  265,  272,   -1,
  231,  262,   -1,  232,  262,   -1,  233,  262,   -1,  234,
  262,   -1,  235,  262,   -1,  236,  262,   -1,  237,  262,
   -1,  238,  262,   -1,  239,  262,   -1,  240,  262,   -1,
  241,  262,   -1,  242,  262,   -1,  243,  262,   -1,  244,
  262,   -1,  245,  262,   -1,  246,  262,   -1,  247,  262,
   -1,  248,  262,   -1,  249,  262,   -1,  250,  262,   -1,
  251,  262,   -1,  252,  262,   -1,  253,  262,   -1,  259,
  262,   -1,  231,  263,   -1,  232,  263,   -1,  233,  263,
   -1,  234,  263,   -1,  235,  263,   -1,  236,  263,   -1,
  237,  263,   -1,  238,  263,   -1,  239,  263,   -1,  240,
  263,   -1,  241,  263,   -1,  242,  263,   -1,  243,  263,
   -1,  244,  263,   -1,  245,  263,   -1,  246,  263,   -1,
  247,  263,   -1,  248,  263,   -1,  249,  263,   -1,  250,
  263,   -1,  251,  263,   -1,  252,  263,   -1,  253,  263,
   -1,  259,  263,   -1,  231,  264,   -1,  232,  264,   -1,
  233,  264,   -1,  234,  264,   -1,  235,  264,   -1,  236,
  264,   -1,  237,  264,   -1,  238,  264,   -1,  239,  264,
   -1,  240,  264,   -1,  241,  264,   -1,  242,  264,   -1,
  243,  264,   -1,  244,  264,   -1,  245,  264,   -1,  246,
  264,   -1,  247,  264,   -1,  248,  264,   -1,  249,  264,
   -1,  250,  264,   -1,  251,  264,   -1,  252,  264,   -1,
  253,  264,   -1,  259,  264,   -1,  231,  265,   -1,  232,
  265,   -1,  233,  265,   -1,  234,  265,   -1,  235,  265,
   -1,  236,  265,   -1,  237,  265,   -1,  238,  265,   -1,
  239,  265,   -1,  240,  265,   -1,  241,  265,   -1,  242,
  265,   -1,  243,  265,   -1,  244,  265,   -1,  245,  265,
   -1,  246,  265,   -1,  247,  265,   -1,  248,  265,   -1,
  249,  265,   -1,  250,  265,   -1,  251,  265,   -1,  252,
  265,   -1,  253,  265,   -1,  259,  265,   -1,  231,  266,
   -1,  232,  266,   -1,  233,  266,   -1,  234,  266,   -1,
  235,  266,   -1,  236,  266,   -1,  237,  266,   -1,  238,
  266,   -1,  239,  266,   -1,  240,  266,   -1,  241,  266,
   -1,  242,  266,   -1,  243,  266,   -1,  244,  266,   -1,
  245,  266,   -1,  246,  266,   -1,  247,  266,   -1,  248,
  266,   -1,  249,  266,   -1,  250,  266,   -1,  251,  266,
   -1,  252,  266,   -1,  253,  266,   -1,  259,  266,   -1,
  231,  269,   -1,  232,  269,   -1,  233,  269,   -1,  234,
  269,   -1,  235,  269,   -1,  236,  269,   -1,  237,  269,
   -1,  238,  269,   -1,  239,  269,   -1,  240,  269,   -1,
  241,  269,   -1,  242,  269,   -1,  243,  269,   -1,  244,
  269,   -1,  245,  269,   -1,  246,  269,   -1,  247,  269,
   -1,  248,  269,   -1,  249,  269,   -1,  250,  269,   -1,
  251,  269,   -1,  252,  269,   -1,  253,  269,   -1,  254,
  269,   -1,  255,  269,   -1,  256,  269,   -1,  257,  269,
   -1,  258,  269,   -1,  259,  269,   -1,  260,  269,   -1,
  261,  269,   -1,  262,  269,   -1,  263,  269,   -1,  264,
  269,   -1,  265,  269,   -1,  231,  267,   -1,  232,  267,
   -1,  233,  267,   -1,  234,  267,   -1,  235,  267,   -1,
  236,  267,   -1,  237,  267,   -1,  238,  267,   -1,  239,
  267,   -1,  240,  267,   -1,  241,  267,   -1,  242,  267,
   -1,  243,  267,   -1,  244,  267,   -1,  245,  267,   -1,
  246,  267,   -1,  247,  267,   -1,  248,  267,   -1,  249,
  267,   -1,  250,  267,   -1,  251,  267,   -1,  252,  267,
   -1,  253,  267,   -1,  259,  267,   -1,  231,  268,   -1,
  232,  268,   -1,  233,  268,   -1,  234,  268,   -1,  235,
  268,   -1,  236,  268,   -1,  237,  268,   -1,  238,  268,
   -1,  239,  268,   -1,  240,  268,   -1,  241,  268,   -1,
  242,  268,   -1,  243,  268,   -1,  244,  268,   -1,  245,
  268,   -1,  246,  268,   -1,  247,  268,   -1,  248,  268,
   -1,  249,  268,   -1,  250,  268,   -1,  251,  268,   -1,
  252,  268,   -1,  253,  268,   -1,  259,  268,   -1,  231,
  270,   -1,  232,  270,   -1,  233,  270,   -1,  234,  270,
   -1,  235,  270,   -1,  236,  270,   -1,  237,  270,   -1,
  238,  270,   -1,  239,  270,   -1,  240,  270,   -1,  241,
  270,   -1,  242,  270,   -1,  243,  270,   -1,  244,  270,
   -1,  245,  270,   -1,  246,  270,   -1,  247,  270,   -1,
  248,  270,   -1,  249,  270,   -1,  250,  270,   -1,  251,
  270,   -1,  252,  270,   -1,  253,  270,   -1,  259,  270,
   -1,  231,  290,   -1,  232,  290,   -1,  233,  290,   -1,
  234,  290,   -1,  235,  290,   -1,  236,  290,   -1,  237,
  290,   -1,  238,  290,   -1,  239,  290,   -1,  240,  290,
   -1,  241,  290,   -1,  242,  290,   -1,  243,  290,   -1,
  244,  290,   -1,  245,  290,   -1,  246,  290,   -1,  247,
  290,   -1,  248,  290,   -1,  249,  290,   -1,  250,  290,
   -1,  251,  290,   -1,  252,  290,   -1,  253,  290,   -1,
  259,  290,   -1,  275,  184,  238,   -1,  231,  296,   -1,
  232,  296,   -1,  233,  296,   -1,  234,  296,   -1,  235,
  296,   -1,  236,  296,   -1,  237,  296,   -1,  238,  296,
   -1,  239,  296,   -1,  240,  296,   -1,  241,  296,   -1,
  242,  296,   -1,  243,  296,   -1,  244,  296,   -1,  245,
  296,   -1,  246,  296,   -1,  247,  296,   -1,  248,  296,
   -1,  249,  296,   -1,  250,  296,   -1,  251,  296,   -1,
  252,  296,   -1,  253,  296,   -1,  254,  296,   -1,  255,
  296,   -1,  256,  296,   -1,  257,  296,   -1,  258,  296,
   -1,  259,  296,   -1,  260,  296,   -1,  261,  296,   -1,
  262,  296,   -1,  263,  296,   -1,  264,  296,   -1,  265,
  296,   -1,  231,  304,   -1,  232,  304,   -1,  233,  304,
   -1,  234,  304,   -1,  235,  304,   -1,  236,  304,   -1,
  237,  304,   -1,  238,  304,   -1,  239,  304,   -1,  240,
  304,   -1,  241,  304,   -1,  242,  304,   -1,  243,  304,
   -1,  244,  304,   -1,  245,  304,   -1,  246,  304,   -1,
  247,  304,   -1,  248,  304,   -1,  249,  304,   -1,  250,
  304,   -1,  251,  304,   -1,  252,  304,   -1,  253,  304,
   -1,  254,  304,   -1,  255,  304,   -1,  256,  304,   -1,
  257,  304,   -1,  258,  304,   -1,  259,  304,   -1,  260,
  304,   -1,  261,  304,   -1,  262,  304,   -1,  263,  304,
   -1,  264,  304,   -1,  265,  304,   -1,  469,   83,   -1,
   12,   83,   -1,   13,   83,   -1,  471,   83,   -1,   46,
   83,   -1,  283,   79,   -1,
};
#define YYFINAL 48
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 346
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknEllipsis","tknConstCast","tknStaticCast","tknDynamicCast",
"tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq","tknMulEq",
"tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknConst","tknStatic","tknExtern","tknVirtual","tknOverride","tknInline",
"tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine","tknUndef",
"tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf",
"tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew","tknDelete",
"tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX",
"POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 994 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3682 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 277 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4072 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 284 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4078 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 285 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4088 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4098 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4104 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 298 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4110 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4116 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4122 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4128 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4134 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4140 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4146 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4152 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4158 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4164 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4170 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4176 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4182 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4188 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4194 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4200 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4206 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4212 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4218 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4224 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4230 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4236 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4242 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4248 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4254 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4260 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4266 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 4272 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4281 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4290 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4299 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4308 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4317 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 352 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4326 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 358 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4334 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 361 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4342 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4350 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 369 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4358 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 4364 "y_tab.c"
break;
case 45:
  if (!yytrial)
#line 375 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 4370 "y_tab.c"
break;
case 46:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4375 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4382 "y_tab.c"
break;
case 47:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4387 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4394 "y_tab.c"
break;
case 48:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4399 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4406 "y_tab.c"
break;
case 49:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4411 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4418 "y_tab.c"
break;
case 50:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4423 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4430 "y_tab.c"
break;
case 51:
#line 398 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4435 "y_tab.c"
  if (!yytrial)
#line 398 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4442 "y_tab.c"
break;
case 52:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4447 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4451 "y_tab.c"
break;
case 53:
#line 407 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4456 "y_tab.c"
  if (!yytrial)
#line 407 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4460 "y_tab.c"
break;
case 54:
#line 408 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4465 "y_tab.c"
  if (!yytrial)
#line 408 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4469 "y_tab.c"
break;
case 55:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4474 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4478 "y_tab.c"
break;
case 56:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4483 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4487 "y_tab.c"
break;
case 57:
#line 416 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4492 "y_tab.c"
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4496 "y_tab.c"
break;
case 58:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4501 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4505 "y_tab.c"
break;
case 59:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4510 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4514 "y_tab.c"
break;
case 60:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4519 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4523 "y_tab.c"
break;
case 61:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4528 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4532 "y_tab.c"
break;
case 62:
#line 425 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4537 "y_tab.c"
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4541 "y_tab.c"
break;
case 63:
#line 426 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4546 "y_tab.c"
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4550 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4556 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4562 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4568 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4574 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4580 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4586 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4592 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4598 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4604 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4610 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4616 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4622 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4628 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4634 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4640 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 448 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 4646 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4652 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4661 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4670 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4678 "y_tab.c"
break;
case 84:
#line 465 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4683 "y_tab.c"
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4689 "y_tab.c"
break;
case 85:
#line 468 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4694 "y_tab.c"
  if (!yytrial)
#line 468 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4700 "y_tab.c"
break;
case 86:
#line 471 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4705 "y_tab.c"
  if (!yytrial)
#line 471 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4711 "y_tab.c"
break;
case 87:
#line 474 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4716 "y_tab.c"
  if (!yytrial)
#line 474 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4722 "y_tab.c"
break;
case 88:
#line 478 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4727 "y_tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4733 "y_tab.c"
break;
case 89:
#line 481 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4738 "y_tab.c"
  if (!yytrial)
#line 481 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4744 "y_tab.c"
break;
case 90:
#line 484 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4749 "y_tab.c"
  if (!yytrial)
#line 484 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4755 "y_tab.c"
break;
case 91:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4760 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4764 "y_tab.c"
break;
case 92:
#line 490 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4769 "y_tab.c"
  if (!yytrial)
#line 490 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4773 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 493 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4779 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4788 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 502 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4794 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4800 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4806 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4812 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 506 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4818 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 507 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4827 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4833 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 516 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4844 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 522 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4854 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 527 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4865 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 533 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4875 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 538 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4886 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 544 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4896 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4904 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 556 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4912 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 559 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4920 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4928 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 568 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4937 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4945 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4951 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4957 "y_tab.c"
break;
case 116:
#line 581 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4962 "y_tab.c"
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4966 "y_tab.c"
break;
case 117:
#line 584 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4971 "y_tab.c"
  if (!yytrial)
#line 584 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 4979 "y_tab.c"
break;
case 118:
#line 591 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4984 "y_tab.c"
  if (!yytrial)
#line 591 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4991 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5001 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 601 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5011 "y_tab.c"
break;
case 121:
#line 608 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5016 "y_tab.c"
  if (!yytrial)
#line 608 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5020 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 611 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5030 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 616 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5040 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 623 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5046 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5052 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5058 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5064 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5070 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 628 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5076 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 629 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5082 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5088 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5094 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5100 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5106 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5112 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5118 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5124 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5130 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5136 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5142 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5148 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5154 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5160 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5166 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5172 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5178 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5184 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5190 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5196 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5202 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5208 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5214 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5220 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5226 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5232 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5238 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5244 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5250 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5256 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5262 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5268 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5274 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5280 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5286 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5295 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5304 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5310 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5316 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5322 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5328 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5334 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5340 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 5346 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 5352 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 5358 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 5364 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 5370 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5376 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 5382 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5388 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5394 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5400 "y_tab.c"
break;
case 183:
#line 698 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5405 "y_tab.c"
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5409 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5415 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5421 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5427 "y_tab.c"
break;
case 187:
#line 707 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5432 "y_tab.c"
  if (!yytrial)
#line 707 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5436 "y_tab.c"
break;
case 188:
#line 713 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5441 "y_tab.c"
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5449 "y_tab.c"
break;
case 189:
#line 719 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5454 "y_tab.c"
break;
case 190:
#line 723 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5459 "y_tab.c"
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5466 "y_tab.c"
break;
case 191:
#line 728 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5471 "y_tab.c"
break;
case 192:
#line 732 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5476 "y_tab.c"
  if (!yytrial)
#line 733 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5483 "y_tab.c"
break;
case 193:
#line 740 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5495 "y_tab.c"
  if (!yytrial)
#line 748 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5501 "y_tab.c"
break;
case 194:
#line 751 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5506 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 752 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5514 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5520 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 758 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5526 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 759 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5532 "y_tab.c"
break;
case 199:
#line 762 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5537 "y_tab.c"
  if (!yytrial)
#line 762 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5541 "y_tab.c"
break;
case 200:
#line 765 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5546 "y_tab.c"
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5553 "y_tab.c"
break;
case 201:
#line 770 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5558 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 772 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5567 "y_tab.c"
break;
case 203:
#line 776 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5572 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 778 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5581 "y_tab.c"
break;
case 205:
#line 785 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5593 "y_tab.c"
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5601 "y_tab.c"
break;
case 206:
#line 799 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5613 "y_tab.c"
  if (!yytrial)
#line 807 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5621 "y_tab.c"
break;
case 207:
#line 813 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5633 "y_tab.c"
  if (!yytrial)
#line 821 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5641 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 828 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5651 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 833 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5660 "y_tab.c"
break;
case 210:
#line 839 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5665 "y_tab.c"
  if (!yytrial)
#line 839 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5669 "y_tab.c"
break;
case 211:
#line 842 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5674 "y_tab.c"
  if (!yytrial)
#line 842 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5678 "y_tab.c"
break;
case 212:
#line 843 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5683 "y_tab.c"
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5687 "y_tab.c"
break;
case 213:
#line 844 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5692 "y_tab.c"
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5696 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5702 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5708 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 851 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5714 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 852 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5720 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 855 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5726 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 856 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5732 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5738 "y_tab.c"
break;
case 221:
#line 860 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5743 "y_tab.c"
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5747 "y_tab.c"
break;
case 222:
#line 862 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5757 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5763 "y_tab.c"
break;
case 223:
#line 874 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5768 "y_tab.c"
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5772 "y_tab.c"
break;
case 224:
#line 876 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5777 "y_tab.c"
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5790 "y_tab.c"
break;
case 225:
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5796 "y_tab.c"
break;
case 226:
#line 890 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5801 "y_tab.c"
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5805 "y_tab.c"
break;
case 227:
#line 891 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5810 "y_tab.c"
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5814 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5820 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5826 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 896 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5832 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 897 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5838 "y_tab.c"
break;
case 232:
#line 900 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5843 "y_tab.c"
  if (!yytrial)
#line 900 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5847 "y_tab.c"
break;
case 233:
#line 901 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5852 "y_tab.c"
  if (!yytrial)
#line 901 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5856 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5862 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5868 "y_tab.c"
break;
case 236:
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5874 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 907 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5880 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5886 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 911 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5892 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 912 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5898 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5904 "y_tab.c"
break;
case 242:
#line 916 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5909 "y_tab.c"
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 5913 "y_tab.c"
break;
case 243:
#line 917 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5918 "y_tab.c"
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5922 "y_tab.c"
break;
case 244:
#line 918 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5927 "y_tab.c"
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 5931 "y_tab.c"
break;
case 245:
#line 921 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5936 "y_tab.c"
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 5940 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 5946 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 5952 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5958 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5964 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5970 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5976 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 932 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 5982 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 5988 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 5994 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6000 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6006 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 937 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6012 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6018 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 939 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6024 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6030 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6036 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 942 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6042 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 943 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6048 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6054 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6060 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6066 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 947 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6072 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 948 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6078 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 949 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6084 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 950 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6090 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6096 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6102 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6108 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 954 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6114 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 955 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6120 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6126 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 957 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6132 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6138 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6144 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 960 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6150 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 961 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6156 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 962 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6162 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6168 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 964 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6174 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 965 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6180 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6186 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6192 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 968 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6198 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 969 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6204 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6210 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 972 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6216 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6222 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6228 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6234 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6240 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6246 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6252 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6258 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6264 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6270 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6276 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6282 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6288 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6294 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 986 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6300 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6306 "y_tab.c"
break;
case 307:
#line 990 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6311 "y_tab.c"
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6315 "y_tab.c"
break;
#line 6317 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
