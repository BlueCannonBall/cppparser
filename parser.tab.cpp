#line 8 "/home/dassat/github/cppparser/third_party/btyacc_tp/btyacc/btyaccpa.ske"

/*
** @(#)btyaccpar, based on byacc 1.8 (Berkeley)
*/
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 27 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"
#include "utils.h"

#include <iostream>
#include <stack>
#include <map>

/*////////////////////////////////////////////////////////////////////////*/
  
std::map<std::string, int> gRenamedKeywords = {{"ADESK_SEALED_VIRTUAL", tknVirtual},
                                               {"ADESK_SEALED", tknFinal},
                                               {"ADESK_OVERRIDE", tknOverride}};

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   { \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID; }
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

/** {End of Globals} */

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

/* Yacc generated code causes warnings that need suppression.*/
/* This pragma should be at the end.*/
#if defined(__clang__) || defined(__GNUC__)
# pragma GCC diagnostic ignored "-Wwrite-strings"
#endif

#line 86 "/home/dassat/github/cppparser/parser.tab.c"
static int yylhs[] = {                                        -1,
    0,   39,   39,   38,   38,   38,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   11,   11,   11,   11,   55,   56,   56,
   56,   43,   43,   51,   51,   52,   53,   54,   54,   50,
   50,   84,   84,   84,   84,   84,   84,   85,   86,   86,
   87,   87,   87,   87,   87,   87,   88,   89,   47,   10,
   10,   10,   10,    3,    3,    3,    3,    3,    3,    4,
    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
    4,    4,    4,    4,    5,    7,    7,   18,   18,   18,
   18,   19,   19,   19,   19,   16,   16,   16,   16,   16,
   16,   17,   17,   17,   32,   34,   33,   31,   37,   37,
   37,   37,   37,   36,   35,   29,   24,   24,   24,   24,
   28,   28,   23,   23,   23,   22,   22,   22,   22,   21,
   21,   21,   21,    6,    6,    6,    6,   14,   14,   15,
   15,   15,   15,   15,   15,   15,   15,   74,   74,   74,
   73,   73,   73,   68,   68,   68,   68,   68,   68,   69,
   69,   60,   61,   13,   57,   57,   57,   57,   57,   57,
   58,   59,   59,   59,   59,   59,   59,   59,   59,   59,
    9,    9,    9,    9,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   30,   30,   30,
   25,   25,   25,   25,   25,   25,   25,   25,   26,   26,
   26,   26,   26,   26,   27,   27,   77,   77,   76,   76,
   76,   76,   76,   76,   76,   75,   75,   75,   75,   75,
   75,   75,   75,   75,   75,   83,   83,   82,   81,   81,
   81,   63,   64,   91,   64,   92,   64,   93,   64,   64,
   64,   62,   62,   62,   62,   62,   62,   62,   70,   70,
   70,   71,   71,   66,   67,   94,   67,   95,   67,   96,
   67,   67,   67,   65,   65,   65,   65,   65,   65,   65,
   90,   90,   97,   97,   41,   41,   98,   40,   99,   40,
   40,   78,   78,   78,   79,   79,   79,   79,   20,   20,
   20,   20,   20,   72,   72,   72,   72,   44,   45,   45,
   45,   46,   46,   46,   46,   46,   46,   46,   46,    1,
    1,    2,    2,    2,    2,   80,   80,   80,   42,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   49,
};
static int yylen[] = {                                         2,
    1,    0,    1,    1,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    4,    2,    7,    0,    5,
    4,    3,    2,    5,    3,    5,    6,    9,    9,    0,
    1,    4,    3,    4,    4,    4,    4,    3,    3,    3,
    3,    3,    3,    2,    3,    2,    2,    3,    1,    1,
    1,    2,    2,    1,    3,    2,    1,    1,    2,    1,
    1,    1,    2,    1,    2,    2,    2,    2,    2,    2,
    1,    2,    2,    2,    4,    0,    1,    1,    3,    1,
    1,    0,    2,    3,    2,    6,    9,    7,   10,    8,
    9,    5,    6,    4,    2,    2,    2,    2,    5,    5,
    5,    2,    3,    5,    4,    2,    2,    2,    2,    2,
    6,    4,    3,    4,    4,    2,    4,    3,    3,    2,
    1,    2,    2,    1,    4,    4,    5,    0,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    1,    5,    7,    2,    2,    2,    2,    2,
    2,    2,    2,    3,   12,   11,   10,    9,    2,    2,
    2,    6,    5,    2,    2,    2,    3,    3,    2,    2,
    1,    1,    2,    3,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    2,    4,    2,    4,    0,    1,    3,
    1,    3,    1,    1,    1,    2,    4,    3,    0,    1,
    2,    1,    2,    3,    1,    3,    0,    1,    2,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    2,
    2,    2,    2,    2,    3,    0,    1,    4,    0,    1,
    3,    2,    3,    0,   10,    0,   12,    0,   13,    2,
    2,    4,    2,    2,    3,    3,    2,    2,    0,    2,
    3,    4,    3,    2,    2,    0,    8,    0,   10,    0,
   11,    2,    2,    5,    2,    2,    3,    3,    3,    2,
    0,    1,    0,    1,    2,    1,    0,    9,    0,    7,
    2,    0,    3,    4,    0,    1,    1,    1,    3,    4,
    2,    3,    2,    1,    1,    1,    1,    4,    0,    1,
    3,    2,    4,    2,    4,    2,    4,    1,    3,    0,
    1,    1,    2,    4,    1,    2,    2,    2,    2,    1,
    1,    1,    1,    3,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    5,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
    3,    4,    4,    7,    7,    7,    7,    3,    2,    5,
    6,    2,    4,    2,    1,    2,    1,    4,    4,    2,
};
static int yydefred[] = {                                      0,
    0,  380,  381,  382,   44,  372,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   80,   81,    0,    0,
    0,  101,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,    0,
  171,  173,   92,   88,  168,  169,    0,  172,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   87,  201,  383,    0,    0,    4,   30,    9,   10,   14,
    0,    0,    0,    7,    0,    8,    0,   11,    0,   12,
   40,   41,   39,    0,    0,    0,   13,   29,   37,    0,
    0,    0,   16,    0,   18,   19,   20,   38,    0,   21,
    0,   22,   23,    0,   24,   25,    0,   26,   27,    0,
   28,    0,    0,    0,    0,    0,   31,   32,   33,   34,
   35,   36,    0,    0,    0,    0,    0,  357,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   84,    0,    0,    0,    0,   93,    0,    0,
    0,    0,    0,    0,  103,    0,    0,    0,    0,    0,
  102,    0,    0,    0,    0,  203,   95,    0,  379,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  218,
  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
  240,  241,  216,  217,  205,  206,  207,  208,  209,  210,
  211,  212,  213,  214,  215,  239,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  354,  355,  356,
    0,  353,    0,    0,    0,   77,    0,    0,    0,    0,
    0,    0,   74,    0,   76,    0,    0,    0,    0,    0,
    0,  385,    0,    0,    0,    0,  170,    0,    0,    0,
  139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  163,  161,  162,  160,    0,    0,   82,   83,    0,
   47,    0,    0,    0,    0,  146,    0,    0,    0,    0,
  137,    0,    0,  138,    0,  136,  125,  126,    5,    0,
    0,    0,    6,  335,    0,    0,    0,    0,  351,    0,
  132,    0,    0,    0,  301,    0,  322,    0,    0,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  392,
  394,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  450,    0,    0,
    0,    0,  191,  276,  277,  278,  279,    0,    0,    0,
  182,  183,    0,  199,    0,  292,    0,    0,  307,    0,
  314,  315,  330,  180,  177,  181,    0,    0,    0,    0,
  153,    0,    0,  140,    0,    0,    0,    0,  300,    0,
  323,    0,  273,  269,  272,  271,  270,  274,  275,  294,
    0,  262,    0,    0,    0,    0,    0,    0,    0,  251,
  249,    0,    0,    0,    0,    0,    0,    0,    0,  341,
  184,    0,    0,    0,    0,    0,   89,  133,    0,    0,
    0,    0,  373,  112,    0,    0,    0,    0,    0,  360,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  242,
  243,    0,    0,  150,    0,    0,    0,  438,    0,    0,
  352,    0,   78,    0,   68,   69,   70,   71,   72,   73,
   75,    0,    0,    0,    0,    0,    0,    0,    0,   52,
  384,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  204,    0,    0,  167,  165,  166,  164,   45,
    0,    0,    0,    0,    0,    0,    0,    0,  148,    0,
    0,    0,    0,  376,  377,  378,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  431,    0,    0,    0,    0,   55,  280,    0,  281,  282,
  283,  284,    0,  197,  198,  305,  306,    0,  310,    0,
  293,  327,  328,  329,  346,  347,  348,    0,    0,  349,
    0,  334,    0,    0,    0,    0,  316,    0,    0,  263,
    0,    0,  374,    0,    0,    0,  302,  256,    0,  107,
    0,    0,    0,    0,    0,    0,  135,    0,  124,    0,
    0,  112,    0,    0,    0,    0,    0,    0,    0,  358,
    0,    0,    0,    0,    0,    0,  448,  449,  245,  247,
  332,    0,    0,    0,    0,    0,    0,   62,   65,   66,
   64,   67,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  105,    0,   46,    0,    0,    0,    0,    0,    0,
    0,  144,  147,  145,  142,  432,  430,    0,  285,    0,
    0,    0,  311,    0,  350,    0,    0,  339,    0,    0,
    0,    0,    0,    0,    0,  258,    0,  250,  112,  129,
  131,  130,  122,    0,  112,    0,    0,    0,    0,    0,
    0,    0,  113,  110,  111,  134,    0,    0,    0,    0,
  361,    0,    0,    0,    0,    0,  174,  324,    0,   54,
    0,    0,   56,    0,   49,  296,    0,    0,    0,  156,
    0,  155,    0,    0,    0,  193,    0,    0,  288,  313,
    0,    0,    0,    0,    0,    0,    0,    0,  298,    0,
  257,    0,  123,    0,    0,    0,  112,    0,  114,  116,
  365,  363,    0,    0,    0,    0,    0,    0,    0,    0,
   57,    0,    0,  318,    0,  141,  157,    0,    0,  192,
    0,  312,  337,    0,    0,    0,    0,    0,    0,  320,
    0,    0,  112,  118,    0,    0,  434,  435,  436,  437,
    0,    0,    0,    0,   48,    0,    0,  175,    0,    0,
    0,  340,    0,    0,  287,    0,  317,    0,    0,    0,
  120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  121,    0,  117,
   59,   58,    0,    0,    0,    0,  188,    0,  338,    0,
    0,  295,    0,    0,  119,    0,    0,  319,    0,  187,
    0,    0,  321,    0,  186,    0,    0,  297,  185,  299,
};
static int yydgoto[] = {                                      57,
  524,   58,  177,  221,   61,  296,  154,   62,   63,   64,
   65,   66,   67,  286,  287,   68,   69,  723,  634,   70,
   71,   72,   73,   74,  431,  425,  426,   75,   76,  432,
   77,   78,   79,   80,   81,   82,   83,   84,  263,  135,
   87,   88,   89,  136,  459,  460,  170,   92,   93,  496,
   94,   95,   96,   97,   98,  792,   99,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  109,  110,  111,  388,
  589,  138,  113,  114,  378,  139,  116,  400,  598,  313,
  691,  389,  836,  117,  118,  119,  120,  121,  122,  652,
  606,  793,  809,  701,  827,  839,  603,  831,  764,
};
static int yysindex[] = {                                   1745,
    0,    0,    0,    0,    0,    0,10553,  630, 3907,  -76,
 -247,    0,    0,    0,   11,  798,    0,    0, 1426, 3907,
  -57,    0,   30,   57,   81,  119, 2280,  169, 3355, 2951,
 2951, 2951, 2951, 2951, 3020, 2951, 1236,    0, 3090, 2563,
    0,    0,    0,    0,    0,    0, 3594,    0, 3593,  194,
  213,  215, 1745,  226, 2280, 1745,    0, 8792,   90,   -5,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  103, 2016,  319,    0,   38,    0,  342,    0,  351,    0,
    0,    0,    0, 1745, 1182,  -41,    0,    0,    0, 7732,
    0, 8392,    0,    0,    0,    0,    0,    0,  501,    0,
 3583,    0,    0,    9,    0,    0, 1336,    0,    0,  884,
    0,  -11,10653, 7383,10136, 2233,    0,    0,    0,    0,
    0,    0,  -70, 4242, 5106,    0,  294,    0,  233,10584,
    3,  118,   66,  376,   -5, 2275, 1322,  -11,10653,  406,
  233,  954,    0,  233,  839,  233,  233,    0,  426,  232,
  239,  237,   34,  378,    0,   34,   34,   34,  454,10692,
    0,   34, 7899,  477,    0,    0,    0, 1745,    0,  -57,
10653,10653,10653,10653, 2951, 1344, -110,10302, 1236,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  500,  450,    0,    0,
   -5,  518,  -43,  -43,  -43,  -43,  -43,    0,  -43,  -43,
   90,  539, 8419, 1236,  -43,  493,  -43,    0,    0,    0,
  974,    0, 1758,  232,  371,    0,  394,  416, -163,  385,
  421,  432,    0,  427,    0, 2951, 1236, 2951,  357, 2951,
10302,    0,  -72, 8352,    0,    0,    0,10653,  446,    3,
    0,10483,    0,    0,    0,    0,    0,10175, 1221,    0,
 4242,    0,    0,    0,    0,    0,  160,    0,    0, 2711,
    0, 1312,   61, 1063,  217,    0,  668, 2951, 2951, 2721,
    0, 2951, 2951,    0,   -5,    0,    0,    0,    0,  651,
  658,  666,    0,    0,  160,  339, 8792,    3,    0, 2396,
    0,    0,    0,    0,    0,  600,    0,    0,10136,    0,
 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951,
 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951,    0,
    0, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951, 2951,
 2951, 2951, 2951, 2951, 2951, 2791, 2951,    0, 2951, 2951,
 1745,  470,    0,    0,    0,    0,    0,    0,  701, -198,
    0,    0,    0,    0, -228,    0,  233,  791,    0, -185,
    0,    0,    0,    0,    0,    0, 1378,  233, 1079,  248,
    0, 8562,  154,    0,  922,10136,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  509,    0, 4242,  697,  728,  179,    0,   62,   48,    0,
    0,  155,10415, 1216,  529,  558,  797,  233,  372,    0,
    0,  826,  233,  828,10623, 1473,    0,    0,  233, 1506,
  581,   31,    0,    0,  233, -247,  994,  -18,  469,    0,
 2951,  796,  810,  854,  860, 8553, 1312,  889, 8701,    0,
    0,  859,  875,    0,  609,  609, 2951,    0, 8835, 2951,
    0,  233,    0,  680,    0,    0,    0,    0,    0,    0,
    0, 8862,   48,  925,10212,  932, 8900,  971, 8985,    0,
    0,  981, 1497,10514,    0,10483,    0,    0,10175,    0,
 3355,    0,    0,  568, 1003,    0,    0,    0,    0,    0,
 9182,  -17,  800,  -27, 1049,10415,10247, 9217,    0, 9272,
 9307, 4076,  873,    0,    0,    0, 1806,10302,10302,10302,
10302,10302,10302,10302,10302, 1036, 1036,10302,10302, 3187,
 3187, 1912, 1912, 1301, 4629, 4003,    0,  -43, 1912, 1912,
  482,  482,   73,   73,   73, 7839, 8472, 7456,10302,10302,
    0, 9342, 9377,    0, 9414,    0,    0,  880,    0,    0,
    0,    0,  233,    0,    0,    0,    0,    5,    0,  233,
    0,    0,    0,    0,    0,    0,    0,  233,  675,    0,
 1378,    0, 1026,  564,  232, 1114,    0,    0,  233,    0,
  905, 4242,    0, 2951, 2832,10415,    0,    0, 1119,    0,
 1069,  232,  -29,  157,   -5, 1329,    0, 1707,    0,  233,
   45,    0, 4141,   68, 1834,    0,    0, 1153, 2951,    0,
10692, 9502, 1176, 1184, 1195, 1207,    0,    0,    0,    0,
    0, 1217, 1223,  -43,  995,  -43, 1847,    0,    0,    0,
    0,    0, 1745, 2951, 2951, 1745, 2951, 1164,10653,  -62,
 1264,    0,   -5,    0, 1254, 1055, 1265,  558,  393,10415,
  392,    0,    0,    0,    0,    0,    0, 2951,    0,  372,
  556, 2902,    0,  372,    0,  248,  233,    0,  257,10415,
 1276,  372,  -53,  728,10247,    0, 9697,    0,    0,    0,
    0,    0,    0, 1876,    0, 4141,   94, 1173, 1260,    0,
 2062, 1277,    0,    0,    0,    0,10653,10653, 2951,10247,
    0, 2951, 2951, 2951, 2951, 2951,    0,    0,  -43,    0,
 1297, 1298,    0, 9732,    0,    0, 1117,  609, 1128,    0,
 1339,    0, 1350,  331,  578,    0,10302,  233,    0,    0,
 9787, 1279,  372, 1745,  558,  420,  605, 1362,    0, 1167,
    0,  202,    0,  370, 1318, 1386,    0, 2951,    0,    0,
    0,    0,10247,  -43, 9822, 9857, 9892, 9927, 2951, 2951,
    0,  223, 1437,    0, 1431,    0,    0, 1441,  558,    0,
  372,    0,    0,  631, 1446,  363, 1196,  -57, 1480,    0,
 1290, 1502,    0,    0,  464,10247,    0,    0,    0,    0,
 1521, 1534, 2951, 1515,    0,10415, 1538,    0,10415, 1556,
 1745,    0, 1550,  558,    0, 1558,    0,10415, 1555, 1563,
    0,  696, 1565, 1745, 1745,10017, 1745,  723, 1576,  734,
 1595,  659,10415, 1600,  791,  848, 1611,    0, 1612,    0,
    0,    0, 1745, 1182, 1196,  -57,    0,10415,    0,  883,
 1633,    0, 1196,  -57,    0, 1182, 1558,    0,  951,    0,
10415, 1558,    0,  791,    0, 1159,  791,    0,    0,    0,
};
static int yyrindex[] = {                                     26,
 7421,    0,    0,    0,    0,    0, 3199,    0, 2548, 1559,
 2041, 2376, 3170, 1456,    0,    0,    0,    0,    0, 2850,
10393,    0,    0,    0,    0,    0, 5686,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1377,    0, 5787, 1892,    0, 1039, 7925, 1046,
    0,    0,    0, 1554, 1918,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   35, 1678, 2453,    0,    0,    0, 2977,
 2012,    0,    0, 1651,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  935,    0,    0,    0,    0,    0,    0,
    0, 1053,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,  765, 4923, 1562,    0,    0, 3199,
 1412,    0, 1639, 1640, 1010,    0,    0,  187, 3242, 1883,
    0,    0,    0,    0,    0,    0,    0,    0,  269,    0,
    0,   65, 5353,    0,    0, 8227, 8234, 8241,    0,  692,
    0, 8268,    0,    0, 3425,    0,    0, 2222,    0,    0,
    0,    0,    0,    0,    0,    0, 3778,  887,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3651, 3851,
 1424,    0, 4239, 4307, 4431, 4533, 4591, 8325, 4733, 4869,
 8037,    0,    0,    0, 4959,    0, 5017,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1642,    0,    0,    0,
  945,    0,    0,    0, 2193,    0,    0,    0,    0,  862,
    0, 3199,  524,  475, 2434,  667, 1716,    0,    0,10331,
   56,    0,    0,    0,    0,  150, 1477,    0,    0,    0,
    0,    0, -197,    0, 2045,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1451,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2605,    0, 3199,  862,    0,    0,
    0, 2354, 1928,  319,    0,    0,    0, 2022,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1377,    0,    0,    0,    0,    0,    0,  818,    0,    0,
    0,    0,  144,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  396,    0,    0, 1586,
    0,    0,    0,    0,    0, 3199, 2035, 1652,    0, 1655,
    0, 2163,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   56,  719,  769,    0, 7510, 1181, 1218,    0,
    0,    0, 3199, 1256,    0, 1559,    0,    0, 3794,    0,
    0,    2,    0,    0, 3199,    0,    0,    0,    0,   83,
    0,    0,    0,    0,    0, 2041,    0,  896,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1681, 1681,    0,    0,    0,    0,
    0,    0,    0, 2102,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  957,    0,    0,    0,    0,    0,
    0,    0,    0, 3199, 3314,    0, 3488, 2198,    0, 7809,
    0, 3493,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  765, 1058,    0,    0,    0,
    0,   91,    0,    0,    0,    0,    0, 1018, 1522, 3161,
 3232, 4312, 5027, 5308, 5696, 6460, 6564, 5887, 6084, 7142,
 7230, 6757, 6845, 6652, 3720, 7617, 3945, 5182, 6949, 7037,
 6267, 6372, 5882, 5984, 6075, 7514, 7329, 3301, 6272, 6276,
    0,    0,    0, 4145,    0,    0,    0,    0,    0,    0,
    0,    0, 1357,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1053,    0,
  396,    0,    0,    0,  141,    0,    0, 1146,    0,    0,
    0,   56,    0,    0,    0, 3199,    0,    0,    0,    0,
    0,  141, 1053,    0, 1684,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  921,  921, 1229,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5295, 6176, 5404,    0,    0,    0,    0,
    0,    0, 1377, 1642, 1642, 1377,    0,    0,    0,    0,
    0,    0, 1451,    0,    0,    0,    0, 1686,    0,  765,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1405,
    0,    0,    0, 1334,    0, 1586,    0,    0,    0,  765,
    0, 1123,    0, 1255, 1414,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  698,   37,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1685,
    0,    0,    0,    0,    0,    0,    0,    0, 5495,    0,
    0,    0,    0,    0,    0,    0,    0, 1681,    0,    0,
    0,    0,    0,    0,    0,    0, 6468,    0,    0,    0,
    0,    0, 1352, 2222, 1686,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1691, 5596,    0,    0,    0,    0, 1700, 1700,
    0,    0,    0,    0,    0,    0,    0,    0, 1686,    0,
 1500,    0,    0,    0,    0,    0,  517,    0,    0,    0,
    0,    0,    0,    0,    0,  751,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  765,    0,    0,  765,    0,
 2222,    0,    0, 1686,    0,  935,    0,  765,    0,    0,
    0,    0,    0, 1377, 1377,    0, 3173,    0,    0,    0,
    0,    0,  765,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3173,  344,  517,    0,    0,  765,    0,    0,
    0,    0,  517,    0,    0,  395,  935,    0,    0,    0,
  765,  935,    0,    0,    0,    0,    0,    0,    0,    0,
};
static int yycindex[] = {                                    931,
  942,    0,    0,    0,    0,    0,    0,    0,  525, 1485,
  579,  718, 1037, 1486,    0,    0,    0,    0,    0, 1187,
    0,    0,    0,    0,    0,    0,  720,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1340,    0,  878,  693,    0,  340,  989,    0,
    0,    0,    0,  334,  170,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1432,    0,  672,    0,    0,    0, 1416,
  -49,    0,    0, 1440,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1368,    0,    0, 3503,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  165, 1507,    0,    0,    0,
 1508,    0,    0,    0,    0,    0,    0, 1529,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  317, 1536,
    0,    0, 1513,    0,    0, 1527, 1552, 1553,    0,    0,
    0, 1561,    0,    0, 1512,    0,    0, 2164,    0,    0,
    0,    0,    0,    0,    0,    0, 1786,   20,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1759, 1763,
    0,    0,  458,  504,  821,  858, 1035, 1817, 1132, 1269,
 1450,    0,    0,    0, 1360,    0, 1436,    0,    0,    0,
    0,    0,    0, 1373,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1479,    0,    0,    0,  920, 4832,    0,    0,    0, 1582,
    0,    0, 1629, 1250,  -55,  -37, 1539, 3730,    0, 6661,
    0,    0,    0,    0,    0, 1634,    0,    0,    0,    0,
    0,    0,  149,    0, 1846,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1614,    0,    0,
    0,  290, 1423, 1659,    0,    0,    0, 1584, 3897,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2200,    0,    0,    0,    0,    0,    0, 1784,    0,    0,
    0,    0, 1794,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1467, 3268,    0, 1749,
    0, 1643,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  230,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1391,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1511,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  102, 3997,  104,  128, 4009, 1621,
    0, 1679,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1532,    0,    0,    0,    0,    0, 1537, 1549, 1551,
 1632, 1796, 1798, 1996, 2033, 2069, 2094, 2160, 2169, 2420,
 2442, 2473, 2489, 2491, 2502, 2615, 2647, 2772, 2785, 2857,
 2859, 2861, 2865, 2870, 2883, 2927, 2979, 2984, 3003, 3006,
    0,    0,    0, 3053,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1711,    0,    0, 1927,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1727,    0,    0, 1929,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  999, 1070,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3074, 1078, 3144,    0,    0,    0,    0,
    0,    0, 2272,    0,    0, 2335,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -90,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3160,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3196,    0,    0,    0,
    0,    0,    0, 2483,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3229,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2515,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2534, 2634,    0, 2773,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2824,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
static int yygindex[] = {                                      0,
   32,  171,    1,  324,    0,    0, -418,    8,  -66,    0,
    0,  -34,    0, -219,  -86,    0,    0, 1266,  455,   -6,
  511,   27,  -24,  -36, -364, -391, 1713, 1985,    0, -468,
    0,    0,    0,    0,    0,    0, 1935,    0,   16,  635,
    0,    0,  -14,  479,    0, 1396,   52, 1073,    0,  399,
    0,    0,    0,    0,    0,    0,   97,    0,  153,    0,
    0,  647,    0,  -39,  -54,    0,  -35,  727,    0, -249,
 1457,  303,    0,    0,  -73,  382,    0, -489, 1445,    0,
    0,  -61, -736,    0,    0,    0, 1695,    0,    0, -453,
    0,    0,    0,    0,    0,    0, 1353,    0,    0,
};
#define YYTABLESIZE 11023
static int yytable[] = {                                     315,
   59,  474,  369,  276,  297,  421,  169,  131,  142,  131,
  153,  156,  157,  158,  678,   85,  162,  621,  259,  165,
  131,  271,  653,  427,  676,    2,  166,  383,  397,  131,
  281,  608,  284,  133,    3,  326,  283,  231,  155,  384,
  242,  151,  639,  375,  692,  393,  397,  241,  315,  309,
  325,   91,  500,   59,  327,  421,   59,  681,  270,  208,
  410,  577,  281,  747,  281,  168,  387,  386,  618,  385,
  160,  295,  770,  154,  592,  409,  330,  404,  370,  411,
  115,  305,  214,  319,   59,  533,  382,  299,  633,  171,
  318,  586,  392,  281,  486,  396,  306,  259,  523,  259,
  430,  293,  716,  137,   91,  303,  371,   91,  298,  696,
  211,  720,  399,  131,  131,  318,  172,  259,  369,  487,
  587,  584,  614,  303,  131,  131,  370,  153,  877,  165,
  131,  149,  439,  696,  593,   91,  882,  720,  300,  131,
  173,  446,  293,  398,  153,  156,  157,  158,  149,  149,
  585,  429,  615,  632,  273,  330,  300,  293,  436,    3,
  131,  115,  487,  594,  550,  467, 1192,  715,   59,  443,
  302,  131,  131,  131,  131,  447,  433,  130,  174,  231,
  152,  451,  370, 1195, 1198,    6,  420,  371,  565,  150,
  439,  150,  722,  604,  746,  617,  622,  518,  616,  129,
  383,  517,  200,  769,  172,  310,  311,  312,  179,  127,
  274,  755,  384,  149,  393,  710,   17,   18,  776,   91,
  704,  434,  612,  508,  148,  151,  273,  525,  130,  143,
  342,  767,  494,  256,  231,  315,  319,  418,  638,  675,
  611,  294,  323, 1201,  399,  720,  438,   44,  129,  383,
    6,  708,  257,  297,  258,  424,  447,  231,  375,  753,
  317,  384,  276,  375,  393,  260,  200,  407,  131,  172,
  574,  282,  270,  352,  410,  482,  281,  375,  270,  512,
  438,  131,  152,  493,  402,  317,  513,   11,  280,  409,
  447,  601,  165,  411,  795,  130,   44,  152,  765,  166,
  130,  379,  112,    2,    2,    2,   84,  282,  152,  342,
   84,  392,    3,    3,    3,  285,  142,  270,  143,  447,
  152,  371,    6,   60,  719,  375,  811,  457,   84,  318,
   60,  454,  148,  383,  202,  205,  576,  129,  297,  375,
  371,   17,   18,  167,  375,  384,  805,  825,  393,  244,
  719,  326,  267,  267,  267,  112,  172,  848,  112,  126,
  850,  267,  267,  267,    6,  271,  325,   17,   18,  856,
  327,   59,  799,  591,  143,  280,   60,  304,  292,   60,
  830,  115,    3,    3,  870,   44,  112,  588,  371,  352,
  353,  107,  112,  129,  484,  392,  547,  163,  599,  879,
  307,  721,  131,  439,  834,  178,  318,   60,  430,  308,
  143,  150,  886,  720,  152,  854,  370,  200,  200,  305,
  562,   11,   91,  131,  323,  150,   44,  721,  439,  129,
  407,  281,  756,  131,  115,  616,  200,  115,  512,  278,
   11,   44,  504,  623,  150,  131,  393,  424,  317,  628,
   11,  602,  281,  749,  508,  635,  156,  162,  719,  429,
  342,  342,  370,  152,  370,  115,  445,  512,   51,  274,
  112,  329,  516,  150,  513,   17,   18,   44,   90,  281,
  519,  407,  657,  449,  433,   11,   11,  317,   11,  143,
  294,   60,  467,    6,  812,  452,  329,  229,  453,  317,
  454,  430,  447,  512,  270,   11,  270,  720,  129,  270,
  370,  131,  641,  143,  455,   11,  461,  132,  360,   50,
  235,   17,   18,  358,  679,  243,  131,  369,  359,  434,
  640,   90,  129,  194,   90,  721,  272,  512,  315,  222,
  470,  626,  471,  244,   84,  244,  447,  232,  232,  115,
   11,  447,  429,   11,   84,    6,   44,  475,  323,  373,
  286,  372,   90,   84,  189,  447,  250,  189,   90,  129,
  823,  824,  402,   11,  286,  294,  317,  433,   11,  477,
   44,   84,  189,  690,  447,  480,  855,  143,  843,   84,
  588,  430,   84,  406,  247,  140,  759,  194,  694,  758,
  320,  523,  451,  130,  424,  522,  129,  121,  124,  702,
  460,  612,  131,  447,  129,  130,  131,   44,  800,  143,
  109,  616,  434,  401,  403,  405,  719,  884,  740,  672,
  714,  743,  887,  131,   86,  428,  699,  483,  129,  286,
  437,  131,  429,   17,   18,  807,   90,  438,  616,  444,
  484,  488,  345,  506,   44,  430,  274,  447,  407,  509,
  390,  407,   44,   59,    3,    6,   59,  433,  754,  131,
  458,  345,  485,  112,  504,  430,  504,  489,  447,  317,
  131,  462,  463,  464,  465,  724,   44,   86,  490,  468,
   86,   51,   51,  491,   60,  806,  130,  763,  509,  766,
  131,  498,  502,  721,  275,  447,  429,  526,  534,  139,
  329,  132,  434,  136,   91,  535,  131,   91,   86,  345,
  719,  243,  168,  536,  322,  325,  429,  131,  131,  577,
  142,  433,  397,  695,  281,  359,  324,   17,   18,  720,
  583,  108,   50,   50,  232,  835,  424,  602,  194,  194,
  272,  433,  115,  359,  512,  832,  272,  609,  801,   85,
  260,  408,  260,  865,   59,  607,  616,  403,  724,  610,
  440,  724,  223,  226,  867,  152,  434,  616,  222,  804,
  260,   25,  320,  869,  277,  619,  130,  329,  405,  325,
  286,  286,  152,  837,  109,  272,  434,  721,  352,  353,
   28,  430,   86,  835,  430,  248,  512,  406,  248,  861,
  862,  835,  265,  430,  620,   91,  328,  106,  238,  241,
  859,  374,  108,  724,  375,  724,  131,  320,  430,  131,
  265,   59,  376,  377,  590,   37,  622,  631,  131,  320,
  872,  412,   88,  430,   59,   59,  852,   59,   31,   90,
  130,  878,  429,  131,   40,  429,  430,  643,  190,  883,
  259,  190,  864,   59,  429,  435,  724,  605,  131,  888,
  130,  644,  890,   17,   18,  109,  190,  433,  876,  429,
  433,  131,   91,  265,  406,  506,  140,  506,  873,  433,
  509,  616,  379,  724,  429,   91,   91,  274,   91,   90,
  141,   90,   43,   90,  433,  129,  322,  429,  310,  311,
  312,  262,  403,  168,   91,  645,  320,  100,  505,  433,
  280,  646,  434,  880,  507,  434,  616,  446,  132,  647,
  446,  651,  433,  132,  434,  424,  310,  311,  312,  368,
  325,  325,  394,  428,  446,  446,  662,  132,  277,  434,
  438,  649,  719,   44,  108,  624,  718,  368,   84,   22,
  447,  605,   84,  275,  434,  112,  132,  650,  112,   17,
   18,  108,  108,    0,   46,  408,   76,  434,  309,  446,
   84,   22,  272,  664,  272,  444,   60,  272,  444,   60,
  665,  885,  145,   49,  616,  132,  130,   61,  328,  130,
  103,   19,  444,  444,  412,   86,  168,  109,  130,  446,
  667,  446,  448,  281,  320,   61,  320,    3,    6,  320,
  476,  671,    9,  130,  109,  109,  114,   36,  114,  721,
  114,  108,  481,  281,   79,   82,  428,  444,  130,  775,
  322,   52, 1125,  277,  115,  267,  673,  115,  118,  151,
  151,  130,  324,  151,  143,  412,  677,  309,  407, 1129,
 1125,  407,  741,  742,   17,   18,  112,  444,  151,  444,
  151,  151,  360,  129,  289,  407,  407,  358,  356,  625,
  357,  369,  359,  161,  109,  158,  717,   60,  680,  267,
  267,  267,  267,  267,  267,  143,  342,  295,  143,  178,
  151,  143,  223,  224,  225,  226,  227,  229,  230,  233,
  407,  235,  237, 1131,  129, 1168,  143, 1171,   90, 1165,
  175,   44, 1162,   90,  155,  292,  428,  261,  264,  685,
 1135, 1131,  328,  112,   91,  253,  256,  600,  281,  689,
  407,   90,  407,  446,   90,  115,  112,  112,  698,  112,
  275,  458,  507,  700,   60,  507,   90,   17,   18,  613,
  446,  446,   44,  772,  264,  112,  264,   60,   60,  774,
   60,  307,  268,  271,   90,  342,   11,   84,  126,  671,
  703,   11,   90,    6,  264,   90,   60,  821,  822,  261,
  428,  709,   94,   97,  313,   11,   84,  292,   11,  889,
 1174,  444,  616,   11,  395,   11,   84,  261,  309,  309,
  428,    0,  115,  729,   11,  733,  163,   15,  444,  444,
  446,  254,  310,  734,  254,  115,  115,   11,  115,  438,
  277,  815,  412,   84,  735,  412,   11,  781,  782,  447,
   11,   84,   90,   11,  115,   44,  736,  229,  466,  438,
  637,  469,    2,    3,    4,    3,    6,  737,  253,  447,
    9,  253,   11,  738,  112,   11,  151,  842,   36,  129,
   19,  151,  366,   34,  407,   37,  372,   33,  444,  161,
   32,   23,   24,   25,   26,  151,  745,   27,   28,  163,
  366,  407,  407,   55,  750,  777,  255,   86,  266,  255,
   86,  114,  158,  748,  151,  752,  479,  158,  322,   90,
  403,  751,   58,   39,   40,  768,  266,   44,   44,  143,
  778,  158,   90,   90,  453,   90,  342,  342,  492,  495,
  497,  328,  499,  151, 1153,  780,  428,  360,  292,  428,
  158,   90,  358,  356,   55,  357,  369,  359,  428,  283,
  286,  407,  352,  353,  438,  789,  790,  163,  176,  325,
   61,  175,  521,  428,  447,  267,  267,  267,  267,  158,
  527,  528,  530,  794,  531,  532,   36,  343,  428,  797,
  441,   34,  372,   37,  796,   33,   44,  712,   32,  372,
  798,  428, 1156, 1159,  391,  344,  390,  289,   86,  340,
  289,  803,  808,  538,  539,  540,  541,  542,  543,  544,
  545,  546,  547,  548,  549,  550,  551,  552,  553,  554,
  555,  556,  346,  810,  557,  558,  559,  560,  561,  562,
  563,  564,  565,  566,  567,  568,  569,  570,  572,  573,
  813,  574,  575,   67,  814,  290,  301,  304,  290,   90,
  343,   90,   90,   90,  252,   90,  343,  252,  168,  310,
  311,  312,   70,  158,  158,   86,  176,  158,  262,  175,
   90,  828,   90,   90,  344,  355,  826,  510,   86,   86,
  829,   86,  158,  466,  158,  158,  833,  114,  379,  114,
  114,  114,  143,    2,    3,    4,  129,   86,  361,  357,
    9,  144,   90,   11,   12,   13,  128,   15,   16,  118,
   73,   19,   20,  357,  158,  511,  159,  159,  370,  838,
  159,   22,   23,   24,   25,   26,  358,  529,   27,   28,
  163,  627,  281,  642,   90,  159,  374,  159,  159,  375,
  291,  376,  400,  291,   44,  435,  840,  376,  377,  654,
   30,   31,  656,   79,   39,   40,   41,   42,   43,   44,
  841,  844,  408,  630,  629,  408,   48,  159,  143,  373,
  406,  604,  847,  409,  845,  601,  616,  849,  357,  408,
  408,  412,  415,  316,  319,   55,   79,  129,  631,  853,
  646,   79,  598,   79,  857,   79,  851,   79,   79,  622,
  143,    2,    3,    4,  339,  340,  163,  343,  343,   17,
   18,  637,   79,  652,  408,  387,  866,  352,  353,   19,
    0,  858,  607,  860,  160,  344,  344,  619,  379,  160,
   23,   24,   25,   26,  868,   44,   27,   28,  163,  634,
  871,  649,  374,  163,  408,  375,  408,  577,  163,  374,
   17,  874,  375,  376,  377,  595,  596,  597,   30,   31,
  376,  377,   39,   40,    3,    6,   40,   44,   90,    9,
  875,  661,  881,   90,  334,  337,   79,    1,   79,   79,
  158,  106,  143,   17,  370,  158,  705,  707,   17,  385,
   17,  166,   17,   55,  667,   17,  166,  128,  127,  158,
   60,  129,  480,  267,  267,  267,   90,  158,  333,   17,
  303,  730,    0,  326,   43,  463,  490,  357,  158,  487,
  163,  331,  664,  151,   90,  331,  106,  739,  369,  357,
  357,  357,   90,  159,  367,   90,  495,  495,  159,  744,
   60,   34,   64,  469,  164,    9,  472,  158,  438,   44,
  349,  352,  159,  143,  475,  478,    3,    6,  447,  526,
  757,    9,  114,  160,  761,  713,  281,  580,  583,  586,
  589,  159,  129,   17,  178,   17,   17,   36,  408,  357,
  157,  480,   34,  175,   37,  178,   33,  532,  184,   32,
  535,  669,  181,  364,  367,  408,  408,  199,  538,  541,
  159,  783,  187,   38,  784,  785,  786,  787,  788,  565,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   44,   79,   79,   79,   79,   79,   79,  190,  193,   79,
   79,   79,   79,   79,   79,  676,  196,  691,  178,   79,
   79,   79,   79,   79,  496,  118,   79,   79,   79,  217,
  816,  610,  613,  220,  511,  408,  298,  382,  682,  430,
  697,  495,  495,  625,  628,  640,  643,   56,   79,   79,
   35,  568,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,  441,  679,   79,  694,  445,
  436,   79,  726,  281,   79,  846,  592,   79,   79,   79,
   79,   79,   79,   79,  493,  695,  281,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   42,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,  480,  480,  773,  281,   17,   17,   17,   17,
   17,   84,   84,   17,   17,   17,  655,  658,  360,  388,
   42,  484,  391,  358,  356,   42,  357,  369,  359,   42,
  394,  397,   42,  571,  595,   17,   17,  178, 1120,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,  438,  178,   17,  779,  195, 1123,   17,  178,
  178,  134,  447,  514,   17,   17,   17,   17,   17,   17,
   17,    1,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   15,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,  556,  559,  321,  238,  239,  240,  128,   15,
   22,   23,   24,   25,   26,  706,  731,   27,   28,   29,
   42,  562,   42,   42,   15,  697,  693,    0,  762,   15,
  195,   15,    0,   15,    0,  299,   15,    0,  712,   30,
   31,    0,  510,   39,   40,   41,   42,   43,   44,    0,
   15,    0,  721,  303,  301,   48,  298,    0,   49,    0,
  179,  129,   50,    0,  354,    0,  709,   47,   51,   52,
   53,   54,    0,  196,   55,  727,    0,    0,  354,    0,
  669,   63,  154,  154,  499,  154,  300,  502,  736,  438,
  670,  673,  685,  688,  514,  505,  508,  517,    0,  447,
    0,    0,  438,  724,    0,  520,  523,    0,    0,   44,
    0,  742,  447,  751,   63,  154,   15,   15,  302,   63,
    0,   63,    0,   63,  179,    0,   63,    0,    0,    0,
    0,  438,    0,    0,    0,    0,  757,  196,   84,  739,
   63,  447,    0,  354,    0,    0,    0,  154,   84,    2,
    2,    2,    0,    0,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,  754,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,  766,
    0,  195,  195,   42,   42,   42,   42,   42,  781,    0,
   42,   42,   42,    0,    0,  339,  340,    0,  267,  267,
  267,  176,  772,  347,   63,    0,   63,   63,  352,  353,
   84,  787,   42,   42,   84,    0,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,    0,
  769,   42,   84,    0,    0,   42,  326,    0,   42,  784,
    0,   42,   42,   42,   42,   42,   42,   42,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    0,   15,
   15,   15,   15,   15,   15,  176,    0,   15,   15,   15,
   15,   15,   15,    0,    0,  179,  179,   15,   15,   15,
   15,   15,  354,    0,   15,   15,   15,    0,  196,  196,
  700,  703,   36,    0,  354,  354,    0,   34,  375,    0,
  326,   33,    0,    0,   32,    0,   15,   15,  725,    0,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,    0,    0,   15,    2,  715,  718,   15,
    0,    0,   15,  341,    0,   15,   15,   15,   15,   15,
   15,   15,   63,   63,   63,   63,   63,   63,    0,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,  730,  733,    0,  341,   63,   63,   63,
   63,   63,    0,  341,   63,   63,   63,    0,  341,  250,
  251,  252,  253,  254,  255,  175,    0,    0,  745,  748,
    0,  725,  341,    0,  725,    0,   63,   63,    0,  355,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,  355,    0,   63,  176,  176,    0,   63,
    0,    0,   63,    0,    0,   63,   63,   63,   63,   63,
   63,   63,  336,    0,    0,    0,    0,  375,  375,  796,
  375,  375,  375,  375,  375,  375,  725,    0,  725,  375,
    0,  326,  326,  375,  760,  763,  341,  308,  341,  341,
    0,  811,  802,  775,  778,  336,    0,    0,    3,    6,
    0,  308,  308,    9,    0,    0,    0,  336,  355,    2,
    2,    2,    0,    0,  817,   84,    0,    0,    0,  725,
  799,    0,  826,  413,  375,  375,    0,  375,  375,  375,
  375,  375,  375,  375,    3,    6,    0,    0,  841,    9,
  856,    0,  814,    0,    0,  832,  725,    2,    3,    4,
    0,  871,  238,  239,  240,  128,   15,    0,  267,  267,
  267,  847,    0,  862,    0,   19,  308,  414,  415,  416,
  417,  418,  419,  829,  877,    0,   23,   24,   25,   26,
    0,    0,   27,   28,  163,  336,    0,  336,  336,  844,
    0,  859,    0,    0,    0,   91,    0,   91,   91,   91,
    0,   91,  874,    0,    0,   36,    3,    6,   39,   40,
   34,    9,   37,   44,   33,    0,   91,   32,   91,   91,
    0,  341,  341,  341,  341,    0,  341,  341,  341,  341,
    0,  341,  341,  341,  341,  341,  341,  341,  341,   55,
  341,  341,  341,  341,  341,    0,    0,  355,   91,  341,
  341,  341,  341,  341,  152,  152,  341,  341,  152,  355,
  355,    0,  126,  236,  886,    0,    0,    6,    0,    3,
    6,    0,    0,  152,    9,  152,  152,    0,  341,  341,
   91,  292,  341,  341,    0,  341,  341,  892,  341,  341,
  341,  341,  341,  341,  341,  176,  901,  341,  175,    0,
  163,  341,    0,    0,  341,  152,    0,  341,  341,  341,
  341,  341,  341,  341,    0,  889,    0,  308,  308,  907,
  336,  336,  336,  336,    0,  336,  336,  336,  336,   44,
  336,  336,  336,  336,  336,  336,  336,  336,    0,  336,
  336,  336,  336,  336,  790,  793,    0,  904,  336,  336,
  336,  336,  336,   36,    0,  336,  336,    0,   34,    0,
   37,  520,   33,   36,    0,   32,  805,  808,   34,    0,
   37,    0,   33,    0,    0,   32,    0,  336,  336,    0,
    0,  336,  336,    0,  336,  336,    0,  336,  336,  336,
  336,  336,  336,  336,    0,    0,  336,  820,  823,    0,
  336,    0,    0,  336,    0,    0,  336,  336,  336,  336,
  336,  336,  336,  835,  838,  850,  853,    3,    6,   91,
    0,  916,    9,  529,    0,    0,  865,  868,    0,  143,
    2,    3,    4,   36,  931,    0,    0,    0,   34,    0,
   37,  571,   33,  176,  922,   32,  175,    0,   19,    3,
    6,    0,   91,  176,    9,    0,  175,  937,    0,   23,
   24,   25,   26,    0,    0,   27,   28,  163,    3,    6,
   91,  152,  919,    9,   36,    0,  152,    0,   91,   34,
    0,   37,    0,   33,    0,  934,   32,   30,   31,    0,
  152,   39,   40,    0,    0,    0,   44,   94,    0,   94,
   94,   94,    0,   94,    0,    0,  946,    0,  961,  152,
  976,    0,    0,    0,  991,    0,    0,    0,   94, 1006,
   94,   94,   55,  176,    0,    0,  175,    0,    0,  952,
    0,  967, 1021,  982,  706,    0,    0,  997,  152,  880,
  883,    0, 1012,    0,   36,    0,    0,    0,    0,   34,
   94,   37,  760,   33,    0, 1027,   32,  949,    0,  964,
    0,  979,    0,    0,  176,  994,    0,  175,    3,    6,
 1009,  895,  898,    9,    0,    0, 1036,  143,    2,    3,
    4,    0,   94, 1024,    0,    0,    0,  143,    2,    3,
    4,    0,    0,   36,    0,    0,   19,    0,   34, 1042,
   37,    0,   33,    0,    0,   32,   19,   23,   24,   25,
   26,    0,    0,   27,   28,  163,    0,   23,   24,   25,
   26,    0,    0,   27,   28,  163,    0, 1039, 1051,    0,
    0,    0,    0, 1066,  176,   30,   31,  175,    0,   39,
   40,    0,    0,    0,   44,   30,   31,    0,    0,   39,
   40, 1057, 1081,    0,   44, 1096, 1072,  143,    2,    3,
    4,    0,   36,    0,    0,    0,    0,   34,    0,   37,
   55,   33,    0,    0,   32, 1087,   19,    0, 1102, 1054,
   55,    0,    0,  176, 1069,    0,  175,   23,   24,   25,
   26,    0,    0,   27,   28,  163,  910,  913,  143,    2,
    3,    4, 1111, 1084,    0,    0, 1099,    3,    6,  925,
  928,    0,    9,    0,    0,   30,   31,   19,    0,   39,
   40,   94,    0, 1144,   44, 1117,    0,    0,   23,   24,
   25,   26,   36,    0,   27,   28,  163,   34,    0,  234,
    0,   33,    0,    0,   32,    0, 1150,    0,    0,    0,
   55,    0,  176, 1114,   94,  175,   30,   31,    3,    6,
   39,   40,    0,    9,    0,   44,    0,    0,  143,    2,
    3,    4,   94,    0, 1147,    0,    0,    0,    0,    0,
   94,  940,  943,  955,  958,  970,  973,   19,    0,  985,
  988,   55,    0, 1183, 1000, 1003,    0,    0,   23,   24,
   25,   26,    0,    0,   27,   28,  163, 1015, 1018, 1210,
    0,  409,    0,    0,  409,    0, 1189,  143,    2,    3,
    4,    0,  176,  356,    0,  175,   30,   31,  409,  409,
   39,   40, 1216,  360,    0,   44,   19,  356,  358,  356,
    0,  357,  369,  359, 1186, 1225,    0,   23,   24,   25,
   26, 1030, 1033,   27,   28,  163,  354,    0,  355,    0,
 1213,   55,    0,  409,    0,    0,    0,  267, 1231,    0,
    0,    0,    0,    0,    0,   30,   31,    0, 1240,   39,
   40,    0,  410,    0,   44,  410,  228,    2,    3,    4,
    0,    0,    0,  409,    0,  409, 1228,    0,    0,  410,
  410, 1246,  356, 1045, 1048,   19,    0,    2, 1060, 1063,
   55,  267,  267,  267,  267,  267,   23,   24,   25,   26,
    0,  543,   27,   28,  163,    0,    0, 1075, 1078, 1243,
 1090, 1093,    0,    0,  410,  553,    0,    0,  550,    0,
    0,    0,    0,    0,   30,   31,    0,    0,   39,   40,
    0,  401,    0,   44,  401,    0,  143,    2,    3,    4,
    0,    0,    0,    0,  410,    0,  410,  304,  401,  401,
    0,  401,    0,    0,    0,   19,    0, 1105, 1108,   55,
    0,  304,  304,    0,    0,    0,   23,   24,   25,   26,
    0,    0,   27,   28,  163,    0,    0,  214, 1138, 1141,
  543,  209,  211,  401,  217,    0,  207,  205,  216,  206,
    0,  208,    0,    0,   30,   31,    0,    0,   39,   40,
    0,    0,    0,   44,  203,  215,  204,  409,    0,    0,
    0,    0,    0,  401,  401,  401,    0,    0,    0,    0,
    0,  356,    0,    0,  409,  409,  304,    0,    0,   55,
    0,    0,    0,  356,  356,  218,    0,    0,  210,    0,
    2,    2,    2,    0,    0,    0,    0,    0, 1177, 1180,
    0,   86,   86,    0,   86,   86,   86,   86,   86,   86,
   86,   86,    0,    0, 1204, 1207,    0,    0,  212,  267,
  213,    0,   86,   86,   86,   86,   86,   86,  410,    0,
  339,  340,    0,    0,  409,    0,  345,  346,  347,  267,
  267,  267,    0,  352,  353,  410,  410,    0,    0,    0,
 1219, 1222,    0,    0,    0,   86,    0,   86,   86,    0,
    2,    2,  268,  267,  267,  267,  267,  267,  267,   85,
   85,  303,   85,   85,   85,   85,   85,   85,   85,   85,
    0,  543,  543, 1234, 1237,  303,  303,   86,   86,   86,
   85,   85,   85,   85,   85,   85,    0,  401,    0,    0,
  547,    0,    0,    0,    0,  410,  268,  268,  268,  268,
  268,  268,    0,    0,  401,  401,    0,    0,    0,    0,
    0,    0,    0,   85,    0,   85,   85,  304,  304,    0,
    0,    0,    0,    0,    0,    0,  401,  401,  401,  401,
  401,  401,  401,  401,    0,    0,  401,  401,    0,    0,
  303,  143,    0,  401,  401,   85,   85,   85,    0,    9,
  144,    0,   11,   12,   13,  128,   15,   16,    0,    0,
  129,   20,    0,    0,  401,    0,    0,    0,    0,    0,
   22,  381,    0,  380,    0,    0,    0,    0,    0,    0,
  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
  200,  201,  202,  219,  220,   41,   42,   43,   44,    0,
    0,   86,    0,    0,    0,   48,   86,  244,  244,    0,
  244,  244,  244,  244,  244,  244,  244,  244,   86,   86,
   86,    0,    0,    0,    0,  168,    0,    0,  244,  244,
  244,  244,  244,  244,    0,    0,    0,    0,    0,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
   86,   86,   86,  244,  244,   86,    0,    0,   86,   85,
    0,    0,    0,    0,   85,    0,    0,    0,   86,    0,
  424,  303,  303,  424,    0,    0,   85,   85,   85,    0,
    0,    0,    0,  244,  244,  244,    0,  424,  424,    0,
  424,    0,    0,  168,    0,    0,    0,   85,   85,   85,
   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
   85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
   85,    0,  424,   85,  202,  202,   85,  202,  202,  202,
  202,  202,  202,  202,  202,    0,   85,  168,  168,  168,
  168,  168,  168,  154,  154,  202,  202,  154,  202,  202,
  202,    0,  424,    0,  424,    0,    0,    0,    0,    0,
  143,  154,  154,    0,  154,    0,   17,   18,    0,    0,
    0,  238,  239,  240,  128,   15,    0,    0,  202,  129,
  202,  202,    0,    0,    0,  379,  245,  246,    0,    0,
    0,    0,    0,    0,  154,    0,    0,  246,  246,    0,
  246,  246,  246,  246,  246,  246,  246,  246,    0,    0,
  202,  202,  202,  374,    0,    0,  375,  244,  246,  246,
  246,  246,  246,  246,  376,  377,  154,   44,    0,    0,
    0,    0,    0,   47,  244,  244,    0,  247,  248,  249,
  250,  251,  252,  253,  254,  255,    0,    0,    0,    0,
    0,    0,    0,  246,  246,    0,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  244,  244,    0,
    0,    0,    0,  246,  246,  246,  424,    0,    0,    0,
    0,  428,  428,    0,  244,  428,  428,  428,  428,  428,
  428,  428,    0,  424,  424,    0,    0,    0,    0,    0,
    0,    0,  428,  428,  428,  428,  428,    0,    0,    0,
  168,    0,    0,    0,    0,  424,  424,  424,  424,  424,
  424,  424,  424,    0,    0,  424,  424,    0,    0,    0,
    0,    0,  424,  424,  202,    0,    0,  428,  428,  360,
  362,    0,    0,    0,  358,  356,    0,  357,  369,  359,
    0,  202,  202,  424,  168,  168,  168,  168,  168,  168,
    0,    0,  354,    0,  355,    0,    0,  428,  428,  428,
    0,    0,    0,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  361,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  246,    0,    0,
    0,  202,  360,  362,    0,    0,    0,  358,  356,    0,
  357,  369,  359,    0,  246,  246,  363,    0,    0,    0,
    0,    0,    0,    0,    0,  354,    0,  355,  370,    0,
    0,    0,    0,    0,    0,    0,  246,  246,  246,  246,
  246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
  246,  246,  246,  246,  246,  246,  246,  246,  246,  361,
    0,    9,  144,    0,  145,  146,  147,  168,    0,   16,
    0,  427,  427,   20,  246,  427,  427,  427,  427,  427,
  427,  427,   22,    0,    0,    0,    0,    0,    0,  363,
    0,  428,  427,  427,  427,  427,  427,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  428,  428,
    0,  168,  168,  168,  168,  168,  168,    0,    0,   43,
    0,    0,    0,    0,    0,    0,    0,  427,  427,    0,
  428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
  428,  428,  428,  428,  428,  428,  428,  428,  428,    0,
    0,  428,  428,    0,    0,    0,    0,  427,  427,  427,
    0,    0,    0,    0,    0,  391,  391,  168,  428,  391,
  391,  391,  391,  391,    0,  391,    0,    0,    0,  168,
    0,    0,    0,    0,    0,    0,  391,  391,  391,  391,
  391,    0,    0,    0,    0,    0,  339,  340,    0,    0,
  343,  344,  345,  346,  347,  348,    0,    0,    0,  352,
  353,  168,  168,  168,  168,  168,  168,    0,    0,    0,
    0,  391,  391,  168,  168,  168,  168,  168,  168,    0,
    0,    0,    0,  393,  393,    0,    0,  393,  393,  393,
  393,  393,  411,  393,    0,  411,    0,    0,    0,    0,
    0,  391,  391,  391,  393,  393,  393,  393,  393,  411,
  411,  331,  332,  333,  334,  335,  336,  337,  338,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,    0,    0,    0,  143,    0,  393,
  393,  427,    0,    0,  411,    9,  144,    0,  145,  146,
  147,    0,    0,   16,    0,    0,  129,   20,  427,  427,
    0,    0,    0,    0,    0,    0,   22,    0,    0,  393,
  393,  393,    0,    0,  411,    0,  411,    0,    0,    0,
  427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
  427,  427,  427,  427,  427,  427,  427,  427,  427,    0,
    0,  427,  427,   43,   44,    0,    0,  386,  386,    0,
    0,  386,  386,  386,  386,  386,    0,  386,  427,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  386,  386,
  386,  386,  386,    0,    0,  391,    0,    0,  143,    0,
    0,  422,    0,    0,    0,    0,    9,  144,    0,  145,
  146,  147,  391,  391,   16,    0,    0,  129,   20,    0,
    0,    0,    0,  386,  386,    0,    0,   22,    0,    0,
    0,    0,    0,    0,  391,  391,  391,  391,  391,  391,
  391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
  391,  391,  391,  386,  386,  386,  391,    0,    0,    0,
    0,    0,  423,  393,   43,   44,    0,    0,  411,  389,
  389,    0,  391,  389,  389,  389,  389,  389,    0,  389,
  393,  393,    0,    0,    0,  411,  411,    0,    0,    0,
  389,  389,  389,  389,  389,    0,    0,    0,    0,    0,
    0,    0,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
  393,    0,    0,    0,  393,  389,  389,  390,  390,    0,
    0,  390,  390,  390,  390,  390,    0,  390,    0,    0,
  393,    0,    0,    0,    0,  411,    0,    0,  390,  390,
  390,  390,  390,    0,    0,  389,  389,  389,    0,    0,
    0,    0,    0,    0,    0,  360,  362,    0,    0,    0,
  358,  356,    0,  357,  369,  359,    0,    0,    0,    0,
    0,    0,    0,  390,  390,    0,    0,  386,  354,    0,
  355,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  386,  386,    0,    0,    0,    0,
    0,    0,    0,  390,  390,  390,    0,    0,    0,    0,
    0,    0,  361,    0,    0,    0,  386,  386,  386,  386,
  386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
  386,  386,  386,  386,  386,    0,    0,    0,  386,    0,
    0,    0,  363,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  386,    0,    0,    0,    0,  387,
  387,    0,    0,  387,  387,  387,  387,  387,    0,  387,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  389,
  387,  387,  387,  387,  387,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  389,  389,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  387,  387,    0,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
  389,  389,  389,  389,  389,  389,  389,  390,    0,    0,
  389,    0,    0,    0,    0,  387,  387,  387,    0,    0,
    0,    0,    0,    0,  390,  390,  389,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  388,  388,    0,  390,  388,
  388,  388,  388,  388,    0,  388,    0,    0,    0,    0,
    0,    0,    0,    0,  390,    0,  388,  388,  388,  388,
  388,    0,  339,  340,    0,    0,  343,  344,  345,  346,
  347,    0,    0,    0,    0,  352,  353,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  378,    0,    0,
   84,  388,  388,   84,   84,    0,   84,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   84,   84,   84,   84,    0,    0,    0,    0,    0,  387,
    0,  388,  388,  388,    0,  439,  439,    0,    0,  439,
  439,  439,  439,  439,    0,  439,  387,  387,    0,    0,
    0,    0,    0,   84,    0,    0,  439,  439,  439,  439,
  439,    0,    0,    0,    0,    0,    0,    0,  387,  387,
  387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
  387,  387,  387,  387,  387,  387,  387,    0,    0,    0,
  387,  439,  439,  442,  442,    0,    0,  442,  442,  442,
  442,  442,    0,  442,    0,    0,  387,  412,    0,    0,
  412,    0,    0,    0,  442,  442,  442,  442,  442,    0,
    0,  439,  439,  439,  412,  412,    0,    0,  378,    0,
    0,    0,    0,  378,    0,    0,  378,  378,    0,  378,
  378,  378,  378,  378,  378,    0,    0,  378,  378,  442,
  442,    0,  378,    0,    0,    0,    0,  378,    0,  412,
    0,    0,    0,    0,    0,  388,  378,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  442,
  442,  442,  388,  388,    0,    0,    0,    0,    0,  412,
    0,  412,  378,  378,  378,  378,  378,  378,  378,  378,
  378,  378,  378,    0,  388,  388,  388,  388,  388,  388,
  388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
  388,  388,  388,    0,  375,    0,  388,  375,  375,    0,
  375,  375,  375,  375,  375,  375,    0,    0,    0,  375,
    0,    0,  388,  375,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  439,    0,  375,  429,  429,
    0,    0,  429,  429,  429,  429,  429,    0,  429,    0,
    0,    0,  439,  439,    0,   84,    0,    0,    0,  429,
  429,  429,  429,  429,  375,  375,    0,  375,  375,  375,
  375,  375,  375,  375,  439,  439,  439,  439,  439,  439,
  439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
  439,  439,  439,  442,  429,  429,  439,    0,    0,    0,
    0,    0,    0,  412,    0,    0,    0,    0,    0,    0,
  442,  442,  439,    0,    0,    0,    0,    0,    0,    0,
  412,  412,    0,    0,  429,  429,  429,    0,    0,    0,
    0,    0,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
  442,  433,  433,    0,  442,  433,  433,  433,  433,  433,
    0,  433,    0,    0,    0,    0,    0,    0,  413,    0,
  442,  413,  433,  433,  433,  433,  433,    0,    0,    0,
  412,    0,  427,    0,    0,  413,  413,    6,    0,    0,
    9,  144,    0,   11,   12,   13,  128,   15,   16,   17,
   18,  129,   20,    0,    0,    0,    0,  433,  433,    0,
   99,   22,   99,   99,   99,    0,   99,    0,    0,    0,
  413,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   99,    0,   99,   99,    0,    0,  433,  433,  433,
    0,    0,    0,    0,    0,    0,   41,   42,   43,   44,
  413,    0,  413,    0,    0,    0,   48,    0,  429,    0,
  443,  443,    0,   99,  443,  443,  443,  443,  443,    0,
  443,    0,    0,    0,    0,  429,  429,    0,    0,    0,
    0,  443,  443,  443,  443,  443,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   99,    0,  429,  429,  429,
  429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
  429,  429,  429,  429,  429,  429,  443,  443,    0,  429,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  429,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  443,  443,  443,    0,
    0,  440,  440,    0,    0,  440,  440,  440,  440,  440,
    0,  440,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  433,  440,  440,  440,  440,  440,    0,    0,    0,
    0,    0,    0,    0,  413,    0,    0,    0,  433,  433,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  413,  413,    0,    0,    0,    0,  440,  440,    0,
  433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
  433,  433,  433,  433,  433,  433,  433,  433,  433,   99,
    0,    0,  433,    0,   99,    0,    0,  440,  440,  440,
    0,    0,    0,    0,    0,    0,    0,    0,  433,    0,
    0,    0,  441,  441,    0,    0,  441,  441,  441,  441,
  441,  413,  441,    0,    0,    0,    0,   99,    0,    0,
    0,    0,    0,  441,  441,  441,  441,  441,    0,    0,
  443,    0,    0,    0,    0,   99,    0,    0,    0,    0,
    0,    0,    0,   99,    0,    0,   99,  443,  443,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  441,  441,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  443,
  443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
  443,  443,  443,  443,  443,  443,  443,  443,  441,  441,
  441,  443,  447,    0,    0,    0,  447,    0,  447,  447,
    0,  447,  447,    0,    0,    0,  414,  443,    0,  414,
    0,    0,    0,  447,  447,  447,  447,  447,  447,    0,
    0,  440,    0,  414,  414,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  440,  440,
    0,    0,    0,    0,    0,    0,  447,    0,  447,  447,
    0,    0,    0,    0,    0,    0,    0,    0,  414,    0,
  440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
  440,  440,  440,  440,  440,  440,  440,  440,  440,  447,
  447,    0,  440,    0,    0,    0,    0,    0,  414,    0,
  414,    0,    0,  445,    0,    0,    0,  445,  440,  445,
  445,    0,  445,  445,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  445,  445,  445,  445,  445,  445,
    0,    0,  441,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  441,
  441,    0,    0,    0,    0,    0,    0,  445,    0,  445,
  445,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  441,  441,  441,  441,  441,  441,  441,  441,  441,
  441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
  445,  445,    0,  441,    0,    0,    0,    0,  397,  397,
    0,    0,  397,  397,  397,  397,  397,  417,  397,  441,
  417,    0,    0,    0,    0,    0,    0,    0,    0,  397,
  397,  397,  397,  397,  417,  417,    0,    0,    0,    0,
    0,    0,  414,    0,    0,    0,    0,    0,    0,  447,
  447,    0,    0,    0,    0,    0,    0,    0,    0,  414,
  414,    0,    0,    0,  397,  397,    0,    0,    0,  417,
    0,  447,  447,  447,  447,  447,  447,  447,  447,  447,
  447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
    0,    0,  447,  447,  397,  397,  397,    0,    0,  417,
    0,  417,    0,    0,    0,    0,    0,    0,    0,  447,
  398,  398,    0,    0,  398,  398,  398,  398,  398,  414,
  398,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  398,  398,  398,  398,  398,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  445,  445,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  398,  398,    0,    0,
    0,    0,  445,  445,  445,  445,  445,  445,  445,  445,
  445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
  445,    0,    0,  445,  445,    0,  398,  398,  398,    0,
    0,  399,  399,    0,    0,  399,  399,  399,  399,  399,
  445,  399,    0,    0,  418,    0,    0,  418,    0,    0,
    0,    0,  399,  399,  399,  399,  399,    0,  397,    0,
    0,  418,  418,  417,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  397,  397,    0,    0,    0,
  417,  417,    0,    0,    0,    0,    0,  399,  399,    0,
    0,    0,    0,    0,    0,    0,  418,  397,  397,  397,
  397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
  397,  397,  397,  397,  397,  397,    0,  399,  399,  399,
    0,    0,    0,    0,    0,    0,  418,    0,  418,    0,
    0,    0,  438,    0,    0,  397,  438,    0,  438,  438,
  417,  438,  438,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  438,  438,  438,  438,  438,  438,    0,
  398,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  398,  398,    0,
    0,    0,    0,    0,    0,    0,  438,    0,  438,  438,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,    0,  438,
  438,    0,    0,    0,  395,    0,    0,  395,    0,  395,
  395,  395,  403,    0,    0,  403,  426,  398,    0,  426,
    0,    0,    0,    0,  395,  395,  395,  395,  395,  403,
  403,  399,    0,  426,  426,    0,    0,    0,    0,    0,
  418,    0,    0,    0,    0,    0,    0,    0,  399,  399,
    0,    0,    0,    0,    0,    0,    0,  418,  418,  395,
  395,    0,    0,    0,  403,    0,    0,    0,  426,    0,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  395,
  395,  395,    0,    0,  403,    0,  403,    0,  426,    0,
  426,    0,    0,    0,    0,    0,    0,    0,  399,  396,
    0,    0,  396,    0,  396,  396,  396,  418,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  396,
  396,  396,  396,  396,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  438,
  438,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  396,  396,    0,    0,    0,    0,
    0,  438,  438,  438,  438,  438,  438,  438,  438,  438,
  438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
    0,    0,  438,  438,  396,  396,  396,  415,    0,    0,
  415,    0,    0,  415,    0,    0,    0,    0,  406,  438,
    0,  406,    0,    0,    0,    0,    0,  415,  415,  415,
  415,  415,    0,  395,    0,  406,  406,    0,  403,    0,
    0,    0,  426,    0,    0,    0,    0,    0,    0,    0,
  395,  395,    0,    0,    0,  403,  403,    0,    0,  426,
  426,    0,  415,  415,    0,    0,    0,    0,    0,    0,
  406,    0,  395,  395,  395,  395,  395,  395,  395,  395,
  395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
  395,    0,  415,  415,  415,    0,    0,    0,    0,    0,
  406,    0,  406,    0,    0,    0,    0,    0,    0,    0,
  395,  416,    0,    0,  416,  403,    0,  416,    0,  426,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  416,  416,  416,  416,  416,    0,    0,  396,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  396,  396,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  416,  416,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  396,  396,  396,
  396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
  396,  396,  396,  396,  396,  396,  416,  416,  416,  423,
    0,    0,  423,    0,    0,  423,    0,    0,  432,    0,
  432,  432,  432,    0,  432,  396,    0,    0,    0,  423,
  423,  423,  423,  423,    0,    0,  415,    0,    0,  432,
    0,  432,  432,    0,  406,    0,    0,    0,    0,    0,
    0,    0,    0,  415,  415,    0,    0,    0,    0,    0,
    0,  406,  406,    0,  423,  423,    0,    0,    0,    0,
    0,  432,    0,    0,    0,  415,  415,  415,  415,  415,
  415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
  415,  415,  415,  415,  423,  423,  423,    0,    0,    0,
    0,    0,    0,  432,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  415,  421,    0,    0,  421,    0,    0,
  421,  406,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  421,  421,  421,  421,  421,    0,
  416,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  416,  416,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  421,
  421,    0,    0,    0,    0,    0,    0,    0,    0,  416,
  416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
  416,  416,  416,  416,  416,  416,  416,  416,    0,  421,
  421,  421,  422,    0,    0,  422,    0,    0,  422,    0,
    0,    0,    0,    0,    0,    0,    0,  416,    0,    0,
    0,    0,  422,  422,  422,  422,  422,    0,  423,    0,
    0,    0,    0,    0,    0,    0,    0,  432,    0,    0,
    0,    0,  432,    0,    0,  423,  423,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  432,  422,  422,    0,
    0,    0,    0,    0,    0,    0,    0,  423,  423,  423,
  423,  423,  423,  423,  423,  432,    0,  423,  423,  423,
  423,  423,  423,  423,  423,  423,    0,  422,  422,  422,
    0,    0,    0,  432,    0,    0,    0,    0,    0,    0,
    0,  432,    0,    0,  432,  423,  404,    0,    0,  404,
    0,    0,  404,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  404,  404,  404,  404,
  404,    0,    0,  421,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  421,  421,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  404,  404,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  421,  421,  421,  421,  421,  421,  421,  421,
    0,    0,  421,  421,  421,  421,  421,  421,    0,  421,
  421,  404,  404,  404,  405,    0,    0,  405,    0,    0,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  421,    0,    0,    0,  405,  405,  405,  405,  405,    0,
    0,  422,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  422,  422,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  405,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  422,  422,  422,  422,  422,  422,  422,  422,    0,    0,
  422,  422,  422,  422,  422,  422,    0,  422,  422,  405,
  405,  405,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  422,  419,
    0,    0,  419,    0,    0,  419,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  419,
  419,    0,  419,    0,    0,  404,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  404,  404,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  419,  419,    0,    0,    0,    0,
    0,    0,    0,    0,  404,  404,  404,  404,  404,  404,
  404,  404,    0,    0,  404,  404,  404,  404,  404,  404,
    0,  404,  404,    0,  419,  419,  419,  420,    0,    0,
  420,    0,    0,  420,    0,    0,    0,    0,    0,    0,
    0,    0,  404,    0,    0,    0,    0,  420,  420,    0,
  420,    0,    0,  405,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  405,  405,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  420,  420,    0,    0,    0,    0,    0,    0,
    0,    0,  405,  405,  405,  405,  405,  405,  405,  405,
    0,    0,  405,  405,  405,  405,  405,  405,    0,  405,
  405,    0,  420,  420,  420,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,    0,    0,  400,
  405,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  400,  400,    0,  400,
    0,    0,    0,    0,    0,    0,    0,    0,  419,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  419,  419,    0,    0,    0,
    0,  400,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  419,  419,  419,
  419,  419,  419,  419,  419,    0,    0,  419,  419,  419,
  419,  400,  400,  400,  419,  419,    0,   84,   84,    0,
    0,    0,   84,   84,   84,   84,   84,   84,    0,    0,
    0,    0,    0,    0,    0,  419,    0,    0,    0,   84,
    0,   84,   84,   84,    0,    0,  420,    0,    0,    0,
    0,    0,  360,  362,    0,    0,    0,  358,  356,    0,
  357,  369,  359,  420,  420,    0,    0,    0,    0,    0,
    0,   84,    0,    0,   84,  354,    0,  355,    0,    0,
    0,    0,    0,    0,    0,  420,  420,  420,  420,  420,
  420,  420,  420,    0,    0,  420,  420,  420,  420,    0,
    0,    0,  420,  420,   84,   84,  375,   84,    0,  361,
    0,   84,    0,   84,  402,    0,    0,  402,    0,    0,
    0,    0,    0,  420,    0,    0,    0,    0,    0,   84,
   84,  402,  402,    0,  402,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   84,    0,  400,  400,    0,    0,  402,  402,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  400,  400,  400,  400,  400,  400,
  400,  400,    0,    0,  400,  400,  402,  402,  402,  126,
    0,  400,  400,    0,    6,    0,    0,    9,  144,    0,
   11,   12,   13,  128,   15,   16,    0,  425,  129,   20,
  425,    0,  400,  267,    0,    0,    0,    0,   22,    0,
    0,    0,    0,    0,  425,  425,    0,  425,    0,    0,
    0,    0,    0,    0,    0,  375,  375,    0,  375,  375,
  375,  375,  375,  375,    0,    0,    0,  375,    0,    0,
    0,  375,    0,   41,   42,   43,   44,   45,   46,  425,
    0,    0,    0,   48,    0,    0,   84,   84,   84,   84,
   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
   84,   84,   84,   84,   84,   84,   84,   84,   84,  425,
    0,  425,  375,  375,    0,  375,  375,  375,  375,  375,
  375,  375,    0,    0,    0,    0,    0,    0,    0,  339,
  340,    0,    0,  343,  344,  345,  346,  347,    0,    0,
  402,  375,  352,  353,  375,  375,    0,  375,  375,  375,
  375,  375,  375,    0,    0,    0,  375,  402,  402,    0,
  375,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  402,
  402,  402,  402,  402,  402,  402,  402,    0,    0,  402,
  402,    0,   84,    0,    0,    0,  402,  402,    0,    0,
    0,  375,  375,    0,  375,  375,  375,  375,  375,  375,
  375,    0,    0,    0,    0,   84,   84,  402,   84,    0,
   84,   84,   84,   84,   84,   84,    0,  269,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   84,   84,   84,
   84,   84,    0,  425,    0,  360,  362,    0,    0,    0,
  358,  356,    0,  357,  369,  359,    0,    0,    0,    0,
  425,  425,    0,    0,    0,    0,    0,    0,  354,   84,
  355,    0,   84,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  425,  425,  425,  425,  425,  425,  425,  425,
    0,    0,  425,  425,    0,    0,    0,    0,    0,    0,
  425,  214,   84,   84,    0,  209,  211,    0,  217,    0,
  207,  205,  216,  206,    0,  208,    0,    0,    0,    0,
  425,    0,    0,    0,    0,    0,    0,    0,  203,  215,
  204,  202,    0,    0,    0,    0,    0,  202,  202,  202,
  202,  202,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  202,    0,  202,  202,  202,    1,  218,
    0,    0,  210,    6,    0,  316,    9,  144,    0,   11,
   12,   13,  128,   15,   16,    0,    0,  129,   20,    0,
    0,    0,    0,    0,    0,  202,    0,   22,  202,    0,
    0,    0,  212,    0,  213,    0,  268,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  202,  202,
    0,    0,   41,   42,   43,   44,    0,    0,    0,    0,
    0,    0,   48,    0,    0,   84,    0,    0,    0,    0,
   84,    0,    0,  202,    0,    0,    0,    0,    0,  202,
  202,  202,  202,  202,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   84,  202,    0,  202,  202,  202,
    0,    0,    0,   84,   84,   84,   84,   84,   84,   84,
   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
   84,   84,   84,   84,   84,   84,   84,  202,    0,   84,
  202,    0,   84,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  339,  340,    0,    0,  343,  344,  345,  346,
  347,    0,    0,    0,    0,  352,  353,    0,    0,    0,
  202,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   90,    0,    0,    0,    0,   90,    0,    0,    0,
    0,    0,    0,    0,  180,  181,  182,  183,  184,  185,
  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
  196,  197,  198,  199,  200,  201,  202,  219,  220,   90,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,    0,  202,  202,
  202,  202,  202,    0,    0,   90,    0,    0,   90,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,   96,   96,   96,    0,
   96,   97,    0,   97,   97,   97,    0,   97,   98,    0,
   98,   98,   98,    0,   98,   96,    0,   96,   96,    0,
    0,    0,   97,   90,   97,   97,    0,    0,    0,   98,
    0,   98,   98,    0,    0,  100,    0,  100,  100,  100,
    0,  100,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,    0,   97,    0,  100,    0,  100,  100,
    0,   98,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,   96,
  202,  202,  202,  202,  202,    0,   97,   90,  100,    0,
   90,   84,   84,   98,    0,    0,   84,   84,   84,   84,
   84,   84,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   84,   84,   84,   84,   84,  360,  362,
  100,  366,    0,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  368,  354,  364,  355,  370,   84,    0,    0,   84,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  360,  362,
    0,  366,    0,  358,  356,  365,  357,  369,  359,    0,
    0,    0,  367,    0,    0,  361,    0,    0,   84,   84,
  368,  354,  364,  355,  370,  360,  362,    0,  366,  478,
  358,  356,  365,  357,  369,  359,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,  501,    0,  354,  364,
  355,  370,  367,   96,    0,  361,    0,    0,   96,    0,
   97,    0,    0,    0,    0,   97,    0,   98,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,  360,  367,
    0,    0,  361,  358,  356,  363,  357,  369,  359,    0,
    0,   96,    0,    0,  100,    0,    0,    0,   97,  100,
    0,  354,    0,  355,    0,   98,    0,    0,    0,   96,
    0,    0,  363,    0,    0,    0,   97,   96,    0,    0,
   96,    0,    0,   98,   97,    0,    0,   97,    0,    0,
    0,   98,  100,    0,   98,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  100,    0,    0,    0,    0,    0,    0,    0,  100,  360,
  362,  100,  366,    0,  358,  356,  365,  357,  369,  359,
   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   84,    0,  354,  364,  355,  370,    0,    0,    0,    0,
   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
   84,   84,   84,  367,    0,    0,  361,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,    0,    0,  363,  501,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,  331,  332,  333,  334,  335,  336,
  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  360,  362,    0,
  366,  648,  358,  356,  365,  357,  369,  359,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  354,  364,  355,  370,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  339,  340,    0,    0,  343,
  344,  345,  346,  347,    0,    0,    0,    0,  352,  353,
    0,  367,    0,    0,  361,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  126,    0,
    0,    0,    0,  266,  363,    0,    9,  144,    0,   11,
   12,   13,  128,   15,   16,    0,    0,  129,   20,    0,
    0,    0,  267,    0,    0,    0,    0,   22,  331,  332,
  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  360,  362,    0,  366,  655,  358,  356,  365,  357,
  369,  359,   41,   42,   43,   44,   45,   46,    0,    0,
    0,    0,   48,    0,  354,  364,  355,  370,  360,  362,
    0,  366,  663,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,  269,    0,    0,
    0,  354,  364,  355,  370,  367,    0,    0,  361,    0,
    0,    0,    0,    0,    0,    0,  360,  362,    0,  366,
  666,  358,  356,  365,  357,  369,  359,    0,    0,    0,
    0,    0,  367,    0,    0,  361,    0,    0,  363,  354,
  364,  355,  370,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,    0,    0,    0,    0,
  367,    0,    0,  361,    0,    0,  331,  332,  333,  334,
  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,    0,
    0,  360,  362,  363,  366,  668,  358,  356,  365,  357,
  369,  359,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  354,  364,  355,  370,  265,    0,
    0,    0,    0,  266,    0,    0,    9,  144,    0,   11,
   12,   13,  128,   15,   16,    0,    0,  129,   20,    0,
    0,    0,    0,    0,    0,  367,    0,   22,  361,    0,
    0,    0,    0,    0,    0,    0,  268,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  363,    0,
    0,    0,   41,   42,   43,   44,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  331,  332,  333,  334,  335,
  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  360,  362,
    0,  366,  674,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,  364,  355,  370,    0,    0,    0,    0,    0,
    0,    0,    0,  360,  362,    0,  366,  682,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
    0,    0,  367,    0,    0,  361,  354,  364,  355,  370,
  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,    0,    0,  363,    0,  367,  360,  362,
  361,  366,    0,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,  364,  355,  370,    0,    0,    0,    0,    0,
  363,    0,    0,  360,  362,    0,  366,    0,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
    0,    0,  367,    0,  683,  361,  354,  364,  355,  370,
    0,    0,    0,    0,    0,    0,    0,    0,  360,  362,
    0,  366,  686,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,  363,    0,  367,    0,    0,
  361,  354,  364,  355,  370,    0,    0,    0,    0,    0,
    0,    0,    0,  360,  362,    0,  366,    0,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
  363,  684,  367,    0,    0,  361,  354,  364,  355,  370,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  360,  362,    0,  366,    0,  358,  356,  365,  357,  369,
  359,    0,    0,    0,    0,  363,    0,  367,    0,  687,
  361,  688,    0,  354,  364,  355,  370,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  363,    0,    0,    0,  367,    0,    0,  361,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,  363,  360,  362,
    0,  366,  732,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,  364,  355,  370,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,  367,    0,    0,  361,    0,    0,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  363,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  331,
  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,    0,  360,  362,    0,  366,    0,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  354,  364,  355,  370,
    0,    0,    0,    0,    0,    0,    0,    0,  360,  362,
    0,  366,  791,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,  367,    0,  771,
  361,  354,  364,  355,  370,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  363,    0,  367,  360,  362,  361,  366,  802,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  354,  364,  355,  370,
    0,    0,    0,    0,    0,  363,    0,    0,  360,  362,
    0,  366,  817,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,  367,    0,    0,
  361,  354,  364,  355,  370,    0,    0,    0,    0,    0,
    0,    0,    0,  360,  362,    0,  366,  818,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
  363,    0,  367,    0,    0,  361,  354,  364,  355,  370,
    0,    0,    0,    0,    0,    0,    0,    0,  360,  362,
    0,  366,  819,  358,  356,  365,  357,  369,  359,    0,
    0,    0,    0,    0,    0,  363,    0,  367,    0,    0,
  361,  354,  364,  355,  370,    0,    0,    0,    0,    0,
    0,    0,    0,  360,  362,    0,  366,  820,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
  363,    0,  367,    0,    0,  361,  354,  364,  355,  370,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  363,    0,  367,    0,    0,
  361,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  363,    0,    0,  360,  362,    0,  366,    0,  358,  356,
  365,  357,  369,  359,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  863,    0,  354,  364,  355,  370,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,  367,    0,    0,
  361,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  363,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,    0,  360,  362,
    0,  366,    0,  358,  356,  365,  357,  369,  359,    0,
    0,  269,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,  364,  355,  370,    0,    0,    0,    0,    0,
    0,    0,    0,  360,  362,    0,  366,    0,  358,  356,
    0,  357,  369,  359,    0,    0,    0,    0,    0,    0,
  269,    0,  367,    0,    0,  361,  354,  364,  355,  370,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  363,    0,  367,  360,  362,
  361,    0,    0,  358,  356,    0,  357,  369,  359,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  354,  364,  355,    0,    0,    0,   89,    0,    0,
  363,    0,    0,   89,    0,   89,   89,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,    0,    1,   89,    0,  361,    0,    6,    0,    0,
    9,  144,    0,   11,   12,   13,  128,   15,   16,    0,
    0,  129,   20,    0,    0,    0,    0,    0,    0,    0,
    0,   22,    0,    0,   89,  363,    0,    0,    0,    0,
  268,  265,    0,    0,    0,    0,    6,    0,    0,    9,
  144,    0,   11,   12,   13,  128,   15,   16,    0,    0,
  129,   20,    0,    0,   89,   89,   41,   42,   43,   44,
   22,    0,    0,    0,    0,    0,   48,    0,    0,  268,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   43,   44,    0,
    0,    0,    0,    0,    0,   48,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  331,  332,  333,  334,  335,  336,  337,  338,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  331,  332,  333,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,   89,    0,  352,  353,
    0,    0,    0,    0,    0,    0,   89,   89,   89,   89,
   89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
   89,   89,   89,    0,   89,   89,   89,   89,   89,  170,
    0,    0,    0,    0,  170,    0,    0,  170,  170,    0,
  170,  170,  170,  170,  170,  170,    0,    0,  170,  170,
    0,  126,    0,  170,    0,    0,    6,    0,  170,    9,
  144,    0,   11,   12,   13,  128,   15,   16,   17,   18,
  129,   20,    0,    0,    0,    0,    0,    0,    0,    0,
   22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  170,  170,  170,  170,  170,  170,    0,
    0,    0,    0,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,   42,   43,   44,  265,
    0,    0,    0,    0,    6,   48,    0,    9,  144,    0,
   11,   12,   13,  128,   15,   16,    0,    0,  129,   20,
    0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
  265,    0,    0,    0,    0,  266,    0,  268,    9,  144,
    0,   11,   12,   13,  128,   15,   16,    0,    0,  129,
   20,    0,    0,    0,    0,    0,    0,    0,    0,   22,
    0,    0,    0,   41,   42,   43,   44,    0,  268,  126,
    0,    0,    0,   48,    6,    0,    0,    9,  127,    0,
   11,   12,   13,  128,   15,   16,    0,    0,  129,   20,
    0,    0,    0,    0,   41,   42,   43,   44,   22,    0,
  126,    0,    0,    0,   48,  266,    0,    0,    9,  144,
    0,   11,   12,   13,  128,   15,   16,    0,    0,  129,
   20,    0,    0,    0,    0,    0,    0,    0,    0,   22,
    0,    0,    0,   41,   42,   43,   44,    0,    0,  126,
    0,    0,    0,   48,    6,    0,    0,    9,  144,    0,
   11,   12,   13,  128,   15,   16,    0,    0,  129,   20,
    0,    0,    0,    0,   41,   42,   43,   44,   22,  143,
    0,    0,    0,    0,   48,    0,    0,    9,  144,    0,
   11,   12,   13,  128,   15,   16,    0,    0,  129,   20,
    0,    0,    0,    0,    0,    0,    0,    0,   22,    0,
    0,    0,    0,   41,   42,   43,   44,    0,  143,    0,
    0,    0,    0,   48,    0,    0,    9,  144,    0,  456,
   12,   13,  128,   15,  457,    0,    0,  129,   20,    0,
    0,    0,    0,   41,   42,   43,   44,   22,    0,    0,
    0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,   42,   43,   44,    0,    0,    0,    0,
    0,    0,   48,
};
static int yycheck[] = {                                      86,
    0,  221,   46,   58,   71,   61,   21,    7,    8,    9,
   10,   11,   12,   13,   42,    0,   16,  436,   53,   19,
   20,   58,  476,   61,   42,    0,   19,  101,   58,   29,
   60,  423,   38,    7,    0,   90,   42,   37,  286,  101,
   47,   10,   61,   42,   40,  107,   58,   47,  135,   84,
   90,    0,  125,   53,   90,  126,   56,  526,   58,   40,
  115,  260,   60,  126,   60,  123,   58,   59,  433,   61,
   60,   71,  126,  123,  260,  115,   91,  114,  276,  115,
   44,   44,   63,   90,   84,  305,  101,   40,   58,   60,
   90,  320,  107,   60,  258,  110,   59,   42,   38,   44,
  125,   40,   58,    7,   53,   58,   42,   56,   61,  599,
   91,   44,  112,  113,  114,  115,   60,   62,   46,  283,
  349,  320,   61,   58,  124,  125,  324,  127,  865,  129,
  130,   41,  132,  623,  320,   84,  873,   44,   91,  139,
   60,  141,   40,  112,  144,  145,  146,  147,   58,   59,
  349,  125,   91,  123,   58,  170,   91,   40,  127,  125,
  160,  125,   61,  349,   61,  276,  257,  123,  168,  138,
  123,  171,  172,  173,  174,  286,  125,    7,   60,  179,
   10,  150,   42,  274,  275,  262,  257,  123,   61,   40,
   42,  268,  125,   40,  257,   41,   40,   38,   44,  276,
  274,   42,   59,  257,   40,  278,  279,  280,   40,   40,
   58,  680,  274,  123,  276,   59,  274,  275,  125,  168,
  612,  125,   44,  278,  274,  275,  130,  294,   59,  257,
   44,  700,  257,   40,  234,  322,  243,  293,  257,  257,
   62,   71,   90,  334,  244,   44,  276,  324,  276,  323,
  262,  616,   40,  320,   40,  293,  286,  257,  257,  678,
   90,  323,  317,  262,  326,   40,  123,  115,  268,   40,
   41,  313,  272,  317,  329,  244,   60,  276,  278,  279,
  276,  281,  112,  257,  114,  115,  279,  123,  286,  329,
  286,   44,  292,  329,  748,  125,  324,  127,   42,  292,
  130,  293,    0,  278,  279,  280,   38,  313,  138,  123,
   42,  326,  278,  279,  280,  321,  316,  317,  257,  286,
  150,  257,  262,    0,  257,  324,  125,   38,   60,  329,
    7,   42,    9,  407,  315,  316,  371,  276,  405,  257,
  276,  274,  275,   20,  262,  407,  765,  125,  410,   47,
  257,  406,  327,  328,  329,   53,   40,  826,   56,  257,
  829,  327,  328,  329,  262,  402,  406,  274,  275,  838,
  406,  371,   42,  388,  257,  286,   53,   59,  276,   56,
  799,    0,  348,  349,  853,  324,   84,  387,  324,  317,
  318,  123,   90,  276,  293,  410,  293,  295,  398,  868,
   59,  334,  402,  403,   42,  257,  406,   84,  433,   59,
  257,  262,  881,   44,  244,  834,  276,  274,  275,   44,
  293,  257,  371,  423,  272,  276,  324,  334,  428,  276,
  278,   60,   41,  433,   53,   44,  293,   56,  438,   58,
  276,  324,  272,  443,  295,  445,  508,  124,  278,  449,
  286,  400,   60,  673,  509,  455,  456,  457,  257,  433,
  274,  275,  276,  293,  324,   84,   61,  467,  125,  317,
  168,   90,  313,  324,  467,  274,  275,  324,    0,   60,
  321,  329,  482,   58,  433,  321,  257,  317,  324,  257,
  320,  168,  276,  262,  125,  257,  115,   40,  262,  329,
  123,  526,  286,  503,  504,  276,  506,   44,  276,  509,
  324,  511,   44,  257,   61,  286,   40,    7,   37,  125,
   63,  274,  275,   42,  524,   47,  526,   46,   47,  433,
   62,   53,  276,   59,   56,  334,   58,  537,  625,   29,
   41,  445,   93,   40,  276,  243,  257,   37,   91,  168,
  321,  262,  526,  324,  286,  262,  324,   40,  406,   59,
   44,   61,   84,  295,   41,  276,   63,   44,   90,  276,
  348,  349,  402,  257,   58,  405,  406,  526,  262,   41,
  324,  313,   59,  583,  295,   93,  836,  257,  125,  321,
  590,  616,  324,  115,   91,  257,   41,  123,  598,   44,
   90,   38,  313,  433,  281,   42,  276,  274,  275,  609,
  321,   44,  612,  324,  276,  445,  616,  324,   41,  257,
  281,   44,  526,  113,  114,  115,  257,  877,  663,   62,
  630,  666,  882,  633,    0,  125,  605,  267,  276,  123,
  130,  641,  616,  274,  275,   41,  168,  276,   44,  139,
  257,  267,  257,  272,  324,  680,  504,  286,  506,  278,
   61,  509,  324,  663,  325,  326,  666,  616,  276,  669,
  160,  276,  257,  371,  504,  700,  506,  257,  286,  509,
  680,  171,  172,  173,  174,  634,  324,   53,  257,  179,
   56,  348,  349,  267,  371,  276,  526,  697,  317,  699,
  700,  345,  257,  334,   58,  286,  680,   40,   58,   38,
  329,   40,  616,   42,  663,   58,  716,  666,   84,  324,
  257,  243,  123,   58,   90,   59,  700,  727,  728,  260,
   59,  680,   58,   59,   60,   44,   90,  274,  275,   44,
   40,   44,  348,  349,  234,  807,  423,  696,  274,  275,
  272,  700,  371,   62,  754,  125,  278,   61,  758,   40,
   42,  115,   44,   41,  764,  257,   44,  257,  717,   42,
  136,  720,  315,  316,   41,  605,  680,   44,  268,  764,
   62,  257,  272,  125,   58,  257,  616,  406,  278,  123,
  274,  275,  622,  808,   44,  317,  700,  334,  317,  318,
  276,  826,  168,  865,  829,   41,  806,  329,   44,  844,
  845,  873,   44,  838,  257,  764,   90,  125,  315,  316,
  125,  321,  125,  772,  324,  774,  826,  317,  853,  829,
   62,  831,  332,  333,   44,  257,   40,  257,  838,  329,
  855,  115,  123,  868,  844,  845,  831,  847,  324,  371,
  680,  866,  826,  853,  276,  829,  881,   62,   41,  874,
   40,   44,  847,  863,  838,   40,  815,   40,  868,  884,
  700,   62,  887,  274,  275,  125,   59,  826,  863,  853,
  829,  881,  831,   63,  406,  504,  257,  506,   41,  838,
  509,   44,  293,  842,  868,  844,  845,   40,  847,   38,
  271,   40,  324,   42,  853,  276,  272,  881,  278,  279,
  280,   91,  402,  123,  863,   62,  406,   40,  272,  868,
   63,   62,  826,   41,  278,  829,   44,   41,  257,   41,
   44,  323,  881,  262,  838,  612,  278,  279,  280,   44,
  274,  275,   59,  433,   58,   59,  267,  276,   91,  853,
  276,   93,  257,  324,  257,  445,  633,   62,   38,   40,
  286,   40,   42,  317,  868,  663,  295,   93,  666,  274,
  275,  274,  275,  281,  257,  329,  257,  881,   44,   93,
   60,   40,  504,   59,  506,   41,  663,  509,   44,  666,
   59,   41,  321,  276,   44,  324,  826,   41,  272,  829,
  123,   60,   58,   59,  278,  371,  123,  257,  838,  123,
   40,  125,   59,   60,  504,   59,  506,  325,  326,  509,
   40,  511,  330,  853,  274,  275,   38,   33,   40,  334,
   42,  334,   59,   60,  315,  316,  526,   93,  868,  716,
  406,  324,   44,  317,  663,  281,   44,  666,   60,   40,
   41,  881,  406,   44,  257,  329,  257,  123,   41,   61,
   62,   44,  664,  665,  274,  275,  764,  123,   59,  125,
   61,   62,   37,  276,   40,   58,   59,   42,   43,  445,
   45,   46,   47,  286,  334,   40,  632,  764,   40,  325,
  326,  327,  328,  329,  330,  257,   44,   63,   41,   27,
   91,   44,   30,   31,   32,   33,   34,   35,   36,   37,
   93,   39,   40,   44,  276,   38,   59,   40,  257,   42,
  126,  324,   45,  262,  286,   91,  616,   55,   56,  257,
   61,   62,  406,  831,  257,  315,  316,   59,   60,  260,
  123,  663,  125,  257,  666,  764,  844,  845,  123,  847,
  504,  641,  506,   40,  831,  509,  295,  274,  275,   41,
  274,  275,  324,  709,   42,  863,   44,  844,  845,  715,
  847,   40,  315,  316,  313,  123,  257,  257,  257,  669,
  276,  262,  321,  262,   62,  324,  863,  789,  790,   44,
  680,  123,  315,  316,   63,  276,  276,  276,  257,   41,
  123,  257,   44,  262,  321,  286,  286,   62,  274,  275,
  700,  281,  831,   61,  295,   40,  295,  276,  274,  275,
  334,   41,   91,   40,   44,  844,  845,  286,  847,  276,
  504,  777,  506,  313,   40,  509,  295,  727,  728,  286,
  321,  321,  764,  324,  863,  324,   40,  175,  176,  276,
  257,  179,  258,  259,  260,  325,  326,   41,   41,  286,
  330,   44,  321,   41,  276,  324,  257,  813,   33,  276,
  276,  262,   44,   38,  257,   40,   61,   42,  334,  286,
   45,  287,  288,  289,  290,  276,  123,  293,  294,  295,
   62,  274,  275,  257,   41,  123,   41,  663,   44,   44,
  666,  313,  257,   40,  295,   41,  234,  262,   40,  831,
   61,  257,  276,  319,  320,   40,   62,  324,  324,  257,
   61,  276,  844,  845,  262,  847,  274,  275,  256,  257,
  258,   63,  260,  324,  257,   59,  826,   37,  276,  829,
  295,  863,   42,   43,  350,   45,   46,   47,  838,  315,
  316,  334,  317,  318,  276,   59,   59,  295,  123,   91,
  324,  126,  290,  853,  286,  327,  328,  329,  330,  324,
  298,  299,  300,  257,  302,  303,   33,   44,  868,   41,
   59,   38,   61,   40,  257,   42,  324,   59,   45,   61,
   41,  881,  315,  316,   59,   44,   61,   41,  764,   40,
   44,  123,   41,  331,  332,  333,  334,  335,  336,  337,
  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,   63,  257,  352,  353,  354,  355,  356,  357,
  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
  123,  369,  370,  257,   59,   41,  315,  316,   44,   38,
   91,   40,   41,   42,   41,   44,  123,   44,  123,  278,
  279,  280,  276,   40,   41,  831,  123,   44,  125,  126,
   59,   41,   61,   62,  123,   40,   40,  257,  844,  845,
   40,  847,   59,   61,   61,   62,   41,   38,  293,   40,
   41,   42,  257,  258,  259,  260,  276,  863,   63,   44,
  265,  266,   91,  268,  269,  270,  271,  272,  273,   60,
  324,  276,  277,   58,   91,  295,   40,   41,   40,   40,
   44,  286,  287,  288,  289,  290,   91,   61,  293,  294,
  295,   59,   60,  461,  123,   59,  321,   61,   62,  324,
   41,   63,  293,   44,  324,   40,  257,  332,  333,  477,
  315,  316,  480,    0,  319,  320,  321,  322,  323,  324,
   59,   41,   41,   58,   59,   44,  331,   91,  257,   91,
  321,   40,   58,  324,   41,   44,   40,   40,  123,   58,
   59,  332,  333,  315,  316,  350,   33,  276,   40,   40,
   40,   38,   61,   40,   40,   42,   41,   44,   45,   63,
  257,  258,  259,  260,  304,  305,  295,  274,  275,  274,
  275,   63,   59,   63,   93,   58,   41,  317,  318,  276,
  281,   59,   91,   59,  257,  274,  275,   91,  293,  257,
  287,  288,  289,  290,   40,  324,  293,  294,  295,   91,
   41,   91,  321,  276,  123,  324,  125,  257,  276,  321,
    0,   41,  324,  332,  333,  278,  279,  280,  315,  316,
  332,  333,  319,  320,  325,  326,  276,  324,  257,  330,
   59,   40,   40,  262,  315,  316,  123,    0,  125,  126,
  257,  123,  257,   33,  123,  262,  614,  615,   38,   61,
   40,  324,   42,  350,   63,   45,  324,   59,   59,  276,
   59,  276,   44,  327,  328,  329,  295,  257,  123,   59,
   59,  639,  281,   59,  324,  293,   58,  262,  295,   61,
  295,   41,   91,   40,  313,  276,   41,  655,   44,  274,
  275,  276,  321,  257,   44,  324,  664,  665,  262,  667,
   41,  257,  257,  321,  319,  330,  324,  324,  276,  324,
  315,  316,  276,  257,  332,  333,  325,  326,  286,  293,
  688,  330,  313,  257,  692,   59,   60,  257,  258,  259,
  260,  295,  276,  123,   59,  125,  126,   33,  257,  324,
  341,  123,   38,  276,   40,  257,   42,  321,  276,   45,
  324,  295,  257,  315,  316,  274,  275,  286,  332,  333,
  324,  729,  276,   59,  732,  733,  734,  735,  736,   61,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  324,  268,  269,  270,  271,  272,  273,  276,  276,  276,
  277,  278,  279,  280,  281,   40,  276,   40,  123,  286,
  287,  288,  289,  290,   61,   60,  293,  294,  295,   91,
  778,  315,  316,   91,   61,  334,   40,  276,   63,  321,
   63,  789,  790,  315,  316,  315,  316,  123,  315,  316,
  126,  123,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,   40,   91,  334,   91,  276,
  257,  338,   59,   60,  341,  823,  276,  344,  345,  346,
  347,  348,  349,  350,  321,   59,   60,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,    0,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  274,  275,   59,   60,  286,  287,  288,  289,
  290,   59,   60,  293,  294,  295,  315,  316,   37,  321,
   33,  293,  324,   42,   43,   38,   45,   46,   47,   42,
  332,  333,   45,  321,  286,  315,  316,  257,   42,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  276,  257,  334,  720,   59,   59,  338,  274,
  275,    7,  286,  281,  344,  345,  346,  347,  348,  349,
  350,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  274,  275,   90,  268,  269,  270,  271,  272,
  286,  287,  288,  289,  290,   40,  641,  293,  294,  295,
  123,  293,  125,  126,   33,  601,  590,   -1,  696,   38,
  123,   40,   -1,   42,   -1,   40,   45,   -1,   63,  315,
  316,   -1,  257,  319,  320,  321,  322,  323,  324,   -1,
   59,   -1,   40,   58,   59,  331,   61,   -1,  334,   -1,
   59,  276,  338,   -1,   44,   -1,   91,  330,  344,  345,
  346,  347,   -1,   59,  350,   63,   -1,   -1,   58,   -1,
  295,    0,   58,   59,  321,   61,   91,  324,   40,  276,
  315,  316,  315,  316,  321,  332,  333,  324,   -1,  286,
   -1,   -1,  276,   91,   -1,  332,  333,   -1,   -1,  324,
   -1,   63,  286,   40,   33,   91,  125,  126,  123,   38,
   -1,   40,   -1,   42,  123,   -1,   45,   -1,   -1,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   63,  123,  276,   91,
   59,  286,   -1,  123,   -1,   -1,   -1,  123,  286,  278,
  279,  280,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,   91,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,   40,
   -1,  274,  275,  286,  287,  288,  289,  290,   40,   -1,
  293,  294,  295,   -1,   -1,  304,  305,   -1,  327,  328,
  329,   59,   63,  312,  123,   -1,  125,  126,  317,  318,
   38,   63,  315,  316,   42,   -1,  319,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,   -1,
   91,  334,   60,   -1,   -1,  338,   59,   -1,  341,   91,
   -1,  344,  345,  346,  347,  348,  349,  350,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,  123,   -1,  276,  277,  278,
  279,  280,  281,   -1,   -1,  274,  275,  286,  287,  288,
  289,  290,  262,   -1,  293,  294,  295,   -1,  274,  275,
  315,  316,   33,   -1,  274,  275,   -1,   38,  126,   -1,
  123,   42,   -1,   -1,   45,   -1,  315,  316,  634,   -1,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,   -1,   -1,  334,  125,  315,  316,  338,
   -1,   -1,  341,    0,   -1,  344,  345,  346,  347,  348,
  349,  350,  261,  262,  263,  264,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  315,  316,   -1,   33,  286,  287,  288,
  289,  290,   -1,   40,  293,  294,  295,   -1,   45,  338,
  339,  340,  341,  342,  343,  126,   -1,   -1,  315,  316,
   -1,  717,   59,   -1,  720,   -1,  315,  316,   -1,   44,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,   58,   -1,  334,  274,  275,   -1,  338,
   -1,   -1,  341,   -1,  281,  344,  345,  346,  347,  348,
  349,  350,    0,   -1,   -1,   -1,   -1,  265,  266,   40,
  268,  269,  270,  271,  272,  273,  772,   -1,  774,  277,
   -1,  274,  275,  281,  315,  316,  123,   44,  125,  126,
  281,   40,   63,  315,  316,   33,   -1,   -1,  325,  326,
   -1,   58,   59,  330,   -1,   -1,   -1,   45,  123,  278,
  279,  280,   -1,   -1,   63,  313,   -1,   -1,   -1,  815,
   91,   -1,   40,  281,  322,  323,   -1,  325,  326,  327,
  328,  329,  330,  331,  325,  326,   -1,   -1,   40,  330,
   40,   -1,   91,   -1,   -1,   63,  842,  258,  259,  260,
   -1,   40,  268,  269,  270,  271,  272,   -1,  327,  328,
  329,   63,  281,   63,   -1,  276,  123,  325,  326,  327,
  328,  329,  330,   91,   63,   -1,  287,  288,  289,  290,
   -1,   -1,  293,  294,  295,  123,   -1,  125,  126,   91,
   -1,   91,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   -1,   44,   91,   -1,   -1,   33,  325,  326,  319,  320,
   38,  330,   40,  324,   42,   -1,   59,   45,   61,   62,
   -1,  258,  259,  260,  261,  281,  263,  264,  265,  266,
   -1,  268,  269,  270,  271,  272,  273,  274,  275,  350,
  277,  278,  279,  280,  281,   -1,   -1,  262,   91,  286,
  287,  288,  289,  290,   40,   41,  293,  294,   44,  274,
  275,   -1,  257,   91,   40,   -1,   -1,  262,   -1,  325,
  326,   -1,   -1,   59,  330,   61,   62,   -1,  315,  316,
  123,  276,  319,  320,   -1,  322,  323,   63,  325,  326,
  327,  328,  329,  330,  331,  123,   40,  334,  126,   -1,
  295,  338,   -1,   -1,  341,   91,   -1,  344,  345,  346,
  347,  348,  349,  350,   -1,   91,   -1,  274,  275,   63,
  258,  259,  260,  261,   -1,  263,  264,  265,  266,  324,
  268,  269,  270,  271,  272,  273,  274,  275,   -1,  277,
  278,  279,  280,  281,  315,  316,   -1,   91,  286,  287,
  288,  289,  290,   33,   -1,  293,  294,   -1,   38,   -1,
   40,   41,   42,   33,   -1,   45,  315,  316,   38,   -1,
   40,   -1,   42,  281,   -1,   45,   -1,  315,  316,   -1,
   -1,  319,  320,   -1,  322,  323,   -1,  325,  326,  327,
  328,  329,  330,  331,   -1,   -1,  334,  315,  316,   -1,
  338,   -1,   -1,  341,   -1,  281,  344,  345,  346,  347,
  348,  349,  350,  315,  316,  315,  316,  325,  326,  262,
   -1,   40,  330,   93,  281,   -1,  315,  316,   -1,  257,
  258,  259,  260,   33,   40,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,  123,   63,   45,  126,   -1,  276,  325,
  326,   -1,  295,  123,  330,   -1,  126,   63,   -1,  287,
  288,  289,  290,   -1,   -1,  293,  294,  295,  325,  326,
  313,  257,   91,  330,   33,   -1,  262,   -1,  321,   38,
   -1,   40,   -1,   42,   -1,   91,   45,  315,  316,   -1,
  276,  319,  320,   -1,   -1,   -1,  324,   38,   -1,   40,
   41,   42,   -1,   44,   -1,   -1,   40,   -1,   40,  295,
   40,   -1,   -1,   -1,   40,   -1,   -1,   -1,   59,   40,
   61,   62,  350,  123,  281,   -1,  126,   -1,   -1,   63,
   -1,   63,   40,   63,   93,   -1,   -1,   63,  324,  315,
  316,   -1,   63,   -1,   33,   -1,   -1,   -1,   -1,   38,
   91,   40,   41,   42,   -1,   63,   45,   91,   -1,   91,
   -1,   91,   -1,   -1,  123,   91,   -1,  126,  325,  326,
   91,  315,  316,  330,   -1,   -1,   40,  257,  258,  259,
  260,   -1,  123,   91,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,   33,   -1,   -1,  276,   -1,   38,   63,
   40,   -1,   42,   -1,   -1,   45,  276,  287,  288,  289,
  290,   -1,   -1,  293,  294,  295,   -1,  287,  288,  289,
  290,   -1,   -1,  293,  294,  295,   -1,   91,   40,   -1,
   -1,   -1,   -1,   40,  123,  315,  316,  126,   -1,  319,
  320,   -1,   -1,   -1,  324,  315,  316,   -1,   -1,  319,
  320,   63,   40,   -1,  324,   40,   63,  257,  258,  259,
  260,   -1,   33,  281,   -1,   -1,   -1,   38,   -1,   40,
  350,   42,   -1,   -1,   45,   63,  276,   -1,   63,   91,
  350,   -1,   -1,  123,   91,   -1,  126,  287,  288,  289,
  290,   -1,   -1,  293,  294,  295,  315,  316,  257,  258,
  259,  260,   40,   91,   -1,   -1,   91,  325,  326,  315,
  316,   -1,  330,   -1,  281,  315,  316,  276,   -1,  319,
  320,  262,   -1,   40,  324,   63,   -1,   -1,  287,  288,
  289,  290,   33,   -1,  293,  294,  295,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   63,   -1,   -1,   -1,
  350,   -1,  123,   91,  295,  126,  315,  316,  325,  326,
  319,  320,   -1,  330,   -1,  324,   -1,   -1,  257,  258,
  259,  260,  313,   -1,   91,   -1,   -1,   -1,   -1,   -1,
  321,  315,  316,  315,  316,  315,  316,  276,   -1,  315,
  316,  350,   -1,   40,  315,  316,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,  293,  294,  295,  315,  316,   40,
   -1,   41,   -1,   -1,   44,   -1,   63,  257,  258,  259,
  260,   -1,  123,   44,   -1,  126,  315,  316,   58,   59,
  319,  320,   63,   37,   -1,  324,  276,   58,   42,   43,
   -1,   45,   46,   47,   91,   40,   -1,  287,  288,  289,
  290,  315,  316,  293,  294,  295,   60,   -1,   62,   -1,
   91,  350,   -1,   93,   -1,   -1,   -1,  281,   63,   -1,
   -1,   -1,   -1,   -1,   -1,  315,  316,   -1,   40,  319,
  320,   -1,   41,   -1,  324,   44,  257,  258,  259,  260,
   -1,   -1,   -1,  123,   -1,  125,   91,   -1,   -1,   58,
   59,   63,  123,  315,  316,  276,   -1,  125,  315,  316,
  350,  325,  326,  327,  328,  329,  287,  288,  289,  290,
   -1,   44,  293,  294,  295,   -1,   -1,  315,  316,   91,
  315,  316,   -1,   -1,   93,   58,   -1,   -1,   61,   -1,
   -1,   -1,   -1,   -1,  315,  316,   -1,   -1,  319,  320,
   -1,   41,   -1,  324,   44,   -1,  257,  258,  259,  260,
   -1,   -1,   -1,   -1,  123,   -1,  125,   44,   58,   59,
   -1,   61,   -1,   -1,   -1,  276,   -1,  315,  316,  350,
   -1,   58,   59,   -1,   -1,   -1,  287,  288,  289,  290,
   -1,   -1,  293,  294,  295,   -1,   -1,   33,  315,  316,
  123,   37,   38,   93,   40,   -1,   42,   43,   44,   45,
   -1,   47,   -1,   -1,  315,  316,   -1,   -1,  319,  320,
   -1,   -1,   -1,  324,   60,   61,   62,  257,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  274,  275,  123,   -1,   -1,  350,
   -1,   -1,   -1,  274,  275,   91,   -1,   -1,   94,   -1,
  278,  279,  280,   -1,   -1,   -1,   -1,   -1,  315,  316,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,  315,  316,   -1,   -1,  124,  281,
  126,   -1,   58,   59,   60,   61,   62,   63,  257,   -1,
  304,  305,   -1,   -1,  334,   -1,  310,  311,  312,  327,
  328,  329,   -1,  317,  318,  274,  275,   -1,   -1,   -1,
  315,  316,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
  348,  349,  281,  325,  326,  327,  328,  329,  330,   37,
   38,   44,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,  274,  275,  315,  316,   58,   59,  123,  124,  125,
   58,   59,   60,   61,   62,   63,   -1,  257,   -1,   -1,
  293,   -1,   -1,   -1,   -1,  334,  325,  326,  327,  328,
  329,  330,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,   -1,   -1,  306,  307,   -1,   -1,
  123,  257,   -1,  313,  314,  123,  124,  125,   -1,  265,
  266,   -1,  268,  269,  270,  271,  272,  273,   -1,   -1,
  276,  277,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,
  286,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,   -1,
   -1,  257,   -1,   -1,   -1,  331,  262,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,  274,  275,
  276,   -1,   -1,   -1,   -1,  123,   -1,   -1,   58,   59,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   93,   94,  321,   -1,   -1,  324,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  334,   -1,
   41,  274,  275,   44,   -1,   -1,  274,  275,  276,   -1,
   -1,   -1,   -1,  123,  124,  125,   -1,   58,   59,   -1,
   61,   -1,   -1,  281,   -1,   -1,   -1,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,   93,  321,   37,   38,  324,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,  334,  325,  326,  327,
  328,  329,  330,   40,   41,   58,   59,   44,   61,   62,
   63,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
  257,   58,   59,   -1,   61,   -1,  274,  275,   -1,   -1,
   -1,  268,  269,  270,  271,  272,   -1,   -1,   91,  276,
   93,   94,   -1,   -1,   -1,  293,  284,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
  123,  124,  125,  321,   -1,   -1,  324,  257,   58,   59,
   60,   61,   62,   63,  332,  333,  123,  324,   -1,   -1,
   -1,   -1,   -1,  330,  274,  275,   -1,  335,  336,  337,
  338,  339,  340,  341,  342,  343,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,   -1,   -1,  123,  124,  125,  257,   -1,   -1,   -1,
   -1,   37,   38,   -1,  334,   41,   42,   43,   44,   45,
   46,   47,   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   -1,   -1,   -1,
  281,   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,
  301,  302,  303,   -1,   -1,  306,  307,   -1,   -1,   -1,
   -1,   -1,  313,  314,  257,   -1,   -1,   93,   94,   37,
   38,   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,
   -1,  274,  275,  334,  325,  326,  327,  328,  329,  330,
   -1,   -1,   60,   -1,   62,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  334,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  274,  275,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   94,
   -1,  265,  266,   -1,  268,  269,  270,  281,   -1,  273,
   -1,   37,   38,  277,  334,   41,   42,   43,   44,   45,
   46,   47,  286,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,  257,   58,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,
   -1,  325,  326,  327,  328,  329,  330,   -1,   -1,  323,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
   -1,  317,  318,   -1,   -1,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,   37,   38,  281,  334,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,  281,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,
  308,  309,  310,  311,  312,  313,   -1,   -1,   -1,  317,
  318,  325,  326,  327,  328,  329,  330,   -1,   -1,   -1,
   -1,   93,   94,  325,  326,  327,  328,  329,  330,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   41,   47,   -1,   44,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,   58,   59,   60,   61,   62,   58,
   59,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,   -1,   -1,  257,   -1,   93,
   94,  257,   -1,   -1,   93,  265,  266,   -1,  268,  269,
  270,   -1,   -1,  273,   -1,   -1,  276,  277,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,  123,
  124,  125,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,   -1,
   -1,  317,  318,  323,  324,   -1,   -1,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   61,   62,   -1,   -1,  257,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,   -1,   -1,  265,  266,   -1,  268,
  269,  270,  274,  275,  273,   -1,   -1,  276,  277,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,  286,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  123,  124,  125,  318,   -1,   -1,   -1,
   -1,   -1,  321,  257,  323,  324,   -1,   -1,  257,   37,
   38,   -1,  334,   41,   42,   43,   44,   45,   -1,   47,
  274,  275,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,   -1,   -1,  318,   93,   94,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
  334,   -1,   -1,   -1,   -1,  334,   -1,   -1,   58,   59,
   60,   61,   62,   -1,   -1,  123,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,  257,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,   -1,   -1,   -1,  318,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  257,   -1,   -1,
  318,   -1,   -1,   -1,   -1,  123,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,  274,  275,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,   37,   38,   -1,  318,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  334,   -1,   58,   59,   60,   61,
   62,   -1,  304,  305,   -1,   -1,  308,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   38,   93,   94,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   61,   -1,   -1,   -1,   -1,   -1,  257,
   -1,  123,  124,  125,   -1,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   -1,   47,  274,  275,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   58,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,   -1,   -1,   -1,
  318,   93,   94,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,  334,   41,   -1,   -1,
   44,   -1,   -1,   -1,   58,   59,   60,   61,   62,   -1,
   -1,  123,  124,  125,   58,   59,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,   93,
   94,   -1,  281,   -1,   -1,   -1,   -1,  286,   -1,   93,
   -1,   -1,   -1,   -1,   -1,  257,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,  274,  275,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,   -1,  262,   -1,  318,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,   -1,  277,
   -1,   -1,  334,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  295,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,  274,  275,   -1,  313,   -1,   -1,   -1,   58,
   59,   60,   61,   62,  322,  323,   -1,  325,  326,  327,
  328,  329,  330,  331,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  257,   93,   94,  318,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,  123,  124,  125,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   37,   38,   -1,  318,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
  334,   44,   58,   59,   60,   61,   62,   -1,   -1,   -1,
  334,   -1,  257,   -1,   -1,   58,   59,  262,   -1,   -1,
  265,  266,   -1,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,   -1,   -1,   -1,   -1,   93,   94,   -1,
   38,  286,   40,   41,   42,   -1,   44,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   62,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  321,  322,  323,  324,
  123,   -1,  125,   -1,   -1,   -1,  331,   -1,  257,   -1,
   37,   38,   -1,   91,   41,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   93,   94,   -1,  318,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   58,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  274,  275,   -1,   -1,   -1,   -1,   93,   94,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  257,
   -1,   -1,  318,   -1,  262,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,  334,   47,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,   -1,  324,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  123,  124,
  125,  318,   37,   -1,   -1,   -1,   41,   -1,   43,   44,
   -1,   46,   47,   -1,   -1,   -1,   41,  334,   -1,   44,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
   -1,  257,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  124,
  125,   -1,  318,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   37,   -1,   -1,   -1,   41,  334,   43,
   44,   -1,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  124,  125,   -1,  318,   -1,   -1,   -1,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   41,   47,  334,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   58,   59,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   93,
   -1,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
   -1,   -1,  317,  318,  123,  124,  125,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,  334,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,   -1,  317,  318,   -1,  123,  124,  125,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
  334,   47,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   -1,  257,   -1,
   -1,   58,   59,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   37,   -1,   -1,  334,   41,   -1,   43,   44,
  334,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,   -1,  124,
  125,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,   43,
   44,   45,   41,   -1,   -1,   44,   41,  334,   -1,   44,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   58,
   59,  257,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,   93,
   94,   -1,   -1,   -1,   93,   -1,   -1,   -1,   93,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  123,
  124,  125,   -1,   -1,  123,   -1,  125,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   38,
   -1,   -1,   41,   -1,   43,   44,   45,  334,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
   -1,   -1,  317,  318,  123,  124,  125,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   41,  334,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   -1,  257,   -1,   58,   59,   -1,  257,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,  274,  275,   -1,   -1,  274,
  275,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  334,   38,   -1,   -1,   41,  334,   -1,   44,   -1,  334,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  123,  124,  125,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   38,   -1,
   40,   41,   42,   -1,   44,  334,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   -1,   -1,  257,   -1,   -1,   59,
   -1,   61,   62,   -1,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,  274,  275,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  123,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  334,   38,   -1,   -1,   41,   -1,   -1,
   44,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,   -1,  123,
  124,  125,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  276,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  295,   -1,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  123,  124,  125,
   -1,   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  321,   -1,   -1,  324,  334,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
   -1,   -1,  306,  307,  308,  309,  310,  311,   -1,  313,
  314,  123,  124,  125,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  334,   -1,   -1,   -1,   58,   59,   60,   61,   62,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,   -1,   -1,
  306,  307,  308,  309,  310,  311,   -1,  313,  314,  123,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,   -1,   -1,  306,  307,  308,  309,  310,  311,
   -1,  313,  314,   -1,  123,  124,  125,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  334,   -1,   -1,   -1,   -1,   58,   59,   -1,
   61,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
   -1,   -1,  306,  307,  308,  309,  310,  311,   -1,  313,
  314,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
  334,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,   -1,   -1,  306,  307,  308,
  309,  123,  124,  125,  313,  314,   -1,   37,   38,   -1,
   -1,   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  334,   -1,   -1,   -1,   59,
   -1,   61,   62,   63,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,
  301,  302,  303,   -1,   -1,  306,  307,  308,  309,   -1,
   -1,   -1,  313,  314,  124,  125,  126,   38,   -1,   94,
   -1,   42,   -1,   44,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  334,   -1,   -1,   -1,   -1,   -1,   60,
   61,   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,  274,  275,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,   -1,   -1,  306,  307,  123,  124,  125,  257,
   -1,  313,  314,   -1,  262,   -1,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   41,  276,  277,
   44,   -1,  334,  281,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  265,  266,   -1,  268,  269,
  270,  271,  272,  273,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  281,   -1,  321,  322,  323,  324,  325,  326,   93,
   -1,   -1,   -1,  331,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,  123,
   -1,  125,  322,  323,   -1,  325,  326,  327,  328,  329,
  330,  331,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
  305,   -1,   -1,  308,  309,  310,  311,  312,   -1,   -1,
  257,  262,  317,  318,  265,  266,   -1,  268,  269,  270,
  271,  272,  273,   -1,   -1,   -1,  277,  274,  275,   -1,
  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,   -1,   -1,  306,
  307,   -1,  313,   -1,   -1,   -1,  313,  314,   -1,   -1,
   -1,  322,  323,   -1,  325,  326,  327,  328,  329,  330,
  331,   -1,   -1,   -1,   -1,   37,   38,  334,   40,   -1,
   42,   43,   44,   45,   46,   47,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,   63,   -1,  257,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   60,   91,
   62,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
   -1,   -1,  306,  307,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   33,  124,  125,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   37,   -1,   -1,   -1,   -1,   -1,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   62,   63,  257,   91,
   -1,   -1,   94,  262,   -1,  264,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,  286,   94,   -1,
   -1,   -1,  124,   -1,  126,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,  331,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   37,   -1,   -1,   -1,   -1,   -1,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  286,   59,   -1,   61,   62,   63,
   -1,   -1,   -1,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   91,   -1,  321,
   94,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,  305,   -1,   -1,  308,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,  318,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  320,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,   -1,  314,  315,
  316,  317,  318,   -1,   -1,  321,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,
   44,   38,   -1,   40,   41,   42,   -1,   44,   38,   -1,
   40,   41,   42,   -1,   44,   59,   -1,   61,   62,   -1,
   -1,   -1,   59,  257,   61,   62,   -1,   -1,   -1,   59,
   -1,   61,   62,   -1,   -1,   38,   -1,   40,   41,   42,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   59,   -1,   61,   62,
   -1,   91,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  123,
  314,  315,  316,  317,  318,   -1,  123,  321,   91,   -1,
  324,   37,   38,  123,   -1,   -1,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   63,   37,   38,
  123,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,  124,  125,
   59,   60,   61,   62,   63,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   60,   61,
   62,   63,   91,  257,   -1,   94,   -1,   -1,  262,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   37,   91,
   -1,   -1,   94,   42,   43,  124,   45,   46,   47,   -1,
   -1,  295,   -1,   -1,  257,   -1,   -1,   -1,  295,  262,
   -1,   60,   -1,   62,   -1,  295,   -1,   -1,   -1,  313,
   -1,   -1,  124,   -1,   -1,   -1,  313,  321,   -1,   -1,
  324,   -1,   -1,  313,  321,   -1,   -1,  324,   -1,   -1,
   -1,  321,  295,   -1,  324,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  321,   37,
   38,  324,   40,   -1,   42,   43,   44,   45,   46,   47,
  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   91,   -1,   -1,   94,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  304,  305,   -1,   -1,  308,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,  318,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  262,  124,   -1,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,   -1,
   -1,   -1,  281,   -1,   -1,   -1,   -1,  286,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,  321,  322,  323,  324,  325,  326,   -1,   -1,
   -1,   -1,  331,   -1,   60,   61,   62,   63,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
   -1,   37,   38,  124,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,  286,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   -1,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,   -1,  124,   -1,   91,   37,   38,
   94,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   93,
   94,   58,   -1,   60,   61,   62,   63,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  124,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,  124,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   60,   61,   62,   63,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  124,   -1,   91,   37,   38,   94,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  124,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   60,   61,   62,   63,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  124,   -1,   91,   37,   38,
   94,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   37,   -1,   -1,
  124,   -1,   -1,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,  257,   63,   -1,   94,   -1,  262,   -1,   -1,
  265,  266,   -1,  268,  269,  270,  271,  272,  273,   -1,
   -1,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  286,   -1,   -1,   94,  124,   -1,   -1,   -1,   -1,
  295,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,   -1,  268,  269,  270,  271,  272,  273,   -1,   -1,
  276,  277,   -1,   -1,  124,  125,  321,  322,  323,  324,
  286,   -1,   -1,   -1,   -1,   -1,  331,   -1,   -1,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  321,  322,  323,  324,   -1,
   -1,   -1,   -1,   -1,   -1,  331,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  286,   -1,  317,  318,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,  314,  315,  316,  317,  318,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,  276,  277,
   -1,  257,   -1,  281,   -1,   -1,  262,   -1,  286,  265,
  266,   -1,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,  322,  323,  324,  325,  326,   -1,
   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  321,  322,  323,  324,  257,
   -1,   -1,   -1,   -1,  262,  331,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,  276,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,  295,  265,  266,
   -1,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,  321,  322,  323,  324,   -1,  295,  257,
   -1,   -1,   -1,  331,  262,   -1,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,  276,  277,
   -1,   -1,   -1,   -1,  321,  322,  323,  324,  286,   -1,
  257,   -1,   -1,   -1,  331,  262,   -1,   -1,  265,  266,
   -1,  268,  269,  270,  271,  272,  273,   -1,   -1,  276,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,  321,  322,  323,  324,   -1,   -1,  257,
   -1,   -1,   -1,  331,  262,   -1,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,  276,  277,
   -1,   -1,   -1,   -1,  321,  322,  323,  324,  286,  257,
   -1,   -1,   -1,   -1,  331,   -1,   -1,  265,  266,   -1,
  268,  269,  270,  271,  272,  273,   -1,   -1,  276,  277,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,
   -1,   -1,   -1,  321,  322,  323,  324,   -1,  257,   -1,
   -1,   -1,   -1,  331,   -1,   -1,  265,  266,   -1,  268,
  269,  270,  271,  272,  273,   -1,   -1,  276,  277,   -1,
   -1,   -1,   -1,  321,  322,  323,  324,  286,   -1,   -1,
   -1,   -1,   -1,  331,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  321,  322,  323,  324,   -1,   -1,   -1,   -1,
   -1,   -1,  331,
};
static int yyctable[] = {                                     21,
  267,   -1,   45,  267,   -1,   46,  267,   -1,   47,  267,
   -1,   84,  375,   -1,  123,   84,  375,   -1,  124,   84,
   -1,  125,   84,   -1,  143,   91,   -1,  129,   91,   -1,
   44,   91,   -1,  149,  370,   -1,  143,  354,   -1,  129,
  354,   -1,   44,  354,   -1,  143,  355,   -1,  129,  355,
   -1,   44,  355,   -1,  143,  356,   -1,  129,  356,   -1,
   44,  356,   -1,  159,  357,   -1,  143,   94,   -1,  129,
   94,   -1,   44,   94,   -1,  143,  447,   -1,   30,  447,
   -1,   31,  447,   -1,   37,  447,   -1,  176,  447,   -1,
  143,  445,   -1,   30,  445,   -1,   31,  445,   -1,   37,
  445,   -1,  176,  445,   -1,  262,    2,   -1,  267,  267,
   -1,  279,   90,   -1,   90,  202,   -1,  281,  202,   -1,
  288,   79,   -1,  289,   79,   -1,  290,   42,   -1,  291,
   42,   -1,  151,  336,   -1,  283,  336,   -1,  284,  336,
   -1,  314,  336,   -1,  285,  336,   -1,   17,   15,   -1,
   18,   15,   -1,  168,   15,   -1,  371,   17,   -1,  126,
  370,   -1,  129,  370,   -1,   44,  370,   -1,  267,  268,
   -1,  435,   84,   -1,  438,   90,   -1,  442,  370,   -1,
  450,  370,   -1,  438,   99,   -1,  438,   96,   -1,  438,
   97,   -1,  438,   98,   -1,  438,  100,   -1,  447,   86,
   -1,  350,  446,   -1,  351,  446,   -1,  366,  446,   -1,
  367,  446,   -1,  370,  446,   -1,  472,  244,   -1,  473,
  246,   -1,  350,  391,   -1,  351,  391,   -1,  366,  391,
   -1,  367,  391,   -1,  370,  391,   -1,  350,  393,   -1,
  351,  393,   -1,  366,  393,   -1,  367,  393,   -1,  370,
  393,   -1,  350,  386,   -1,  351,  386,   -1,  366,  386,
   -1,  367,  386,   -1,  370,  386,   -1,  350,  389,   -1,
  351,  389,   -1,  366,  389,   -1,  367,  389,   -1,  370,
  389,   -1,  350,  390,   -1,  351,  390,   -1,  366,  390,
   -1,  367,  390,   -1,  370,  390,   -1,  476,   84,   -1,
  350,  387,   -1,  351,  387,   -1,  366,  387,   -1,  367,
  387,   -1,  370,  387,   -1,  350,  388,   -1,  351,  388,
   -1,  366,  388,   -1,  367,  388,   -1,  370,  388,   -1,
  467,   90,   -1,  350,  439,   -1,  351,  439,   -1,  366,
  439,   -1,  367,  439,   -1,  370,  439,   -1,  350,  442,
   -1,  351,  442,   -1,  366,  442,   -1,  367,  442,   -1,
  370,  442,   -1,  350,  444,   -1,  351,  444,   -1,  366,
  444,   -1,  367,  444,   -1,  370,  444,   -1,  372,  373,
   -1,  503,   90,   -1,  372,  189,   -1,  374,  189,   -1,
  375,  189,   -1,  376,  189,   -1,  377,  189,   -1,  379,
  194,   -1,  380,  194,   -1,  374,  194,   -1,  375,  194,
   -1,  376,  194,   -1,  377,  194,   -1,  379,  308,   -1,
  385,  308,   -1,  379,  325,   -1,  390,  325,   -1,  395,
  178,   -1,   89,  104,   -1,  515,  150,   -1,  522,  370,
   -1,  154,  202,   -1,  537,   90,   -1,  151,  341,   -1,
  282,  341,   -1,  283,  341,   -1,  284,  341,   -1,  285,
  341,   -1,  379,  195,   -1,  380,  195,   -1,  374,  195,
   -1,  375,  195,   -1,  376,  195,   -1,  377,  195,   -1,
  304,  309,   -1,  379,  304,   -1,  385,  304,   -1,  387,
  304,   -1,  395,  179,   -1,  578,  190,   -1,  579,  190,
   -1,  580,  190,   -1,  581,  190,   -1,  582,  190,   -1,
  578,  200,   -1,  579,  200,   -1,  580,  200,   -1,  581,
  200,   -1,  582,  200,   -1,  379,  196,   -1,  380,  196,
   -1,  374,  196,   -1,  375,  196,   -1,  376,  196,   -1,
  377,  196,   -1,  303,  309,   -1,  379,  303,   -1,  385,
  303,   -1,  387,  303,   -1,   17,  326,   -1,   18,  326,
   -1,  379,  326,   -1,  390,  326,   -1,  168,  326,   -1,
  395,  176,   -1,  613,   84,   -1,  636,  354,   -1,  658,
   63,   -1,  659,   63,   -1,  660,   63,   -1,  661,   63,
   -1,  670,   84,   -1,  447,   85,   -1,  364,  149,   -1,
  365,  149,   -1,  366,  149,   -1,  367,  149,   -1,  350,
  407,   -1,  351,  407,   -1,  366,  407,   -1,  367,  407,
   -1,  370,  407,   -1,  350,  408,   -1,  351,  408,   -1,
  366,  408,   -1,  367,  408,   -1,  370,  408,   -1,  350,
  409,   -1,  351,  409,   -1,  366,  409,   -1,  367,  409,
   -1,  370,  409,   -1,  350,  410,   -1,  351,  410,   -1,
  366,  410,   -1,  367,  410,   -1,  370,  410,   -1,  350,
  411,   -1,  351,  411,   -1,  366,  411,   -1,  367,  411,
   -1,  370,  411,   -1,  350,  412,   -1,  351,  412,   -1,
  366,  412,   -1,  367,  412,   -1,  370,  412,   -1,  350,
  413,   -1,  351,  413,   -1,  366,  413,   -1,  367,  413,
   -1,  370,  413,   -1,  350,  414,   -1,  351,  414,   -1,
  366,  414,   -1,  367,  414,   -1,  370,  414,   -1,  350,
  415,   -1,  351,  415,   -1,  366,  415,   -1,  367,  415,
   -1,  370,  415,   -1,  350,  416,   -1,  351,  416,   -1,
  366,  416,   -1,  367,  416,   -1,  370,  416,   -1,  350,
  417,   -1,  351,  417,   -1,  366,  417,   -1,  367,  417,
   -1,  370,  417,   -1,  350,  418,   -1,  351,  418,   -1,
  366,  418,   -1,  367,  418,   -1,  370,  418,   -1,  350,
  419,   -1,  351,  419,   -1,  366,  419,   -1,  367,  419,
   -1,  370,  419,   -1,  350,  420,   -1,  351,  420,   -1,
  366,  420,   -1,  367,  420,   -1,  370,  420,   -1,  350,
  421,   -1,  351,  421,   -1,  366,  421,   -1,  367,  421,
   -1,  370,  421,   -1,  350,  422,   -1,  351,  422,   -1,
  366,  422,   -1,  367,  422,   -1,  370,  422,   -1,  350,
  423,   -1,  351,  423,   -1,  366,  423,   -1,  367,  423,
   -1,  370,  423,   -1,  350,  424,   -1,  351,  424,   -1,
  366,  424,   -1,  367,  424,   -1,  370,  424,   -1,  350,
  425,   -1,  351,  425,   -1,  366,  425,   -1,  367,  425,
   -1,  370,  425,   -1,  350,  428,   -1,  351,  428,   -1,
  366,  428,   -1,  367,  428,   -1,  370,  428,   -1,  350,
  429,   -1,  351,  429,   -1,  366,  429,   -1,  367,  429,
   -1,  370,  429,   -1,  350,  404,   -1,  351,  404,   -1,
  366,  404,   -1,  367,  404,   -1,  370,  404,   -1,  350,
  405,   -1,  351,  405,   -1,  366,  405,   -1,  367,  405,
   -1,  370,  405,   -1,  350,  395,   -1,  351,  395,   -1,
  366,  395,   -1,  367,  395,   -1,  370,  395,   -1,  350,
  396,   -1,  351,  396,   -1,  366,  396,   -1,  367,  396,
   -1,  370,  396,   -1,  350,  397,   -1,  351,  397,   -1,
  366,  397,   -1,  367,  397,   -1,  370,  397,   -1,  350,
  398,   -1,  351,  398,   -1,  366,  398,   -1,  367,  398,
   -1,  370,  398,   -1,  350,  399,   -1,  351,  399,   -1,
  366,  399,   -1,  367,  399,   -1,  370,  399,   -1,  350,
  402,   -1,  351,  402,   -1,  366,  402,   -1,  367,  402,
   -1,  370,  402,   -1,  350,  400,   -1,  351,  400,   -1,
  366,  400,   -1,  367,  400,   -1,  370,  400,   -1,  350,
  401,   -1,  351,  401,   -1,  366,  401,   -1,  367,  401,
   -1,  370,  401,   -1,  350,  403,   -1,  351,  403,   -1,
  366,  403,   -1,  367,  403,   -1,  370,  403,   -1,  350,
  426,   -1,  351,  426,   -1,  366,  426,   -1,  367,  426,
   -1,  370,  426,   -1,  350,  427,   -1,  351,  427,   -1,
  366,  427,   -1,  367,  427,   -1,  370,  427,   -1,  610,
  261,   -1,  711,  151,   -1,   84,  364,   -1,  727,   84,
   -1,   84,  362,   -1,  728,   84,   -1,  350,  433,   -1,
  351,  433,   -1,  366,  433,   -1,  367,  433,   -1,  370,
  433,   -1,  143,  438,   -1,   30,  438,   -1,   31,  438,
   -1,   32,  438,   -1,   33,  438,   -1,   34,  438,   -1,
   37,  438,   -1,  176,  438,   -1,  350,  443,   -1,  351,
  443,   -1,  366,  443,   -1,  367,  443,   -1,  370,  443,
   -1,  719,  115,   -1,   17,  115,   -1,   18,  115,   -1,
  721,  115,   -1,  350,  440,   -1,  351,  440,   -1,  366,
  440,   -1,  367,  440,   -1,  370,  440,   -1,  350,  406,
   -1,  351,  406,   -1,  366,  406,   -1,  367,  406,   -1,
  370,  406,   -1,  350,  441,   -1,  351,  441,   -1,  366,
  441,   -1,  367,  441,   -1,  370,  441,   -1,
};
#ifdef YYDESTRUCT
static int yyastable[] = {                                      0,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   26,   31,   32,   33,   34,   35,   38,   39,   40,   60,
   61,   67,   68,   72,   74,   75,   78,   82,   83,   84,
   85,   86,   87,   88,   89,   90,   94,   95,   98,  102,
  108,  109,  110,  111,  114,  134,  139,  141,  142,  143,
  144,  147,  148,  149,  150,  151,  152,  155,  156,  159,
  160,  161,  162,  163,  167,  168,  170,  171,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
  186,  187,  188,  190,  191,  192,  193,  194,  196,  197,
  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
  208,  211,  212,  213,  215,  216,  223,  224,  225,  226,
  227,  228,   21,   64,   78,    2,   11,   16,   21,  141,
  142,  160,  161,  167,  179,  183,  196,  211,  215,    2,
   16,  142,    2,   11,   13,   14,   15,  143,    2,   13,
  140,  141,  142,  146,   31,  142,  142,  142,    2,   64,
   31,  142,   40,   83,  142,  147,  143,  134,  182,  186,
   64,   64,   64,   64,   74,  134,  142,  187,   78,   41,
   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
   72,   73,   74,   75,   76,   77,   78,   80,   83,   84,
  143,  160,  187,  187,  187,  187,  187,    2,  187,  187,
  142,  160,  187,   78,  187,   80,  187,   13,   14,   15,
  142,  159,  183,  211,   29,   30,   99,  100,  101,  102,
  103,  104,  105,  106,  107,   78,   78,   78,  151,   78,
  187,  135,  178,  187,    2,    7,   26,   40,   74,  142,
  163,  183,  196,  198,  201,  204,  207,  215,   21,   31,
   64,   58,   68,   72,   85,  153,  154,   19,   20,   78,
   82,   21,   78,  141,  142,  145,  148,   76,   78,   80,
   82,  134,  136,   82,   77,   82,   82,   82,  151,   23,
   24,   25,  219,   82,  154,    9,  141,  142,  159,  160,
  176,  179,  198,  201,  203,  204,  206,  207,  215,  182,
   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
   51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
   71,   72,   73,   76,   77,   78,   80,   82,  128,  137,
  105,   76,   82,   85,   88,   96,   97,  214,   38,   76,
   82,  182,  214,  221,   76,   82,  136,  209,  221,   76,
   82,  182,  221,   82,   85,  182,  136,  140,  142,  217,
  160,  141,  160,  163,  160,  183,  198,  201,  203,  204,
  206,  207,   26,   89,   90,   91,   92,   93,   94,    2,
   74,    5,   85,  143,  165,  166,    2,  160,  161,  162,
  164,  169,  186,  196,   78,  140,  160,   21,  142,  179,
   82,    2,  140,  160,   76,  142,   31,   82,  136,    2,
  140,    2,    7,  134,   76,   13,   18,  160,  184,  185,
   78,  160,  160,  160,  160,  187,   21,  160,  187,   79,
   81,   80,   80,  153,   78,   78,   79,   79,  187,   81,
   82,  140,   12,    2,    2,    3,   28,   12,    2,    2,
   12,  187,  161,  162,  187,  189,  187,  109,  187,  135,
  135,    2,   21,  141,  201,  215,  201,  204,  215,    2,
   40,  142,  147,  166,    2,   58,   68,   72,   85,   79,
  187,   68,   72,  140,  148,   78,  187,  187,   81,  187,
  187,  187,  153,  136,  136,  136,   21,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
   79,  187,  187,  187,  187,  151,    5,   76,   85,   88,
   96,   97,   78,   84,  113,   84,  113,  142,  210,   77,
  182,    5,   84,  113,   23,   24,   25,  218,  142,   82,
   77,  186,  236,   78,   78,  230,    2,  165,   76,   68,
   65,   77,   79,   76,   80,   77,   79,  164,    2,    2,
  146,   78,  142,  160,  179,  196,   82,  142,   82,  136,
    2,  134,  136,  158,  142,    2,    2,    2,   76,   65,
   77,  187,   65,   65,   65,   65,   79,   79,   81,   81,
   87,  229,  229,  187,   79,  187,  142,    2,    3,    4,
    5,   12,   79,   82,   82,   79,   78,   79,   40,   21,
  160,   65,   77,   79,    2,   68,    2,   68,  142,   78,
  169,   79,   81,  135,    2,   79,   81,  136,    5,  142,
  220,   78,  210,  142,   82,  217,  218,  134,  140,   78,
  233,  142,   21,  165,  187,   81,  187,  164,  134,   82,
   82,   82,   82,  142,  134,  136,  158,  143,    2,   77,
   98,  135,  157,  186,  226,   82,   76,   76,   76,  187,
  185,   79,   78,   78,   78,   78,   79,   79,  187,  151,
  189,  189,  151,  187,  134,    2,   74,   78,  153,   79,
    2,   79,  146,   21,  169,   79,  187,   77,   79,   79,
  187,  236,  142,  238,   68,  142,  169,   78,    2,   74,
   81,  158,   82,  158,  143,  135,  134,   76,  157,   82,
  160,  160,  187,  187,  187,  187,  187,  187,   82,   82,
   79,  195,  231,    2,  229,    2,   79,   79,   68,   79,
  142,   79,  134,  178,  146,   21,   79,   79,  232,    2,
  135,  135,  134,   82,  158,  187,   79,   79,   79,   79,
  189,  189,  112,  113,  135,   78,  234,   79,   78,  146,
  237,  135,   79,   68,  221,  222,  182,   78,  235,    2,
   82,  158,  135,   79,   79,  187,  136,  169,   78,  169,
   79,  178,   78,  146,  209,  169,   78,   82,  135,   82,
  151,  151,  136,  178,   79,   79,   79,   78,  135,  169,
   79,  182,   79,   79,   82,  178,  222,  182,  169,   79,
   78,  222,  182,  209,   79,  169,  209,  182,   79,  182,
};
#endif /* YYDESTRUCT */
#define YYFINAL 57
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 368
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID",
"tknStrLit","tknCharLit","tknNumber","tknMacro","tknApiDecor","tknTypedef",
"tknUsing","tknLong","tknEnum","tknPreProDef","tknClass","tknStruct","tknUnion",
"tknNamespace","tknTemplate","tknTypename","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknHashError","tknEllipsis","tknConstCast","tknStaticCast","tknDynamicCast",
"tknReinterpretCast","tknTry","tknCatch","tknThrow","tknSizeOf","tknOperator",
"tknPlusEq","tknMinusEq","tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq",
"tknOrEq","tknLShift","tknRShift","tknLShiftEq","tknRShiftEq","tknCmpEq",
"tknNotEq","tknLessEq","tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc",
"tknDec","tknArrow","tknArrowStar","tknNew","tknDelete","tknConst",
"tknConstExpr","tknVoid","tknOverride","tknStatic","tknExtern","tknVirtual",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknFinal","tknNoExcept",
"tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf","tknIfDef",
"tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor","tknWhile","tknDo",
"tknSwitch","tknCase","tknDefault","tknReturn","tknBlankLine","TERNARYCOND",
"PREINCR","PREDECR","UNARYMINUS","CSTYLECAST","DEREF","ADDRESSOF","POSTINCR",
"POSTDECR","FUNCTIONALCAST","FUNCCALL","SUBSCRIPT","GLOBAL","PTRDECL","REFDECL",
"CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : optstmtlist",
"optstmtlist :",
"optstmtlist : stmtlist",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : optstmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : typedefliststmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : hasherror",
"stmt : pragma",
"stmt : block",
"stmt : switchstmt",
"stmt : usingdecl",
"stmt : usingnamespacedecl",
"stmt : namespacealias",
"stmt : macrocall",
"stmt : ';'",
"macrocall : tknMacro",
"macrocall : macrocall '(' ')'",
"macrocall : macrocall '(' expr ')'",
"macrocall : macrocall ';'",
"switchstmt : tknSwitch '(' expr ')' '{' caselist '}'",
"caselist :",
"caselist : caselist tknCase expr ':' optstmtlist",
"caselist : caselist tknDefault ':' optstmtlist",
"block : '{' optstmtlist '}'",
"block : doccomment block",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' varinit ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"hasherror : tknPreProHash tknHashError",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : doccommentstr",
"doccommentstr : tknDocBlockComment",
"doccommentstr : tknDocLineComment",
"doccommentstr : doccommentstr tknDocBlockComment",
"doccommentstr : doccommentstr tknDocLineComment",
"identifier : tknID",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknScopeResOp identifier",
"identifier : templidentifier",
"identifier : tknOverride",
"identifier : identifier tknEllipsis",
"typeidentifier : identifier",
"typeidentifier : tknLong",
"typeidentifier : tknVoid",
"typeidentifier : tknLong typeidentifier",
"typeidentifier : tknNumSignSpec",
"typeidentifier : tknNumSignSpec typeidentifier",
"typeidentifier : tknClass identifier",
"typeidentifier : tknStruct identifier",
"typeidentifier : tknUnion identifier",
"typeidentifier : tknEnum identifier",
"typeidentifier : tknTypename identifier",
"typeidentifier : tknEllipsis",
"typeidentifier : tknTypename tknEllipsis",
"typeidentifier : tknClass tknEllipsis",
"typeidentifier : identifier tknEllipsis",
"templidentifier : identifier '<' templatearglist '>'",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum optapidecor tknID ':' typeidentifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum optapidecor tknID '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass optapidecor tknID ':' typeidentifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass optapidecor tknID '{' enumitemlist '}' ';'",
"enumdefn : tknTypedef tknEnum optapidecor optid '{' enumitemlist '}' tknID ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefname ';'",
"typedefliststmt : typedeflist ';'",
"typedeflist : tknTypedef vardecllist",
"typedefname : tknTypedef vardecl",
"usingdecl : tknUsing tknID '=' vartype ';'",
"usingdecl : tknUsing tknID '=' functionpointer ';'",
"usingdecl : tknUsing tknID '=' classdefn ';'",
"usingdecl : templatespecifier usingdecl",
"usingdecl : tknUsing identifier ';'",
"namespacealias : tknNamespace tknID '=' identifier ';'",
"usingnamespacedecl : tknUsing tknNamespace identifier ';'",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : apidecor vardeclstmt",
"vardeclstmt : exptype vardeclstmt",
"vardecllist : typeidentifier opttypemodifier tknID ',' opttypemodifier tknID",
"vardecllist : vardecllist ',' opttypemodifier tknID",
"varinit : vardecl '=' expr",
"varinit : vardecl '(' expr ')'",
"varinit : vardecl '{' expr '}'",
"vardecl : vartype varidentifier",
"vardecl : vardecl '[' expr ']'",
"vardecl : vardecl '[' ']'",
"vardecl : vardecl ':' expr",
"vartype : typeidentifier opttypemodifier",
"vartype : classdefn",
"vartype : classdefn typemodifier",
"vartype : varattrib vartype",
"varidentifier : identifier",
"varidentifier : '(' '&' tknID ')'",
"varidentifier : '(' '*' tknID ')'",
"varidentifier : '(' '*' '*' tknID ')'",
"opttypemodifier :",
"opttypemodifier : typemodifier",
"typemodifier : tknConst",
"typemodifier : '*'",
"typemodifier : '&'",
"typemodifier : tknAnd",
"typemodifier : typemodifier tknConst",
"typemodifier : typemodifier '*'",
"typemodifier : typemodifier '&'",
"typemodifier : typemodifier tknAnd",
"exptype : tknStatic",
"exptype : tknExtern",
"exptype : tknExternC",
"varattrib : tknConst",
"varattrib : tknVolatile",
"varattrib : tknConstExpr",
"typeconverter : tknOperator vartype '(' optvoid ')'",
"typeconverter : identifier tknScopeResOp tknOperator vartype '(' optvoid ')'",
"typeconverter : functype typeconverter",
"typeconverter : typeconverter tknConst",
"typeconverter : apidecor typeconverter",
"typeconverter : templatespecifier typeconverter",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : functype vartype '(' optapidecor identifier tknScopeResOp '*' optid ')' '(' paramlist ')'",
"functionpointer : vartype '(' optapidecor identifier tknScopeResOp '*' optid ')' '(' paramlist ')'",
"functionpointer : functype vartype '(' optapidecor '*' optid ')' '(' paramlist ')'",
"functionpointer : vartype '(' optapidecor '*' optid ')' '(' paramlist ')'",
"functionpointer : apidecor functionpointer",
"functionpointer : functionpointer optfuncattrib",
"funcpointerdecl : functionpointer ';'",
"funcdecl : vartype apidecor funcname '(' paramlist ')'",
"funcdecl : vartype funcname '(' paramlist ')'",
"funcdecl : apidecor funcdecl",
"funcdecl : templatespecifier funcdecl",
"funcdecl : functype funcdecl",
"funcdecl : funcdecl '=' tknDelete",
"funcdecl : funcdecl '=' tknDefault",
"funcdecl : funcdecl functhrowspec",
"funcdecl : funcdecl optfuncattrib",
"funcname : operfuncname",
"funcname : identifier",
"funcname : tknScopeResOp operfuncname",
"funcname : identifier tknScopeResOp operfuncname",
"operfuncname : tknOperator '+'",
"operfuncname : tknOperator '-'",
"operfuncname : tknOperator '*'",
"operfuncname : tknOperator '/'",
"operfuncname : tknOperator '%'",
"operfuncname : tknOperator '^'",
"operfuncname : tknOperator '&'",
"operfuncname : tknOperator '|'",
"operfuncname : tknOperator '~'",
"operfuncname : tknOperator '!'",
"operfuncname : tknOperator '='",
"operfuncname : tknOperator '<'",
"operfuncname : tknOperator '>'",
"operfuncname : tknOperator tknPlusEq",
"operfuncname : tknOperator tknMinusEq",
"operfuncname : tknOperator tknMulEq",
"operfuncname : tknOperator tknDivEq",
"operfuncname : tknOperator tknPerEq",
"operfuncname : tknOperator tknXorEq",
"operfuncname : tknOperator tknAndEq",
"operfuncname : tknOperator tknOrEq",
"operfuncname : tknOperator tknLShift",
"operfuncname : tknOperator tknRShift",
"operfuncname : tknOperator tknLShiftEq",
"operfuncname : tknOperator tknRShiftEq",
"operfuncname : tknOperator tknCmpEq",
"operfuncname : tknOperator tknNotEq",
"operfuncname : tknOperator tknLessEq",
"operfuncname : tknOperator tknGreaterEq",
"operfuncname : tknOperator tkn3WayCmp",
"operfuncname : tknOperator tknAnd",
"operfuncname : tknOperator tknOr",
"operfuncname : tknOperator tknInc",
"operfuncname : tknOperator tknDec",
"operfuncname : tknOperator ','",
"operfuncname : tknOperator tknArrow",
"operfuncname : tknOperator tknArrowStar",
"operfuncname : tknOperator '(' ')'",
"operfuncname : tknOperator '[' ']'",
"operfuncname : tknOperator tknNew",
"operfuncname : tknOperator tknNew '[' ']'",
"operfuncname : tknOperator tknDelete",
"operfuncname : tknOperator tknDelete '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vartype '=' expr",
"param : vardecl",
"param : vartype",
"param : functionpointer",
"param : doccomment param",
"param : vartype '[' expr ']'",
"param : vartype '[' ']'",
"templatearg :",
"templatearg : typeidentifier",
"templatearg : tknConst templatearg",
"templatearg : tknNumber",
"templatearg : templatearg '*'",
"templatearg : typeidentifier '=' identifier",
"templatearglist : templatearg",
"templatearglist : templatearglist ',' templatearg",
"optfunctype :",
"optfunctype : functype",
"functype : optfunctype tknStatic",
"functype : optfunctype tknInline",
"functype : optfunctype tknVirtual",
"functype : optfunctype tknExtern",
"functype : optfunctype tknExternC",
"functype : optfunctype tknExplicit",
"functype : optfunctype tknFriend",
"optfuncattrib : tknConst",
"optfuncattrib : tknOverride",
"optfuncattrib : tknFinal",
"optfuncattrib : tknNoExcept",
"optfuncattrib : '=' tknNumber",
"optfuncattrib : optfuncattrib tknConst",
"optfuncattrib : optfuncattrib tknOverride",
"optfuncattrib : optfuncattrib tknFinal",
"optfuncattrib : optfuncattrib tknNoExcept",
"optfuncattrib : optfuncattrib '=' tknNumber",
"optfuncthrowspec :",
"optfuncthrowspec : functhrowspec",
"functhrowspec : tknThrow '(' identifierlist ')'",
"identifierlist :",
"identifierlist : identifier",
"identifierlist : identifierlist ',' identifier",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist block",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' optfuncthrowspec meminitlist block",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' optfuncthrowspec meminitlist block",
"$$3 :",
"ctordefn : tknID '<' templatearglist '>' tknScopeResOp tknID $$3 '(' paramlist ')' optfuncthrowspec meminitlist block",
"ctordefn : functype ctordefn",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"ctordecl : functype ctordecl",
"ctordecl : templatespecifier ctordecl",
"ctordecl : ctordecl '=' tknDelete",
"ctordecl : ctordecl '=' tknDefault",
"ctordecl : ctordecl functhrowspec",
"ctordecl : apidecor ctordecl",
"meminitlist :",
"meminitlist : ':' meminit",
"meminitlist : meminitlist ',' meminit",
"meminit : identifier '(' expr ')'",
"meminit : identifier '(' ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"$$6 :",
"dtordefn : tknID '<' templatearglist '>' tknScopeResOp '~' tknID $$6 '(' ')' block",
"dtordefn : templatespecifier dtordefn",
"dtordefn : functype dtordefn",
"dtordecl : '~' tknID '(' optvoid ')'",
"dtordecl : apidecor dtordecl",
"dtordecl : functype dtordecl",
"dtordecl : dtordecl '=' tknNumber",
"dtordecl : dtordecl '=' tknDelete",
"dtordecl : dtordecl '=' tknDefault",
"dtordecl : dtordecl functhrowspec",
"optvoid :",
"optvoid : tknVoid",
"optcomment :",
"optcomment : doccomment",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$7 :",
"classdefn : compoundSpecifier optapidecor identifier optinheritlist optcomment '{' $$7 optstmtlist '}'",
"$$8 :",
"classdefn : compoundSpecifier optinheritlist optcomment '{' $$8 optstmtlist '}'",
"classdefn : templatespecifier classdefn",
"optinheritlist :",
"optinheritlist : ':' protlevel identifier",
"optinheritlist : optinheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier optapidecor identifier ';'",
"fwddecl : templatespecifier fwddecl",
"fwddecl : tknFriend identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' templateparamlist '>'",
"templateparamlist :",
"templateparamlist : templateparam",
"templateparamlist : templateparamlist ',' templateparam",
"templateparam : tknTypename tknID",
"templateparam : tknTypename tknID '=' vartype",
"templateparam : tknClass tknID",
"templateparam : tknClass tknID '=' vartype",
"templateparam : vartype tknID",
"templateparam : vartype tknID '=' expr",
"templateparam : vartype",
"templateparam : vartype '=' expr",
"optapidecor :",
"optapidecor : apidecor",
"apidecor : tknApiDecor",
"apidecor : apidecor tknApiDecor",
"apidecor : tknID '(' tknID ')'",
"apidecor : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' expr '}'",
"expr : '{' '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr '?' expr ':' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr tknAnd expr",
"expr : expr tknOr expr",
"expr : expr ',' expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' expr ')'",
"expr : '(' vartype ')' expr",
"expr : tknConstCast '<' vartype '>' '(' expr ')'",
"expr : tknStaticCast '<' vartype '>' '(' expr ')'",
"expr : tknDynamicCast '<' vartype '>' '(' expr ')'",
"expr : tknReinterpretCast '<' vartype '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknNew '(' expr ')' expr",
"expr : tknScopeResOp tknNew '(' expr ')' expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"expr : tknSizeOf '(' vartype ')'",
"expr : tknSizeOf '(' expr ')'",
"exprstmt : expr ';'",
};
#endif
#line 51 "/home/dassat/github/cppparser/third_party/btyacc_tp/btyacc/btyaccpa.ske"

/*
** YYPOSN is user-defined text position type.
*/
#ifdef YYPOSN
#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEVAL
#define YYDELETEVAL(v, x) 
#endif

/* If delete function is not defined by the user, do not deletions. */
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v, x) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

extern void yyerror(const char *, ...);

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
#ifdef YYPOSN
YYPOSN  yyposn;
#endif /* YYPOSN */

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
#ifdef YYPOSN
YYPOSN  yyretposn;
#endif /* YYPOSN */

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYERROR_QUIET  goto yyerrquiet
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  struct yyparsestate *save;        /* Previously saved parser state */
  int           state;
  int           errflag;
  Yshort       *ss;          /* state stack base */
  Yshort       *ssp;         /* state stack pointer */
  YYSTYPE      *vs;          /* values stack base */
  YYSTYPE      *vsp;         /* value stack pointer */
  YYSTYPE       val;         /* value as returned by actions */
#ifdef YYPOSN
  YYPOSN       *ps;          /* position stack base */
  YYPOSN       *psp;         /* position stack pointer */
  YYPOSN        pos;         /* position as returned by universal action */
#endif /* YYPOSN */
  int           lexeme;      /* index of the conflict lexeme in the lexical queue */
  unsigned int  stacksize;   /* current maximum stack size */
  Yshort        ctry;        /* index in yyctable[] for this conflict */
};

/* Current parser state */
static struct yyparsestate *yyps=0;

/* yypath!=NULL: do the full parse, starting at *yypath parser state. */
static struct yyparsestate *yypath=0;

/* Base of the lexical value queue */
static YYSTYPE *yylvals=0;

/* Current posistion at lexical value queue */
static YYSTYPE *yylvp=0;

/* End position of lexical value queue */
static YYSTYPE *yylve=0;

/* The last allocated position at the lexical value queue */
static YYSTYPE *yylvlim=0;

#ifdef YYPOSN
/* Base of the lexical position queue */
static YYPOSN *yylpsns=0;

/* Current posistion at lexical position queue */
static YYPOSN *yylpp=0;

/* End position of lexical position queue */
static YYPOSN *yylpe=0;

/* The last allocated position at the lexical position queue */
static YYPOSN *yylplim=0;
#endif /* YYPOSN */

/* Current position at lexical token queue */
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

/*
** For use in generated program
*/
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yypsp   (yyps->psp)
#define yypos   (yyps->pos)
#define yydepth (yyps->ssp - yyps->ss)


/*
** Local prototypes.
*/
int yyparse(void);
int yylex(void);

static void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}

#ifdef YYPOSN
static void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--)
    to[i] = from[i];
}
#endif /* YYPOSN */

static int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
#ifdef __cplusplus
  Yshort  *tl = yylexemes; 
  yylexemes = new Yshort[s];
  memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
  delete[] tl;
  YYSTYPE *tv = yylvals;
  yylvals = new YYSTYPE[s];
  YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
  delete[] tv;
#ifdef YYPOSN
  YYPOSN  *tp = yylpsns;
  yylpsns = new YYPOSN[s];
  YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
  delete[] tp;
#endif /* YYPOSN */
#else
  yylexemes = realloc(yylexemes, sizeof(Yshort) * s);
  yylvals = realloc(yylvals, sizeof(YYSTYPE) * s);
#ifdef YYPOSN
  yylpsns = realloc(yylpsns, sizeof(YYPOSN) * s);
#endif /* YYPOSN */
#endif
  yylexp = yylexemes + p;
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
#ifdef YYPOSN
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
#endif /* YYPOSN */
  return 0;
}

static int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
#ifdef YYPOSN
    yyposn = *yylpp++;
#endif /* YYPOSN */
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
#ifdef YYPOSN
      *yylpp++ = yyposn;
      yylpe++;
#endif /* YYPOSN */
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

static void YYMoreStack(struct yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
#ifdef __cplusplus
  Yshort  *tss = yyps->ss;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  delete[] tss;
  YYSTYPE *tvs = yyps->vs;
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  delete[] tvs;
#ifdef YYPOSN
  YYPOSN  *tps = yyps->ps;
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  delete[] tps;
#endif /* YYPOSN */
  yyps->stacksize += YYSTACKGROWTH;                           
#else
  yyps->stacksize += YYSTACKGROWTH;                           
  yyps->ss = realloc(yyps->ss, sizeof(Yshort ) * yyps->stacksize);   
  yyps->vs = realloc(yyps->vs, sizeof(YYSTYPE) * yyps->stacksize);  
#ifdef YYPOSN
  yyps->ps = realloc(yyps->ps, sizeof(YYPOSN ) * yyps->stacksize);  
#endif /* YYPOSN */
#endif
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
#ifdef YYPOSN
  yyps->psp = yyps->ps + p;                                   
#endif /* YYPOSN */
}

static struct yyparsestate *YYNewState(int size) {
#ifdef __cplusplus
  yyparsestate *p = new yyparsestate;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
#ifdef YYPOSN
  p->ps = new YYPOSN [size + 4];
#endif /* YYPOSN */
#else
  struct yyparsestate *p = malloc(sizeof(struct yyparsestate));
  p->ss = malloc(sizeof(Yshort ) * (size + 4));
  p->vs = malloc(sizeof(YYSTYPE) * (size + 4));
#ifdef YYPOSN
  p->ps = malloc(sizeof(YYPOSN ) * (size + 4));
#endif /* YYPOSN */
#endif
  p->stacksize = size+4;
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
#ifdef YYPOSN
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
#endif /* YYPOSN */
  return p;
}

static void YYFreeState(struct yyparsestate *p) {
#ifdef __cplusplus
  delete[] p->ss;
  delete[] p->vs;
#ifdef YYPOSN
  delete[] p->ps;
#endif /* YYPOSN */
  delete p;
#else
  free(p->ss);
  free(p->vs);
#ifdef YYPOSN
  free(p->ps);
#endif /* YYPOSN */
  free(p);
#endif
}

#line 1440 "/home/dassat/github/cppparser/parser.y"


//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  CppCompoundStack tmpStack;
  gCompoundStack.swap(tmpStack);
  
  return gProgUnit;
}
#line 3857 "/home/dassat/github/cppparser/parser.tab.c"
#line 349 "/home/dassat/github/cppparser/third_party/btyacc_tp/btyacc/btyaccpa.ske"

/*
** Parser function
*/
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  struct yyparsestate *yyerrctx = NULL;
#ifdef YYREDUCEPOSNFUNC
  int reduce_posn;
#endif /* YYREDUCEPOSNFUNC */

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
#ifdef YYPOSN
  yyps->psp = yyps->ps;
#endif /* YYPOSN */
  *(yyps->ssp) = yystate = 0;
  

  /*
  ** Main parsing loop
  */
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  /*
  ** Read one token
  */
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     (int)yydepth, yytrial!=0, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  /*
  ** Do we have a conflict?
  */
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful "
	       "trial parse\n", (int)yydepth, yytrial!=0, yystate);
      }
#endif
      /* Switch to the next conflict context */
      struct yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       (int)yydepth, yytrial!=0, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      struct yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 yytrial!=0);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        /* If this is a first conflict in the stack, start saving lexemes */
        if (!yylexemes) {
#ifdef __cplusplus
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
#ifdef YYPOSN
          yylpsns = new YYPOSN[YYSTACKGROWTH];
#endif /* YYPOSN */
#else
          yylexemes = malloc(sizeof(Yshort) * YYSTACKGROWTH);
          yylvals = malloc(sizeof(YYSTYPE) * YYSTACKGROWTH);
#ifdef YYPOSN
          yylpsns = malloc(sizeof(YYPOSN) * YYSTACKGROWTH);
#endif /* YYPOSN */
#endif
          yylvlim = yylvals + YYSTACKGROWTH; 
#ifdef YYPOSN
          yylplim = yylpsns + YYSTACKGROWTH; 
#endif /* YYPOSN */
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
#ifdef YYPOSN
	  yylpp = yylpe = yylpsns;
#endif /* YYPOSN */
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
#ifdef YYPOSN
            *yylpe++ = yyposn;
#endif /* YYPOSN */
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--;
#ifdef YYPOSN
	yylpp--;
#endif /* YYPOSN */
	yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               (int)yydepth, yytrial!=0, yystate, yyctable[ctry]);
#endif
      if (yychar < 0) {
        yylvp++;
#ifdef YYPOSN
	yylpp++;
#endif /* YYPOSN */
	yylexp++;
      }
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  /*
  ** Is action a shift?
  */
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             (int)yydepth, yytrial!=0, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
#ifdef YYPOSN
    *++(yyps->psp) = yyposn;
#endif /* YYPOSN */
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  /*
  ** Action: error
  */
  if (yyps->errflag) goto yyinrecovery;
  else goto yyerrlab;	/* redundant goto to avoid 'unused label' warnings */
yyerrlab:
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrquiet:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    struct yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to "
	     "state %d, %d tokens\n", (int)yydepth, yytrial!=0, yystate,
	     yyps->save->state, (int)(yylvp - yylvals - yyps->save->lexeme));
#endif
    /* Memorize most forward-looking error state in case
     * it's really an error. */
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      /* Free old saved error context state */
      if(yyerrctx) YYFreeState(yyerrctx);
      /* Create and fill out new saved error context state */
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      memcpy(yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
#ifdef YYPOSN
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
#endif /* YYPOSN */
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yychar = -1;
    yylexp = yylexemes + save->lexeme;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    yylvp = yylvals + save->lexeme;
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
    yylpp  = yylpsns + save->lexeme;
    yyps->psp = yyps->ps + (save->psp - save->ps);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
    ctry = ++save->ctry;
    yystate = save->state;
    /* We tried shift, try reduce now */
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    /*
    ** Nothing left on the stack -- error
    */
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       yytrial!=0);
      }
#endif
      /* Restore state as it was in the most forward-advanced error */
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      memcpy(yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      yylvp = yylvals   + yyerrctx->lexeme;
      yylval = yylvp[-1];
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
#ifdef YYPOSN
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yyposn = yylpp[-1];
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
#endif /* YYPOSN */
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state "
	         "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrquiet, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrquiet;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 (int)yydepth, yytrial!=0, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
#ifdef YYDESTRUCT
	YYDESTRUCT(yytrial!=0, yyastable[yyps->ssp[0]], yyps->vsp, yyps->psp);
#endif /* YYDESTRUCT */
        --(yyps->ssp);
        --(yyps->vsp);
#ifdef YYPOSN
        --(yyps->psp);
#endif /* YYPOSN */
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d "
	     "(%s)\n", (int)yydepth, yytrial!=0, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
#ifdef YYDESTRUCT
    if (yychar > 0)
      YYDESTRUCT(yytrial!=0, yyastable[yyttable[yychar]], &yylval, &yyposn);
#endif /* YYDESTRUCT */
    yychar = (-1);
    goto yyloop;
  }

  /*
  ** Reduce the rule
  */
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           (int)yydepth, yytrial!=0, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

#ifdef YYPOSN
  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling
     is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));
#ifdef YYREDUCEPOSNFUNC
  reduce_posn = 1;
#endif /* YYREDUCEPOSNFUNC */
#endif /* YYPOSN */

  switch (yyn) {

case 1:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4301 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 2:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = nullptr;
                  }
#line 4309 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 3:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                  }
#line 4317 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 4:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    if (yyvsp[0].cppObj)
                    {
                      yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                      yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                    } /* Avoid 'comment-btyacc-constructs.sh' to act on this*/
                  }
#line 4330 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 5:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    if (yyvsp[0].cppObj)
                    {
                      yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                      yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                    } /* Avoid 'comment-btyacc-constructs.sh' to act on this*/
                  }
#line 4343 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 6:
  if (!yytrial)
#line 336 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4349 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 7:
  if (!yytrial)
#line 339 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4355 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 8:
  if (!yytrial)
#line 340 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4361 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 9:
  if (!yytrial)
#line 341 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4367 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 10:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4373 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 11:
  if (!yytrial)
#line 343 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefName; }
#line 4379 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 12:
  if (!yytrial)
#line 344 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefList; }
#line 4385 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 13:
  if (!yytrial)
#line 345 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4391 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 14:
  if (!yytrial)
#line 346 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4397 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 15:
  if (!yytrial)
#line 347 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4403 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 16:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4409 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 17:
  if (!yytrial)
#line 349 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4415 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 18:
  if (!yytrial)
#line 350 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4421 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 19:
  if (!yytrial)
#line 351 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4427 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 20:
  if (!yytrial)
#line 352 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4433 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 21:
  if (!yytrial)
#line 353 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4439 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 22:
  if (!yytrial)
#line 354 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4445 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 23:
  if (!yytrial)
#line 355 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4451 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 24:
  if (!yytrial)
#line 356 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4457 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 25:
  if (!yytrial)
#line 357 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4463 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 26:
  if (!yytrial)
#line 358 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4469 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 27:
  if (!yytrial)
#line 359 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4475 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 28:
  if (!yytrial)
#line 360 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4481 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 29:
  if (!yytrial)
#line 361 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4487 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 30:
  if (!yytrial)
#line 362 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4493 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 31:
  if (!yytrial)
#line 363 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4499 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 32:
  if (!yytrial)
#line 364 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4505 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 33:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4511 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 34:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4517 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 35:
  if (!yytrial)
#line 367 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashError; }
#line 4523 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 36:
  if (!yytrial)
#line 368 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4529 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 37:
  if (!yytrial)
#line 369 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4535 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 38:
  if (!yytrial)
#line 370 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].switchBlock; }
#line 4541 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 39:
  if (!yytrial)
#line 371 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].usingDecl; }
#line 4547 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 40:
  if (!yytrial)
#line 372 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].usingNamespaceDecl; }
#line 4553 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 41:
  if (!yytrial)
#line 373 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].namespaceAlias; }
#line 4559 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 42:
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = new CppMacroCall(yyvsp[0].str); }
#line 4565 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 43:
  if (!yytrial)
#line 375 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = nullptr; }
#line 4571 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 44:
  if (!yytrial)
#line 379 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = yyvsp[0].str;
                  }
#line 4579 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 45:
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str);
                  }
#line 4587 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 46:
  if (!yytrial)
#line 385 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str);
                    delete yyvsp[-1].cppExprObj;
                  }
#line 4596 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 47:
  if (!yytrial)
#line 389 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str);
                  }
#line 4604 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 48:
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.switchBlock = new CppSwitchBlock(yyvsp[-4].cppExprObj, yyvsp[-1].switchBody);
                  }
#line 4612 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 49:
  if (!yytrial)
#line 399 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.switchBody = new CppSwitchBody;
                  }
#line 4620 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 50:
  if (!yytrial)
#line 402 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.switchBody = yyvsp[-4].switchBody;
                    yyval.switchBody->emplace_back(yyvsp[-2].cppExprObj, yyvsp[0].cppCompundObj);
                  }
#line 4629 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 51:
  if (!yytrial)
#line 406 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.switchBody = yyvsp[-3].switchBody;
                    yyval.switchBody->emplace_back(nullptr, yyvsp[0].cppCompundObj);
                  }
#line 4638 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 52:
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                    yyval.cppCompundObj->compoundType_ = kBlock;
                  }
#line 4647 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 53:
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                  }
#line 4655 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 54:
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4664 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 55:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4673 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 56:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4682 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 57:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4691 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 58:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4699 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 59:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppVarObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4707 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 60:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4715 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 61:
  if (!yytrial)
#line 454 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4723 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 62:
#line 459 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4728 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4735 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 63:
#line 463 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4740 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4747 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 64:
#line 467 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4752 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 467 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4759 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 65:
#line 471 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4764 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 471 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4771 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 66:
#line 475 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4776 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4783 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 67:
#line 479 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4788 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4795 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 68:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4800 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4804 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 69:
#line 488 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4809 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4813 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 70:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4818 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4822 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 71:
#line 495 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4827 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 495 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4831 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 72:
#line 496 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4836 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4840 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 73:
#line 497 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4845 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4849 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 74:
#line 498 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4854 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4858 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 75:
#line 499 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4863 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 499 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4867 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 76:
#line 500 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4872 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4876 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 77:
#line 503 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4881 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashError = new CppHashError(yyvsp[0].str); }
#line 4885 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 78:
#line 506 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4890 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 506 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4894 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 79:
#line 509 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4899 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4903 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 80:
#line 512 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4908 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 512 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4912 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 81:
#line 513 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4917 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4921 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 82:
#line 514 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4926 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 514 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4930 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 83:
#line 515 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4935 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 515 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4939 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 84:
  if (!yytrial)
#line 518 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4945 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 85:
  if (!yytrial)
#line 519 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 4951 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 86:
  if (!yytrial)
#line 520 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4957 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 87:
  if (!yytrial)
#line 521 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4963 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 88:
  if (!yytrial)
#line 522 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4969 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 89:
  if (!yytrial)
#line 523 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4975 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 90:
  if (!yytrial)
#line 526 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4981 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 91:
  if (!yytrial)
#line 527 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4987 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 92:
  if (!yytrial)
#line 528 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4993 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 93:
  if (!yytrial)
#line 529 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4999 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 94:
  if (!yytrial)
#line 530 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5005 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 95:
  if (!yytrial)
#line 531 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5011 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 96:
  if (!yytrial)
#line 532 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5017 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 97:
  if (!yytrial)
#line 533 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5023 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 98:
  if (!yytrial)
#line 534 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5029 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 99:
  if (!yytrial)
#line 535 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5035 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 100:
  if (!yytrial)
#line 536 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5041 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 101:
  if (!yytrial)
#line 537 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5047 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 102:
  if (!yytrial)
#line 538 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5053 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 103:
  if (!yytrial)
#line 539 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5059 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 104:
  if (!yytrial)
#line 540 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5065 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 105:
  if (!yytrial)
#line 543 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str);
                  }
#line 5073 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 106:
  if (!yytrial)
#line 548 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, nullptr); }
#line 5079 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 107:
  if (!yytrial)
#line 549 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5085 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 108:
  if (!yytrial)
#line 552 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 5091 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 109:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 5097 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 110:
  if (!yytrial)
#line 554 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 5103 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 111:
  if (!yytrial)
#line 555 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 5109 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 112:
  if (!yytrial)
#line 558 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 5115 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 113:
  if (!yytrial)
#line 559 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 5124 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 114:
  if (!yytrial)
#line 563 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 5133 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 115:
  if (!yytrial)
#line 567 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 5141 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 116:
#line 572 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5146 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 5152 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 117:
#line 575 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5157 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 575 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 5163 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 118:
#line 578 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5168 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, false);
                  }
#line 5174 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 119:
#line 581 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5179 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 5185 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 120:
#line 584 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5190 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 584 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 5196 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 121:
#line 587 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5201 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 587 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].enumItemList);
                  }
#line 5207 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 122:
#line 592 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5212 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 592 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 5218 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 123:
#line 595 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5223 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 595 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 5229 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 124:
#line 598 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5234 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 598 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 5240 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 125:
#line 603 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5245 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 603 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefName = yyvsp[-1].typedefName; }
#line 5249 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 126:
#line 606 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5254 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 606 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefList = yyvsp[-1].typedefList; }
#line 5258 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 127:
  if (!yytrial)
#line 609 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefList = new CppTypedefList(yyvsp[0].cppVarObjList); }
#line 5264 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 128:
  if (!yytrial)
#line 612 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefName = new CppTypedefName(yyvsp[0].cppVarObj); }
#line 5270 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 129:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppVarType);
                  }
#line 5278 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 130:
  if (!yytrial)
#line 618 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppFuncPointerObj);
                  }
#line 5286 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 131:
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-3].str, yyvsp[-1].cppCompundObj);
                  }
#line 5294 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 132:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingDecl = yyvsp[0].usingDecl;
                    yyval.usingDecl->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 5303 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 133:
  if (!yytrial)
#line 628 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingDecl = new CppUsingDecl(yyvsp[-1].str);
                  }
#line 5311 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 134:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.namespaceAlias = new CppNamespaceAlias(yyvsp[-3].str, yyvsp[-1].str);
                  }
#line 5319 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 135:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingNamespaceDecl = new CppUsingNamespaceDecl(yyvsp[-1].str);
                  }
#line 5327 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 136:
#line 644 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5332 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5336 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 137:
#line 647 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5341 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5345 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 138:
#line 648 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5350 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5354 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 139:
#line 649 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5359 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[0].cppVarObj; yyval.cppVarObj->apidecor_ = yyvsp[-1].str; }
#line 5363 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 140:
#line 650 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5368 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[0].cppVarObj; yyval.cppVarObj->varType_->typeAttr_ |= yyvsp[-1].attr; }
#line 5372 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 141:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList(yyvsp[-5].str);
                    yyval.cppVarObjList->addVarDecl(CppVarDeclInList(yyvsp[-4].typeModifier, {yyvsp[-3].str}));
                    yyval.cppVarObjList->addVarDecl(CppVarDeclInList(yyvsp[-1].typeModifier, {yyvsp[0].str}));
                  }
#line 5382 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 142:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-3].cppVarObjList;
                    yyval.cppVarObjList->addVarDecl(CppVarDeclInList(yyvsp[-1].typeModifier, {yyvsp[0].str}));
                  }
#line 5391 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 143:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->varDecl_.assign_.reset(yyvsp[0].cppExprObj);
                  }
#line 5400 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 144:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->varDecl_.constructFrom_.reset(yyvsp[-1].cppExprObj);
                  }
#line 5409 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 145:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->varDecl_.initializedFrom_.reset(yyvsp[-1].cppExprObj);
                  }
#line 5418 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 146:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(yyvsp[-1].cppVarType, yyvsp[0].str.toString());
                  }
#line 5426 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 147:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->varDecl_.arraySizes_.push_back(std::unique_ptr<CppExpr>(yyvsp[-1].cppExprObj));
                  }
#line 5435 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 148:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->varDecl_.arraySizes_.push_back(nullptr);
                  }
#line 5444 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 149:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->varDecl_.bitField_.reset(yyvsp[0].cppExprObj);
                  }
#line 5453 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 150:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurProtLevel, yyvsp[-1].str, yyvsp[0].typeModifier);
                  }
#line 5461 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 151:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurProtLevel, yyvsp[0].cppCompundObj, CppTypeModifier());
                  }
#line 5469 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 152:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarType = new CppVarType(gCurProtLevel, yyvsp[-1].cppCompundObj, yyvsp[0].typeModifier);
                  }
#line 5477 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 153:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarType = yyvsp[0].cppVarType;
                    yyval.cppVarType->typeAttr_ |= yyvsp[-1].attr;
                  }
#line 5486 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 154:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5492 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 155:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 5498 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 156:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 5504 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 157:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-4].str, yyvsp[0].str); }
#line 5510 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 158:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.typeModifier = CppTypeModifier(); }
#line 5516 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 159:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.typeModifier = yyvsp[0].typeModifier; }
#line 5522 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 160:
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.constBits_ |= (1 << yyval.typeModifier.ptrLevel_);
                  }
#line 5531 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 161:
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.ptrLevel_++;
                  }
#line 5540 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 162:
  if (!yytrial)
#line 728 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.refType_ = kByRef;
                  }
#line 5549 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 163:
  if (!yytrial)
#line 732 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = CppTypeModifier();
                    yyval.typeModifier.refType_ = kRValRef;
                  }
#line 5558 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 164:
  if (!yytrial)
#line 736 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.constBits_ |= (1 << yyval.typeModifier.ptrLevel_);
                  }
#line 5567 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 165:
  if (!yytrial)
#line 740 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.ptrLevel_++;
                  }
#line 5576 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 166:
  if (!yytrial)
#line 744 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.refType_ = kByRef;
                  }
#line 5585 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 167:
  if (!yytrial)
#line 748 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typeModifier = yyvsp[-1].typeModifier;
                    yyval.typeModifier.refType_ = kRValRef;
                  }
#line 5594 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 168:
  if (!yytrial)
#line 755 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 5600 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 169:
  if (!yytrial)
#line 756 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5606 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 170:
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExternC; }
#line 5612 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 171:
  if (!yytrial)
#line 760 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5618 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 172:
  if (!yytrial)
#line 761 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5624 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 173:
  if (!yytrial)
#line 762 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConstExpr; }
#line 5630 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 174:
  if (!yytrial)
#line 765 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-3].cppVarType, std::string());
                  }
#line 5638 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 175:
  if (!yytrial)
#line 768 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-3].cppVarType, mergeCppToken(yyvsp[-6].str, yyvsp[-5].str));
                  }
#line 5646 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 176:
  if (!yytrial)
#line 771 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ = yyvsp[-1].attr;
                  }
#line 5655 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 177:
  if (!yytrial)
#line 775 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 5664 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 178:
  if (!yytrial)
#line 779 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->apidecor_ = yyvsp[-1].str;
                  }
#line 5673 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 179:
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[0].cppTypeConverter;
                    yyval.cppTypeConverter->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 5682 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 180:
#line 789 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5687 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 789 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 5693 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 181:
#line 792 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5698 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 792 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 5705 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 182:
#line 798 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5710 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 798 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5714 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 183:
#line 801 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5719 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 801 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5726 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 184:
#line 807 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5731 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 807 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5738 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 185:
  if (!yytrial)
#line 812 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-10].cppVarType, yyvsp[-1].paramList, yyvsp[-11].attr);
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-8].str;
                    yyval.cppFuncPointerObj->ownerName_ = mergeCppToken(yyvsp[-7].str, yyvsp[-6].str);
                  }
#line 5748 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 186:
  if (!yytrial)
#line 817 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-10].cppVarType, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-8].str;
                    yyval.cppFuncPointerObj->ownerName_ = mergeCppToken(yyvsp[-7].str, yyvsp[-6].str);
                  }
#line 5758 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 187:
  if (!yytrial)
#line 822 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarType, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5767 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 188:
  if (!yytrial)
#line 826 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarType, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5776 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 189:
  if (!yytrial)
#line 830 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = yyvsp[0].cppFuncPointerObj;
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-1].str;
                  }
#line 5785 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 190:
  if (!yytrial)
#line 834 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;
                    yyval.cppFuncPointerObj->attr_ |= yyvsp[0].attr;
                  }
#line 5794 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 191:
#line 840 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5799 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 840 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5803 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 192:
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-3].str, yyvsp[-5].cppVarType, yyvsp[-1].paramList, 0);
                    yyval.cppFuncObj->docer2_ = yyvsp[-4].str;
                  }
#line 5812 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 193:
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].cppVarType, yyvsp[-1].paramList, 0);
                  }
#line 5820 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 194:
  if (!yytrial)
#line 850 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    if (!yyval.cppFuncObj->docer1_.empty())
                      std::swap(yyval.cppFuncObj->docer1_, yyval.cppFuncObj->docer2_);
                    yyval.cppFuncObj->docer1_ = yyvsp[-1].str;
                  }
#line 5831 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 195:
  if (!yytrial)
#line 856 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 5840 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 196:
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= yyvsp[-1].attr;
                  }
#line 5849 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 197:
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= kDelete;
                  }
#line 5858 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 198:
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= kDefault;
                  }
#line 5867 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 199:
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->throwSpec_ = yyvsp[0].funcThrowSpec;
                  }
#line 5876 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 200:
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= yyvsp[0].attr;
                  }
#line 5885 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 201:
  if (!yytrial)
#line 882 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5891 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 202:
  if (!yytrial)
#line 883 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5897 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 203:
  if (!yytrial)
#line 884 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5903 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 204:
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[-1].str); }
#line 5909 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 205:
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5915 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 206:
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5921 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 207:
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5927 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 208:
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5933 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 209:
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5939 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 210:
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5945 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 211:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5951 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 212:
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5957 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 213:
  if (!yytrial)
#line 896 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5963 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 214:
  if (!yytrial)
#line 897 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5969 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 215:
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5975 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 216:
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5981 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 217:
  if (!yytrial)
#line 900 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5987 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 218:
  if (!yytrial)
#line 901 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5993 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 219:
  if (!yytrial)
#line 902 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5999 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 220:
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6005 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 221:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6011 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 222:
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6017 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 223:
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6023 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 224:
  if (!yytrial)
#line 907 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6029 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 225:
  if (!yytrial)
#line 908 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6035 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 226:
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6041 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 227:
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6047 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 228:
  if (!yytrial)
#line 911 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6053 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 229:
  if (!yytrial)
#line 912 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6059 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 230:
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6065 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 231:
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6071 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 232:
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6077 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 233:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6083 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 234:
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6089 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 235:
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6095 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 236:
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6101 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 237:
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6107 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 238:
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6113 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 239:
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6119 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 240:
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6125 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 241:
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6131 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 242:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 6137 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 243:
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 6143 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 244:
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6149 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 245:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 6155 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 246:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6161 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 247:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 6167 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 248:
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = new CppParamList; }
#line 6173 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 249:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 6182 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 250:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 6191 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 251:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varType_->typeAttr_ |= kFuncParam;  }
#line 6197 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 252:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{
                    auto var = new CppVar(yyvsp[-2].cppVarType, std::string());
                    var->varType_->typeAttr_ |= kFuncParam;
                    var->varDecl_.assign_.reset(yyvsp[0].cppExprObj);
                    yyval.varOrFuncPtr = var;
                  }
#line 6208 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 253:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varType_->typeAttr_ |= kFuncParam;  }
#line 6214 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 254:
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{
                    auto var = new CppVar(yyvsp[0].cppVarType, std::string());
                    var->varType_->typeAttr_ |= kFuncParam;
                    yyval.varOrFuncPtr = var;
                  }
#line 6224 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 255:
  if (!yytrial)
#line 957 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;     }
#line 6230 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 256:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].varOrFuncPtr; }
#line 6236 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 257:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{
                    auto var = new CppVar(yyvsp[-3].cppVarType, std::string());
                    var->varType_->typeAttr_ |= kFuncParam;
                    var->varDecl_.arraySizes_.push_back(std::unique_ptr<CppExpr>(yyvsp[-1].cppExprObj));
                    yyval.varOrFuncPtr = var;
                  }
#line 6247 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 258:
  if (!yytrial)
#line 965 "/home/dassat/github/cppparser/parser.y"
{
                    auto var = new CppVar(yyvsp[-2].cppVarType, std::string());
                    var->varType_->typeAttr_ |= kFuncParam;
                    var->varDecl_.arraySizes_.push_back(std::unique_ptr<CppExpr>(nullptr));
                    yyval.varOrFuncPtr = var;
                  }
#line 6258 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 259:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, nullptr); }
#line 6264 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 260:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6270 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 261:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6276 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 262:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6282 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 263:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{
                    auto p = yyvsp[-1].str.sz + yyvsp[-1].str.len;
                    while (*p && (*p != '*'))
                      ++p;
                    if (*p == '*')
                      ++p;
                    yyval.str = makeCppToken(yyvsp[-1].str.sz, p - yyvsp[-1].str.sz);
                  }
#line 6295 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 264:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[-2].str; /* TODO: use 'identifier' too */ }
#line 6301 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 265:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6307 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 266:
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 6313 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 267:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.attr = 0;
                  }
#line 6321 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 268:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.attr = yyvsp[0].attr;
                  }
#line 6329 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 269:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kStatic;    }
#line 6335 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 270:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kInline;    }
#line 6341 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 271:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kVirtual;   }
#line 6347 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 272:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kExtern;    }
#line 6353 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 273:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kExternC;   }
#line 6359 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 274:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kExplicit;  }
#line 6365 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 275:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFriend;    }
#line 6371 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 276:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 6377 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 277:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kOverride; }
#line 6383 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 278:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kFinal; }
#line 6389 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 279:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kNoExcept; }
#line 6395 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 280:
#line 1014 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 6400 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kPureVirtual; }
#line 6404 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 281:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 6410 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 282:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 6416 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 283:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 6422 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 284:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kNoExcept; }
#line 6428 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 285:
#line 1020 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 6433 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 6437 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 286:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.funcThrowSpec = nullptr; }
#line 6443 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 287:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.funcThrowSpec = yyvsp[0].funcThrowSpec; }
#line 6449 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 288:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.funcThrowSpec = yyvsp[-1].identifierList ? yyvsp[-1].identifierList : new CppFuncThrowSpec;
                  }
#line 6457 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 289:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.identifierList = nullptr; }
#line 6463 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 290:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.identifierList = new CppIdentifierList;
                    yyval.identifierList->push_back(yyvsp[0].str);
                  }
#line 6472 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 291:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.identifierList = yyvsp[-2].identifierList;
                    yyval.identifierList->push_back(yyvsp[0].str);
                  }
#line 6481 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 292:
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6486 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 6490 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 293:
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6495 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-1].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[0].cppCompundObj;
                  }
#line 6503 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 294:
#line 1053 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6508 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 295:
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6513 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, mergeCppToken(yyvsp[-9].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[0].cppCompundObj;
                    yyval.cppCtorObj->throwSpec_ = yyvsp[-2].funcThrowSpec;
                  }
#line 6521 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 296:
#line 1060 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6526 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 297:
#line 1061 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6531 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1062 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, mergeCppToken(yyvsp[-11].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[0].cppCompundObj;
                    yyval.cppCtorObj->throwSpec_ = yyvsp[-2].funcThrowSpec;
                  }
#line 6539 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 298:
#line 1067 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-5].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6544 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 299:
#line 1068 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6549 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1069 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, mergeCppToken(yyvsp[-12].str, yyvsp[-7].str), yyvsp[-4].paramList, yyvsp[-1].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[0].cppCompundObj;
                    yyval.cppCtorObj->throwSpec_ = yyvsp[-2].funcThrowSpec;
                  }
#line 6557 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 300:
  if (!yytrial)
#line 1074 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= yyvsp[-1].attr;
                  }
#line 6566 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 301:
  if (!yytrial)
#line 1078 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 6575 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 302:
#line 1085 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 6587 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1093 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 6593 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 303:
  if (!yytrial)
#line 1096 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= yyvsp[-1].attr;
                  }
#line 6602 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 304:
  if (!yytrial)
#line 1100 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 6611 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 305:
  if (!yytrial)
#line 1104 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kDelete;
                  }
#line 6620 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 306:
  if (!yytrial)
#line 1108 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kDefault;
                  }
#line 6629 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 307:
  if (!yytrial)
#line 1112 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-1].cppCtorObj;
                    yyval.cppCtorObj->throwSpec_ = yyvsp[0].funcThrowSpec;
                  }
#line 6638 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 308:
  if (!yytrial)
#line 1116 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->docer1_ = yyvsp[-1].str;
                  }
#line 6647 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 309:
  if (!yytrial)
#line 1122 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = nullptr; }
#line 6653 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 310:
  if (!yytrial)
#line 1123 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[0].memInit.mem, yyvsp[0].memInit.init)); }
#line 6659 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 311:
  if (!yytrial)
#line 1124 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-2].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[0].memInit.mem, yyvsp[0].memInit.init)); }
#line 6665 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 312:
  if (!yytrial)
#line 1127 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-3].str, yyvsp[-1].cppExprObj}; }
#line 6671 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 313:
  if (!yytrial)
#line 1128 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInit = CppNtMemInit{yyvsp[-2].str, nullptr}; }
#line 6677 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 314:
#line 1131 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6682 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1131 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 6686 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 315:
#line 1134 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6691 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1135 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6698 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 316:
#line 1139 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6703 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 317:
  if (!yytrial)
#line 1141 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-7].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6712 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 318:
#line 1145 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6717 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 319:
  if (!yytrial)
#line 1147 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-9].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6726 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 320:
#line 1151 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-6].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6731 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 321:
  if (!yytrial)
#line 1153 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-10].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6740 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 322:
  if (!yytrial)
#line 1157 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 6749 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 323:
  if (!yytrial)
#line 1161 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= yyvsp[-1].attr;
                  }
#line 6758 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 324:
#line 1168 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 6770 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1176 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-3].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-3].str.sz+yyvsp[-3].str.len-tildaStartPos), 0);
                  }
#line 6778 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 325:
  if (!yytrial)
#line 1181 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    /* $$->apidecor_ = $1;*/
                  }
#line 6787 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 326:
  if (!yytrial)
#line 1185 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= yyvsp[-1].attr;
                  }
#line 6796 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 327:
  if (!yytrial)
#line 1190 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kPureVirtual;
                  }
#line 6805 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 328:
  if (!yytrial)
#line 1194 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kDelete;
                  }
#line 6814 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 329:
  if (!yytrial)
#line 1198 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kDefault;
                  }
#line 6823 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 330:
  if (!yytrial)
#line 1202 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->throwSpec_ = yyvsp[0].funcThrowSpec;
                  }
#line 6832 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 333:
  if (!yytrial)
#line 1212 "/home/dassat/github/cppparser/parser.y"
{
                  }
#line 6839 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 334:
#line 1214 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6844 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1214 "/home/dassat/github/cppparser/parser.y"
{
                  }
#line 6849 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 335:
#line 1218 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6854 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1218 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 6858 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 336:
#line 1220 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                          ZZVALID;
                      }
#line 6866 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1224 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 6872 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 337:
#line 1230 "/home/dassat/github/cppparser/parser.y"
{
                    ZZVALID;
                    gCompoundStack.push(classNameFromIdentifier(yyvsp[-3].str));
                  }
#line 6880 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1234 "/home/dassat/github/cppparser/parser.y"
{
                    gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt;
                  }
#line 6886 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 338:
#line 1238 "/home/dassat/github/cppparser/parser.y"
{
                    ZZVALID;
                    gCompoundStack.pop();
                  }
#line 6894 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1242 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-8].compoundType;
                    yyval.cppCompundObj->apidecor_    = yyvsp[-7].str;
                    yyval.cppCompundObj->name_      = yyvsp[-6].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 6907 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 339:
  if (!yytrial)
#line 1253 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 6913 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 340:
#line 1255 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6918 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1256 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-6].compoundType;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 6929 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 341:
  if (!yytrial)
#line 1265 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_.reset(yyvsp[-1].templSpec);
                  }
#line 6938 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 342:
  if (!yytrial)
#line 1271 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 6944 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 343:
#line 1272 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6949 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1272 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6953 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 344:
#line 1273 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6958 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1273 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6962 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 345:
  if (!yytrial)
#line 1276 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 6968 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 346:
  if (!yytrial)
#line 1277 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 6974 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 347:
  if (!yytrial)
#line 1278 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6980 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 348:
  if (!yytrial)
#line 1279 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 6986 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 349:
#line 1282 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6991 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1282 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 6995 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 350:
#line 1283 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7000 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1283 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 7004 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 351:
  if (!yytrial)
#line 1284 "/home/dassat/github/cppparser/parser.y"
{
                    /* TODO: Assign template declaration to fwddecl.*/
                    yyval.fwdDeclObj = yyvsp[0].fwdDeclObj;
                  }
#line 7013 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 352:
#line 1288 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7018 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1288 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str); }
#line 7022 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 353:
#line 1289 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7027 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1289 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 7031 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 354:
  if (!yytrial)
#line 1292 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 7037 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 355:
  if (!yytrial)
#line 1293 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 7043 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 356:
  if (!yytrial)
#line 1294 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 7049 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 357:
  if (!yytrial)
#line 1295 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 7055 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 358:
  if (!yytrial)
#line 1298 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 7063 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 359:
  if (!yytrial)
#line 1303 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateParamList;
                  }
#line 7071 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 360:
  if (!yytrial)
#line 1306 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateParamList;
                    yyval.templSpec->emplace_back(yyvsp[0].templateParam);
                  }
#line 7080 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 361:
  if (!yytrial)
#line 1310 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->emplace_back(yyvsp[0].templateParam);
                  }
#line 7089 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 362:
  if (!yytrial)
#line 1316 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(nullptr, yyvsp[0].str);
                  }
#line 7097 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 363:
  if (!yytrial)
#line 1319 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(nullptr, yyvsp[-2].str);
                    yyval.templateParam->setDefaultParam(yyvsp[0].cppVarType);
                  }
#line 7106 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 364:
  if (!yytrial)
#line 1323 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(nullptr, yyvsp[0].str);
                  }
#line 7114 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 365:
  if (!yytrial)
#line 1326 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(nullptr, yyvsp[-2].str);
                    yyval.templateParam->setDefaultParam(yyvsp[0].cppVarType);
                  }
#line 7123 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 366:
  if (!yytrial)
#line 1330 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-1].cppVarType, yyvsp[0].str);
                  }
#line 7131 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 367:
  if (!yytrial)
#line 1333 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templateParam = new CppTemplateParam(yyvsp[-3].cppVarType, yyvsp[-2].str);
                    yyval.templateParam->setDefaultParam(yyvsp[0].cppExprObj);
                  }
#line 7140 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 368:
  if (!yytrial)
#line 1337 "/home/dassat/github/cppparser/parser.y"
{ /* Can happen when forward declaring*/
                    yyval.templateParam = new CppTemplateParam(yyvsp[0].cppVarType, std::string());
                  }
#line 7148 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 369:
  if (!yytrial)
#line 1340 "/home/dassat/github/cppparser/parser.y"
{ /* Can happen when forward declaring*/
                    yyval.templateParam = new CppTemplateParam(yyvsp[-2].cppVarType, std::string());
                    yyval.templateParam->setDefaultParam(yyvsp[0].cppExprObj);
                  }
#line 7157 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 370:
  if (!yytrial)
#line 1347 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, nullptr); }
#line 7163 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 371:
  if (!yytrial)
#line 1348 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 7169 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 372:
  if (!yytrial)
#line 1351 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 7175 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 373:
  if (!yytrial)
#line 1352 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 7181 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 374:
  if (!yytrial)
#line 1353 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 7187 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 375:
  if (!yytrial)
#line 1354 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 7193 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 376:
#line 1357 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7198 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1357 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 7202 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 377:
#line 1358 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7207 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1358 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 7211 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 378:
#line 1359 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7216 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1359 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 7220 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 379:
#line 1362 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7225 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1362 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 7229 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 380:
  if (!yytrial)
#line 1365 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 7235 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 381:
  if (!yytrial)
#line 1366 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 7241 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 382:
  if (!yytrial)
#line 1367 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 7247 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 383:
  if (!yytrial)
#line 1368 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 7253 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 384:
  if (!yytrial)
#line 1369 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kInitializer);        }
#line 7259 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 385:
  if (!yytrial)
#line 1370 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((CppExpr*)nullptr, CppExpr::kInitializer);   }
#line 7265 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 386:
  if (!yytrial)
#line 1371 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 7271 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 387:
  if (!yytrial)
#line 1372 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 7277 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 388:
  if (!yytrial)
#line 1373 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 7283 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 389:
  if (!yytrial)
#line 1374 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 7289 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 390:
  if (!yytrial)
#line 1375 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 7295 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 391:
  if (!yytrial)
#line 1376 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 7301 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 392:
  if (!yytrial)
#line 1377 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 7307 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 393:
  if (!yytrial)
#line 1378 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 7313 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 394:
  if (!yytrial)
#line 1379 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 7319 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 395:
  if (!yytrial)
#line 1380 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 7325 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 396:
  if (!yytrial)
#line 1381 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 7331 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 397:
  if (!yytrial)
#line 1382 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 7337 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 398:
  if (!yytrial)
#line 1383 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 7343 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 399:
  if (!yytrial)
#line 1384 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                 }
#line 7349 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 400:
  if (!yytrial)
#line 1385 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 7355 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 401:
  if (!yytrial)
#line 1386 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 7361 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 402:
  if (!yytrial)
#line 1387 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                     }
#line 7367 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 403:
  if (!yytrial)
#line 1388 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 7373 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 404:
  if (!yytrial)
#line 1389 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 7379 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 405:
  if (!yytrial)
#line 1390 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 7385 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 406:
  if (!yytrial)
#line 1391 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppExprObj);                       }
#line 7391 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 407:
  if (!yytrial)
#line 1392 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);               }
#line 7397 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 408:
  if (!yytrial)
#line 1393 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);              }
#line 7403 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 409:
  if (!yytrial)
#line 1394 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);                }
#line 7409 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 410:
  if (!yytrial)
#line 1395 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);                }
#line 7415 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 411:
  if (!yytrial)
#line 1396 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);                }
#line 7421 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 412:
  if (!yytrial)
#line 1397 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);                }
#line 7427 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 413:
  if (!yytrial)
#line 1398 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);                }
#line 7433 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 414:
  if (!yytrial)
#line 1399 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);                 }
#line 7439 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 415:
  if (!yytrial)
#line 1400 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 7445 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 416:
  if (!yytrial)
#line 1401 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 7451 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 417:
  if (!yytrial)
#line 1402 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 7457 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 418:
  if (!yytrial)
#line 1403 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 7463 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 419:
  if (!yytrial)
#line 1404 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 7469 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 420:
  if (!yytrial)
#line 1405 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 7475 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 421:
  if (!yytrial)
#line 1406 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);               }
#line 7481 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 422:
  if (!yytrial)
#line 1407 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);            }
#line 7487 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 423:
  if (!yytrial)
#line 1408 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                 }
#line 7493 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 424:
  if (!yytrial)
#line 1409 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAnd, yyvsp[0].cppExprObj);                     }
#line 7499 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 425:
  if (!yytrial)
#line 1410 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOr, yyvsp[0].cppExprObj);                      }
#line 7505 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 426:
  if (!yytrial)
#line 1411 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kComma, yyvsp[0].cppExprObj);                   }
#line 7511 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 427:
  if (!yytrial)
#line 1412 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 7517 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 428:
  if (!yytrial)
#line 1413 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 7523 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 429:
  if (!yytrial)
#line 1414 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);               }
#line 7529 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 430:
  if (!yytrial)
#line 1415 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 7535 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 431:
  if (!yytrial)
#line 1416 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 7541 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 432:
  if (!yytrial)
#line 1417 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].cppExprObj);            }
#line 7547 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 433:
  if (!yytrial)
#line 1418 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarType, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 7553 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 434:
  if (!yytrial)
#line 1419 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kConstCast, yyvsp[-1].cppExprObj);               }
#line 7559 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 435:
  if (!yytrial)
#line 1420 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kStaticCast, yyvsp[-1].cppExprObj);              }
#line 7565 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 436:
  if (!yytrial)
#line 1421 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kDynamicCast, yyvsp[-1].cppExprObj);             }
#line 7571 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 437:
  if (!yytrial)
#line 1422 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarType, kReinterpretCast, yyvsp[-1].cppExprObj);         }
#line 7577 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 438:
  if (!yytrial)
#line 1423 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 7583 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 439:
  if (!yytrial)
#line 1424 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 7589 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 440:
  if (!yytrial)
#line 1425 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlacementNew, yyvsp[0].cppExprObj);            }
#line 7595 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 441:
  if (!yytrial)
#line 1426 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlacementNew, yyvsp[0].cppExprObj);            }
#line 7601 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 442:
  if (!yytrial)
#line 1427 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 7607 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 443:
  if (!yytrial)
#line 1428 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 7613 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 444:
  if (!yytrial)
#line 1429 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 7619 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 445:
  if (!yytrial)
#line 1430 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 7625 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 446:
  if (!yytrial)
#line 1431 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 7631 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 447:
  if (!yytrial)
#line 1432 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 7637 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 448:
  if (!yytrial)
#line 1433 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppVarType, CppExpr::kSizeOf);             }
#line 7643 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 449:
  if (!yytrial)
#line 1434 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, CppExpr::kSizeOf);             }
#line 7649 "/home/dassat/github/cppparser/parser.tab.c"
break;
case 450:
#line 1437 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7654 "/home/dassat/github/cppparser/parser.tab.c"
  if (!yytrial)
#line 1437 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 7658 "/home/dassat/github/cppparser/parser.tab.c"
break;
#line 7660 "/home/dassat/github/cppparser/parser.tab.c"
#line 784 "/home/dassat/github/cppparser/third_party/btyacc_tp/btyacc/btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial!=0);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

#ifdef YYPOSN
  /* Perform user-defined position reduction */
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif
#endif /* YYPOSN */

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
#ifdef YYPOSN
  yyps->psp -= yym;
#endif /* YYPOSN */

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state "
	     "%d\n", (int)yydepth, yytrial!=0, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;  /* return value of root non-terminal to yylval */
#ifdef YYPOSN
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;  /* return value of root position to yyposn */
#endif /* YYPOSN */
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       (int)yydepth, yytrial!=0, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state "
	   "%d\n", (int)yydepth, yytrial!=0, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
#ifdef YYPOSN
  *++(yyps->psp) = yyps->pos;
#endif /* YYPOSN */
  goto yyloop;


  /*
  ** Reduction declares that this path is valid.
  ** Set yypath and do a full parse
  */
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    struct yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state "
	   "%d, %d tokens\n", (int)yydepth, yytrial!=0, yypath->state,
	   (int)(yylvp - yylvals - yypath->lexeme));
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  yylexp = yylexemes + yypath->lexeme;
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  yylvp = yylvals + yypath->lexeme;
#ifdef YYPOSN
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylpp = yylpsns + yypath->lexeme;
#endif /* YYPOSN */
  yystate = yypath->state;
  goto yyloop;

yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  {
    YYSTYPE *pv;
#ifdef YYPOSN
    YYPOSN *pp = yyps->ps;
#endif
#ifdef YYDESTRUCT
    Yshort *ps = yyps->ss;
#endif
    for(pv=yyps->vs; pv<yyps->vsp; pv++) {
      YYDELETEVAL(*pv,2);
#if defined(YYDESTRUCT)
      YYDESTRUCT(yytrial!=0, yyastable[*ps++], pv, pp++);
#endif /* YYDESTRUCT */
    }
#ifdef YYPOSN
    for(pp=yyps->ps; pp<yyps->psp; pp++) {
      YYDELETEPOSN(*pp,2);
    }
#endif /* YYPOSN */
  }

  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    struct yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    struct yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}
