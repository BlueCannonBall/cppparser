
//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#	define YYDEBUG 1
#else 
#	define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#	define TRUE true
#endif

/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*	gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>		CppCompoundStack;
static CppCompoundStack				gCompoundStack;

static CppObjProtLevel				gCurProtLevel;
static std::stack<CppObjProtLevel>	gProtLevelStack;

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

static int yylhs[] = {                                        -1,
    0,   23,   23,   23,   23,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,   57,   57,
   52,   52,   52,   52,   52,   52,   53,   54,   54,   55,
   55,   55,   55,   55,   55,   56,   26,   26,    2,    2,
    2,    4,    4,    8,    8,    8,    8,    8,    9,    9,
    9,    9,    7,   22,   22,   21,   20,    3,    3,    3,
    3,    3,    3,   13,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   11,   11,   11,   45,   45,   31,   32,
    6,   29,   29,   30,   30,   19,   19,   19,   15,   15,
   15,   15,   16,   16,   47,   47,   47,   47,   47,   47,
   47,   46,   46,   46,   44,   44,   34,   35,   58,   35,
   59,   35,   33,   60,   33,   39,   39,   39,   37,   38,
   61,   38,   62,   38,   36,   36,   17,   17,   18,   14,
   14,   14,   41,   41,   42,   42,   43,   43,   43,   63,
   24,   48,   48,   48,   49,   49,   49,   49,   10,   10,
   40,   40,   40,   40,   64,   64,    1,    1,   50,   50,
   50,   25,   51,   51,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   28,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    3,    4,    4,    4,    4,    3,    3,    3,    3,
    3,    3,    2,    3,    2,    3,    1,    1,    1,    2,
    3,    0,    1,    1,    3,    1,    1,    1,    0,    2,
    3,    2,    6,    2,    2,    3,    6,    1,    2,    2,
    2,    2,    4,    3,    4,    3,    6,    5,    5,    4,
    3,    3,    4,    6,    9,    8,    1,    1,    2,    4,
    3,   11,   10,    9,    8,    0,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    0,    2,    3,    0,    1,    2,    5,    0,   11,
    0,   13,    4,    0,    6,    0,    5,    6,    2,    4,
    0,   10,    0,   12,    4,    5,    8,    8,    2,    2,
    2,    3,    0,    1,    1,    2,    0,    1,    2,    0,
    9,    0,    3,    4,    0,    1,    1,    1,    3,    4,
    1,    1,    1,    1,    0,    1,    0,    1,    2,    2,
    2,    4,    1,    3,    1,    1,    1,    1,    3,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    4,    4,    4,    3,    3,    4,    3,    2,    2,
    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  175,  176,  177,    0,    0,    0,    0,    0,  164,
   47,   48,    0,    0,    0,  116,   87,    0,  107,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,   22,    8,
   11,    0,    0,    0,    6,    0,    7,    0,    0,    9,
    0,   10,   21,   12,    0,   13,   14,    0,   15,   16,
    0,   17,   18,    0,   19,   20,    0,    0,    0,    0,
   23,   24,   25,   26,   27,    0,   49,    0,    0,    0,
    0,   88,    0,    0,    0,    0,  168,    0,    0,    0,
   53,    0,    0,    0,    0,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
  145,    0,    0,    0,    0,    0,  140,  141,    0,  139,
    0,   65,   64,    0,    0,    0,    4,    5,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  204,    0,
   89,  117,    0,    0,    0,  129,    0,    0,    0,    0,
    0,    0,    0,    0,   30,    0,    0,    0,    0,   99,
   97,    0,  102,    0,  142,    0,   91,    0,   59,    0,
   46,    0,   37,   38,   39,   40,   41,   42,   44,    0,
  198,    0,  179,    0,    0,    0,    0,    0,    0,  103,
    0,  104,    0,    0,  146,    0,    0,   76,    0,    0,
    0,   66,  169,  170,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  196,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  159,    0,    0,    0,    0,
    0,    0,  131,    0,  123,    0,    0,    0,  172,   31,
   34,   35,   33,   36,    0,    0,  135,    0,    0,    0,
    0,   73,    0,   80,    0,    0,    0,    0,    0,  197,
  192,   90,    0,    0,    0,  130,    0,    0,  160,    0,
    0,   75,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,    0,    0,   60,   56,   57,    0,    0,    0,
    0,  121,    0,   79,    0,    0,    0,    0,  118,  156,
  157,  158,    0,    0,  150,    0,   78,    0,    0,  136,
    0,    0,    0,  149,   67,    0,   61,   63,    0,    0,
    0,    0,  133,    0,    0,  127,    0,    0,    0,    0,
    0,   84,   77,  125,    0,    0,    0,    0,    0,  112,
    0,    0,    0,    0,    0,  128,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  137,  138,
    0,   86,    0,  112,    0,    0,    0,  113,    0,    0,
    0,    0,  166,  151,   85,    0,    0,  132,   93,  114,
    0,    0,    0,  120,   92,    0,    0,    0,  134,  122,
};
static int yydgoto[] = {                                      34,
   35,  112,   37,   92,   38,   39,   40,  305,  258,   41,
   42,   43,   44,   45,  181,  211,   46,   47,  182,   48,
   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   65,   66,  164,   67,
  256,  257,  300,   68,   69,  375,   70,  288,  323,  148,
  122,   71,   72,   73,   74,   75,   76,  252,  342,  249,
  297,  363,  350,  394,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0, -211,    0,    0,    0,    0,
    0,    0,   22,   22,  -45,    0,    0,    0,    0, -214,
 -188, 1064, 2168,  464,  215,    0, 2168, 2168, 2168, 2168,
 2168, 2230, 2168,    0,  436,  -35,  283,    0,    0,    0,
    0,   22,  244,   47,    0,  131,    0,  143,   59,    0,
 1893,    0,    0,    0, 1118,    0,    0,   15,    0,    0,
  274,    0,    0,   17,    0,    0,    0,  917,    0,   42,
    0,    0,    0,    0,    0,    0,    0,   22,   22,   22,
  -90,    0,    0,   52,   93,  -81,    0,  436,  141,  917,
    0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
    8,   -7,   36, -123,   80,   91,   96,    0,  104,    0,
 2168,   -6,    0,  166,    0,    0,   37,   37,   37, 1902,
 2087,  -14,    0,   37,   37,  275,    0,  -81,   30,    0,
    0,  -33,  -19,  -71, 2168,    0,    0,    0,    0,    0,
  128,    0,    0,  347,  352,  357,    0,    0, 1937, 2168,
 1945, 2168, 2168, 2168, 2168, 2168, 1959, 2168,    0,    0,
    0,    0,  165,  -15,    0,    0,    0,   34,  -53,    0,
   22,    0,  180,  -81,    0,    0,  181,   22,  398,    0,
    0,   31,    0,   22,    0,  275,    0,  426,    0, 1366,
    0,  207,    0,    0,    0,    0,    0,    0,    0, 2168,
    0, 2168,    0,  441,  233,   22,  452,    0,    0,    0,
  434,    0,   22,   -6,    0,   -6, 2048,    0, 2087,  426,
  426,    0,    0,    0,    0, 2168, 2087,  856, 2168,  856,
  545,  545,   85,   85,   37,    0,  321, 1982, 1417,  470,
  257,    0, 1476,  463,  -43,    0,  426,  -50,  475,  485,
    0,  492,    0,    0,    0,  496,  494,  -11,    0,    0,
    0,    0,    0,    0,    0, 2087,    0,  499,  -28,  233,
  -98,    0,   -6,    0, 2949,  496,  496, 2087,   37,    0,
    0,    0, 2168,  498, 1496,    0,  330,   -4,    0,  496,
 2054,    0,    0,  523,   22,    0,  525,    0,  531,  314,
  511,  537,    0,  527,    0,    0,    0,    0,  325,    0,
  536,    0,  327,    0,  -81,  -81, 3007, 2168,    0,    0,
    0,    0,   22,  330,    0,  -73,    0, 3017,  479,    0,
  -18,  489,  552,    0,    0, 2168,    0,    0,  554,  519,
  351,  577,    0,   22,   22,    0, 3029,   -6,   22,    0,
 2143,    0,    0,    0,    0,  561,  505, 2087,  592,    0,
  602,    0,  605, -106, -106,    0,   -6, 1542,  -81, 3039,
  553,   -2,    0,    0,  -57,  607,  571,  621,    0,    0,
  604,    0,  -81,    0,    0, 1604,  615,    0,  408,    0,
  561,  550,    0,    0,    0,  -57, 1655,    0,    0,    0,
  620,    4,    0,    0,    0,    0, 1780, 1842,    0,    0,
};
static int yyrindex[] = {                                     11,
  150,    0,    0,    0,  655,  555,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  310,
  335,    0,    0,    0,  583,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1879,  651,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  683,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    9,    0,    0,    0,    0,    0,    0,    0,  563,  791,
    0,    0,    0,    0,    0,  528,    0,    0,    0,    0,
    0,    0,  -17,   60,    0, 1879,    0, 1879,    0,    0,
    0,    0,  593,  608, 1426, 2236, 1462,  -69,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2296,  774,    0, 1027, 1764, 2206, 2438, 2496,    0,
   -9,    0,   12, 2529, 2585,  422,    0, 1879,    0,  655,
    0,    0,    0,  457,    0,  -21,    0,    0,  -21,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -69,
    0,    0,    0,    0,  -69,    0, 1570,    0,    0,  988,
    0,  229,    0, 1879,    0,    7,    0,  662,  684,    0,
    0,    0,    0,    0,    0,    0,    0,  -38,    0,    0,
    0,  484,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  653,    0,    0,  497, 2324,    0,
    0,    0,    0,  518,    0,  616,    0,    0,  174,  -25,
  -25,    0,    0,    0,    0,    0, 2716, 2688,    0, 2711,
 1092, 2678, 2557, 2655, 2618,    0,    0,    0,    0,    0,
    0,  -69,    0,   48,    0,    0, 1482,  457,    0,    0,
  422,    0,    0,  522,    0,  448, 1527,    0,    0,    0,
    0,    0,    0,    0, 2751,   53,    0,    0,    0,  653,
    0,    0,  641,    0,    0, -133, -133, 2758, 2642,    0,
    0,    0,    0,    0,    0,    0,   57,    0,    0, 2368,
    0,    0,  -17,    0,    0,  -17,    0,    0, 2489,    0,
  203,    0,   -5,    0,    0,    0,    0,  145,    0,  -17,
    0,    0,    0,    0,   90,   90,    0,    0,    0,    0,
    0,    0,    0,   57,    0,  101,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   20,    0,  -69,
    0,    0,    0,    0,  -17,    9,    0,  219,    0,    0,
    0,  -17,    0,  209,  209,    0,   21,    0,  101,    0,
    0,    0,  -69,  -17,   24,    0,    0,    0,    0,    0,
  183,    0,  101,    0,  -69,    0,    0,    0,    0,  -17,
    9,    0,    0,    0,    0,   58,    0,    0,    0,    0,
    0,    0,  -69,    0,    0,  -69,    0,    0,    0,    0,
};
static int yycindex[] = {                                    578,
  738,    0,    0,    0,  770,    0,  102,  133,  136,    0,
    0,    0,    0,    0,    0,    0,    0,  401,    0,    0,
    0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  397,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  741,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  142,    0, 1290,  454,
    0,    0,    0,    0,    0,  409,    0,    0,    0,    0,
    0,    0, 1326,  443,    0,    0,    0,    0,    0,    0,
    0,    0,  459,  460,  466,  467,  469,  648,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3076,    0, 3100, 3112,    0,    0,    0,    0,
    0,    0,  687,    0,    0,  483,    0,    0,    0, 1293,
    0,    0,    0,    0,    0,  462,    0,    0,  465,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  693,
    0,    0,    0,    0,  844,    0,  473,    0,    0,  490,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1390,
    0,  381,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  502,  503,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1628,    0,
    0,  954, 2237,    0,    0,    0,    0,    0,    0,    0,
  520,    0,    0, 2567,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3132,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2598,    0,    0,    0,    0,    0,
    0,    0, 2696,    0,    0, 3003,    0,    0,    0,    0,
    0,    0,  611,    0,    0,    0,    0,  476,    0, 3015,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1006,
    0,    0,    0,    0, 3033,    0,    0,    0,    0,    0,
    0, 3036,    0,    0,    0,    0,    0, 2650,    0,    0,
    0,    0, 1050, 3054,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1105, 2823,    0,    0,    0, 3066,
    0,    0,    0,    0,    0,    0, 2931,    0,    0,    0,
    0,    0, 1156,    0,    0, 1215, 2961, 2982,    0,    0,
};
static int yygindex[] = {                                      0,
   56,    1,  -24,    0,  -13,    0,    0,  480,    0,    0,
   27,    6,  -20,    0,  559,    0,    0,    0,  704,    0,
    0,    0,  -72,    0,    0, -198,  396,    0,   26,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -305,    0,
   -8,  742,  201,   14,    2,  407,   -1,    0,  493,    0,
  663,    0,    0,    0, -129,    0, -109,    0,    0,    0,
    0,    0,    0,    0,
};
#define YYTABLESIZE 3347
static int yytable[] = {                                     143,
   36,   84,   86,  389,  213,  246,   85,   93,   94,   95,
    2,  310,  143,   96,   97,  289,  115,  351,   90,  217,
  115,  355,  215,   96,  130,  190,   96,  313,  241,  202,
   89,  173,  303,  128,  173,  177,  127,  147,   62,  324,
  291,  241,  134,  170,   49,   91,  119,  241,   49,   49,
  372,   36,  126,   49,   49,    2,   49,   49,   49,  306,
   88,  126,  180,  153,  154,  188,   49,  169,   84,   99,
   49,  255,   49,  161,  254,  166,  157,   98,   93,   94,
   95,   96,   95,   84,   86,  402,  128,  239,  179,  127,
   84,  152,  243,  174,  100,  171,  174,   68,   36,   68,
   68,   68,   49,   68,  306,  138,   49,  242,  183,  178,
  203,  130,  171,  304,  186,  173,   94,  143,  325,   62,
  385,   68,  168,  147,  157,  174,  406,  158,  307,  209,
  156,  126,  214,  216,  194,   49,  147,  160,   88,  165,
  115,  115,  153,  154,  115,  147,   95,  218,  308,  220,
   68,  185,  221,  195,  207,  212,  210,  194,  312,  197,
   36,  191,  115,  184,  188,   36,  176,  173,  245,  285,
  152,  248,   16,  307,  139,  158,  147,  174,  134,   13,
   94,  206,  165,  247,  209,   88,  141,   49,   58,  140,
   36,   49,   49,  308,   49,   49,   49,   16,  184,  187,
  251,  142,    2,    2,    2,   16,  269,   16,   49,   49,
   49,  276,  277,  273,   74,  165,  184,   74,  143,  184,
  165,  388,  165,   77,  165,  147,  184,  165,   16,  147,
  189,  143,   74,  180,  129,  115,   13,   77,  290,   36,
   49,  184,   36,   36,  143,  301,   54,   33,  115,  192,
   13,  184,  115,  143,   84,   86,   11,   12,  200,  179,
  268,  292,   55,  184,  167,  167,  167,  115,  124,   58,
  191,  147,  180,   49,  302,  180,   49,  368,   77,  183,
  178,   49,    2,    2,    2,   36,  208,  136,   26,  180,
  244,   13,  193,   84,   86,  331,   84,   86,  179,   13,
  386,  179,  137,   13,  135,  165,  295,  165,  165,   88,
   84,   86,  397,  155,  205,  179,   68,   49,  183,  178,
  132,  183,  178,  348,  131,  311,  155,   54,  344,  345,
  407,  163,  162,  408,  180,  183,  178,   31,   68,  352,
  111,  180,  196,   55,  364,  365,  115,  197,   88,  367,
   36,   88,  198,  180,  147,   84,   86,  115,  164,  115,
  179,  280,   84,   86,  202,   88,  199,  179,   36,  180,
  115,  167,  147,   36,   84,   86,  185,  379,  380,  179,
  183,  178,  382,  147,  222,   36,   36,  183,  178,  170,
   84,   86,  176,  147,  147,  179,  395,   36,  242,  183,
  178,   58,  173,   36,  223,  179,   36,   36,   36,  224,
   88,  245,   58,   58,  225,  183,  178,   88,  113,  115,
  116,  240,  117,  118,  119,  120,  121,  124,  125,   88,
   58,  168,  168,  168,  199,  106,  250,  253,  199,  165,
  165,  165,  165,  165,  165,   88,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  135,   54,
  109,  165,  165,  165,  165,  165,  165,  131,  165,  264,
   54,   54,    2,    3,    4,   55,  315,  316,  165,  165,
  165,  267,  165,   32,   13,  168,   55,   55,   54,   87,
  326,  270,  168,  168,  168,  272,   33,  115,  168,  168,
  115,   29,   54,   30,   55,   28,  124,  168,   27,  283,
   23,   24,   25,  284,  293,  115,   32,  115,   55,  354,
  287,   32,  254,   32,  294,   32,  181,   28,   32,  356,
  219,  296,  254,  299,   49,  215,   49,  318,   49,   49,
  309,   49,   49,   49,  227,  228,  230,  231,  232,  233,
  234,  235,  121,  238,  114,   49,   49,   49,   82,  360,
   28,   82,  254,  330,  333,   28,  106,   28,  334,   28,
  335,  336,   28,  106,  106,  106,   82,  341,   82,  106,
  106,  339,  154,  343,  157,  338,   31,   49,  106,  111,
  156,  109,  357,  384,  359,  265,  254,  266,  109,  109,
  109,  320,  321,  322,  109,  109,   32,  361,   32,   32,
  114,  391,  275,  109,  254,  102,  362,  105,  163,   99,
   49,  278,   96,  203,  279,  203,  203,  373,  203,  203,
   70,  374,   70,   70,   70,  158,   70,  399,  402,  405,
  408,  203,  376,  203,  378,   71,  390,   71,   71,   71,
   28,   71,   28,   28,   70,  399,   81,  181,  254,   81,
  405,  392,  393,  254,  181,  181,  181,  400,  155,   71,
  181,  181,  403,  203,   81,  203,   81,   52,  317,  181,
  114,   83,    1,   70,   83,  102,  328,  105,  105,   99,
  178,  167,   96,  178,  167,  178,  178,  178,   71,   83,
  108,   83,  101,  111,  147,  101,  203,  203,  257,  178,
  254,  178,  279,  347,   16,   17,   18,   19,   20,   21,
   77,    2,    3,    4,  100,  114,  387,  100,  282,  285,
  102,  358,  105,   13,   99,  288,  291,   96,  294,  390,
  393,  178,  395,  393,   32,   32,  370,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   23,
   24,   25,   32,   32,   32,   32,   32,   32,  393,   32,
  108,  411,  414,  111,  178,  462,  390,  151,  133,   32,
   32,   32,  337,   32,   28,   28,   28,   28,   28,   28,
  396,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,  167,  167,  167,   28,   28,   28,   28,
   28,   28,  298,   28,  199,  108,  349,  199,  111,  237,
    0,    0,    0,   28,   28,   28,  105,  106,  107,  108,
  109,  110,  199,    0,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,   70,
  203,  203,   54,    0,    0,    0,   57,   61,   65,   69,
   73,   77,    0,   81,   71,    0,  199,  447,  203,    0,
    0,   70,    0,   84,   87,   90,  114,   93,  450,  453,
    0,  102,  203,  105,    0,   99,   71,    0,   96,    0,
    0,    0,    0,  154,    0,  157,  456,  152,  199,    0,
    0,  156,  153,    0,    0,    5,    8,   11,   14,   17,
  459,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,    0,   54,    0,    0,    0,   57,   61,   65,   69,
   73,   77,    0,   81,  167,  167,  167,  167,  167,    0,
    0,    0,    0,   84,   87,   90,  158,   93,    0,    0,
    5,    8,   11,   14,   17,    0,   20,   25,   30,   35,
   38,   41,   44,   49,    0,    0,  108,   54,    0,  111,
    0,   57,   61,   65,   69,   73,   77,    0,   81,  155,
    0,    0,    0,    0,    0,    0,  114,    0,   84,   87,
   90,  102,   93,  105,  117,   99,  329,  203,   96,  332,
    0,  121,  125,  129,  207,  211,  215,  133,  138,    0,
  219,  223,    0,  340,    0,    0,  142,  145,  148,  161,
  227,  230,  233,  236,  239,  115,  154,  115,  115,  115,
  199,  115,    0,  157,  157,  157,    0,    0,  114,  157,
  157,  199,  199,  102,    0,  105,    0,   99,  161,  115,
   96,    0,    0,    0,  167,  167,  167,    0,  371,  199,
  167,  167,    0,    0,    0,  377,    0,  200,    0,  167,
  200,    0,    0,  199,    0,    0,  108,  387,  115,  111,
    0,    0,  114,    0,    0,  200,    0,  102,    0,  105,
    0,   99,    0,  401,   96,    0,    0,    0,    0,    0,
    0,    5,    8,   11,   14,   17,    0,   20,   25,   30,
   35,   38,   41,   44,   49,    0,    0,    0,   54,  200,
    0,    0,   57,   61,   65,   69,   73,   77,  108,   81,
    0,  111,  187,  187,  187,  187,  187,  114,  187,   84,
   87,   90,  102,   93,  105,    0,   99,    0,    0,   96,
  187,  200,  187,    0,    0,  154,    0,  157,    0,  152,
  150,    0,  151,  156,  153,    0,    0,    0,    0,    0,
    0,    0,  108,   77,    0,  111,  159,    0,  149,    0,
   78,   79,   80,    0,  187,    0,   13,   14,  114,    0,
    0,    0,    0,  102,    0,  105,    0,   99,    0,    0,
   96,    0,    0,    0,    0,    0,    0,    0,  158,    0,
    0,    5,    8,   11,   14,   17,  187,   20,   25,   30,
   35,   38,   41,   44,   49,    0,    0,  108,   54,    0,
  111,    0,   57,   61,   65,   69,   73,   77,    0,   81,
    0,  155,    0,    0,  115,    0,    0,  114,    0,   84,
   87,   90,  102,   93,  105,    0,   99,  115,    0,   96,
    0,    0,    0,    5,    8,   11,   14,   17,    0,   20,
   25,   30,   35,   38,   41,   44,   49,    0,  108,    0,
   54,  111,    0,  200,   57,   61,   65,   69,   73,   77,
    0,   81,    0,    0,  200,  200,    0,    0,    0,    0,
    0,   84,   87,   90,    0,   93,    0,    5,    8,   11,
   14,   17,  200,   20,   25,   30,   35,   38,   41,   44,
   49,    0,    0,    0,   54,    0,  200,    0,   57,   61,
   65,   69,   73,   77,    0,   81,    0,  108,    0,    0,
  111,  101,    0,    0,    0,   84,   87,   90,  187,   93,
  102,  103,  104,  105,  106,  107,  108,  109,  110,  187,
  187,    0,    5,    8,   11,   14,   17,    0,   20,   25,
   30,   35,   38,   41,   44,   49,    0,  187,    0,   54,
    0,    0,    0,   57,   61,   65,   69,   73,   77,    0,
   81,  187,    0,    0,    0,    0,    0,    0,   33,    0,
   84,   87,   90,   29,   93,   30,    0,   28,    0,    0,
   27,    0,    0,    5,    8,   11,   14,   17,    0,   20,
   25,   30,   35,   38,   41,   44,   49,    0,    0,    0,
   54,    0,    0,    0,   57,   61,   65,   69,   73,   77,
    0,   81,    0,    0,    0,    0,    0,    0,    0,   33,
    0,   84,   87,   90,   29,   93,   30,    0,   28,    0,
    0,   27,    0,   72,    0,   72,   72,   72,    0,   72,
    0,    0,    5,    8,   11,   14,   17,    0,   20,   25,
   30,   35,   38,   41,   44,   49,    0,   72,   31,   54,
  259,   32,    0,   57,   61,   65,   69,   73,   77,   69,
   81,   69,   69,   69,    0,   69,    0,    0,   33,    0,
   84,   87,   90,   29,   93,   30,   72,   28,    0,  143,
   27,  143,  143,   69,    0,  143,    0,    0,   33,    0,
    0,    0,    0,   29,    0,   30,    0,   28,    0,   31,
   27,  282,   32,  143,    0,    0,  247,    0,    0,  154,
    0,    0,   69,  247,  247,  247,  157,  157,  157,  247,
  247,    0,  157,  157,  144,    0,  144,  144,  251,    0,
  144,  161,  143,    0,   33,    0,    0,    0,    0,   29,
    0,   30,  260,   28,    0,    0,   27,    0,  144,  264,
  268,  272,    0,    0,    0,  219,  223,    0,   31,    0,
  286,   32,    0,    0,  161,  227,  276,   49,    0,    0,
    0,   49,    0,    0,    0,    0,    0,  144,   31,    0,
  319,   32,    0,    2,    3,    4,    5,    6,   49,   49,
    0,    0,   10,   11,   12,    0,   33,  144,  145,  146,
   15,   29,    0,   30,    0,   28,  203,    0,   27,    0,
    0,   22,    0,  207,  211,  215,    0,    0,    0,  219,
  223,   23,   24,   25,   31,   26,  381,   32,  161,  227,
  230,  233,  236,  239,    2,    3,    4,    5,    6,    0,
    0,    0,   72,   10,   11,   12,    0,   33,  144,  145,
  146,   15,   29,    0,   30,    0,   28,    0,    0,   27,
    0,    0,   22,    0,   72,    0,    0,    0,    0,    0,
    0,    0,   23,   24,   25,    0,   26,    0,   69,    0,
    0,    0,    0,    0,    0,    0,   31,    0,  398,   32,
    0,    0,    0,    2,    3,    4,    5,    6,  143,    0,
   69,    0,   10,   11,   12,    0,    0,  144,  145,  146,
   15,  143,    0,    2,    3,    4,    5,    6,    0,    0,
  143,   22,   10,   11,   12,    0,    0,  144,  145,  146,
   15,   23,   24,   25,    0,   26,    0,   31,    0,  404,
   32,   22,    0,  144,    0,    0,    0,    0,    0,    0,
    0,   23,   24,   25,    0,   26,  144,    0,    0,    2,
    3,    4,    5,    6,  202,  144,    0,  202,   10,   11,
   12,    0,   33,  144,  145,  146,   15,   29,    0,   30,
    0,   28,  202,    0,   27,    0,  168,   22,    0,    0,
    0,    0,    0,  168,  168,  168,    0,   23,   24,   25,
  168,   26,    0,    0,    0,    0,    0,    0,  168,  168,
  168,  168,  168,  168,    0,    0,  202,    0,    0,    0,
    0,    2,    3,    4,    5,    6,    0,    0,    0,    0,
   10,   11,   12,    0,   33,  144,  145,  146,   15,   29,
    0,   30,    0,   28,  203,    0,   27,    0,  202,   22,
    0,  207,  211,  215,    0,    0,    0,  219,  223,   23,
   24,   25,   31,   26,  409,   32,  161,  227,  230,  233,
  236,  239,    2,    3,    4,    5,    6,    0,    0,    0,
    0,   10,   11,   12,    0,   33,  144,  145,  146,   15,
   29,    0,   30,    0,   28,    0,    0,   27,    0,  154,
   22,  157,  201,  152,  150,    0,  151,  156,  153,    0,
   23,   24,   25,    0,   26,    0,    0,    0,    0,    0,
    0,    0,  149,    0,   31,    0,  410,   32,    0,   33,
    0,    0,    0,    0,   29,    0,   30,   33,   28,    0,
    0,   27,   29,    0,   30,    0,   28,    0,    0,   27,
    0,   33,  158,    0,    0,    0,   29,  226,   30,  236,
   28,    0,    0,   27,    0,    0,  229,    0,    0,    0,
    0,    0,    0,    0,    0,   31,    0,    0,   32,  154,
  202,  157,    0,  152,  150,  155,  151,  156,  153,    0,
    0,  202,  202,    0,    0,    0,    0,    2,    3,    4,
    5,    6,  149,    0,    0,    0,   10,   11,   12,  202,
    0,  144,  145,  146,   15,    0,    0,    0,    0,   31,
    0,    0,  111,  202,    0,   22,    0,   31,    0,    0,
  111,    0,  158,    0,  281,   23,   24,   25,    0,   26,
   33,   31,    0,    0,  111,   29,   33,   30,    0,   28,
    0,   29,   27,   30,    0,   28,    0,    0,   27,    2,
    3,    4,    5,    6,    0,  155,    0,    0,   10,   11,
   12,    0,    0,  144,  145,  146,   15,    0,    0,    0,
    0,    0,    0,    0,  154,    0,  157,   22,  152,  150,
    0,  151,  156,  153,    0,  115,    0,   23,   24,   25,
  274,   26,  115,  115,  115,    0,  327,  149,  115,  115,
    2,    3,    4,    5,    6,    0,    0,    0,    0,   10,
   11,   12,    0,    0,  144,  145,  146,   15,    0,    0,
   31,    0,    0,  111,    0,   33,   31,  158,   22,  111,
   29,    0,   30,    0,   28,    0,    0,   27,   23,   24,
   25,    0,   26,   77,    2,    3,    4,    0,    0,    0,
   33,   77,    2,    3,    4,   29,   13,   30,    0,   28,
  155,    0,   27,    0,   13,   77,    2,    3,    4,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
    0,    0,   23,   24,   25,  369,    0,    0,    0,    0,
   23,   24,   25,  180,    0,    0,  180,  180,  180,  180,
  180,  180,  180,    0,   23,   24,   25,    0,    0,    0,
    0,    0,   33,    0,  180,   31,  180,   29,  111,   30,
    0,   28,    0,   50,   27,   50,   50,   50,   50,   50,
   50,   50,   50,    0,    0,    0,    0,    0,    0,    0,
   31,    0,    0,  111,   50,   50,   50,   50,  180,    0,
    0,    0,    0,    0,   77,    2,    3,    4,    0,    0,
   77,    2,    3,    4,    0,    0,    0,   13,    0,    0,
    0,    0,    0,   13,    0,    0,   50,    0,   50,  180,
  180,    0,    0,  178,    0,  178,  178,  178,  178,  178,
  178,  178,  178,   23,   24,   25,    0,    0,    0,   23,
   24,   25,   31,    0,  178,  111,  178,    0,   50,   50,
   50,   51,    0,   51,   51,   51,   51,   51,   51,   51,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,   51,   51,   51,  178,    0,  178,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
    2,    3,    4,    0,    0,    0,    0,  147,  147,    0,
    0,  147,   13,    0,   51,    0,   51,    0,    0,  178,
  178,    0,    0,    0,   77,    2,    3,    4,    0,  147,
    0,    0,    0,    0,    0,    0,    0,   13,   23,   24,
   25,    0,    0,    0,    0,    0,   51,   51,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
    0,    0,  180,   23,   24,   25,    0,    0,    0,    0,
    0,    0,    0,  180,  180,  183,    0,    0,  183,  183,
  183,  183,  183,  183,  183,    0,  123,    2,    3,    4,
    0,  180,   50,  203,    0,    0,  183,    0,  183,   13,
  207,  211,  215,   50,   50,  180,  219,  223,    0,    0,
    0,    0,    0,    0,   50,  161,  227,  230,  233,  236,
  239,   50,    0,    0,    0,   23,   24,   25,  148,  148,
  183,    0,  148,  184,    0,   50,  184,  184,  184,  184,
  184,  184,  184,    0,    0,    0,    0,    0,    0,    0,
  148,    0,  178,    0,  184,    0,  184,    0,    0,    0,
    0,  183,  183,  178,  178,    0,  181,    0,    0,  181,
  181,  181,  181,  181,  181,  181,    0,    0,    0,  148,
   51,  178,    0,    0,    0,    0,    0,  181,  184,  181,
    0,   51,   51,    0,  189,  178,    0,  189,  189,  189,
  189,  189,   51,  189,    0,    0,    0,    0,    0,   51,
    0,    0,    0,    0,    0,  189,    0,  189,    0,  184,
  184,  181,  182,   51,  147,  182,  182,  182,  182,  182,
  182,  182,    0,    0,    0,    0,    0,  147,    0,    0,
    0,    0,    0,  182,    0,  182,  147,    0,    0,  189,
    0,    0,  181,  181,    0,  195,    0,    0,  195,  195,
  195,  195,  195,  195,  195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  195,  182,  195,  194,
  189,  189,  194,  194,  194,  194,  194,  194,  194,    0,
    0,    0,  190,    0,  183,  190,  190,  190,  190,  190,
  194,  190,  194,    0,    0,  183,  183,    0,  182,  182,
  195,    0,    0,  190,    0,  190,    0,    0,  188,  188,
  188,  188,  188,  183,  188,    0,    0,    0,  185,    0,
  185,  185,  185,    0,  194,    0,  188,  183,  188,    0,
    0,  195,  195,    0,    0,  148,  185,  190,  185,    0,
    0,  186,  184,  186,  186,  186,  191,    0,  148,  191,
    0,    0,    0,  184,  184,  194,  194,  148,    0,  186,
  188,  186,    0,    0,  191,    0,    0,    0,  190,  190,
  185,  184,    0,    0,    0,  181,    0,    0,    0,    0,
    0,  201,    0,    0,  201,  184,  181,  181,  193,    0,
    0,  193,  188,  186,    0,    0,    0,    0,  191,  201,
    0,    0,  185,  189,  181,    0,  193,    0,    0,    0,
    0,    0,    0,  260,  189,  189,    0,    0,  181,    0,
  264,  268,  272,    0,    0,  186,  219,  223,    0,    0,
  191,  182,  189,  201,    0,  161,  227,  276,    0,    0,
  193,    0,  182,  182,  203,    0,  189,    0,    0,    0,
    0,  207,  211,  215,    0,    0,    0,  219,  223,    0,
  182,    0,    0,    0,  195,  201,  161,  227,  230,  233,
  236,  239,  193,    0,  182,  195,  195,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  194,    0,
    0,    0,    0,  195,    0,    0,  203,    0,    0,  194,
  194,  190,    0,  207,  211,  215,    0,  195,    0,  219,
  223,    0,  190,  190,    0,    0,    0,  194,  161,  227,
  230,  233,  236,  239,  188,    0,    0,    0,    0,    0,
  190,  194,    0,    0,  185,  188,  188,    0,    0,    0,
    0,    0,  260,    0,  190,  185,  185,    0,    0,  264,
  268,  272,    0,  188,    0,  219,  223,  186,    0,    0,
    0,    0,  191,  185,  161,  227,  276,  188,  186,  186,
    0,    0,    0,  191,  191,    0,  154,  185,  157,    0,
  152,  150,    0,  151,  156,  153,  186,    0,    0,    0,
    0,  191,    0,    0,    0,    0,    0,  201,    0,  149,
  186,    0,    0,    0,  193,  191,    0,    0,  201,  201,
    0,    0,    0,    0,    0,  193,  193,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  201,    0,    0,  158,
    0,  314,    0,  193,  154,    0,  157,  346,  152,  150,
  201,  151,  156,  153,  154,    0,  157,  193,  152,  150,
    0,  151,  156,  153,    0,    0,  154,  149,  157,  366,
  152,  150,  155,  151,  156,  153,  154,  149,  157,  203,
  152,  150,    0,  151,  156,  153,  207,  211,  215,  149,
    0,    0,  219,  223,    0,    0,    0,  158,    0,  149,
    0,  161,  227,  230,  233,  236,  239,  158,    0,  353,
    0,    0,    0,  312,    0,  321,    0,  306,  300,  158,
  303,  318,  309,    0,    0,    0,    0,    0,    0,  158,
  155,  383,    0,    0,    0,    0,  297,  342,    0,  351,
  155,  336,  330,    0,  333,  348,  339,    0,    0,  372,
    0,  381,  155,  366,  360,    0,  363,  378,  369,    0,
  327,    0,  155,    0,    0,    0,  324,    0,    0,  432,
    0,  441,  357,  426,  420,    0,  423,  438,  429,    0,
    0,    0,    0,    0,    0,    0,    0,  203,    0,    0,
  354,    0,  417,    0,  207,  211,  215,    0,    0,  315,
  219,  223,  384,    0,    0,    0,    0,    0,    0,  161,
  227,  230,  233,  236,  239,    0,    0,  203,    0,    0,
    0,    0,  444,  345,  207,  211,  215,    0,    0,    0,
  219,  223,    0,    0,    0,  375,    0,    0,  203,  161,
  227,  230,  233,  236,  239,  207,  211,  215,    0,    0,
    0,  219,  223,    0,    0,  435,    0,    0,    0,  260,
  161,  227,  230,  233,  236,  239,  264,  268,  272,    0,
    0,  260,  219,  223,    0,    0,    0,    0,  264,  268,
  272,  161,  227,  276,  219,  223,    0,    0,    0,  260,
    0,    0,  260,  161,  227,  276,  264,  268,  272,  264,
  268,  272,  219,  223,    0,  219,  223,    0,    0,    0,
  260,  161,  227,  276,  161,  227,  276,  264,  268,  272,
    0,    0,  260,  219,  223,    0,    0,    0,    0,  264,
  268,  272,  161,  227,  276,  219,  223,    0,    0,    0,
    0,    0,    0,    0,  161,  227,  276,
};
static int yycheck[] = {                                      38,
    0,    1,    1,   61,   38,   59,    1,    7,    8,    9,
    0,   40,   38,   13,   14,   59,   38,   91,    5,   91,
   42,   40,   42,   41,   60,   98,   44,  126,   44,   44,
    5,   41,   44,   35,   44,  126,   35,   51,   44,   44,
   91,   44,   42,   68,   38,  257,   40,   44,   42,   38,
  356,   51,   44,   42,   43,  125,   45,   46,   47,  258,
    5,   35,   83,   44,   44,   90,   60,   67,   68,  284,
   59,   41,   61,   59,   44,   59,   40,  123,   78,   79,
   80,   81,   59,   83,   83,  391,   88,  160,   83,   88,
   90,   44,  165,   41,  283,   69,   44,   38,   98,   40,
   41,   42,   91,   44,  303,   59,   59,  123,   83,   83,
  125,   60,   86,  125,   88,  125,   59,   59,  123,  125,
  123,   62,   67,  257,   40,   70,  123,   91,  258,  129,
   46,  123,  132,  133,  258,  124,  270,  123,   83,  123,
   40,   41,  123,  123,   44,  279,  123,  134,  258,  136,
   91,   59,  139,  277,  128,  130,  130,   38,  257,   40,
  160,   42,   62,  270,   45,  165,  257,  126,  168,  242,
  123,  171,  279,  303,   44,   91,  190,  125,  178,  270,
  123,  126,    0,  170,  184,  130,   44,   38,   44,   59,
  190,   42,   43,  303,   45,   46,   47,  279,  270,   59,
  174,   59,  272,  273,  274,  279,  206,  279,   59,   60,
   61,  220,  221,  213,   41,   33,  270,   44,  257,  270,
   38,  279,   40,  257,   42,  239,  270,   45,  279,  243,
  123,  257,   59,  254,  270,  257,  270,  257,  247,  239,
   91,  270,  242,  243,  270,  257,   44,   33,  270,  257,
  270,  270,   44,  279,  254,  254,  268,  269,   93,  254,
  205,  248,   44,  270,  282,  283,  284,   59,   40,  125,
  263,  285,  293,  124,  286,  296,  270,  350,  257,  254,
  254,  270,  272,  273,  274,  285,  257,   44,  300,  310,
  257,  270,  257,  293,  293,  295,  296,  296,  293,  270,
  373,  296,   59,  270,   61,  123,  251,  125,  126,  254,
  310,  310,  385,  257,   40,  310,  257,  270,  293,  293,
   38,  296,  296,  323,   42,  270,  270,  125,  315,  316,
  403,   58,   59,  406,  355,  310,  310,  123,  279,  326,
  126,  362,  263,  125,  344,  345,  257,  257,  293,  349,
  350,  296,  257,  374,  368,  355,  355,  257,  257,  270,
  355,   41,  362,  362,   44,  310,  263,  362,  368,  390,
  270,  270,  386,  373,  374,  374,  257,  364,  365,  374,
  355,  355,  369,  397,  257,  385,  386,  362,  362,  257,
  390,  390,  257,  407,  408,  390,  383,  397,  257,  374,
  374,  257,  270,  403,   58,  270,  406,  407,  408,   58,
  355,  270,  268,  269,   58,  390,  390,  362,   23,   24,
   25,  257,   27,   28,   29,   30,   31,   32,   33,  374,
  286,  282,  283,  284,   38,  126,  257,  257,   42,  257,
  258,  259,  260,  261,  262,  390,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,   61,  257,
  126,  279,  280,  281,  282,  283,  284,   42,  286,  263,
  268,  269,  258,  259,  260,  257,  276,  277,  296,  297,
  298,   41,  300,    0,  270,  257,  268,  269,  286,  257,
  290,   40,  264,  265,  266,   62,   33,   41,  270,  271,
   44,   38,  300,   40,  286,   42,  111,  279,   45,   40,
  296,  297,  298,  257,   40,   59,   33,   61,  300,   41,
   58,   38,   44,   40,   40,   42,  126,    0,   45,   41,
  135,   40,   44,   38,   38,   42,   40,   40,   42,   43,
   42,   45,   46,   47,  149,  150,  151,  152,  153,  154,
  155,  156,  157,  158,   91,   59,   60,   61,   41,   41,
   33,   44,   44,   41,   40,   38,  257,   40,   38,   42,
  257,   61,   45,  264,  265,  266,   59,   42,   61,  270,
  271,  257,   38,  257,   40,   59,  123,   91,  279,  126,
   46,  257,   41,   41,   41,  200,   44,  202,  264,  265,
  266,  272,  273,  274,  270,  271,  123,  257,  125,  126,
   33,   41,  217,  279,   44,   38,   40,   40,   58,   42,
  124,  226,   45,   41,  229,   43,   44,  123,   46,   47,
   38,   40,   40,   41,   42,   91,   44,  257,  258,  259,
  260,   59,   41,   61,   40,   38,   40,   40,   41,   42,
  123,   44,  125,  126,   62,   41,   41,  257,   44,   44,
   41,   41,   59,   44,  264,  265,  266,  260,  124,   62,
  270,  271,  123,   91,   59,   93,   61,  123,  283,  279,
   33,   41,    0,   91,   44,   38,  291,   40,  126,   42,
   40,  270,   45,   43,   42,   45,   46,   47,   91,   59,
  123,   61,   41,  126,  257,   44,  124,  125,  300,   59,
  257,   61,  270,  318,  279,  280,  281,  282,  283,  284,
  257,  258,  259,  260,   41,   33,   40,   44,  270,  270,
   38,  336,   40,  270,   42,  270,  270,   45,  270,  257,
  279,   91,  270,  279,  261,  262,  351,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  296,
  297,  298,  279,  280,  281,  282,  283,  284,  279,  286,
  123,  270,  270,  126,  124,  300,  257,   40,   37,  296,
  297,  298,  303,  300,  257,  258,  259,  260,  261,  262,
  384,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  282,  283,  284,  279,  280,  281,  282,
  283,  284,  254,  286,   41,  123,  324,   44,  126,  157,
   -1,   -1,   -1,  296,  297,  298,  290,  291,  292,  293,
  294,  295,   59,   -1,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,  257,
  268,  269,  275,   -1,   -1,   -1,  279,  280,  281,  282,
  283,  284,   -1,  286,  257,   -1,   93,  257,  286,   -1,
   -1,  279,   -1,  296,  297,  298,   33,  300,  268,  269,
   -1,   38,  300,   40,   -1,   42,  279,   -1,   45,   -1,
   -1,   -1,   -1,   38,   -1,   40,  286,   42,  125,   -1,
   -1,   46,   47,   -1,  257,  258,  259,  260,  261,  262,
  300,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,  275,   -1,   -1,   -1,  279,  280,  281,  282,
  283,  284,   -1,  286,  280,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,  296,  297,  298,   91,  300,   -1,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,  123,  275,   -1,  126,
   -1,  279,  280,  281,  282,  283,  284,   -1,  286,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  296,  297,
  298,   38,  300,   40,  257,   42,  293,  257,   45,  296,
   -1,  264,  265,  266,  264,  265,  266,  270,  271,   -1,
  270,  271,   -1,  310,   -1,   -1,  279,  280,  281,  279,
  280,  281,  282,  283,  284,   38,  257,   40,   41,   42,
  257,   44,   -1,  264,  265,  266,   -1,   -1,   33,  270,
  271,  268,  269,   38,   -1,   40,   -1,   42,  279,   62,
   45,   -1,   -1,   -1,  264,  265,  266,   -1,  355,  286,
  270,  271,   -1,   -1,   -1,  362,   -1,   41,   -1,  279,
   44,   -1,   -1,  300,   -1,   -1,  123,  374,   91,  126,
   -1,   -1,   33,   -1,   -1,   59,   -1,   38,   -1,   40,
   -1,   42,   -1,  390,   45,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,  275,   93,
   -1,   -1,  279,  280,  281,  282,  283,  284,  123,  286,
   -1,  126,   41,   42,   43,   44,   45,   33,   47,  296,
  297,  298,   38,  300,   40,   -1,   42,   -1,   -1,   45,
   59,  125,   61,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  257,   -1,  126,   59,   -1,   61,   -1,
  264,  265,  266,   -1,   93,   -1,  270,  271,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  257,  258,  259,  260,  261,  262,  125,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,  123,  275,   -1,
  126,   -1,  279,  280,  281,  282,  283,  284,   -1,  286,
   -1,  124,   -1,   -1,  257,   -1,   -1,   33,   -1,  296,
  297,  298,   38,  300,   40,   -1,   42,  270,   -1,   45,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  123,   -1,
  275,  126,   -1,  257,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,   -1,  300,  257,  258,  259,  260,
  261,  262,  286,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,  275,   -1,  300,   -1,  279,  280,
  281,  282,  283,  284,   -1,  286,   -1,  123,   -1,   -1,
  126,  278,   -1,   -1,   -1,  296,  297,  298,  257,  300,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  268,
  269,  257,  258,  259,  260,  261,  262,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  286,   -1,  275,
   -1,   -1,   -1,  279,  280,  281,  282,  283,  284,   -1,
  286,  300,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
  296,  297,  298,   38,  300,   40,   -1,   42,   -1,   -1,
   45,   -1,  257,  258,  259,  260,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,  280,  281,  282,  283,  284,
   -1,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,  296,  297,  298,   38,  300,   40,   -1,   42,   -1,
   -1,   45,   -1,   38,   -1,   40,   41,   42,   -1,   44,
   -1,  257,  258,  259,  260,  261,  262,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   62,  123,  275,
  125,  126,   -1,  279,  280,  281,  282,  283,  284,   38,
  286,   40,   41,   42,   -1,   44,   -1,   -1,   33,   -1,
  296,  297,  298,   38,  300,   40,   91,   42,   -1,   38,
   45,   40,   41,   62,   -1,   44,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,  123,
   45,  125,  126,   62,   -1,   -1,  257,   -1,   -1,  257,
   -1,   -1,   91,  264,  265,  266,  264,  265,  266,  270,
  271,   -1,  270,  271,   38,   -1,   40,   41,  279,   -1,
   44,  279,   91,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  257,   42,   -1,   -1,   45,   -1,   62,  264,
  265,  266,   -1,   -1,   -1,  270,  271,   -1,  123,   -1,
  125,  126,   -1,   -1,  279,  280,  281,   38,   -1,   -1,
   -1,   42,   -1,   -1,   -1,   -1,   -1,   91,  123,   -1,
  125,  126,   -1,  258,  259,  260,  261,  262,   59,   60,
   -1,   -1,  267,  268,  269,   -1,   33,  272,  273,  274,
  275,   38,   -1,   40,   -1,   42,  257,   -1,   45,   -1,
   -1,  286,   -1,  264,  265,  266,   -1,   -1,   -1,  270,
  271,  296,  297,  298,  123,  300,  125,  126,  279,  280,
  281,  282,  283,  284,  258,  259,  260,  261,  262,   -1,
   -1,   -1,  257,  267,  268,  269,   -1,   33,  272,  273,
  274,  275,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,  286,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,   -1,  300,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,  258,  259,  260,  261,  262,  257,   -1,
  279,   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,
  275,  270,   -1,  258,  259,  260,  261,  262,   -1,   -1,
  279,  286,  267,  268,  269,   -1,   -1,  272,  273,  274,
  275,  296,  297,  298,   -1,  300,   -1,  123,   -1,  125,
  126,  286,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  296,  297,  298,   -1,  300,  270,   -1,   -1,  258,
  259,  260,  261,  262,   41,  279,   -1,   44,  267,  268,
  269,   -1,   33,  272,  273,  274,  275,   38,   -1,   40,
   -1,   42,   59,   -1,   45,   -1,  257,  286,   -1,   -1,
   -1,   -1,   -1,  264,  265,  266,   -1,  296,  297,  298,
  271,  300,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,
  281,  282,  283,  284,   -1,   -1,   93,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,  262,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   33,  272,  273,  274,  275,   38,
   -1,   40,   -1,   42,  257,   -1,   45,   -1,  125,  286,
   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,  296,
  297,  298,  123,  300,  125,  126,  279,  280,  281,  282,
  283,  284,  258,  259,  260,  261,  262,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,   33,  272,  273,  274,  275,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   38,
  286,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
  296,  297,  298,   -1,  300,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   61,   -1,  123,   -1,  125,  126,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   33,   42,   -1,
   -1,   45,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
   -1,   33,   91,   -1,   -1,   -1,   38,   61,   40,   41,
   42,   -1,   -1,   45,   -1,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   38,
  257,   40,   -1,   42,   43,  124,   45,   46,   47,   -1,
   -1,  268,  269,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,  262,   61,   -1,   -1,   -1,  267,  268,  269,  286,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,  300,   -1,  286,   -1,  123,   -1,   -1,
  126,   -1,   91,   -1,   93,  296,  297,  298,   -1,  300,
   33,  123,   -1,   -1,  126,   38,   33,   40,   -1,   42,
   -1,   38,   45,   40,   -1,   42,   -1,   -1,   45,  258,
  259,  260,  261,  262,   -1,  124,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   38,   -1,   40,  286,   42,   43,
   -1,   45,   46,   47,   -1,  257,   -1,  296,  297,  298,
   93,  300,  264,  265,  266,   -1,   93,   61,  270,  271,
  258,  259,  260,  261,  262,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
  123,   -1,   -1,  126,   -1,   33,  123,   91,  286,  126,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,  296,  297,
  298,   -1,  300,  257,  258,  259,  260,   -1,   -1,   -1,
   33,  257,  258,  259,  260,   38,  270,   40,   -1,   42,
  124,   -1,   45,   -1,  270,  257,  258,  259,  260,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,   -1,
   -1,   -1,  296,  297,  298,   93,   -1,   -1,   -1,   -1,
  296,  297,  298,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,  296,  297,  298,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   59,  123,   61,   38,  126,   40,
   -1,   42,   -1,   38,   45,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,  126,   59,   60,   61,   62,   93,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,  270,   -1,   -1,   91,   -1,   93,  124,
  125,   -1,   -1,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,  296,  297,  298,   -1,   -1,   -1,  296,
  297,  298,  123,   -1,   59,  126,   61,   -1,  123,  124,
  125,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   91,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,   -1,   -1,   -1,   40,   41,   -1,
   -1,   44,  270,   -1,   91,   -1,   93,   -1,   -1,  124,
  125,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  296,  297,
  298,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   -1,  257,  296,  297,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  268,  269,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,  257,  258,  259,  260,
   -1,  286,  257,  257,   -1,   -1,   59,   -1,   61,  270,
  264,  265,  266,  268,  269,  300,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,  279,  279,  280,  281,  282,  283,
  284,  286,   -1,   -1,   -1,  296,  297,  298,   40,   41,
   93,   -1,   44,   38,   -1,  300,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   62,   -1,  257,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,  124,  125,  268,  269,   -1,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   91,
  257,  286,   -1,   -1,   -1,   -1,   -1,   59,   93,   61,
   -1,  268,  269,   -1,   38,  300,   -1,   41,   42,   43,
   44,   45,  279,   47,   -1,   -1,   -1,   -1,   -1,  286,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,  124,
  125,   93,   38,  300,  257,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,  279,   -1,   -1,   93,
   -1,   -1,  124,  125,   -1,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   93,   61,   38,
  124,  125,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   38,   -1,  257,   41,   42,   43,   44,   45,
   59,   47,   61,   -1,   -1,  268,  269,   -1,  124,  125,
   93,   -1,   -1,   59,   -1,   61,   -1,   -1,   41,   42,
   43,   44,   45,  286,   47,   -1,   -1,   -1,   41,   -1,
   43,   44,   45,   -1,   93,   -1,   59,  300,   61,   -1,
   -1,  124,  125,   -1,   -1,  257,   59,   93,   61,   -1,
   -1,   41,  257,   43,   44,   45,   41,   -1,  270,   44,
   -1,   -1,   -1,  268,  269,  124,  125,  279,   -1,   59,
   93,   61,   -1,   -1,   59,   -1,   -1,   -1,  124,  125,
   93,  286,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,  300,  268,  269,   41,   -1,
   -1,   44,  125,   93,   -1,   -1,   -1,   -1,   93,   59,
   -1,   -1,  125,  257,  286,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  268,  269,   -1,   -1,  300,   -1,
  264,  265,  266,   -1,   -1,  125,  270,  271,   -1,   -1,
  125,  257,  286,   93,   -1,  279,  280,  281,   -1,   -1,
   93,   -1,  268,  269,  257,   -1,  300,   -1,   -1,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,
  286,   -1,   -1,   -1,  257,  125,  279,  280,  281,  282,
  283,  284,  125,   -1,  300,  268,  269,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  286,   -1,   -1,  257,   -1,   -1,  268,
  269,  257,   -1,  264,  265,  266,   -1,  300,   -1,  270,
  271,   -1,  268,  269,   -1,   -1,   -1,  286,  279,  280,
  281,  282,  283,  284,  257,   -1,   -1,   -1,   -1,   -1,
  286,  300,   -1,   -1,  257,  268,  269,   -1,   -1,   -1,
   -1,   -1,  257,   -1,  300,  268,  269,   -1,   -1,  264,
  265,  266,   -1,  286,   -1,  270,  271,  257,   -1,   -1,
   -1,   -1,  257,  286,  279,  280,  281,  300,  268,  269,
   -1,   -1,   -1,  268,  269,   -1,   38,  300,   40,   -1,
   42,   43,   -1,   45,   46,   47,  286,   -1,   -1,   -1,
   -1,  286,   -1,   -1,   -1,   -1,   -1,  257,   -1,   61,
  300,   -1,   -1,   -1,  257,  300,   -1,   -1,  268,  269,
   -1,   -1,   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  286,   -1,   -1,   91,
   -1,   93,   -1,  286,   38,   -1,   40,   41,   42,   43,
  300,   45,   46,   47,   38,   -1,   40,  300,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   38,   61,   40,   41,
   42,   43,  124,   45,   46,   47,   38,   61,   40,  257,
   42,   43,   -1,   45,   46,   47,  264,  265,  266,   61,
   -1,   -1,  270,  271,   -1,   -1,   -1,   91,   -1,   61,
   -1,  279,  280,  281,  282,  283,  284,   91,   -1,   93,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   91,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   91,
  124,   93,   -1,   -1,   -1,   -1,   61,   38,   -1,   40,
  124,   42,   43,   -1,   45,   46,   47,   -1,   -1,   38,
   -1,   40,  124,   42,   43,   -1,   45,   46,   47,   -1,
   61,   -1,  124,   -1,   -1,   -1,   91,   -1,   -1,   38,
   -1,   40,   61,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   91,   -1,   61,   -1,  264,  265,  266,   -1,   -1,  124,
  270,  271,   91,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,  282,  283,  284,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   91,  124,  264,  265,  266,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,  124,   -1,   -1,  257,  279,
  280,  281,  282,  283,  284,  264,  265,  266,   -1,   -1,
   -1,  270,  271,   -1,   -1,  124,   -1,   -1,   -1,  257,
  279,  280,  281,  282,  283,  284,  264,  265,  266,   -1,
   -1,  257,  270,  271,   -1,   -1,   -1,   -1,  264,  265,
  266,  279,  280,  281,  270,  271,   -1,   -1,   -1,  257,
   -1,   -1,  257,  279,  280,  281,  264,  265,  266,  264,
  265,  266,  270,  271,   -1,  270,  271,   -1,   -1,   -1,
  257,  279,  280,  281,  279,  280,  281,  264,  265,  266,
   -1,   -1,  257,  270,  271,   -1,   -1,   -1,   -1,  264,
  265,  266,  279,  280,  281,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  279,  280,  281,
};
static int yyctable[] = {                                      1,
    2,  115,  167,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,   -1,    7,
    2,  115,  167,   -1,    8,    2,  115,  167,   -1,    9,
    2,  115,  167,   -1,   10,    2,   -1,   11,    2,   -1,
   12,    2,   -1,   13,    2,  115,  167,   -1,   14,    2,
  115,  167,   -1,   15,    2,   -1,   16,    2,  167,   -1,
   17,    2,  167,   -1,   18,    2,  167,   -1,   19,    2,
  167,   -1,   20,    2,  167,   -1,   21,    2,  167,   -1,
   22,    2,   -1,   23,    2,   -1,   24,    2,   -1,   25,
    2,   -1,   26,    2,   -1,   27,    2,   -1,   28,    2,
   -1,   29,    2,   -1,   30,    2,   -1,   31,    2,   -1,
   32,    2,   -1,   33,    2,   -1,   77,  115,  168,   -1,
   78,  115,  168,   -1,   79,  115,  168,   -1,   80,  115,
  168,   -1,   81,   49,  115,  168,   -1,   14,  115,  168,
   -1,   16,  168,   -1,   17,  168,   -1,   82,  168,   -1,
   83,   49,   -1,   87,  115,  167,   -1,  115,  167,   -1,
   16,  167,   -1,   77,  161,   -1,   13,  161,   -1,   77,
  162,   -1,   13,  162,   -1,   77,  163,   -1,   13,  163,
   -1,   88,  108,   -1,   77,  203,   -1,   27,  203,   -1,
   28,  203,   -1,   29,  203,   -1,   30,  203,   -1,   68,
  178,   -1,    1,  115,  167,   -1,    7,  115,  167,   -1,
    8,  115,  167,   -1,    9,  115,  167,   -1,   13,  115,
  167,   -1,   14,  115,  167,   -1,   17,  167,   -1,   18,
  167,   -1,   19,  167,   -1,   20,  167,   -1,   21,  167,
   -1,  167,  167,   -1,   13,  167,   -1,  105,  115,   -1,
   16,  105,   -1,  172,  167,   -1,  175,   28,   -1,  167,
  115,  167,   -1,   78,  115,  167,   -1,   79,  115,  167,
   -1,   80,  115,  167,   -1,   82,  167,   -1,  184,   68,
   -1,  184,   70,   -1,  184,   71,   -1,  184,   72,   -1,
  184,   50,   -1,  184,   69,   -1,  149,  199,   -1,  150,
  199,   -1,  151,  199,   -1,  152,  199,   -1,  153,  199,
   -1,  154,  199,   -1,  155,  199,   -1,  156,  199,   -1,
  157,  199,   -1,  158,  199,   -1,  149,  200,   -1,  150,
  200,   -1,  151,  200,   -1,  152,  200,   -1,  153,  200,
   -1,  154,  200,   -1,  155,  200,   -1,  156,  200,   -1,
  157,  200,   -1,  158,  200,   -1,  149,  202,   -1,  150,
  202,   -1,  151,  202,   -1,  152,  202,   -1,  153,  202,
   -1,  154,  202,   -1,  155,  202,   -1,  156,  202,   -1,
  157,  202,   -1,  158,  202,   -1,  204,   49,   -1,   87,
  167,   -1,   16,  115,   -1,   49,  168,   -1,  260,   32,
   -1,  261,   32,   -1,  262,   32,   -1,  263,   32,   -1,
  271,   49,   -1,  184,   51,   -1,  149,  201,   -1,  150,
  201,   -1,  151,  201,   -1,  152,  201,   -1,  153,  201,
   -1,  154,  201,   -1,  155,  201,   -1,  156,  201,   -1,
  157,  201,   -1,  158,  201,   -1,  301,   62,   -1,   11,
   62,   -1,   12,   62,   -1,  302,   62,   -1,   26,   62,
   -1,  175,   58,   -1,
};
#define YYFINAL 34
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 308
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknEnum","tknPreProDef","tknClass",
"tknStruct","tknUnion","tknNamespace","tknDocBlockComment","tknDocLineComment",
"tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected","tknPrivate",
"tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknConst",
"tknStatic","tknExtern","tknVirtual","tknInline","tknExplicit","tknFriend",
"tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf","tknIfDef",
"tknIfNDef","tknElse","tknElIf","tknEndIf","tknNew","tknDelete","tknReturn",
"tknVarArg","tknBlankLine","CMPEQUAL","ARROW","PREFIX","POSTFIX","PTRDECL",
"REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumstmt",
"stmt : typedefnamestmt",
"stmt : classdefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : functionpointer",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumstmt : tknEnum optid '{' enumitemlist '}' ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optconst vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optconst",
"vardecl : varqual identifier optconst",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optconst vartype optconst ptrlevelopt reftype optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' expr ']' optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' ']' optconst",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib '=' tknNumber",
"optconst :",
"optconst : tknConst",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"vardecllist : vardecl ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardecllist : vardecllist ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}' classdefnend",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"classdefnend :",
"classdefnend : ';'",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);



//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed	(	char* text,
							int errt,
							YYSTYPE& errt_value,
							YYPOSN& errt_posn
						)
{
	extern const char* get_start_of_buffer();
	const char* lineStart = errt_posn;
	const char* buffStart = get_start_of_buffer();
	while(lineStart > buffStart)
	{
		if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
			break;
		--lineStart;
	}
	char* lineEnd = errt_posn;
	char endReplaceChar = 0;
	while(*lineEnd)
	{
		if(*lineEnd == '\r' || *lineEnd == '\n')
		{
			endReplaceChar = *lineEnd;
			*lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
		}
		else
		{
			++lineEnd;
		}
	}
	char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
	for(const char* p = lineStart; p < errt_posn; ++p)
		spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
	char errmsg[1024];
	sprintf(errmsg, "%s%s%s%d%c%s%c%s%c%c",
		"Error: Unexpected token '", errt_posn, "' found at line#", gLineNo, '\n', // The error message
		lineStart, '\n',		// Line that contains the error.
		spacechars, '^', '\n');	// A ^ below the beginning of unexpected token.
	printf("%s", errmsg);
	// Replace back the end char
	if(endReplaceChar)
		*lineEnd = endReplaceChar;
}

char* gBuf = NULL;
size_t gBufSize = 0;

CppCompound* parseFile(FILE* fp)
{
	void setupScanBuffer(char* buf, size_t bufsize);
	const size_t bufBlockSize = 1024*1024;
	gBufSize = bufBlockSize;
	gBuf = (char*) malloc(gBufSize);
	size_t numBytesToScan = 0;
	for(char* buf = gBuf; ; buf = gBuf + numBytesToScan)
	{
		size_t numBytesRead = fread(buf, 1, bufBlockSize, fp);
		numBytesToScan += numBytesRead;
		if(numBytesRead < bufBlockSize) // We read entire file
		{
			if(bufBlockSize-numBytesRead < 2) // No space left for EOB marker
			{
				size_t extraBufSize = bufBlockSize-numBytesRead;
				gBufSize += extraBufSize;
				gBuf = (char*) realloc(gBuf, gBufSize);
			}
			// Mark eob
			gBuf[numBytesRead] = 0;
			gBuf[numBytesRead+1] = 0;
			numBytesToScan += 2;
			break;
		}
		else // Entire file could not be read
		{
			gBufSize += bufBlockSize;
			gBuf = (char*) realloc(gBuf, gBufSize);
		}
	}
	setupScanBuffer(gBuf, numBytesToScan);
	gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
	yyparse();
	return gProgUnit;
}


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
{
						gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
						gProgUnit->compoundType_ = kCppFile;
					}
break;
case 2:
  if (!yytrial)
{ yyval.cppCompundObj = 0; }
break;
case 3:
  if (!yytrial)
{
						yyval.cppCompundObj = new CppCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
						yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
						yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
					}
break;
case 4:
  if (!yytrial)
{
						yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? new CppCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
						yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
						yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
					}
break;
case 5:
  if (!yytrial)
{ gCurProtLevel = yyvsp[0].protLevel; }
break;
case 6:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppVarObj; }
break;
case 7:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
break;
case 8:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppEnum; }
break;
case 9:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].typedefObj; }
break;
case 10:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
break;
case 11:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
break;
case 12:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].docCommentObj; }
break;
case 13:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppExprObj; }
break;
case 14:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
break;
case 15:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
break;
case 16:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
break;
case 17:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
break;
case 18:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
break;
case 19:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
break;
case 20:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
break;
case 21:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
break;
case 22:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].cppObj; }
break;
case 23:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].hashDefine; }
break;
case 24:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].hashUndef; }
break;
case 25:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].hashInclude; }
break;
case 26:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].hashIf; }
break;
case 27:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].hashPragma; }
break;
case 28:
  if (!yytrial)
{ yyval.cppObj = yyvsp[0].blankLine; }
break;
case 29:
  if (!yytrial)
{ yyval.blankLine = new CppBlankLine; }
break;
case 30:
  if (!yytrial)
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
break;
case 31:
{YYVALID;}
  if (!yytrial)
{ /* Simple rename using #define*/
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kRename;
					}
break;
case 32:
{YYVALID;}
  if (!yytrial)
{ /* blank define*/
						yyval.hashDefine = new CppDefine(yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kRename;
					}
break;
case 33:
{YYVALID;}
  if (!yytrial)
{/* Constant definition*/
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
					}
break;
case 34:
{YYVALID;}
  if (!yytrial)
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
					}
break;
case 35:
{YYVALID;}
  if (!yytrial)
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
					}
break;
case 36:
{YYVALID;}
  if (!yytrial)
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
					}
break;
case 37:
{YYVALID;}
  if (!yytrial)
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
break;
case 38:
{YYVALID;}
  if (!yytrial)
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
break;
case 39:
{YYVALID;}
  if (!yytrial)
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
break;
case 40:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,		yyvsp[0].str); }
break;
case 41:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,		yyvsp[0].str); }
break;
case 42:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,	yyvsp[0].str); }
break;
case 43:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse		  ); }
break;
case 44:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,		yyvsp[0].str); }
break;
case 45:
{YYVALID;}
  if (!yytrial)
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf		  ); }
break;
case 46:
{YYVALID;}
  if (!yytrial)
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
break;
case 47:
{YYVALID;}
  if (!yytrial)
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
break;
case 48:
{YYVALID;}
  if (!yytrial)
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
break;
case 49:
  if (!yytrial)
{ yyval.str = yyvsp[0].str; }
break;
case 50:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
break;
case 51:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
break;
case 52:
  if (!yytrial)
{ yyval.str = makeCppToken(0, 0); }
break;
case 53:
  if (!yytrial)
{ yyval.str = yyvsp[0].str; }
break;
case 54:
  if (!yytrial)
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);		}
break;
case 55:
  if (!yytrial)
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
break;
case 56:
  if (!yytrial)
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);		}
break;
case 57:
  if (!yytrial)
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);		}
break;
case 58:
  if (!yytrial)
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);		}
break;
case 59:
  if (!yytrial)
{ yyval.enumItemList = 0; }
break;
case 60:
  if (!yytrial)
{
						yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
						yyval.enumItemList->push_back(yyvsp[0].enumItem);
					}
break;
case 61:
  if (!yytrial)
{
						yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
						yyval.enumItemList->push_back(yyvsp[0].enumItem);
					}
break;
case 62:
  if (!yytrial)
{
						yyval.enumItemList = yyvsp[-1].enumItemList;
					}
break;
case 63:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppEnum = new CppEnum(yyvsp[-4].str, gCurProtLevel);
						yyval.cppEnum->itemList_ = yyvsp[-2].enumItemList;
					}
break;
case 64:
  if (!yytrial)
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
break;
case 65:
  if (!yytrial)
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
break;
case 66:
  if (!yytrial)
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
break;
case 67:
  if (!yytrial)
{
						yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
						yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
					}
break;
case 68:
  if (!yytrial)
{ yyval.str = yyvsp[0].str; }
break;
case 69:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
break;
case 70:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
break;
case 71:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
break;
case 72:
  if (!yytrial)
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
break;
case 73:
  if (!yytrial)
{
						yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
						delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
					}
break;
case 74:
  if (!yytrial)
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
break;
case 75:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-2].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-1].str;
						yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
						yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
					}
break;
case 76:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-2].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-1].str;
						yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
					}
break;
case 77:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-4].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-3].str;
						yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
						yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
					}
break;
case 78:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-3].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-2].str;
						yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
					}
break;
case 79:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-4].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-3].str;
						yyval.cppVarObj->varAttr_|= kArray;
						yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
					}
break;
case 80:
  if (!yytrial)
{
						yyval.cppVarObj = yyvsp[-3].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-2].str;
						yyval.cppVarObj->varAttr_|= kArray;
					}
break;
case 81:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
					}
break;
case 82:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
					}
break;
case 83:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
					}
break;
case 84:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
					}
break;
case 85:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
						yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
					}
break;
case 86:
  if (!yytrial)
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
					}
break;
case 87:
  if (!yytrial)
{ yyval.attr = kStatic;	}
break;
case 88:
  if (!yytrial)
{ yyval.attr = kExtern;	}
break;
case 89:
{YYVALID;}
  if (!yytrial)
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
break;
case 90:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
						yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt);
						yyval.cppFuncObj->defn_->compoundType_ = kBlock;
					}
break;
case 91:
{YYVALID;}
  if (!yytrial)
{
						yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
						yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
					}
break;
case 92:
  if (!yytrial)
{
						yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
						yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
						yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
					}
break;
case 93:
  if (!yytrial)
{
						yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
						yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
						yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
					}
break;
case 94:
  if (!yytrial)
{
						yyval.cppFuncObj = new CppFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
						yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
						yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
					}
break;
case 95:
  if (!yytrial)
{
						yyval.cppFuncObj = new CppFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
						yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
						yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
					}
break;
case 96:
  if (!yytrial)
{ yyval.paramList = 0; }
break;
case 97:
  if (!yytrial)
{
						yyval.paramList = new CppParamList;
						yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
					}
break;
case 98:
  if (!yytrial)
{
						yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
						yyval.paramList = yyvsp[-2].paramList;
					}
break;
case 99:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
break;
case 100:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
break;
case 101:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
break;
case 102:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;		}
break;
case 103:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
break;
case 104:
  if (!yytrial)
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
break;
case 105:
  if (!yytrial)
{ yyval.attr = yyvsp[0].attr;			}
break;
case 106:
  if (!yytrial)
{ yyval.attr = kInline;		}
break;
case 107:
  if (!yytrial)
{ yyval.attr = kVirtual;	}
break;
case 108:
  if (!yytrial)
{ yyval.attr = kExtern;		}
break;
case 109:
  if (!yytrial)
{ yyval.attr = kExplicit;	}
break;
case 110:
  if (!yytrial)
{ yyval.attr = kInline | kExplicit; }
break;
case 111:
  if (!yytrial)
{ yyval.attr = kInline | kExplicit; }
break;
case 112:
  if (!yytrial)
{ yyval.attr = 0; }
break;
case 113:
  if (!yytrial)
{ yyval.attr = yyvsp[-1].attr | kConst; }
break;
case 114:
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else YYVALID;}
  if (!yytrial)
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
break;
case 115:
  if (!yytrial)
{ yyval.attr = 0; }
break;
case 116:
  if (!yytrial)
{ yyval.attr = kConst; }
break;
case 117:
{YYVALID;}
  if (!yytrial)
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
break;
case 118:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
						yyval.cppCtorObj->memInitList_	= yyvsp[-3].memInitList;
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt, kBlock);
					}
break;
case 119:
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
break;
case 120:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppCtorObj = new CppConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz));
						yyval.cppCtorObj->args_			= yyvsp[-5].paramList;
						yyval.cppCtorObj->memInitList_	= yyvsp[-3].memInitList;
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt, kBlock);
					}
break;
case 121:
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
break;
case 122:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppCtorObj = new CppConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz));
						yyval.cppCtorObj->args_			= yyvsp[-5].paramList;
						yyval.cppCtorObj->memInitList_	= yyvsp[-3].memInitList;
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(gCurProtLevel, kBlock);
					}
break;
case 123:
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-3].str)
							YYERROR;
						else
							YYVALID;
					}
  if (!yytrial)
{
						yyval.cppCtorObj = new CppConstructor(gCurProtLevel, yyvsp[-3].str);
						yyval.cppCtorObj->args_ = yyvsp[-1].paramList;
					}
break;
case 124:
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else YYVALID;}
break;
case 125:
  if (!yytrial)
{
						yyval.cppCtorObj = new CppConstructor(gCurProtLevel, yyvsp[-4].str);
						yyval.cppCtorObj->args_ = yyvsp[-1].paramList;
						yyval.cppCtorObj->attr_ |= yyvsp[-5].attr;
					}
break;
case 126:
  if (!yytrial)
{ yyval.memInitList = NULL; }
break;
case 127:
  if (!yytrial)
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
break;
case 128:
  if (!yytrial)
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
break;
case 129:
{YYVALID;}
  if (!yytrial)
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
break;
case 130:
{YYVALID;}
  if (!yytrial)
{
						yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
						yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt, kBlock);
					}
break;
case 131:
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
break;
case 132:
  if (!yytrial)
{
						yyval.cppDtorObj = new CppDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz));
						yyval.cppDtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt, kBlock);
					}
break;
case 133:
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
break;
case 134:
  if (!yytrial)
{
						yyval.cppDtorObj = new CppDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz));
						yyval.cppDtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : new CppCompound(kUnknownProt, kBlock);
					}
break;
case 135:
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-2].str)
							YYERROR;
						else
							YYVALID;
					}
  if (!yytrial)
{
						const char* tildaStartPos = yyvsp[-2].str.sz-1;
						while(*tildaStartPos != '~') --tildaStartPos;
						yyval.cppDtorObj = new CppDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos));
					}
break;
case 136:
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-2].str)
							YYERROR;
						else
							YYVALID;
					}
  if (!yytrial)
{
						const char* tildaStartPos = yyvsp[-2].str.sz-1;
						while(*tildaStartPos != '~') --tildaStartPos;
						yyval.cppDtorObj = new CppDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos));
						yyval.cppDtorObj->attr_ = yyvsp[-4].attr;
					}
break;
case 137:
  if (!yytrial)
{
						yyval.cppVarObjList = new CppVarList();
						yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
						yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
					}
break;
case 138:
  if (!yytrial)
{
						yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
						yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
					}
break;
case 139:
{YYVALID;}
  if (!yytrial)
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
break;
case 140:
{YYVALID;}
  if (!yytrial)
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
break;
case 141:
{YYVALID;}
  if (!yytrial)
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
break;
case 142:
{YYVALID;}
  if (!yytrial)
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
break;
case 143:
  if (!yytrial)
{ yyval.ptrLevel = 0;		}
break;
case 144:
  if (!yytrial)
{ yyval.ptrLevel = yyvsp[0].ptrLevel;		}
break;
case 145:
  if (!yytrial)
{ yyval.ptrLevel = 1;		}
break;
case 146:
  if (!yytrial)
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;	}
break;
case 147:
  if (!yytrial)
{ yyval.refType = kNoRef;		}
break;
case 148:
  if (!yytrial)
{ yyval.refType = kByRef;		}
break;
case 149:
  if (!yytrial)
{ yyval.refType = kRValRef;	}
break;
case 150:
{gCompoundStack.push(yyvsp[-2].str); YYVALID;}
  if (!yytrial)
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
break;
case 151:
{gCompoundStack.pop(); YYVALID;}
  if (!yytrial)
{
						gCurProtLevel = gProtLevelStack.top();
						gProtLevelStack.pop();

						yyval.cppCompundObj = yyvsp[-2].cppCompundObj ? yyvsp[-2].cppCompundObj : new CppCompound(gCurProtLevel);
						yyval.cppCompundObj->compoundType_	= yyvsp[-8].compoundType;
						yyval.cppCompundObj->apidocer_		= yyvsp[-7].str;
						yyval.cppCompundObj->name_			= yyvsp[-6].str;
						yyval.cppCompundObj->inheritList_	= yyvsp[-5].inheritList;
					}
break;
case 152:
  if (!yytrial)
{ yyval.inheritList = 0; }
break;
case 153:
{YYVALID;}
  if (!yytrial)
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
break;
case 154:
{YYVALID;}
  if (!yytrial)
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
break;
case 155:
  if (!yytrial)
{ yyval.protLevel = kUnknownProt;}
break;
case 156:
  if (!yytrial)
{ yyval.protLevel = kPublic;		}
break;
case 157:
  if (!yytrial)
{ yyval.protLevel = kProtected;	}
break;
case 158:
  if (!yytrial)
{ yyval.protLevel = kPrivate;	}
break;
case 159:
{YYVALID;}
  if (!yytrial)
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
break;
case 160:
{YYVALID;}
  if (!yytrial)
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
break;
case 161:
  if (!yytrial)
{ yyval.compoundType = kClass;		}
break;
case 162:
  if (!yytrial)
{ yyval.compoundType = kStruct;		}
break;
case 163:
  if (!yytrial)
{ yyval.compoundType = kUnion;		}
break;
case 164:
  if (!yytrial)
{ yyval.compoundType = kNamespace;	}
break;
case 167:
  if (!yytrial)
{ yyval.str = makeCppToken(0, 0); }
break;
case 168:
  if (!yytrial)
{ yyval.str = yyvsp[0].str; }
break;
case 169:
{YYVALID;}
  if (!yytrial)
{ yyval.protLevel = kPublic;		}
break;
case 170:
{YYVALID;}
  if (!yytrial)
{ yyval.protLevel = kProtected;	}
break;
case 171:
{YYVALID;}
  if (!yytrial)
{ yyval.protLevel = kPrivate;		}
break;
case 172:
{YYVALID;}
  if (!yytrial)
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
break;
case 173:
  if (!yytrial)
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);	}
break;
case 174:
  if (!yytrial)
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);				}
break;
case 175:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
break;
case 176:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
break;
case 177:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
break;
case 178:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
break;
case 179:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);	}
break;
case 180:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);			}
break;
case 181:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);				}
break;
case 182:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);				}
break;
case 183:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);				}
break;
case 184:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);					}
break;
case 185:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);				}
break;
case 186:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);				}
break;
case 187:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);				}
break;
case 188:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);				}
break;
case 189:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);			}
break;
case 190:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);				}
break;
case 191:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj); }
break;
case 192:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);			}
break;
case 193:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);			}
break;
case 194:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);				}
break;
case 195:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);				}
break;
case 196:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);			}
break;
case 197:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);		}
break;
case 198:
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;	}
break;
case 199:
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;			}
break;
case 200:
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;		}
break;
case 201:
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;	}
break;
case 202:
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;		}
break;
case 203:
  if (!yytrial)
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn); }
break;
case 204:
{YYVALID;}
  if (!yytrial)
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
break;

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
