#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "C:/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#	define YYDEBUG 1
#else 
#	define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#	define TRUE true
#endif

/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*	gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>		CppCompoundStack;
static CppCompoundStack				gCompoundStack;

static CppObjProtLevel				gCurProtLevel;
static std::stack<CppObjProtLevel>	gProtLevelStack;

extern CppObjFactory* gObjFactory;

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 102 "C:/github/cppparser/parser.y"
#line 89 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   23,   23,   23,   23,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,   57,   57,
   52,   52,   52,   52,   52,   52,   53,   54,   54,   55,
   55,   55,   55,   55,   55,   56,   26,   26,    2,    2,
    2,    4,    4,    8,    8,    8,    8,    8,    9,    9,
    9,    9,    7,   22,   22,   21,   20,    3,    3,    3,
    3,    3,    3,   13,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   11,   11,   11,   45,   45,   31,   32,
    6,   29,   29,   30,   30,   19,   19,   19,   15,   15,
   15,   15,   16,   16,   47,   47,   47,   47,   47,   47,
   47,   46,   46,   46,   46,   44,   44,   34,   35,   58,
   35,   59,   35,   33,   60,   33,   39,   39,   39,   37,
   38,   61,   38,   62,   38,   36,   36,   17,   17,   18,
   14,   14,   14,   41,   41,   42,   42,   43,   43,   43,
   63,   24,   48,   48,   48,   49,   49,   49,   49,   10,
   10,   40,   40,   40,   40,   64,   64,    1,    1,   50,
   50,   50,   25,   51,   51,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   28,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    3,    4,    4,    4,    4,    3,    3,    3,    3,
    3,    3,    2,    3,    2,    3,    1,    1,    1,    2,
    3,    0,    1,    1,    3,    1,    1,    1,    0,    2,
    3,    2,    6,    2,    2,    3,    6,    1,    2,    2,
    2,    2,    4,    3,    4,    3,    6,    5,    5,    4,
    3,    3,    4,    6,    9,    8,    1,    1,    2,    4,
    3,   11,   10,    9,    8,    0,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    0,    2,    2,    3,    0,    1,    2,    5,    0,
   11,    0,   13,    4,    0,    6,    0,    5,    6,    2,
    4,    0,   10,    0,   12,    4,    5,    8,    8,    2,
    2,    2,    3,    0,    1,    1,    2,    0,    1,    2,
    0,    9,    0,    3,    4,    0,    1,    1,    1,    3,
    4,    1,    1,    1,    1,    0,    1,    0,    1,    2,
    2,    2,    4,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    4,    4,    4,    4,    4,    3,    3,    4,
    3,    2,    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  176,  177,  178,    0,    0,    0,    0,    0,  165,
   47,   48,    0,    0,    0,  117,   87,    0,  107,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,   22,    8,
   11,    0,    0,    0,    6,    0,    7,    0,    0,    9,
    0,   10,   21,   12,    0,   13,   14,    0,   15,   16,
    0,   17,   18,    0,   19,   20,    0,    0,    0,    0,
   23,   24,   25,   26,   27,    0,   49,    0,    0,    0,
    0,   88,    0,    0,    0,    0,  169,    0,    0,    0,
   53,    0,    0,    0,    0,    0,    0,    0,  110,  111,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
  146,    0,    0,    0,    0,    0,  141,  142,    0,  140,
    0,   65,   64,    0,    0,    0,    4,    5,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  207,    0,   89,  118,    0,    0,    0,  130,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,   99,   97,    0,  102,    0,  143,    0,   91,    0,
   59,    0,   46,    0,   37,   38,   39,   40,   41,   42,
   44,    0,  201,    0,  180,    0,    0,    0,    0,    0,
    0,  103,    0,  104,    0,    0,  147,    0,    0,   76,
    0,    0,    0,   66,  170,  171,  172,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  199,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  160,
    0,    0,    0,    0,    0,    0,  132,    0,  124,    0,
    0,    0,  173,   31,   34,   35,   33,   36,    0,    0,
  136,    0,    0,    0,    0,   73,    0,   80,    0,    0,
    0,    0,    0,    0,    0,  200,  193,   90,    0,    0,
    0,  131,    0,    0,  161,    0,    0,   75,    0,    0,
    0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
   60,   56,   57,    0,    0,    0,    0,  122,    0,   79,
    0,    0,    0,    0,  119,  157,  158,  159,    0,    0,
  151,    0,   78,    0,    0,  137,    0,    0,    0,  150,
   67,    0,   61,   63,    0,    0,    0,    0,  134,    0,
    0,  128,    0,    0,    0,    0,    0,   84,   77,  126,
    0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
    0,  129,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  138,  139,    0,   86,    0,  112,
    0,    0,    0,  113,  114,    0,    0,    0,    0,  167,
  152,   85,    0,    0,  133,   93,  115,    0,    0,    0,
  121,   92,    0,    0,    0,  135,  123,
};
static int yydgoto[] = {                                      34,
   35,  112,   37,   92,   38,   39,   40,  311,  262,   41,
   42,   43,   44,   45,  183,  213,   46,   47,  184,   48,
   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   65,   66,  166,   67,
  260,  261,  306,   68,   69,  381,   70,  294,  329,  148,
  122,   71,   72,   73,   74,   75,   76,  256,  348,  253,
  303,  369,  356,  401,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0, -224,    0,    0,    0,    0,
    0,    0,   53,   53,  -57,    0,    0,    0,    0, -235,
 -186,  549, 2069, 1695,   -9,    0, 2069, 2069, 2069, 2069,
 2069, 2086, 2069,    0,  852, -139,   94,    0,    0,    0,
    0,   53,  268,   93,    0,   16,    0,  126,  116,    0,
 1799,    0,    0,    0, 2870,    0,    0,  -28,    0,    0,
  181,    0,    0,   68,    0,    0,    0,  759,    0,   60,
    0,    0,    0,    0,    0,    0,    0,   53,   53,   53,
 -113,    0,    0,  208,  135,   -4,    0,  852,  215,  759,
    0,  162,    0,    0,    0,    0,    0,    0,    0,    0,
   28,   58,   59, -129,  108,  103,  119,    0,  114,    0,
 2069,  132,    0,  303,    0,    0,   97,   97,   97, 2902,
 3118,  -12,    0,   97,   97,  366,    0,   -4,   77,    0,
    0,  -27,   41,  -73, 2069,    0,    0,    0,    0,    0,
  182,    0,    0,  354,  385,  402,    0,    0,  407,  416,
 1918, 2069, 1676, 2069, 2069, 2069, 2069, 2069, 1982, 2069,
    0,    0,    0,    0,  236,   -2,    0,    0,    0,  138,
  -43,    0,   53,    0,  249,   -4,    0,    0,  250,   53,
  473,    0,    0,  169,    0,   53,    0,  366,    0,  493,
    0, 1288,    0,  280,    0,    0,    0,    0,    0,    0,
    0, 2069,    0, 2069,    0,  503,  293,   53,  516,    0,
    0,    0,  495,    0,   53,  132,    0,  132, 2037,    0,
 3118,  493,  493,    0,    0,    0,    0, 2069, 2069, 2069,
  975,  109, 2069,  109,   48,   48,  127,  127,   97,    0,
  238, 2913, 1309,  534,  330,    0, 1353,  528,  -13,    0,
  493,  -71,  553,  560,    0,  561,    0,    0,    0,  569,
  586,  -32,    0,    0,    0,    0,    0,    0,    0, 3118,
    0,  603,  -35,  293,  -99,    0,  132,    0, 2987,  569,
  569,   48,   48,  975,   97,    0,    0,    0, 2069,  597,
 1493,    0,  432,   15,    0,  569, 2043,    0,    0,  605,
   53,    0,  610,    0,  621,  427,  620,  329,    0,  632,
    0,    0,    0,    0,  460,    0,  622,    0,  474,    0,
   -4,   -4, 2998, 2069,    0,    0,    0,    0,   53,  432,
    0,  -74,    0, 3023,  309,    0,  -18,  390,  691,    0,
    0, 2069,    0,    0,  694,  444,  524,  749,    0,   53,
   53,    0, 3057,  132,   53,    0, 2061,    0,    0,    0,
    0,  697,  637, 3118,  762,    0,  776,    0,  763,  -59,
  -59,    0,  132, 1555,   -4, 3083,  481,   18,    0,    0,
  -55,  778,  498,  779,    0,    0,  760,    0,   -4,    0,
    0, 1599,  521,    0,    0,  562,    0,  697,  708,    0,
    0,    0,  -55, 1620,    0,    0,    0,  570,   72,    0,
    0,    0,    0, 1670, 1739,    0,    0,
};
static int yyrindex[] = {                                      4,
   11,    0,    0,    0,  381,  709,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  377,
  403,    0,    0,    0, 2454,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1110, 2387,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  829,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   79,    0,    0,    0,    0,    0,    0,    0,  710,  724,
    0,    0,    0,    0,    0,  526,    0,    0,    0,    0,
    0,    0,  136,   63,    0, 1110,    0, 1110,    0,    0,
    0,    0, 1150, 1315, 1400, 2160, 1626,  -90,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2331,   67,    0,  240, 1121, 2357, 2424, 2446,    0,
   -5,    0, 2781, 2481, 2491,  565,    0, 1110,    0,  381,
    0,    0,    0,  508,    0,   13,    0,    0,   13,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -90,    0,    0,    0,    0,  -90,    0,  720,    0,
    0,  454,    0,  339,    0, 1110,    0,   36,    0,  572,
  595,    0,    0,    0,    0,    0,    0,    0,    0,   10,
    0,    0,    0,  472,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  804,    0,    0, 3093,
 2185,    0,    0,    0,    0,  514,    0,  558,    0,    0,
  305,  -38,  -38,    0,    0,    0,    0,    0,    0,    0,
 1715, 2552,    0, 2755,  547,  914, 2605, 2627, 2516,    0,
    0,    0,    0,    0,    0,  -90,    0,   56,    0,    0,
  400,  508,    0,    0,  565,    0,    0,  140,    0,  590,
 1645,    0,    0,    0,    0,    0,    0,    0, 2093,   20,
    0,    0,    0,  804,    0,    0,  571,    0,    0,  134,
  134, 2665, 2720, 2712, 2592,    0,    0,    0,    0,    0,
    0,    0,  153,    0,    0, 2100,    0,    0,  136,    0,
    0,  136,    0,    0, 2532,    0,  212,    0,   -6,    0,
    0,    0,    0,  -15,    0,  136,    0,    0,    0,    0,
  160,  160,    0,    0,    0,    0,    0,    0,    0,  153,
    0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   80,    0,  -90,    0,    0,    0,    0,
  136,   79,    0,  214,    0,    0,    0,  136,    0,  314,
  314,    0,   84,    0,  102,    0,    0,    0,  -90,  136,
   81,    0,    0,    0,    0,    0,  428,    0,  102,    0,
  -90,    0,    0,    0,    0,    0,  136,   79,    0,    0,
    0,    0,   91,    0,    0,    0,    0,    0,    0,  -90,
    0,    0,  -90,    0,    0,    0,    0,
};
static int yycindex[] = {                                    593,
  267,    0,    0,    0,  827,    0,  206,  207,  230,    0,
    0,    0,    0,    0,    0,    0,    0,  683,    0,    0,
    0,    0,    0,    0,  -19,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  232,    0, 1427,  592,
    0,    0,    0,    0,    0,  555,    0,    0,    0,    0,
    0,    0, 1991,  596,    0,    0,    0,    0,    0,    0,
    0,    0,  599,  600,  601,  609,  612,  638,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3150,    0, 3176, 3186,  325,  367,  424,    0,
    0,    0,  825,  468,  501,  627,    0,    0,    0, 1540,
    0,    0,    0,    0,    0,  588,    0,    0,  607,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  788,    0,    0,    0,    0,  843,    0,  617,    0,
    0,  614,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3024,    0,  261,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
  631,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  510,  615,    0,  658,  661,  668,  688,  703,  706,    0,
    0,    0, 3058,    0,    0,  888, 3084,    0,    0,    0,
    0,    0,    0,    0,  653,    0,    0, 2721,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3211,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  712,  715,  716,  752,    0,    0,    0,    0,    0,
 3110,    0,    0,    0,    0,    0,    0,    0, 3266,    0,
    0, 3269,    0,    0,    0,    0,    0,    0,  178,    0,
    0,    0,    0,  623,    0, 3287,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  938,    0,    0,    0,    0,
 3299,    0,    0,    0,    0,    0,    0, 3317,    0,    0,
    0,    0,    0, 3136,    0,    0,    0,    0,  993, 3320,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1038, 3162,    0,    0,    0,    0, 3338,    0,    0,    0,
    0,    0,    0, 3188,    0,    0,    0,    0,    0, 1188,
    0,    0, 1243, 3214, 3240,    0,    0,
};
static int yygindex[] = {                                      0,
   39,    1,  155,    0,  -26,    0,    0,  618,    0,    0,
  143,    6,  -36,    0,  673,    0,    0,    0,  613,    0,
    0,    0,  -70,    0,    0, -232,  425,    0,   29,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -209,    0,
  -61,  879,  194,   62,    2,  542,   30,    0,  604,    0,
  782,    0,    0,    0, -222,    0,  -47,    0,    0,    0,
    0,    0,    0,    0,
};
#define YYTABLESIZE 3619
static int yytable[] = {                                     144,
   36,   84,   86,    2,  316,  396,   85,   93,   94,   95,
  215,  309,  179,   96,   97,  250,  357,  219,  194,  297,
  197,  361,  191,   33,  147,  188,  319,  192,   58,  312,
  163,  204,   91,   89,    2,  174,  127,   62,  174,  313,
  202,  245,  134,   88,  202,  295,  182,  144,   49,   99,
  116,   36,   49,   49,  116,   49,   49,   49,  330,  139,
  175,  245,  200,  175,  128,   98,   90,  171,   84,   49,
   49,   49,   49,   49,  140,  120,  312,   49,   93,   94,
   95,   96,  217,   84,   86,  156,  313,  159,  181,  127,
   84,  243,  310,  158,  162,   49,  247,  100,   36,  153,
   68,   49,   68,   68,   68,  170,   68,  202,  176,   58,
  202,  185,  205,   31,   49,  245,  111,  128,   62,  174,
  246,   88,  127,  154,   68,  202,  168,  155,  196,  211,
  129,  132,  216,  218,   49,  131,  159,  331,  160,   95,
  391,  116,  116,  178,  175,  116,  156,  197,  159,   94,
  154,  138,  378,   68,  158,  155,   13,  318,  214,  202,
  280,  281,   36,  116,  208,  147,  159,   36,   88,  141,
  249,  157,  158,  252,  143,  291,   96,  126,  153,   96,
  134,    2,    2,    2,  142,  175,  211,  160,  409,  296,
  167,  202,   36,  187,  413,  220,  186,  222,  186,  160,
  223,  127,  154,   95,   16,   16,  155,   16,  273,  259,
  186,  173,  258,   94,  314,  277,  147,  160,  144,   16,
  147,  182,  172,  394,  307,  180,  186,  395,  173,   77,
  188,  144,  157,  251,  186,   11,   12,  185,  165,  164,
  144,   58,   13,   36,  190,  272,   36,   36,    2,    3,
    4,  186,   58,   58,  308,   54,  186,   55,   84,   86,
   13,  314,  182,  181,  147,  182,  144,  130,   26,  116,
  209,   58,  212,  189,   16,    2,    2,    2,  286,  182,
  203,  204,  116,  203,  191,  374,  185,   23,   24,   25,
  193,   36,  169,  301,  169,  169,   88,   77,  203,   84,
   86,  337,   84,   86,  181,   49,  151,  181,  392,   77,
   13,  136,  317,  298,  194,  195,   84,   86,  255,   68,
  404,  181,   13,  202,  182,   49,  137,  185,  135,  354,
  185,  182,  203,  210,  202,  202,   54,   88,   55,  414,
   88,   68,  415,  182,  185,   74,   13,  147,   74,  360,
  370,  371,  258,  202,   88,  373,   36,  116,  116,  199,
  182,   84,   86,   74,  203,  147,  181,  202,   84,   86,
  198,  116,  116,  181,   36,  200,  201,  147,  125,   36,
   84,   86,  350,  351,  408,  181,  411,  147,  147,  185,
  148,   36,   36,  358,  248,  202,  185,   84,   86,   88,
  180,  186,  181,  148,   36,  207,   88,   13,  185,  156,
   36,  225,  148,   36,   36,   36,  116,  168,   88,  168,
  168,  168,  156,  168,  168,  185,  414,  166,  417,  116,
  362,  385,  386,  258,  576,   88,  388,  144,  224,  144,
  144,  180,  226,  144,  180,  579,  582,  113,  115,  116,
  402,  117,  118,  119,  120,  121,  124,  125,  180,  227,
  166,  144,  164,  170,  585,  166,  228,  166,   54,  166,
   55,   32,  166,  321,  322,  167,  173,  229,  588,   54,
   54,   55,   55,  420,  366,  423,  176,  258,  245,  332,
  144,  116,  244,  116,  116,  116,  203,  116,   54,  179,
   55,  248,  106,  180,   32,  254,  257,  203,  203,   32,
  180,   32,   54,   32,   55,  116,   32,  450,  453,  456,
  459,  390,  180,  117,  258,   28,  203,  429,  109,  432,
  121,  125,  129,  135,  131,  124,  133,  138,  398,  180,
  203,  258,  268,  271,  116,  142,  145,  148,  116,   87,
  166,  116,  166,  166,   82,  274,  276,   82,   28,  221,
  435,  406,  438,   28,  258,   28,  116,   28,  116,  468,
   28,  471,   82,  289,   82,  231,  232,  234,  235,  236,
  237,  238,  239,  121,  242,  293,  290,  188,  188,  188,
  188,  188,  299,  188,   32,  169,   32,   32,   81,  300,
  302,   81,  169,  169,  169,  188,  305,  188,  169,  169,
  412,   83,  101,  258,   83,  101,   81,  169,   81,  105,
  106,  107,  108,  109,  110,  114,  269,  217,  270,   83,
  102,   83,  105,  106,   99,  100,  324,   96,  100,  188,
  106,  106,  106,  279,  315,  336,  106,  106,   28,  339,
   28,   28,  282,  283,  284,  106,  144,  285,  340,  109,
  168,  168,  168,  347,  168,  168,  109,  109,  109,  144,
  114,  188,  109,  109,  474,  102,  477,  105,  144,   99,
  342,  109,   96,  341,  166,  166,  166,  166,  166,  166,
  344,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  326,  327,  328,  166,  166,  166,  166,
  116,  166,  166,  323,  166,  108,  345,  480,  111,  483,
  486,  334,  489,  116,  166,  166,  166,  492,  166,  495,
  349,  363,   32,   32,  365,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,  498,  353,  501,
   32,   32,   32,   32,  165,   32,   32,   49,   32,  379,
  108,   49,  504,  111,  507,  510,  364,  513,   32,   32,
   32,  552,   32,  555,  558,  564,  561,  567,   49,   49,
  367,  376,   28,   28,   28,   28,   28,   28,  368,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,  380,  384,  188,   28,   28,   28,   28,  181,   28,
   28,  570,   28,  573,  188,  188,  382,  397,  400,  399,
  114,  407,   28,   28,   28,  102,  101,  105,    1,   99,
  410,   52,   96,  188,  168,  105,  102,  103,  104,  105,
  106,  107,  108,  109,  110,  168,  148,  188,  257,    0,
    5,    8,   11,   14,   17,  260,   20,   25,   30,   35,
   38,   41,   44,   49,  426,  282,  444,   54,  285,  288,
  291,   57,   61,   65,   69,  114,   73,   77,  294,   81,
  102,  297,  105,  441,   99,  444,  446,   96,  462,   84,
   87,   90,  444,   93,    0,    5,    8,   11,   14,   17,
  465,   20,   25,   30,   35,   38,   41,   44,   49,  441,
  108,  335,   54,  111,  338,  133,   57,   61,   65,   69,
  114,   73,   77,  591,   81,  102,  343,  105,  346,   99,
  304,  403,   96,  355,   84,   87,   90,    0,   93,  181,
  241,    0,    0,    0,    0,    0,  181,  181,  181,    0,
    0,    0,  181,  181,  189,  189,  189,  189,  189,    0,
  189,  181,    0,    0,    0,  108,    0,    0,  111,    0,
  114,    0,  189,  377,  189,  102,  169,  105,    0,   99,
  383,    0,   96,  169,  169,  169,    0,  168,  168,  168,
  169,    0,  393,  168,  168,    0,    0,    0,  169,  169,
  169,  169,  168,  169,  169,    0,  189,    0,    0,  408,
  108,    0,  156,  111,  159,   77,  154,  152,    0,  153,
  158,  155,   78,   79,   80,  114,    0,    0,   13,   14,
  102,    0,  105,    0,   99,  151,    0,   96,  189,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
  108,    0,   54,  111,    0,  160,   57,   61,   65,   69,
  114,   73,   77,    0,   81,  102,    0,  105,    0,   99,
    0,    0,   96,  154,   84,   87,   90,    0,   93,    0,
  157,  157,  157,    0,    0,    0,  157,  157,  157,    0,
    5,    8,   11,   14,   17,  161,   20,   25,   30,   35,
   38,   41,   44,   49,    0,  108,    0,   54,  111,    0,
    0,   57,   61,   65,   69,    0,   73,   77,    0,   81,
   16,   17,   18,   19,    0,   20,   21,    0,    0,   84,
   87,   90,    0,   93,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
  108,  205,   54,  111,  205,    0,   57,   61,   65,   69,
  189,   73,   77,    0,   81,    0,    0,    0,    0,  205,
    0,  189,  189,    0,   84,   87,   90,   70,   93,   70,
   70,   70,    0,   70,    0,    5,    8,   11,   14,   17,
  189,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,   70,   54,  205,  189,    0,   57,   61,   65,   69,
  114,   73,   77,    0,   81,  102,    0,  105,    0,   99,
    0,    0,   96,    0,   84,   87,   90,    0,   93,    0,
   70,    0,    0,    0,    0,  205,    0,    0,    0,    0,
    5,    8,   11,   14,   17,    0,   20,   25,   30,   35,
   38,   41,   44,   49,    0,    0,    0,   54,    0,    0,
    0,   57,   61,   65,   69,  114,   73,   77,    0,   81,
  102,    0,  105,    0,   99,    0,    0,   96,    0,   84,
   87,   90,    0,   93,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
  108,    0,   54,  111,    0,    0,   57,   61,   65,   69,
   33,   73,   77,    0,   81,   29,    0,   30,    0,   28,
    0,    0,   27,    0,   84,   87,   90,    0,   93,    0,
    0,   33,    0,    0,    0,    0,   29,    0,   30,    0,
   28,    0,   71,   27,   71,   71,   71,    0,   71,    0,
    0,    0,    0,    0,    0,  108,  116,    0,  111,    0,
    0,    0,    0,  116,  116,  116,   71,  205,    0,  116,
  116,    0,    0,    0,    0,   33,    0,    0,  205,  205,
   29,    0,   30,    0,   28,  206,    0,   27,    0,    0,
    0,    0,  210,  214,  218,   71,   70,  205,  222,  226,
   31,    0,  263,   32,    0,    0,    0,  161,  230,  233,
  236,  205,  239,  242,    0,    0,    0,    0,   70,    0,
    0,   31,    0,  288,   32,    0,    0,   72,    0,   72,
   72,   72,    0,   72,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,   72,   54,    0,    0,    0,   57,   61,   65,   69,
    0,   73,   77,    0,   81,   31,    0,  292,   32,    0,
    0,    0,    0,    0,   84,   87,   90,    0,   93,    0,
   72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    5,    8,   11,   14,   17,    0,   20,   25,   30,   35,
   38,   41,   44,   49,    0,    0,    0,   54,    0,    0,
    0,   57,   61,   65,   69,   33,   73,   77,    0,   81,
   29,    0,   30,    0,   28,    0,    0,   27,    0,   84,
   87,   90,    0,   93,    0,    2,    3,    4,    5,    6,
    0,    0,    0,    0,   10,   11,   12,    0,    0,  144,
  145,  146,   15,    0,    0,    0,    2,    3,    4,    5,
    6,   71,    0,    0,   22,   10,   11,   12,    0,    0,
  144,  145,  146,   15,   23,   24,   25,   33,   26,    0,
    0,    0,   29,   71,   30,   22,   28,    0,    0,   27,
    0,    0,    0,    0,    0,   23,   24,   25,    0,   26,
    2,    3,    4,    5,    6,   31,    0,  325,   32,   10,
   11,   12,    0,    0,  144,  145,  146,   15,    0,    0,
    0,   33,    0,    0,    0,    0,   29,    0,   30,   22,
   28,    0,    0,   27,    0,    0,    0,    0,    0,   23,
   24,   25,   33,   26,    0,    0,   72,   29,    0,   30,
    0,   28,    0,   69,   27,   69,   69,   69,    0,   69,
    0,    0,    0,    0,    0,    0,    0,   31,   72,  387,
   32,    0,  145,  250,  145,  145,    0,   69,  145,    0,
  250,  250,  250,    0,    0,    0,  250,  250,    0,    0,
    0,    0,   33,    0,    0,  254,  145,   29,   33,   30,
    0,   28,    0,   29,   27,   30,   69,   28,    0,    0,
   27,   31,    0,  405,   32,    0,    0,   33,    0,    0,
    0,    0,   29,    0,   30,  145,   28,  233,    0,   27,
    0,    0,   31,    0,  411,   32,    0,    0,    0,    0,
    2,    3,    4,    5,    6,  192,    0,    0,  192,   10,
   11,   12,    0,    0,  144,  145,  146,   15,    0,    0,
    0,   33,    0,  192,    0,    0,   29,    0,   30,   22,
   28,    0,    0,   27,    0,  114,    0,    0,    0,   23,
   24,   25,   31,   26,  416,   32,  154,    0,   31,    0,
    0,  111,    0,  157,  157,  157,    0,  192,    0,  157,
  157,    0,    2,    3,    4,    5,    6,   31,  161,    0,
  111,   10,   11,   12,    0,    0,  144,  145,  146,   15,
    0,   33,    0,    0,    0,    0,   29,    0,   30,  192,
   28,   22,    0,   27,    0,    0,    0,    0,    0,    0,
    0,   23,   24,   25,    0,   26,    2,    3,    4,    5,
    6,   31,    0,  417,   32,   10,   11,   12,    0,    0,
  144,  145,  146,   15,    0,    0,    0,    2,    3,    4,
    5,    6,   69,    0,    0,   22,   10,   11,   12,    0,
    0,  144,  145,  146,   15,   23,   24,   25,    0,   26,
    0,  145,    0,    0,   69,    0,   22,    0,    0,    0,
    0,    0,    0,    0,  145,    0,   23,   24,   25,    0,
   26,   31,    0,  145,   32,    0,    0,    2,    3,    4,
    5,    6,   77,    2,    3,    4,   10,   11,   12,    0,
    0,  144,  145,  146,   15,   13,    0,    0,    0,    0,
   33,   77,    2,    3,    4,   29,   22,   30,    0,   28,
    0,    0,   27,    0,   13,    0,   23,   24,   25,    0,
   26,  192,   23,   24,   25,    0,    0,    0,  230,    0,
    0,    0,  192,  192,    0,    0,    0,    0,    0,    0,
    0,   23,   24,   25,    0,    0,    2,    3,    4,    5,
    6,  192,    0,    0,    0,   10,   11,   12,    0,    0,
  144,  145,  146,   15,   33,  192,    0,    0,    0,   29,
    0,   30,  240,   28,    0,   22,   27,    0,    0,    0,
    0,    0,    0,    0,    0,   23,   24,   25,    0,   26,
   31,    0,    0,  111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    6,    0,    0,    0,    0,   10,   11,   12,    0,   33,
  144,  145,  146,   15,   29,   33,   30,    0,   28,    0,
   29,   27,   30,    0,   28,   22,    0,   27,    0,    0,
    0,    0,    0,   33,    0,   23,   24,   25,   29,   26,
   30,   33,   28,    0,   31,   27,   29,  111,   30,    0,
   28,    0,    0,   27,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   29,    0,   30,    0,   28,    0,  278,
   27,    0,    0,  204,    0,  333,  204,    0,    0,  148,
  148,    0,    0,  148,    0,    0,    0,    0,    0,    0,
    0,  204,    0,  375,    0,    0,    0,    0,    0,   31,
    0,  148,  111,    0,    0,   31,    0,    0,  111,    0,
    0,    0,    0,    0,   77,    2,    3,    4,    0,    0,
    0,    0,    0,   31,    0,  204,  111,   13,    0,    0,
  148,   31,    0,    0,  111,    0,    0,   50,    0,   50,
   50,   50,   50,   50,   50,   50,   50,    0,   31,    0,
    0,  111,    0,    0,   23,   24,   25,  204,   50,   50,
   50,   50,   51,    0,   51,   51,   51,   51,   51,   51,
   51,   51,    0,    0,    0,    0,    0,    0,   77,    2,
    3,    4,    0,   51,   51,   51,   51,  263,    0,    0,
   50,   13,   50,    0,  267,  271,  275,    0,    0,    0,
  222,  226,    0,    0,    0,    0,    0,    0,    0,  161,
  230,  279,    0,    0,    0,   51,    0,   51,   23,   24,
   25,    0,   50,   50,   50,    0,    0,    0,    0,    0,
    0,    0,    0,   77,    2,    3,    4,    0,    0,   77,
    2,    3,    4,    0,    0,    0,   13,   51,   51,   51,
    0,    0,   13,    0,    0,    0,    0,   77,    2,    3,
    4,    0,    0,    0,    0,   77,    2,    3,    4,    0,
   13,    0,    0,   23,   24,   25,    0,    0,   13,   23,
   24,   25,  123,    2,    3,    4,    0,    0,    0,  204,
    0,    0,    0,    0,    0,   13,  148,   23,   24,   25,
  204,  204,    0,    0,    0,   23,   24,   25,  179,  148,
  179,  179,  179,  179,  179,  179,  179,  179,  148,  204,
    0,    0,   23,   24,   25,    0,    0,    0,    0,  179,
  179,  179,  179,  204,  181,    0,    0,  181,  181,  181,
  181,  181,  181,  181,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  181,   50,  181,    0,    0,
    0,  179,    0,  179,    0,    0,  179,   50,   50,  179,
    0,  179,  179,  179,    0,    0,    0,    0,   50,    0,
    0,   51,    0,    0,    0,  179,   50,  179,  179,  181,
    0,    0,   51,   51,  179,  179,    0,    0,    0,    0,
   50,  184,    0,   51,  184,  184,  184,  184,  184,  184,
  184,   51,    0,    0,    0,    0,    0,  179,    0,    0,
  181,  181,  184,  185,  184,   51,  185,  185,  185,  185,
  185,  185,  185,    0,  206,    0,  206,  206,    0,  206,
  206,    0,    0,    0,  185,    0,  185,    0,    0,    0,
  179,    0,  206,  206,  206,  206,  184,    0,  182,    0,
    0,  182,  182,  182,  182,  182,  182,  182,  183,    0,
    0,  183,  183,  183,  183,  183,  183,  183,  185,  182,
    0,  182,    0,    0,  206,    0,  206,  184,  184,  183,
    0,  183,    0,  198,    0,    0,  198,  198,  198,  198,
  198,  198,  198,    0,    0,    0,    0,    0,    0,  185,
  185,  149,  149,  182,  198,  149,  198,  206,  206,    0,
    0,    0,    0,  183,    0,    0,    0,  179,    0,    0,
    0,    0,  186,  149,  186,  186,  186,    0,  179,  179,
    0,    0,    0,    0,  182,  182,    0,    0,  198,    0,
  186,    0,  186,  181,  183,  183,    0,  179,    0,    0,
    0,    0,  149,    0,  181,  181,    0,    0,    0,  197,
    0,  179,  197,  197,  197,  197,  197,  197,  197,  198,
  198,    0,  190,  181,  186,  190,  190,  190,  190,  190,
  197,  190,  197,    0,    0,    0,    0,  181,    0,    0,
    0,    0,    0,  190,  191,  190,    0,  191,  191,  191,
  191,  191,    0,  191,    0,    0,  186,    0,    0,    0,
  184,    0,    0,    0,  197,  191,    0,  191,    0,    0,
    0,  184,  184,    0,    0,    0,    0,  190,    0,    0,
    0,    0,  185,    0,    0,  195,  195,  195,  195,  195,
  184,  195,    0,  185,  185,  197,  197,    0,    0,  191,
    0,  206,  206,  195,  184,  195,    0,    0,  190,  190,
    0,    0,  185,    0,    0,    0,    0,  182,    0,    0,
  206,    0,    0,    0,    0,    0,  185,  183,  182,  182,
  191,  191,  194,    0,  206,  194,    0,  195,  183,  183,
  196,  196,  196,  196,  196,    0,  196,  182,    0,    0,
  194,    0,  198,    0,    0,    0,    0,  183,  196,    0,
  196,  182,    0,  198,  198,    0,    0,    0,  149,  195,
    0,  183,    0,    0,    0,  187,    0,  187,  187,  187,
    0,  149,  198,    0,  194,    0,    0,    0,  186,    0,
  149,    0,  196,  187,    0,  187,  198,    0,   49,  186,
  186,    0,   49,   49,    0,   49,   49,   49,    0,    0,
    0,    0,    0,    0,    0,    0,  194,    0,  186,   49,
   49,   49,   49,    0,  196,    0,    0,  187,  197,    0,
    0,    0,  186,    0,    0,    0,    0,    0,    0,  197,
  197,  190,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   49,  190,  190,    0,    0,    0,    0,  197,  187,
    0,    0,    0,  191,    0,    0,    0,    0,    0,    0,
    0,  190,  197,    0,  191,  191,    0,    0,    0,    0,
    0,    0,    0,    0,   49,  190,    0,  156,    0,  159,
    0,  154,  152,  191,  153,  158,  155,    0,    0,    0,
    0,  195,    0,    0,    0,    0,    0,  191,  161,  149,
  151,  150,  195,  195,    0,    0,    0,    0,    0,  156,
    0,  159,  203,  154,  152,    0,  153,  158,  155,    0,
  156,  195,  159,    0,  154,  152,    0,  153,  158,  155,
  160,  149,  151,  150,    0,  195,    0,    0,  194,    0,
    0,    0,  149,  151,  150,    0,  196,  263,    0,  194,
  194,    0,    0,    0,  267,  271,  275,  196,  196,    0,
  222,  226,  160,  157,    0,    0,    0,    0,  194,  161,
  230,  279,    0,  160,    0,  287,  196,    0,    0,    0,
    0,  187,  194,    0,    0,    0,    0,    0,    0,    0,
  196,    0,  187,  187,  156,  157,  159,    0,  154,  152,
    0,  153,  158,  155,    0,  156,  157,  159,  352,  154,
  152,  187,  153,  158,  155,    0,  149,  151,  150,    0,
   49,    0,    0,    0,    0,  187,    0,  149,  151,  150,
  156,    0,  159,    0,  154,  152,    0,  153,  158,  155,
    0,    0,    0,    0,    0,    0,    0,  160,    0,  320,
    0,    0,  149,  151,  150,    0,    0,    0,  160,    0,
    0,    0,    0,    0,  156,    0,  159,  372,  154,  152,
    0,  153,  158,  155,    0,    0,    0,    0,    0,    0,
  157,    0,    0,  160,    0,  359,  149,  151,  150,    0,
  156,  157,  159,    0,  154,  152,    0,  153,  158,  155,
   49,    0,   49,    0,   49,   49,    0,   49,   49,   49,
    0,    0,  149,  151,  150,    0,  157,  160,    0,    0,
    0,   49,   49,   49,   49,  156,    0,  159,    0,  154,
  152,    0,  153,  158,  155,    0,    0,    0,    0,    0,
    0,    0,    0,  160,    0,  389,    0,  149,  151,  150,
  157,    0,    0,   49,    0,    0,    0,  321,    0,  330,
    0,  315,  309,    0,  312,  327,  318,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  157,    0,  160,  300,
  306,  303,    0,  357,    0,  366,   49,  351,  345,    0,
  348,  363,  354,  393,    0,  402,    0,  387,  381,    0,
  384,  399,  390,    0,    0,  336,  342,  339,    0,    0,
  333,  157,    0,    0,    0,  372,  378,  375,  537,    0,
  546,    0,  531,  525,    0,  528,  543,  534,    0,    0,
    0,    0,    0,    0,    0,    0,  369,    0,    0,    0,
  516,  522,  519,  324,    0,    0,  405,    0,    0,    0,
  206,    0,    0,    0,    0,    0,    0,  210,  214,  218,
    0,    0,    0,  222,  226,    0,    0,    0,    0,  360,
    0,  549,  161,  230,  233,  236,    0,  239,  242,  396,
    0,    0,    0,    0,  206,    0,    0,    0,    0,    0,
    0,  210,  214,  218,    0,    0,    0,  222,  226,    0,
    0,    0,    0,    0,  540,    0,  161,  230,  233,  236,
  206,  239,  242,    0,    0,    0,    0,  210,  214,  218,
    0,    0,    0,  222,  226,    0,    0,    0,    0,    0,
    0,    0,  161,  230,  233,  236,  206,  239,  242,    0,
    0,    0,    0,  210,  214,  218,    0,    0,    0,  222,
  226,    0,    0,    0,    0,    0,    0,    0,  161,  230,
  233,  236,  206,  239,  242,    0,    0,    0,    0,  210,
  214,  218,    0,    0,    0,  222,  226,    0,    0,    0,
    0,    0,    0,    0,  161,  230,  233,  236,  206,  239,
  242,    0,    0,    0,    0,  210,  214,  218,    0,    0,
    0,  222,  226,    0,    0,    0,    0,    0,    0,    0,
  161,  230,  233,  236,  206,  239,  242,    0,    0,    0,
    0,  210,  214,  218,    0,    0,    0,  222,  226,    0,
    0,    0,    0,    0,    0,    0,  161,  230,  233,  236,
  206,  239,  242,    0,    0,    0,    0,  210,  214,  218,
    0,    0,    0,  222,  226,    0,    0,    0,    0,    0,
    0,    0,  161,  230,  233,  236,  206,  239,  242,    0,
    0,    0,    0,  210,  214,  218,    0,    0,    0,  222,
  226,    0,    0,    0,    0,    0,    0,    0,  161,  230,
  233,  236,  263,  239,  242,  263,    0,    0,    0,  267,
  271,  275,  267,  271,  275,  222,  226,    0,  222,  226,
    0,    0,    0,  263,  161,  230,  279,  161,  230,  279,
  267,  271,  275,    0,    0,  263,  222,  226,    0,    0,
    0,    0,  267,  271,  275,  161,  230,  279,  222,  226,
    0,    0,    0,  263,    0,    0,  263,  161,  230,  279,
  267,  271,  275,  267,  271,  275,  222,  226,    0,  222,
  226,    0,    0,    0,  263,  161,  230,  279,  161,  230,
  279,  267,  271,  275,    0,    0,    0,  222,  226,    0,
    0,    0,    0,    0,    0,    0,  161,  230,  279,
};
static int yycheck[] = {                                      38,
    0,    1,    1,    0,   40,   61,    1,    7,    8,    9,
   38,   44,  126,   13,   14,   59,   91,   91,   38,   91,
   40,   40,   42,   33,   51,   45,  126,   98,   44,  262,
   59,   44,  257,    5,  125,   41,   35,   44,   44,  262,
   38,   44,   42,    5,   42,   59,   83,   38,   38,  285,
   38,   51,   42,   43,   42,   45,   46,   47,   44,   44,
   41,   44,   60,   44,   35,  123,    5,   67,   68,   59,
   60,   61,   62,   38,   59,   40,  309,   42,   78,   79,
   80,   81,   42,   83,   83,   38,  309,   40,   83,   88,
   90,  162,  125,   46,  123,   60,  167,  284,   98,   44,
   38,   91,   40,   41,   42,   67,   44,   41,   70,  125,
   44,   83,  125,  123,   59,   44,  126,   88,  125,  125,
  123,   83,   44,   44,   62,   59,   59,   44,  258,  129,
  270,   38,  132,  133,  124,   42,   40,  123,   91,   59,
  123,   40,   41,  257,  125,   44,   38,  277,   40,   59,
   42,   59,  362,   91,   46,   47,  270,  257,  130,   93,
  222,  223,  162,   62,  126,  192,   40,  167,  130,   44,
  170,  124,   46,  173,   59,  246,   41,   35,  123,   44,
  180,  272,  273,  274,   59,  126,  186,   91,  398,  251,
  123,  125,  192,   59,  123,  134,  270,  136,  270,   91,
  139,  123,  123,  123,  279,  279,  123,  279,  208,   41,
  270,   69,   44,  123,  262,  215,  243,   91,  257,  279,
  247,  258,   68,  279,  257,   83,  270,  283,   86,  257,
   88,  270,  124,  172,  270,  268,  269,  257,   58,   59,
  279,  257,  270,  243,   90,  207,  246,  247,  258,  259,
  260,  270,  268,  269,  287,   44,  270,   44,  258,  258,
  270,  309,  299,  258,  291,  302,  257,   60,  301,  257,
  128,  287,  130,   59,  279,  272,  273,  274,   41,  316,
   41,   44,  270,   44,  123,  356,  258,  297,  298,  299,
  263,  291,  282,  255,  284,  285,  258,  257,   59,  299,
  299,  301,  302,  302,  299,  270,   40,  302,  379,  257,
  270,   44,  274,  252,  257,  257,  316,  316,  176,  257,
  391,  316,  270,  257,  361,  270,   59,  299,   61,  329,
  302,  368,   93,  257,  268,  269,  125,  299,  125,  410,
  302,  279,  413,  380,  316,   41,  270,  374,   44,   41,
  350,  351,   44,  287,  316,  355,  356,   44,  257,  257,
  397,  361,  361,   59,  125,  392,  361,  301,  368,  368,
  263,  270,   59,  368,  374,  257,  263,  404,   40,  379,
  380,  380,  321,  322,   60,  380,   62,  414,  415,  361,
  257,  391,  392,  332,  257,   93,  368,  397,  397,  361,
  258,  270,  397,  270,  404,   40,  368,  270,  380,  257,
  410,   58,  279,  413,  414,  415,  257,  282,  380,  284,
  285,  282,  270,  284,  285,  397,   60,    0,   62,  270,
   41,  370,  371,   44,  257,  397,  375,   38,  257,   40,
   41,  299,   58,   44,  302,  268,  269,   23,   24,   25,
  389,   27,   28,   29,   30,   31,   32,   33,  316,   58,
   33,   62,  257,  257,  287,   38,   60,   40,  257,   42,
  257,    0,   45,  280,  281,  270,  270,   62,  301,  268,
  269,  268,  269,   60,   41,   62,  257,   44,  257,  296,
   91,   38,  257,   40,   41,   42,  257,   44,  287,  270,
  287,  270,  126,  361,   33,  257,  257,  268,  269,   38,
  368,   40,  301,   42,  301,   62,   45,  257,  258,  259,
  260,   41,  380,  257,   44,    0,  287,   60,  126,   62,
  264,  265,  266,   61,   42,  111,  270,  271,   41,  397,
  301,   44,  263,   41,   91,  279,  280,  281,   41,  257,
  123,   44,  125,  126,   41,   40,   62,   44,   33,  135,
   60,   41,   62,   38,   44,   40,   59,   42,   61,   60,
   45,   62,   59,   40,   61,  151,  152,  153,  154,  155,
  156,  157,  158,  159,  160,   58,  257,   41,   42,   43,
   44,   45,   40,   47,  123,  257,  125,  126,   41,   40,
   40,   44,  264,  265,  266,   59,   38,   61,  270,  271,
   41,   41,   41,   44,   44,   44,   59,  279,   61,  291,
  292,  293,  294,  295,  296,   33,  202,   42,  204,   59,
   38,   61,   40,  257,   42,   41,   40,   45,   44,   93,
  264,  265,  266,  219,   42,   41,  270,  271,  123,   40,
  125,  126,  228,  229,  230,  279,  257,  233,   38,  257,
  280,  281,  282,   42,  284,  285,  264,  265,  266,  270,
   33,  125,  270,  271,   60,   38,   62,   40,  279,   42,
   61,  279,   45,  257,  257,  258,  259,  260,  261,  262,
   59,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  272,  273,  274,  279,  280,  281,  282,
  257,  284,  285,  289,  287,  123,  257,   60,  126,   62,
   60,  297,   62,  270,  297,  298,  299,   60,  301,   62,
  257,   41,  261,  262,   41,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,   60,  324,   62,
  279,  280,  281,  282,   58,  284,  285,   38,  287,  123,
  123,   42,   60,  126,   62,   60,  342,   62,  297,  298,
  299,   60,  301,   62,   60,   60,   62,   62,   59,   60,
  257,  357,  257,  258,  259,  260,  261,  262,   40,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,   40,   40,  257,  279,  280,  281,  282,  126,  284,
  285,   60,  287,   62,  268,  269,   41,   40,   59,   41,
   33,  260,  297,  298,  299,   38,  278,   40,    0,   42,
  123,  123,   45,  287,  270,  126,  288,  289,  290,  291,
  292,  293,  294,  295,  296,   42,  257,  301,  257,  257,
  258,  259,  260,  261,  262,  301,  264,  265,  266,  267,
  268,  269,  270,  271,   40,  270,  279,  275,  270,  270,
  270,  279,  280,  281,  282,   33,  284,  285,  270,  287,
   38,  270,   40,  257,   42,  279,  270,   45,  270,  297,
  298,  299,  279,  301,  257,  258,  259,  260,  261,  262,
  270,  264,  265,  266,  267,  268,  269,  270,  271,  257,
  123,  299,  275,  126,  302,   37,  279,  280,  281,  282,
   33,  284,  285,  301,  287,   38,  309,   40,  316,   42,
  258,  390,   45,  330,  297,  298,  299,   -1,  301,  257,
  159,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   41,   42,   43,   44,   45,   -1,
   47,  279,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   33,   -1,   59,  361,   61,   38,  257,   40,   -1,   42,
  368,   -1,   45,  264,  265,  266,   -1,  264,  265,  266,
  271,   -1,  380,  270,  271,   -1,   -1,   -1,  279,  280,
  281,  282,  279,  284,  285,   -1,   93,   -1,   -1,  397,
  123,   -1,   38,  126,   40,  257,   42,   43,   -1,   45,
   46,   47,  264,  265,  266,   33,   -1,   -1,  270,  271,
   38,   -1,   40,   -1,   42,   61,   -1,   45,  125,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  123,   -1,  275,  126,   -1,   91,  279,  280,  281,  282,
   33,  284,  285,   -1,  287,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,  257,  297,  298,  299,   -1,  301,   -1,
  264,  265,  266,   -1,   -1,   -1,  270,  271,  124,  257,
  258,  259,  260,  261,  262,  279,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  123,   -1,  275,  126,   -1,
   -1,  279,  280,  281,  282,   -1,  284,  285,   -1,  287,
  279,  280,  281,  282,   -1,  284,  285,   -1,   -1,  297,
  298,  299,   -1,  301,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  123,   41,  275,  126,   44,   -1,  279,  280,  281,  282,
  257,  284,  285,   -1,  287,   -1,   -1,   -1,   -1,   59,
   -1,  268,  269,   -1,  297,  298,  299,   38,  301,   40,
   41,   42,   -1,   44,  257,  258,  259,  260,  261,  262,
  287,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   62,  275,   93,  301,   -1,  279,  280,  281,  282,
   33,  284,  285,   -1,  287,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,  297,  298,  299,   -1,  301,   -1,
   91,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,  280,  281,  282,   33,  284,  285,   -1,  287,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,  297,
  298,  299,   -1,  301,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  123,   -1,  275,  126,   -1,   -1,  279,  280,  281,  282,
   33,  284,  285,   -1,  287,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,  297,  298,  299,   -1,  301,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,   38,   45,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  257,   -1,  126,   -1,
   -1,   -1,   -1,  264,  265,  266,   62,  257,   -1,  270,
  271,   -1,   -1,   -1,   -1,   33,   -1,   -1,  268,  269,
   38,   -1,   40,   -1,   42,  257,   -1,   45,   -1,   -1,
   -1,   -1,  264,  265,  266,   91,  257,  287,  270,  271,
  123,   -1,  125,  126,   -1,   -1,   -1,  279,  280,  281,
  282,  301,  284,  285,   -1,   -1,   -1,   -1,  279,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   38,   -1,   40,
   41,   42,   -1,   44,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   62,  275,   -1,   -1,   -1,  279,  280,  281,  282,
   -1,  284,  285,   -1,  287,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,  297,  298,  299,   -1,  301,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,  280,  281,  282,   33,  284,  285,   -1,  287,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,  297,
  298,  299,   -1,  301,   -1,  258,  259,  260,  261,  262,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,   -1,   -1,   -1,  258,  259,  260,  261,
  262,  257,   -1,   -1,  287,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  297,  298,  299,   33,  301,   -1,
   -1,   -1,   38,  279,   40,  287,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  297,  298,  299,   -1,  301,
  258,  259,  260,  261,  262,  123,   -1,  125,  126,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  287,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  297,
  298,  299,   33,  301,   -1,   -1,  257,   38,   -1,   40,
   -1,   42,   -1,   38,   45,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  279,  125,
  126,   -1,   38,  257,   40,   41,   -1,   62,   44,   -1,
  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  279,   62,   38,   33,   40,
   -1,   42,   -1,   38,   45,   40,   91,   42,   -1,   -1,
   45,  123,   -1,  125,  126,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   91,   42,   62,   -1,   45,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,  262,   41,   -1,   -1,   44,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,   33,   -1,   59,   -1,   -1,   38,   -1,   40,  287,
   42,   -1,   -1,   45,   -1,   91,   -1,   -1,   -1,  297,
  298,  299,  123,  301,  125,  126,  257,   -1,  123,   -1,
   -1,  126,   -1,  264,  265,  266,   -1,   93,   -1,  270,
  271,   -1,  258,  259,  260,  261,  262,  123,  279,   -1,
  126,  267,  268,  269,   -1,   -1,  272,  273,  274,  275,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  125,
   42,  287,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,  298,  299,   -1,  301,  258,  259,  260,  261,
  262,  123,   -1,  125,  126,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  258,  259,  260,
  261,  262,  257,   -1,   -1,  287,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,  297,  298,  299,   -1,  301,
   -1,  257,   -1,   -1,  279,   -1,  287,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  270,   -1,  297,  298,  299,   -1,
  301,  123,   -1,  279,  126,   -1,   -1,  258,  259,  260,
  261,  262,  257,  258,  259,  260,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,  270,   -1,   -1,   -1,   -1,
   33,  257,  258,  259,  260,   38,  287,   40,   -1,   42,
   -1,   -1,   45,   -1,  270,   -1,  297,  298,  299,   -1,
  301,  257,  297,  298,  299,   -1,   -1,   -1,   61,   -1,
   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,  298,  299,   -1,   -1,  258,  259,  260,  261,
  262,  287,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,   33,  301,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   -1,  287,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  297,  298,  299,   -1,  301,
  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
  262,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   33,
  272,  273,  274,  275,   38,   33,   40,   -1,   42,   -1,
   38,   45,   40,   -1,   42,  287,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   33,   -1,  297,  298,  299,   38,  301,
   40,   33,   42,   -1,  123,   45,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   93,
   45,   -1,   -1,   41,   -1,   93,   44,   -1,   -1,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   93,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   62,  126,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   93,  126,  270,   -1,   -1,
   91,  123,   -1,   -1,  126,   -1,   -1,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,  123,   -1,
   -1,  126,   -1,   -1,  297,  298,  299,  125,   59,   60,
   61,   62,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,   59,   60,   61,   62,  257,   -1,   -1,
   91,  270,   93,   -1,  264,  265,  266,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,   -1,   -1,   -1,   91,   -1,   93,  297,  298,
  299,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,  257,
  258,  259,  260,   -1,   -1,   -1,  270,  123,  124,  125,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  270,   -1,   -1,  297,  298,  299,   -1,   -1,  270,  297,
  298,  299,  257,  258,  259,  260,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,  270,  257,  297,  298,  299,
  268,  269,   -1,   -1,   -1,  297,  298,  299,   38,  270,
   40,   41,   42,   43,   44,   45,   46,   47,  279,  287,
   -1,   -1,  297,  298,  299,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,  301,   38,   -1,   -1,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,  257,   61,   -1,   -1,
   -1,   91,   -1,   93,   -1,   -1,   40,  268,  269,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,  279,   -1,
   -1,  257,   -1,   -1,   -1,   59,  287,   61,   62,   93,
   -1,   -1,  268,  269,  124,  125,   -1,   -1,   -1,   -1,
  301,   38,   -1,  279,   41,   42,   43,   44,   45,   46,
   47,  287,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
  124,  125,   59,   38,   61,  301,   41,   42,   43,   44,
   45,   46,   47,   -1,   41,   -1,   43,   44,   -1,   46,
   47,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
  124,   -1,   59,   60,   61,   62,   93,   -1,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   93,   59,
   -1,   61,   -1,   -1,   91,   -1,   93,  124,  125,   59,
   -1,   61,   -1,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   40,   41,   93,   59,   44,   61,  124,  125,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   41,   62,   43,   44,   45,   -1,  268,  269,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   93,   -1,
   59,   -1,   61,  257,  124,  125,   -1,  287,   -1,   -1,
   -1,   -1,   91,   -1,  268,  269,   -1,   -1,   -1,   38,
   -1,  301,   41,   42,   43,   44,   45,   46,   47,  124,
  125,   -1,   38,  287,   93,   41,   42,   43,   44,   45,
   59,   47,   61,   -1,   -1,   -1,   -1,  301,   -1,   -1,
   -1,   -1,   -1,   59,   38,   61,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,  125,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   93,   59,   -1,   61,   -1,   -1,
   -1,  268,  269,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   41,   42,   43,   44,   45,
  287,   47,   -1,  268,  269,  124,  125,   -1,   -1,   93,
   -1,  268,  269,   59,  301,   61,   -1,   -1,  124,  125,
   -1,   -1,  287,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,  301,  257,  268,  269,
  124,  125,   41,   -1,  301,   44,   -1,   93,  268,  269,
   41,   42,   43,   44,   45,   -1,   47,  287,   -1,   -1,
   59,   -1,  257,   -1,   -1,   -1,   -1,  287,   59,   -1,
   61,  301,   -1,  268,  269,   -1,   -1,   -1,  257,  125,
   -1,  301,   -1,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,  270,  287,   -1,   93,   -1,   -1,   -1,  257,   -1,
  279,   -1,   93,   59,   -1,   61,  301,   -1,   38,  268,
  269,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  287,   59,
   60,   61,   62,   -1,  125,   -1,   -1,   93,  257,   -1,
   -1,   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,  268,
  269,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,  268,  269,   -1,   -1,   -1,   -1,  287,  125,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  287,  301,   -1,  268,  269,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  301,   -1,   38,   -1,   40,
   -1,   42,   43,  287,   45,   46,   47,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,  301,   59,   60,
   61,   62,  268,  269,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   38,  287,   40,   -1,   42,   43,   -1,   45,   46,   47,
   91,   60,   61,   62,   -1,  301,   -1,   -1,  257,   -1,
   -1,   -1,   60,   61,   62,   -1,  257,  257,   -1,  268,
  269,   -1,   -1,   -1,  264,  265,  266,  268,  269,   -1,
  270,  271,   91,  124,   -1,   -1,   -1,   -1,  287,  279,
  280,  281,   -1,   91,   -1,   93,  287,   -1,   -1,   -1,
   -1,  257,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  301,   -1,  268,  269,   38,  124,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   38,  124,   40,   41,   42,
   43,  287,   45,   46,   47,   -1,   60,   61,   62,   -1,
  270,   -1,   -1,   -1,   -1,  301,   -1,   60,   61,   62,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   91,   -1,   93,   60,   61,   62,   -1,
   38,  124,   40,   -1,   42,   43,   -1,   45,   46,   47,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   60,   61,   62,   -1,  124,   91,   -1,   -1,
   -1,   59,   60,   61,   62,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   -1,   60,   61,   62,
  124,   -1,   -1,   91,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   60,
   61,   62,   -1,   38,   -1,   40,  124,   42,   43,   -1,
   45,   46,   47,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   60,   61,   62,   -1,   -1,
   91,  124,   -1,   -1,   -1,   60,   61,   62,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   60,   61,   62,  124,   -1,   -1,   91,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  124,
   -1,   91,  279,  280,  281,  282,   -1,  284,  285,  124,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,   -1,  124,   -1,  279,  280,  281,  282,
  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  279,  280,  281,  282,  257,  284,  285,   -1,
   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,
  281,  282,  257,  284,  285,   -1,   -1,   -1,   -1,  264,
  265,  266,   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  279,  280,  281,  282,  257,  284,
  285,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,
   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  279,  280,  281,  282,  257,  284,  285,   -1,   -1,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,  282,
  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  279,  280,  281,  282,  257,  284,  285,   -1,
   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,
  281,  282,  257,  284,  285,  257,   -1,   -1,   -1,  264,
  265,  266,  264,  265,  266,  270,  271,   -1,  270,  271,
   -1,   -1,   -1,  257,  279,  280,  281,  279,  280,  281,
  264,  265,  266,   -1,   -1,  257,  270,  271,   -1,   -1,
   -1,   -1,  264,  265,  266,  279,  280,  281,  270,  271,
   -1,   -1,   -1,  257,   -1,   -1,  257,  279,  280,  281,
  264,  265,  266,  264,  265,  266,  270,  271,   -1,  270,
  271,   -1,   -1,   -1,  257,  279,  280,  281,  279,  280,
  281,  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
};
static int yyctable[] = {                                      1,
    2,  116,  168,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,   -1,    7,
    2,  116,  168,   -1,    8,    2,  116,  168,   -1,    9,
    2,  116,  168,   -1,   10,    2,   -1,   11,    2,   -1,
   12,    2,   -1,   13,    2,  116,  168,   -1,   14,    2,
  116,  168,   -1,   15,    2,   -1,   16,    2,  168,   -1,
   17,    2,  168,   -1,   18,    2,  168,   -1,   19,    2,
  168,   -1,   20,    2,  168,   -1,   21,    2,  168,   -1,
   22,    2,   -1,   23,    2,   -1,   24,    2,   -1,   25,
    2,   -1,   26,    2,   -1,   27,    2,   -1,   28,    2,
   -1,   29,    2,   -1,   30,    2,   -1,   31,    2,   -1,
   32,    2,   -1,   33,    2,   -1,   77,  116,  169,   -1,
   78,  116,  169,   -1,   79,  116,  169,   -1,   80,  116,
  169,   -1,   81,   49,  116,  169,   -1,   14,  116,  169,
   -1,   16,  169,   -1,   17,  169,   -1,   82,  169,   -1,
   83,   49,   -1,   87,  116,  168,   -1,  116,  168,   -1,
   16,  168,   -1,   77,  162,   -1,   13,  162,   -1,   77,
  163,   -1,   13,  163,   -1,   77,  164,   -1,   13,  164,
   -1,   88,  108,   -1,   77,  206,   -1,   27,  206,   -1,
   28,  206,   -1,   29,  206,   -1,   30,  206,   -1,  130,
  179,   -1,   68,  179,   -1,    1,  116,  168,   -1,    7,
  116,  168,   -1,    8,  116,  168,   -1,    9,  116,  168,
   -1,   13,  116,  168,   -1,   14,  116,  168,   -1,   17,
  168,   -1,   18,  168,   -1,   19,  168,   -1,   20,  168,
   -1,   21,  168,   -1,  169,  168,   -1,   13,  168,   -1,
  105,  116,   -1,   16,  105,   -1,  174,  168,   -1,  177,
   28,   -1,  169,  116,  168,   -1,   78,  116,  168,   -1,
   79,  116,  168,   -1,   80,  116,  168,   -1,   82,  168,
   -1,  186,   68,   -1,  186,   70,   -1,  186,   71,   -1,
  186,   72,   -1,  186,   50,   -1,  186,   69,   -1,  149,
  202,   -1,  150,  202,   -1,  151,  202,   -1,  152,  202,
   -1,  153,  202,   -1,  154,  202,   -1,  155,  202,   -1,
  156,  202,   -1,  157,  202,   -1,  158,  202,   -1,  159,
  202,   -1,  160,  202,   -1,  149,  203,   -1,  150,  203,
   -1,  151,  203,   -1,  152,  203,   -1,  153,  203,   -1,
  154,  203,   -1,  155,  203,   -1,  156,  203,   -1,  157,
  203,   -1,  158,  203,   -1,  159,  203,   -1,  160,  203,
   -1,  149,  205,   -1,  150,  205,   -1,  151,  205,   -1,
  152,  205,   -1,  153,  205,   -1,  154,  205,   -1,  155,
  205,   -1,  156,  205,   -1,  157,  205,   -1,  158,  205,
   -1,  159,  205,   -1,  160,  205,   -1,  149,  181,   -1,
  150,  181,   -1,  149,  184,   -1,  150,  184,   -1,  149,
  185,   -1,  150,  185,   -1,  206,   49,   -1,  149,  182,
   -1,  150,  182,   -1,  149,  183,   -1,  150,  183,   -1,
   87,  168,   -1,   16,  116,   -1,   49,  169,   -1,  264,
   32,   -1,  265,   32,   -1,  266,   32,   -1,  267,   32,
   -1,  275,   49,   -1,  186,   51,   -1,  149,  192,   -1,
  150,  192,   -1,  149,  186,   -1,  150,  186,   -1,  149,
  187,   -1,  150,  187,   -1,  149,  188,   -1,  150,  188,
   -1,  149,  189,   -1,  150,  189,   -1,  149,  190,   -1,
  150,  190,   -1,  149,  191,   -1,  150,  191,   -1,  149,
  198,   -1,  150,  198,   -1,  149,  204,   -1,  150,  204,
   -1,  151,  204,   -1,  152,  204,   -1,  153,  204,   -1,
  154,  204,   -1,  155,  204,   -1,  156,  204,   -1,  157,
  204,   -1,  158,  204,   -1,  159,  204,   -1,  160,  204,
   -1,  149,  195,   -1,  150,  195,   -1,  149,  196,   -1,
  150,  196,   -1,  149,  194,   -1,  150,  194,   -1,  149,
  197,   -1,  150,  197,   -1,  307,   62,   -1,   11,   62,
   -1,   12,   62,   -1,  308,   62,   -1,   26,   62,   -1,
  177,   58,   -1,
};
#define YYFINAL 34
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 311
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknEnum","tknPreProDef","tknClass",
"tknStruct","tknUnion","tknNamespace","tknDocBlockComment","tknDocLineComment",
"tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected","tknPrivate",
"tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknConst",
"tknStatic","tknExtern","tknVirtual","tknOverride","tknInline","tknExplicit",
"tknFriend","tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf",
"tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf","tknNew","tknDelete",
"tknReturn","tknVarArg","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumstmt",
"stmt : typedefnamestmt",
"stmt : classdefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : functionpointer",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumstmt : tknEnum optid '{' enumitemlist '}' ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optconst vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optconst",
"vardecl : varqual identifier optconst",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optconst vartype optconst ptrlevelopt reftype optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' expr ']' optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' ']' optconst",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optconst :",
"optconst : tknConst",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"vardecllist : vardecl ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardecllist : vardecllist ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}' classdefnend",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"classdefnend :",
"classdefnend : ';'",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 792 "C:/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed	(	char* text,
							int errt,
							YYSTYPE& errt_value,
							YYPOSN& errt_posn
						)
{
	extern const char* get_start_of_buffer();
	const char* lineStart = errt_posn;
	const char* buffStart = get_start_of_buffer();
	while(lineStart > buffStart)
	{
		if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
			break;
		--lineStart;
	}
	char* lineEnd = errt_posn;
	char endReplaceChar = 0;
	while(*lineEnd)
	{
		if(*lineEnd == '\r' || *lineEnd == '\n')
		{
			endReplaceChar = *lineEnd;
			*lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
		}
		else
		{
			++lineEnd;
		}
	}
	char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
	for(const char* p = lineStart; p < errt_posn; ++p)
		spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
	char errmsg[1024];
	sprintf(errmsg, "%s%s%s%d%c%s%c%s%c%c",
		"Error: Unexpected token '", errt_posn, "' found at line#", gLineNo, '\n', // The error message
		lineStart, '\n',		// Line that contains the error.
		spacechars, '^', '\n');	// A ^ below the beginning of unexpected token.
	printf("%s", errmsg);
	// Replace back the end char
	if(endReplaceChar)
		*lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
	void setupScanBuffer(char* buf, size_t bufsize);
	setupScanBuffer(stm, stmSize);
	gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
	yyparse();

  return gProgUnit;
}
#line 1616 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 252 "C:/github/cppparser/parser.y"
{
						gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
            if (gProgUnit)
						  gProgUnit->compoundType_ = kCppFile;
					}
#line 2006 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 259 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2012 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 260 "C:/github/cppparser/parser.y"
{
						yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
						yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
						yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
					}
#line 2022 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 265 "C:/github/cppparser/parser.y"
{
						yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
						yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
						yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
					}
#line 2032 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 270 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2038 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 273 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2044 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 274 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2050 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 275 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2056 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 276 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2062 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 277 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2068 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 278 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2074 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 279 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2080 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 280 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2086 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 281 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2092 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 282 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2098 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 283 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2104 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 284 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2110 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 285 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2116 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 286 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2122 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 287 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2128 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 288 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2134 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 289 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2140 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 290 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2146 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 291 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2152 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 292 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2158 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 293 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2164 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 294 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2170 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 295 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2176 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 298 "C:/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 2182 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 299 "C:/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 2188 "y_tab.c"
break;
case 31:
#line 302 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2193 "y_tab.c"
  if (!yytrial)
#line 302 "C:/github/cppparser/parser.y"
{ /* Simple rename using #define*/
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kRename;
					}
#line 2200 "y_tab.c"
break;
case 32:
#line 306 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2205 "y_tab.c"
  if (!yytrial)
#line 306 "C:/github/cppparser/parser.y"
{ /* blank define*/
						yyval.hashDefine = new CppDefine(yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kRename;
					}
#line 2212 "y_tab.c"
break;
case 33:
#line 310 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2217 "y_tab.c"
  if (!yytrial)
#line 310 "C:/github/cppparser/parser.y"
{/* Constant definition*/
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
					}
#line 2224 "y_tab.c"
break;
case 34:
#line 314 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2229 "y_tab.c"
  if (!yytrial)
#line 314 "C:/github/cppparser/parser.y"
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
					}
#line 2236 "y_tab.c"
break;
case 35:
#line 318 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2241 "y_tab.c"
  if (!yytrial)
#line 318 "C:/github/cppparser/parser.y"
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
					}
#line 2248 "y_tab.c"
break;
case 36:
#line 322 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2253 "y_tab.c"
  if (!yytrial)
#line 322 "C:/github/cppparser/parser.y"
{
						yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
						yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
					}
#line 2260 "y_tab.c"
break;
case 37:
#line 328 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2265 "y_tab.c"
  if (!yytrial)
#line 328 "C:/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 2269 "y_tab.c"
break;
case 38:
#line 331 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2274 "y_tab.c"
  if (!yytrial)
#line 331 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2278 "y_tab.c"
break;
case 39:
#line 332 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2283 "y_tab.c"
  if (!yytrial)
#line 332 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2287 "y_tab.c"
break;
case 40:
#line 338 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2292 "y_tab.c"
  if (!yytrial)
#line 338 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,		yyvsp[0].str); }
#line 2296 "y_tab.c"
break;
case 41:
#line 339 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2301 "y_tab.c"
  if (!yytrial)
#line 339 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,		yyvsp[0].str); }
#line 2305 "y_tab.c"
break;
case 42:
#line 340 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2310 "y_tab.c"
  if (!yytrial)
#line 340 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,	yyvsp[0].str); }
#line 2314 "y_tab.c"
break;
case 43:
#line 341 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2319 "y_tab.c"
  if (!yytrial)
#line 341 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse		  ); }
#line 2323 "y_tab.c"
break;
case 44:
#line 342 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2328 "y_tab.c"
  if (!yytrial)
#line 342 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,		yyvsp[0].str); }
#line 2332 "y_tab.c"
break;
case 45:
#line 343 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2337 "y_tab.c"
  if (!yytrial)
#line 343 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf		  ); }
#line 2341 "y_tab.c"
break;
case 46:
#line 346 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2346 "y_tab.c"
  if (!yytrial)
#line 346 "C:/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 2350 "y_tab.c"
break;
case 47:
#line 349 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2355 "y_tab.c"
  if (!yytrial)
#line 349 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2359 "y_tab.c"
break;
case 48:
#line 350 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2364 "y_tab.c"
  if (!yytrial)
#line 350 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2368 "y_tab.c"
break;
case 49:
  if (!yytrial)
#line 353 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2374 "y_tab.c"
break;
case 50:
  if (!yytrial)
#line 354 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2380 "y_tab.c"
break;
case 51:
  if (!yytrial)
#line 355 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 2386 "y_tab.c"
break;
case 52:
  if (!yytrial)
#line 358 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 2392 "y_tab.c"
break;
case 53:
  if (!yytrial)
#line 359 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2398 "y_tab.c"
break;
case 54:
  if (!yytrial)
#line 362 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);		}
#line 2404 "y_tab.c"
break;
case 55:
  if (!yytrial)
#line 363 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 2410 "y_tab.c"
break;
case 56:
  if (!yytrial)
#line 364 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);		}
#line 2416 "y_tab.c"
break;
case 57:
  if (!yytrial)
#line 365 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);		}
#line 2422 "y_tab.c"
break;
case 58:
  if (!yytrial)
#line 366 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);		}
#line 2428 "y_tab.c"
break;
case 59:
  if (!yytrial)
#line 369 "C:/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 2434 "y_tab.c"
break;
case 60:
  if (!yytrial)
#line 370 "C:/github/cppparser/parser.y"
{
						yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
						yyval.enumItemList->push_back(yyvsp[0].enumItem);
					}
#line 2443 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 374 "C:/github/cppparser/parser.y"
{
						yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
						yyval.enumItemList->push_back(yyvsp[0].enumItem);
					}
#line 2452 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 378 "C:/github/cppparser/parser.y"
{
						yyval.enumItemList = yyvsp[-1].enumItemList;
					}
#line 2460 "y_tab.c"
break;
case 63:
#line 383 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2465 "y_tab.c"
  if (!yytrial)
#line 383 "C:/github/cppparser/parser.y"
{
						yyval.cppEnum = new CppEnum(yyvsp[-4].str, gCurProtLevel);
						yyval.cppEnum->itemList_ = yyvsp[-2].enumItemList;
					}
#line 2472 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 389 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2478 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 390 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2484 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 393 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 2490 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 396 "C:/github/cppparser/parser.y"
{
						yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
						yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
					}
#line 2499 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 402 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2505 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 403 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2511 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 404 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2517 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 405 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2523 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 406 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2529 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 407 "C:/github/cppparser/parser.y"
{
						yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
						delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
					}
#line 2538 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 413 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 2544 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 416 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-2].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-1].str;
						yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
						yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
					}
#line 2555 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 422 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-2].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-1].str;
						yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
					}
#line 2565 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 427 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-4].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-3].str;
						yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
						yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
					}
#line 2576 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 433 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-3].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-2].str;
						yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
					}
#line 2586 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 438 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-4].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-3].str;
						yyval.cppVarObj->varAttr_|= kArray;
						yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
					}
#line 2597 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 444 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = yyvsp[-3].cppVarObj;
						yyval.cppVarObj->name_ = yyvsp[-2].str;
						yyval.cppVarObj->varAttr_|= kArray;
					}
#line 2607 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 453 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
					}
#line 2615 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 456 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
					}
#line 2623 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 459 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
					}
#line 2631 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 465 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
					}
#line 2639 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 468 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
						yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
					}
#line 2648 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 472 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
					}
#line 2656 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 477 "C:/github/cppparser/parser.y"
{ yyval.attr = kStatic;	}
#line 2662 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 478 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;	}
#line 2668 "y_tab.c"
break;
case 89:
#line 481 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2673 "y_tab.c"
  if (!yytrial)
#line 481 "C:/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 2677 "y_tab.c"
break;
case 90:
#line 484 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2682 "y_tab.c"
  if (!yytrial)
#line 484 "C:/github/cppparser/parser.y"
{
						yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
						yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
						yyval.cppFuncObj->defn_->compoundType_ = kBlock;
					}
#line 2690 "y_tab.c"
break;
case 91:
#line 491 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2695 "y_tab.c"
  if (!yytrial)
#line 491 "C:/github/cppparser/parser.y"
{
						yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
						yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
					}
#line 2702 "y_tab.c"
break;
case 92:
  if (!yytrial)
#line 496 "C:/github/cppparser/parser.y"
{
						yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
						yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
						yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
					}
#line 2712 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 501 "C:/github/cppparser/parser.y"
{
						yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
						yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
						yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
					}
#line 2722 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 508 "C:/github/cppparser/parser.y"
{
						yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
						yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
						yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
					}
#line 2732 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 513 "C:/github/cppparser/parser.y"
{
						yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
						yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
						yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
					}
#line 2742 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 520 "C:/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 2748 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 521 "C:/github/cppparser/parser.y"
{
						yyval.paramList = new CppParamList;
						yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
					}
#line 2757 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 525 "C:/github/cppparser/parser.y"
{
						yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
						yyval.paramList = yyvsp[-2].paramList;
					}
#line 2766 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 531 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
#line 2772 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 532 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
#line 2778 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 533 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;	}
#line 2784 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 534 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;		}
#line 2790 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 537 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 2796 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 538 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 2802 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 541 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;			}
#line 2808 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 542 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline;		}
#line 2814 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 543 "C:/github/cppparser/parser.y"
{ yyval.attr = kVirtual;	}
#line 2820 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 544 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;		}
#line 2826 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 545 "C:/github/cppparser/parser.y"
{ yyval.attr = kExplicit;	}
#line 2832 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 546 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2838 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 547 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2844 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 550 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2850 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 551 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 2856 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 552 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 2862 "y_tab.c"
break;
case 115:
#line 553 "C:/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else YYVALID;}
#line 2867 "y_tab.c"
  if (!yytrial)
#line 553 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 2871 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 556 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2877 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 557 "C:/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 2883 "y_tab.c"
break;
case 118:
#line 560 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2888 "y_tab.c"
  if (!yytrial)
#line 560 "C:/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 2892 "y_tab.c"
break;
case 119:
#line 566 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2897 "y_tab.c"
  if (!yytrial)
#line 567 "C:/github/cppparser/parser.y"
{
						yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
						yyval.cppCtorObj->memInitList_	= yyvsp[-3].memInitList;
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
					}
#line 2905 "y_tab.c"
break;
case 120:
#line 572 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 2910 "y_tab.c"
break;
case 121:
#line 576 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2915 "y_tab.c"
  if (!yytrial)
#line 577 "C:/github/cppparser/parser.y"
{
						yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
					}
#line 2922 "y_tab.c"
break;
case 122:
#line 581 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 2927 "y_tab.c"
break;
case 123:
#line 585 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2932 "y_tab.c"
  if (!yytrial)
#line 586 "C:/github/cppparser/parser.y"
{
						yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
						yyval.cppCtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
					}
#line 2939 "y_tab.c"
break;
case 124:
#line 593 "C:/github/cppparser/parser.y"
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-3].str)
							YYERROR;
						else
							YYVALID;
					}
#line 2951 "y_tab.c"
  if (!yytrial)
#line 601 "C:/github/cppparser/parser.y"
{
						yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
					}
#line 2957 "y_tab.c"
break;
case 125:
#line 604 "C:/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else YYVALID;}
#line 2962 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 605 "C:/github/cppparser/parser.y"
{
						yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
					}
#line 2970 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 610 "C:/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 2976 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 611 "C:/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 2982 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 612 "C:/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 2988 "y_tab.c"
break;
case 130:
#line 615 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2993 "y_tab.c"
  if (!yytrial)
#line 615 "C:/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 2997 "y_tab.c"
break;
case 131:
#line 618 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3002 "y_tab.c"
  if (!yytrial)
#line 619 "C:/github/cppparser/parser.y"
{
						yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
						yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
					}
#line 3009 "y_tab.c"
break;
case 132:
#line 623 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3014 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 625 "C:/github/cppparser/parser.y"
{
						yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
						yyval.cppDtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
					}
#line 3023 "y_tab.c"
break;
case 134:
#line 629 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3028 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 631 "C:/github/cppparser/parser.y"
{
						yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
						yyval.cppDtorObj->defn_			= yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
					}
#line 3037 "y_tab.c"
break;
case 136:
#line 638 "C:/github/cppparser/parser.y"
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-2].str)
							YYERROR;
						else
							YYVALID;
					}
#line 3049 "y_tab.c"
  if (!yytrial)
#line 646 "C:/github/cppparser/parser.y"
{
						const char* tildaStartPos = yyvsp[-2].str.sz-1;
						while(*tildaStartPos != '~') --tildaStartPos;
						yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
					}
#line 3057 "y_tab.c"
break;
case 137:
#line 652 "C:/github/cppparser/parser.y"
{
						if(gCompoundStack.empty())
							YYERROR;
						if(gCompoundStack.top() != yyvsp[-2].str)
							YYERROR;
						else
							YYVALID;
					}
#line 3069 "y_tab.c"
  if (!yytrial)
#line 660 "C:/github/cppparser/parser.y"
{
						const char* tildaStartPos = yyvsp[-2].str.sz-1;
						while(*tildaStartPos != '~') --tildaStartPos;
						yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
					}
#line 3077 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 667 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObjList = new CppVarList();
						yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
						yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
					}
#line 3087 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 672 "C:/github/cppparser/parser.y"
{
						yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
						yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
					}
#line 3096 "y_tab.c"
break;
case 140:
#line 678 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3101 "y_tab.c"
  if (!yytrial)
#line 678 "C:/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 3105 "y_tab.c"
break;
case 141:
#line 681 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3110 "y_tab.c"
  if (!yytrial)
#line 681 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3114 "y_tab.c"
break;
case 142:
#line 682 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3119 "y_tab.c"
  if (!yytrial)
#line 682 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3123 "y_tab.c"
break;
case 143:
#line 683 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3128 "y_tab.c"
  if (!yytrial)
#line 683 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 3132 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 686 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;		}
#line 3138 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 687 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;		}
#line 3144 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 690 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;		}
#line 3150 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 691 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;	}
#line 3156 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 694 "C:/github/cppparser/parser.y"
{ yyval.refType = kNoRef;		}
#line 3162 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 695 "C:/github/cppparser/parser.y"
{ yyval.refType = kByRef;		}
#line 3168 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 696 "C:/github/cppparser/parser.y"
{ yyval.refType = kRValRef;	}
#line 3174 "y_tab.c"
break;
case 151:
#line 700 "C:/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); YYVALID;}
#line 3179 "y_tab.c"
  if (!yytrial)
#line 700 "C:/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 3183 "y_tab.c"
break;
case 152:
#line 702 "C:/github/cppparser/parser.y"
{gCompoundStack.pop(); YYVALID;}
#line 3188 "y_tab.c"
  if (!yytrial)
#line 703 "C:/github/cppparser/parser.y"
{
						gCurProtLevel = gProtLevelStack.top();
						gProtLevelStack.pop();

						yyval.cppCompundObj = yyvsp[-2].cppCompundObj ? yyvsp[-2].cppCompundObj : newCompound(gCurProtLevel);
						yyval.cppCompundObj->compoundType_	= yyvsp[-8].compoundType;
						yyval.cppCompundObj->apidocer_		= yyvsp[-7].str;
						yyval.cppCompundObj->name_			= yyvsp[-6].str;
						yyval.cppCompundObj->inheritList_	= yyvsp[-5].inheritList;
					}
#line 3201 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 714 "C:/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 3207 "y_tab.c"
break;
case 154:
#line 715 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3212 "y_tab.c"
  if (!yytrial)
#line 715 "C:/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3216 "y_tab.c"
break;
case 155:
#line 716 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3221 "y_tab.c"
  if (!yytrial)
#line 716 "C:/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3225 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 719 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 3231 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 720 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;		}
#line 3237 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 721 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;	}
#line 3243 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 722 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;	}
#line 3249 "y_tab.c"
break;
case 160:
#line 725 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3254 "y_tab.c"
  if (!yytrial)
#line 725 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 3258 "y_tab.c"
break;
case 161:
#line 726 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3263 "y_tab.c"
  if (!yytrial)
#line 726 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 3267 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 729 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kClass;		}
#line 3273 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 730 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;		}
#line 3279 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 731 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;		}
#line 3285 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 732 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;	}
#line 3291 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 739 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3297 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 740 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3303 "y_tab.c"
break;
case 170:
#line 743 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3308 "y_tab.c"
  if (!yytrial)
#line 743 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;		}
#line 3312 "y_tab.c"
break;
case 171:
#line 744 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3317 "y_tab.c"
  if (!yytrial)
#line 744 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;	}
#line 3321 "y_tab.c"
break;
case 172:
#line 745 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3326 "y_tab.c"
  if (!yytrial)
#line 745 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;		}
#line 3330 "y_tab.c"
break;
case 173:
#line 748 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3335 "y_tab.c"
  if (!yytrial)
#line 748 "C:/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 3339 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 751 "C:/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);	}
#line 3345 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 752 "C:/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);				}
#line 3351 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 755 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
#line 3357 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 756 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
#line 3363 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 757 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
#line 3369 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 758 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);	}
#line 3375 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 759 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);	}
#line 3381 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 760 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);			}
#line 3387 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 761 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);				}
#line 3393 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 762 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);				}
#line 3399 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 763 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);				}
#line 3405 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 764 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);					}
#line 3411 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 765 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);				}
#line 3417 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 766 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);				}
#line 3423 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 767 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);				}
#line 3429 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 768 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);				}
#line 3435 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 769 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);			}
#line 3441 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 770 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);				}
#line 3447 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 771 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj); }
#line 3453 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 772 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);			}
#line 3459 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 773 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);			}
#line 3465 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 774 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);			}
#line 3471 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 775 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);			}
#line 3477 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 776 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);				}
#line 3483 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 777 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);				}
#line 3489 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 778 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);			}
#line 3495 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 779 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);		}
#line 3501 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 780 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;	}
#line 3507 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 781 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;			}
#line 3513 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 782 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;		}
#line 3519 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 783 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;	}
#line 3525 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 784 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;		}
#line 3531 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 785 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn); }
#line 3537 "y_tab.c"
break;
case 207:
#line 788 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3542 "y_tab.c"
  if (!yytrial)
#line 788 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 3546 "y_tab.c"
break;
#line 3548 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
