#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "C:/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 102 "C:/github/cppparser/parser.y"
#line 89 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   24,   24,   24,   24,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   58,
   58,   53,   53,   53,   53,   53,   53,   54,   55,   55,
   56,   56,   56,   56,   56,   56,   57,   27,   27,    2,
    2,    2,    4,    4,    9,    9,    9,    9,    9,   10,
   10,   10,   10,    7,    7,    7,    7,    8,    8,    8,
   23,   23,   22,   21,    3,    3,    3,    3,    3,    3,
   14,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   12,   12,   12,   46,   46,   32,   33,    6,   30,   30,
   31,   31,   20,   20,   20,   16,   16,   16,   16,   17,
   17,   48,   48,   48,   48,   48,   48,   48,   47,   47,
   47,   47,   45,   45,   35,   36,   59,   36,   60,   36,
   34,   61,   34,   40,   40,   40,   38,   39,   62,   39,
   63,   39,   37,   37,   37,   18,   18,   19,   15,   15,
   15,   42,   42,   43,   43,   44,   44,   44,   64,   25,
   49,   49,   49,   50,   50,   50,   50,   11,   11,   41,
   41,   41,   41,   65,   65,    1,    1,   51,   51,   51,
   26,   52,   52,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   29,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    4,    3,    4,    4,    4,    4,    3,    3,    3,
    3,    3,    3,    2,    3,    2,    3,    1,    1,    1,
    2,    3,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    4,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    9,    8,    0,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    0,    2,
    2,    3,    0,    1,    2,    5,    0,   11,    0,   13,
    4,    0,    6,    0,    5,    6,    2,    4,    0,   10,
    0,   12,    4,    5,    7,    8,    8,    2,    2,    2,
    3,    0,    1,    1,    2,    0,    1,    2,    0,    9,
    0,    3,    4,    0,    1,    1,    1,    3,    4,    1,
    1,    1,    1,    0,    1,    0,    1,    2,    2,    2,
    4,    1,    3,    1,    1,    1,    1,    3,    2,    2,
    2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
    4,    4,    4,    4,    4,    3,    3,    4,    3,    2,
    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  184,  185,  186,    0,    0,    0,    0,    0,  173,
   48,   49,    0,    0,    0,  124,   94,    0,    0,    0,
    0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,   23,    8,
    9,   12,    0,    0,    0,    6,    0,    7,    0,    0,
   10,    0,   11,   22,   13,    0,   14,   15,    0,   16,
   17,    0,   18,   19,    0,   20,   21,    0,    0,    0,
    0,   24,   25,   26,   27,   28,    0,   50,    0,    0,
    0,    0,   95,    0,    0,    0,    0,  177,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  117,  118,    0,    0,    0,    0,    0,    0,    0,
   44,    0,   46,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  114,    0,
  112,    0,    0,    0,  154,    0,    0,    0,    0,    0,
  149,  150,    0,  148,    0,   72,   71,    0,    0,    0,
    4,    5,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  215,    0,   96,  125,    0,    0,
    0,  137,    0,    0,    0,    0,    0,    0,    0,    0,
   31,    0,    0,    0,    0,  106,  104,    0,  109,    0,
  151,    0,   98,    0,    0,    0,   60,    0,    0,   47,
    0,   38,   39,   40,   41,   42,   43,   45,    0,  209,
    0,  188,    0,    0,    0,    0,    0,    0,  110,    0,
  111,    0,    0,  155,    0,    0,   83,    0,    0,    0,
   73,  178,  179,  180,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  207,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  168,    0,    0,    0,
    0,    0,    0,  139,    0,  131,    0,    0,    0,   60,
   70,    0,    0,  181,    0,   32,   35,   36,   34,   37,
    0,    0,  143,    0,    0,    0,    0,   80,    0,   87,
    0,    0,    0,    0,    0,    0,    0,  208,  201,   97,
    0,    0,    0,  138,    0,    0,  169,    0,    0,   82,
    0,    0,    0,    0,    0,  105,    0,    0,   60,   68,
    0,    0,    0,    0,    0,    0,   61,   57,   58,    0,
    0,    0,    0,    0,  129,    0,   86,    0,    0,    0,
    0,  126,  165,  166,  167,    0,    0,  159,    0,   85,
    0,    0,  144,    0,    0,    0,  158,   74,    0,    0,
   60,   69,    0,   62,   64,    0,    0,    0,    0,    0,
  141,    0,    0,  135,    0,    0,    0,    0,    0,   91,
   84,  133,    0,    0,    0,    0,   67,    0,    0,  145,
    0,  119,    0,    0,    0,    0,    0,  136,    0,    0,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,  146,  147,    0,   93,    0,  119,    0,    0,
   66,    0,  120,  121,    0,    0,    0,    0,  175,  160,
   92,    0,    0,  140,  100,  122,    0,    0,    0,  128,
   99,    0,    0,    0,  142,  130,
};
static int yydgoto[] = {                                      34,
   35,  115,   37,   94,   38,   39,   40,   41,  327,  273,
   42,   43,   44,   45,   46,  187,  220,   47,   48,  188,
   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   65,   66,   67,  170,
   68,  267,  268,  318,   69,   70,  409,   71,  306,  346,
  152,  125,   72,   73,   74,   75,   76,   77,  263,  370,
  260,  315,  395,  378,  430,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0, -132,    0,    0,    0,    0,
    0,    0,  -44,  -44,  -61,    0,    0,    0,    0, -220,
 -190, 2130, 2080,  715,  285,    0, 2080, 2080, 2080, 2080,
 2080, 2201, 2080,    0,  426, -171,    4,    0,    0,    0,
    0,    0,  -44,  242,  103,    0,  158,    0,  286,  111,
    0, 1914,    0,    0,    0, 2963,    0,    0,  -18,    0,
    0,  334,    0,    0,   12,    0,    0,    0,  380,    0,
   48,    0,    0,    0,    0,    0,    0,    0,  -44,  -44,
  -44,  -91,    0,    0,  128,  162, -149,    0,  426,  210,
  380,  216,   31,  179,    0,    0,    0,    0,    0,    0,
   54,    0,    0,   88,   99,  106, -230,  119,  120,  130,
    0,  134,    0, 2080,  143,    0,  311,    0,    0,   78,
   78,   78, 1491, 3173,    8,    0,   78,   78,    0,  379,
    0, -149,   96,    0,    0,   37,  -29,  -86, 2080,    0,
    0,    0,    0,    0,  166,    0,    0,  366,  371,  422,
    0,    0,  410,  431, 1794, 2080, 2106, 2080, 2080, 2080,
 2080, 2080, 1442, 2080,    0,    0,    0,    0,  237,  -11,
    0,    0,    0,  110,  -48,    0,  -44,    0,  245, -149,
    0,    0,  260,  -44,  464,    0,    0,  174,    0,  -44,
    0,  379,    0,  497,  -44,   20,    0, 1363,  513,    0,
  308,    0,    0,    0,    0,    0,    0,    0, 2080,    0,
 2080,    0,  522,  319,  -44,  546,    0,    0,    0,  538,
    0,  -44,  143,    0,  143, 2112,    0, 3173,  497,  497,
    0,    0,    0,    0, 2080, 2080, 2080,  949,  977, 2080,
  977,   26,   26,  114,  114,   78,    0,  204, 2988, 1423,
  551,  346,    0, 1517,  552,  -30,    0,  497,  -67,  564,
  603,    0,  607,    0,    0,    0,  610,  618,  -28,    0,
    0,  -44,  265,    0,  630,    0,    0,    0,    0,    0,
    0, 3173,    0,  640,  -36,  319,  -77,    0,  143,    0,
 2998,  610,  610,   26,   26,  949,   78,    0,    0,    0,
 2080,  656, 1606,    0,  416,   17,    0,  610, 2157,    0,
    0,  668,  -44,    0,  663,    0,  679,  461,    0,    0,
  300,   -2,  664,  706,    0,  671,    0,    0,    0,    0,
  670,  480,    0,  696,    0,  486,    0, -149, -149, 3023,
 2080,    0,    0,    0,    0,  -44,  416,    0,  -59,    0,
 3112,  317,    0,  -34,  518,  703,    0,    0,  324,  692,
    0,    0, 2080,    0,    0,  496,  721,  523,  506,  728,
    0,  -44,  -44,    0, 3055,  143,  -44,    0, 2176,    0,
    0,    0,    0,  711,  653,  734,    0,  337, 3173,    0,
  762,    0,  771,    0,  776, -166, -166,    0,  143, 1671,
 -149, 3138,  529,   29,    0,    0,  765,    0,   49,  779,
  534,  787,    0,    0,  773,    0, -149,    0,    0, 1715,
    0,  536,    0,    0,  576,    0,  711,  719,    0,    0,
    0,   49, 1760,    0,    0,    0,  544,   32,    0,    0,
    0,    0, 1811, 1868,    0,    0,
};
static int yyrindex[] = {                                     18,
 1721,    0,    0,    0,  247,  720,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1479,  463,
 1113,    0,    0,    0, 2805,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  569, 2340,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  844,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,    0,    0,    0,    0,    0,    0,  727,
  500,    0,    0,    0,    0,    0,  590,    0,    0,    0,
    0,    0,    0,  -24, 1067,    0,  569,    0,  569,    0,
    0,  722,    0,    0, 1086, 1097, 1264, 2250, 1429,  -66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2498,  -25,    0,  278, 1304,  611,
 2533, 2555,    0,   19,    0, 2896, 2590, 2600,    0,  596,
    0,  569,    0,  247,    0,    0,    0,  234,    0,   13,
    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -66,    0,    0,    0,    0,
  -66,    0, 1392,    0,    0,  621,    0,  475,    0,  569,
    0,  -17,    0,  554,  558,    0,    0,    0,    0,    0,
    0,    0,    0,  -26,    0,    0,    0,    0,    0,    0,
  516,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  804,    0,    0, 3148, 2442,    0,    0,
    0,    0,  398,    0,  412,    0,    0,  170,   70,   70,
    0,    0,    0,    0,    0,    0,    0, 1710,   -5,    0,
 2866, 2060, 2728, 2715, 2750, 2625,    0,    0,    0,    0,
    0,    0,  -66,    0,  -14,    0,    0, 1769,  234,    0,
    0,  596,    0,    0,  266,    0,  616, 2005,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2208,   75,    0,    0,    0,  804,    0,    0,  568,    0,
    0,  -20,  -20, 2861, 2874, 2263, 2693,    0,    0,    0,
    0,    0,    0,    0,  118,    0,    0, 2183,    0,    0,
  -24,    0,    0,  -24,    0,    0, 2350,    0,    0,    0,
    0,    0,  339,    0,   23,    0,    0,    0,    0,  -22,
    0,    0,  -24,    0,    0,    0,    0,  137,  137,    0,
    0,    0,    0,    0,    0,    0,  118,    0,  142,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   45,    0,  -66,    0,    0,
    0,    0,  -24,   40,    0,    0,    0,    0,  761,    0,
    0,    0,    0,  -24,    0,  287,  287,    0,   71,    0,
  142,    0,    0,    0,  -66,    0,    0,  -24,   64,    0,
    0,    0,    0,    0,  239,    0,  142,    0,  -66,    0,
    0,    0,    0,    0,    0,  -24,   40,    0,    0,    0,
    0,   72,    0,    0,    0,    0,    0,    0,  -66,    0,
    0,  -66,    0,    0,    0,    0,
};
static int yycindex[] = {                                    635,
  421,    0,    0,    0, 1994,    0,  176,  190,  193,    0,
    0,    0,    0,    0,    0,    0,    0, 1116,  741,    0,
    0,    0,    0,    0,   84,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  283,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2424,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  197,    0, 2088,
  624,    0,    0,    0,    0,    0,  575,    0,    0,    0,
    0,    0,    0, 2006,  612,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  613,  615,  620,  639,  643,  681,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3205,    0, 3231, 3241,   79,
  571,  574,    0,    0,    0,  867,  604,  614,    0,  627,
    0,    0,    0, 2173,    0,    0,    0,    0,    0,  642,
    0,    0,  645,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  785,    0,    0,    0,    0,
  885,    0,  658,    0,    0,  647,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3079,    0,    0,
  217,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  659,  661,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  619,  637,    0,
  662,  687,  690,  712,  713,  732,    0,    0,    0, 3113,
    0,    0,  948, 3139,    0,    0,    0,    0,    0,    0,
    0,  678,    0,    0, 3321,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3266,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  748,  749,  760,  769,    0,    0,    0,
    0,    0, 3165,    0,    0,    0,    0,    0,    0,    0,
 3324,    0,    0, 3342,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  273,    0,    0,    0,    0,  636,
    0,    0, 3354,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  993,    0,    0,
    0,    0, 3372,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3375,    0,    0,    0,    0,    0, 3191,
    0,    0,    0,    0, 1052,    0,    0, 3393,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1156, 3217,
    0,    0,    0,    0,    0, 3405,    0,    0,    0,    0,
    0,    0, 3243,    0,    0,    0,    0,    0, 1243,    0,
    0, 1319, 3269, 3295,    0,    0,
};
static int yygindex[] = {                                      0,
   43,    1,  107,    0,   35,    0,    0,    0,  628, -212,
    0,   58,    6,  -84,    0,  689,    0,    0,    0, -237,
    0,    0,    0,   53,    0,    0, -223,  458,    0,   22,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -226,
    0,   68,  907,  -83,   21,    2,  537,   62,    0,  617,
    0,  794,    0,    0,    0,   27,    0,   77,    0,    0,
    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 3686
static int yytable[] = {                                     186,
   36,   85,   87,  333,  226,  383,   86,   95,   96,   97,
  257,  152,  224,   98,   99,  210,  103,    2,  210,  103,
   50,   59,  127,  309,   50,   91,   90,  203,  307,  161,
  320,  379,  252,  210,  183,  194,  131,  194,  194,  194,
  167,  136,   50,  138,   50,  135,  204,   89,  336,  328,
  123,  211,   36,  194,  123,  194,  362,  321,    2,  182,
  347,  100,  182,  160,  102,  163,   63,  210,  175,   85,
  172,  162,  252,  352,  222,  252,  355,  272,  271,   95,
   96,   97,   98,  134,   85,   87,  151,  194,  162,  185,
  131,   85,  130,  103,  319,  368,  132,  328,  133,  210,
   36,  328,   59,  190,  166,  189,  359,  152,  161,  425,
  174,  253,   16,  180,  163,  183,  164,  163,  183,  194,
  361,  197,  102,  200,   92,  194,   89,  177,  191,   16,
  101,   93,  212,  218,  171,  328,  223,  225,  411,  348,
  414,  184,  270,  182,  177,  403,  192,   63,  388,  161,
  132,  419,  198,  163,  442,  221,  411,  404,  227,  162,
  229,  142,  134,  230,  328,  182,   36,  162,  164,  147,
  422,   36,  215,  179,  256,  176,   89,  259,   13,  335,
  186,  123,  123,  190,  138,  123,  102,  134,  437,  216,
  218,  219,   16,  163,  101,  269,  258,  194,   36,  183,
  438,  143,  190,  123,  164,    2,    2,    2,  338,  339,
   81,   16,   78,   81,  266,  285,  144,  265,  250,   16,
  191,  190,  289,  254,  349,   13,  186,   78,   81,  186,
  152,  210,  151,  190,   59,  190,  156,  262,  174,  190,
   13,  190,  210,  210,  298,   59,   59,  211,  186,  156,
   36,  194,   50,   36,   36,   50,  284,  176,  156,  176,
  176,  210,  194,  194,   59,   85,   87,  190,  193,  123,
  185,  174,  322,  195,  123,  210,  174,  123,  174,  310,
  174,  194,  123,  174,  151,  140,  189,  196,  151,    2,
    2,    2,  123,   78,  123,  194,  292,  293,  186,  329,
  141,  197,  139,   36,  313,  303,   13,   89,  325,  186,
  199,   85,   87,  354,   85,   87,  185,   33,  211,  185,
  205,  211,  184,  186,  205,  308,  152,  423,  334,  145,
  123,  424,  189,   85,   87,  189,  211,  151,  185,  152,
  188,  186,  203,  325,  146,  123,  376,  329,  152,  330,
  200,  329,  217,   89,  189,  201,   89,  382,  372,  373,
  265,  174,  202,  174,  174,   13,  255,  325,  184,  380,
  211,  184,  396,  397,  164,   89,  206,  399,   36,   13,
  325,  205,   55,   85,   87,  329,  207,  164,  185,  326,
  184,  169,  168,  123,   85,   87,  208,  330,  123,  185,
   36,  330,  211,  209,  189,   36,  123,   31,   85,   87,
  114,  123,  190,  185,  329,  189,  413,  414,  214,   36,
   36,  416,  231,  232,  360,   89,   85,   87,  233,  189,
  400,  185,  164,   36,  151,  330,   89,  431,   89,   36,
  184,   89,   36,   36,   36,  167,  170,  189,  386,  176,
   89,  184,   88,  248,  151,   88,   89,  420,   89,  173,
  151,  407,  179,   55,  330,  184,  251,  151,   89,  235,
   88,  433,   88,  453,  456,  459,  462,  151,  151,  234,
  116,  118,  119,  184,  120,  121,  122,  123,  124,  127,
  128,  443,  236,  251,  444,  174,  174,  174,  174,  174,
  174,  261,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  132,   33,  264,  174,  174,  174,
  174,  323,  174,  174,  139,  174,  176,  176,  176,  579,
  176,  176,   11,   12,  211,  174,  174,  174,  135,  174,
  582,  585,    2,    3,    4,  211,  211,  176,   33,  176,
  176,  324,  275,   33,   13,   33,  323,   33,  384,  588,
   33,  265,  283,  392,  211,   26,  265,   11,   12,  418,
  280,  127,  265,  591,  427,   88,  435,  265,  211,  265,
  323,   23,   24,   25,  441,  286,  324,  265,  113,   29,
  301,   11,   12,  323,  108,   55,  228,  108,  107,  288,
   26,  107,  302,  311,   11,   12,   55,   55,   90,  305,
  324,   90,  238,  239,  241,  242,  243,  244,  245,  246,
  124,  249,   29,  324,   26,   55,   90,   29,   90,   29,
  417,   29,  420,  423,   29,  426,   78,   26,   33,   55,
   33,   33,  312,   79,   80,   81,  314,  317,  189,   13,
   14,  189,  189,  189,  189,  189,  189,  189,  123,  224,
  123,  123,  123,  432,  123,  435,  281,  114,  282,  189,
  331,  189,  102,  438,  105,  441,   99,  117,  471,   96,
  474,  332,  123,  291,  121,  125,  129,  343,  344,  345,
  133,  138,  294,  295,  296,  341,  477,  297,  480,  142,
  145,  148,  356,  189,   16,   17,   18,  129,  353,   20,
   21,  123,   29,  114,   29,   29,  357,  358,  102,  113,
  105,  483,   99,  486,  363,   96,  113,  113,  113,  365,
  366,  177,  113,  113,  189,  189,  367,  369,  177,  177,
  177,  113,  371,  385,  177,  177,  489,   33,  492,  495,
  387,  498,   29,  177,   30,  390,   28,  108,  340,   27,
  111,  391,  393,  176,  176,  176,  351,  394,  169,  176,
  176,  501,  507,  504,  510,  405,   33,   33,  176,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,  513,  406,  516,   33,   33,   33,   33,  375,   33,
   33,  408,   33,  108,   56,  117,  111,  555,  561,  558,
  564,  410,   33,   33,   33,  412,   33,  114,  426,  567,
  389,  570,  102,  421,  105,  123,   99,  428,  573,   96,
  576,  429,  123,  123,  123,  436,  402,   31,  123,  123,
  114,  439,   53,    1,   54,  176,   29,   29,   29,   29,
   29,   29,  112,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,  176,  185,  189,   29,   29,
   29,   29,  156,   29,   29,  263,   29,  123,  189,  189,
  260,  285,  288,  444,  291,   56,   29,   29,   29,  294,
  123,    0,    5,    8,   11,   14,   17,  189,   20,   25,
   30,   35,   38,   41,   44,   49,  429,  108,  297,   54,
  111,  189,  300,   57,   61,   65,   69,  114,   73,   77,
  447,   81,  102,  447,  105,  447,   99,  449,  465,   96,
  468,   84,   87,   90,  444,   93,  594,    0,    5,    8,
   11,   14,   17,  137,   20,   25,   30,   35,   38,   41,
   44,   49,  364,  316,  432,   54,  248,    0,    0,   57,
   61,   65,   69,  377,   73,   77,    0,   81,    0,    0,
    0,   78,    2,    3,    4,    0,    0,   84,   87,   90,
  114,   93,    0,    0,   13,  102,  160,  105,  163,   99,
  158,  156,   96,  157,  162,  159,  108,  109,  110,  111,
  112,  113,    0,    0,    0,    0,    0,  108,    0,  155,
  111,   23,   24,   25,  160,    0,  163,   56,  158,    0,
    0,    0,  162,  159,    0,  114,    0,    0,   56,   56,
  102,    0,  105,    0,   99,    0,    0,   96,    0,  164,
    0,    0,    5,    8,   11,   14,   17,   56,   20,   25,
   30,   35,   38,   41,   44,   49,    0,    0,    0,   54,
    0,   56,    0,   57,   61,   65,   69,  164,   73,   77,
  108,   81,  161,  111,    0,    0,    0,    0,    0,    0,
    0,   84,   87,   90,  114,   93,    0,    0,    0,  102,
    0,  105,    0,   99,    0,    0,   96,    0,    0,    0,
  161,    0,    0,    0,   75,    0,   75,   75,   75,    0,
   75,    0,    0,    0,    0,  108,    0,    0,  111,    0,
    0,    0,    0,   77,    0,   77,   77,   77,   75,   77,
    0,    0,    0,    0,   78,    0,   78,   78,   78,    0,
   78,    0,    5,    8,   11,   14,   17,   77,   20,   25,
   30,   35,   38,   41,   44,   49,    0,   75,   78,   54,
    0,    0,    0,   57,   61,   65,   69,    0,   73,   77,
    0,   81,    0,    0,  108,    0,   77,  111,    0,    0,
    0,   84,   87,   90,    0,   93,    0,   78,  114,    0,
    0,    0,    0,  102,    0,  105,    0,   99,    0,    0,
   96,    0,    0,    0,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,    0,   54,    0,    0,    0,   57,   61,   65,   69,
    0,   73,   77,    0,   81,    0,    0,    0,  116,    0,
    0,  181,    0,    0,   84,   87,   90,    0,   93,    0,
    5,    8,   11,   14,   17,    0,   20,   25,   30,   35,
   38,   41,   44,   49,    0,    0,    0,   54,    0,    0,
    0,   57,   61,   65,   69,  114,   73,   77,  108,   81,
  102,  111,  105,    0,   99,    0,    0,   96,    0,   84,
   87,   90,    0,   93,    0,    0,    0,    0,    0,    0,
    0,   79,    0,   79,   79,   79,    0,   79,    0,    5,
    8,   11,   14,   17,    0,   20,   25,   30,   35,   38,
   41,   44,   49,   75,    0,   79,   54,    0,    0,    0,
   57,   61,   65,   69,    0,   73,   77,    0,   81,    0,
    0,    0,   77,    0,  213,   75,    0,  213,   84,   87,
   90,  114,   93,   78,   79,    0,  102,    0,  105,    0,
   99,    0,  213,   96,   77,  108,    0,    0,  111,  116,
    0,    0,  181,    0,    0,   78,  116,  116,  116,  181,
  181,  181,  116,  116,    0,  181,  181,    0,    0,    0,
    0,  116,    0,    0,  181,   33,  213,    0,    0,    0,
   29,    0,   30,    0,   28,    0,    0,   27,    0,    0,
    0,    0,    0,    5,    8,   11,   14,   17,    0,   20,
   25,   30,   35,   38,   41,   44,   49,    0,  213,   50,
   54,    0,    0,   50,   57,   61,   65,   69,    0,   73,
   77,  108,   81,    0,  111,    0,    0,    0,    0,    0,
   50,   50,   84,   87,   90,   33,   93,    0,    0,    0,
   29,    0,   30,    0,   28,    0,   76,   27,   76,   76,
   76,    0,   76,    0,   33,    0,    0,    0,    0,   29,
    0,   30,  247,   28,    0,   31,   27,  274,   32,    0,
   76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    5,    8,   11,   14,   17,    0,   20,   25,   30,   35,
   38,   41,   44,   49,    0,    0,    0,   54,    0,   76,
   79,   57,   61,   65,   69,    0,   73,   77,  160,   81,
  163,  210,  158,  156,    0,  157,  162,  159,    0,   84,
   87,   90,   79,   93,    0,   31,    0,  300,   32,   33,
  153,  155,  154,    0,   29,    0,   30,    0,   28,    0,
  213,   27,    0,    0,   31,    0,    0,  114,    0,    0,
    0,  213,  213,    0,    0,    0,    5,    8,   11,   14,
   17,  164,   20,   25,   30,   35,   38,   41,   44,   49,
  213,    0,    0,   54,    0,    0,    0,   57,   61,   65,
   69,    0,   73,   77,  213,   81,    0,    0,    0,    0,
    0,    0,    0,    0,  161,   84,   87,   90,    0,   93,
    2,    3,    4,    5,    6,    0,    0,    0,    0,   10,
   11,   12,    0,    0,  148,  149,  150,   15,   33,   31,
    0,  304,   32,   29,    0,   30,    0,   28,  177,   22,
   27,    0,    0,    0,    0,  177,  177,  177,    0,   23,
   24,   25,  177,   26,    0,    0,    0,    0,    0,    0,
  177,  177,  177,  177,    0,  177,  177,    0,    0,    0,
    2,    3,    4,    5,    6,   76,    0,    0,    0,   10,
   11,   12,    0,    0,  148,  149,  150,   15,   78,    2,
    3,    4,    0,   33,    0,    0,    0,   76,   29,   22,
   30,   13,   28,    0,    0,   27,    0,    0,    0,   23,
   24,   25,    0,   26,    0,    0,    0,    0,   31,    0,
  342,   32,    0,    0,    0,  114,    0,    0,   23,   24,
   25,    0,  114,  114,  114,    0,    0,   33,  114,  114,
  200,    0,   29,  200,   30,    0,   28,  114,   50,   27,
    0,    0,   50,   50,    0,   50,   50,   50,  200,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    6,   50,
   50,   50,   50,   10,   11,   12,    0,    0,  148,  149,
  150,   15,   33,   31,    0,  415,   32,   29,    0,   30,
    0,   28,  200,   22,   27,    0,  152,    0,  152,  152,
    0,   50,  152,   23,   24,   25,    0,   26,    0,    0,
    0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
  152,   29,    0,   30,  200,   28,    0,   31,   27,  434,
   32,    0,    0,   33,   50,    0,    0,    0,   29,    0,
   30,    0,   28,    0,  237,   27,    0,    0,    0,  152,
    0,    0,    0,    2,    3,    4,    5,    6,    0,    0,
    0,    0,   10,   11,   12,    0,    0,  148,  149,  150,
   15,    0,   31,    0,  440,   32,    0,    0,    0,    0,
    0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
   33,    0,   23,   24,   25,   29,   26,   30,    0,   28,
    0,    0,   27,    0,    0,    0,   31,    0,    0,  114,
    0,    0,    0,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    6,   31,    0,  445,   32,   10,   11,   12,
    0,    0,  148,  149,  150,   15,   33,    0,    0,    0,
    0,   29,    0,   30,    0,   28,    0,   22,   27,    0,
    0,    0,    0,    0,    0,    0,  200,   23,   24,   25,
    0,   26,    2,    3,    4,    5,    6,  200,  200,    0,
    0,   10,   11,   12,    0,    0,  148,  149,  150,   15,
   31,    0,  446,   32,    0,    0,  200,    0,    0,    0,
    0,   22,  177,    0,  177,  177,    0,    0,    0,    0,
  200,   23,   24,   25,    0,   26,    0,    2,    3,    4,
    5,    6,    0,    0,    0,  152,   10,   11,   12,    0,
    0,  148,  149,  150,   15,    0,   31,    0,  152,   32,
    0,    0,  153,    0,  153,  153,   22,  152,  153,    0,
   78,    2,    3,    4,    0,    0,   23,   24,   25,    0,
   26,    0,    0,   13,    0,    0,  153,    0,    2,    3,
    4,    5,    6,    0,    0,    0,    0,   10,   11,   12,
    0,    0,  148,  149,  150,   15,    0,    0,    0,    0,
   23,   24,   25,    0,    0,  153,    0,   22,    0,    0,
  196,  196,  196,  196,  196,    0,  196,   23,   24,   25,
    0,   26,   33,    0,    0,    0,    0,   29,  196,   30,
  196,   28,    0,    0,   27,    2,    3,    4,    5,    6,
    0,    0,    0,    0,   10,   11,   12,    0,   33,  148,
  149,  150,   15,   29,   33,   30,    0,   28,    0,   29,
   27,   30,  196,   28,   22,    0,   27,    0,    0,    0,
    0,    0,    0,    0,   23,   24,   25,  240,   26,    0,
    0,    2,    3,    4,    5,    6,    0,    0,    0,    0,
   10,   11,   12,    0,  196,  148,  149,  150,   15,   33,
    0,    0,    0,    0,   29,    0,   30,    0,   28,    0,
   22,   27,   31,    0,  290,  114,    0,    0,   33,    0,
   23,   24,   25,   29,   26,   30,    0,   28,    0,    0,
   27,    0,  156,  156,    0,    0,  156,    0,   31,    0,
    0,  114,    0,   33,   31,    0,    0,  114,   29,    0,
   30,    0,   28,    0,  156,   27,    0,    0,  212,  350,
  154,  212,    0,    0,    0,    0,    0,  157,  157,  157,
    0,  153,  266,  157,  157,    0,  212,    0,  401,  270,
  274,  278,  161,  156,  153,  225,  229,    0,    0,   31,
    0,    0,  114,  153,  161,  233,  282,   51,    0,   51,
   51,   51,   51,   51,   51,   51,   51,    0,   31,    0,
  212,  114,    0,  202,    0,    0,  202,    0,   51,   51,
   51,   51,    0,    0,    0,    0,  196,    0,    0,    0,
    0,  202,    0,   31,    0,    0,  114,  196,  196,    0,
    0,    0,  212,    0,    0,    0,   78,    2,    3,    4,
   51,    0,   51,    0,  253,    0,  196,    0,    0,   13,
    0,  253,  253,  253,    0,  202,    0,  253,  253,    0,
  196,    0,   78,    2,    3,    4,  257,    0,   78,    2,
    3,    4,   51,   51,   51,   13,   23,   24,   25,  187,
    0,   13,  187,    0,  187,  187,  187,  202,    0,  157,
  157,    0,    0,  157,    0,    0,    0,    0,  187,    0,
  187,  187,   23,   24,   25,    0,    0,  104,   23,   24,
   25,  157,    0,   78,    2,    3,    4,  105,  106,  107,
  108,  109,  110,  111,  112,  113,   13,    0,    0,  154,
  187,    0,   78,    2,    3,    4,  157,  157,  157,  156,
  157,    0,  157,  157,    0,   13,    0,    0,    0,    0,
    0,  161,  156,   23,   24,   25,    0,  126,    2,    3,
    4,  156,    0,  187,  212,    0,    0,    0,    0,    0,
   13,    0,   23,   24,   25,  212,  212,    0,    0,   52,
    0,   52,   52,   52,   52,   52,   52,   52,   52,    0,
    0,    0,    0,    0,  212,    0,    0,   23,   24,   25,
   52,   52,   52,   52,    0,    0,   51,    0,  212,    0,
    0,    0,    0,    0,    0,    0,    0,   51,   51,  202,
    0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
  202,  202,   52,    0,   52,  187,   51,  187,  187,  187,
  187,  187,  187,  187,  187,    0,    0,    0,    0,  202,
   51,    0,    0,    0,    0,    0,  187,  187,  187,  187,
    0,    0,    0,  202,   52,   52,   52,    0,    0,    0,
  192,    0,    0,  192,  192,  192,  192,  192,  192,  192,
    0,    0,    0,    0,    0,    0,    0,    0,  187,    0,
  187,  192,  193,  192,    0,  193,  193,  193,  193,  193,
  193,  193,    0,    0,    0,    0,  157,    0,    0,    0,
    0,    0,    0,  193,    0,  193,    0,    0,    0,  157,
    0,  187,  187,    0,    0,  192,    0,  190,  157,    0,
  190,  190,  190,  190,  190,  190,  190,  191,    0,    0,
  191,  191,  191,  191,  191,  191,  191,  193,  190,    0,
  190,    0,    0,    0,    0,    0,  192,  192,  191,    0,
  191,    0,  206,    0,    0,  206,  206,  206,  206,  206,
  206,  206,    0,    0,    0,    0,    0,    0,  193,  193,
  209,    0,  190,  206,    0,  206,    0,  213,  217,  221,
    0,    0,  191,  225,  229,    0,    0,    0,   52,    0,
    0,    0,  161,  233,  236,  239,    0,  242,  245,   52,
   52,    0,    0,  190,  190,    0,    0,  206,    0,    0,
   52,    0,    0,  191,  191,    0,    0,    0,   52,    0,
  205,    0,    0,  205,  205,  205,  205,  205,  205,  205,
    0,    0,   52,    0,    0,    0,    0,    0,  206,  206,
    0,  205,  198,  205,  187,  198,  198,  198,  198,  198,
    0,  198,    0,    0,    0,  187,  187,    0,  197,  197,
  197,  197,  197,  198,  197,  198,    0,    0,    0,    0,
    0,    0,    0,    0,  187,  205,  197,  199,  197,  192,
  199,  199,  199,  199,  199,    0,  199,    0,  187,    0,
  192,  192,    0,    0,    0,    0,    0,  198,  199,    0,
  199,  193,    0,    0,    0,    0,  205,  205,    0,  192,
  197,    0,  193,  193,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  192,    0,    0,    0,    0,  198,  198,
    0,  193,  199,    0,    0,  214,  190,  214,  214,    0,
  214,  214,  197,    0,    0,  193,  191,  190,  190,    0,
    0,    0,    0,  214,  214,  214,  214,  191,  191,    0,
    0,    0,    0,  199,  199,    0,  190,    0,    0,    0,
    0,  206,    0,    0,    0,    0,  191,    0,    0,    0,
  190,    0,  206,  206,    0,  214,    0,  214,    0,    0,
  191,  203,  203,  203,  203,  203,  195,  203,  195,  195,
  195,  206,    0,    0,  204,  204,  204,  204,  204,  203,
  204,  203,    0,    0,  195,  206,  195,    0,  214,  214,
    0,    0,  204,   50,  204,    0,    0,   50,   50,    0,
   50,   50,   50,    0,    0,    0,    0,    0,    0,  205,
    0,    0,    0,  203,   50,   50,   50,   50,  195,    0,
  205,  205,    0,    0,    0,    0,  204,    0,    0,    0,
    0,  198,    0,    0,    0,    0,    0,    0,    0,  205,
    0,    0,  198,  198,  197,  203,   50,    0,    0,    0,
  195,    0,    0,  205,    0,  197,  197,    0,  204,    0,
  160,  198,  163,    0,  158,  156,  199,  157,  162,  159,
    0,    0,    0,    0,  197,  198,    0,  199,  199,   50,
    0,  165,  153,  155,  154,  160,    0,  163,  197,  158,
  156,    0,  157,  162,  159,  160,  199,  163,    0,  158,
  156,    0,  157,  162,  159,    0,    0,  153,  155,  154,
  199,    0,    0,  164,    0,    0,    0,  153,  155,  154,
  160,    0,  163,  374,  158,  156,    0,  157,  162,  159,
    0,    0,  214,  214,    0,    0,    0,    0,  164,    0,
  299,    0,  153,  155,  154,    0,  161,    0,  164,    0,
  337,  214,  160,    0,  163,  398,  158,  156,    0,  157,
  162,  159,    0,    0,    0,  214,    0,    0,    0,    0,
    0,  161,    0,  164,  153,  155,  154,  203,    0,    0,
    0,  161,  195,    0,    0,    0,    0,    0,  203,  203,
  204,    0,    0,  195,  195,    0,    0,    0,    0,    0,
    0,  204,  204,    0,    0,  164,  161,  203,    0,  160,
    0,  163,  195,  158,  156,    0,  157,  162,  159,    0,
  204,  203,    0,    0,    0,   50,  195,    0,    0,    0,
    0,  153,  155,  154,  204,  160,    0,  163,  161,  158,
  156,    0,  157,  162,  159,   50,    0,   50,    0,   50,
   50,    0,   50,   50,   50,    0,    0,  153,  155,  154,
    0,    0,  164,    0,  381,    0,   50,   50,   50,   50,
  160,    0,  163,    0,  158,  156,    0,  157,  162,  159,
    0,    0,    0,    0,    0,    0,    0,    0,  164,    0,
  417,    0,  153,  155,  154,  161,    0,    0,   50,    0,
    0,    0,  324,    0,  333,    0,  318,  312,    0,  315,
  330,  321,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  161,    0,  164,  303,  309,  306,    0,  360,    0,
  369,   50,  354,  348,    0,  351,  366,  357,  396,    0,
  405,    0,  390,  384,    0,  387,  402,  393,    0,    0,
  339,  345,  342,    0,    0,  336,  161,    0,    0,    0,
  375,  381,  378,  540,    0,  549,    0,  534,  528,    0,
  531,  546,  537,    0,    0,    0,    0,    0,    0,    0,
    0,  372,    0,    0,    0,  519,  525,  522,  327,    0,
    0,  408,    0,    0,    0,  209,    0,    0,    0,    0,
    0,    0,  213,  217,  221,    0,    0,    0,  225,  229,
    0,    0,    0,    0,  363,    0,  552,  161,  233,  236,
  239,    0,  242,  245,  399,    0,    0,    0,    0,  209,
    0,    0,    0,    0,    0,    0,  213,  217,  221,    0,
    0,    0,  225,  229,    0,    0,    0,    0,    0,  543,
    0,  161,  233,  236,  239,  209,  242,  245,    0,    0,
    0,    0,  213,  217,  221,    0,    0,    0,  225,  229,
    0,    0,    0,    0,    0,    0,    0,  161,  233,  236,
  239,  209,  242,  245,    0,    0,    0,    0,  213,  217,
  221,    0,    0,    0,  225,  229,    0,    0,    0,    0,
    0,    0,    0,  161,  233,  236,  239,  209,  242,  245,
    0,    0,    0,    0,  213,  217,  221,    0,    0,    0,
  225,  229,    0,    0,    0,    0,    0,    0,    0,  161,
  233,  236,  239,  209,  242,  245,    0,    0,    0,    0,
  213,  217,  221,    0,    0,    0,  225,  229,    0,    0,
    0,    0,    0,    0,    0,  161,  233,  236,  239,  209,
  242,  245,    0,    0,    0,    0,  213,  217,  221,    0,
    0,    0,  225,  229,    0,    0,    0,    0,    0,    0,
    0,  161,  233,  236,  239,  209,  242,  245,    0,    0,
    0,    0,  213,  217,  221,    0,    0,    0,  225,  229,
    0,    0,    0,    0,    0,    0,    0,  161,  233,  236,
  239,  209,  242,  245,    0,    0,    0,    0,  213,  217,
  221,    0,    0,    0,  225,  229,    0,    0,    0,    0,
    0,    0,    0,  161,  233,  236,  239,  266,  242,  245,
  266,    0,    0,    0,  270,  274,  278,  270,  274,  278,
  225,  229,    0,  225,  229,    0,    0,    0,  266,  161,
  233,  282,  161,  233,  282,  270,  274,  278,    0,    0,
  266,  225,  229,    0,    0,    0,    0,  270,  274,  278,
  161,  233,  282,  225,  229,    0,    0,    0,  266,    0,
    0,  266,  161,  233,  282,  270,  274,  278,  270,  274,
  278,  225,  229,    0,  225,  229,    0,    0,    0,  266,
  161,  233,  282,  161,  233,  282,  270,  274,  278,    0,
    0,  266,  225,  229,    0,    0,    0,    0,  270,  274,
  278,  161,  233,  282,  225,  229,    0,    0,    0,    0,
    0,    0,    0,  161,  233,  282,
};
static int yycheck[] = {                                      84,
    0,    1,    1,   40,   91,   40,    1,    7,    8,    9,
   59,   38,   42,   13,   14,   41,   41,    0,   44,   44,
   38,   44,   40,   91,   42,    5,    5,  258,   59,   44,
   59,   91,   44,   59,  126,   41,   35,   43,   44,   45,
   59,   38,   60,   43,   59,   42,  277,    5,  126,  273,
   38,   44,   52,   59,   42,   61,   59,  270,  125,   41,
   44,  123,   44,   38,  285,   40,   44,   93,   68,   69,
   59,   46,   44,  311,   38,   44,  314,   58,   59,   79,
   80,   81,   82,   44,   84,   84,   52,   93,   44,   84,
   89,   91,   35,  284,  123,  333,   35,  321,  270,  125,
  100,  325,  125,  270,  123,   84,  319,   38,  123,   61,
   68,  123,  279,   71,   44,   41,   91,   40,   44,  125,
  123,   38,   59,   40,  257,   42,   84,   70,   45,  279,
   59,  264,  125,  133,  123,  359,  136,  137,   60,  123,
   62,   84,  123,  125,   87,  383,   89,  125,  361,  124,
   89,  123,  100,   40,  123,  134,  394,  384,  138,   46,
  140,   59,  123,  143,  388,  257,  166,  123,   91,   59,
  408,  171,  130,  126,  174,   69,  134,  177,  270,  257,
  265,   40,   41,  270,  184,   44,  123,   60,  426,  132,
  190,  134,  279,  123,  123,  195,  176,   91,  198,  125,
  427,   44,  270,   62,   91,  272,  273,  274,  292,  293,
   41,  279,  257,   44,   41,  215,   59,   44,  166,  279,
   59,  270,  222,  171,  308,  270,  311,  257,   59,  314,
  257,  257,  198,  270,  257,  270,  257,  180,    0,  270,
  270,  270,  268,  269,   41,  268,  269,   44,  333,  270,
  250,  257,  270,  253,  254,  270,  214,  282,  279,  284,
  285,  287,  268,  269,  287,  265,  265,  270,   59,  257,
  265,   33,  272,   58,   41,  301,   38,   44,   40,  259,
   42,  287,  270,   45,  250,   44,  265,  257,  254,  272,
  273,  274,   59,  257,   61,  301,  229,  230,  383,  273,
   59,  123,   61,  303,  262,  253,  270,  265,   44,  394,
  257,  311,  311,  313,  314,  314,  311,   33,   41,  314,
   38,   44,  265,  408,   42,  258,  257,  279,  286,   44,
   44,  283,  311,  333,  333,  314,   59,  303,  333,  270,
  257,  426,   60,   44,   59,   59,  346,  321,  279,  273,
  263,  325,  257,  311,  333,  257,  314,   41,  338,  339,
   44,  123,  257,  125,  126,  270,  257,   44,  311,  349,
   93,  314,  372,  373,  257,  333,  257,  377,  378,  270,
   44,  263,   44,  383,  383,  359,  257,  270,  383,  125,
  333,   58,   59,  257,  394,  394,  263,  321,  257,  394,
  400,  325,  125,   93,  383,  405,  270,  123,  408,  408,
  126,  270,  270,  408,  388,  394,  396,  397,   40,  419,
  420,  401,  257,   58,  125,  383,  426,  426,   58,  408,
  378,  426,  257,  433,  400,  359,  394,  417,   41,  439,
  383,   44,  442,  443,  444,  270,  257,  426,  125,  257,
  408,  394,   41,  257,  420,   44,   59,  405,   61,  270,
   40,  125,  270,  125,  388,  408,  270,  433,  426,   60,
   59,  419,   61,  257,  258,  259,  260,  443,  444,   58,
   23,   24,   25,  426,   27,   28,   29,   30,   31,   32,
   33,  439,   62,  257,  442,  257,  258,  259,  260,  261,
  262,  257,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,   40,    0,  257,  279,  280,  281,
  282,  257,  284,  285,   61,  287,  280,  281,  282,  257,
  284,  285,  268,  269,  257,  297,  298,  299,   42,  301,
  268,  269,  258,  259,  260,  268,  269,  282,   33,  284,
  285,  287,   40,   38,  270,   40,  257,   42,   41,  287,
   45,   44,   41,   41,  287,  301,   44,  268,  269,   41,
  263,  114,   44,  301,   41,  257,   41,   44,  301,   44,
  257,  297,  298,  299,   41,   40,  287,   44,  126,    0,
   40,  268,  269,  257,   41,  257,  139,   44,   41,   62,
  301,   44,  257,   40,  268,  269,  268,  269,   41,   58,
  287,   44,  155,  156,  157,  158,  159,  160,  161,  162,
  163,  164,   33,  287,  301,  287,   59,   38,   61,   40,
   60,   42,   62,   60,   45,   62,  257,  301,  123,  301,
  125,  126,   40,  264,  265,  266,   40,   38,   38,  270,
  271,   41,   42,   43,   44,   45,   46,   47,   38,   42,
   40,   41,   42,   60,   44,   62,  209,   33,  211,   59,
   41,   61,   38,   60,   40,   62,   42,  257,   60,   45,
   62,   42,   62,  226,  264,  265,  266,  272,  273,  274,
  270,  271,  235,  236,  237,   40,   60,  240,   62,  279,
  280,  281,   40,   93,  279,  280,  281,  282,   41,  284,
  285,   91,  123,   33,  125,  126,   38,  257,   38,  257,
   40,   60,   42,   62,   61,   45,  264,  265,  266,   59,
   61,  257,  270,  271,  124,  125,  257,   42,  264,  265,
  266,  279,  257,   41,  270,  271,   60,   33,   62,   60,
   59,   62,   38,  279,   40,  260,   42,  123,  301,   45,
  126,   41,  257,  264,  265,  266,  309,   40,   58,  270,
  271,   60,   60,   62,   62,  123,  261,  262,  279,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,   60,   59,   62,  279,  280,  281,  282,  341,  284,
  285,   40,  287,  123,   44,   91,  126,   60,   60,   62,
   62,   41,  297,  298,  299,   40,  301,   33,   40,   60,
  363,   62,   38,   59,   40,  257,   42,   41,   60,   45,
   62,   59,  264,  265,  266,  260,  379,  123,  270,  271,
  126,  123,  123,    0,  123,   42,  257,  258,  259,  260,
  261,  262,  126,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  270,  126,  257,  279,  280,
  281,  282,  257,  284,  285,  301,  287,  257,  268,  269,
  257,  270,  270,  257,  270,  125,  297,  298,  299,  270,
  270,  257,  258,  259,  260,  261,  262,  287,  264,  265,
  266,  267,  268,  269,  270,  271,   40,  123,  270,  275,
  126,  301,  270,  279,  280,  281,  282,   33,  284,  285,
  279,  287,   38,  279,   40,  279,   42,  270,  270,   45,
  270,  297,  298,  299,  257,  301,  301,  257,  258,  259,
  260,  261,  262,   37,  264,  265,  266,  267,  268,  269,
  270,  271,  325,  265,  418,  275,  163,   -1,   -1,  279,
  280,  281,  282,  347,  284,  285,   -1,  287,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  297,  298,  299,
   33,  301,   -1,   -1,  270,   38,   38,   40,   40,   42,
   42,   43,   45,   45,   46,   47,  291,  292,  293,  294,
  295,  296,   -1,   -1,   -1,   -1,   -1,  123,   -1,   61,
  126,  297,  298,  299,   38,   -1,   40,  257,   42,   -1,
   -1,   -1,   46,   47,   -1,   33,   -1,   -1,  268,  269,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   91,
   -1,  257,  258,  259,  260,  261,  262,  287,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,  275,
   -1,  301,   -1,  279,  280,  281,  282,   91,  284,  285,
  123,  287,  124,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,  298,  299,   33,  301,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,
   44,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   38,   -1,   40,   41,   42,   62,   44,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,
   44,  257,  258,  259,  260,  261,  262,   62,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   91,   62,  275,
   -1,   -1,   -1,  279,  280,  281,  282,   -1,  284,  285,
   -1,  287,   -1,   -1,  123,   -1,   91,  126,   -1,   -1,
   -1,  297,  298,  299,   -1,  301,   -1,   91,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,  275,   -1,   -1,   -1,  279,  280,  281,  282,
   -1,  284,  285,   -1,  287,   -1,   -1,   -1,  126,   -1,
   -1,  126,   -1,   -1,  297,  298,  299,   -1,  301,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,  275,   -1,   -1,
   -1,  279,  280,  281,  282,   33,  284,  285,  123,  287,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,  297,
  298,  299,   -1,  301,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   40,   41,   42,   -1,   44,  257,  258,
  259,  260,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,  257,   -1,   62,  275,   -1,   -1,   -1,
  279,  280,  281,  282,   -1,  284,  285,   -1,  287,   -1,
   -1,   -1,  257,   -1,   41,  279,   -1,   44,  297,  298,
  299,   33,  301,  257,   91,   -1,   38,   -1,   40,   -1,
   42,   -1,   59,   45,  279,  123,   -1,   -1,  126,  257,
   -1,   -1,  257,   -1,   -1,  279,  264,  265,  266,  264,
  265,  266,  270,  271,   -1,  270,  271,   -1,   -1,   -1,
   -1,  279,   -1,   -1,  279,   33,   93,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  125,   38,
  275,   -1,   -1,   42,  279,  280,  281,  282,   -1,  284,
  285,  123,  287,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   59,   60,  297,  298,  299,   33,  301,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,   38,   45,   40,   41,
   42,   -1,   44,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   -1,  123,   45,  125,  126,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,  275,   -1,   91,
  257,  279,  280,  281,  282,   -1,  284,  285,   38,  287,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,  297,
  298,  299,  279,  301,   -1,  123,   -1,  125,  126,   33,
   60,   61,   62,   -1,   38,   -1,   40,   -1,   42,   -1,
  257,   45,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,  268,  269,   -1,   -1,  257,  258,  259,  260,  261,
  262,   91,  264,  265,  266,  267,  268,  269,  270,  271,
  287,   -1,   -1,  275,   -1,   -1,   -1,  279,  280,  281,
  282,   -1,  284,  285,  301,  287,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  297,  298,  299,   -1,  301,
  258,  259,  260,  261,  262,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,   33,  123,
   -1,  125,  126,   38,   -1,   40,   -1,   42,  257,  287,
   45,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,  297,
  298,  299,  271,  301,   -1,   -1,   -1,   -1,   -1,   -1,
  279,  280,  281,  282,   -1,  284,  285,   -1,   -1,   -1,
  258,  259,  260,  261,  262,  257,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  257,  258,
  259,  260,   -1,   33,   -1,   -1,   -1,  279,   38,  287,
   40,  270,   42,   -1,   -1,   45,   -1,   -1,   -1,  297,
  298,  299,   -1,  301,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   -1,   -1,   -1,  257,   -1,   -1,  297,  298,
  299,   -1,  264,  265,  266,   -1,   -1,   33,  270,  271,
   41,   -1,   38,   44,   40,   -1,   42,  279,   38,   45,
   -1,   -1,   42,   43,   -1,   45,   46,   47,   59,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,   59,
   60,   61,   62,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,   33,  123,   -1,  125,  126,   38,   -1,   40,
   -1,   42,   93,  287,   45,   -1,   38,   -1,   40,   41,
   -1,   91,   44,  297,  298,  299,   -1,  301,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   62,   38,   -1,   40,  125,   42,   -1,  123,   45,  125,
  126,   -1,   -1,   33,  124,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,   61,   45,   -1,   -1,   -1,   91,
   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,
  275,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,  297,  298,  299,   38,  301,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,  262,  123,   -1,  125,  126,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   -1,  287,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  297,  298,  299,
   -1,  301,  258,  259,  260,  261,  262,  268,  269,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,  275,
  123,   -1,  125,  126,   -1,   -1,  287,   -1,   -1,   -1,
   -1,  287,  282,   -1,  284,  285,   -1,   -1,   -1,   -1,
  301,  297,  298,  299,   -1,  301,   -1,  258,  259,  260,
  261,  262,   -1,   -1,   -1,  257,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,   -1,  123,   -1,  270,  126,
   -1,   -1,   38,   -1,   40,   41,  287,  279,   44,   -1,
  257,  258,  259,  260,   -1,   -1,  297,  298,  299,   -1,
  301,   -1,   -1,  270,   -1,   -1,   62,   -1,  258,  259,
  260,  261,  262,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,   -1,
  297,  298,  299,   -1,   -1,   91,   -1,  287,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,  297,  298,  299,
   -1,  301,   33,   -1,   -1,   -1,   -1,   38,   59,   40,
   61,   42,   -1,   -1,   45,  258,  259,  260,  261,  262,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   33,  272,
  273,  274,  275,   38,   33,   40,   -1,   42,   -1,   38,
   45,   40,   93,   42,  287,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  297,  298,  299,   62,  301,   -1,
   -1,  258,  259,  260,  261,  262,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,  125,  272,  273,  274,  275,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,
  287,   45,  123,   -1,   93,  126,   -1,   -1,   33,   -1,
  297,  298,  299,   38,  301,   40,   -1,   42,   -1,   -1,
   45,   -1,   40,   41,   -1,   -1,   44,   -1,  123,   -1,
   -1,  126,   -1,   33,  123,   -1,   -1,  126,   38,   -1,
   40,   -1,   42,   -1,   62,   45,   -1,   -1,   41,   93,
  257,   44,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,
   -1,  257,  257,  270,  271,   -1,   59,   -1,   93,  264,
  265,  266,  279,   91,  270,  270,  271,   -1,   -1,  123,
   -1,   -1,  126,  279,  279,  280,  281,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,  123,   -1,
   93,  126,   -1,   41,   -1,   -1,   44,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   59,   -1,  123,   -1,   -1,  126,  268,  269,   -1,
   -1,   -1,  125,   -1,   -1,   -1,  257,  258,  259,  260,
   91,   -1,   93,   -1,  257,   -1,  287,   -1,   -1,  270,
   -1,  264,  265,  266,   -1,   93,   -1,  270,  271,   -1,
  301,   -1,  257,  258,  259,  260,  279,   -1,  257,  258,
  259,  260,  123,  124,  125,  270,  297,  298,  299,   40,
   -1,  270,   43,   -1,   45,   46,   47,  125,   -1,   40,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   59,   -1,
   61,   62,  297,  298,  299,   -1,   -1,  278,  297,  298,
  299,   62,   -1,  257,  258,  259,  260,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  270,   -1,   -1,  257,
   91,   -1,  257,  258,  259,  260,  264,  265,  266,  257,
   91,   -1,  270,  271,   -1,  270,   -1,   -1,   -1,   -1,
   -1,  279,  270,  297,  298,  299,   -1,  257,  258,  259,
  260,  279,   -1,  124,  257,   -1,   -1,   -1,   -1,   -1,
  270,   -1,  297,  298,  299,  268,  269,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,  287,   -1,   -1,  297,  298,  299,
   59,   60,   61,   62,   -1,   -1,  257,   -1,  301,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  268,  269,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,
  268,  269,   91,   -1,   93,   38,  287,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,  287,
  301,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,  301,  123,  124,  125,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   59,   38,   61,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,  270,
   -1,  124,  125,   -1,   -1,   93,   -1,   38,  279,   -1,
   41,   42,   43,   44,   45,   46,   47,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   93,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,  124,  125,   59,   -1,
   61,   -1,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
  257,   -1,   93,   59,   -1,   61,   -1,  264,  265,  266,
   -1,   -1,   93,  270,  271,   -1,   -1,   -1,  257,   -1,
   -1,   -1,  279,  280,  281,  282,   -1,  284,  285,  268,
  269,   -1,   -1,  124,  125,   -1,   -1,   93,   -1,   -1,
  279,   -1,   -1,  124,  125,   -1,   -1,   -1,  287,   -1,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,  301,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   59,   38,   61,  257,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,  268,  269,   -1,   41,   42,
   43,   44,   45,   59,   47,   61,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  287,   93,   59,   38,   61,  257,
   41,   42,   43,   44,   45,   -1,   47,   -1,  301,   -1,
  268,  269,   -1,   -1,   -1,   -1,   -1,   93,   59,   -1,
   61,  257,   -1,   -1,   -1,   -1,  124,  125,   -1,  287,
   93,   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,  124,  125,
   -1,  287,   93,   -1,   -1,   41,  257,   43,   44,   -1,
   46,   47,  125,   -1,   -1,  301,  257,  268,  269,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,  268,  269,   -1,
   -1,   -1,   -1,  124,  125,   -1,  287,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,
  301,   -1,  268,  269,   -1,   91,   -1,   93,   -1,   -1,
  301,   41,   42,   43,   44,   45,   41,   47,   43,   44,
   45,  287,   -1,   -1,   41,   42,   43,   44,   45,   59,
   47,   61,   -1,   -1,   59,  301,   61,   -1,  124,  125,
   -1,   -1,   59,   38,   61,   -1,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   93,   59,   60,   61,   62,   93,   -1,
  268,  269,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,
   -1,   -1,  268,  269,  257,  125,   91,   -1,   -1,   -1,
  125,   -1,   -1,  301,   -1,  268,  269,   -1,  125,   -1,
   38,  287,   40,   -1,   42,   43,  257,   45,   46,   47,
   -1,   -1,   -1,   -1,  287,  301,   -1,  268,  269,  124,
   -1,   59,   60,   61,   62,   38,   -1,   40,  301,   42,
   43,   -1,   45,   46,   47,   38,  287,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   60,   61,   62,
  301,   -1,   -1,   91,   -1,   -1,   -1,   60,   61,   62,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   60,   61,   62,   -1,  124,   -1,   91,   -1,
   93,  287,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,  301,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   60,   61,   62,  257,   -1,   -1,
   -1,  124,  257,   -1,   -1,   -1,   -1,   -1,  268,  269,
  257,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,   -1,
   -1,  268,  269,   -1,   -1,   91,  124,  287,   -1,   38,
   -1,   40,  287,   42,   43,   -1,   45,   46,   47,   -1,
  287,  301,   -1,   -1,   -1,  270,  301,   -1,   -1,   -1,
   -1,   60,   61,   62,  301,   38,   -1,   40,  124,   42,
   43,   -1,   45,   46,   47,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   60,   61,   62,
   -1,   -1,   91,   -1,   93,   -1,   59,   60,   61,   62,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   -1,   60,   61,   62,  124,   -1,   -1,   91,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   60,   61,   62,   -1,   38,   -1,
   40,  124,   42,   43,   -1,   45,   46,   47,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   60,   61,   62,   -1,   -1,   91,  124,   -1,   -1,   -1,
   60,   61,   62,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   60,   61,   62,  124,   -1,
   -1,   91,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,  124,   -1,   91,  279,  280,  281,
  282,   -1,  284,  285,  124,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,  124,
   -1,  279,  280,  281,  282,  257,  284,  285,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
  282,  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,  257,  284,  285,
   -1,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,  282,  257,  284,  285,   -1,   -1,   -1,   -1,
  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  279,  280,  281,  282,  257,
  284,  285,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  279,  280,  281,  282,  257,  284,  285,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
  282,  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,  257,  284,  285,
  257,   -1,   -1,   -1,  264,  265,  266,  264,  265,  266,
  270,  271,   -1,  270,  271,   -1,   -1,   -1,  257,  279,
  280,  281,  279,  280,  281,  264,  265,  266,   -1,   -1,
  257,  270,  271,   -1,   -1,   -1,   -1,  264,  265,  266,
  279,  280,  281,  270,  271,   -1,   -1,   -1,  257,   -1,
   -1,  257,  279,  280,  281,  264,  265,  266,  264,  265,
  266,  270,  271,   -1,  270,  271,   -1,   -1,   -1,  257,
  279,  280,  281,  279,  280,  281,  264,  265,  266,   -1,
   -1,  257,  270,  271,   -1,   -1,   -1,   -1,  264,  265,
  266,  279,  280,  281,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,
};
static int yyctable[] = {                                      1,
    2,  123,  176,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,   -1,    7,
    2,  123,  176,   -1,    8,    2,  123,  176,   -1,    9,
    2,  123,  176,   -1,   10,    2,   -1,   11,    2,   -1,
   12,    2,   -1,   13,    2,  123,  176,   -1,   14,    2,
  123,  176,   -1,   15,    2,   -1,   16,    2,  176,   -1,
   17,    2,  176,   -1,   18,    2,  176,   -1,   19,    2,
  176,   -1,   20,    2,  176,   -1,   21,    2,  176,   -1,
   22,    2,   -1,   23,    2,   -1,   24,    2,   -1,   25,
    2,   -1,   26,    2,   -1,   27,    2,   -1,   28,    2,
   -1,   29,    2,   -1,   30,    2,   -1,   31,    2,   -1,
   32,    2,   -1,   33,    2,   -1,   78,  123,  177,   -1,
   79,  123,  177,   -1,   80,  123,  177,   -1,   81,  123,
  177,   -1,   82,   50,  123,  177,   -1,   14,  123,  177,
   -1,   16,  177,   -1,   17,  177,   -1,   83,  177,   -1,
   84,   50,   -1,   88,  123,  176,   -1,  123,  176,   -1,
   16,  176,   -1,   78,  170,   -1,   13,  170,   -1,   78,
  171,   -1,   13,  171,   -1,   78,  172,   -1,   13,  172,
   -1,   95,  115,   -1,  101,  114,   -1,   78,  214,   -1,
   27,  214,   -1,   28,  214,   -1,   29,  214,   -1,   30,
  214,   -1,  134,  187,   -1,   75,  187,   -1,    1,  123,
  176,   -1,    7,  123,  176,   -1,    8,  123,  176,   -1,
    9,  123,  176,   -1,   13,  123,  176,   -1,   14,  123,
  176,   -1,   17,  176,   -1,   18,  176,   -1,   19,  176,
   -1,   20,  176,   -1,   21,  176,   -1,  173,  176,   -1,
   13,  176,   -1,  112,  123,   -1,   16,  112,   -1,  178,
  176,   -1,  181,   29,   -1,  173,  123,  176,   -1,   79,
  123,  176,   -1,   80,  123,  176,   -1,   81,  123,  176,
   -1,   83,  176,   -1,  190,   75,   -1,  190,   77,   -1,
  190,   78,   -1,  190,   79,   -1,  190,   51,   -1,  190,
   76,   -1,  153,  210,   -1,  154,  210,   -1,  155,  210,
   -1,  156,  210,   -1,  157,  210,   -1,  158,  210,   -1,
  159,  210,   -1,  160,  210,   -1,  161,  210,   -1,  162,
  210,   -1,  163,  210,   -1,  164,  210,   -1,  153,  211,
   -1,  154,  211,   -1,  155,  211,   -1,  156,  211,   -1,
  157,  211,   -1,  158,  211,   -1,  159,  211,   -1,  160,
  211,   -1,  161,  211,   -1,  162,  211,   -1,  163,  211,
   -1,  164,  211,   -1,  153,  213,   -1,  154,  213,   -1,
  155,  213,   -1,  156,  213,   -1,  157,  213,   -1,  158,
  213,   -1,  159,  213,   -1,  160,  213,   -1,  161,  213,
   -1,  162,  213,   -1,  163,  213,   -1,  164,  213,   -1,
  153,  189,   -1,  154,  189,   -1,  153,  192,   -1,  154,
  192,   -1,  153,  193,   -1,  154,  193,   -1,  213,   50,
   -1,  153,  190,   -1,  154,  190,   -1,  153,  191,   -1,
  154,  191,   -1,   88,  176,   -1,   16,  123,   -1,   50,
  177,   -1,  276,   33,   -1,  277,   33,   -1,  278,   33,
   -1,  279,   33,   -1,  287,   50,   -1,  190,   52,   -1,
  153,  200,   -1,  154,  200,   -1,  153,  194,   -1,  154,
  194,   -1,  153,  195,   -1,  154,  195,   -1,  153,  196,
   -1,  154,  196,   -1,  153,  197,   -1,  154,  197,   -1,
  153,  198,   -1,  154,  198,   -1,  153,  199,   -1,  154,
  199,   -1,  153,  206,   -1,  154,  206,   -1,  153,  212,
   -1,  154,  212,   -1,  155,  212,   -1,  156,  212,   -1,
  157,  212,   -1,  158,  212,   -1,  159,  212,   -1,  160,
  212,   -1,  161,  212,   -1,  162,  212,   -1,  163,  212,
   -1,  164,  212,   -1,  153,  203,   -1,  154,  203,   -1,
  153,  204,   -1,  154,  204,   -1,  153,  202,   -1,  154,
  202,   -1,  153,  205,   -1,  154,  205,   -1,  323,   63,
   -1,   11,   63,   -1,   12,   63,   -1,  324,   63,   -1,
   26,   63,   -1,  181,   59,   -1,
};
#define YYFINAL 34
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 311
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknEnum","tknPreProDef","tknClass",
"tknStruct","tknUnion","tknNamespace","tknDocBlockComment","tknDocLineComment",
"tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected","tknPrivate",
"tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknConst",
"tknStatic","tknExtern","tknVirtual","tknOverride","tknInline","tknExplicit",
"tknFriend","tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf",
"tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf","tknNew","tknDelete",
"tknReturn","tknVarArg","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : functionpointer",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optconst vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optconst",
"vardecl : varqual identifier optconst",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optconst vartype optconst ptrlevelopt reftype optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' expr ']' optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' ']' optconst",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optconst :",
"optconst : tknConst",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardecllist : vardecllist ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}' classdefnend",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"classdefnend :",
"classdefnend : ';'",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 826 "C:/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "' found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  void setupScanBuffer(char* buf, size_t bufsize);
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();

  return gProgUnit;
}
#line 1652 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 252 "C:/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 2042 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 259 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2048 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 260 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2058 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 265 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2068 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 270 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2074 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 273 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2080 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 274 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2086 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 275 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2092 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 276 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2098 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 277 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2104 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 278 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2110 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 279 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2116 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 280 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2122 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 281 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2128 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 282 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2134 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 283 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2140 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 284 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2146 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 285 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2152 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 286 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2158 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 287 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2164 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 288 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2170 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 289 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2176 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 290 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2182 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 291 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2188 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 292 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2194 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 293 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2200 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 294 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2206 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 295 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2212 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 296 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2218 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 299 "C:/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 2224 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 300 "C:/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 2230 "y_tab.c"
break;
case 32:
#line 303 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2235 "y_tab.c"
  if (!yytrial)
#line 303 "C:/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2242 "y_tab.c"
break;
case 33:
#line 307 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2247 "y_tab.c"
  if (!yytrial)
#line 307 "C:/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2254 "y_tab.c"
break;
case 34:
#line 311 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2259 "y_tab.c"
  if (!yytrial)
#line 311 "C:/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 2266 "y_tab.c"
break;
case 35:
#line 315 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2271 "y_tab.c"
  if (!yytrial)
#line 315 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 2278 "y_tab.c"
break;
case 36:
#line 319 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2283 "y_tab.c"
  if (!yytrial)
#line 319 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 2290 "y_tab.c"
break;
case 37:
#line 323 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2295 "y_tab.c"
  if (!yytrial)
#line 323 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 2302 "y_tab.c"
break;
case 38:
#line 329 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2307 "y_tab.c"
  if (!yytrial)
#line 329 "C:/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 2311 "y_tab.c"
break;
case 39:
#line 332 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2316 "y_tab.c"
  if (!yytrial)
#line 332 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2320 "y_tab.c"
break;
case 40:
#line 333 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2325 "y_tab.c"
  if (!yytrial)
#line 333 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2329 "y_tab.c"
break;
case 41:
#line 339 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2334 "y_tab.c"
  if (!yytrial)
#line 339 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 2338 "y_tab.c"
break;
case 42:
#line 340 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2343 "y_tab.c"
  if (!yytrial)
#line 340 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 2347 "y_tab.c"
break;
case 43:
#line 341 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2352 "y_tab.c"
  if (!yytrial)
#line 341 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 2356 "y_tab.c"
break;
case 44:
#line 342 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2361 "y_tab.c"
  if (!yytrial)
#line 342 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 2365 "y_tab.c"
break;
case 45:
#line 343 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2370 "y_tab.c"
  if (!yytrial)
#line 343 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 2374 "y_tab.c"
break;
case 46:
#line 344 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2379 "y_tab.c"
  if (!yytrial)
#line 344 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 2383 "y_tab.c"
break;
case 47:
#line 347 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2388 "y_tab.c"
  if (!yytrial)
#line 347 "C:/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 2392 "y_tab.c"
break;
case 48:
#line 350 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2397 "y_tab.c"
  if (!yytrial)
#line 350 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2401 "y_tab.c"
break;
case 49:
#line 351 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2406 "y_tab.c"
  if (!yytrial)
#line 351 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2410 "y_tab.c"
break;
case 50:
  if (!yytrial)
#line 354 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2416 "y_tab.c"
break;
case 51:
  if (!yytrial)
#line 355 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2422 "y_tab.c"
break;
case 52:
  if (!yytrial)
#line 356 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 2428 "y_tab.c"
break;
case 53:
  if (!yytrial)
#line 359 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 2434 "y_tab.c"
break;
case 54:
  if (!yytrial)
#line 360 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2440 "y_tab.c"
break;
case 55:
  if (!yytrial)
#line 363 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 2446 "y_tab.c"
break;
case 56:
  if (!yytrial)
#line 364 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 2452 "y_tab.c"
break;
case 57:
  if (!yytrial)
#line 365 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 2458 "y_tab.c"
break;
case 58:
  if (!yytrial)
#line 366 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 2464 "y_tab.c"
break;
case 59:
  if (!yytrial)
#line 367 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 2470 "y_tab.c"
break;
case 60:
  if (!yytrial)
#line 370 "C:/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 2476 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 371 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2485 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 375 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2494 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 379 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 2502 "y_tab.c"
break;
case 64:
#line 384 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2507 "y_tab.c"
  if (!yytrial)
#line 384 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 2513 "y_tab.c"
break;
case 65:
#line 387 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2518 "y_tab.c"
  if (!yytrial)
#line 387 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 2524 "y_tab.c"
break;
case 66:
#line 390 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2529 "y_tab.c"
  if (!yytrial)
#line 390 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 2535 "y_tab.c"
break;
case 67:
#line 393 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2540 "y_tab.c"
  if (!yytrial)
#line 393 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 2546 "y_tab.c"
break;
case 68:
#line 397 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2551 "y_tab.c"
  if (!yytrial)
#line 397 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 2557 "y_tab.c"
break;
case 69:
#line 400 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2562 "y_tab.c"
  if (!yytrial)
#line 400 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 2568 "y_tab.c"
break;
case 70:
#line 403 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2573 "y_tab.c"
  if (!yytrial)
#line 403 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 2579 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 408 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2585 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 409 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2591 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 412 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 2597 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 415 "C:/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 2606 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 421 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2612 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 422 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2618 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 423 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2624 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 424 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2630 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 425 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2636 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 426 "C:/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 2645 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 432 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 2651 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 435 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 2662 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 441 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 2672 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 446 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2683 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 452 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 2693 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 457 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2704 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 463 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 2714 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 472 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 2722 "y_tab.c"
break;
case 89:
  if (!yytrial)
#line 475 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 2730 "y_tab.c"
break;
case 90:
  if (!yytrial)
#line 478 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 2738 "y_tab.c"
break;
case 91:
  if (!yytrial)
#line 484 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 2746 "y_tab.c"
break;
case 92:
  if (!yytrial)
#line 487 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 2755 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 491 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 2763 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 496 "C:/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 2769 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 497 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 2775 "y_tab.c"
break;
case 96:
#line 500 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2780 "y_tab.c"
  if (!yytrial)
#line 500 "C:/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 2784 "y_tab.c"
break;
case 97:
#line 503 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2789 "y_tab.c"
  if (!yytrial)
#line 503 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 2797 "y_tab.c"
break;
case 98:
#line 510 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2802 "y_tab.c"
  if (!yytrial)
#line 510 "C:/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 2809 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 515 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 2819 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 520 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 2829 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 527 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 2839 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 532 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 2849 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 539 "C:/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 2855 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 540 "C:/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 2864 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 544 "C:/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 2873 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 550 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2879 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 551 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2885 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 552 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2891 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 553 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 2897 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 556 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 2903 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 557 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 2909 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 560 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 2915 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 561 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 2921 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 562 "C:/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 2927 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 563 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 2933 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 564 "C:/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 2939 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 565 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2945 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 566 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2951 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 569 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2957 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 570 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 2963 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 571 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 2969 "y_tab.c"
break;
case 122:
#line 572 "C:/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else YYVALID;}
#line 2974 "y_tab.c"
  if (!yytrial)
#line 573 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 2978 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 576 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2984 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 577 "C:/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 2990 "y_tab.c"
break;
case 125:
#line 580 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2995 "y_tab.c"
  if (!yytrial)
#line 580 "C:/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 2999 "y_tab.c"
break;
case 126:
#line 586 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3004 "y_tab.c"
  if (!yytrial)
#line 587 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3012 "y_tab.c"
break;
case 127:
#line 592 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3017 "y_tab.c"
break;
case 128:
#line 596 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3022 "y_tab.c"
  if (!yytrial)
#line 597 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3029 "y_tab.c"
break;
case 129:
#line 601 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3034 "y_tab.c"
break;
case 130:
#line 605 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3039 "y_tab.c"
  if (!yytrial)
#line 606 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 3046 "y_tab.c"
break;
case 131:
#line 613 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3058 "y_tab.c"
  if (!yytrial)
#line 621 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 3064 "y_tab.c"
break;
case 132:
#line 624 "C:/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3069 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 625 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 3077 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 630 "C:/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 3083 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 631 "C:/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3089 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 632 "C:/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3095 "y_tab.c"
break;
case 137:
#line 635 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3100 "y_tab.c"
  if (!yytrial)
#line 635 "C:/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 3104 "y_tab.c"
break;
case 138:
#line 638 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3109 "y_tab.c"
  if (!yytrial)
#line 639 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3116 "y_tab.c"
break;
case 139:
#line 643 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3121 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 645 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3130 "y_tab.c"
break;
case 141:
#line 649 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3135 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 651 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3144 "y_tab.c"
break;
case 143:
#line 658 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3156 "y_tab.c"
  if (!yytrial)
#line 666 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 3164 "y_tab.c"
break;
case 144:
#line 672 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3176 "y_tab.c"
  if (!yytrial)
#line 680 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 3184 "y_tab.c"
break;
case 145:
#line 686 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3196 "y_tab.c"
  if (!yytrial)
#line 694 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 3204 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 701 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3214 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 706 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3223 "y_tab.c"
break;
case 148:
#line 712 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3228 "y_tab.c"
  if (!yytrial)
#line 712 "C:/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 3232 "y_tab.c"
break;
case 149:
#line 715 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3237 "y_tab.c"
  if (!yytrial)
#line 715 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3241 "y_tab.c"
break;
case 150:
#line 716 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3246 "y_tab.c"
  if (!yytrial)
#line 716 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3250 "y_tab.c"
break;
case 151:
#line 717 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3255 "y_tab.c"
  if (!yytrial)
#line 717 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 3259 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 720 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 3265 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 721 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 3271 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 724 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 3277 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 725 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 3283 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 728 "C:/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 3289 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 729 "C:/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 3295 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 730 "C:/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 3301 "y_tab.c"
break;
case 159:
#line 734 "C:/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); YYVALID;}
#line 3306 "y_tab.c"
  if (!yytrial)
#line 734 "C:/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 3310 "y_tab.c"
break;
case 160:
#line 736 "C:/github/cppparser/parser.y"
{gCompoundStack.pop(); YYVALID;}
#line 3315 "y_tab.c"
  if (!yytrial)
#line 737 "C:/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-2].cppCompundObj ? yyvsp[-2].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-8].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-7].str;
                    yyval.cppCompundObj->name_      = yyvsp[-6].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 3328 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 748 "C:/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 3334 "y_tab.c"
break;
case 162:
#line 749 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3339 "y_tab.c"
  if (!yytrial)
#line 749 "C:/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3343 "y_tab.c"
break;
case 163:
#line 750 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3348 "y_tab.c"
  if (!yytrial)
#line 750 "C:/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3352 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 753 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 3358 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 754 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 3364 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 755 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3370 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 756 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 3376 "y_tab.c"
break;
case 168:
#line 759 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3381 "y_tab.c"
  if (!yytrial)
#line 759 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 3385 "y_tab.c"
break;
case 169:
#line 760 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3390 "y_tab.c"
  if (!yytrial)
#line 760 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 3394 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 763 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 3400 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 764 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 3406 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 765 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 3412 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 766 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 3418 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 773 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3424 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 774 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3430 "y_tab.c"
break;
case 178:
#line 777 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3435 "y_tab.c"
  if (!yytrial)
#line 777 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 3439 "y_tab.c"
break;
case 179:
#line 778 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3444 "y_tab.c"
  if (!yytrial)
#line 778 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3448 "y_tab.c"
break;
case 180:
#line 779 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3453 "y_tab.c"
  if (!yytrial)
#line 779 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 3457 "y_tab.c"
break;
case 181:
#line 782 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3462 "y_tab.c"
  if (!yytrial)
#line 782 "C:/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 3466 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 785 "C:/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 3472 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 786 "C:/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 3478 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 789 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3484 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 790 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3490 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 791 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3496 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 792 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3502 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 793 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 3508 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 794 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 3514 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 795 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 3520 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 796 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 3526 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 797 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 3532 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 798 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 3538 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 799 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 3544 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 800 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 3550 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 801 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 3556 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 802 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 3562 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 803 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 3568 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 804 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 3574 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 805 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 3580 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 806 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 3586 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 807 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 3592 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 808 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 3598 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 809 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 3604 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 810 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 3610 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 811 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 3616 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 812 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 3622 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 813 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 3628 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 814 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 3634 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 815 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 3640 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 816 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 3646 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 817 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 3652 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 818 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 3658 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 819 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 3664 "y_tab.c"
break;
case 215:
#line 822 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3669 "y_tab.c"
  if (!yytrial)
#line 822 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 3673 "y_tab.c"
break;
#line 3675 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
