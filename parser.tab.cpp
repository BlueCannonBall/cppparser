#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   27,   27,   27,   27,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,   31,   41,   41,   42,   43,
   44,   40,   40,   71,   71,   71,   71,   71,   71,   72,
   73,   73,   74,   74,   74,   74,   74,   74,   75,   37,
   37,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    4,    4,   11,   11,   11,
   11,   12,   12,   12,   12,    9,    9,    9,    9,   10,
   10,   10,   25,   25,   26,   24,   23,   16,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   14,   14,   14,
   64,   64,   56,   56,   57,   57,   48,   49,    8,   45,
   45,   46,   47,   47,   47,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   22,   22,   22,   18,   18,
   18,   18,   19,   19,   66,   66,   66,   66,   66,   66,
   65,   65,   65,   65,   63,   63,   63,   51,   52,   76,
   52,   77,   52,   52,   50,   78,   50,   50,   58,   58,
   58,   54,   55,   79,   55,   80,   55,   53,   53,   53,
   20,   20,   21,   17,   17,   17,   60,   60,   61,   61,
   62,   62,   62,   29,   29,   81,   28,   28,   67,   67,
   67,   68,   68,   68,   68,   13,   13,   13,   59,   59,
   59,   59,   32,   33,   33,   34,   34,   35,   35,   36,
    6,    6,    1,    1,    1,    1,   69,   69,   69,   30,
   70,   70,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   39,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    5,    3,    5,    6,
    9,    0,    1,    4,    3,    4,    4,    4,    4,    3,
    3,    3,    3,    3,    3,    2,    3,    2,    3,    1,
    1,    1,    2,    3,    1,    2,    1,    2,    2,    2,
    2,    1,    2,    4,    1,    0,    1,    1,    3,    1,
    1,    0,    2,    3,    2,    6,    8,    9,    7,    5,
    6,    4,    2,    2,    5,    3,    6,    3,    4,    3,
    6,    5,    5,    4,    3,    3,    3,    6,    9,    8,
    1,    1,    4,    2,    2,    2,    2,    2,    3,   11,
   10,    2,    9,    8,    2,    1,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    3,    0,    1,    3,    1,    1,
    1,    1,    1,    1,    0,    2,    2,    2,    2,    2,
    0,    2,    2,    3,    0,    1,    1,    2,    5,    0,
   11,    0,   13,    2,    4,    0,    6,    2,    0,    5,
    6,    2,    2,    0,    8,    0,   10,    4,    5,    7,
    8,    8,    2,    2,    2,    3,    0,    1,    1,    2,
    0,    1,    2,    2,    1,    0,    8,    2,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    2,    1,    1,
    1,    1,    4,    1,    3,    1,    1,    2,    2,    3,
    1,    1,    0,    1,    4,    2,    2,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    4,    3,    4,
    4,    7,    7,    7,    7,    3,    2,    2,    4,    2,
    1,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  263,  264,  265,    0,    0,    0,    0,    0,    0,
    0,  242,    0,   60,   61,    0,    0,    0,   72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  186,  111,  112,    0,    0,  187,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  266,    3,   29,    8,    9,   13,    0,    0,
    0,    6,    0,    7,    0,    0,   10,   11,    0,    0,
   12,   28,   35,    0,   14,    0,   15,    0,   17,   18,
   19,    0,   20,    0,   21,   22,    0,   23,   24,    0,
   25,   26,    0,   27,    0,    0,    0,    0,   30,   31,
   32,   33,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   62,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,  159,  160,  162,
  163,  138,  139,  127,  128,  129,  130,  131,  132,  133,
  134,  135,  136,  137,  161,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  239,
  240,  241,  238,    0,    0,    0,    0,    0,    0,    0,
    0,   56,    0,   58,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
    0,  219,    0,    0,    0,    0,    0,  214,  215,    0,
  213,    0,   94,   93,    0,    0,    0,    4,    5,  224,
    0,    0,    0,  228,  125,    0,  194,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  274,  276,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  324,    0,  122,  117,  118,  188,
    0,    0,  202,  203,  114,  115,  116,    0,    0,    0,
    0,    0,    0,    0,  176,  179,  178,  177,  180,    0,
    0,    0,    0,    0,    0,  169,  167,    0,  172,    0,
  216,  256,    0,    0,  119,    0,    0,    0,    0,   82,
    0,  251,    0,    0,    0,  244,    0,  247,    0,    0,
    0,    0,    0,  164,  165,    0,    0,    0,  316,    0,
    0,   59,    0,   50,   51,   52,   53,   54,   55,   57,
    0,    0,    0,    0,    0,    0,   36,    0,  267,    0,
    0,    0,    0,    0,  173,    0,  174,    0,    0,  220,
    0,    0,  100,    0,    0,    0,   96,  257,  258,  259,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  309,    0,    0,    0,   38,    0,
    0,    0,    0,    0,  236,    0,    0,    0,    0,    0,
    0,  204,  255,    0,  195,    0,    0,    0,    0,    0,
   82,   92,    0,    0,  249,  248,  243,    0,    0,    0,
    0,    0,    0,  113,  208,    0,    0,   44,   47,   48,
   46,   49,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,  104,    0,    0,    0,  190,    0,    0,
  310,  308,    0,    0,    0,    0,    0,  237,    0,    0,
   99,    0,    0,    0,    0,    0,  168,    0,    0,   95,
   82,   90,    0,    0,    0,    0,    0,    0,   83,   80,
   81,  245,    0,    0,    0,    0,    0,    0,   37,    0,
   39,    0,    0,    0,    0,  192,    0,  103,    0,    0,
    0,    0,    0,  189,  233,  234,  235,    0,    0,  226,
    0,  102,    0,    0,  209,    0,    0,    0,  223,   97,
    0,    0,   82,   91,    0,   84,   86,    0,    0,    0,
    0,    0,    0,   40,   77,    0,    0,    0,    0,  206,
    0,    0,  200,    0,    0,    0,    0,    0,  108,  101,
  197,    0,    0,    0,    0,   89,    0,    0,  312,  313,
  314,  315,  210,    0,    0,  181,    0,    0,    0,    0,
    0,  201,    0,    0,    0,    0,    0,    0,  205,   87,
    0,    0,    0,    0,    0,    0,    0,  211,  212,  227,
  110,    0,  181,    0,   88,   41,    0,    0,  182,  183,
    0,    0,    0,  109,    0,    0,  121,  184,    0,    0,
  207,  191,  120,    0,    0,  193,
};
static int yydgoto[] = {                                      49,
   50,  137,   52,  121,   53,  334,   54,   55,   56,   57,
  519,  454,   58,   59,   60,   61,   62,  317,  376,   63,
   64,  318,   65,   66,   67,   68,  213,   70,   71,   72,
   73,   74,  335,  336,  337,  338,   75,   76,   77,  363,
   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
   88,   89,   90,   91,   92,   93,   94,  292,   95,  447,
  448,  509,   96,   97,  624,   98,  497,  548,  239,  215,
   99,  100,  101,  102,  103,  441,  579,  438,  506,  609,
  587,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0, -224,    0, -209,    0,    0,
    0,    0,    2,    0,    0, 1880,    0,   62,    0,   64,
  101,  105,  148, 1095, 2203, 3109, 3109, 3109, 3109, 3109,
 3177, 3109, 3222,    0,    0,    0,   89,  409,    0, 1305,
  187,  315,  370, 2663, 3109,  100, 1095,    0,    0,    0,
  -67,  -29,    0,    0,    0,    0,    0,    0, 1880,  517,
   52,    0,  176,    0,  195,  364,    0,    0, 2536,  369,
    0,    0,    0,  198,    0, 5523,    0,    0,    0,    0,
    0,  428,    0,  -24,    0,    0,  318,    0,    0,  -20,
    0,    0,  -43,    0,    0, 1880,   30,  446,    0,    0,
    0,    0,    0,    0, 1880, 1880, 1880,  662,    0,  387,
  450,  476,    0,  461, 1880,  467,    0,    0,  478,  277,
  417,    0,    0,    0, 3072,    0,    0,    0,    0,   30,
   30,   30,   30, 5206, 3109, 3109,  122,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  501,  486,  531,    0,    0,
  106,  106,  106,    0,  106,  106,  505, 5558,  327,    0,
    0,    0,    0,    0,  321,  353,  359, -181,  357,  361,
  376,    0,  362,    0, 3109, 3109, 3109,  304,    0,  551,
    0,    0, 1898, 5523,   28,  609,  993, 2831,    0,    0,
 1880,    0, 1880,  579,  534, 3109,    0,    0,    0,    0,
    0,  391,    0,    0,  594,  595,  613,    0,    0,    0,
  632,   30,  -40,    0,    0,    0,    0,    0,  687, 3109,
 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109,
 3109, 3109, 3109, 3109, 3109, 3109,    0,    0, 3109, 3109,
 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109, 3109,
 3109, 2791, 3109, 3109,    0, 2663,    0,    0,    0,    0,
  426,   12,    0,    0,    0,    0,    0,  476, 3123,   63,
    0, 1880,    0,  427,    0,    0,    0,    0,    0,   30,
    0,  451,  514, 1880,  628,    0,    0,   11,    0, 1880,
    0,    0,  468,  609,    0,  690, 1880, 1880,  266,    0,
  672,    0,  477,  484,  143,    0,  682,    0,  683,  684,
  688,  694, 6528,    0,    0,  710,  734, 3109,    0,  740,
 1880,    0,  530,    0,    0,    0,    0,    0,    0,    0,
 5584, 6528,  731, 5623,  763, 3109,    0, 3109,    0,  550,
 1933,  770,    0,    0,    0,  749,    0,  -14,  -14,    0,
  -14, 2850,    0, 6528,  690,  690,    0,    0,    0,    0,
  555,    0, 3150,  556,    0,    0,    0,    0,    0,    0,
    0,    0,  741,  741,    0,    0, 1568,    0,    0,    0,
    0,  106,    0,    0,    0, 1462, 1462,  741,  741,  741,
    0,  432,  432, 1568,    0,  278, 5901,  106,    0,  775,
  562,    0,  765,   68,    0,  690,  535,  786,  789,    0,
  790,    0,    0,    0,    0,  792,  793,  795,  151,   98,
    0,    0, 1880,    6,    0,    0,    0, 3072, 3109,  798,
  804,  811,  812,    0,    0,    0,  794,    0,    0,    0,
    0,    0, 2663, 3109, 2663, 3109,    0, 6528,  813,  819,
  550,  -95,    0,    0, 5927,  793,  793,    0,    0,  765,
    0,    0, 3109,  823, 2026,  441,   20,    0,  793, 2918,
    0,    0,  826, 1933,    0,  824,    0,  839,  621,    0,
    0,    0,   45,  141,  820,    0, 1043,  842,    0,    0,
    0,    0, 8373, 3109, 3109, 3109, 3109,  821,    0,  843,
    0, 5962,  663,    0,  879,    0,  665,    0,   30,   30,
  669, 5997, 3109,    0,    0,    0,    0, 1880,  441,    0,
  -87,    0, 6023,  388,    0,  892,  453,  893,    0,    0,
  107,  874,    0,    0, 3109,    0,    0, 6058, 6093, 6371,
 6397,  681, 3109,    0,    0,  902,  506,  663,  910,    0,
 1880, 1880,    0, 6432,  -14, 1880,    0, 3022,    0,    0,
    0,    0,  890,   62,  894,    0,  136, 6528,    0,    0,
    0,    0,    0,  915,  917,    0,  932,    0,  918,   18,
   18,    0,  -14, 2153,   30, 6467,  570,   49,    0,    0,
  924, 2663,    0,   -7,  944,  647,  949,    0,    0,    0,
    0,   30,    0,    0,    0,    0,  685,  735,    0,    0,
    0,  890,   62,    0,   -7, 2281,    0,    0,  689,   75,
    0,    0,    0,    0, 2408,    0,
};
static int yyrindex[] = {                                      7,
 5138,    0,    0,    0,  873,    0, 4330,  875,    0,    0,
    0,    0,    0,    0,    0,    0, 4388,    0,    0,    0,
    0,    0,    0, 4713, 3411,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4750, -100,    0,  933,
 6493,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  996,  437,
    0,    0,    0,  933,    0,    0,    0,  702,    0,    0,
    0,    0,    0,    0,    0,    0,  150,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3411,  942,    0,    0,
    0,    0,    0, 4614,    0,    0,    0,    0,  130, 4810,
    0, 2443,  933,    0,    0,    0,    0, 3432,  876,    0,
    0, 3506, 3578, 3866,    0, 3925, 3984, -100,    0, 3411,
 3411, 3411, 3411,    0,    0,    0, 4676,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  189,  272,
  755, 1700, 1828, 5487, 1955, 2079,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  938,    0,    0,  295,    0,
  548,  908,    0,   42,    0, 2188, 3411,    0,    0,  873,
    0,    0,    0,    0,  440,    0, 3053,    0,    0, 3053,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  608, 3411,    0,    0,    0,  951,    0,    0,  942,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4825,    0,    0,
 9008,    0, 2576,    0,    0,    0,    0,    0,    0, 3411,
  560,    0, 4849,  695,  750,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -15,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  261,    0,    0,    0,
    0,    0,   38,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1006,    0,    0,    0,    0,    0,    0,    0,
    0,  109,    0,    0,    0,    0,    0,    0,    0,  973,
    0,    0, 5432, 4272,    0,    0,    0,  745,  883,    0,
  950,    0,    0,  158,  -16,  -16,    0,    0,    0,    0,
    0, 2188,    0,    0,  991, 1141, 1498, 1753, 2086, 2341,
 2596, 2748,   24, 2709, 2871, 2900, 2968, 3360, 3880, 4142,
 4343, 2334, 4400, 4489, 5061,  145,  245, 3997, 4083, 4285,
 5069, 3723, 3795, 5130,    0,    0,    0, 2589,    0,    0,
    0, -100,  -18,    0,    0, 3312,  440,    0,    0, 2188,
    0,    0,    0,  285,    0,    0,  764, 4864,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5147,    0,    0,    0,    0,
    0,    0,    0,  938,    0,    0, 5149,   71,    0,    0,
  973,    0,    0,    0,    0,  929,  929,    0,  -30,  168,
    0,    0,    0,    0,    0, 3740,    0,    0, 5046,    0,
    0,  130,    0,    0,  130,    0,    0, 5082,    0,    0,
    0,    0,    0,    0,  149,   44,    0,    0,    0,    0,
    0,    0,  985,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  990,  130,    0,    0,    0,    0, 3411, 3411,
    0,    0,    0,    0,    0,    0,    0,    0, 3740,    0,
 2508,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  999,    0,    0,    0,    0,  990,    0,    0,
    0,    0,    0,    0,  290,    0, -100,    0,    0,    0,
    0,  130,  150,    0,    0,    0,    0,  413,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  130,    0,  312,
  312,    0,  303,    0, 2508,    0,    0,    0,    0,    0,
    0,    0,  130,  114,    0,    0,    0,    0,    0,    0,
    0, 2508,    0, -100,    0,    0,    0,    0,    0,    0,
  130,  150,    0,    0,  291,    0,    0,    0,    0,    0,
    0,    0,    0, -100,    0,    0,
};
static int yycindex[] = {                                    828,
  258,    0,    0,    0,  972,    0, 4086,    0, 4137, 4195,
 4217,    0,    0,    0,    0,    0, 4231,    0,    0,    0,
    0,    0,    0,   -2,    0,    0,    0,    0,    0,    0,
    0,    0, 4253,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5436,    0,    0,   92, 1133,    0, 2756,
  470,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 8202,    0,
    0,    0,    0, 2971,    0,    0,    0,  703,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4551,    0,    0,  788,    0,    0,
    0,    0,    0,  181,    0,    0,    0,    0, 1992,  325,
    0,  796, 3678,    0,    0,    0,    0,   61,    0,    0,
    0,   99,  153,  197,    0,  215,  217, 1261,    0,    0,
    0,    0,    0,    0,    0,    0,  987, 6563,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6841, 6867,
  762, 1183, 3352, 1009, 8396, 8419,    0,    0,    0,    0,
    0,    0,    0, 4590,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6902,    0,
 6937, 6963, 8631,    0,    0,  814,    0,    0,    0, 3828,
    0,    0,    0,    0,    0,    0,   77,    0,    0,   84,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -65,    0,    0,    0,    0,  108,    0,  815,  825,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 8722,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  209,    0,    0,
  129,    0,  -12,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  248,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  847,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  525,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  778,  283,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  848,    0,    0, 6998, 7033, 7311, 7337, 7372, 7407,
 7433, 7468, 8442, 8466, 7503, 7781, 8506, 7807, 7842, 7877,
 7903, 8533, 7938, 7973, 8251, 8568, 8721, 8761, 8789, 8824,
 8277, 8847, 8870, 8893,    0,    0,    0, 8916,    0,    0,
    0, 1388,    0,    0,    0,    0,    0,    0,    0,  849,
    0,    0,    0, 3798,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 8312,    0,    0,    0,    0,
    0,    0, 8980,    0, 9053,    0, 8347,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  803,    0,
    0,    0,    0,    0, 9076,    0,    0,    0,    0,    0,
    0, 4679,    0,    0, 8645,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -199,    0,    0,    0,    0,
    0,    0, 1016,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9232,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1516,    0,    0,    0,
    0, 9246,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 9307,    0,    0,
    0,    0,    0, 9115,    0,    0,    0,    0,    0,    0,
    0, 9138, 9320,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1643,    0,    0,    0,    0,    0,    0,
 9334,    0,    0,    0,    0, 9151,    0,    0,    0,    0,
    0,    0,    0, 1771, 9219,    0,
};
static int yygindex[] = {                                      0,
   46,    1,  -96, -486, -350,    0,  -10,    0,    0,    0,
  564, -407, 1045,   51,    5, -104,    0,  637,    0,    0,
    0,  619,    0,    0,    0,    0,    3, 1025,    0,    0,
   -3,    0,    0,  651,    0,    0, -422,  634,    0, -437,
    0,    0,    0,    0,    9,    0, 1046,    0,    0, 1048,
    0, 1049,    0,    0,    0,    0,    0, -540,  -11,   57,
 1065,   78,   19,    0,  492,  345,    0,  577,    0,  851,
    0,    0,    0,  177,    0,    0,    0,    0,    0,    0,
    0,
};
#define YYTABLESIZE 9657
static int yytable[] = {                                     301,
   51,  110,   69,  588,  316,  111,    2,  118,  223,  122,
  123,  124,  222,  114,  129,  296,  126,  127,  326,  220,
  480,  217,  217,  115,    2,  229,  194, 1693,  333,   62,
  537,  520,  116,  208,  288,  380,  530,  383,  293,  377,
   62,   62,  374,  513,   51,  220,  576,  119,   51,  516,
  113,  445,  618,  638,  444,  431,  120, 4766,  238,  225,
  296,  125,  248,  549,  296,  296,  296,  296,  296,   51,
  296,  368, 4769, 4772,  243,  178,  355,  220,  261,  128,
  289,  261,  296,  187,  296,  261,  294,   85,  516,  297,
  520,  607,  431,  520,  322,  300,  110,  322,  128,  356,
  216,  650,  128,  561,  229,  122,  123,  124,  126,  110,
  229,  262,  322,  315,  262,  110,  296,  319,  431,  242,
  630,  435,  220,  130, 4775,  110,  498,  220,   51,  491,
  518,  494,   32,  488,  432,  604,  485,   30,  520,   33,
  299,   29,  550,  310,   28,  282,  322,  302,  296,   43,
  516, 1686,  369,  556,  113,  597,  512,  220,  639,  314,
  131,  536,  261,  324,  132, 1690,  261,   43,   85,  562,
  166,  634,  124,  166,  520,    2,    2,    2,  322,  516,
  339,  340,  341,  342,  128,  277,  458,  277,  277,  277,
  210,  621,   78,  199,  300,  262,  283,  654,   98,  564,
  220,   98,  238,  277,  457,  277,  218,  133, 1680,  510,
  220,  229,  648,   51,  189,  219,   98, 1683,  374,  230,
  511,  378,  136,  379,  381,  135,  205,   34,  377,  273,
 1686,  595,  273,  393,  231,   39,  124,  277,  232,  351,
  217,  217,  219,  383,  621,  385,  217,  273,  386,  217,
  217,  217,   62,  233,  365,   62,  657,  217,  217,  320,
  621,  371,  515,  563,   62,  113,  217,  372,  219,  277,
  375,  295,  199,   78,  666,  429,  675,   14,   15,  221,
  296,  273,    2,    2,    2,  278,   51,  278,  278,  278,
  229,  320,  392,  394,  310,  296,  296,  217,  217,  434,
  219,  515,  437,  278,  246,  278,  217,  639,  368,  371,
  322,  640,  275,  273,  225,  275,   14,   15,  491,  436,
  374,  368,  246,  453,  452,  322,  322,  449,  450,  517,
  275,  122,   34,  230,  624,  317,  320,  278,  317,  316,
   39,  320, 1720,  627,   34,  219,  231,  296,  476,  123,
  219,  434,   39,  317,  206,  185,  117,    2,    3,    4,
  440,  333,    7,  515,  275,  105,  106,  107,  517,  278,
  185,  320,  633,   16,   17,  291,  290,  322,   14,   15,
  219,  636,   19,   20,   21,   22,   23,  317,  451,   24,
  134, 1674,  515,  374,  217,  320,  275,  316, 1674, 1677,
  316,  277,  479,  482,  219,   78, 1677,   14,   15,  207,
   26,   27,  230,  123,  320,  479,  277,  277,  249,  317,
   78,   78,  234,  219,  320,  231,  642,  240,  591,  316,
  517,  444,   51,  219,  495,  645,  225,  371,   45,   46,
   47,  486,  487, 1674,  110,  273,  220,  253,  315,  253,
  253, 1677,  319,  514,  573,  501,   79,  217,  110,  517,
  273,  273,  529,  573,  531,  621,   12,   13,  277,  225,
  651,  282,   78,   51,  225,   51,  225,  284,  225,  654,
  185,  225, 1683,  185,  238,  504,  287,  316,  660,  113,
  669, 1683,  499,  593,  314,   51,  444,  663,  185,  672,
  185,  278,  110,  316,  621,  110,  315,  508,  321,  315,
  319,  508,  273,  319,  183,  323,  278,  278,  316,  325,
  187, 1683,  283,  191,  195,  199,  535,  327,  275,  506,
 1683,  203,  208,  329,  110,  328,  316,   79,  315,  330,
  212,  344,  319,  275,  275,  348,  606,  113,  585,  444,
  113,  317,  314,  323,  443,  314, 1714,  581,  582,  225,
  227,  225,  225,  539,  540, 1717,  317,  317,  278,  589,
  346,  304,  220,  223,  226,  228,  551,  226,  345,  113,
  229,  610,  611,  350,  314,  352,  613,   51,  318,  614,
  619,  318,  110,  220,  220,  275,  315,   62,  615,  190,
  319,   62,  253,  238,  253,  253,  318,  618,  110,  353,
  633,  636,  315,  444,   51,  354,  319,  358,  317,   62,
  380,  357,   51,  110,  382,  500,  360,  315,  628,  629,
  521,  319,  359,  631,   51,  238,  646,  113,  365,  651,
  318,  110,  314,  366,  238,  315,   51,  387,  370,  319,
  644,  388,  389,  113,   51,   51,  655,  138,  314,  179,
  180,  181,  182,  183,  185,  186,  188,   62,  113,   79,
  390,  109,  318,  314,  190,  191,  192,   12,  209,  211,
  212,  214,  430,  439,   79,   79,  113,  642,  226,  521,
  444,  314,  521,  225,  225,  225,  225,  225,  225,  225,
  225,   16,  225,  225,  225,  225,  225,  442,  225,  225,
  225,  225,  225,  225,  225,  225,  545,  546,  547,  225,
  225,  225,  225,  225,  446,  647,  225,  225,  444,  653,
   38,  222,  444,  455,   16,  171,   79,  521,  171,   16,
  456,   16,  459,   16,  460,  461,   16,  225,  225,  462,
  464,  225,  225,  225,  225,  463,  225,  225,  225,  225,
  225,  305,  306,  307,  225,  308,  309,  225,  185,  343,
  225,  225,  225,  521,  465,  225,  225,  225,  279,  467,
  282, 1699, 1702, 1705, 1708,  107,  284,  312,  107,  474,
  170,  268,  268,  170,  472,  268,  268,  268,  268,  268,
  268,  268,  476,  107,  318,  107,  112,  320,  320,  481,
  483,  488,  490,  268,  493,  268,  219,  219,  494,  318,
  318, 1056,  496, 1059,   16,  502,   16,   16,  503,  505,
  508,  283,  443,   62,  528,  117,  380,  524,  361,  362,
  364,    7,   62,  525,  105,  106,  107,  268,   34,   34,
  526,  527,   16,   17,  533, 1062,   39,   39,  534,  384,
  118,   19,  543,  558,  280,  111,  555,  121,   62,  108,
  254,  318,  105,  254,  254,  254,  559,  560,  268,  268,
  565,  572,  254,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  567,  573,  412,  413,  414,  415,  416,  417,  418,  419,
  420,  421,  422,  423,  424,  343,  427,  428,  311,  575,
  578,  580,  254,  106,    7,  536,  106,  105,  106,  107,
  254,  592,  596,  594,    7,   16,   17,  105,  106,  107,
  603,  106,  605,  106,   19,   16,   17,  291,  320,  608,
  180,  320,  620,  114,   19,  622,  623,  627,   16,   16,
   16,   16,   16,   16,   16,   16,  320,   16,   16,   16,
   16,   16,  625,   16,   16,   16,   16,   16,   16,   16,
   16,  466,  635,  641,   16,   16,   16,   16,   16,  643,
  105,   16,   16,  105,  648,    1,   42,   76,   77,  477,
  320,  478,  305,  306,  307,   45,  308,  309,  105,  198,
  105,  268,   16,   16,  253,  485,   16,   16,   16,   16,
  221,   16,   16,   16,   16,   16,  268,  268,  250,   16,
   76,  288,  320,  544,  288,   16,   16,   16,   45,   42,
   16,   16,   16,   45,  571,   45,  506,   45, 1209,  288,
   45, 1711,  621,  993,  996,  999, 1002, 1005, 1008, 1011,
 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041,
 1671, 1671, 1044, 1047, 1050, 1053, 4763, 4778,  268,  566,
  507,  571,  193,  288,    0,    6,    9,   12,   15,   18,
   21,   27,  523,   30,   36,   42,   48,   51,  244,   54,
   57,   60,   66, 1696, 1671, 1671,   72,  362,  522,  532,
   75,   81,   84,   87,   90,  288,  224,   93,   96,  245,
  554,  246,  247,  557,  645,  586,  542,   32,   45,    0,
   45,   45,  426,  553,    0,    0,    0,    0,   99,  102,
    0,    0,  124,  129,  134,  139,    0,  143,  143,  148,
  151,  156,  577,    0,    0,  159,    0,  568,  569,  570,
  571,  162,  165,  168,  320,  118,  171,  174,  177,    0,
  111,    0,  121,    0,  108,    0,  584,  105,    0,  320,
  320,  289,    0,    0,  289,  221,    0,    0,  253,  253,
  253,  221,  253,  253,  221,  221,  221,    0,  598,  289,
    0,    0,  221,  221,  253,    0,  362,  253,  253,  253,
  617,  221,    0,    0,    0,  253,  253,  136,    0,    0,
  135,  616,    0,    0,  253,    0,  626,    0,  232,    0,
    0,  320,    0,  289,  235,    0,    0,  235,  235,  235,
    0,  637, 1128,  221, 1131,  235,  235,  288,  175,  175,
  175,  221,  175,  175,  235,  180,  253,    0,  114,  649,
    0,    0,  288,  288,  253,  289,   45,   45,   45,   45,
    0,   45,   45,   45,   45,   45, 1134,   45,   45,   45,
   45,   45,   45,   45,   45,    0,  239,    0,   45,   45,
   45,   45,   45,  118,  242,   45,   45,    0,  111,    0,
  121,    0,  108,    0,    0,  105,    0,   34,  305,  306,
  307,    0,  308,  309,  288,   39,   45,   45,    0,    0,
   45,   45,   45,   45,    0,   45,   45,   45,   45,   45,
    0,    0,    0,   45,    0,    0,   45,    0,    0,   45,
   45,   45,    0,    0,   45,   45,   45,    0,    0,    0,
    0,    0,    2,    3,    4,    0,    0,    7,    0,    0,
  105,  106,  107,    0,    0,    0,    0,    0,   16,   17,
  199,  200,  201,  202,  203,  204,    0,   19,   20,   21,
   22,   23,    0,  180,   24,  134,  114,    0,    0,    0,
    6,    9,   12,   15,   18,   21,   27,  289,   30,   36,
   42,   48,   51,    0,   54,   57,   60,   66,    0,    0,
    0,   72,  289,  289,    0,   75,   81,   84,   87,   90,
  118,    0,   93,   96,    0,  111,    0,  121,    0,  108,
    0,    0,  105,   45,   46,   47,    0,    0,    0,    0,
    0,    0,    0,   99,  102,    0,    0,  124,  129,  134,
  139,    0,  143,  143,  148,  151,  156,    0,    0,    0,
  159,    0,    0,    0,  289,    0,  162,  165,  168,    0,
    0,  171,  174,  177, 1065, 1068, 1071, 1074, 1077, 1080,
 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110,
 1113,    0,    0, 1116, 1119, 1122, 1125,    0,  277,  279,
    0,  282,    0,  275,    0,    0,    0,  284,  276,    0,
  180,    0,    0,  114,    0,    0,    0,    0,    6,    9,
   12,   15,   18,   21,   27,    0,   30,   36,   42,   48,
   51,    0,   54,   57,   60,   66,    0,    0,  290,   72,
    0,  290,    0,   75,   81,   84,   87,   90,  118,    0,
   93,   96,  283,  111,    0,  121,  290,  108,    0,    0,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   99,  102,    0,    0,  124,  129,  134,  139,    0,
  143,  143,  148,  151,  156,  280,  195,    0,  159,    0,
  290,    0,    0,    0,  162,  165,  168,    0,    0,  171,
  174,  177,    0,    0,  277,  279,    0,  282,    0,  275,
  273,    0,  274,  284,  276,    0,    0,    0,    0,    0,
    0,    0,  290,    0,    0,    0,    0,    0,  281,  196,
  197,  198,  199,  200,  201,  202,  203,  204,  180,    0,
    0,  114,    0,    0,    0,    6,    9,   12,   15,   18,
   21,   27,    0,   30,   36,   42,   48,   51,  283,   54,
   57,   60,   66,    0,    0,    0,   72,    0,    0,    0,
   75,   81,   84,   87,   90,  118,    0,   93,   96,    0,
  111,    0,  121,    0,  108,    0,    0,  105,    0,    0,
    0,  280,    0,    0,    0,    0,    0,    0,   99,  102,
    0,    0,  124,  129,  134,  139,    0,  143,  143,  148,
  151,  156,    0,    0,    0,  159,    0,    0,    0,    0,
    0,  162,  165,  168,    0,    0,  171,  174,  177,    0,
    0,    0,    0,    0,    0,    0,  271,  271,    0,    0,
  271,  271,  271,  271,  271,  271,  271,    0,    0,    0,
    0,    0,    0,    0,  290,    0,    0,    0,  271,    0,
  271,    0,    0,    0,    0,  180,    0,    0,  114,  290,
  290,    0,    0,    6,    9,   12,   15,   18,   21,   27,
    0,   30,   36,   42,   48,   51,    0,   54,   57,   60,
   66,    0,  271,  291,   72,    0,  291,    0,   75,   81,
   84,   87,   90,  118,    0,   93,   96,    0,  111,    0,
  121,  291,  108,    0,    0,  105,    0,    0,    0,    0,
    0,  290,    0,  271,  271,    0,   99,  102,    0,    0,
  124,  129,  134,  139,    0,  143,  143,  148,  151,  156,
    0,    0,    0,  159,    0,  291,    0,    0,    0,  162,
  165,  168,    0,    0,  171,  174,  177,    0,    0,    0,
    0,    0,    0,    0,  272,  272,    0,    0,  272,  272,
  272,  272,  272,  272,  272,    0,    0,  291,    0,    0,
    0,    0,    0,    0,    0,    0,  272,    0,  272,    0,
    0,    0,    0,  180,    0,    0,  114,    0,    0,    0,
    6,    9,   12,   15,   18,   21,   27,    0,   30,   36,
   42,   48,   51,    0,   54,   57,   60,   66,    0,    0,
  272,   72,    0,    0,    0,   75,   81,   84,   87,   90,
   32,    0,   93,   96,    0,   30,    0,   33,    0,   29,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,  272,  272,   99,  102,    0,  271,  124,  129,  134,
  139,    0,  143,  143,  148,  151,  156,    0,    0,    0,
  159,  271,  271,    0,    0,    0,  162,  165,  168,    0,
    0,  171,  174,  177,    0,    0,    0,    0,    0,    0,
    0,  269,  269,    0,    0,  269,  269,  269,  269,  269,
  269,  269,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0,  269,    0,  269,    0,    0,    0,    0,
   48,    0,  367,  271,  291,  291,    0,    0,    6,    9,
   12,   15,   18,   21,   27,    0,   30,   36,   42,   48,
   51,    0,   54,   57,   60,   66,    0,  269,    0,   72,
    0,    0,    0,   75,   81,   84,   87,   90,   32,    0,
   93,   96,    0,   30,    0,   33,    0,   29,    0,    0,
   28,    0,    0,    0,    0,    0,  291,    0,  269,  269,
    0,   99,  102,    0,  272,  124,  129,  134,  139,    0,
  143,  143,  148,  151,  156,    0,    0,    0,  159,  272,
  272,    0,    0,    0,  162,  165,  168,    0,    0,  171,
  174,  177,    0,    0,    0,  270,  270,    0,    0,  270,
  270,  270,  270,  270,  270,  270,  292,    0,    0,  292,
    0,    0,    0,    0,    0,    0,  117,  270,    0,  270,
    0,    0,    7,    0,  292,  105,  106,  107,   48,    0,
  544,  272,    0,   16,   17,    2,    3,    4,    5,    6,
    0,    8,   19,    0,    0,    0,   12,   13,    0,   14,
   15,  270,    0,  235,  236,  237,   18,    0,  292,    0,
    0,   20,   21,   22,   23,   32,    0,   24,   25,  117,
   30,    0,   33,    0,   29,    7,    0,   28,  105,  106,
  107,    0,  270,  270,    0,    0,   16,   17,   26,   27,
  292,  269,    0,    0,    0,   19,    0,    0,    0,   38,
    0,   40,    0,  134,    0,   41,  269,  269,    0,    0,
    0,   42,   43,   44,    0,  173,   45,   46,   47,  168,
  170,    0,  176,    0,  166,  164,  175,  165,  577,  167,
    0,    0,    0,    0,  581,    0,    0,  585,  589,  593,
    0,    0,  162,  174,  163,  597,  601,    0,    0,    0,
    0,    0,    0,    0,  605,   48,    0,  630,  269,    0,
    0,    0,    0,    2,    3,    4,    5,    6,    0,    8,
    0,    0,    0,  177,   12,   13,  169,   14,   15,    0,
    0,  235,  236,  237,   18,    0,  239,  609,  612,   20,
   21,   22,   23,   32,  242,   24,   25,    0,   30,    0,
   33,    0,   29,    0,    0,   28,  171,    0,  172,    0,
    0,    0,    0,    0,    0,  270,   26,   27,    0,    0,
    0,    0,  292,    0,    0,    0,    0,   38,    0,   40,
  270,  270,    0,   41,    0,    0,    0,  292,  292,   42,
   43,   44,    0,    0,   45,   46,   47,    0,    0,    0,
  306,  306,    0,    0,  306,  306,  306,  306,  306,  306,
  306,  293,    0,    0,  293,    0,    0,    0,    0,    0,
    0,    0,  306,    0,  306,    0,    0,    0,    0,  293,
    0,    0,  270,   48,    0,  652,    0,    0,    0,  292,
    2,    3,    4,    5,    6,    0,    8,    0,    0,    0,
    0,   12,   13,    0,   14,   15,  306,    0,  235,  236,
  237,   18,    0,  293,    0,    0,   20,   21,   22,   23,
   32,    0,   24,   25,    0,   30,    0,   33,    0,   29,
  253,    0,   28,  253,  253,  253,    0,  306,  306,    0,
    0,  253,  253,   26,   27,  293,    0,    0,    0,    0,
  253,    0,    0,    0,   38,    0,   40,    0,  253,    0,
   41,    0,    0,    0,  254,    0,   42,   43,   44,    0,
    0,   45,   46,   47,  139,  140,  141,  142,  143,  144,
  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
  155,  156,  157,  158,  159,  160,  161,   34,    0,    0,
    0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
   48,    0,  656,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    6,    0,    8,    0,    0,  185,  185,   12,
   13,  185,   14,   15,    0,    0,  235,  236,  237,   18,
    0,    0,    0,    0,   20,   21,   22,   23,   32,  185,
   24,   25,    0,   30,    0,   33,    0,   29,    0,    0,
   28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  306,   26,   27,    0,    0,    0,    0,  293,    0,    0,
    0,    0,   38,    0,   40,  306,  306,    0,   41,    0,
    0,    0,  293,  293,   42,   43,   44,    0,    0,   45,
   46,   47,    0,    0,    0,  305,  305,    0,    0,  305,
  305,  305,  305,  305,  305,  305,  294,    0,    0,  294,
    0,    0,    0,    0,    0,    0,    0,  305,    0,  305,
    0,    0,    0,    0,  294,    0,    0,  306,   48,    0,
    0,    0,    0,    0,  293,    2,    3,    4,    5,    6,
    0,    8,    0,    0,    0,    0,   12,   13,    0,   14,
   15,  305,    0,  235,  236,  237,   18,    0,  294,    0,
    0,   20,   21,   22,   23,   32,    0,   24,   25,    0,
   30,    0,   33,    0,   29,  254,    0,   28,  254,  254,
  254,    0,  305,  305,    0,    0,  254,  254,   26,   27,
  294,    0,    0,    0,    0,  254,    0,    0,    0,   38,
    0,   40,    0,  254,    0,   41,    0,    0,    0,    0,
    0,   42,   43,   44,    0,  297,   45,   46,   47,  297,
  297,  297,  297,  297,    0,  297,    0,  254,  254,  254,
  254,    0,  254,  254,  185,  254,    0,  297,    0,  297,
  185,    0,    0,  185,  185,  185,    0,    0,    0,    0,
    0,  185,  185,    0,    0,   48,    0,    0,  295,    0,
  185,  295,    0,    2,    3,    4,    5,    6,  185,    8,
    0,  297,    0,    0,   12,   13,  295,   14,   15,    0,
    0,  235,  236,  237,   18,    0,    0,    0,    0,   20,
   21,   22,   23,   32,    0,   24,   25,    0,   30,    0,
   33,  425,   29,  297,    0,   28,    0,    0,  254,    0,
  295,  254,  254,  254,    0,  305,   26,   27,    0,  254,
  254,    0,  294,    0,    0,    0,    0,   38,  254,   40,
  305,  305,    0,   41,    0,    0,    0,  294,  294,   42,
   43,   44,  295,    0,   45,   46,   47,    0,    0,    0,
    0,    0,   32,    0,    0,    0,    0,   30,    0,   33,
  254,   29,    0,    0,   28,    0,    0,    0,  254,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  298,  305,  136,  298,    0,  135,    0,    0,  294,
    2,    3,    4,    5,    6,    0,    8,    0,    0,  298,
    0,   12,   13,    0,   14,   15,    0,    0,    0,    0,
  299,   18,  484,  299,    0,    0,   20,   21,   22,   23,
   32,    0,   24,   25,    0,   30,    0,   33,  299,   29,
    0,    0,   28,  298,    0,  297,    0,    0,    0,    0,
    0,    0,  136,   26,   27,  135,    0,    0,    0,    0,
  297,  297,    0,    0,   38,    0,   40,    0,    0,    0,
   41,    0,  299,    0,    0,  298,   42,   43,   44,    0,
    0,   45,   46,   47,  295,    0,    0,    0,  300,    0,
  552,  300,  496,    0,    0,    0,    0,    0,  496,  295,
  295,  496,  496,  496,  299,    0,  300,    0,    0,  496,
  496,    0,  297,    0,    0,    0,    0,    0,  496,    0,
  136,    0,    0,  135,    0,    0,    0,  117,    2,    3,
    4,    0,    0,    7,   32,    0,  105,  106,  107,   30,
  300,   33,    0,   29,   16,   17,   28,    0,    0,    0,
  500,  295,    0,   19,   20,   21,   22,   23,  503,    0,
   24,  134,    0,    0,    0,    0,    0,  373,    0,    0,
  185,    0,  300,    7,  185,    0,  105,  106,  107,    0,
    0,   26,   27,    0,   16,   17,  117,    2,    3,    4,
    0,    0,    7,   19,  615,  105,  106,  107,    0,    0,
    0,    0,    0,   16,   17,    0,    0,  298,    0,   45,
   46,   47,   19,   20,   21,   22,   23,    0,    0,   24,
  134,   32,  298,  298,  136,    0,   30,  135,   33,    0,
   29,    0,    0,   28,    0,    0,  299,    0,    0,    0,
   26,   27,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  299,  299,    0,  117,    2,    3,    4,    0,    0,
    7,    0,    0,  105,  106,  107,    0,    0,   45,   46,
   47,   16,   17,    0,  298,    0,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,    0,   24,  134,   32,
    0,    0,    0,    0,   30,    0,   33,    0,   29,    0,
    0,   28,    0,  299,  300,    0,    0,  512,   26,   27,
    0,  136,    0,  516,  135,    0,  520,  524,  528,  300,
  300,    0,    0,    0,  532,  536,    0,    0,    0,    0,
    0,    0,    0,  540,   32,    0,   45,   46,   47,   30,
    0,   33,    0,   29,    0,    0,   28,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  117,    2,
    3,    4,    0,    0,    7,  468,    0,  105,  106,  107,
    0,  300,    0,  468,    0,   16,   17,    0,    0,  136,
    0,    0,  135,    0,   19,   20,   21,   22,   23,  185,
    0,   24,  134,    0,    0,  185,    0,    0,  185,  185,
  185,    0,    0,    0,    0,    0,  185,  185,  117,    0,
    0,    0,   26,   27,    7,  185,    0,  331,  106,  107,
    0,    0,  332,    0,  136,   16,   17,  135,    0,  217,
    0,  217,  217,    0,   19,  217,    0,    0,    0,    0,
   45,   46,   47,    0,    0,  117,    2,    3,    4,    0,
    0,    7,    0,  217,  105,  106,  107,    0,    0,  433,
    0,    0,   16,   17,    0,    7,    0,    0,  105,  106,
  107,   19,   20,   21,   22,   23,   16,   17,   24,  134,
  301,    0,  217,  301,    0,   19,  489,    0,    0,    0,
    0, 1200,    7, 1203,    0,  105,  106,  107,  301,   26,
   27,    0,    0,   16,   17,    0,    0,    0,    0,    0,
    0,    0,   19,  184,    2,    3,    4,    0,    0,    7,
    0,    0,  105,  106,  107, 1206,    0,   45,   46,   47,
   16,   17,  301,    0,    0,    0,    0,    0,    0,   19,
   20,   21,   22,   23,    0,    0,   24,  134,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,    2,
    3,    4,    0,    0,  301,    0,    0,   26,   27,    0,
   66,    0,   66,   66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   20,   21,   22,   23,    0,
    0,   24,  134,    0,    0,   45,   46,   47,    0,    0,
    0,    0,   66,    0,   66,   66,    0,    0,    0,    0,
    0,    0,   26,   27,    0,    0,   34,    0,    0,    0,
    0,    0,   69,   69,   39,   69,   69,   69,   69,   69,
   69,   69,   69,    0,   66,   66,   66,    0,    0,    0,
   45,   46,   47,    0,   69,    0,   69,   69,  217,    0,
    0,    0,    0,    0,  217,    0,    0,  217,  217,  217,
    0,    0,    0,    0,    0,  217,  217,    0,    0,    0,
    0,    0,    0,    0,  217,    0,   69,    0,   69,   69,
    0,    0,  217,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   70,   70,  301,   70,   70,   70,
   70,   70,   70,   70,   70,    0,  217,    0,   69,   69,
   69,  301,  301,    0,  217,    0,   70,    0,   70,   70,
    0,    0,    0, 1137, 1140, 1143, 1146, 1149, 1152, 1155,
 1158, 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185,
    0,    0, 1188, 1191, 1194, 1197,    0,  185,   70,    0,
   70,   70,    0,  185,    0,    0,  185,  185,  185,    0,
    0,    0,    0,  301,  185,  185,    0,    0,   66,    0,
    0,    0,    0,  185,   66,    0,    0,   66,   66,   66,
   70,   70,   70,   66,   66,    0,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,    0,   66,   66,   66,   66,   66,    0,    0,    0,
    0,    0,    0,    0,   66,   66,    0,    0,    0,  282,
  282,    0,   69,  282,  282,  282,  282,  282,   69,  282,
    0,   69,   69,   69,    0,    0,    0,   69,   69,    0,
   69,  282,    0,  282,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,  282,   69,   69,   69,   69,
   69,    0,    0,    0,    0,    0,    0,    0,   69,   69,
    0,  283,  283,    0,   70,  283,  283,  283,  283,  283,
   70,  283,    0,   70,   70,   70,  282,  282,    0,   70,
   70,    0,   70,  283,    0,  283,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,  283,   70,   70,
   70,   70,   70,    0,    0,    0,    0,    0,    0,    0,
   70,   70,   71,   71,    0,   71,   71,   71,   71,   71,
   71,   71,   71,    0,    0,    0,    0,    0,  283,  283,
  302,    0,    0,  302,   71,    0,   71,   71,    0,    0,
    0,    0,    0,    0,  496,    0,    0,    0,  302,    0,
  496,    0,    0,  496,  496,  496,    0,    0,    0,    0,
    0,  496,  496,    0,    0,    0,   71,    0,   71,   71,
  496,   63,   63,    0,   63,   63,   63,   63,   63,   63,
   63,   63,  302,    0,    0,    0,    0,    0,    0,  282,
    0,    0,    0,   63,    0,   63,   63,    0,   71,   71,
   71,    0,  500,    0,  282,  282,  232,    0,    0,    0,
  503,    0,  232,    0,  302,  232,  232,  232,    0,    0,
    0,    0,    0,  232,  232,   63,    0,   63,   63,    0,
   68,   68,  232,   68,   68,   68,   68,   68,   68,   68,
   68,    0,    0,  279,    0,    0,    0,  279,  279,  279,
  279,  279,   68,  279,   68,   68,  282,   63,   63,   63,
    0,  283,    0,    0, 4549,  279,    0,  279,    0,    0,
  581,    0,    0,  585,  589,  593,  283,  283,    0,    0,
    0,  597,  601,    0,   68,    0,   68,   68,    0,    0,
  605,    0,    0,    0,  232,    0,    0,    0,    0,  279,
  235,    0,    0,  235,  235,  235,    0,    0,    0,    0,
    0,  235,  235,    0,    0,    0,   68,   68,   68,    0,
  235,    0,  239,  609,  612,    0,    0,    0,  283,  280,
  242,  279,   71,  280,  280,  280,  280,  280,   71,  280,
    0,   71,   71,   71,    0,    0,  302,   71,   71,    0,
   71,  280,  239,  280,    0,    0,    0,    0,    0,    0,
  242,  302,  302,    0,    0,    0,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,  280,   71,   71,   71,   71,
   71,   63,  303,    0,    0,  303,    0,   63,   71,   71,
   63,   63,   63,    0,    0,    0,   63,   63,    0,   63,
  303,    0,    0,  302,    0,    0,    0,  280,    0,    0,
    0,    0,    0,    0,    0,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,  303,   63,   63,   63,   63,   63,
   68,    0,    0,    0,    0,    0,   68,   63,   63,   68,
   68,   68,    0,  279,    0,   68,   68,    0,   68,    0,
    0,    0,    0,    0,    0,    0,  303,    0,  279,  279,
    0,    0,    0,    0,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,    0,   68,   68,   68,   68,   68,    0,
    0,    0,    0,    0,    0,    0,   68,   68,   64,   64,
    0,   64,   64,   64,   64,   64,   64,   64,   64,    0,
  279,  281,    0,    0,    0,  281,  281,  281,  281,  281,
   64,  281,   64,   64,    0,    0,    0,    0,    0,  280,
    0,    0,  245,  281,    0,  281,    0,    0,  248,    0,
    0,  251,  254,  257,  280,  280,    0,    0,    0,  260,
  263,    0,   64,    0,   64,   64,   65,   65,  266,   65,
   65,   65,   65,   65,   65,   65,   65,  281,    0,    0,
    0,    0,    0,  304,    0,    0,  304,    0,   65,   65,
   65,   65,    0,  269,   64,   64,   64,    0,  303,  272,
    0,  304,  275,  278,  281,    0,  280,    0,    0,  281,
  284,  287,    0,  303,  303,    0,    0,    0,    0,  290,
   65,    0,   65,   65,   67,   67,    0,   67,   67,   67,
   67,   67,   67,   67,   67,  304,    0,    0,    0,    0,
  307,    0,    0,  307,    0,    0,   67,   67,   67,   67,
    0,  293,   65,   65,   65,    0,    0,  296,  307,    0,
  299,  302,  305,    0,    0,  303,    0,  304,  308,  311,
    0,    0,    0,  317,    0,    0,    0,  314,   67,  320,
   67,   67,  323,  326,  329,    0,    0,  341,    0,    0,
  332,  335,  307,  344,    0,    0,  347,  350,  353,  338,
    0,    0,    0,    0,  356,  359,    0,    0,    0,  386,
   67,   67,   67,  362,    0,  389,    0,    0,  392,  395,
  398,    0,    0,    0,  307,    0,  401,  404,   64,  286,
    0,    0,  286,    0,   64,  407,    0,   64,   64,   64,
    0,  281,    0,   64,   64,    0,   64,  286,    0,    0,
    0,    0,    0,    0,    0,    0,  281,  281,    0,    0,
    0,    0,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,  286,   64,   64,   64,   64,   64,    0,    0,    0,
    0,    0,    0,    0,   64,   64,    0,    0,    0,  304,
    0,   65,   65,    0,    0,    0,    0,    0,  281,    0,
    0,    0,    0,  286,  304,  304,    0,    0,    0,    0,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,    0,
   65,   65,   65,   65,   65,    0,    0,    0,    0,    0,
    0,   62,   65,   65,    0,   62,  307,    0,    0,   67,
   67,    0,    0,    0,    0,    0,  304,    0,    0,    0,
    0,  307,  307,   62,    0,    0,    0,    0,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,    0,   67,   67,
   67,   67,   67,    0,    0,    0,    0,    0,    0,    0,
   67,   67,  126,  126,    0,  126,  126,  126,  126,  126,
  126,  126,  126,  307,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  126,    0,  126,  126,    0,    0,
    0,    0,    0,    0,    0,  286,    0,    0,    0,  323,
    0,    0,    0,  323,    0,  323,  323,    0,  323,  323,
  286,  286,    0,    0,    0,    0,  126,    0,  126,  126,
    0,  323,  323,  323,  323,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  321,    0,    0,    0,
  321,    0,  321,  321,    0,  321,  321,    0,    0,  126,
  126,    0,    0,  323,    0,  323,  323,  547,  321,  321,
  321,  321,  286,  550,    0,    0,  553,  556,  559,    0,
    0,    0,    0,    0,  562,  565,    0,    0,    0,    0,
    0,    0,    0,  568,    0,    0,  323,  323,    0,    0,
  321,    0,  321,  321,    0,    0,  547,   75,    0,   75,
   75,   75,  550,   75,    0,  553,  556,  559,    0,    0,
    0,    0,   62,  562,  565,    0,   62,    0,    0,    0,
  256,   75,  568,  321,  321,    0,  256,    0,    0,  256,
  256,  256,    0,   62,   62,    0,   62,    0,  256,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   75,  218,    0,  218,  218,    0,    0,  218,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,  218,    0,    0,  256,  256,
  256,  256,  126,  256,  256, 4549,  256,    0,    0,    0,
    0,  581,    0,    0,  585,  589,  593,  126,  126,    0,
    0,    0,  597,  601,  218,    0,    0,    0,    0,    0,
    0,  605,    0,    0,    0,    0,    0,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  323,  323,  126,  126,  126,  126,
    0,    0,    0,  239,  609,  612,    0,    0,    0,  126,
    0,  242,    0,    0,  323,  323,  323,  323,  323,  323,
  323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
  323,  321,  321,    0,    0,  323,  323,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  323,    0,    0,    0,
    0,  321,  321,  321,  321,  321,  321,  321,  321,  321,
  321,  321,  321,  321,  321,  321,  321,  321,    0,    0,
    0,    0,  321,  321,    0,    0,   75,    0,    0,    0,
    0,    0,   75,  321,    0,   75,   75,   75,    0,    0,
    0,    0,    0,    0,   75,  221,  221,  254,    0,  221,
  254,  254,  254,    0,    0,    0,    0,    0,    0,  254,
   75,  287,    0,    0,  287,    0,    0,  221,    0,  284,
    0,  254,  284,    0,  254,  254,  254,    0,   75,  287,
  218,  222,  222,  254,   75,  222,  218,  284,    0,  218,
  218,  218,   75,   62,    0,    0,  221,  218,  218,  254,
  254,  254,  254,  222,  254,  254,  218,  254,    0,    0,
    0,    0,    0,  287,  218,    0,    0,   62,    0,    0,
    0,  284,    0,  254,  254,  254,  254,    0,  254,  254,
  285,  254,  222,  285,   62,   62,    0,    0,  218,   62,
   62,   62,   62,   62,   62,  287,  218,  311,  285,  319,
  311,    0,  319,  284,    0,    0,   62,   62,   62,   62,
    0,    0,    0,    0,    0,  311,    0,  319,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  285,    0,    0,    0,    0,    0,   62,    0,
    0,   62,    0,    0,    0,    0,    0,    0,  173,  311,
    0,  319,  168,  170,    0,  176,    0,  166,  164,  175,
  165,    0,  167,    0,  285,    0,    0,    0,    0,    0,
    0,   62,   62,    0,    0,  162,  174,  163,    0,    0,
    0,  311,    0,  319,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  177,    0,    0,  169,
    0,    0,  221,    0,    0,    0,    0,    0,  221,    0,
    0,  221,  221,  221,    0,    0,    0,  287,    0,  221,
  221,    0,    0,    0,    0,  284,    0,    0,  221,  171,
    0,  172,  287,  287,    0,    0,  221,    0,  222,    0,
  284,  284,    0,    0,  222,    0,    0,  222,  222,  222,
    0,    0,    0,    0,    0,  222,  222,    0,    0,    0,
  221,    0,    0,    0,  222,    0,    0,    0,  221,    0,
    0,    0,  222,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  287,    0,  285,    0,    0,    0,
    0,    0,  284,    0,    0,    0,  222,    0,    0,    0,
    0,  285,  285,  311,  222,  319,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  311,  311,
  319,  319,    0,    0,    0,    0,    0,    0,    0,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,    0,   62,   62,
   62,   62,    0,  285,    0,  254,    0,  254,  254,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   62,   62,
  311,   62,  319,   62,   62,   62,   62,   62,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,   62,   62,   62,    0,    0,    0,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
    0,    0,   62,   62,   62,   62,    0,    0,   62,   62,
   62,   62,   62,   62,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,   62,   62,   62,    0,
    0,    0,    0,    0,    0,   62,   62,    0,    0,  277,
  279,  450,  282,    0,  275,  273,    0,  274,  284,  276,
    0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
   62,  285,  271,  281,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,  279,    0,  282,  349,  275,
  273,    0,  274,  284,  276,    0,    0,    0,    0,    0,
   62,   62,    0,  283,    0,    0,  278,  271,  281,  272,
  277,  279,    0,  282,  473,  275,  273,    0,  274,  284,
  276,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  281,  272,  280,    0,  283,    0,
    0,  278,    0,    0,    0,    0,    0,    0,    0,  277,
  279,    0,  282,  475,  275,  273,    0,  274,  284,  276,
    0,    0,    0,    0,  283,    0,    0,  278,    0,    0,
    0,  280,  271,  281,  272,    0,    0,    0,    0,    0,
    0,    0,  410,    0,    0,    0,    0,    0,  415,    0,
    0,  420,  425,  430,    0,    0,    0,  280,    0,  435,
  440,    0,    0,  283,   62,    0,  278,    0,  445,    0,
    0,    0,    0,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,    0,   62,   62,   62,   62,  280,    0,    0,    0,
  453,  457,  461,  465,    0,  468,  468,    0,  472,    0,
   62,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,    0,    0,   62,   62,   62,
   62,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,    0,    0,  267,  268,
  269,  270,    0,    0,    0,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,    0,    0,  267,  268,  269,  270,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270,  277,  279,    0,
  282,    0,  275,  273,    0,  274,  284,  276,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  281,  272,  277,  279,    0,  282,    0,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  281,  272,    0,
    0,  283,    0,  492,  278,    0,    0,    0,  277,  279,
    0,  282,  574,  275,  273,    0,  274,  284,  276,    0,
    0,    0,    0,    0,    0,    0,    0,  283,    0,  538,
  278,  271,  281,  272,  280,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  279,    0,  282,  583,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
  280,    0,  283,    0,    0,  278,  271,  281,  272,  277,
  279,    0,  282,    0,  275,  273,    0,  274,  284,  276,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  271,  281,  272,  280,    0,  283,    0,    0,
  278,    0,    0,    0,  277,  279,    0,  282,  599,  275,
  273,    0,  274,  284,  276,    0,    0,    0,    0,    0,
    0,    0,    0,  283,    0,  590,  278,  271,  281,  272,
  280,    0,    0,    0,    0,    0,    0,    0,    0,  277,
  279,    0,  282,  600,  275,  273,    0,  274,  284,  276,
    0,    0,    0,    0,    0,    0,  280,    0,  283,    0,
    0,  278,  271,  281,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  280,    0,  283,    0,    0,  278,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,    0,  280,    0,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,    0,    0,  267,  268,  269,
  270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
    0,    0,  267,  268,  269,  270,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,    0,    0,  267,  268,  269,
  270,    0,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,    0,    0,  267,  268,
  269,  270,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270,  277,  279,    0,
  282,  601,  275,  273,    0,  274,  284,  276,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  281,  272,  277,  279,    0,  282,  602,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  281,  272,    0,
    0,  283,    0,    0,  278,    0,    0,    0,  277,  279,
    0,  282,  612,  275,  273,    0,  274,  284,  276,    0,
    0,    0,    0,    0,    0,    0,    0,  283,    0,    0,
  278,  271,  281,  272,  280,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  279,    0,  282,    0,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
  280,    0,  283,    0,    0,  278,  271,  281,  272,  126,
    0,    0,  126,    0,    0,  126,  126,  126,  126,  126,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  126,    0,  126,  126,  280,    0,  283,    0,  632,
  278,    0,    0,    0,  277,  279,    0,  282,    0,  275,
  273,    0,  274,  284,  276,    0,    0,    0,    0,    0,
    0,    0,    0,  126,    0,    0,  126,  271,  281,  272,
  280,    0,    0,    0,    0,    0,    0,    0,    0,  759,
  765,    0,  774,    0,  753,  747,    0,  750,  780,  756,
    0,    0,    0,    0,    0,    0,  126,  126,  283,    0,
    0,  278,  741,  771,  744,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  280,    0,  777,    0,    0,  762,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,    0,  768,    0,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,    0,    0,  267,  268,  269,
  270,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
    0,    0,  267,  268,  269,  270,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,    0,    0,  267,  268,  269,
  270,    0,    0,    0,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,   75,    0,  126,  126,  126,  126,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,    0,    0,  267,  268,
  269,  270,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  678,  681,  684,  687,  690,  693,
  696,  699,  702,  705,  708,  711,  714,  717,  720,  723,
  726,    0,    0,  729,  732,  735,  738,  864,  870,    0,
  879,    0,  858,  852,    0,  855,  885,  861,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  846,  876,  849,  969,  975,    0,  984,    0,  963,  957,
    0,  960,  990,  966,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  951,  981,  954,    0,
    0,  882,    0,    0,  867,    0,    0,    0, 1437, 1443,
    0, 1452,    0, 1431, 1425,    0, 1428, 1458, 1434,    0,
    0,    0,    0,    0,    0,    0,    0,  987,    0,    0,
  972, 1419, 1449, 1422,  873,    0,    0,    0,    0,    0,
    0,    0,    0, 1542, 1548,    0, 1557,    0, 1536, 1530,
    0, 1533, 1563, 1539,    0,    0,    0,    0,    0,    0,
  978,    0, 1455,    0,    0, 1440, 1524, 1554, 1527, 1647,
 1653,    0, 1662,    0, 1641, 1635,    0, 1638, 1668, 1644,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1629, 1659, 1632, 1446,    0, 1560,    0,    0,
 1545,    0,    0,    0, 1804, 1810,    0, 1819,    0, 1798,
 1792,    0, 1795, 1825, 1801,    0,    0,    0,    0,    0,
    0,    0,    0, 1665,    0,    0, 1650, 1786, 1816, 1789,
 1551,    0,    0,    0,    0,    0,    0,    0,    0, 1909,
 1915,    0, 1924,    0, 1903, 1897,    0, 1900, 1930, 1906,
    0,    0,    0,    0,    0,    0, 1656,    0, 1822,    0,
    0, 1807, 1891, 1921, 1894,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1813,    0, 1927,    0,    0, 1912,    0,    0,    0,
    0,    0,  783,  786,  789,  792,  795,  798,  801,  804,
  807,  810,  813,  816,  819,  822,  825,  828,  831,    0,
    0,  834,  837,  840,  843,    0, 1918,    0,  888,  891,
  894,  897,  900,  903,  906,  909,  912,  915,  918,  921,
  924,  927,  930,  933,  936,    0,    0,  939,  942,  945,
  948,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1356, 1359, 1362, 1365, 1368, 1371, 1374,
 1377, 1380, 1383, 1386, 1389, 1392, 1395, 1398, 1401, 1404,
    0,    0, 1407, 1410, 1413, 1416,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1461, 1464,
 1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 1494,
 1497, 1500, 1503, 1506, 1509,    0,    0, 1512, 1515, 1518,
 1521,    0,    0,    0, 1566, 1569, 1572, 1575, 1578, 1581,
 1584, 1587, 1590, 1593, 1596, 1599, 1602, 1605, 1608, 1611,
 1614,    0,    0, 1617, 1620, 1623, 1626,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1723,
 1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 1750, 1753,
 1756, 1759, 1762, 1765, 1768, 1771,    0,    0, 1774, 1777,
 1780, 1783,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1828, 1831, 1834, 1837, 1840, 1843,
 1846, 1849, 1852, 1855, 1858, 1861, 1864, 1867, 1870, 1873,
 1876,    0,    0, 1879, 1882, 1885, 1888, 2014, 2020,    0,
 2029,    0, 2008, 2002,    0, 2005, 2035, 2011,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1996, 2026, 1999, 2119, 2125,    0, 2134,    0, 2113, 2107,
    0, 2110, 2140, 2116,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2101, 2131, 2104,    0,
    0, 2032,    0,    0, 2017,    0,    0,    0, 2224, 2230,
    0, 2239,    0, 2218, 2212,    0, 2215, 2245, 2221,    0,
    0,    0,    0,    0,    0,    0,    0, 2137,    0,    0,
 2122, 2206, 2236, 2209, 2023,    0,    0,    0,    0,    0,
    0,    0,    0, 2329, 2335,    0, 2344,    0, 2323, 2317,
    0, 2320, 2350, 2326,    0,    0,    0,    0,    0,    0,
 2128,    0, 2242,    0,    0, 2227, 2311, 2341, 2314, 2434,
 2440,    0, 2449,    0, 2428, 2422,    0, 2425, 2455, 2431,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2416, 2446, 2419, 2233,    0, 2347,    0,    0,
 2332,    0,    0,    0, 2539, 2545,    0, 2554,    0, 2533,
 2527,    0, 2530, 2560, 2536,    0,    0,    0,    0,    0,
    0,    0,    0, 2452,    0,    0, 2437, 2521, 2551, 2524,
 2338,    0,    0,    0,    0,    0,    0,    0,    0, 2788,
 2794,    0, 2803,    0, 2782, 2776,    0, 2779, 2809, 2785,
    0,    0,    0,    0,    0,    0, 2443,    0, 2557,    0,
    0, 2542, 2770, 2800, 2773,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2548,    0, 2806,    0,    0, 2791,    0,    0,    0,
    0,    0, 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954,
 1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978, 1981,    0,
    0, 1984, 1987, 1990, 1993,    0, 2797,    0, 2038, 2041,
 2044, 2047, 2050, 2053, 2056, 2059, 2062, 2065, 2068, 2071,
 2074, 2077, 2080, 2083, 2086,    0,    0, 2089, 2092, 2095,
 2098,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2143, 2146, 2149, 2152, 2155, 2158, 2161,
 2164, 2167, 2170, 2173, 2176, 2179, 2182, 2185, 2188, 2191,
    0,    0, 2194, 2197, 2200, 2203,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2248, 2251,
 2254, 2257, 2260, 2263, 2266, 2269, 2272, 2275, 2278, 2281,
 2284, 2287, 2290, 2293, 2296,    0,    0, 2299, 2302, 2305,
 2308,    0,    0,    0, 2353, 2356, 2359, 2362, 2365, 2368,
 2371, 2374, 2377, 2380, 2383, 2386, 2389, 2392, 2395, 2398,
 2401,    0,    0, 2404, 2407, 2410, 2413,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2458,
 2461, 2464, 2467, 2470, 2473, 2476, 2479, 2482, 2485, 2488,
 2491, 2494, 2497, 2500, 2503, 2506,    0,    0, 2509, 2512,
 2515, 2518,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2707, 2710, 2713, 2716, 2719, 2722,
 2725, 2728, 2731, 2734, 2737, 2740, 2743, 2746, 2749, 2752,
 2755,    0,    0, 2758, 2761, 2764, 2767, 2893, 2899,    0,
 2908,    0, 2887, 2881,    0, 2884, 2914, 2890,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2875, 2905, 2878, 3070, 3076,    0, 3085,    0, 3064, 3058,
    0, 3061, 3091, 3067,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3052, 3082, 3055,    0,
    0, 2911,    0,    0, 2896,    0,    0,    0, 3175, 3181,
    0, 3190,    0, 3169, 3163,    0, 3166, 3196, 3172,    0,
    0,    0,    0,    0,    0,    0,    0, 3088,    0,    0,
 3073, 3157, 3187, 3160, 2902,    0,    0,    0,    0,    0,
    0,    0,    0, 3280, 3286,    0, 3295,    0, 3274, 3268,
    0, 3271, 3301, 3277,    0,    0,    0,    0,    0,    0,
 3079,    0, 3193,    0,    0, 3178, 3262, 3292, 3265, 3385,
 3391,    0, 3400,    0, 3379, 3373,    0, 3376, 3406, 3382,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3367, 3397, 3370, 3184,    0, 3298,    0,    0,
 3283,    0,    0,    0, 3562, 3568,    0, 3577,    0, 3556,
 3550,    0, 3553, 3583, 3559,    0,    0,    0,    0,    0,
    0,    0,    0, 3403,    0,    0, 3388, 3544, 3574, 3547,
 3289,    0,    0,    0,    0,    0,    0,    0,    0, 3667,
 3673,    0, 3682,    0, 3661, 3655,    0, 3658, 3688, 3664,
    0,    0,    0,    0,    0,    0, 3394,    0, 3580,    0,
    0, 3565, 3649, 3679, 3652,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3571,    0, 3685,    0,    0, 3670,    0,    0,    0,
    0,    0, 2812, 2815, 2818, 2821, 2824, 2827, 2830, 2833,
 2836, 2839, 2842, 2845, 2848, 2851, 2854, 2857, 2860,    0,
    0, 2863, 2866, 2869, 2872,    0, 3676,    0, 2989, 2992,
 2995, 2998, 3001, 3004, 3007, 3010, 3013, 3016, 3019, 3022,
 3025, 3028, 3031, 3034, 3037,    0,    0, 3040, 3043, 3046,
 3049,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3094, 3097, 3100, 3103, 3106, 3109, 3112,
 3115, 3118, 3121, 3124, 3127, 3130, 3133, 3136, 3139, 3142,
    0,    0, 3145, 3148, 3151, 3154,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3199, 3202,
 3205, 3208, 3211, 3214, 3217, 3220, 3223, 3226, 3229, 3232,
 3235, 3238, 3241, 3244, 3247,    0,    0, 3250, 3253, 3256,
 3259,    0,    0,    0, 3304, 3307, 3310, 3313, 3316, 3319,
 3322, 3325, 3328, 3331, 3334, 3337, 3340, 3343, 3346, 3349,
 3352,    0,    0, 3355, 3358, 3361, 3364,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3481,
 3484, 3487, 3490, 3493, 3496, 3499, 3502, 3505, 3508, 3511,
 3514, 3517, 3520, 3523, 3526, 3529,    0,    0, 3532, 3535,
 3538, 3541,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3586, 3589, 3592, 3595, 3598, 3601,
 3604, 3607, 3610, 3613, 3616, 3619, 3622, 3625, 3628, 3631,
 3634,    0,    0, 3637, 3640, 3643, 3646, 3772, 3778,    0,
 3787,    0, 3766, 3760,    0, 3763, 3793, 3769,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3754, 3784, 3757, 4237, 4243,    0, 4252,    0, 4231, 4225,
    0, 4228, 4258, 4234,    0,    0,    0,  450,    0,    0,
    0,    0,    0,    0,    0,    0, 4219, 4249, 4222,    0,
    0, 3790,    0,    0, 3775,    0,    0,    0, 4634, 4640,
    0, 4649,    0, 4628, 4622,    0, 4625, 4655, 4631,    0,
    0,    0,    0,    0,    0,    0,    0, 4255,    0,    0,
 4240, 4616, 4646, 4619, 3781,    0,    0,    0,    0,    0,
    0,    0,    0, 4739, 4745,    0, 4754,    0, 4733, 4727,
    0, 4730, 4760, 4736,    0,    0,    0,    0,    0,    0,
 4246,    0, 4652,    0,    0, 4637, 4721, 4751, 4724,  277,
  279,    0,  282,    0,  275,  273,    0,  274,  284,  276,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  271,  281,    0, 4643,    0, 4757,    0,    0,
 4742,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1275,    0, 1278,  410,    0,
    0,    0,    0,  283,  415,    0,  278,  420,  425,  430,
 4748,    0,    0,    0,    0,  435,  440,    0, 1347,    0,
 1350,    0,    0,    0,  445,    0,    0,    0,    0, 1281,
    0,    0,    0,    0,    0,    0,  280,    0,    0,    0,
    0, 2626,    0, 2629,    0,    0,    0,    0,    0,    0,
    0,    0, 1353,    0,    0,    0,  453,  457,  461,  465,
    0,  468,  468,    0,  472, 2698,    0, 2701,    0,    0,
    0,    0,    0,    0,    0, 2632,    0,    0,    0,    0,
    0,    0, 3691, 3694, 3697, 3700, 3703, 3706, 3709, 3712,
 3715, 3718, 3721, 3724, 3727, 3730, 3733, 3736, 3739, 2704,
    0, 3742, 3745, 3748, 3751, 2980,    0, 2983, 4156, 4159,
 4162, 4165, 4168, 4171, 4174, 4177, 4180, 4183, 4186, 4189,
 4192, 4195, 4198, 4201, 4204,    0,    0, 4207, 4210, 4213,
 4216,    0, 3472,    0, 3475,    0,    0,    0,    0, 2986,
    0,    0,    0, 4553, 4556, 4559, 4562, 4565, 4568, 4571,
 4574, 4577, 4580, 4583, 4586, 4589, 4592, 4595, 4598, 4601,
    0,    0, 4604, 4607, 4610, 4613, 3478, 3859,    0, 3862,
    0,    0,    0,    0,    0,    0,    0,    0, 4658, 4661,
 4664, 4667, 4670, 4673, 4676, 4679, 4682, 4685, 4688, 4691,
 4694, 4697, 4700, 4703, 4706,    0,    0, 4709, 4712, 4715,
 4718, 3865,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270, 1212, 1215, 1218,
 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248,
 1251, 1254, 1257, 1260,    0,    0, 1263, 1266, 1269, 1272,
 1284, 1287, 1290, 1293, 1296, 1299, 1302, 1305, 1308, 1311,
 1314, 1317, 1320, 1323, 1326, 1329, 1332,    0,    0, 1335,
 1338, 1341, 1344, 2563, 2566, 2569, 2572, 2575, 2578, 2581,
 2584, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608, 2611,
    0,    0, 2614, 2617, 2620, 2623,  450, 2635, 2638, 2641,
 2644, 2647, 2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671,
 2674, 2677, 2680, 2683,    0,    0, 2686, 2689, 2692, 2695,
 3931,    0, 3934,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2917, 2920, 2923,
 2926, 2929, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953,
 2956, 2959, 2962, 2965, 3937,    0, 2968, 2971, 2974, 2977,
 4003,    0, 4006,    0, 3409, 3412, 3415, 3418, 3421, 3424,
 3427, 3430, 3433, 3436, 3439, 3442, 3445, 3448, 3451, 3454,
 3457,    0,    0, 3460, 3463, 3466, 3469,  450, 4075,    0,
 4078,    0,    0,    0, 4009,    0,    0,    0,    0, 3796,
 3799, 3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826,
 3829, 3832, 3835, 3838, 3841, 3844,    0,    0, 3847, 3850,
 3853, 3856, 4081, 4147,    0, 4150,    0,  410,    0,    0,
    0,    0,    0,  415,    0,    0,  420,  425,  430,    0,
    0, 4549,    0,    0,  435,  440, 4324,  581, 4327,    0,
  585,  589,  593,  445,    0,    0,    0, 4153,  597,  601,
    0,    0,    0,    0,    0,    0,    0,  605,    0, 4396,
    0, 4399,    0,    0,    0,    0,    0,    0,    0,    0,
 4330,    0,    0,    0,    0,  453,  457,  461,  465,    0,
  468,  468, 4468,  472, 4471,    0,    0,    0,    0,  239,
  609,  612,    0, 4402,    0,    0,    0,  242,    0,    0,
    0,    0,    0,    0,    0, 4540,    0, 4543,  410,    0,
    0,    0,    0,    0,  415,    0, 4474,  420,  425,  430,
    0,    0,    0,    0,    0,  435,  440,    0,    0,    0,
    0,    0,    0,    0,  445,    0,    0,    0,    0, 4546,
    0,    0, 3868, 3871, 3874, 3877, 3880, 3883, 3886, 3889,
 3892, 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916,    0,
    0, 3919, 3922, 3925, 3928,    0,  453,  457,  461,  465,
    0,  468,  468,    0,  472,  185,    0,  185,  185,  185,
    0,  185, 3940, 3943, 3946, 3949, 3952, 3955, 3958, 3961,
 3964, 3967, 3970, 3973, 3976, 3979, 3982, 3985, 3988,  185,
    0, 3991, 3994, 3997, 4000,    0,    0,    0,    0,    0,
 4012, 4015, 4018, 4021, 4024, 4027, 4030, 4033, 4036, 4039,
 4042, 4045, 4048, 4051, 4054, 4057, 4060,    0,  185, 4063,
 4066, 4069, 4072,    0,    0,  450,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4084, 4087, 4090, 4093, 4096,
 4099, 4102, 4105, 4108, 4111, 4114, 4117, 4120, 4123, 4126,
 4129, 4132,    0,    0, 4135, 4138, 4141, 4144, 4261, 4264,
 4267, 4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291, 4294,
 4297, 4300, 4303, 4306, 4309,    0,    0, 4312, 4315, 4318,
 4321, 4333, 4336, 4339, 4342, 4345, 4348, 4351, 4354, 4357,
 4360, 4363, 4366, 4369, 4372, 4375, 4378, 4381,  450,    0,
 4384, 4387, 4390, 4393, 4405, 4408, 4411, 4414, 4417, 4420,
 4423, 4426, 4429, 4432, 4435, 4438, 4441, 4444, 4447, 4450,
 4453,  450,    0, 4456, 4459, 4462, 4465, 4477, 4480, 4483,
 4486, 4489, 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513,
 4516, 4519, 4522, 4525,    0,    0, 4528, 4531, 4534, 4537,
    0,    0,    0,    0,    0,    0,  410,    0,    0,    0,
  450,    0,  415,    0,    0,  420,  425,  430,    0,    0,
    0,    0,    0,  435,  440,    0,    0,    0,    0,    0,
    0,    0,  445,  450,  185,    0,    0,    0,    0,    0,
  185,    0,    0,  185,  185,  185,  450,    0,    0,    0,
    0,  185,  185,    0,    0,    0,    0,    0,    0,    0,
  185,    0,    0,    0,  453,  457,  461,  465,  185,  468,
  468,    0,  472,    0,    0,    0,    0,    0,    0,  410,
    0,    0,    0,    0,    0,  415,    0,    0,  420,  425,
  430,    0,    0,    0,    0,    0,  435,  440,    0,    0,
    0,    0,  410,    0,    0,  445,    0,    0,  415,    0,
    0,  420,  425,  430,  450,    0,    0,    0,    0,  435,
  440,    0,    0,    0,    0,    0,    0,    0,  445,    0,
    0,    0,    0,    0,    0,    0,    0,  453,  457,  461,
  465,  410,  468,  468,    0,  472,    0,  415,    0,    0,
  420,  425,  430,    0,    0,    0,    0,    0,  435,  440,
  453,  457,  461,  465,  410,  468,  468,  445,  472,    0,
  415,    0,    0,  420,  425,  430,    0,  410,    0,    0,
    0,  435,  440,  415,    0,    0,  420,  425,  430,    0,
  445,    0,    0,    0,  435,  440,    0,    0,    0,  453,
  457,  461,  465,  445,  468,  468,    0,  472,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  453,  457,  461,  465,    0,  468,  468,    0,
  472,    0,    0,    0,    0,  453,  457,  461,  465,    0,
  468,  468,    0,  472,    0,  410,    0,    0,    0,    0,
    0,  415,    0,    0,  420,  425,  430,    0, 4549,    0,
    0,    0,  435,  440,  581,    0,    0,  585,  589,  593,
    0,  445, 4549,    0,    0,  597,  601,    0,  581,    0,
    0,  585,  589,  593,  605,    0,    0,    0,    0,  597,
  601,    0,    0,    0,    0,    0,    0,    0,  605,    0,
    0,    0,    0,  453,  457,  461,  465,    0,  468,  468,
    0,  472,    0,    0,    0,    0,  239,  609,  612,    0,
    0,    0,    0,    0,  242,    0,    0,    0,    0,    0,
  239,  609,  612, 4549,    0,    0,    0,    0,  242,  581,
    0,    0,  585,  589,  593,    0, 4549,    0,    0,    0,
  597,  601,  581,    0,    0,  585,  589,  593,    0,  605,
 4549,    0,    0,  597,  601,    0,  581,    0,    0,  585,
  589,  593,  605,    0,    0,    0,    0,  597,  601,    0,
    0,    0,    0,    0,    0,    0,  605,    0,    0,    0,
    0,  239,  609,  612,    0,    0,    0,    0,    0,  242,
    0,    0,    0,    0,  239,  609,  612,    0,    0,    0,
    0,    0,  242,    0,    0,    0,    0,    0,  239,  609,
  612,    0,    0,    0,    0,    0,  242,
};
static int yycheck[] = {                                      96,
    0,    1,    0,   91,  109,    1,    0,    7,   38,    9,
   10,   11,   42,    5,   18,   59,   16,   17,  115,   60,
  371,   38,   38,    5,  125,   44,   38,   40,  125,   60,
  126,  454,  257,   44,   59,   38,  474,   40,   59,   42,
   59,   60,   45,  451,   44,   60,  533,  257,   48,   44,
    5,   41,  593,   61,   44,   44,  266,  257,   69,   59,
   37,   60,   74,   44,   41,   42,   43,   44,   45,   69,
   47,   44,  272,  273,   74,   25,  258,   60,   41,  123,
   84,   44,   59,   33,   61,   44,   90,   44,   44,   93,
  513,  578,   44,  516,   41,   95,   96,   44,  123,  281,
   50,  642,  123,  511,  123,  105,  106,  107,  108,  109,
   59,   41,   59,  109,   44,  115,   93,  109,   44,   74,
   60,   59,   60,   60,  324,  125,   59,   60,  128,   38,
  125,   40,   33,   42,  123,  573,   45,   38,  561,   40,
   95,   42,  123,   98,   45,   40,   93,   97,  125,   41,
   44,   44,  125,  504,  109,  563,   59,   60,   60,  109,
   60,  257,  125,  113,   60,   58,  125,   59,  125,  125,
   41,  123,   59,   44,  597,  276,  277,  278,  125,   44,
  130,  131,  132,  133,  123,   41,   44,   43,   44,   45,
   91,  257,   44,   44,  194,  125,   91,  123,   41,   59,
   60,   44,  213,   59,   62,   61,  274,   60,  274,   59,
   60,   44,   60,  213,  126,  283,   59,  283,  218,   44,
  123,  221,  123,  223,  224,  126,   40,  315,  220,   41,
  123,  125,   44,  274,   59,  323,  123,   93,   44,  194,
  257,  257,  283,  225,  257,  227,  263,   59,  230,  266,
  267,  268,  283,   59,  257,  274,   60,  274,  275,  274,
  125,  216,  257,  123,  283,  220,  283,  217,  283,  125,
  220,  315,  123,  125,   60,  286,   60,  272,  273,  309,
  257,   93,  276,  277,  278,   41,  286,   43,   44,   45,
  123,  274,  242,  248,  249,  272,  273,   40,  315,  299,
  283,  257,  302,   59,   44,   61,  323,  315,  311,  312,
  257,  319,   41,  125,  314,   44,  272,  273,   41,  301,
  320,   44,   62,   58,   59,  272,  273,  327,  328,  324,
   59,  331,  315,   44,  274,   41,  274,   93,   44,  444,
  323,  274,   60,  283,  315,  283,   44,  324,  257,   59,
  283,  351,  323,   59,   40,   44,  257,  258,  259,  260,
  310,  458,  263,  257,   93,  266,  267,  268,  324,  125,
   59,  274,  274,  274,  275,   58,   59,  324,  272,  273,
  283,  283,  283,  284,  285,  286,  287,   93,  123,  290,
  291,  315,  257,  393,   50,  274,  125,  502,  315,  323,
  505,  257,  311,  312,  283,  257,  323,  272,  273,   40,
  311,  312,  123,  123,  274,  370,  272,  273,   74,  125,
  272,  273,   59,  283,  274,  123,  274,   59,   41,  534,
  324,   44,  432,  283,  432,  283,    0,  392,  339,  340,
  341,  385,  386,  315,  444,  257,   60,  318,  444,  320,
  321,  323,  444,  453,  274,  437,   44,  113,  458,  324,
  272,  273,  473,  283,  475,  257,  269,  270,  324,   33,
  274,   40,  324,  473,   38,  475,   40,   46,   42,  283,
   41,   45,  274,   44,  495,  440,   59,  592,  274,  444,
  274,  283,  436,   41,  444,  495,   44,  283,   59,  283,
   61,  257,  502,  608,  257,  505,  502,   38,   59,  505,
  502,   42,  324,  505,  257,   40,  272,  273,  623,   59,
  263,  274,   91,  266,  267,  268,  481,   61,  257,   60,
  283,  274,  275,  257,  534,   58,  641,  125,  534,  123,
  283,   41,  534,  272,  273,   41,   41,  502,  548,   44,
  505,  257,  502,   40,   41,  505,  274,  539,  540,  123,
   44,  125,  126,  486,  487,  283,  272,  273,  324,  551,
   40,  126,  315,  316,  317,   59,  499,   61,   93,  534,
  323,  581,  582,  257,  534,  265,  586,  587,   41,  587,
  594,   44,  592,   60,   60,  324,  592,   38,  274,   40,
  592,   42,  318,  614,  320,  321,   59,  283,  608,  257,
   41,  622,  608,   44,  614,  257,  608,  257,  324,   60,
   42,  265,  622,  623,   91,   91,  265,  623,  610,  611,
  454,  623,  257,  615,  634,  646,  634,  592,  335,  643,
   93,  641,  592,   93,  655,  641,  646,  257,   40,  641,
  632,   58,   58,  608,  654,  655,  654,   24,  608,   26,
   27,   28,   29,   30,   31,   32,   33,   60,  623,  257,
   58,   40,  125,  623,  266,  267,  268,  269,   45,   46,
   47,   48,  257,  257,  272,  273,  641,   41,   61,  513,
   44,  641,  516,  257,  258,  259,  260,  261,  262,  263,
  264,    0,  266,  267,  268,  269,  270,  257,  272,  273,
  274,  275,  276,  277,  278,  279,  276,  277,  278,  283,
  284,  285,  286,  287,  257,   41,  290,  291,   44,   41,
  322,   42,   44,  257,   33,   41,  324,  561,   44,   38,
  257,   40,   61,   42,   62,   62,   45,  311,  312,   62,
   41,  315,  316,  317,  318,   62,  320,  321,  322,  323,
  324,  316,  317,  318,  328,  320,  321,  331,  135,  136,
  334,  335,  336,  597,   41,  339,  340,  341,   38,   40,
   40,  257,  258,  259,  260,   41,   46,  126,   44,   59,
   41,   37,   38,   44,  265,   41,   42,   43,   44,   45,
   46,   47,   40,   59,  257,   61,  257,  274,  274,   40,
   62,  257,  257,   59,   40,   61,  283,  283,  257,  272,
  273,   60,   58,   62,  123,   40,  125,  126,   40,   40,
   38,   91,   41,  274,   41,  257,   42,   40,  205,  206,
  207,  263,  283,   40,  266,  267,  268,   93,  315,  315,
   40,   40,  274,  275,   42,   94,  323,  323,   40,  226,
   33,  283,   40,   40,  124,   38,   41,   40,  309,   42,
  263,  324,   45,  266,  267,  268,   38,  257,  124,  125,
   61,   61,  275,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
   59,   59,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  257,  257,
   42,  257,  315,   41,  263,  257,   44,  266,  267,  268,
  323,   40,   59,   41,  263,  274,  275,  266,  267,  268,
  260,   59,   41,   61,  283,  274,  275,   58,   41,   40,
  123,   44,   59,  126,  283,   41,   40,   40,  257,  258,
  259,  260,  261,  262,  263,  264,   59,  266,  267,  268,
  269,  270,   41,  272,  273,  274,  275,  276,  277,  278,
  279,  348,   59,   40,  283,  284,  285,  286,  287,   41,
   41,  290,  291,   44,  260,    0,   59,  123,  123,  366,
   93,  368,  316,  317,  318,    0,  320,  321,   59,   59,
   61,  257,  311,  312,   42,  382,  315,  316,  317,  318,
  257,  320,  321,  322,  323,  324,  272,  273,   44,  328,
   41,   41,  125,  331,   44,  334,  335,  336,   33,   41,
  339,  340,  341,   38,  257,   40,   60,   42,   40,   59,
   45,  274,  257,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  257,  257,  311,  312,  313,  314,  274,   62,  324,  516,
  444,  257,   38,   93,  257,  258,  259,  260,  261,  262,
  263,  264,  459,  266,  267,  268,  269,  270,   74,  272,
  273,  274,  275,  257,  257,  257,  279,  474,  458,  476,
  283,  284,  285,  286,  287,  125,   52,  290,  291,   74,
  502,   74,   74,  505,  633,  549,  493,   33,  123,   -1,
  125,  126,  282,  500,   -1,   -1,   -1,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,  320,  321,  322,
  323,  324,  534,   -1,   -1,  328,   -1,  524,  525,  526,
  527,  334,  335,  336,  257,   33,  339,  340,  341,   -1,
   38,   -1,   40,   -1,   42,   -1,  543,   45,   -1,  272,
  273,   41,   -1,   -1,   44,  257,   -1,   -1,  316,  317,
  318,  263,  320,  321,  266,  267,  268,   -1,  565,   59,
   -1,   -1,  274,  275,  263,   -1,  573,  266,  267,  268,
  592,  283,   -1,   -1,   -1,  274,  275,  123,   -1,   -1,
  126,  588,   -1,   -1,  283,   -1,  608,   -1,  257,   -1,
   -1,  324,   -1,   93,  263,   -1,   -1,  266,  267,  268,
   -1,  623,   60,  315,   62,  274,  275,  257,  316,  317,
  318,  323,  320,  321,  283,  123,  315,   -1,  126,  641,
   -1,   -1,  272,  273,  323,  125,  261,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,   94,  272,  273,  274,
  275,  276,  277,  278,  279,   -1,  315,   -1,  283,  284,
  285,  286,  287,   33,  323,  290,  291,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,  315,  316,  317,
  318,   -1,  320,  321,  324,  323,  311,  312,   -1,   -1,
  315,  316,  317,  318,   -1,  320,  321,  322,  323,  324,
   -1,   -1,   -1,  328,   -1,   -1,  331,   -1,   -1,  334,
  335,  336,   -1,   -1,  339,  340,  341,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,   -1,   -1,   -1,   -1,   -1,  274,  275,
  328,  329,  330,  331,  332,  333,   -1,  283,  284,  285,
  286,  287,   -1,  123,  290,  291,  126,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,  257,  266,  267,
  268,  269,  270,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,  272,  273,   -1,  283,  284,  285,  286,  287,
   33,   -1,  290,  291,   -1,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,  339,  340,  341,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  311,  312,   -1,   -1,  315,  316,  317,
  318,   -1,  320,  321,  322,  323,  324,   -1,   -1,   -1,
  328,   -1,   -1,   -1,  324,   -1,  334,  335,  336,   -1,
   -1,  339,  340,  341,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   37,   38,
   -1,   40,   -1,   42,   -1,   -1,   -1,   46,   47,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,   -1,   -1,   41,  279,
   -1,   44,   -1,  283,  284,  285,  286,  287,   33,   -1,
  290,  291,   91,   38,   -1,   40,   59,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
  320,  321,  322,  323,  324,  124,  282,   -1,  328,   -1,
   93,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,  339,
  340,  341,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   61,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  123,   -1,
   -1,  126,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,  264,   -1,  266,  267,  268,  269,  270,   91,  272,
  273,  274,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   33,   -1,  290,  291,   -1,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,  311,  312,
   -1,   -1,  315,  316,  317,  318,   -1,  320,  321,  322,
  323,  324,   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   59,   -1,
   61,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,  272,
  273,   -1,  257,  258,  259,  260,  261,  262,  263,  264,
   -1,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,   -1,   93,   41,  279,   -1,   44,   -1,  283,  284,
  285,  286,  287,   33,   -1,  290,  291,   -1,   38,   -1,
   40,   59,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  324,   -1,  124,  125,   -1,  311,  312,   -1,   -1,
  315,  316,  317,  318,   -1,  320,  321,  322,  323,  324,
   -1,   -1,   -1,  328,   -1,   93,   -1,   -1,   -1,  334,
  335,  336,   -1,   -1,  339,  340,  341,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,  264,   -1,  266,  267,
  268,  269,  270,   -1,  272,  273,  274,  275,   -1,   -1,
   93,  279,   -1,   -1,   -1,  283,  284,  285,  286,  287,
   33,   -1,  290,  291,   -1,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,  311,  312,   -1,  257,  315,  316,  317,
  318,   -1,  320,  321,  322,  323,  324,   -1,   -1,   -1,
  328,  272,  273,   -1,   -1,   -1,  334,  335,  336,   -1,
   -1,  339,  340,  341,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,
  123,   -1,  125,  324,  272,  273,   -1,  257,  258,  259,
  260,  261,  262,  263,  264,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,   -1,   93,   -1,  279,
   -1,   -1,   -1,  283,  284,  285,  286,  287,   33,   -1,
  290,  291,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  324,   -1,  124,  125,
   -1,  311,  312,   -1,  257,  315,  316,  317,  318,   -1,
  320,  321,  322,  323,  324,   -1,   -1,   -1,  328,  272,
  273,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,  339,
  340,  341,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   59,   -1,   61,
   -1,   -1,  263,   -1,   59,  266,  267,  268,  123,   -1,
  125,  324,   -1,  274,  275,  258,  259,  260,  261,  262,
   -1,  264,  283,   -1,   -1,   -1,  269,  270,   -1,  272,
  273,   93,   -1,  276,  277,  278,  279,   -1,   93,   -1,
   -1,  284,  285,  286,  287,   33,   -1,  290,  291,  257,
   38,   -1,   40,   -1,   42,  263,   -1,   45,  266,  267,
  268,   -1,  124,  125,   -1,   -1,  274,  275,  311,  312,
  125,  257,   -1,   -1,   -1,  283,   -1,   -1,   -1,  322,
   -1,  324,   -1,  291,   -1,  328,  272,  273,   -1,   -1,
   -1,  334,  335,  336,   -1,   33,  339,  340,  341,   37,
   38,   -1,   40,   -1,   42,   43,   44,   45,  257,   47,
   -1,   -1,   -1,   -1,  263,   -1,   -1,  266,  267,  268,
   -1,   -1,   60,   61,   62,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,  123,   -1,  125,  324,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,  264,
   -1,   -1,   -1,   91,  269,  270,   94,  272,  273,   -1,
   -1,  276,  277,  278,  279,   -1,  315,  316,  317,  284,
  285,  286,  287,   33,  323,  290,  291,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,  124,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  311,  312,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  322,   -1,  324,
  272,  273,   -1,  328,   -1,   -1,   -1,  272,  273,  334,
  335,  336,   -1,   -1,  339,  340,  341,   -1,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,   59,
   -1,   -1,  324,  123,   -1,  125,   -1,   -1,   -1,  324,
  258,  259,  260,  261,  262,   -1,  264,   -1,   -1,   -1,
   -1,  269,  270,   -1,  272,  273,   93,   -1,  276,  277,
  278,  279,   -1,   93,   -1,   -1,  284,  285,  286,  287,
   33,   -1,  290,  291,   -1,   38,   -1,   40,   -1,   42,
  263,   -1,   45,  266,  267,  268,   -1,  124,  125,   -1,
   -1,  274,  275,  311,  312,  125,   -1,   -1,   -1,   -1,
  283,   -1,   -1,   -1,  322,   -1,  324,   -1,  291,   -1,
  328,   -1,   -1,   -1,   42,   -1,  334,  335,  336,   -1,
   -1,  339,  340,  341,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,  262,   -1,  264,   -1,   -1,   40,   41,  269,
  270,   44,  272,  273,   -1,   -1,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,  284,  285,  286,  287,   33,   62,
  290,  291,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  311,  312,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  322,   -1,  324,  272,  273,   -1,  328,   -1,
   -1,   -1,  272,  273,  334,  335,  336,   -1,   -1,  339,
  340,  341,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   59,   -1,   -1,  324,  123,   -1,
   -1,   -1,   -1,   -1,  324,  258,  259,  260,  261,  262,
   -1,  264,   -1,   -1,   -1,   -1,  269,  270,   -1,  272,
  273,   93,   -1,  276,  277,  278,  279,   -1,   93,   -1,
   -1,  284,  285,  286,  287,   33,   -1,  290,  291,   -1,
   38,   -1,   40,   -1,   42,  263,   -1,   45,  266,  267,
  268,   -1,  124,  125,   -1,   -1,  274,  275,  311,  312,
  125,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,  322,
   -1,  324,   -1,  291,   -1,  328,   -1,   -1,   -1,   -1,
   -1,  334,  335,  336,   -1,   37,  339,  340,  341,   41,
   42,   43,   44,   45,   -1,   47,   -1,  315,  316,  317,
  318,   -1,  320,  321,  257,  323,   -1,   59,   -1,   61,
  263,   -1,   -1,  266,  267,  268,   -1,   -1,   -1,   -1,
   -1,  274,  275,   -1,   -1,  123,   -1,   -1,   41,   -1,
  283,   44,   -1,  258,  259,  260,  261,  262,  291,  264,
   -1,   93,   -1,   -1,  269,  270,   59,  272,  273,   -1,
   -1,  276,  277,  278,  279,   -1,   -1,   -1,   -1,  284,
  285,  286,  287,   33,   -1,  290,  291,   -1,   38,   -1,
   40,   41,   42,  125,   -1,   45,   -1,   -1,  263,   -1,
   93,  266,  267,  268,   -1,  257,  311,  312,   -1,  274,
  275,   -1,  257,   -1,   -1,   -1,   -1,  322,  283,  324,
  272,  273,   -1,  328,   -1,   -1,   -1,  272,  273,  334,
  335,  336,  125,   -1,  339,  340,  341,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  315,   42,   -1,   -1,   45,   -1,   -1,   -1,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,  324,  123,   44,   -1,  126,   -1,   -1,  324,
  258,  259,  260,  261,  262,   -1,  264,   -1,   -1,   59,
   -1,  269,  270,   -1,  272,  273,   -1,   -1,   -1,   -1,
   41,  279,   93,   44,   -1,   -1,  284,  285,  286,  287,
   33,   -1,  290,  291,   -1,   38,   -1,   40,   59,   42,
   -1,   -1,   45,   93,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  311,  312,  126,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,
  328,   -1,   93,   -1,   -1,  125,  334,  335,  336,   -1,
   -1,  339,  340,  341,  257,   -1,   -1,   -1,   41,   -1,
   93,   44,  257,   -1,   -1,   -1,   -1,   -1,  263,  272,
  273,  266,  267,  268,  125,   -1,   59,   -1,   -1,  274,
  275,   -1,  324,   -1,   -1,   -1,   -1,   -1,  283,   -1,
  123,   -1,   -1,  126,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,  263,   33,   -1,  266,  267,  268,   38,
   93,   40,   -1,   42,  274,  275,   45,   -1,   -1,   -1,
  315,  324,   -1,  283,  284,  285,  286,  287,  323,   -1,
  290,  291,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   38,   -1,  125,  263,   42,   -1,  266,  267,  268,   -1,
   -1,  311,  312,   -1,  274,  275,  257,  258,  259,  260,
   -1,   -1,  263,  283,   93,  266,  267,  268,   -1,   -1,
   -1,   -1,   -1,  274,  275,   -1,   -1,  257,   -1,  339,
  340,  341,  283,  284,  285,  286,  287,   -1,   -1,  290,
  291,   33,  272,  273,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,  257,   -1,   -1,   -1,
  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,   -1,   -1,  339,  340,
  341,  274,  275,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   -1,  290,  291,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,  324,  257,   -1,   -1,  257,  311,  312,
   -1,  123,   -1,  263,  126,   -1,  266,  267,  268,  272,
  273,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   33,   -1,  339,  340,  341,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,   -1,  263,  315,   -1,  266,  267,  268,
   -1,  324,   -1,  323,   -1,  274,  275,   -1,   -1,  123,
   -1,   -1,  126,   -1,  283,  284,  285,  286,  287,  257,
   -1,  290,  291,   -1,   -1,  263,   -1,   -1,  266,  267,
  268,   -1,   -1,   -1,   -1,   -1,  274,  275,  257,   -1,
   -1,   -1,  311,  312,  263,  283,   -1,  266,  267,  268,
   -1,   -1,  271,   -1,  123,  274,  275,  126,   -1,   38,
   -1,   40,   41,   -1,  283,   44,   -1,   -1,   -1,   -1,
  339,  340,  341,   -1,   -1,  257,  258,  259,  260,   -1,
   -1,  263,   -1,   62,  266,  267,  268,   -1,   -1,  257,
   -1,   -1,  274,  275,   -1,  263,   -1,   -1,  266,  267,
  268,  283,  284,  285,  286,  287,  274,  275,  290,  291,
   41,   -1,   91,   44,   -1,  283,  257,   -1,   -1,   -1,
   -1,   60,  263,   62,   -1,  266,  267,  268,   59,  311,
  312,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  283,  257,  258,  259,  260,   -1,   -1,  263,
   -1,   -1,  266,  267,  268,   94,   -1,  339,  340,  341,
  274,  275,   93,   -1,   -1,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,  287,   -1,   -1,  290,  291,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,  258,
  259,  260,   -1,   -1,  125,   -1,   -1,  311,  312,   -1,
   59,   -1,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  285,  286,  287,   -1,
   -1,  290,  291,   -1,   -1,  339,  340,  341,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  311,  312,   -1,   -1,  315,   -1,   -1,   -1,
   -1,   -1,   37,   38,  323,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,  123,  124,  125,   -1,   -1,   -1,
  339,  340,  341,   -1,   59,   -1,   61,   62,  257,   -1,
   -1,   -1,   -1,   -1,  263,   -1,   -1,  266,  267,  268,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   91,   -1,   93,   94,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,  257,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,  315,   -1,  123,  124,
  125,  272,  273,   -1,  323,   -1,   59,   -1,   61,   62,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  257,   91,   -1,
   93,   94,   -1,  263,   -1,   -1,  266,  267,  268,   -1,
   -1,   -1,   -1,  324,  274,  275,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  283,  263,   -1,   -1,  266,  267,  268,
  123,  124,  125,  272,  273,   -1,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,   -1,  311,  312,  313,  314,  315,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,   37,
   38,   -1,  257,   41,   42,   43,   44,   45,  263,   47,
   -1,  266,  267,  268,   -1,   -1,   -1,  272,  273,   -1,
  275,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,   93,  311,  312,  313,  314,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,
   -1,   37,   38,   -1,  257,   41,   42,   43,   44,   45,
  263,   47,   -1,  266,  267,  268,  124,  125,   -1,  272,
  273,   -1,  275,   59,   -1,   61,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   93,  311,  312,
  313,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,  124,  125,
   41,   -1,   -1,   44,   59,   -1,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   59,   -1,
  263,   -1,   -1,  266,  267,  268,   -1,   -1,   -1,   -1,
   -1,  274,  275,   -1,   -1,   -1,   91,   -1,   93,   94,
  283,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   93,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   59,   -1,   61,   62,   -1,  123,  124,
  125,   -1,  315,   -1,  272,  273,  257,   -1,   -1,   -1,
  323,   -1,  263,   -1,  125,  266,  267,  268,   -1,   -1,
   -1,   -1,   -1,  274,  275,   91,   -1,   93,   94,   -1,
   37,   38,  283,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   37,   -1,   -1,   -1,   41,   42,   43,
   44,   45,   59,   47,   61,   62,  324,  123,  124,  125,
   -1,  257,   -1,   -1,  257,   59,   -1,   61,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  272,  273,   -1,   -1,
   -1,  274,  275,   -1,   91,   -1,   93,   94,   -1,   -1,
  283,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   93,
  263,   -1,   -1,  266,  267,  268,   -1,   -1,   -1,   -1,
   -1,  274,  275,   -1,   -1,   -1,  123,  124,  125,   -1,
  283,   -1,  315,  316,  317,   -1,   -1,   -1,  324,   37,
  323,  125,  257,   41,   42,   43,   44,   45,  263,   47,
   -1,  266,  267,  268,   -1,   -1,  257,  272,  273,   -1,
  275,   59,  315,   61,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  272,  273,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,   93,  311,  312,  313,  314,
  315,  257,   41,   -1,   -1,   44,   -1,  263,  323,  324,
  266,  267,  268,   -1,   -1,   -1,  272,  273,   -1,  275,
   59,   -1,   -1,  324,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,   93,  311,  312,  313,  314,  315,
  257,   -1,   -1,   -1,   -1,   -1,  263,  323,  324,  266,
  267,  268,   -1,  257,   -1,  272,  273,   -1,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  272,  273,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,   -1,  311,  312,  313,  314,  315,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  323,  324,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
  324,   37,   -1,   -1,   -1,   41,   42,   43,   44,   45,
   59,   47,   61,   62,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  257,   59,   -1,   61,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,  272,  273,   -1,   -1,   -1,  274,
  275,   -1,   91,   -1,   93,   94,   37,   38,  283,   40,
   41,   42,   43,   44,   45,   46,   47,   93,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   59,   60,
   61,   62,   -1,  257,  123,  124,  125,   -1,  257,  263,
   -1,   59,  266,  267,  268,   -1,  324,   -1,   -1,  125,
  274,  275,   -1,  272,  273,   -1,   -1,   -1,   -1,  283,
   91,   -1,   93,   94,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   93,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   59,   60,   61,   62,
   -1,  257,  123,  124,  125,   -1,   -1,  263,   59,   -1,
  266,  267,  268,   -1,   -1,  324,   -1,  125,  274,  275,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  283,   91,  263,
   93,   94,  266,  267,  268,   -1,   -1,  257,   -1,   -1,
  274,  275,   93,  263,   -1,   -1,  266,  267,  268,  283,
   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,  257,
  123,  124,  125,  283,   -1,  263,   -1,   -1,  266,  267,
  268,   -1,   -1,   -1,  125,   -1,  274,  275,  257,   41,
   -1,   -1,   44,   -1,  263,  283,   -1,  266,  267,  268,
   -1,  257,   -1,  272,  273,   -1,  275,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,   93,  311,  312,  313,  314,  315,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,  324,   -1,   -1,   -1,  257,
   -1,  272,  273,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,  125,  272,  273,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,   -1,
  311,  312,  313,  314,  315,   -1,   -1,   -1,   -1,   -1,
   -1,   38,  323,  324,   -1,   42,  257,   -1,   -1,  272,
  273,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,  272,  273,   60,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
  313,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,  324,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,  324,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   37,
   -1,   -1,   -1,   41,   -1,   43,   44,   -1,   46,   47,
  272,  273,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,   -1,   -1,
   41,   -1,   43,   44,   -1,   46,   47,   -1,   -1,  124,
  125,   -1,   -1,   91,   -1,   93,   94,  257,   59,   60,
   61,   62,  324,  263,   -1,   -1,  266,  267,  268,   -1,
   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,  124,  125,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,  257,   38,   -1,   40,
   41,   42,  263,   44,   -1,  266,  267,  268,   -1,   -1,
   -1,   -1,   38,  274,  275,   -1,   42,   -1,   -1,   -1,
  257,   62,  283,  124,  125,   -1,  263,   -1,   -1,  266,
  267,  268,   -1,   59,   60,   -1,   38,   -1,  275,   -1,
   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   38,   -1,   40,   41,   -1,   -1,   44,   60,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  309,   -1,   -1,   62,   -1,   -1,  315,  316,
  317,  318,  257,  320,  321,  257,  323,   -1,   -1,   -1,
   -1,  263,   -1,   -1,  266,  267,  268,  272,  273,   -1,
   -1,   -1,  274,  275,   91,   -1,   -1,   -1,   -1,   -1,
   -1,  283,   -1,   -1,   -1,   -1,   -1,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  272,  273,  311,  312,  313,  314,
   -1,   -1,   -1,  315,  316,  317,   -1,   -1,   -1,  324,
   -1,  323,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  272,  273,   -1,   -1,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,   -1,   -1,
   -1,   -1,  313,  314,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,  263,  324,   -1,  266,  267,  268,   -1,   -1,
   -1,   -1,   -1,   -1,  275,   40,   41,  263,   -1,   44,
  266,  267,  268,   -1,   -1,   -1,   -1,   -1,   -1,  275,
  291,   41,   -1,   -1,   44,   -1,   -1,   62,   -1,   41,
   -1,  263,   44,   -1,  266,  267,  268,   -1,  309,   59,
  257,   40,   41,  275,  315,   44,  263,   59,   -1,  266,
  267,  268,  323,  309,   -1,   -1,   91,  274,  275,  315,
  316,  317,  318,   62,  320,  321,  283,  323,   -1,   -1,
   -1,   -1,   -1,   93,  291,   -1,   -1,  309,   -1,   -1,
   -1,   93,   -1,  315,  316,  317,  318,   -1,  320,  321,
   41,  323,   91,   44,   37,   38,   -1,   -1,  315,   42,
   43,   44,   45,   46,   47,  125,  323,   41,   59,   41,
   44,   -1,   44,  125,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   33,   93,
   -1,   93,   37,   38,   -1,   40,   -1,   42,   43,   44,
   45,   -1,   47,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  125,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,   -1,   -1,   -1,  257,   -1,  274,
  275,   -1,   -1,   -1,   -1,  257,   -1,   -1,  283,  124,
   -1,  126,  272,  273,   -1,   -1,  291,   -1,  257,   -1,
  272,  273,   -1,   -1,  263,   -1,   -1,  266,  267,  268,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
  315,   -1,   -1,   -1,  283,   -1,   -1,   -1,  323,   -1,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,  257,   -1,   -1,   -1,
   -1,   -1,  324,   -1,   -1,   -1,  315,   -1,   -1,   -1,
   -1,  272,  273,  257,  323,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  272,  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
  313,  314,   -1,  324,   -1,  318,   -1,  320,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
  324,   40,  324,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
   -1,   -1,   91,   37,   38,   94,   -1,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   37,
   38,  126,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,  124,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,   -1,   -1,   -1,  124,   -1,  274,
  275,   -1,   -1,   91,  283,   -1,   94,   -1,  283,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,   -1,  311,  312,  313,  314,  124,   -1,   -1,   -1,
  315,  316,  317,  318,   -1,  320,  321,   -1,  323,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  124,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   -1,   -1,   40,   -1,   -1,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   62,  124,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  124,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  124,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  124,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  124,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   -1,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,  257,   -1,
   -1,   -1,   -1,   91,  263,   -1,   94,  266,  267,  268,
  124,   -1,   -1,   -1,   -1,  274,  275,   -1,   60,   -1,
   62,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,  315,  316,  317,  318,
   -1,  320,  321,   -1,  323,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   94,
   -1,  311,  312,  313,  314,   60,   -1,   62,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   94,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,   94,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,   94,   -1,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,  311,  312,  313,  314,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,   -1,   -1,  311,
  312,  313,  314,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  311,  312,  313,  314,  126,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,  311,  312,  313,  314,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   94,   -1,  311,  312,  313,  314,
   60,   -1,   62,   -1,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,  311,  312,  313,  314,  126,   60,   -1,
   62,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,  311,  312,
  313,  314,   94,   60,   -1,   62,   -1,  257,   -1,   -1,
   -1,   -1,   -1,  263,   -1,   -1,  266,  267,  268,   -1,
   -1,  257,   -1,   -1,  274,  275,   60,  263,   62,   -1,
  266,  267,  268,  283,   -1,   -1,   -1,   94,  274,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,  315,  316,  317,  318,   -1,
  320,  321,   60,  323,   62,   -1,   -1,   -1,   -1,  315,
  316,  317,   -1,   94,   -1,   -1,   -1,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,  257,   -1,
   -1,   -1,   -1,   -1,  263,   -1,   94,  266,  267,  268,
   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   94,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  315,  316,  317,  318,
   -1,  320,  321,   -1,  323,   38,   -1,   40,   41,   42,
   -1,   44,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   62,
   -1,  311,  312,  313,  314,   -1,   -1,   -1,   -1,   -1,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,   -1,   91,  311,
  312,  313,  314,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,   -1,  311,  312,  313,  314,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,   -1,  311,  312,  313,
  314,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  126,   -1,
  311,  312,  313,  314,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  126,   -1,  311,  312,  313,  314,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  126,   -1,  263,   -1,   -1,  266,  267,  268,   -1,   -1,
   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  283,  126,  257,   -1,   -1,   -1,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  126,   -1,   -1,   -1,
   -1,  274,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,   -1,   -1,   -1,  315,  316,  317,  318,  291,  320,
  321,   -1,  323,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,  263,   -1,   -1,  266,  267,
  268,   -1,   -1,   -1,   -1,   -1,  274,  275,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  283,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,  126,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,  317,
  318,  257,  320,  321,   -1,  323,   -1,  263,   -1,   -1,
  266,  267,  268,   -1,   -1,   -1,   -1,   -1,  274,  275,
  315,  316,  317,  318,  257,  320,  321,  283,  323,   -1,
  263,   -1,   -1,  266,  267,  268,   -1,  257,   -1,   -1,
   -1,  274,  275,  263,   -1,   -1,  266,  267,  268,   -1,
  283,   -1,   -1,   -1,  274,  275,   -1,   -1,   -1,  315,
  316,  317,  318,  283,  320,  321,   -1,  323,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,  316,  317,  318,   -1,  320,  321,   -1,
  323,   -1,   -1,   -1,   -1,  315,  316,  317,  318,   -1,
  320,  321,   -1,  323,   -1,  257,   -1,   -1,   -1,   -1,
   -1,  263,   -1,   -1,  266,  267,  268,   -1,  257,   -1,
   -1,   -1,  274,  275,  263,   -1,   -1,  266,  267,  268,
   -1,  283,  257,   -1,   -1,  274,  275,   -1,  263,   -1,
   -1,  266,  267,  268,  283,   -1,   -1,   -1,   -1,  274,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,
   -1,   -1,   -1,  315,  316,  317,  318,   -1,  320,  321,
   -1,  323,   -1,   -1,   -1,   -1,  315,  316,  317,   -1,
   -1,   -1,   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,
  315,  316,  317,  257,   -1,   -1,   -1,   -1,  323,  263,
   -1,   -1,  266,  267,  268,   -1,  257,   -1,   -1,   -1,
  274,  275,  263,   -1,   -1,  266,  267,  268,   -1,  283,
  257,   -1,   -1,  274,  275,   -1,  263,   -1,   -1,  266,
  267,  268,  283,   -1,   -1,   -1,   -1,  274,  275,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,
   -1,  315,  316,  317,   -1,   -1,   -1,   -1,   -1,  323,
   -1,   -1,   -1,   -1,  315,  316,  317,   -1,   -1,   -1,
   -1,   -1,  323,   -1,   -1,   -1,   -1,   -1,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,  323,
};
static int yyctable[] = {                                      1,
    2,  175,  185,  253,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,   -1,
    7,    2,  175,  185,  253,   -1,    8,    2,   -1,    9,
    2,  175,  185,  253,   -1,   10,    2,  175,  185,  253,
   -1,   11,    2,  175,  185,  253,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,   -1,   16,
    2,  175,  185,  253,   -1,   17,    2,  175,  185,  253,
   -1,   18,    2,   -1,   19,    2,  175,  185,  253,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,   -1,   31,    2,  175,   -1,   32,    2,   -1,
   33,    2,   -1,   34,    2,  175,  253,   -1,   35,    2,
  175,  253,   -1,   36,    2,  175,  253,   -1,   37,    2,
  175,  253,   -1,    2,  175,  253,   -1,   38,    2,   -1,
   39,    2,  175,  253,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   46,    2,   -1,   47,    2,   -1,   48,
    2,   -1,  104,  185,  254,   -1,    7,  185,  254,   -1,
  105,  185,  254,   -1,  106,  185,  254,   -1,  107,  185,
  254,   -1,  108,   62,  185,  254,   -1,   17,  185,  254,
   -1,   19,   62,  185,  254,   -1,  109,   62,   -1,   34,
  254,   -1,   35,  254,   -1,   36,  254,   -1,   39,  254,
   -1,  112,  185,  253,   -1,  185,  253,   -1,   34,  253,
   -1,   39,  253,   -1,  117,   65,   -1,    7,   65,   -1,
  105,   65,   -1,  106,   65,   -1,  107,   65,   -1,   16,
   65,   -1,   17,   65,   -1,   19,   65,   -1,  117,  239,
   -1,    7,  239,   -1,  105,  239,   -1,  106,  239,   -1,
  107,  239,   -1,   16,  239,   -1,   17,  239,   -1,   19,
  239,   -1,  117,  240,   -1,    7,  240,   -1,  105,  240,
   -1,  106,  240,   -1,  107,  240,   -1,   16,  240,   -1,
   17,  240,   -1,   19,  240,   -1,  117,  241,   -1,    7,
  241,   -1,  105,  241,   -1,  106,  241,   -1,  107,  241,
   -1,   16,  241,   -1,   17,  241,   -1,   19,  241,   -1,
  117,   67,   -1,    7,   67,   -1,  105,   67,   -1,  106,
   67,   -1,  107,   67,   -1,   16,   67,   -1,   17,   67,
   -1,   19,   67,   -1,  117,  323,   -1,   26,  323,   -1,
   27,  323,   -1,   28,  323,   -1,   29,  323,   -1,   30,
  323,   -1,   33,  323,   -1,  117,  185,   -1,    7,  185,
   -1,  105,  185,   -1,  106,  185,   -1,  107,  185,   -1,
   16,  185,   -1,   17,  185,   -1,   19,  185,   -1,    1,
  175,  185,  253,   -1,    7,  175,  185,  253,   -1,    9,
  175,  185,  253,   -1,   10,  175,  185,  253,   -1,   11,
  175,  185,  253,   -1,   16,  175,  185,  253,   -1,   17,
  175,  185,  253,   -1,   19,  175,  185,  253,   -1,   31,
  175,   -1,   34,  175,  253,   -1,   35,  175,  253,   -1,
   36,  175,  253,   -1,   37,  175,  253,   -1,  175,  253,
   -1,   39,  175,  253,   -1,  117,  321,   -1,   26,  321,
   -1,   27,  321,   -1,   28,  321,   -1,   29,  321,   -1,
   30,  321,   -1,   33,  321,   -1,  175,  185,   -1,   34,
  175,   -1,   39,  175,   -1,  220,  126,   -1,   75,  126,
   -1,  241,  175,  253,   -1,    7,  175,  253,   -1,    9,
  175,  253,   -1,   10,  175,  253,   -1,   11,  175,  253,
   -1,   16,  175,  253,   -1,   17,  175,  253,   -1,   19,
  175,  253,   -1,  286,   16,   -1,  298,  253,   -1,    7,
  253,   -1,  105,  253,   -1,  106,  253,   -1,  107,  253,
   -1,   16,  253,   -1,   17,  253,   -1,   19,  253,   -1,
  303,  253,   -1,   62,  256,   -1,  313,  185,  253,   -1,
    7,  185,  253,   -1,  105,  185,  253,   -1,  106,  185,
  253,   -1,  107,  185,  253,   -1,   16,  185,  253,   -1,
   17,  185,  253,   -1,   19,  185,  253,   -1,   35,  253,
   -1,   36,  253,   -1,  320,   75,   -1,  219,   75,   -1,
  322,  254,   -1,  320,   66,   -1,  219,   66,   -1,  220,
   66,   -1,  320,   69,   -1,  219,   69,   -1,  220,   69,
   -1,  320,   70,   -1,  219,   70,   -1,  220,   70,   -1,
  320,   71,   -1,  219,   71,   -1,  220,   71,   -1,  320,
   63,   -1,  219,   63,   -1,  220,   63,   -1,  320,   68,
   -1,  219,   68,   -1,  220,   68,   -1,  250,  322,   -1,
  251,  322,   -1,  252,  322,   -1,  253,  322,   -1,  254,
  322,   -1,  255,  322,   -1,  256,  322,   -1,  257,  322,
   -1,  258,  322,   -1,  259,  322,   -1,  260,  322,   -1,
  261,  322,   -1,  262,  322,   -1,  263,  322,   -1,  264,
  322,   -1,  265,  322,   -1,  266,  322,   -1,  267,  322,
   -1,  268,  322,   -1,  269,  322,   -1,  270,  322,   -1,
  271,  322,   -1,  272,  322,   -1,  273,  322,   -1,  274,
  322,   -1,  275,  322,   -1,  276,  322,   -1,  277,  322,
   -1,  278,  322,   -1,  279,  322,   -1,  280,  322,   -1,
  281,  322,   -1,  282,  322,   -1,  283,  322,   -1,  284,
  322,   -1,  250,  273,   -1,  251,  273,   -1,  252,  273,
   -1,  253,  273,   -1,  254,  273,   -1,  255,  273,   -1,
  256,  273,   -1,  257,  273,   -1,  258,  273,   -1,  259,
  273,   -1,  260,  273,   -1,  261,  273,   -1,  262,  273,
   -1,  263,  273,   -1,  264,  273,   -1,  265,  273,   -1,
  266,  273,   -1,  267,  273,   -1,  268,  273,   -1,  269,
  273,   -1,  270,  273,   -1,  271,  273,   -1,  272,  273,
   -1,  273,  273,   -1,  274,  273,   -1,  275,  273,   -1,
  276,  273,   -1,  277,  273,   -1,  278,  273,   -1,  279,
  273,   -1,  280,  273,   -1,  281,  273,   -1,  282,  273,
   -1,  283,  273,   -1,  284,  273,   -1,  250,  275,   -1,
  251,  275,   -1,  252,  275,   -1,  253,  275,   -1,  254,
  275,   -1,  255,  275,   -1,  256,  275,   -1,  257,  275,
   -1,  258,  275,   -1,  259,  275,   -1,  260,  275,   -1,
  261,  275,   -1,  262,  275,   -1,  263,  275,   -1,  264,
  275,   -1,  265,  275,   -1,  266,  275,   -1,  267,  275,
   -1,  268,  275,   -1,  269,  275,   -1,  270,  275,   -1,
  271,  275,   -1,  272,  275,   -1,  273,  275,   -1,  274,
  275,   -1,  275,  275,   -1,  276,  275,   -1,  277,  275,
   -1,  278,  275,   -1,  279,  275,   -1,  280,  275,   -1,
  281,  275,   -1,  282,  275,   -1,  283,  275,   -1,  284,
  275,   -1,  250,  268,   -1,  251,  268,   -1,  252,  268,
   -1,  253,  268,   -1,  254,  268,   -1,  255,  268,   -1,
  256,  268,   -1,  257,  268,   -1,  258,  268,   -1,  259,
  268,   -1,  260,  268,   -1,  261,  268,   -1,  262,  268,
   -1,  263,  268,   -1,  264,  268,   -1,  265,  268,   -1,
  266,  268,   -1,  267,  268,   -1,  268,  268,   -1,  269,
  268,   -1,  270,  268,   -1,  271,  268,   -1,  272,  268,
   -1,  278,  268,   -1,  250,  271,   -1,  251,  271,   -1,
  252,  271,   -1,  253,  271,   -1,  254,  271,   -1,  255,
  271,   -1,  256,  271,   -1,  257,  271,   -1,  258,  271,
   -1,  259,  271,   -1,  260,  271,   -1,  261,  271,   -1,
  262,  271,   -1,  263,  271,   -1,  264,  271,   -1,  265,
  271,   -1,  266,  271,   -1,  267,  271,   -1,  268,  271,
   -1,  269,  271,   -1,  270,  271,   -1,  271,  271,   -1,
  272,  271,   -1,  278,  271,   -1,  250,  272,   -1,  251,
  272,   -1,  252,  272,   -1,  253,  272,   -1,  254,  272,
   -1,  255,  272,   -1,  256,  272,   -1,  257,  272,   -1,
  258,  272,   -1,  259,  272,   -1,  260,  272,   -1,  261,
  272,   -1,  262,  272,   -1,  263,  272,   -1,  264,  272,
   -1,  265,  272,   -1,  266,  272,   -1,  267,  272,   -1,
  268,  272,   -1,  269,  272,   -1,  270,  272,   -1,  271,
  272,   -1,  272,  272,   -1,  278,  272,   -1,  347,   62,
   -1,  250,  269,   -1,  251,  269,   -1,  252,  269,   -1,
  253,  269,   -1,  254,  269,   -1,  255,  269,   -1,  256,
  269,   -1,  257,  269,   -1,  258,  269,   -1,  259,  269,
   -1,  260,  269,   -1,  261,  269,   -1,  262,  269,   -1,
  263,  269,   -1,  264,  269,   -1,  265,  269,   -1,  266,
  269,   -1,  267,  269,   -1,  268,  269,   -1,  269,  269,
   -1,  270,  269,   -1,  271,  269,   -1,  272,  269,   -1,
  278,  269,   -1,  250,  270,   -1,  251,  270,   -1,  252,
  270,   -1,  253,  270,   -1,  254,  270,   -1,  255,  270,
   -1,  256,  270,   -1,  257,  270,   -1,  258,  270,   -1,
  259,  270,   -1,  260,  270,   -1,  261,  270,   -1,  262,
  270,   -1,  263,  270,   -1,  264,  270,   -1,  265,  270,
   -1,  266,  270,   -1,  267,  270,   -1,  268,  270,   -1,
  269,  270,   -1,  270,  270,   -1,  271,  270,   -1,  272,
  270,   -1,  278,  270,   -1,  250,  317,   -1,  251,  317,
   -1,  252,  317,   -1,  253,  317,   -1,  254,  317,   -1,
  255,  317,   -1,  256,  317,   -1,  257,  317,   -1,  258,
  317,   -1,  259,  317,   -1,  260,  317,   -1,  261,  317,
   -1,  262,  317,   -1,  263,  317,   -1,  264,  317,   -1,
  265,  317,   -1,  266,  317,   -1,  267,  317,   -1,  268,
  317,   -1,  269,  317,   -1,  270,  317,   -1,  271,  317,
   -1,  272,  317,   -1,  273,  317,   -1,  274,  317,   -1,
  275,  317,   -1,  276,  317,   -1,  277,  317,   -1,  278,
  317,   -1,  279,  317,   -1,  280,  317,   -1,  281,  317,
   -1,  282,  317,   -1,  283,  317,   -1,  284,  317,   -1,
  250,  318,   -1,  251,  318,   -1,  252,  318,   -1,  253,
  318,   -1,  254,  318,   -1,  255,  318,   -1,  256,  318,
   -1,  257,  318,   -1,  258,  318,   -1,  259,  318,   -1,
  260,  318,   -1,  261,  318,   -1,  262,  318,   -1,  263,
  318,   -1,  264,  318,   -1,  265,  318,   -1,  266,  318,
   -1,  267,  318,   -1,  268,  318,   -1,  269,  318,   -1,
  270,  318,   -1,  271,  318,   -1,  272,  318,   -1,  273,
  318,   -1,  274,  318,   -1,  275,  318,   -1,  276,  318,
   -1,  277,  318,   -1,  278,  318,   -1,  279,  318,   -1,
  280,  318,   -1,  281,  318,   -1,  282,  318,   -1,  283,
  318,   -1,  284,  318,   -1,  250,  320,   -1,  251,  320,
   -1,  252,  320,   -1,  253,  320,   -1,  254,  320,   -1,
  255,  320,   -1,  256,  320,   -1,  257,  320,   -1,  258,
  320,   -1,  259,  320,   -1,  260,  320,   -1,  261,  320,
   -1,  262,  320,   -1,  263,  320,   -1,  264,  320,   -1,
  265,  320,   -1,  266,  320,   -1,  267,  320,   -1,  268,
  320,   -1,  269,  320,   -1,  270,  320,   -1,  271,  320,
   -1,  272,  320,   -1,  273,  320,   -1,  274,  320,   -1,
  275,  320,   -1,  276,  320,   -1,  277,  320,   -1,  278,
  320,   -1,  279,  320,   -1,  280,  320,   -1,  281,  320,
   -1,  282,  320,   -1,  283,  320,   -1,  284,  320,   -1,
  112,  253,   -1,   34,  185,   -1,   39,  185,   -1,  391,
   62,  254,   -1,   62,  254,   -1,  198,  199,   -1,  291,
  198,   -1,  323,  196,   -1,  117,  252,   -1,  468,   45,
   -1,  469,   45,   -1,  470,   45,   -1,  471,   45,   -1,
  482,   62,   -1,  320,   64,   -1,  219,   64,   -1,  220,
   64,   -1,  250,  288,   -1,  251,  288,   -1,  252,  288,
   -1,  253,  288,   -1,  254,  288,   -1,  255,  288,   -1,
  256,  288,   -1,  257,  288,   -1,  258,  288,   -1,  259,
  288,   -1,  260,  288,   -1,  261,  288,   -1,  262,  288,
   -1,  263,  288,   -1,  264,  288,   -1,  265,  288,   -1,
  266,  288,   -1,  267,  288,   -1,  268,  288,   -1,  269,
  288,   -1,  270,  288,   -1,  271,  288,   -1,  272,  288,
   -1,  273,  288,   -1,  274,  288,   -1,  275,  288,   -1,
  276,  288,   -1,  277,  288,   -1,  278,  288,   -1,  279,
  288,   -1,  280,  288,   -1,  281,  288,   -1,  282,  288,
   -1,  283,  288,   -1,  284,  288,   -1,  250,  289,   -1,
  251,  289,   -1,  252,  289,   -1,  253,  289,   -1,  254,
  289,   -1,  255,  289,   -1,  256,  289,   -1,  257,  289,
   -1,  258,  289,   -1,  259,  289,   -1,  260,  289,   -1,
  261,  289,   -1,  262,  289,   -1,  263,  289,   -1,  264,
  289,   -1,  265,  289,   -1,  266,  289,   -1,  267,  289,
   -1,  268,  289,   -1,  269,  289,   -1,  270,  289,   -1,
  271,  289,   -1,  272,  289,   -1,  273,  289,   -1,  274,
  289,   -1,  275,  289,   -1,  276,  289,   -1,  277,  289,
   -1,  278,  289,   -1,  279,  289,   -1,  280,  289,   -1,
  281,  289,   -1,  282,  289,   -1,  283,  289,   -1,  284,
  289,   -1,  250,  290,   -1,  251,  290,   -1,  252,  290,
   -1,  253,  290,   -1,  254,  290,   -1,  255,  290,   -1,
  256,  290,   -1,  257,  290,   -1,  258,  290,   -1,  259,
  290,   -1,  260,  290,   -1,  261,  290,   -1,  262,  290,
   -1,  263,  290,   -1,  264,  290,   -1,  265,  290,   -1,
  266,  290,   -1,  267,  290,   -1,  268,  290,   -1,  269,
  290,   -1,  270,  290,   -1,  271,  290,   -1,  272,  290,
   -1,  273,  290,   -1,  274,  290,   -1,  275,  290,   -1,
  276,  290,   -1,  277,  290,   -1,  278,  290,   -1,  279,
  290,   -1,  280,  290,   -1,  281,  290,   -1,  282,  290,
   -1,  283,  290,   -1,  284,  290,   -1,  250,  291,   -1,
  251,  291,   -1,  252,  291,   -1,  253,  291,   -1,  254,
  291,   -1,  255,  291,   -1,  256,  291,   -1,  257,  291,
   -1,  258,  291,   -1,  259,  291,   -1,  260,  291,   -1,
  261,  291,   -1,  262,  291,   -1,  263,  291,   -1,  264,
  291,   -1,  265,  291,   -1,  266,  291,   -1,  267,  291,
   -1,  268,  291,   -1,  269,  291,   -1,  270,  291,   -1,
  271,  291,   -1,  272,  291,   -1,  273,  291,   -1,  274,
  291,   -1,  275,  291,   -1,  276,  291,   -1,  277,  291,
   -1,  278,  291,   -1,  279,  291,   -1,  280,  291,   -1,
  281,  291,   -1,  282,  291,   -1,  283,  291,   -1,  284,
  291,   -1,  250,  292,   -1,  251,  292,   -1,  252,  292,
   -1,  253,  292,   -1,  254,  292,   -1,  255,  292,   -1,
  256,  292,   -1,  257,  292,   -1,  258,  292,   -1,  259,
  292,   -1,  260,  292,   -1,  261,  292,   -1,  262,  292,
   -1,  263,  292,   -1,  264,  292,   -1,  265,  292,   -1,
  266,  292,   -1,  267,  292,   -1,  268,  292,   -1,  269,
  292,   -1,  270,  292,   -1,  271,  292,   -1,  272,  292,
   -1,  273,  292,   -1,  274,  292,   -1,  275,  292,   -1,
  276,  292,   -1,  277,  292,   -1,  278,  292,   -1,  279,
  292,   -1,  280,  292,   -1,  281,  292,   -1,  282,  292,
   -1,  283,  292,   -1,  284,  292,   -1,  250,  293,   -1,
  251,  293,   -1,  252,  293,   -1,  253,  293,   -1,  254,
  293,   -1,  255,  293,   -1,  256,  293,   -1,  257,  293,
   -1,  258,  293,   -1,  259,  293,   -1,  260,  293,   -1,
  261,  293,   -1,  262,  293,   -1,  263,  293,   -1,  264,
  293,   -1,  265,  293,   -1,  266,  293,   -1,  267,  293,
   -1,  268,  293,   -1,  269,  293,   -1,  270,  293,   -1,
  271,  293,   -1,  272,  293,   -1,  273,  293,   -1,  274,
  293,   -1,  275,  293,   -1,  276,  293,   -1,  277,  293,
   -1,  278,  293,   -1,  279,  293,   -1,  280,  293,   -1,
  281,  293,   -1,  282,  293,   -1,  283,  293,   -1,  284,
  293,   -1,  250,  294,   -1,  251,  294,   -1,  252,  294,
   -1,  253,  294,   -1,  254,  294,   -1,  255,  294,   -1,
  256,  294,   -1,  257,  294,   -1,  258,  294,   -1,  259,
  294,   -1,  260,  294,   -1,  261,  294,   -1,  262,  294,
   -1,  263,  294,   -1,  264,  294,   -1,  265,  294,   -1,
  266,  294,   -1,  267,  294,   -1,  268,  294,   -1,  269,
  294,   -1,  270,  294,   -1,  271,  294,   -1,  272,  294,
   -1,  273,  294,   -1,  274,  294,   -1,  275,  294,   -1,
  276,  294,   -1,  277,  294,   -1,  278,  294,   -1,  279,
  294,   -1,  280,  294,   -1,  281,  294,   -1,  282,  294,
   -1,  283,  294,   -1,  284,  294,   -1,  250,  295,   -1,
  251,  295,   -1,  252,  295,   -1,  253,  295,   -1,  254,
  295,   -1,  255,  295,   -1,  256,  295,   -1,  257,  295,
   -1,  258,  295,   -1,  259,  295,   -1,  260,  295,   -1,
  261,  295,   -1,  262,  295,   -1,  263,  295,   -1,  264,
  295,   -1,  265,  295,   -1,  266,  295,   -1,  267,  295,
   -1,  268,  295,   -1,  269,  295,   -1,  270,  295,   -1,
  271,  295,   -1,  272,  295,   -1,  273,  295,   -1,  274,
  295,   -1,  275,  295,   -1,  276,  295,   -1,  277,  295,
   -1,  278,  295,   -1,  279,  295,   -1,  280,  295,   -1,
  281,  295,   -1,  282,  295,   -1,  283,  295,   -1,  284,
  295,   -1,  250,  296,   -1,  251,  296,   -1,  252,  296,
   -1,  253,  296,   -1,  254,  296,   -1,  255,  296,   -1,
  256,  296,   -1,  257,  296,   -1,  258,  296,   -1,  259,
  296,   -1,  260,  296,   -1,  261,  296,   -1,  262,  296,
   -1,  263,  296,   -1,  264,  296,   -1,  265,  296,   -1,
  266,  296,   -1,  267,  296,   -1,  268,  296,   -1,  269,
  296,   -1,  270,  296,   -1,  271,  296,   -1,  272,  296,
   -1,  278,  296,   -1,  250,  297,   -1,  251,  297,   -1,
  252,  297,   -1,  253,  297,   -1,  254,  297,   -1,  255,
  297,   -1,  256,  297,   -1,  257,  297,   -1,  258,  297,
   -1,  259,  297,   -1,  260,  297,   -1,  261,  297,   -1,
  262,  297,   -1,  263,  297,   -1,  264,  297,   -1,  265,
  297,   -1,  266,  297,   -1,  267,  297,   -1,  268,  297,
   -1,  269,  297,   -1,  270,  297,   -1,  271,  297,   -1,
  272,  297,   -1,  278,  297,   -1,  250,  298,   -1,  251,
  298,   -1,  252,  298,   -1,  253,  298,   -1,  254,  298,
   -1,  255,  298,   -1,  256,  298,   -1,  257,  298,   -1,
  258,  298,   -1,  259,  298,   -1,  260,  298,   -1,  261,
  298,   -1,  262,  298,   -1,  263,  298,   -1,  264,  298,
   -1,  265,  298,   -1,  266,  298,   -1,  267,  298,   -1,
  268,  298,   -1,  269,  298,   -1,  270,  298,   -1,  271,
  298,   -1,  272,  298,   -1,  273,  298,   -1,  274,  298,
   -1,  275,  298,   -1,  276,  298,   -1,  277,  298,   -1,
  278,  298,   -1,  279,  298,   -1,  280,  298,   -1,  281,
  298,   -1,  282,  298,   -1,  283,  298,   -1,  284,  298,
   -1,  250,  299,   -1,  251,  299,   -1,  252,  299,   -1,
  253,  299,   -1,  254,  299,   -1,  255,  299,   -1,  256,
  299,   -1,  257,  299,   -1,  258,  299,   -1,  259,  299,
   -1,  260,  299,   -1,  261,  299,   -1,  262,  299,   -1,
  263,  299,   -1,  264,  299,   -1,  265,  299,   -1,  266,
  299,   -1,  267,  299,   -1,  268,  299,   -1,  269,  299,
   -1,  270,  299,   -1,  271,  299,   -1,  272,  299,   -1,
  273,  299,   -1,  274,  299,   -1,  275,  299,   -1,  276,
  299,   -1,  277,  299,   -1,  278,  299,   -1,  279,  299,
   -1,  280,  299,   -1,  281,  299,   -1,  282,  299,   -1,
  283,  299,   -1,  284,  299,   -1,  250,  300,   -1,  251,
  300,   -1,  252,  300,   -1,  253,  300,   -1,  254,  300,
   -1,  255,  300,   -1,  256,  300,   -1,  257,  300,   -1,
  258,  300,   -1,  259,  300,   -1,  260,  300,   -1,  261,
  300,   -1,  262,  300,   -1,  263,  300,   -1,  264,  300,
   -1,  265,  300,   -1,  266,  300,   -1,  267,  300,   -1,
  268,  300,   -1,  269,  300,   -1,  270,  300,   -1,  271,
  300,   -1,  272,  300,   -1,  278,  300,   -1,  250,  301,
   -1,  251,  301,   -1,  252,  301,   -1,  253,  301,   -1,
  254,  301,   -1,  255,  301,   -1,  256,  301,   -1,  257,
  301,   -1,  258,  301,   -1,  259,  301,   -1,  260,  301,
   -1,  261,  301,   -1,  262,  301,   -1,  263,  301,   -1,
  264,  301,   -1,  265,  301,   -1,  266,  301,   -1,  267,
  301,   -1,  268,  301,   -1,  269,  301,   -1,  270,  301,
   -1,  271,  301,   -1,  272,  301,   -1,  273,  301,   -1,
  274,  301,   -1,  275,  301,   -1,  276,  301,   -1,  277,
  301,   -1,  278,  301,   -1,  279,  301,   -1,  280,  301,
   -1,  281,  301,   -1,  282,  301,   -1,  283,  301,   -1,
  284,  301,   -1,  250,  302,   -1,  251,  302,   -1,  252,
  302,   -1,  253,  302,   -1,  254,  302,   -1,  255,  302,
   -1,  256,  302,   -1,  257,  302,   -1,  258,  302,   -1,
  259,  302,   -1,  260,  302,   -1,  261,  302,   -1,  262,
  302,   -1,  263,  302,   -1,  264,  302,   -1,  265,  302,
   -1,  266,  302,   -1,  267,  302,   -1,  268,  302,   -1,
  269,  302,   -1,  270,  302,   -1,  271,  302,   -1,  272,
  302,   -1,  273,  302,   -1,  274,  302,   -1,  275,  302,
   -1,  276,  302,   -1,  277,  302,   -1,  278,  302,   -1,
  279,  302,   -1,  280,  302,   -1,  281,  302,   -1,  282,
  302,   -1,  283,  302,   -1,  284,  302,   -1,  250,  303,
   -1,  251,  303,   -1,  252,  303,   -1,  253,  303,   -1,
  254,  303,   -1,  255,  303,   -1,  256,  303,   -1,  257,
  303,   -1,  258,  303,   -1,  259,  303,   -1,  260,  303,
   -1,  261,  303,   -1,  262,  303,   -1,  263,  303,   -1,
  264,  303,   -1,  265,  303,   -1,  266,  303,   -1,  267,
  303,   -1,  268,  303,   -1,  269,  303,   -1,  270,  303,
   -1,  271,  303,   -1,  272,  303,   -1,  273,  303,   -1,
  274,  303,   -1,  275,  303,   -1,  276,  303,   -1,  277,
  303,   -1,  278,  303,   -1,  279,  303,   -1,  280,  303,
   -1,  281,  303,   -1,  282,  303,   -1,  283,  303,   -1,
  284,  303,   -1,  250,  304,   -1,  251,  304,   -1,  252,
  304,   -1,  253,  304,   -1,  254,  304,   -1,  255,  304,
   -1,  256,  304,   -1,  257,  304,   -1,  258,  304,   -1,
  259,  304,   -1,  260,  304,   -1,  261,  304,   -1,  262,
  304,   -1,  263,  304,   -1,  264,  304,   -1,  265,  304,
   -1,  266,  304,   -1,  267,  304,   -1,  268,  304,   -1,
  269,  304,   -1,  270,  304,   -1,  271,  304,   -1,  272,
  304,   -1,  273,  304,   -1,  274,  304,   -1,  275,  304,
   -1,  276,  304,   -1,  277,  304,   -1,  278,  304,   -1,
  279,  304,   -1,  280,  304,   -1,  281,  304,   -1,  282,
  304,   -1,  283,  304,   -1,  284,  304,   -1,  250,  306,
   -1,  251,  306,   -1,  252,  306,   -1,  253,  306,   -1,
  254,  306,   -1,  255,  306,   -1,  256,  306,   -1,  257,
  306,   -1,  258,  306,   -1,  259,  306,   -1,  260,  306,
   -1,  261,  306,   -1,  262,  306,   -1,  263,  306,   -1,
  264,  306,   -1,  265,  306,   -1,  266,  306,   -1,  267,
  306,   -1,  268,  306,   -1,  269,  306,   -1,  270,  306,
   -1,  271,  306,   -1,  272,  306,   -1,  278,  306,   -1,
  250,  307,   -1,  251,  307,   -1,  252,  307,   -1,  253,
  307,   -1,  254,  307,   -1,  255,  307,   -1,  256,  307,
   -1,  257,  307,   -1,  258,  307,   -1,  259,  307,   -1,
  260,  307,   -1,  261,  307,   -1,  262,  307,   -1,  263,
  307,   -1,  264,  307,   -1,  265,  307,   -1,  266,  307,
   -1,  267,  307,   -1,  268,  307,   -1,  269,  307,   -1,
  270,  307,   -1,  271,  307,   -1,  272,  307,   -1,  273,
  307,   -1,  274,  307,   -1,  275,  307,   -1,  276,  307,
   -1,  277,  307,   -1,  278,  307,   -1,  279,  307,   -1,
  280,  307,   -1,  281,  307,   -1,  282,  307,   -1,  283,
  307,   -1,  284,  307,   -1,  250,  286,   -1,  251,  286,
   -1,  252,  286,   -1,  253,  286,   -1,  254,  286,   -1,
  255,  286,   -1,  256,  286,   -1,  257,  286,   -1,  258,
  286,   -1,  259,  286,   -1,  260,  286,   -1,  261,  286,
   -1,  262,  286,   -1,  263,  286,   -1,  264,  286,   -1,
  265,  286,   -1,  266,  286,   -1,  267,  286,   -1,  268,
  286,   -1,  269,  286,   -1,  270,  286,   -1,  271,  286,
   -1,  272,  286,   -1,  273,  286,   -1,  274,  286,   -1,
  275,  286,   -1,  276,  286,   -1,  277,  286,   -1,  278,
  286,   -1,  279,  286,   -1,  280,  286,   -1,  281,  286,
   -1,  282,  286,   -1,  283,  286,   -1,  284,  286,   -1,
  250,  287,   -1,  251,  287,   -1,  252,  287,   -1,  253,
  287,   -1,  254,  287,   -1,  255,  287,   -1,  256,  287,
   -1,  257,  287,   -1,  258,  287,   -1,  259,  287,   -1,
  260,  287,   -1,  261,  287,   -1,  262,  287,   -1,  263,
  287,   -1,  264,  287,   -1,  265,  287,   -1,  266,  287,
   -1,  267,  287,   -1,  268,  287,   -1,  269,  287,   -1,
  270,  287,   -1,  271,  287,   -1,  272,  287,   -1,  273,
  287,   -1,  274,  287,   -1,  275,  287,   -1,  276,  287,
   -1,  277,  287,   -1,  278,  287,   -1,  279,  287,   -1,
  280,  287,   -1,  281,  287,   -1,  282,  287,   -1,  283,
  287,   -1,  284,  287,   -1,  250,  277,   -1,  251,  277,
   -1,  252,  277,   -1,  253,  277,   -1,  254,  277,   -1,
  255,  277,   -1,  256,  277,   -1,  257,  277,   -1,  258,
  277,   -1,  259,  277,   -1,  260,  277,   -1,  261,  277,
   -1,  262,  277,   -1,  263,  277,   -1,  264,  277,   -1,
  265,  277,   -1,  266,  277,   -1,  267,  277,   -1,  268,
  277,   -1,  269,  277,   -1,  270,  277,   -1,  271,  277,
   -1,  272,  277,   -1,  278,  277,   -1,  250,  278,   -1,
  251,  278,   -1,  252,  278,   -1,  253,  278,   -1,  254,
  278,   -1,  255,  278,   -1,  256,  278,   -1,  257,  278,
   -1,  258,  278,   -1,  259,  278,   -1,  260,  278,   -1,
  261,  278,   -1,  262,  278,   -1,  263,  278,   -1,  264,
  278,   -1,  265,  278,   -1,  266,  278,   -1,  267,  278,
   -1,  268,  278,   -1,  269,  278,   -1,  270,  278,   -1,
  271,  278,   -1,  272,  278,   -1,  278,  278,   -1,  250,
  279,   -1,  251,  279,   -1,  252,  279,   -1,  253,  279,
   -1,  254,  279,   -1,  255,  279,   -1,  256,  279,   -1,
  257,  279,   -1,  258,  279,   -1,  259,  279,   -1,  260,
  279,   -1,  261,  279,   -1,  262,  279,   -1,  263,  279,
   -1,  264,  279,   -1,  265,  279,   -1,  266,  279,   -1,
  267,  279,   -1,  268,  279,   -1,  269,  279,   -1,  270,
  279,   -1,  271,  279,   -1,  272,  279,   -1,  278,  279,
   -1,  250,  280,   -1,  251,  280,   -1,  252,  280,   -1,
  253,  280,   -1,  254,  280,   -1,  255,  280,   -1,  256,
  280,   -1,  257,  280,   -1,  258,  280,   -1,  259,  280,
   -1,  260,  280,   -1,  261,  280,   -1,  262,  280,   -1,
  263,  280,   -1,  264,  280,   -1,  265,  280,   -1,  266,
  280,   -1,  267,  280,   -1,  268,  280,   -1,  269,  280,
   -1,  270,  280,   -1,  271,  280,   -1,  272,  280,   -1,
  278,  280,   -1,  250,  281,   -1,  251,  281,   -1,  252,
  281,   -1,  253,  281,   -1,  254,  281,   -1,  255,  281,
   -1,  256,  281,   -1,  257,  281,   -1,  258,  281,   -1,
  259,  281,   -1,  260,  281,   -1,  261,  281,   -1,  262,
  281,   -1,  263,  281,   -1,  264,  281,   -1,  265,  281,
   -1,  266,  281,   -1,  267,  281,   -1,  268,  281,   -1,
  269,  281,   -1,  270,  281,   -1,  271,  281,   -1,  272,
  281,   -1,  278,  281,   -1,  250,  284,   -1,  251,  284,
   -1,  252,  284,   -1,  253,  284,   -1,  254,  284,   -1,
  255,  284,   -1,  256,  284,   -1,  257,  284,   -1,  258,
  284,   -1,  259,  284,   -1,  260,  284,   -1,  261,  284,
   -1,  262,  284,   -1,  263,  284,   -1,  264,  284,   -1,
  265,  284,   -1,  266,  284,   -1,  267,  284,   -1,  268,
  284,   -1,  269,  284,   -1,  270,  284,   -1,  271,  284,
   -1,  272,  284,   -1,  273,  284,   -1,  274,  284,   -1,
  275,  284,   -1,  276,  284,   -1,  277,  284,   -1,  278,
  284,   -1,  279,  284,   -1,  280,  284,   -1,  281,  284,
   -1,  282,  284,   -1,  283,  284,   -1,  284,  284,   -1,
  250,  282,   -1,  251,  282,   -1,  252,  282,   -1,  253,
  282,   -1,  254,  282,   -1,  255,  282,   -1,  256,  282,
   -1,  257,  282,   -1,  258,  282,   -1,  259,  282,   -1,
  260,  282,   -1,  261,  282,   -1,  262,  282,   -1,  263,
  282,   -1,  264,  282,   -1,  265,  282,   -1,  266,  282,
   -1,  267,  282,   -1,  268,  282,   -1,  269,  282,   -1,
  270,  282,   -1,  271,  282,   -1,  272,  282,   -1,  278,
  282,   -1,  250,  283,   -1,  251,  283,   -1,  252,  283,
   -1,  253,  283,   -1,  254,  283,   -1,  255,  283,   -1,
  256,  283,   -1,  257,  283,   -1,  258,  283,   -1,  259,
  283,   -1,  260,  283,   -1,  261,  283,   -1,  262,  283,
   -1,  263,  283,   -1,  264,  283,   -1,  265,  283,   -1,
  266,  283,   -1,  267,  283,   -1,  268,  283,   -1,  269,
  283,   -1,  270,  283,   -1,  271,  283,   -1,  272,  283,
   -1,  278,  283,   -1,  250,  285,   -1,  251,  285,   -1,
  252,  285,   -1,  253,  285,   -1,  254,  285,   -1,  255,
  285,   -1,  256,  285,   -1,  257,  285,   -1,  258,  285,
   -1,  259,  285,   -1,  260,  285,   -1,  261,  285,   -1,
  262,  285,   -1,  263,  285,   -1,  264,  285,   -1,  265,
  285,   -1,  266,  285,   -1,  267,  285,   -1,  268,  285,
   -1,  269,  285,   -1,  270,  285,   -1,  271,  285,   -1,
  272,  285,   -1,  278,  285,   -1,  250,  305,   -1,  251,
  305,   -1,  252,  305,   -1,  253,  305,   -1,  254,  305,
   -1,  255,  305,   -1,  256,  305,   -1,  257,  305,   -1,
  258,  305,   -1,  259,  305,   -1,  260,  305,   -1,  261,
  305,   -1,  262,  305,   -1,  263,  305,   -1,  264,  305,
   -1,  265,  305,   -1,  266,  305,   -1,  267,  305,   -1,
  268,  305,   -1,  269,  305,   -1,  270,  305,   -1,  271,
  305,   -1,  272,  305,   -1,  278,  305,   -1,  298,  185,
  253,   -1,  250,  311,   -1,  251,  311,   -1,  252,  311,
   -1,  253,  311,   -1,  254,  311,   -1,  255,  311,   -1,
  256,  311,   -1,  257,  311,   -1,  258,  311,   -1,  259,
  311,   -1,  260,  311,   -1,  261,  311,   -1,  262,  311,
   -1,  263,  311,   -1,  264,  311,   -1,  265,  311,   -1,
  266,  311,   -1,  267,  311,   -1,  268,  311,   -1,  269,
  311,   -1,  270,  311,   -1,  271,  311,   -1,  272,  311,
   -1,  273,  311,   -1,  274,  311,   -1,  275,  311,   -1,
  276,  311,   -1,  277,  311,   -1,  278,  311,   -1,  279,
  311,   -1,  280,  311,   -1,  281,  311,   -1,  282,  311,
   -1,  283,  311,   -1,  284,  311,   -1,  250,  319,   -1,
  251,  319,   -1,  252,  319,   -1,  253,  319,   -1,  254,
  319,   -1,  255,  319,   -1,  256,  319,   -1,  257,  319,
   -1,  258,  319,   -1,  259,  319,   -1,  260,  319,   -1,
  261,  319,   -1,  262,  319,   -1,  263,  319,   -1,  264,
  319,   -1,  265,  319,   -1,  266,  319,   -1,  267,  319,
   -1,  268,  319,   -1,  269,  319,   -1,  270,  319,   -1,
  271,  319,   -1,  272,  319,   -1,  273,  319,   -1,  274,
  319,   -1,  275,  319,   -1,  276,  319,   -1,  277,  319,
   -1,  278,  319,   -1,  279,  319,   -1,  280,  319,   -1,
  281,  319,   -1,  282,  319,   -1,  283,  319,   -1,  284,
  319,   -1,  541,   62,   -1,  515,   85,   -1,   14,   85,
   -1,   15,   85,   -1,  517,   85,   -1,  272,  250,   -1,
};
#define YYFINAL 49
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 352
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknUsing","tknLong","tknEnum",
"tknPreProDef","tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate",
"tknTypename","tknDocBlockComment","tknDocLineComment","tknScopeResOp",
"tknNumSignSpec","tknPublic","tknProtected","tknPrivate","tknExternC",
"tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast",
"tknStaticCast","tknDynamicCast","tknReinterpretCast","tknTry","tknCatch",
"tknThrow","tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq",
"tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknConst","tknStatic","tknExtern","tknVirtual","tknOverride","tknInline",
"tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine","tknUndef",
"tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf",
"tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew","tknDelete",
"tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX",
"POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : usingstmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"usingstmt : tknUsing tknID '=' identifier ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1067 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3547 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 283 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 3937 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 3943 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 291 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3953 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 296 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3963 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 3969 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 3975 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 3981 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3987 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3993 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 3999 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].usingObj; }
#line 4005 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4011 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4017 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4023 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4029 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4035 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4041 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4047 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4053 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4059 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4065 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4071 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4077 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4083 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4089 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4095 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4101 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4107 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4113 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4119 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4125 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4131 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 331 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4137 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4143 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4149 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 336 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4157 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 341 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4166 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 345 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4175 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 351 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4184 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 357 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4193 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 363 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4201 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 368 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4209 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 371 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4217 "y_tab.c"
break;
case 44:
#line 376 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4222 "y_tab.c"
  if (!yytrial)
#line 376 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4229 "y_tab.c"
break;
case 45:
#line 380 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4234 "y_tab.c"
  if (!yytrial)
#line 380 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4241 "y_tab.c"
break;
case 46:
#line 384 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4246 "y_tab.c"
  if (!yytrial)
#line 384 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4253 "y_tab.c"
break;
case 47:
#line 388 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4258 "y_tab.c"
  if (!yytrial)
#line 388 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4265 "y_tab.c"
break;
case 48:
#line 392 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4270 "y_tab.c"
  if (!yytrial)
#line 392 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4277 "y_tab.c"
break;
case 49:
#line 396 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4282 "y_tab.c"
  if (!yytrial)
#line 396 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4289 "y_tab.c"
break;
case 50:
#line 402 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4294 "y_tab.c"
  if (!yytrial)
#line 402 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4298 "y_tab.c"
break;
case 51:
#line 405 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4303 "y_tab.c"
  if (!yytrial)
#line 405 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4307 "y_tab.c"
break;
case 52:
#line 406 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4312 "y_tab.c"
  if (!yytrial)
#line 406 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4316 "y_tab.c"
break;
case 53:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4321 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4325 "y_tab.c"
break;
case 54:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4330 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4334 "y_tab.c"
break;
case 55:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4339 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4343 "y_tab.c"
break;
case 56:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4348 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4352 "y_tab.c"
break;
case 57:
#line 416 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4357 "y_tab.c"
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4361 "y_tab.c"
break;
case 58:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4366 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4370 "y_tab.c"
break;
case 59:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4375 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4379 "y_tab.c"
break;
case 60:
#line 423 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4384 "y_tab.c"
  if (!yytrial)
#line 423 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4388 "y_tab.c"
break;
case 61:
#line 424 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4393 "y_tab.c"
  if (!yytrial)
#line 424 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4397 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4403 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4409 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4415 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4421 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4427 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4433 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4439 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4445 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4451 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4457 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4463 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4469 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 439 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4478 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4484 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 448 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4490 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 449 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4496 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4502 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4508 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 454 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4514 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4520 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 458 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4526 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4535 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4544 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 467 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4552 "y_tab.c"
break;
case 86:
#line 472 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4557 "y_tab.c"
  if (!yytrial)
#line 472 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4563 "y_tab.c"
break;
case 87:
#line 475 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4568 "y_tab.c"
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4574 "y_tab.c"
break;
case 88:
#line 478 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4579 "y_tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4585 "y_tab.c"
break;
case 89:
#line 481 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4590 "y_tab.c"
  if (!yytrial)
#line 481 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4596 "y_tab.c"
break;
case 90:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4601 "y_tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4607 "y_tab.c"
break;
case 91:
#line 488 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4612 "y_tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4618 "y_tab.c"
break;
case 92:
#line 491 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4623 "y_tab.c"
  if (!yytrial)
#line 491 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4629 "y_tab.c"
break;
case 93:
#line 496 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4634 "y_tab.c"
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4638 "y_tab.c"
break;
case 94:
#line 497 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4643 "y_tab.c"
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4647 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.usingObj = new CppUsing(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].str);
                  }
#line 4655 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4661 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 508 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4670 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 514 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4676 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 517 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4687 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 523 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4697 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 528 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4708 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 534 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4718 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 539 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4729 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 545 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4739 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 554 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4747 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 557 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4755 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 560 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4763 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 566 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4771 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 569 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4780 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 573 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4788 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4794 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 579 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4800 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 582 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 4808 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 585 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 4817 "y_tab.c"
break;
case 115:
#line 591 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4822 "y_tab.c"
  if (!yytrial)
#line 591 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 4828 "y_tab.c"
break;
case 116:
#line 594 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4833 "y_tab.c"
  if (!yytrial)
#line 594 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 4840 "y_tab.c"
break;
case 117:
#line 600 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4845 "y_tab.c"
  if (!yytrial)
#line 600 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4849 "y_tab.c"
break;
case 118:
#line 603 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4854 "y_tab.c"
  if (!yytrial)
#line 603 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4861 "y_tab.c"
break;
case 119:
#line 609 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4866 "y_tab.c"
  if (!yytrial)
#line 609 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4873 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 614 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4883 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 619 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4893 "y_tab.c"
break;
case 122:
#line 626 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4898 "y_tab.c"
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 4902 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 629 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4912 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4922 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 4931 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4937 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4943 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4949 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4955 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4961 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4967 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4973 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4979 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4985 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4991 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4997 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5003 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5009 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5015 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5021 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5027 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5033 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5039 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5045 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5051 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5057 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5063 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5069 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5075 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5081 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5087 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5093 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5099 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5105 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5111 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5117 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5123 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5129 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5135 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5141 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5147 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5153 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5159 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5165 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5171 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5177 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5186 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5195 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5201 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5207 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5213 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5219 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5225 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5231 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5237 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5243 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5249 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5255 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5261 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5267 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5273 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5279 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 718 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5285 "y_tab.c"
break;
case 184:
#line 719 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5290 "y_tab.c"
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5294 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 723 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5300 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5306 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 725 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5312 "y_tab.c"
break;
case 188:
#line 728 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5317 "y_tab.c"
  if (!yytrial)
#line 728 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5321 "y_tab.c"
break;
case 189:
#line 734 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5326 "y_tab.c"
  if (!yytrial)
#line 735 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5334 "y_tab.c"
break;
case 190:
#line 740 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5339 "y_tab.c"
break;
case 191:
#line 744 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5344 "y_tab.c"
  if (!yytrial)
#line 745 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5351 "y_tab.c"
break;
case 192:
#line 749 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5356 "y_tab.c"
break;
case 193:
#line 753 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5361 "y_tab.c"
  if (!yytrial)
#line 754 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5368 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 758 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5377 "y_tab.c"
break;
case 195:
#line 765 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5389 "y_tab.c"
  if (!yytrial)
#line 773 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5395 "y_tab.c"
break;
case 196:
#line 776 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5400 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 777 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5408 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 780 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5417 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 786 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5423 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5429 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 788 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5435 "y_tab.c"
break;
case 202:
#line 791 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5440 "y_tab.c"
  if (!yytrial)
#line 791 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5444 "y_tab.c"
break;
case 203:
#line 794 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5449 "y_tab.c"
  if (!yytrial)
#line 795 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5456 "y_tab.c"
break;
case 204:
#line 799 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5461 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 801 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-7].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-7].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5470 "y_tab.c"
break;
case 206:
#line 805 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5475 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 807 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5484 "y_tab.c"
break;
case 208:
#line 814 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5496 "y_tab.c"
  if (!yytrial)
#line 822 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5504 "y_tab.c"
break;
case 209:
#line 828 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5516 "y_tab.c"
  if (!yytrial)
#line 836 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5524 "y_tab.c"
break;
case 210:
#line 842 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5536 "y_tab.c"
  if (!yytrial)
#line 850 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5544 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5554 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 862 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5563 "y_tab.c"
break;
case 213:
#line 868 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5568 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5572 "y_tab.c"
break;
case 214:
#line 871 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5577 "y_tab.c"
  if (!yytrial)
#line 871 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5581 "y_tab.c"
break;
case 215:
#line 872 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5586 "y_tab.c"
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5590 "y_tab.c"
break;
case 216:
#line 873 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5595 "y_tab.c"
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5599 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5605 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5611 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 880 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5617 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5623 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 884 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5629 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5635 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 886 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5641 "y_tab.c"
break;
case 224:
#line 889 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5646 "y_tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5650 "y_tab.c"
break;
case 225:
#line 891 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5660 "y_tab.c"
  if (!yytrial)
#line 897 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5666 "y_tab.c"
break;
case 226:
#line 903 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5671 "y_tab.c"
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5675 "y_tab.c"
break;
case 227:
#line 905 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5680 "y_tab.c"
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5693 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5702 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5708 "y_tab.c"
break;
case 230:
#line 923 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5713 "y_tab.c"
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5717 "y_tab.c"
break;
case 231:
#line 924 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5722 "y_tab.c"
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5726 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5732 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5738 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5744 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5750 "y_tab.c"
break;
case 236:
#line 933 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5755 "y_tab.c"
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5759 "y_tab.c"
break;
case 237:
#line 934 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5764 "y_tab.c"
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5768 "y_tab.c"
break;
case 238:
#line 935 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5773 "y_tab.c"
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 5777 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5783 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 939 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5789 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5795 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5801 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5809 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 949 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5818 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5827 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5833 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 960 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5839 "y_tab.c"
break;
case 248:
#line 963 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5844 "y_tab.c"
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5850 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5858 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 5867 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5873 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5879 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5885 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5891 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5897 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5903 "y_tab.c"
break;
case 257:
#line 987 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5908 "y_tab.c"
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 5912 "y_tab.c"
break;
case 258:
#line 988 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5917 "y_tab.c"
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5921 "y_tab.c"
break;
case 259:
#line 989 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5926 "y_tab.c"
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 5930 "y_tab.c"
break;
case 260:
#line 992 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5935 "y_tab.c"
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 5939 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 5945 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 5951 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5957 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5963 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5969 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5975 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 5981 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 5987 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 5993 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 5999 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6005 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6011 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6017 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6023 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6029 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6035 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6041 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6047 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6053 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6059 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6065 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6071 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6077 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6083 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6089 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6095 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6101 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6107 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6113 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6119 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6125 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6131 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6137 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6143 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6149 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6155 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6161 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6167 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6173 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6179 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6185 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6191 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6197 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6203 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6209 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6215 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6221 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6227 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6233 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6239 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6245 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6251 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6257 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6263 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6269 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6275 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6281 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6287 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1056 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6293 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1057 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6299 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6305 "y_tab.c"
break;
case 322:
  if (!yytrial)
#line 1059 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6311 "y_tab.c"
break;
case 323:
  if (!yytrial)
#line 1060 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 6317 "y_tab.c"
break;
case 324:
#line 1063 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6322 "y_tab.c"
  if (!yytrial)
#line 1063 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6326 "y_tab.c"
break;
#line 6328 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
