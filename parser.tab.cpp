#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   27,   27,   27,   27,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,   31,   41,   41,   42,   43,   44,
   40,   40,   71,   71,   71,   71,   71,   71,   72,   73,
   73,   74,   74,   74,   74,   74,   74,   75,   37,   37,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    4,    4,   12,   12,   12,   12,
   13,   13,   13,   13,   10,   10,   10,   10,   10,   11,
   11,   11,   26,   26,   25,   24,   17,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   15,   15,   15,   64,
   64,   56,   56,   57,   57,   48,   49,    9,   45,   45,
   46,   47,   47,   47,   47,    6,    6,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,   23,   23,   23,   19,   19,   19,   19,   20,   20,
   20,   66,   66,   66,   66,   66,   66,   65,   65,   65,
   65,   65,   63,   63,   63,   51,   52,   76,   52,   77,
   52,   52,   52,   50,   78,   50,   50,   58,   58,   58,
   58,   54,   55,   79,   55,   80,   55,   53,   53,   53,
   21,   21,   22,   18,   18,   18,   60,   60,   61,   61,
   62,   62,   62,   29,   29,   81,   28,   28,   67,   67,
   67,   68,   68,   68,   68,   14,   14,   14,   59,   59,
   59,   59,   32,   33,   33,   34,   34,   35,   35,   36,
    7,    7,    1,    1,    1,    1,   69,   69,   69,   30,
   70,   70,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   39,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    5,    3,    5,    6,    9,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    2,    2,
    1,    2,    4,    1,    0,    1,    1,    3,    1,    1,
    0,    2,    3,    2,    6,    8,    9,    7,    8,    5,
    6,    4,    2,    2,    3,    6,    3,    4,    3,    6,
    5,    5,    4,    3,    3,    3,    6,    9,    8,    1,
    1,    4,    2,    2,    2,    2,    2,    3,   11,   10,
    2,    9,    9,    8,    2,    1,    3,    1,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    3,    2,    4,    2,
    4,    0,    1,    3,    1,    1,    1,    1,    0,    1,
    3,    0,    2,    2,    2,    2,    2,    0,    2,    2,
    2,    3,    0,    1,    1,    2,    5,    0,   11,    0,
   13,    2,    2,    4,    0,    6,    2,    0,    5,    4,
    6,    2,    2,    0,    8,    0,   10,    5,    5,    7,
    8,    8,    2,    2,    2,    3,    0,    1,    1,    2,
    0,    1,    2,    2,    1,    0,    8,    2,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    2,    1,    1,
    1,    1,    4,    1,    3,    1,    1,    2,    2,    3,
    1,    1,    0,    1,    4,    2,    2,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    5,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    4,    3,
    4,    4,    7,    7,    7,    7,    3,    2,    2,    4,
    2,    1,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  273,  274,  275,    0,    0,    0,    0,    0,    0,
  252,    0,   59,   60,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  194,  110,  111,    0,    0,    0,
  195,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,  276,    3,   28,    8,    9,   12,    0,
    0,    0,    6,    0,    7,    0,    0,   10,    0,    0,
   11,   27,   34,    0,   13,    0,   14,    0,   16,   17,
   18,    0,   19,    0,   20,   21,    0,   22,   23,    0,
   24,   25,    0,   26,    0,    0,    0,    0,   29,   30,
   31,   32,   33,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  270,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  158,  159,  160,  161,  162,  164,
  165,  140,  141,  129,  130,  131,  132,  133,  134,  135,
  136,  137,  138,  139,  163,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  202,    0,  249,
  250,  251,  248,    0,    0,    0,    0,    0,    0,    0,
    0,   55,    0,   57,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,    0,    0,  229,
    0,    0,    0,    0,    0,  224,  225,    0,  223,    0,
   94,   93,    0,    0,    0,    4,    5,  234,    0,    0,
  238,  125,    0,  203,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  284,  286,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  335,    0,    0,  121,  116,  117,  196,    0,    0,
  212,  213,  113,  114,  115,    0,    0,    0,    0,    0,
    0,    0,  183,  186,  185,  184,  187,    0,    0,    0,
    0,    0,    0,  175,  173,    0,  178,    0,  226,  266,
    0,   76,    0,    0,    0,  118,    0,    0,    0,   81,
    0,  261,    0,    0,    0,  254,    0,  257,    0,    0,
    0,    0,    0,    0,  166,  167,    0,    0,    0,    0,
  327,    0,    0,    0,    0,    0,  205,    0,   58,    0,
   49,   50,   51,   52,   53,   54,   56,    0,    0,    0,
    0,    0,   35,    0,  277,    0,    0,    0,    0,    0,
    0,  127,    0,    0,    0,    0,  230,    0,    0,   99,
    0,    0,    0,   95,  267,  268,  269,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  320,    0,    0,    0,    0,   37,    0,    0,    0,    0,
    0,  246,    0,    0,    0,    0,    0,    0,  214,  265,
    0,  204,    0,   81,    0,    0,    0,    0,   81,   92,
    0,    0,  259,  258,  253,    0,    0,    0,    0,    0,
    0,  169,  171,  112,    0,    0,    0,  198,    0,   43,
   46,   47,   45,   48,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,  103,    0,    0,
    0,    0,    0,  321,  319,    0,    0,    0,    0,    0,
    0,  247,    0,    0,   98,    0,    0,    0,    0,    0,
  174,    0,    0,    0,   81,   90,    0,    0,    0,    0,
    0,    0,   82,   79,   80,  255,    0,    0,    0,    0,
    0,    0,    0,   36,    0,   38,    0,  218,    0,    0,
    0,    0,  200,    0,    0,  102,    0,    0,    0,  210,
    0,    0,  197,  243,  244,  245,    0,    0,  236,    0,
  101,    0,    0,  219,    0,    0,    0,    0,  233,   96,
    0,    0,   81,   91,    0,   83,   85,    0,    0,    0,
    0,    0,    0,   39,    0,    0,    0,    0,    0,  216,
    0,    0,  209,    0,    0,    0,    0,    0,  107,  100,
  206,    0,    0,    0,    0,    0,   88,    0,    0,  323,
  324,  325,  326,  220,    0,    0,  188,    0,    0,    0,
    0,    0,    0,  211,    0,    0,    0,    0,    0,    0,
  215,   89,   86,    0,    0,    0,    0,    0,  188,    0,
    0,  221,  222,  237,  109,    0,  188,    0,   87,   40,
    0,    0,  189,  190,  191,    0,    0,    0,    0,  108,
    0,    0,  120,  192,    0,    0,  217,  199,  119,    0,
    0,  201,
};
static int yydgoto[] = {                                      49,
   50,  137,   52,  121,   53,   54,  344,   55,   56,   57,
   58,  543,  472,   59,   60,   61,   62,   63,  325,  394,
   64,   65,  326,   66,   67,   68,  220,   70,   71,   72,
   73,   74,  345,  346,  347,  348,   75,   76,   77,  380,
   78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
   88,   89,   90,   91,   92,   93,   94,  300,   95,  466,
  467,  534,   96,   97,  657,   98,  521,  577,  247,  222,
   99,  100,  101,  102,  103,  458,  609,  455,  530,  641,
  617,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0, -217,    0,  -42,    0,    0,    0,
    0,  -12,    0,    0, 2206,    0,  -52,    0,   56,   61,
   86,  116,  127, 3052, 2626, 2626, 2626, 2626, 2626, 2626,
 2626, 2794, 2626, 2454,    0,    0,    0,  -41, 2973,  361,
    0, 1642,   64,  199,  241, 2368,  127,    0,    0,  198,
  -21,  -20,    0,    0,    0,    0,    0,    0,    0, 2206,
  492,  278,    0,  169,    0,  176,  304,    0, 2280,  369,
    0,    0,    0,   36,    0, 5199,    0,    0,    0,    0,
    0,  375,    0,   34,    0,    0,  317,    0,    0,  211,
    0,    0,    5,    0,    0, 2206,  239,  498,    0,    0,
    0,    0,    0,    0, 2206, 2206, 2206, 2109,    0,  389,
  406,  440,  266,    0,  447, 2206,    0,    0,  529,  299,
  481,    0,    0,    0, 1004,    0,    0,    0,    0,  239,
  239,  239,  239,    0, 4899, 2626,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  573,  526,    0,    0,  581,
    0,    0,   -3,   -3,   -3,   -3,   -3,  594, 5284,    0,
  559,    0,  376,  619,  166, 2973,  607,    0,  899,    0,
    0,    0,    0,    0,  438,  463,  464, -186,  466,  483,
  491,    0,  488,    0, 2626, 2626, 2626,  420,    0,  592,
 5199,   25,  524,  673, 1297, 2661,    0, 2206, 2206,    0,
 2206, 1086,  403, 2626,    0,    0,    0,    0,    0,  525,
    0,    0,  725,  736,  738,    0,    0,    0,  759,    0,
    0,    0,    0,    0,    0,  990, 2626, 2626, 2626, 2626,
 2626, 2626, 2626, 2626, 2626, 2626, 2626, 2626, 2626, 2626,
 2626, 2626, 2626,    0,    0, 2626, 2626, 2626, 2626, 2626,
 2626, 2626, 2626, 2626, 2626, 2626, 2626, 2626,   17, 2626,
 2626,    0, 2626, 2368,    0,    0,    0,    0,  546,   19,
    0,    0,    0,    0,    0,  440, 2331,  141,    0, 2206,
    0,  548,    0,    0,    0,    0,    0,  239,    0,  554,
  599, 2206,  743,    0,    0,  227,    0, 2206,    0,    0,
  556,    0,  698,  673, 1297,    0,  790, 2206,   55,    0,
  808,    0,  583,  608,  154,    0,  777,    0,  810,  811,
  817,  821, 6265, 2783,    0,    0,  773,  791,  845, 2626,
    0, 2626,  851,  644,    0, 3227,    0, 2206,    0,  645,
    0,    0,    0,    0,    0,    0,    0, 5311, 6265,  852,
 5349,  870,    0, 2626,    0,  879,  647, 2783,  884,    0,
    0,    0,  171,  271,  171,  171,    0,  171,  477,    0,
 6265,  790,  790,    0,    0,    0,    0,    0, 1297,  656,
    0,    0,    0,    0,    0,    0,    0,    0,  797,  797,
    0,    0, 1520,    0,    0,    0,    0,   -3,    0,    0,
    0,  467,  467,  797,  797,  797,    0,  478,  478, 1520,
    0,  354, 5384,   -3, 5422,    0,  886,  670,    0,  894,
  187,    0,  790,  456,  891,  913,    0,  934,    0,    0,
    0,    0,  935,    0,  884,  937,  936,   65,    0,    0,
 2206,   78,    0,    0,    0, 1004, 2626,  940,  942,  944,
  945,    0,    0,    0,    0,    0,  946,    0,    0,    0,
    0,    0,    0,    0, 2368, 2626, 2368, 2626, 6265,  954,
  968,  978,  647, 2783, -103,    0, 2206,    0, 5477,  937,
  937,    0,  894,    0,    0, 2626, 2488,  983, 1873,  411,
   76,    0,  937, 2718,    0,    0,  970, 2783,    0,  984,
    0,  100,  939,  729,    0,    0,  164,  472,  964,    0,
  958,  967,    0,    0,    0,    0, 8116, 2626, 2626, 2626,
 2626,  973,  771,    0,  980,    0, 5700,    0,  266,    0,
 1001,  992,    0,  787,  171,    0,  239,  239,    0,    0,
 5755, 2626,    0,    0,    0,    0, 2206,  411,    0,  -79,
    0, 5790,  484,    0, 1018,  540, 1019,  802,    0,    0,
  216, 1012,    0,    0, 2626,    0,    0, 5825, 5860, 5895,
 5980,  803, 2626,    0, 1035,  712,  266,    0, 1038,    0,
 2206, 2206,    0, 6172,  171, 2206,    0, 2752,    0,    0,
    0,    0,  607,  -52, 1024, 1026,    0,  318, 6265,    0,
    0,    0,    0,    0, 1045, 1048,    0, 1051,  724,    0,
 1053,  142,  142,    0,  171, 1978,  239, 6207,  757,  194,
    0,    0,    0, 1040, 2368,    0,   -7, 1057,    0,  781,
 1061,    0,    0,    0,    0,  239,    0,    0,    0,    0,
  804,  857,    0,    0,    0,    0,   -7,  607,  -52,    0,
   -7, 2079,    0,    0,  805,  236,    0,    0,    0,    0,
 2175,    0,
};
static int yyrindex[] = {                                     21,
 4462,    0,    0,    0, 1133,   40,  988,    0,    0,    0,
    0,    0,    0,    0,    0, 4129,    0,    0,    0,    0,
    0,    0, 3469, 3334,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  378,    0,
    0,    0,    0,    0,    0,    0, 3527,  -94,    0, 1146,
   18,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1126,  731,
    0,    0,    0,    0,    0,    0,    0,  847,    0,    0,
    0,    0,    0,    0,    0,    0,  308,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3334,  971,    0,    0,
    0,    0,    0, 2547,    0,    0,    0,    0,   24,  989,
    0, 4953,  988, 1146,    0,    0,    0, 4018, 1011,    0,
    0, 4062, 4089, 4165,    0, 4253, 4333,  -94,    0, 3334,
 3334, 3334, 3334, 3112,    0,    0,    0,  -14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3170, 3246,    0,
   -6,  111,  148, 2236, 3585, 3612, 3653,    0,    0,  518,
    0, 1190,    0,  -26,    0,  378,  308,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1068,    0,    0, 1443,    0,
   33,    0,    0, 3166, 3334,    0,    0,  329,    0,    0,
    0,    0,  538,    0,  878,    0,    0,  878,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  512, 1146,
    0,    0, 1080,    0,    0,  971,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1908,    0,    0, 4885,    0,
 2061,    0,    0,    0,    0,    0,    0, 3334,  124,    0,
 2639,  818,  830,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3334,    0,  -33,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  334,    0,    0,    0,
    0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   24,    0,    0,    0,    0, 1056,
    0,    0,    0,    0,    0,    0,    0,    0,  430,    0,
    0,    0,    0,    0,    0,    0, 1099,    0, 3166, 5005,
 4347,    0,  449,    0,  614,  864,    0,  873,    0,    0,
  281,  272,  272,    0,    0,    0,    0, 3166, 3334,    0,
 1866, 2329, 2509, 2789, 2930, 3125, 4143, 4279,  765, 3922,
 4291, 4454, 4567, 4575, 4587, 4595, 4625, 3686, 4683, 4693,
 4744, 3745, 4407, 3947, 3983, 3992, 4755, 3848, 3889, 4763,
    0,    0,    0, 3821,    0,    0,    0,    0,  -94,  -18,
    0,    0, 4385,  538,    0,    0, 3166,    0,    0,    0,
   32,    0,    0,    0,    0,  885, 4420,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4775, 4782,    0,    0,  -26,    0,
    0,    0,    0,    0,    0, 1068,    0,    0,   97,    0,
    0,    0, 1099,    0,    0,    0,    0,    0,    0, 1497,
 1497, 3166,  355,    0,    0,    0,    0,    0,    0, 3410,
    0,    0, 4821,    0,    0,   24,    0,    0,   24,    0,
    0,    0, 4858,    0,    0,    0,    0,    0,  396,   54,
    0,    0,    0,    0,    0,    0, 1102,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1106,   24,
    0,    0,    0,    0,  504,    0, 3334, 3334, 4784,    0,
    0,    0,    0,    0,    0,    0,    0, 3410,    0, 1395,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1107,    0,    0,    0, 1106,   24,    0,    0,
    0,    0,    0,    0,  358,    0,  -94,    0,    0,    0,
    0,   24,  308,    0,    0,    0,    0,    0,  513,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
    0,  200,  200,    0,  374,    0, 1395,    0,    0,    0,
    0,    0,    0,    0,    0,   24,  285,    0,    0,    0,
    0,    0,    0,    0,    0, 1395,    0,  -94,    0,    0,
    0,    0,    0,    0,    0,   24,  315,  308,    0,    0,
  322,    0,    0,    0,    0,    0,    0,    0,    0,  -94,
    0,    0,
};
static int yycindex[] = {                                   1159,
  941,    0,    0,    0, 1598, 3535,    0, 3655, 3808, 3968,
    0,    0,    0,    0,    0, 4004,    0,    0,    0,    0,
    0,    0,  172,    0,    0,    0,    0,    0,    0,    0,
    0, 4272,    0,    0,    0,    0,    0,    0, -206,    0,
    0,    0,    0,    0,    0, 2995,  755, 1261,    0, 1802,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7568,    0,
    0,    0,    0, 8382,    0,    0,    0,  816,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4309,    0,    0,  893,    0,    0,
    0,    0,    0,  -86,    0,    0,    0,    0, 4712,  219,
    0,  896,    0, 1924,    0,    0,    0,  174,    0,    0,
    0,  188,  203,  218,    0,  399,  407, 1365,    0,    0,
    0,    0,    0, 1112,    0,    0,    0, 6292,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1076, 1087,    0,
 6330, 6357, 8034, 8139, 8162, 8185, 8215,    0,    0, 6397,
    0, 6488,    0,  907,    0,  165,    0,    0,    0,    0,
    0,    0,    0, 4441,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6678, 7964,
    0,    0,    0,  902,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  249,    0,    0,  270,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  328, 2865,
    0,    0,   45,    0,  929,  932,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8835,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  459,    0,    0,  292,    0,
   -8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  476,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  933,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4906,    0,    0,    0,    0,  640,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  948,  107,
  473,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  952,    0,    0,
 6713, 6768, 6803, 6838, 6873, 6993, 7150, 7177, 8255, 8303,
 7216, 7271, 8439, 7306, 7341, 7496, 7618, 8469, 7645, 7686,
 7721, 8517, 8557, 8580, 8603, 8626, 7776, 8653, 8693, 8731,
    0,    0,    0, 8771,    0,    0,    0,    0, 1466,    0,
    0,    0,    0,    0,    0,    0,  953,    0,    0,    0,
 8405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 7811, 8001,    0,    0,  914,    0,
    0,    0,    0,    0, 8848,    0, 8876,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  955,    0,    0,    0,    0,    0,    0, 8914,    0,
    0,    0,    0,    0,    0, 9086,    0,    0, 9099,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  570,
    0,    0,    0,    0,    0,    0, 1131,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 9162,
    0,    0,    0,    0,    0,    0,    0,    0, 8089,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 9175,    0,    0,
    0,    0,    0,    0,    0,    0, 1567,    0,    0,    0,
    0, 9188,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 9201,
    0,    0,    0,    0,    0, 8977,    0,    0,    0,    0,
    0,    0,    0,    0, 8990, 9264,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1671,    0,    0,
    0,    0,    0,    0,    0, 9277,    0,    0,    0,    0,
    0, 9003,    0,    0,    0,    0,    0,    0,    0, 1772,
 9073,    0,
};
static int yygindex[] = {                                      0,
   38,    1,  -92, -105, -201, -369,    0,  -40,    0,    0,
    0,  679, -374, 1156,   42,   14,  -96,    0,  752,    0,
    0,    0,  930,    0,    0,    0,    3, 1148,    0,    0,
  -17,  -25,    0,  748,    0,    0,  547,  678,    0, -476,
    0,    0,    0,    0,   23,    0, 1151,    0,    0,   44,
    0,   91,    0,    0,    0,    0,    0, -587,  137, -117,
 1178,   82,   81,    0,    7, 1161,    0,  654,    0,  950,
    0,    0,    0,  563,    0,    0,    0,    0,    0,    0,
    0,
};
#define YYTABLESIZE 9601
static int yytable[] = {                                     129,
   51,  110,   69,  309,  227,  218,  118,  333,  122,  123,
  124,  618,  324,  196,  111,  126,  127,  231,  502,  555,
    2,  230,  564,  337,  392,  239,  333,  115,  246,  333,
    2, 1743,  343,   61,  283,  650,  289,  283,  228,  195,
   61,   61,  114,  333,  333,  113,   51,  125,   51,   31,
  416,  283,  283,  672,   29,   74,   32,  441,   28,   74,
  233,   27,  448,  304,  172,  180,  297,  172,  384,   51,
  128,  372,  302,  188,  195,  305,  271,   64,  333,   64,
   64,   64,  197,   64,  193,  116,  283,  290, 1736,  532,
  686,  224,  296,  373,  537,  308,  110,   84,   64,   64,
   64,   64, 1740,  215,  239,  122,  123,  124,  126,  110,
  333,  250,  471,  470,  419,  130,  110,  253,  283,  578,
  131,  540,  323,  536,  228,  110,  635,  128,   51,  198,
   64,  327,  307,  271,  562,  318,  271,  272,  310,  136,
  272,  449,   30,  540,  219,  132,  114,  228,  219,  385,
  322,  285,  392,  563,  285,  334,  128,  271,  585,   31,
  591,   61,   64,  198,  254,   61,  219, 1736,  285,  285,
  196,  349,  350,  351,  352,  133,  204,  469,   84,  246,
    2,    2,    2,   61,  278,  278,  584,  535,  278,  278,
  278,  278,  278,  278,  278,  584,  195,  476,  579,  452,
  228,  228,  542,  285,  308,  278,  278,  540,  278,  386,
  255,  389,  238,  383,  119,  475,  380,  271,  628,  240,
   51,  272,  120,  227,  588,  228,  391,  239,  393,  395,
  228,  396,  398,  641,  241,  285,   35,  448,  216,  253,
  278,  368,  333,  193,   41,  522,  228,  650,  632,  136,
  283,  226,   30,  446,   61,   61,  333,  333,  193,  540,
  227,  388,  659,   61,  283,  283,  389,  462,  324,  301,
  461,  278,  278,  134,    2,    3,    4,  668,    6,  448,
  217,  105,  106,  107,  510,  511,  254,  229,  592,   15,
   16,  408,  410,  318,   51,    2,    2,    2,   18,   19,
   20,   21,   22,   11,   12,   23,  135,  451,  673,  227,
  454,  333,  674,  400,  507,  402,  668,  675,  403,  283,
  303,   97,  233,  223,   97,   74,   25,   26,  391,   64,
   33,   34,  506,  128,  539,  523,  237,  328,  468,   97,
  626,  122,  263,  124,  263,  263,  227,   64,   13,   14,
  263,  208,  263,  263,  391,   64,  539,   47,  690,  457,
  354,  540,  242,   64,  324,  110,  391,  285,  451,  227,
   13,   14,  179,  123,  299,  298,  465,  256,  323, 1765,
  122,  285,  285,  343,    2,    3,    4,  327,    6,  453,
  179,  105,  106,  107,  514,  256,   61,  384,  239,   15,
   16,  240,  114,  541,  278,   61,  322,  124,   18,   19,
   20,   21,   22,  328,  328,   23,  135,  241,  278,  278,
  539,  416,  227,  227,  501,  541,  504,  248,  371,  324,
  208,   61,  324,  295,   13,   14,  285,  123,  366,   77,
   33,   34,  654,  328,  122,  388,  635,  227,  228,   51,
  512,  519,  227,  605,  554,  638,  556,   35,  677,  328,
  644,  110,  228,  324,  329,   41,  686,   47,  227,  647,
   42,  538,  539,  278,  323,  653,  110,  239,  246,  331,
  240,  374,  377,  327,  656,  419,   13,   14,   42,  541,
  662,  626,  180,  399,  528,   51,  241,   51,  114,  665,
  629,  638,  322,  284,  286,  336,  289,  565,  282,   31,
  180,  324,  291,  283,   29,  228,   32,  289,   28,   51,
   77,   27,  332,  291,  621,  324,  110,  461,  227,  110,
  594,  228, 1774,  227,  525,  235,  227,  227,  227,  323,
  561,  541,  323,  324,  227,  227,  524,  181,  327,  504,
  236,  327,  234,  227,   35,  339,   78,  290,  328,  324,
  110,  328,   41,  114, 1724,  181,  114,  322,  290,  508,
  322,   61, 1727,  323,  539,  328,  328,  615,  193,  324,
  623,  193,  327,  461,  632, 1724,  338,  227,   13,   14,
  287,  567,  568, 1727,  593,  227,  193,  114,  193,  136,
 1730,  322,   30,  340,  580,  246,  651, 1724,  110, 1733,
  328,  642,  643,  355,  670, 1727,  645,   51,  356,  646,
  359,  323,  110,  312,   31,  200,  201,  202,   11,   29,
  327,   32,  363,   28,  360,  323,   27,   78,  331,  460,
  110,  246,  328,  541,  327,  114,   51,  611,  612,  322,
  246,  362,   77,  323,  106,   51,  110,  106,  365,  114,
  619,  687,  327,  322,  299,  677,   77,   77,   51,  323,
  682,  671,  106,  681,  106,  328,  110,  114,  327,  680,
  674,  322,   51,   40,  227,  574,  575,  576,  683,  323,
   51,   51,  691,  114,  182,  182,  182,  322,  327,  182,
  138,  369,  181,  182,  183,  184,  185,  186,  187,  189,
  190,  192,  387,  114,   48,  632,  383,  322,   35,  370,
  371,   77,  662,  663,  219,  221,   41,  665,  328,  374,
  235, 1733,  632,  134,    2,    3,    4,  227,    6,  375,
 1733,  105,  106,  107,  328, 1768,  680,  376, 1733,   15,
   16,  377,  637,  227, 1771,  461,  382, 1733,   18,   19,
   20,   21,   22,  235,  659,   23,  135,  461,  235,   78,
  235,   35,  235,  264,  328,  235,  264,  264,  264,   41,
  386,  404,  405,   78,   78,  264,   25,   26,  328,  328,
   33,   34,  508,  406,  511,  407,  505,  667,  109,  502,
  461,  307,  447,  234,  456,  307,  307,  307,  307,  307,
  459,  307,  463,  353,  313,  314,  315,   47,  316,  317,
  464,  678,  307,  307,  461,  307, 4915,  264,  264,  264,
  264,  230,  264,  264,  286,  264,  289,  477,   78,  473,
 4918, 4921,  291,  328,  683,  689,   15,  461,  461,    2,
    3,    4,    5,  235,    7,  235,  235,  307,  177,   11,
   12,  177,   13,   14,  474,  482,  243,  244,  245,   17,
  176,  478,  479,  176,   19,   20,   21,   22,  480,   15,
   23,   24,  481,  483,   15,  484,   15,  290,   15,  307,
  487,   15,  378,  379,  381, 4924, 1753, 1756, 1759, 1762,
  488,   25,   26,  112,  105,   33,   34,  105,  494,  498,
  496,  401,  513,  104,   40,  193,  104,   42,  500,  193,
  287,   43,  105,  503,  105,  517,  518,   44,   45,   46,
  526,  104,   47,  104,  411,  412,  413,  414,  415,  416,
  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
  427,  520,  527,  428,  429,  430,  431,  432,  433,  434,
  435,  436,  437,  438,  439,  440,  353,  443,  444,   15,
  445,   15,   15,  529,  533,  460,  589,  397,  219,  548,
  223,  549,  219,  550,  551,  590,  552,  235,  235,  235,
  235,  235,  235,  235,  558,  235,  235,  235,  235,  235,
  219,  235,  235,  235,  235,  235,  235,  235,  235,  559,
  584,  493,  235,  235,  235,  235,  235,  560,  544,  235,
  235,  307,  572,  587,  595,  597,   74,  563,   74,   74,
   74,  608,   74,  602,  545,  307,  307,  485,  603,  486,
  235,  235,  607,  610,  235,  235,  235,  235,  235,  235,
   74,  235,  235,  235,  235,   44,  235,  622,  625,  624,
  235,  499,  634,  235,  496,  499,  235,  235,  235,    6,
  627,  235,  105,  106,  107,  636,  509,  640,  544,   74,
   15,   16,  652,  544,  653,  655,  544,  656,   44,   18,
  307,  658,  661,   44,  545,   44,  676,   44,  669,  545,
   44,  679,  545,   15,   15,   15,   15,   15,   15,   15,
   75,   15,   15,   15,   15,   15,  684,   15,   15,   15,
   15,   15,   15,   15,   15,    1,   41,  397,   15,   15,
   15,   15,   15,   76,  193,   15,   15,  544,  207,  193,
  263,  231,  193,  193,  193,  260,   75,   41,  555,  582,
  193,  193,  632,  545,  547,  367,   15,   15, 1721,  193,
   15,   15,   15,   15,   15,   15,  797,   15,   15,   15,
   15,  219,   15,  379,  544,  557,   15,  800,   44, 1610,
   44,   44,   15,   15,   15, 1721, 4912,   15,  582, 1746,
  545,  116, 4927,  569,  571,  203,  108,  186,  119,  199,
  105,  582,  190,  102, 1721,  194,  198,  202, 1721, 1721,
  225, 1721,  531,  206,  211,  313,  314,  315,  596,  316,
  317,  251,  215,  546,  252,  598,  599,  600,  601,  232,
  329,  616,  263,  329,  256,  263,  263,  263,  442,    0,
    0,    0,    0,  263,  263,   74,    0,  329,  329,  614,
   74,    0,  263,   74,   74,   74,  226,  229,  232,    0,
  117,    0,   74,    0,  235,    6,    0,    0,  341,  106,
  107,    0,  629,  342,  335,    0,   15,   16,   74,    0,
  379,  183,  329,    0,  111,   18,  263,  209,  210,  211,
  212,  213,  214,  116,  263,  648,   74,    0,  108,    0,
  119,    0,  105,    0,   74,  102,  313,  314,  315,    0,
  316,  317,   74,    0,  329,    0,   44,   44,   44,    0,
   44,   44,   44,   44,   44,    0,   44,   44,   44,   44,
   44,   44,   44,   44,    0,    0,    0,   44,   44,   44,
   44,   44,  117,    0,   44,   44,    0,    6,    0,    0,
  105,  106,  107,    0,    0,    0,  199,    0,   15,   16,
    0,    0,    0,    0,    0,   44,   44,   18,    0,   44,
   44,   44,   44,   44,   44,    0,   44,   44,   44,   44,
    0,   44,    0,  183,    0,   44,  111,    0,   44,    0,
    0,   44,   44,   44,    0,    0,   44,  116,    0,    0,
    0,    0,  108,    0,  119,    0,  105,    0,    0,  102,
  409,    0,    0,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,  193,  193,   69,    0,  193,    0,
   72,   78,   81,   84,   87,    0,  329,   90,   93,  263,
  263,  263,    0,  263,  263,  583,  193,    0,  586,    0,
  329,  329,  182,  182,  182,    0,  182,  182,   96,   99,
    0,    0,  122,  125,  128,  133,  138,  143,    0,  148,
  152,  157,  160,  331,  165,    0,  331,  183,  168,  606,
  111,    0,    0,    0,  171,  174,  177,    0,  116,  180,
  331,  331,    0,  108,    0,  119,    0,  105,    0,    0,
  102,    0,    0,    0,    0,  329,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,  331,    0,  639,   69,    0,
    0,    0,   72,   78,   81,   84,   87,    0,    0,   90,
   93,  649,    0,    0,    0,    0,  284,  286,    0,  289,
    0,  282,  280,    0,  281,  291,  283,  331,    0,  660,
   96,   99,    0,    0,  122,  125,  128,  133,  138,  143,
  288,  148,  152,  157,  160,  671,  165,    0,  183,    0,
  168,  111,    0,    0,    0,    0,  171,  174,  177,  116,
    0,  180,    0,    0,  108,  685,  119,    0,  105,    0,
  290,  102,   35,  313,  314,  315,    0,  316,  317,    0,
   41,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,  287,    0,    0,   72,   78,   81,   84,
   87,  193,    0,   90,   93,    0,  193,    0,    0,  193,
  193,  193,    0,    0,    0,    0,    0,  193,  193,    0,
    0,    0,    0,    0,   96,   99,  193,    0,  122,  125,
  128,  133,  138,  143,  193,  148,  152,  157,  160,  183,
  165,    0,  111,    0,  168,    0,    0,    0,    0,  331,
  171,  174,  177,  116,    0,  180,    0,    0,  108,    0,
  119,    0,  105,  331,  331,  102,    0,    0,    0,    0,
    0,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,    0,  231,   90,   93,    0,    0,  231,    0,
    0,  231,  231,  231,    0,    0,    0,    0,  331,  231,
  231,    0,    0,    0,    0,   96,   99,    0,  231,  122,
  125,  128,  133,  138,  143,    0,  148,  152,  157,  160,
    0,  165,    0,  183,    0,  168,  111,    0,    0,    0,
    0,  171,  174,  177,  116,    0,  180,    0,    0,  108,
    0,  119,  231,  105,    0,    0,  102,    0,    0,    0,
  231,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,    0,  238,   90,   93,    0,    0,  241,
    0,    0,  241,  241,  241,    0,    0,    0,    0,    0,
  241,  241,    0,    0,    0,    0,   96,   99,    0,  241,
  122,  125,  128,  133,  138,  143,    0,  148,  152,  157,
  160,    0,  165,    0,  183,    0,  168,  111,    0,    0,
    0,    0,  171,  174,  177,   31,  299,  180,    0,  299,
   29,    0,   32,  245,   28,    0,    0,   27,    0,    0,
    0,  248,  205,  299,  299,    0,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,   61,    0,    0,   69,   61,
    0,    0,   72,   78,   81,   84,   87,    0,  299,   90,
   93,    0,    0,    0,    0,    0,   61,   61,  206,  207,
  208,  209,  210,  211,  212,  213,  214,    0,    0,    0,
   96,   99,    0,    0,  122,  125,  128,  133,  138,  143,
  299,  148,  152,  157,  160,   48,  165,  573,    0,    0,
  168,    0,    0,    0,    0,    0,  171,  174,  177,    0,
   31,  180,    0,    0,    0,   29,    0,   32,    0,   28,
    0,    0,   27,    0,    0,    0,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,  513,    0,
   90,   93,    0,  513,    0,    0,  513,  513,  513,    0,
    0,    0,    0,    0,  513,  513,    0,    0,    0,    0,
    0,   96,   99,  513,    0,  122,  125,  128,  133,  138,
  143,    0,  148,  152,  157,  160,    0,  165,    0,    0,
   48,  168,  664,    0,    0,    0,    0,  171,  174,  177,
    0,   31,  180,    0,    0,    0,   29,  517,   32,    0,
   28,    0,  299,   27,    0,  520,    0,    0,    0,    0,
    2,    3,    4,    5,    0,    7,  299,  299,    0,    0,
   11,   12,    0,   13,   14,    0,    0,  243,  244,  245,
   17,    0,    0,    0,    0,   19,   20,   21,   22,    0,
    0,   23,   24,    0,    0,    0,    0,    0,    0,  264,
    0,    0,  264,  264,  264,    0,    0,    0,    0,    0,
  513,  264,   25,   26,    0,  513,   33,   34,  513,  513,
  513,  299,    0,    0,    0,   40,  513,  513,   42,    0,
    0,   48,   43,  688,    0,  513,    0,   31,   44,   45,
   46,    0,   29,   47,   32,   61,   28,    0,    0,   27,
    0,    0,    0,  264,  264,  264,  264,    0,  264,  264,
    0,  264,    0,    0,  320,    2,    3,    4,    5,  517,
    7,    0,    0,    0,    0,   11,   12,  520,   13,   14,
    0,    0,  243,  244,  245,   17,    0,    0,    0,    0,
   19,   20,   21,   22,    0,    0,   23,   24,    0,    0,
    0,    0,  281,  281,    0,    0,  281,  281,  281,  281,
  281,  281,  281,    0,    0,    0,    0,   25,   26,    0,
    0,   33,   34,  281,  281,    0,  281,   48,    0,  692,
   40,    0,    0,   42,    0,    0,    0,   43,    0,    0,
    0,    0,   31,   44,   45,   46,    0,   29,   47,   32,
    0,   28,  264,    0,   27,  264,  264,  264,  281,    0,
    0,    0,    0,  264,  264,    0,    2,    3,    4,    5,
    0,    7,  264,    0,    0,    0,   11,   12,    0,   13,
   14,    0,    0,  243,  244,  245,   17,    0,    0,  281,
  281,   19,   20,   21,   22,  319,    0,   23,   24,  300,
    6,    0,  300,  105,  106,  107,  264,    0,    0,    0,
    0,   15,   16,    0,  264,    0,  300,  300,   25,   26,
   18,    0,   33,   34,    0,    0,    0,    0,    0,    0,
   31,   40,   48,    0,   42,   29,    0,   32,   43,   28,
    0,    0,   27,    0,   44,   45,   46,    0,    0,   47,
    0,  300,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,    0,   13,   14,    0,    0,  243,
  244,  245,   17,  300,    0,    0,    0,   19,   20,   21,
   22,    0,  117,   23,   24,    0,    0,    6,    0,    0,
  105,  106,  107,    0,    0,    0,    0,    0,   15,   16,
    0,    0,    0,    0,   25,   26,   31,   18,   33,   34,
   48,   29,  281,   32,    0,   28,    0,   40,   27,    0,
   42,    0,    0,    0,   43,    0,  281,  281,    0,    0,
   44,   45,   46,    0,    0,   47,    0,    0,    0,    0,
   31,    0,    0,    0,    0,   29,    0,   32,  570,   28,
    0,    0,   27,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,  191,    0,    0,   11,   12,  301,
   13,   14,  301,    0,  243,  244,  245,   17,    0,    0,
    0,  281,   19,   20,   21,   22,  301,  301,   23,   24,
    0,    0,    0,    0,    0,    0,  136,    0,    0,   30,
    0,    0,    0,    0,   61,  300,    0,  450,   61,   25,
   26,    0,    6,   33,   34,  105,  106,  107,    0,  300,
  300,  301,   40,   15,   16,   42,   61,    0,    0,   43,
  136,    0,   18,   30,    0,   44,   45,   46,    0,    0,
   47,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,  301,    0,   11,   12,    0,   13,   14,
    0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
   19,   20,   21,   22,  300,    0,   23,   24,   31,    0,
    0,    0,    0,   29,    0,   32,    0,   28,    0,    0,
   27,    0,  266,    0,    0,    0,   61,   25,   26,    0,
   61,   33,   34,    0,    0,    0,    0,    0,    0,    0,
   40,    0,    0,   42,    0,    0,    0,   43,   61,    0,
    0,    0,    0,   44,   45,   46,    0,    0,   47,    0,
  134,    2,    3,    4,    0,    6,    0,    0,  105,  106,
  107,    0,    0,    0,    0,    0,   15,   16,    0,    0,
    0,    0,    0,    0,    0,   18,   19,   20,   21,   22,
    0,    0,   23,  135,  134,    2,    3,    4,  136,    6,
   31,   30,  105,  106,  107,   29,    0,   32,    0,   28,
   15,   16,   27,   25,   26,  301,    0,   33,   34,   18,
   19,   20,   21,   22,    0,    0,   23,  135,    0,  301,
  301,    0,    0,    0,   31,    0,    0,    0,    0,   29,
    0,   32,    0,   28,   47,    0,   27,   25,   26,    0,
    0,   33,   34,  266,    0,    0,    0,    0,  266,    0,
  581,  266,  266,  266,    0,    0,    0,    0,    0,    0,
  266,    0,    0,    0,    0,    0,   31,    0,   47,  302,
    0,   29,  302,   32,  301,   28,    0,    0,   27,    0,
  136,    0,    0,   30,  647,    0,  302,  302,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,  266,  266,  266,  266,    0,  266,  266,    0,
  266,    0,    0,    0,  136,    0,    0,   30,    0,    0,
    0,  302,  134,    2,    3,    4,    0,    6,    0,    0,
  105,  106,  107,    0,    0,    0,    0,    0,   15,   16,
  264,    0,    0,  264,  264,  264,    0,   18,   19,   20,
   21,   22,  264,  302,   23,  135,  136,  390,    0,   30,
    0,    0,    6,    0,    0,  105,  106,  107,    0,    0,
    0,    0,    0,   15,   16,   25,   26,    0,    0,   33,
   34,    0,   18,    0,    0,    0,   61,    0,    0,    0,
  135,    0,    0,    0,  264,  264,  264,  264,    0,  264,
  264,    0,  264,    0,    0,    0,   47,    0,    0,    0,
  303,    0,    0,  303,  134,    2,    3,    4,    0,    6,
    0,    0,  105,  106,  107,    0,    0,  303,  303,    0,
   15,   16,    0,    0,    0,    0,    0,    0,    0,   18,
   19,   20,   21,   22,    0,    0,   23,  135,  134,    2,
    3,    4,    0,    6,    0,    0,  105,  106,  107,    0,
    0,    0,  303,    0,   15,   16,    0,   25,   26,    0,
    0,   33,   34,   18,   19,   20,   21,   22,    0,  134,
   23,  135,    0,    0,    6,  302,    0,  105,  106,  107,
    0,    2,    3,    4,  303,   15,   16,    0,   47,  302,
  302,   25,   26,    0,   18,   33,   34,    0,    0,    0,
    0,    0,  135,    0,    0,    0,   19,   20,   21,   22,
    0,    0,   23,  135,  173,    0,    0,    0,  168,  170,
    0,  176,   47,  166,  164,  175,  165,    0,  167,    0,
    0,    0,    0,   25,   26,    0,    0,   33,   34,   35,
    0,  162,  174,  163,  302,    0,    0,   41,    0,    0,
  462,  513,    0,    0,    0,    0,  513,    0,    0,  513,
  513,  513,    0,    0,   47,    0,    0,  513,  513,    0,
    0,    0,  177,    0,    0,  169,  513,    0,  128,  128,
    0,  128,  128,  128,  128,  128,  128,  128,  128,    0,
    0,    0,    0,    0,    0,  304,    0,    0,  304,  128,
  128,    0,  128,  128,  128,  171,    0,  172,    0,    0,
  517,    0,  304,  304,    0,    0,  303,    0,  520,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  303,  303,  128,    0,  128,  128,  168,  168,    0,  168,
  168,  168,  168,  168,  168,  168,  168,  304,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  168,  168,  168,
  168,  168,  168,    0,    6,  128,  128,  105,  106,  107,
    0,   12,    0,    0,    0,   15,   16,    0,    0,  304,
    0,  422,    0,    0,   18,  303,  427,    0,    0,  432,
  437,  442,  168,  168,    0,    0,    0,  447,  452,    0,
    0,    0,    0,    0,    0,    0,  457,    0,    0,    0,
    0,    0,  170,  170,    0,  170,  170,  170,  170,  170,
  170,  170,  170,  168,  168,    0,    0,    0,    0,    0,
    0,    0,    0,  170,  170,  170,  170,  170,  170,    0,
  466,  470,  474,  478,    0,  482,  485,    0,  489,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,  170,
    0,    0,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,  159,  160,  161,  178,  179,   35,  128,  170,
  170,    0,    0,    0,    0,   41,    0,    0,    0,    0,
    0,  304,  128,  128,   61,    0,    0,    0,    0,    0,
    0,    0,    0,   61,    0,  304,  304,    0,    0,    0,
    0,    0,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,    0,
    0,  128,  128,  128,  128,    0,  168,  263,    0,    0,
  263,  263,  263,    0,    0,    0,    0,  128,  263,  263,
  168,  168,    0,    0,    0,    0,    0,  263,    0,    0,
  304,    0,    0,    0,    0,  263,    0,    0,    0,    0,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,    0,    0,  168,
  168,  168,  168,  489,    0,    0,    0,    0,    6,    0,
    0,  105,  106,  107,    0,  168,    0,    0,    0,   15,
   16,    0,  170,    0,    0,  334,    0,    0,   18,  334,
    0,  334,  334,    0,  334,  334,  170,  170,    0,    0,
    0,    0,    0,    0,    0,    0,  334,  334,  334,  334,
  334,  334,    0,    0,    0,    0,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,    0,    0,  170,  170,  170,  170,  334,
    0,  334,  334,  332,    0,    0,    0,  332,    0,  332,
  332,  170,  332,  332,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  332,  332,  332,  332,  332,  332,
  193,    0,  334,  334,    0,  193,    0,    0,  193,  193,
  193,    0,    0,    0,    0,    0,  193,  193,    0,    0,
    0,    0,    0,    0,    0,  193,    0,  332,    0,  332,
  332,  282,  282,    0,    0,  282,  282,  282,  282,  282,
  282,  282,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  282,  282,    0,  282,    0,    0,  279,  279,
  332,  332,  279,  279,  279,  279,  279,  279,  279,    0,
    0,    0,    0,    0,    0,    0,  242,    0,    0,  279,
  279,  242,  279,    0,  242,  242,  242,  282,    0,    0,
    0,    0,  242,  242,    0,    0,    0,    0,    0,  280,
  280,  242,    0,  280,  280,  280,  280,  280,  280,  280,
    0,    0,    0,    0,  279,    0,    0,    0,  282,  282,
  280,  280,    0,  280,    0,    0,    0,    0,    0,    0,
    0,    0,  317,  317,    0,    0,  317,  317,  317,  317,
  317,  317,  317,    0,    0,  279,  279,    0,    0,  334,
  334,    0,    0,  317,  317,  280,  317,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  334,
  334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
  334,  334,  334,  334,  334,  334,  280,  280,  317,    0,
  334,  334,    0,    0,    0,  287,    0,  287,  287,  287,
    0,  251,    0,    0,  334,    0,  254,  332,  332,  257,
  260,  263,  287,  287,    0,  287,    0,  266,  269,  317,
  317,    0,    0,    0,    0,    0,  272,  332,  332,  332,
  332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
  332,  332,  332,  332,    0,    0,    0,  287,  332,  332,
    0,  282,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  332,    0,    0,  282,  282,  316,  316,    0,
    0,  316,  316,  316,  316,  316,  316,  316,  279,  287,
    0,    0,    0,    0,    0,    0,    0,    0,  316,  316,
    0,  316,  279,  279,  292,  292,    0,    0,  292,  292,
  292,  292,  292,    0,  292,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  292,  292,    0,  292,  280,
  282,  275,    0,  316,    0,    0,  278,    0,    0,  281,
  284,  287,    0,  280,  280,  293,  293,  290,  293,  293,
  293,  293,  293,  293,    0,  293,  296,  279,    0,    0,
  292,    0,  317,    0,  316,  316,  293,  293,    0,  293,
    0,    0,    0,    0,    0,    0,  317,  317,  308,    0,
    0,    0,  308,  308,  308,  308,  308,    0,  308,    0,
    0,  292,  292,    0,    0,    0,    0,    0,  280,  308,
  308,  293,  308,  289,    0,    0,    0,  289,  289,  289,
  289,  289,    0,  289,    0,    0,    0,    0,    0,    0,
    0,  287,    0,    0,  289,  289,    0,  289,    0,    0,
    0,  317,  293,  293,  308,  287,  287,    0,    0,  290,
    0,    0,    0,  290,  290,  290,  290,  290,  291,  290,
    0,    0,  291,  291,  291,  291,  291,    0,  291,  289,
  290,  290,    0,  290,    0,    0,  308,    0,    0,  291,
  291,    0,  291,    0,    0,   65,    0,   65,   65,   65,
    0,   65,    0,    0,  299,    0,    0,    0,    0,  302,
  287,  289,  305,  308,  311,  290,   65,  316,   65,   65,
  314,  317,    0,    0,  291,    0,    0,    0,    0,  320,
    0,  316,  316,    0,    0,    0,    0,    0,    0,   68,
    0,   68,   68,   68,  292,   68,    0,  290,   65,    0,
    0,    0,    0,    0,    0,    0,  291,    0,  292,  292,
   68,    0,   68,   68,    0,    0,   69,    0,   69,   69,
   69,    0,   69,    0,    0,    0,    0,    0,    0,    0,
   65,    0,    0,    0,    0,  293,  316,   69,    0,   69,
   69,    0,   68,    0,    0,    0,    0,    0,    0,  293,
  293,    0,    0,    0,    0,    0,   66,    0,   66,   66,
   66,    0,   66,  292,    0,    0,    0,    0,  308,   69,
    0,    0,    0,  305,   68,    0,  305,   66,   66,   66,
   66,    0,  308,  308,    0,    0,    0,    0,    0,    0,
  305,  305,   70,  289,   70,   70,   70,    0,   70,    0,
    0,   69,    0,    0,  293,    0,    0,  289,  289,   66,
    0,    0,    0,   70,  323,   70,   70,    0,    0,  326,
    0,    0,  329,  332,  335,  305,    0,    0,    0,  290,
  338,  341,    0,    0,    0,    0,    0,  308,  291,  344,
    0,   66,    0,  290,  290,   70,    0,    0,    0,    0,
  347,    0,  291,  291,    0,  350,    0,  305,  353,  356,
  359,    0,  289,    0,   65,    0,  362,  365,    0,   65,
    0,    0,   65,   65,   65,  368,    0,   70,    0,    0,
   62,   65,   62,   62,   62,    0,   62,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   65,  290,    0,
    0,   62,    0,   62,   62,    0,    0,  291,   68,  306,
    0,    0,  306,   68,    0,   65,   68,   68,   68,    0,
    0,  309,    0,   65,  309,   68,  306,  306,    0,    0,
    0,   65,    0,   62,    0,   69,    0,    0,  309,  309,
   69,   68,    0,   69,   69,   69,    0,    0,    0,    0,
    0,    0,   69,    0,    0,    0,    0,    0,    0,   68,
   67,  306,   67,   67,   67,   62,   67,   68,   69,    0,
    0,    0,    0,  309,   63,   68,   63,   63,   63,    0,
   63,   67,    0,   67,   67,    0,   69,    0,    0,  305,
    0,    0,    0,  306,   69,   63,    0,   63,   63,    0,
    0,    0,   69,  305,  305,  309,    0,    0,   66,    0,
    0,   70,  227,   67,  227,  227,   70,    0,  227,   70,
   70,   70,    0,    0,    0,    0,   66,   63,   70,    0,
    0,    0,    0,    0,   66,    0,  227,  288,    0,  288,
  288,  288,   66,    0,   70,   67,    0,  228,    0,  228,
  228,    0,    0,  228,  288,  288,    0,  288,  305,   63,
    0,    0,   70,    0,    0,  227,    0,    0,    0,    0,
   70,  228,    0,    0,    0,    0,    0,    0,   70,    0,
    0,    0,    0,    0,  310,    0,    0,  310,  128,  288,
    0,    0,    0,    0,  128,  128,  128,  128,  128,   62,
  228,  310,  310,    0,   62,    0,    0,   62,   62,   62,
  128,    0,  128,  128,  128,    0,   62,    0,  392,    0,
    0,  288,    0,  395,    0,  306,  398,  401,  404,    0,
    0,    0,   62,    0,  407,  410,  310,  309,    0,  306,
  306,    0,  128,  413,    0,  128,    0,    0,    0,    0,
   62,  309,  309,    0,    0,  558,    0,    0,   62,    0,
  561,    0,    0,  564,  567,  570,   62,    0,  310,    0,
    0,  573,  576,    0,    0,  128,  128,  264,    0,   67,
  579,    0,    0,    0,   67,    0,    0,   67,   67,   67,
    0,    0,    0,   63,  306,    0,   67,  311,   63,    0,
  311,   63,   63,   63,    0,  312,  309,    0,  312,    0,
   63,    0,   67,    0,  311,  311,    0,  313,    0,    0,
  313,    0,  312,  312,    0,  314,   63,    0,  314,    0,
   67,  227,    0,    0,  313,  313,  227,    0,   67,  227,
  227,  227,  314,  314,   63,    0,   67,  227,  227,  311,
    0,    0,   63,  288,    0,  315,  227,  312,  315,    0,
   63,    0,    0,    0,  227,    0,  228,  288,  288,  313,
    0,  228,  315,  315,  228,  228,  228,  314,    0,    0,
    0,  311,  228,  228,    0,    0,    0,  558,    0,  312,
  227,  228,  561,    0,    0,  564,  567,  570,  227,  228,
  310,  313,    0,  573,  576,    0,    0,  315,    0,  314,
    0,    0,  579,  318,  310,  310,  318,    0,    0,    0,
    0,    0,  288,  296,    0,  228,  296,    0,    0,    0,
  318,  318,    0,  228,    0,    0,    0,    0,    0,  315,
  296,  296,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,   61,
    0,  128,  128,  128,  128,  318,    0,    0,    0,  310,
  264,    0,  264,  264,  297,  296,    0,  297,    0,    0,
    0,    0,    0,    0,    0,  294,    0,    0,  294,    0,
    0,  297,  297,  295,    0,    0,  295,  318,    0,    0,
    0,    0,  294,  294,    0,  322,    0,  296,  322,    0,
  295,  295,  330,  311,  298,  330,    0,  298,    0,    0,
    0,  312,  322,  322,    0,    0,  297,  311,  311,  330,
  330,  298,  298,  313,    0,  312,  312,  294,    0,    0,
    0,  314,    0,    0,    0,  295,    0,  313,  313,    0,
  231,  231,    0,    0,  231,  314,  314,  322,  297,    0,
    0,    0,    0,    0,  330,    0,  298,    0,    0,  294,
    0,  315,  231,    0,    0,    0,    0,  295,    0,    0,
    0,    0,  311,    0,    0,  315,  315,  232,  232,  322,
  312,  232,    0,    0,    0,    0,  330,    0,  298,    0,
    0,  231,  313,    0,    0,    0,    0,    0,    0,  232,
  314,    0,  193,    0,  193,  193,  193,    0,  193,    0,
    0,  173,    0,    0,    0,  168,  170,    0,  176,  318,
  166,  164,  175,  165,    0,  167,  193,    0,  232,  296,
  315,    0,    0,  318,  318,    0,    0,    0,  162,  174,
  163,    0,    0,  296,  296,    0,    0,    0,  588,    0,
    0,    0,    0,  592,    0,  193,  596,  600,  604,    0,
    0,    0,    0,    0,  608,  612,    0,    0,    0,  177,
    0,    0,  169,  616,  264,    0,    0,    0,    0,    0,
  297,    0,    0,    0,    0,    0,    0,    0,  318,    0,
    0,  294,    0,    0,  297,  297,    0,    0,  296,  295,
    0,    0,  171,    0,  172,  294,  294,  245,  620,  623,
    0,  322,    0,  295,  295,  248,    0,    0,  330,    0,
  298,  128,    0,    0,  128,  322,  322,  128,  128,  128,
  128,  128,  330,  330,  298,  298,    0,    0,    0,    0,
    0,    0,    0,  128,    0,  128,  128,  128,    0,  297,
    0,    0,    0,    0,    0,    0,    0,  231,    0,    0,
  294,    0,  231,    0,    0,  231,  231,  231,  295,    0,
    0,    0,    0,  231,  231,  128,    0,    0,  128,    0,
  322,    0,  231,    0,    0,    0,    0,  330,    0,  298,
  231,    0,    0,    0,  232,    0,    0,    0,    0,  232,
    0,    0,  232,  232,  232,    0,    0,    0,  128,  128,
  232,  232,    0,    0,    0,    0,  231,    0,    0,  232,
    0,  193,    0,    0,  231,    0,  193,  232,    0,  193,
  193,  193,    0,    0,    0,    0,    0,  193,  193,    0,
    0,    0, 1749,    0,    0,    0,  193,  592,    0,    0,
  596,  600,  604,  232,  193,    0,    0,    0,  608,  612,
    0,  232,    0,    0,    0,    0,    0,  616,    0,  139,
  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
  160,  161,  178,  179,  264,    0,    0,  264,  264,  264,
    0,  245,  620,  623,    0,  264,  264,    0,    0,  248,
    0,    0,    0,    0,  264,  284,  286,    0,  289,    0,
  282,  280,  264,  281,  291,  283,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  292,  278,  288,
  279,  293,    0,    0,    0,    0,    0,    0,  264,  264,
  264,  264,    0,  264,  264,    0,  264,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,    0,    0,  290,
    0,    0,  285,    0,    0,  128,  128,  128,  128,  128,
  128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
  128,  128,   61,    0,  128,  128,  128,  128,    0,    0,
  284,  286,  287,  289,  361,  282,  280,    0,  281,  291,
  283,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  278,  288,  279,  293,  284,  286,    0,
  289,  495,  282,  280,    0,  281,  291,  283,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  278,  288,  279,  293,  290,    0,    0,  285,    0,    0,
    0,    0,    0,    0,    0,  284,  286,    0,  289,  497,
  282,  280,    0,  281,  291,  283,    0,    0,    0,    0,
    0,  290,    0,    0,  285,    0,    0,  287,  278,  288,
  279,  293,    0,    0,    0,    0,    0,    0,    0,    0,
  284,  286,    0,  289,    0,  282,  280,    0,  281,  291,
  283,    0,    0,    0,  287,    0,    0,    0,    0,  290,
    0,    0,  285,  278,  288,  279,  293,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  284,  286,
    0,  289,    0,  282,  280,    0,  281,  291,  283,    0,
    0,    0,  287,    0,  290,    0,  515,  285,    0,  516,
    0,  278,  288,  279,  293,    0,    0,    0,    0,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,    0,  287,  274,  275,
  276,  277,  290,  284,  286,  285,  289,    0,  282,  280,
    0,  281,  291,  283,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  278,  288,  279,  293,
    0,    0,    0,    0,    0,  287,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  290,    0,  566,
  285,    0,    0,    0,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,    0,    0,  274,  275,  276,  277,    0,    0,    0,
  287,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,    0,    0,
  274,  275,  276,  277,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,    0,    0,  274,  275,
  276,  277,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,    0,    0,  274,  275,  276,  277,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,    0,
    0,  274,  275,  276,  277,    0,  284,  286,    0,  289,
  604,  282,  280,    0,  281,  291,  283,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
  288,  279,  293,    0,    0,    0,    0,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,    0,    0,  274,  275,  276,  277,
  290,  284,  286,  285,  289,  613,  282,  280,    0,  281,
  291,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  278,  288,  279,  293,    0,    0,
    0,    0,    0,  287,    0,    0,  284,  286,    0,  289,
    0,  282,  280,    0,  281,  291,  283,    0,    0,    0,
    0,    0,    0,    0,    0,  290,    0,    0,  285,  278,
  288,  279,  293,    0,    0,    0,    0,    0,    0,    0,
    0,  284,  286,    0,  289,  630,  282,  280,    0,  281,
  291,  283,    0,    0,    0,    0,    0,    0,  287,    0,
  290,    0,  620,  285,  278,  288,  279,  293,    0,    0,
    0,    0,    0,    0,    0,    0,  284,  286,    0,  289,
  631,  282,  280,    0,  281,  291,  283,    0,    0,    0,
    0,    0,    0,  287,    0,  290,    0,    0,  285,  278,
  288,  279,  293,    0,    0,    0,    0,    0,    0,    0,
    0,  284,  286,    0,  289,  632,  282,  280,    0,  281,
  291,  283,    0,    0,    0,    0,    0,    0,  287,    0,
  290,    0,    0,  285,  278,  288,  279,  293,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  287,    0,  290,    0,    0,  285,    0,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,    0,  274,
  275,  276,  277,    0,    0,    0,  284,  286,  287,  289,
  633,  282,  280,    0,  281,  291,  283,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  278,
  288,  279,  293,    0,    0,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,    0,    0,  274,  275,  276,  277,    0,    0,
  290,    0,    0,  285,    0,    0,    0,    0,    0,    0,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,    0,  274,
  275,  276,  277,  287,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,    0,    0,  274,  275,  276,  277,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,    0,  274,
  275,  276,  277,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,    0,    0,  274,  275,  276,  277,  284,  286,
    0,  289,  644,  282,  280,    0,  281,  291,  283,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  278,  288,  279,  293,    0,    0,    0,    0,    0,
    0,    0,    0,  284,  286,    0,  289,    0,  282,  280,
    0,  281,  291,  283,    0,    0,    0,    0,    0,    0,
    0,    0,  290,    0,    0,  285,  278,  288,  279,  293,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,    0,  274,
  275,  276,  277,    0,    0,  287,    0,  290,    0,  666,
  285,  284,  286,    0,  289,    0,  282,  280,    0,  281,
  291,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  278,  288,  279,  293,  770,  776,
  287,  785,    0,  764,  758,    0,  761,  791,  767,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  752,  782,  755,  794,  290,    0,    0,  285,    0,
    0,    0,    0,    0,    0,    0,  884,  890,    0,  899,
    0,  878,  872,    0,  875,  905,  881,    0,    0,    0,
    0,    0,  788,    0,    0,  773,    0,    0,  287,  866,
  896,  869,  908,  992,  998,    0, 1007,    0,  986,  980,
    0,  983, 1013,  989,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  779,  974, 1004,  977, 1016,
  902,    0,    0,  887,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1475, 1481,    0, 1490,    0, 1469, 1463,
    0, 1466, 1496, 1472,    0,    0,    0, 1010,    0,    0,
  995,    0,    0,  893,    0,    0, 1457, 1487, 1460, 1499,
    0,    0,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,    0,
 1001,  274,  275,  276,  277,    0,    0, 1493,    0,    0,
 1478,    0,    0,    0,    0,    0,    0,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,    0,    0,  274,  275,  276,  277,
 1484,    0,    0,    0, 1583, 1589,    0, 1598,    0, 1577,
 1571,    0, 1574, 1604, 1580,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1565, 1595, 1568,
 1607,    0,    0,    0,    0,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,    0,    0,  274,  275,  276,  277, 1601,    0,
    0, 1586,  689,  692,  695,  698,  701,  704,  707,  710,
  713,  716,  719,  722,  725,  728,  731,  734,  737,    0,
    0,  740,  743,  746,  749,    0,    0,    0,    0,    0,
    0, 1592,    0,    0,    0,    0,    0,    0,    0,    0,
  803,  806,  809,  812,  815,  818,  821,  824,  827,  830,
  833,  836,  839,  842,  845,  848,  851,    0,    0,  854,
  857,  860,  863,    0,    0,    0,    0,  911,  914,  917,
  920,  923,  926,  929,  932,  935,  938,  941,  944,  947,
  950,  953,  956,  959,    0,    0,  962,  965,  968,  971,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1394, 1397, 1400,
 1403, 1406, 1409, 1412, 1415, 1418, 1421, 1424, 1427, 1430,
 1433, 1436, 1439, 1442,    0,    0, 1445, 1448, 1451, 1454,
    0,    0,    0,    0, 1694, 1700,    0, 1709,    0, 1688,
 1682,    0, 1685, 1715, 1691,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1676, 1706, 1679,
 1718,    0,    0,    0,    0,    0,    0,    0,    0, 1858,
 1864,    0, 1873,    0, 1852, 1846,    0, 1849, 1879, 1855,
    0,    0,    0,    0,    0,    0,    0,    0, 1712,    0,
    0, 1697, 1840, 1870, 1843, 1882,    0,    0, 1502, 1505,
 1508, 1511, 1514, 1517, 1520, 1523, 1526, 1529, 1532, 1535,
 1538, 1541, 1544, 1547, 1550,    0,    0, 1553, 1556, 1559,
 1562, 1703,    0, 1876, 1966, 1972, 1861, 1981,    0, 1960,
 1954,    0, 1957, 1987, 1963,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1948, 1978, 1951,
 1990,    0,    0,    0,    0,    0, 1867,    0,    0, 2074,
 2080,    0, 2089,    0, 2068, 2062,    0, 2065, 2095, 2071,
    0,    0,    0,    0,    0,    0,    0,    0, 1984,    0,
    0, 1969, 2056, 2086, 2059, 2098,    0,    0,    0,    0,
    0,    0,    0,    0, 2182, 2188,    0, 2197,    0, 2176,
 2170,    0, 2173, 2203, 2179,    0,    0,    0,    0,    0,
    0, 1975,    0, 2092,    0,    0, 2077, 2164, 2194, 2167,
 2206,    0,    0,    0,    0,    0,    0,    0,    0, 2290,
 2296,    0, 2305,    0, 2284, 2278,    0, 2281, 2311, 2287,
    0,    0,    0,    0,    0,    0, 2083,    0, 2200,    0,
    0, 2185, 2272, 2302, 2275, 2314,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2191,    0, 2308,    0,    0, 2293,    0, 1613, 1616,
 1619, 1622, 1625, 1628, 1631, 1634, 1637, 1640, 1643, 1646,
 1649, 1652, 1655, 1658, 1661,    0,    0, 1664, 1667, 1670,
 1673,    0,    0,    0,    0,    0, 2299,    0,    0,    0,
    0,    0,    0, 1777, 1780, 1783, 1786, 1789, 1792, 1795,
 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825,
    0,    0, 1828, 1831, 1834, 1837,    0,    0,    0, 2398,
 2404,    0, 2413,    0, 2392, 2386,    0, 2389, 2419, 2395,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2380, 2410, 2383, 2422,    0,    0, 1885, 1888,
 1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1915, 1918,
 1921, 1924, 1927, 1930, 1933,    0,    0, 1936, 1939, 1942,
 1945,    0,    0, 2416,    0,    0, 2401,    0,    0,    0,
    0,    0,    0, 1993, 1996, 1999, 2002, 2005, 2008, 2011,
 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041,
    0,    0, 2044, 2047, 2050, 2053, 2407,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2101, 2104,
 2107, 2110, 2113, 2116, 2119, 2122, 2125, 2128, 2131, 2134,
 2137, 2140, 2143, 2146, 2149,    0,    0, 2152, 2155, 2158,
 2161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2209, 2212, 2215, 2218, 2221, 2224, 2227,
 2230, 2233, 2236, 2239, 2242, 2245, 2248, 2251, 2254, 2257,
    0,    0, 2260, 2263, 2266, 2269, 2506, 2512,    0, 2521,
    0, 2500, 2494,    0, 2497, 2527, 2503,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2488,
 2518, 2491, 2530, 2614, 2620,    0, 2629,    0, 2608, 2602,
    0, 2605, 2635, 2611,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2596, 2626, 2599, 2638,
 2524,    0,    0, 2509,    0,    0,    0,    0,    0,    0,
    0,    0, 2872, 2878,    0, 2887,    0, 2866, 2860,    0,
 2863, 2893, 2869,    0,    0,    0,    0, 2632,    0,    0,
 2617,    0,    0, 2515,    0, 2854, 2884, 2857, 2896,    0,
    0,    0,    0, 2317, 2320, 2323, 2326, 2329, 2332, 2335,
 2338, 2341, 2344, 2347, 2350, 2353, 2356, 2359, 2362, 2365,
 2623,    0, 2368, 2371, 2374, 2377, 2890, 2980, 2986, 2875,
 2995,    0, 2974, 2968,    0, 2971, 3001, 2977,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2962, 2992, 2965, 3004,    0,    0,    0,    0,    0, 2881,
    0,    0, 3163, 3169,    0, 3178,    0, 3157, 3151,    0,
 3154, 3184, 3160,    0,    0,    0,    0,    0,    0,    0,
    0, 2998,    0,    0, 2983, 3145, 3175, 3148, 3187,    0,
    0,    0,    0,    0,    0,    0,    0, 3271, 3277,    0,
 3286,    0, 3265, 3259,    0, 3262, 3292, 3268,    0,    0,
    0,    0,    0,    0, 2989,    0, 3181,    0,    0, 3166,
 3253, 3283, 3256, 3295,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3172,
    0, 3289,    0,    0, 3274,    0,    0,    0,    0,    0,
 2425, 2428, 2431, 2434, 2437, 2440, 2443, 2446, 2449, 2452,
 2455, 2458, 2461, 2464, 2467, 2470, 2473,    0,    0, 2476,
 2479, 2482, 2485,    0, 3280,    0,    0, 2533, 2536, 2539,
 2542, 2545, 2548, 2551, 2554, 2557, 2560, 2563, 2566, 2569,
 2572, 2575, 2578, 2581,    0,    0, 2584, 2587, 2590, 2593,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2791, 2794, 2797, 2800,
 2803, 2806, 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830,
 2833, 2836, 2839,    0,    0, 2842, 2845, 2848, 2851,    0,
    0,    0, 3379, 3385,    0, 3394,    0, 3373, 3367,    0,
 3370, 3400, 3376,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3361, 3391, 3364, 3403,    0,
    0, 2899, 2902, 2905, 2908, 2911, 2914, 2917, 2920, 2923,
 2926, 2929, 2932, 2935, 2938, 2941, 2944, 2947,    0,    0,
 2950, 2953, 2956, 2959,    0,    0, 3397,    0,    0, 3382,
    0,    0,    0,    0,    0,    0, 3082, 3085, 3088, 3091,
 3094, 3097, 3100, 3103, 3106, 3109, 3112, 3115, 3118, 3121,
 3124, 3127, 3130,    0,    0, 3133, 3136, 3139, 3142, 3388,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3190, 3193, 3196, 3199, 3202, 3205, 3208, 3211, 3214,
 3217, 3220, 3223, 3226, 3229, 3232, 3235, 3238,    0,    0,
 3241, 3244, 3247, 3250, 3487, 3493,    0, 3502,    0, 3481,
 3475,    0, 3478, 3508, 3484,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3469, 3499, 3472,
 3511, 3670, 3676,    0, 3685,    0, 3664, 3658,    0, 3661,
 3691, 3667,    0,  462,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3652, 3682, 3655, 3694, 3505,    0,
    0, 3490,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3778, 3784,    0, 3793,    0, 3772, 3766,    0,
 3769, 3799, 3775,    0,    0, 3688,    0,    0, 3673,    0,
    0, 3496,    0,    0,    0, 3760, 3790, 3763, 3802,    0,
    0,    0,    0,    0,    0,    0,    0, 3886, 3892,    0,
 3901,    0, 3880, 3874,    0, 3877, 3907, 3883, 3679,    0,
    0,    0,    0,    0,    0,    0, 3796,    0,    0, 3781,
 3868, 3898, 3871, 3910,    0,    0, 3298, 3301, 3304, 3307,
 3310, 3313, 3316, 3319, 3322, 3325, 3328, 3331, 3334, 3337,
 3340, 3343, 3346,    0,    0, 3349, 3352, 3355, 3358, 3787,
    0, 3904, 4369, 4375, 3889, 4384,    0, 4363, 4357,    0,
 4360, 4390, 4366,    0,  422,    0,    0,    0,    0,  427,
    0,    0,  432,  437,  442, 4351, 4381, 4354, 4393,    0,
  447,  452,    0,    0, 3895,    0,    0, 4777, 4783,  457,
 4792,    0, 4771, 4765,    0, 4768, 4798, 4774,    0,    0,
    0,    0,    0,    0,    0,    0, 4387,    0,    0, 4372,
 4759, 4789, 4762, 4801,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  466,  470,  474,  478,    0,  482,  485,
    0,  489,    0,    0,    0,    0,    0,    0,    0, 4378,
    0, 4795,    0,    0, 4780,    0,    0,    0, 3406, 3409,
 3412, 3415, 3418, 3421, 3424, 3427, 3430, 3433, 3436, 3439,
 3442, 3445, 3448, 3451, 3454,    0,    0, 3457, 3460, 3463,
 3466,    0,    0,    0, 4786, 3589, 3592, 3595, 3598, 3601,
 3604, 3607, 3610, 3613, 3616, 3619, 3622, 3625, 3628, 3631,
 3634, 3637,    0,    0, 3640, 3643, 3646, 3649,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3697, 3700, 3703, 3706,
 3709, 3712, 3715, 3718, 3721, 3724, 3727, 3730, 3733, 3736,
 3739, 3742, 3745,    0,    0, 3748, 3751, 3754, 3757,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829,
 3832, 3835, 3838, 3841, 3844, 3847, 3850, 3853,    0,    0,
 3856, 3859, 3862, 3865,    0,    0,    0, 4885, 4891,    0,
 4900,    0, 4879, 4873,    0, 4876, 4906, 4882,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4867, 4897, 4870, 4909,    0,    0, 4288, 4291, 4294, 4297,
 4300, 4303, 4306, 4309, 4312, 4315, 4318, 4321, 4324, 4327,
 4330, 4333, 4336,    0,    0, 4339, 4342, 4345, 4348,  462,
    0, 4903,    0, 1082, 4888, 1085, 1091,    0,    0,    0,
    0, 4696, 4699, 4702, 4705, 4708, 4711, 4714, 4717, 4720,
 4723, 4726, 4729, 4732, 4735, 4738, 4741, 4744,    0,    0,
 4747, 4750, 4753, 4756, 4894, 5011, 5017, 1088, 5026,    0,
 5005, 4999,    0, 5002, 5032, 5008,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4993, 5023,
 4996, 5035,  284,  286,    0,  289,    0,  282,  280,    0,
  281,  291,  283,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  278,  288,    0,  293, 5029,
    0,    0, 5014,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1157,    0,
 1160, 1166,    0,    0,    0,    0,  290,    0,    0,  285,
    0,    0, 5020,    0,    0,    0,    0,    0,    0,    0,
  422, 1232,    0, 1235, 1241,  427,    0,    0,  432,  437,
  442,    0, 1163,    0,    0,    0,  447,  452,    0,  287,
    0,    0,    0,    0, 1307,  457, 1310, 1316,    0,    0,
    0,    0,    0,    0,    0, 1238,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1382,    0, 1385, 1391, 1313,  466,
  470,  474,  478,    0,  482,  485,    0,  489,    0,    0,
    0, 4804, 4807, 4810, 4813, 4816, 4819, 4822, 4825, 4828,
 4831, 4834, 4837, 4840, 4843, 4846, 4849, 4852, 1388,    0,
 4855, 4858, 4861, 4864, 2704,    0, 2707, 2713,    0,    0,
    0,    0,    0,    0, 1019, 1022, 1025, 1028, 1031, 1034,
 1037, 1040, 1043, 1046, 1049, 1052, 1055, 1058, 1061, 1064,
 1067,    0,    0, 1070, 1073, 1076, 1079,    0, 2710,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2779,    0, 2782, 2788,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4930,
 4933, 4936, 4939, 4942, 4945, 4948, 4951, 4954, 4957, 4960,
 4963, 4966, 4969, 4972, 4975, 4978, 2785,    0, 4981, 4984,
 4987, 4990,    0,    0,    0,    0,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,    0,    0,  274,  275,  276,  277, 1094,
 1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124,
 1127, 1130, 1133, 1136, 1139, 1142,    0,    0, 1145, 1148,
 1151, 1154, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 1190,
 1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217,    0,
    0, 1220, 1223, 1226, 1229, 1244, 1247, 1250, 1253, 1256,
 1259, 1262, 1265, 1268, 1271, 1274, 1277, 1280, 1283, 1286,
 1289, 1292,    0,    0, 1295, 1298, 1301, 1304, 3070,    0,
 3073, 3079,    0,    0,    0, 1319, 1322, 1325, 1328, 1331,
 1334, 1337, 1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361,
 1364, 1367,    0,    0, 1370, 1373, 1376, 1379, 3577,    0,
 3580, 3586, 3076,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2641, 2644, 2647, 2650, 2653,
 2656, 2659, 2662, 2665, 2668, 2671, 2674, 2677, 2680, 2683,
 2686, 2689, 3583,    0, 2692, 2695, 2698, 2701,    0,    0,
    0,    0,    0,    0,    0,    0, 3976,    0, 3979, 3985,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2716, 2719, 2722, 2725, 2728, 2731, 2734,
 2737, 2740, 2743, 2746, 2749, 2752, 2755, 2758, 2761, 2764,
 3982,    0, 2767, 2770, 2773, 2776, 4051,    0, 4054, 4060,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  523, 4126,
    0, 4129, 4135,  527,    0,    0,  531,  535,  539,    0,
 4057,    0,    0,    0,  543,  547,    0,    0,    0,    0,
    0, 1749, 4201,  551, 4204, 4210,  592,    0,    0,  596,
  600,  604,    0, 4132,    0,    0,    0,  608,  612,    0,
    0,    0,    0,    0,    0, 4276,  616, 4279, 4285,    0,
    0,    0,    0,    0,    0,    0, 4207,  485,  485,  485,
  485,    0,  482,  485,    0,  485,    0,    0,    0,    0,
    0,    0, 4459,    0, 4462, 4468,    0,    0,    0, 4282,
  245,  620,  623,    0,    0,    0,    0,    0,  248, 3007,
 3010, 3013, 3016, 3019, 3022, 3025, 3028, 3031, 3034, 3037,
 3040, 3043, 3046, 3049, 3052, 3055, 4465,    0, 3058, 3061,
 3064, 3067, 4534,    0, 4537, 4543,    0,    0,    0, 3514,
 3517, 3520, 3523, 3526, 3529, 3532, 3535, 3538, 3541, 3544,
 3547, 3550, 3553, 3556, 3559, 3562,    0,    0, 3565, 3568,
 3571, 3574,    0,    0,    0,    0, 4540,    0,    0,    0,
 4609,    0, 4612, 4618,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3913, 3916, 3919,
 3922, 3925, 3928, 3931, 3934, 3937, 3940, 3943, 3946, 3949,
 3952, 3955, 3958, 3961, 4615,    0, 3964, 3967, 3970, 3973,
 4684,    0, 4687, 4693,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3988, 3991, 3994,
 3997, 4000, 4003, 4006, 4009, 4012, 4015, 4018, 4021, 4024,
 4027, 4030, 4033, 4036, 4690,    0, 4039, 4042, 4045, 4048,
 4063, 4066, 4069, 4072, 4075, 4078, 4081, 4084, 4087, 4090,
 4093, 4096, 4099, 4102, 4105, 4108, 4111,    0,    0, 4114,
 4117, 4120, 4123, 4138, 4141, 4144, 4147, 4150, 4153, 4156,
 4159, 4162, 4165, 4168, 4171, 4174, 4177, 4180, 4183, 4186,
    0,    0, 4189, 4192, 4195, 4198, 4213, 4216, 4219, 4222,
 4225, 4228, 4231, 4234, 4237, 4240, 4243, 4246, 4249, 4252,
 4255, 4258, 4261,    0,    0, 4264, 4267, 4270, 4273,    0,
    0,    0,    0, 4396, 4399, 4402, 4405, 4408, 4411, 4414,
 4417, 4420, 4423, 4426, 4429, 4432, 4435, 4438, 4441, 4444,
  462,    0, 4447, 4450, 4453, 4456,    0,    0,    0,    0,
    0,    0,    0,  462,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4471, 4474, 4477, 4480, 4483, 4486, 4489,
 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513, 4516, 4519,
    0,  462, 4522, 4525, 4528, 4531,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4546, 4549, 4552, 4555, 4558, 4561, 4564, 4567, 4570,
 4573, 4576, 4579, 4582, 4585, 4588, 4591, 4594,    0,  462,
 4597, 4600, 4603, 4606,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4621, 4624, 4627, 4630, 4633, 4636, 4639, 4642, 4645,
 4648, 4651, 4654, 4657, 4660, 4663, 4666, 4669,    0,    0,
 4672, 4675, 4678, 4681,    0,    0,    0,    0,    0,    0,
    0,  422,    0,    0,    0,    0,  427,    0,    0,  432,
  437,  442,  462,    0,  422,    0,    0,  447,  452,  427,
    0,    0,  432,  437,  442,  462,  457,    0,    0,    0,
  447,  452,    0,    0,    0,    0,    0,    0,  462,  457,
    0,    0,  422,    0,    0,    0,    0,  427,    0,    0,
  432,  437,  442,    0,    0,    0,    0,    0,  447,  452,
  466,  470,  474,  478,    0,  482,  485,  457,  489,    0,
    0,    0,    0,  466,  470,  474,  478,    0,  482,  485,
  422,  489,    0,    0,    0,  427,    0,    0,  432,  437,
  442,    0,    0,    0,    0,    0,  447,  452,    0,    0,
    0,  466,  470,  474,  478,  457,  482,  485,  462,  489,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  466,
  470,  474,  478,  422,  482,  485,    0,  489,  427,    0,
    0,  432,  437,  442,    0,    0,  422,    0,    0,  447,
  452,  427,    0,    0,  432,  437,  442,    0,  457,  422,
    0,    0,  447,  452,  427,    0,    0,  432,  437,  442,
    0,  457,    0,    0,    0,  447,  452,    0,    0,    0,
    0,    0,    0,    0,  457,    0,    0,    0,    0,    0,
    0,    0,  466,  470,  474,  478,    0,  482,  485,    0,
  489,    0,    0,    0,    0,  466,  470,  474,  478,    0,
  482,  485,    0,  489,    0,    0,    0,    0,  466,  470,
  474,  478,    0,  482,  485,    0,  489,    0,    0,  422,
    0,    0,    0,    0,  427,    0,    0,  432,  437,  442,
    0,    0, 1749,    0,    0,  447,  452,  592,    0,    0,
  596,  600,  604,    0,  457, 1749,    0,    0,  608,  612,
  592,    0,    0,  596,  600,  604,    0,  616,    0,    0,
    0,  608,  612,    0,    0,    0,    0,    0,    0,    0,
  616,    0,    0,    0,    0,    0,    0,    0,  466,  470,
  474,  478,    0,  482,  485,    0,  489,    0,    0,    0,
    0,  245,  620,  623,    0,    0,    0,    0,    0,  248,
    0,    0,    0,    0,  245,  620,  623,    0, 1749,    0,
    0,    0,  248,  592,    0,    0,  596,  600,  604,    0,
    0, 1749,    0,    0,  608,  612,  592,    0,    0,  596,
  600,  604,    0,  616, 1749,    0,    0,  608,  612,  592,
    0,    0,  596,  600,  604,    0,  616, 1749,    0,    0,
  608,  612,  592,    0,    0,  596,  600,  604,    0,  616,
    0,    0,    0,  608,  612,    0,    0,  245,  620,  623,
    0,    0,  616,    0,    0,  248,    0,    0,    0,    0,
  245,  620,  623,    0,    0,    0,    0,    0,  248,    0,
    0,    0,    0,  245,  620,  623,    0,    0,    0,    0,
    0,  248,    0,    0,    0,    0,  245,  620,  623,    0,
 1749,    0,    0,    0,  248,  592,    0,    0,  596,  600,
  604,    0,    0, 1749,    0,    0,  608,  612,  592,    0,
    0,  596,  600,  604,    0,  616,    0,    0,    0,  608,
  612,    0,    0,    0,    0,    0,    0,    0,  616,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  245,
  620,  623,    0,    0,    0,    0,    0,  248,    0,    0,
    0,    0,  245,  620,  623,    0,    0,    0,    0,    0,
  248,
};
static int yycheck[] = {                                      17,
    0,    1,    0,   96,   38,   46,    6,  113,    8,    9,
   10,   91,  109,   39,    1,   15,   16,   38,  388,  496,
    0,   42,  126,  116,  226,   44,   41,    5,   69,   44,
  125,   40,  125,   60,   41,  623,   40,   44,   60,   39,
   59,   60,    5,   58,   59,  263,   46,   60,   48,   33,
  257,   58,   59,   61,   38,   38,   40,   41,   42,   42,
   60,   45,   44,   59,   41,   24,   84,   44,   44,   69,
  123,  258,   90,   32,   74,   93,   44,   38,   93,   40,
   41,   42,   39,   44,  126,    5,   93,   91,   44,  464,
  678,   50,   59,  280,  469,   95,   96,   44,   59,   60,
   61,   62,   58,   40,  123,  105,  106,  107,  108,  109,
  125,   74,   58,   59,  321,   60,  116,   74,  125,   44,
   60,   44,  109,   59,   60,  125,  603,  123,  128,   39,
   91,  109,   95,   41,  504,   98,   44,   41,   97,  123,
   44,  123,  126,   44,   38,   60,  109,   60,   42,  125,
  109,   41,  354,  257,   44,  114,  123,  125,  528,   33,
  535,   38,  123,   40,   74,   42,   60,  123,   58,   59,
  196,  130,  131,  132,  133,   60,   40,  123,  125,  220,
  275,  276,  277,   60,   37,   38,  273,  123,   41,   42,
   43,   44,   45,   46,   47,  282,  196,   44,  123,   59,
   60,   60,  125,   93,  204,   58,   59,   44,   61,   38,
   74,   40,   44,   42,  257,   62,   45,  125,  593,   44,
  220,  125,  265,  257,  125,   60,  226,   59,  228,  229,
   60,  231,  232,   60,   59,  125,  316,   44,   40,  196,
   93,  204,  257,   44,  324,   59,   60,   60,  257,  123,
  257,  273,  126,  294,  273,  282,  271,  272,   59,   44,
  282,  224,   60,  282,  271,  272,  225,   41,  365,   59,
   44,  124,  125,  257,  258,  259,  260,   60,  262,   44,
   40,  265,  266,  267,  402,  403,  196,  308,  125,  273,
  274,  250,  255,  256,  294,  275,  276,  277,  282,  283,
  284,  285,  286,  268,  269,  289,  290,  307,  316,   38,
  310,  326,  320,  233,   44,  235,  123,  325,  238,  326,
  316,   41,  322,  126,   44,  308,  310,  311,  328,  290,
  314,  315,   62,  123,  257,  453,   59,  273,  338,   59,
  125,  341,  319,   59,  321,  322,  282,  308,  271,  272,
  319,   44,  321,  322,  354,  316,  257,  341,  123,  318,
  273,   44,   59,  324,  461,  365,  366,  257,  368,  282,
  271,  272,   44,   59,   58,   59,  335,   44,  365,  273,
   59,  271,  272,  476,  258,  259,  260,  365,  262,  309,
   62,  265,  266,  267,   41,   62,  273,   44,   44,  273,
  274,   44,  365,  326,  257,  282,  365,  123,  282,  283,
  284,  285,  286,  273,  273,  289,  290,   44,  271,  272,
  257,  257,  282,  282,  387,  326,  389,   59,  257,  526,
  123,  308,  529,   59,  271,  272,  326,  123,  273,   44,
  314,  315,  125,  273,  123,  408,  273,  282,   60,  449,
  409,  449,  282,  559,  495,  282,  497,  316,   60,  273,
  273,  461,   60,  560,   59,  324,   60,  341,  282,  282,
   41,  471,  257,  326,  461,  273,  476,  123,  519,   40,
  123,  310,  311,  461,  282,  321,  271,  272,   59,  326,
  273,  273,   44,   91,  457,  495,  123,  497,  461,  282,
  282,  607,  461,   37,   38,   59,   40,  507,   42,   33,
   62,  608,   46,   47,   38,   60,   40,   40,   42,  519,
  125,   45,  257,   46,   41,  622,  526,   44,  257,  529,
   59,   60,   60,  262,  454,   44,  265,  266,  267,  526,
  503,  326,  529,  640,  273,  274,   91,   44,  526,  512,
   59,  529,   61,  282,  316,  257,   44,   91,   41,  656,
  560,   44,  324,  526,  316,   62,  529,  526,   91,   93,
  529,   60,  324,  560,  257,   58,   59,  577,   41,  676,
   41,   44,  560,   44,  257,  316,   58,  316,  271,  272,
  124,  510,  511,  324,  123,  324,   59,  560,   61,  123,
  273,  560,  126,  123,  523,  646,  624,  316,  608,  282,
   93,  611,  612,   41,  655,  324,  616,  617,   93,  617,
   40,  608,  622,  126,   33,  265,  266,  267,  268,   38,
  608,   40,  257,   42,   41,  622,   45,  125,   40,   41,
  640,  682,  125,  326,  622,  608,  646,  567,  568,  608,
  691,   93,  257,  640,   41,  655,  656,   44,   40,  622,
  580,  679,  640,  622,   58,  659,  271,  272,  668,  656,
  668,  273,   59,  667,   61,  273,  676,  640,  656,  273,
  282,  640,  682,  323,  282,  275,  276,  277,  282,  676,
  690,  691,  690,  656,  317,  318,  319,  656,  676,  322,
   23,  264,   25,   26,   27,   28,   29,   30,   31,   32,
   33,   34,   40,  676,  123,  257,  125,  676,  316,  257,
  257,  326,  642,  643,   47,   48,  324,  647,  273,  264,
    0,  273,  257,  257,  258,  259,  260,  282,  262,  257,
  282,  265,  266,  267,  273,  273,  666,  257,  273,  273,
  274,  264,   41,  282,  282,   44,  337,  282,  282,  283,
  284,  285,  286,   33,   41,  289,  290,   44,   38,  257,
   40,  316,   42,  262,  257,   45,  265,  266,  267,  324,
  257,  257,   58,  271,  272,  274,  310,  311,  271,  272,
  314,  315,   38,   58,   40,   58,   42,   41,   40,   45,
   44,   37,  257,   61,  257,   41,   42,   43,   44,   45,
  257,   47,  257,  136,  317,  318,  319,  341,  321,  322,
  123,   41,   58,   59,   44,   61,  257,  316,  317,  318,
  319,   42,  321,  322,   38,  324,   40,   61,  326,  257,
  271,  272,   46,  326,   41,   41,    0,   44,   44,  258,
  259,  260,  261,  123,  263,  125,  126,   93,   41,  268,
  269,   44,  271,  272,  257,   93,  275,  276,  277,  278,
   41,   62,   62,   44,  283,  284,  285,  286,   62,   33,
  289,  290,   62,   93,   38,   41,   40,   91,   42,  125,
   40,   45,  215,  216,  217,  326,  257,  258,  259,  260,
  257,  310,  311,  257,   41,  314,  315,   44,  264,   40,
   59,  234,  257,   41,  323,   38,   44,  326,   40,   42,
  124,  330,   59,   40,   61,   40,  257,  336,  337,  338,
   40,   59,  341,   61,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   58,   40,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  123,
  293,  125,  126,   40,   38,   41,   38,   42,   38,   40,
   40,   40,   42,   40,   40,  257,   41,  257,  258,  259,
  260,  261,  262,  263,   41,  265,  266,  267,  268,  269,
   60,  271,  272,  273,  274,  275,  276,  277,  278,   42,
   41,  257,  282,  283,  284,  285,  286,   40,  472,  289,
  290,  257,   40,   40,   61,   59,   38,  257,   40,   41,
   42,   40,   44,   61,  472,  271,  272,  360,   59,  362,
  310,  311,   42,  257,  314,  315,  316,  317,  318,  319,
   62,  321,  322,  323,  324,    0,  326,   40,  257,   41,
  330,  384,  260,  333,  310,  311,  336,  337,  338,  262,
   59,  341,  265,  266,  267,   41,  399,   40,  532,   91,
  273,  274,   59,  537,   59,   41,  540,   40,   33,  282,
  326,   41,   40,   38,  532,   40,   40,   42,   59,  537,
   45,   41,  540,  257,  258,  259,  260,  261,  262,  263,
  123,  265,  266,  267,  268,  269,  260,  271,  272,  273,
  274,  275,  276,  277,  278,    0,   59,   42,  282,  283,
  284,  285,  286,  123,  257,  289,  290,  591,   59,  262,
   42,  257,  265,  266,  267,   44,   41,   41,  333,  257,
  273,  274,  257,  591,  477,  257,  310,  311,  257,  282,
  314,  315,  316,  317,  318,  319,   91,  321,  322,  323,
  324,   60,  326,  496,  628,  498,  330,   91,  123,  273,
  125,  126,  336,  337,  338,  257,  273,  341,  257,  257,
  628,   33,   62,  516,  517,   40,   38,  257,   40,   39,
   42,  524,  262,   45,  257,  265,  266,  267,  257,  257,
   50,  257,  461,  273,  274,  317,  318,  319,  540,  321,
  322,   74,  282,  476,   74,  548,  549,  550,  551,   52,
   41,  578,  262,   44,   74,  265,  266,  267,  289,   -1,
   -1,   -1,   -1,  273,  274,  257,   -1,   58,   59,  572,
  262,   -1,  282,  265,  266,  267,  316,  317,  318,   -1,
  257,   -1,  274,   -1,  324,  262,   -1,   -1,  265,  266,
  267,   -1,  595,  270,  114,   -1,  273,  274,  290,   -1,
  603,  123,   93,   -1,  126,  282,  316,  330,  331,  332,
  333,  334,  335,   33,  324,  618,  308,   -1,   38,   -1,
   40,   -1,   42,   -1,  316,   45,  317,  318,  319,   -1,
  321,  322,  324,   -1,  125,   -1,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
  275,  276,  277,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  257,   -1,  289,  290,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  196,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,  310,  311,  282,   -1,  314,
  315,  316,  317,  318,  319,   -1,  321,  322,  323,  324,
   -1,  326,   -1,  123,   -1,  330,  126,   -1,  333,   -1,
   -1,  336,  337,  338,   -1,   -1,  341,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
  250,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   40,   41,  278,   -1,   44,   -1,
  282,  283,  284,  285,  286,   -1,  257,  289,  290,  317,
  318,  319,   -1,  321,  322,  526,   62,   -1,  529,   -1,
  271,  272,  317,  318,  319,   -1,  321,  322,  310,  311,
   -1,   -1,  314,  315,  316,  317,  318,  319,   -1,  321,
  322,  323,  324,   41,  326,   -1,   44,  123,  330,  560,
  126,   -1,   -1,   -1,  336,  337,  338,   -1,   33,  341,
   58,   59,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,  326,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   93,   -1,  608,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,
  290,  622,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,  125,   -1,  640,
  310,  311,   -1,   -1,  314,  315,  316,  317,  318,  319,
   61,  321,  322,  323,  324,  656,  326,   -1,  123,   -1,
  330,  126,   -1,   -1,   -1,   -1,  336,  337,  338,   33,
   -1,  341,   -1,   -1,   38,  676,   40,   -1,   42,   -1,
   91,   45,  316,  317,  318,  319,   -1,  321,  322,   -1,
  324,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,  124,   -1,   -1,  282,  283,  284,  285,
  286,  257,   -1,  289,  290,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,  310,  311,  282,   -1,  314,  315,
  316,  317,  318,  319,  290,  321,  322,  323,  324,  123,
  326,   -1,  126,   -1,  330,   -1,   -1,   -1,   -1,  257,
  336,  337,  338,   33,   -1,  341,   -1,   -1,   38,   -1,
   40,   -1,   42,  271,  272,   45,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,  257,  289,  290,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,  326,  273,
  274,   -1,   -1,   -1,   -1,  310,  311,   -1,  282,  314,
  315,  316,  317,  318,  319,   -1,  321,  322,  323,  324,
   -1,  326,   -1,  123,   -1,  330,  126,   -1,   -1,   -1,
   -1,  336,  337,  338,   33,   -1,  341,   -1,   -1,   38,
   -1,   40,  316,   42,   -1,   -1,   45,   -1,   -1,   -1,
  324,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,   -1,  257,  289,  290,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,  310,  311,   -1,  282,
  314,  315,  316,  317,  318,  319,   -1,  321,  322,  323,
  324,   -1,  326,   -1,  123,   -1,  330,  126,   -1,   -1,
   -1,   -1,  336,  337,  338,   33,   41,  341,   -1,   44,
   38,   -1,   40,  316,   42,   -1,   -1,   45,   -1,   -1,
   -1,  324,  281,   58,   59,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   38,   -1,   -1,  278,   42,
   -1,   -1,  282,  283,  284,  285,  286,   -1,   93,  289,
  290,   -1,   -1,   -1,   -1,   -1,   59,   60,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,   -1,   -1,
  310,  311,   -1,   -1,  314,  315,  316,  317,  318,  319,
  125,  321,  322,  323,  324,  123,  326,  125,   -1,   -1,
  330,   -1,   -1,   -1,   -1,   -1,  336,  337,  338,   -1,
   33,  341,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  257,   -1,
  289,  290,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,  310,  311,  282,   -1,  314,  315,  316,  317,  318,
  319,   -1,  321,  322,  323,  324,   -1,  326,   -1,   -1,
  123,  330,  125,   -1,   -1,   -1,   -1,  336,  337,  338,
   -1,   33,  341,   -1,   -1,   -1,   38,  316,   40,   -1,
   42,   -1,  257,   45,   -1,  324,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,  271,  272,   -1,   -1,
  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  257,  274,  310,  311,   -1,  262,  314,  315,  265,  266,
  267,  326,   -1,   -1,   -1,  323,  273,  274,  326,   -1,
   -1,  123,  330,  125,   -1,  282,   -1,   33,  336,  337,
  338,   -1,   38,  341,   40,  308,   42,   -1,   -1,   45,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,
   -1,  324,   -1,   -1,  126,  258,  259,  260,  261,  316,
  263,   -1,   -1,   -1,   -1,  268,  269,  324,  271,  272,
   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,  310,  311,   -1,
   -1,  314,  315,   58,   59,   -1,   61,  123,   -1,  125,
  323,   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,
   -1,   -1,   33,  336,  337,  338,   -1,   38,  341,   40,
   -1,   42,  262,   -1,   45,  265,  266,  267,   93,   -1,
   -1,   -1,   -1,  273,  274,   -1,  258,  259,  260,  261,
   -1,  263,  282,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,  124,
  125,  283,  284,  285,  286,  257,   -1,  289,  290,   41,
  262,   -1,   44,  265,  266,  267,  316,   -1,   -1,   -1,
   -1,  273,  274,   -1,  324,   -1,   58,   59,  310,  311,
  282,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,
   33,  323,  123,   -1,  326,   38,   -1,   40,  330,   42,
   -1,   -1,   45,   -1,  336,  337,  338,   -1,   -1,  341,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,  125,   -1,   -1,   -1,  283,  284,  285,
  286,   -1,  257,  289,  290,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,  310,  311,   33,  282,  314,  315,
  123,   38,  257,   40,   -1,   42,   -1,  323,   45,   -1,
  326,   -1,   -1,   -1,  330,   -1,  271,  272,   -1,   -1,
  336,  337,  338,   -1,   -1,  341,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   91,   -1,   -1,  268,  269,   41,
  271,  272,   44,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,  326,  283,  284,  285,  286,   58,   59,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   38,  257,   -1,  257,   42,  310,
  311,   -1,  262,  314,  315,  265,  266,  267,   -1,  271,
  272,   93,  323,  273,  274,  326,   60,   -1,   -1,  330,
  123,   -1,  282,  126,   -1,  336,  337,  338,   -1,   -1,
  341,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,  125,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  326,   -1,  289,  290,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,  126,   -1,   -1,   -1,   38,  310,  311,   -1,
   42,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  323,   -1,   -1,  326,   -1,   -1,   -1,  330,   60,   -1,
   -1,   -1,   -1,  336,  337,  338,   -1,   -1,  341,   -1,
  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
   -1,   -1,  289,  290,  257,  258,  259,  260,  123,  262,
   33,  126,  265,  266,  267,   38,   -1,   40,   -1,   42,
  273,  274,   45,  310,  311,  257,   -1,  314,  315,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,  271,
  272,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,  341,   -1,   45,  310,  311,   -1,
   -1,  314,  315,  257,   -1,   -1,   -1,   -1,  262,   -1,
   93,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   33,   -1,  341,   41,
   -1,   38,   44,   40,  326,   42,   -1,   -1,   45,   -1,
  123,   -1,   -1,  126,   93,   -1,   58,   59,   -1,   -1,
   -1,   -1,   -1,   -1,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,   -1,
  324,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   93,  257,  258,  259,  260,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  283,  284,
  285,  286,  274,  125,  289,  290,  123,  257,   -1,  126,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,  310,  311,   -1,   -1,  314,
  315,   -1,  282,   -1,   -1,   -1,  308,   -1,   -1,   -1,
  290,   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,
  322,   -1,  324,   -1,   -1,   -1,  341,   -1,   -1,   -1,
   41,   -1,   -1,   44,  257,  258,  259,  260,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   58,   59,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,  257,  258,
  259,  260,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   93,   -1,  273,  274,   -1,  310,  311,   -1,
   -1,  314,  315,  282,  283,  284,  285,  286,   -1,  257,
  289,  290,   -1,   -1,  262,  257,   -1,  265,  266,  267,
   -1,  258,  259,  260,  125,  273,  274,   -1,  341,  271,
  272,  310,  311,   -1,  282,  314,  315,   -1,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,  283,  284,  285,  286,
   -1,   -1,  289,  290,   33,   -1,   -1,   -1,   37,   38,
   -1,   40,  341,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,  316,
   -1,   60,   61,   62,  326,   -1,   -1,  324,   -1,   -1,
  126,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,  341,   -1,   -1,  273,  274,   -1,
   -1,   -1,   91,   -1,   -1,   94,  282,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   58,
   59,   -1,   61,   62,   63,  124,   -1,  126,   -1,   -1,
  316,   -1,   58,   59,   -1,   -1,  257,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,  272,   91,   -1,   93,   94,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,  262,  124,  125,  265,  266,  267,
   -1,  269,   -1,   -1,   -1,  273,  274,   -1,   -1,  125,
   -1,  257,   -1,   -1,  282,  326,  262,   -1,   -1,  265,
  266,  267,   93,   94,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  257,  124,
  125,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  257,  271,  272,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,  257,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,  326,  273,  274,
  271,  272,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
  326,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,  326,   -1,   -1,   -1,  273,
  274,   -1,  257,   -1,   -1,   37,   -1,   -1,  282,   41,
   -1,   43,   44,   -1,   46,   47,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   91,
   -1,   93,   94,   37,   -1,   -1,   -1,   41,   -1,   43,
   44,  326,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
  257,   -1,  124,  125,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   91,   -1,   93,
   94,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   37,   38,
  124,  125,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   58,
   59,  262,   61,   -1,  265,  266,  267,   93,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   37,
   38,  282,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,  124,  125,
   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,  124,  125,   -1,   -1,  271,
  272,   -1,   -1,   58,   59,   93,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  124,  125,   93,   -1,
  312,  313,   -1,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,  257,   -1,   -1,  326,   -1,  262,  271,  272,  265,
  266,  267,   58,   59,   -1,   61,   -1,  273,  274,  124,
  125,   -1,   -1,   -1,   -1,   -1,  282,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,   -1,   93,  312,  313,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,   -1,  271,  272,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,  257,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,  271,  272,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,  257,
  326,  257,   -1,   93,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,  271,  272,   37,   38,  273,  274,   41,
   42,   43,   44,   45,   -1,   47,  282,  326,   -1,   -1,
   93,   -1,  257,   -1,  124,  125,   58,   59,   -1,   61,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   37,   -1,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,  326,   58,
   59,   93,   61,   37,   -1,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,
   -1,  326,  124,  125,   93,  271,  272,   -1,   -1,   37,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   37,   47,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   93,
   58,   59,   -1,   61,   -1,   -1,  125,   -1,   -1,   58,
   59,   -1,   61,   -1,   -1,   38,   -1,   40,   41,   42,
   -1,   44,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,
  326,  125,  265,  266,  267,   93,   59,  257,   61,   62,
  273,  274,   -1,   -1,   93,   -1,   -1,   -1,   -1,  282,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,  257,   44,   -1,  125,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  271,  272,
   59,   -1,   61,   62,   -1,   -1,   38,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   -1,   -1,  257,  326,   59,   -1,   61,
   62,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   -1,   44,  326,   -1,   -1,   -1,   -1,  257,   91,
   -1,   -1,   -1,   41,  123,   -1,   44,   59,   60,   61,
   62,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   38,  257,   40,   41,   42,   -1,   44,   -1,
   -1,  123,   -1,   -1,  326,   -1,   -1,  271,  272,   91,
   -1,   -1,   -1,   59,  257,   61,   62,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   93,   -1,   -1,   -1,  257,
  273,  274,   -1,   -1,   -1,   -1,   -1,  326,  257,  282,
   -1,  123,   -1,  271,  272,   91,   -1,   -1,   -1,   -1,
  257,   -1,  271,  272,   -1,  262,   -1,  125,  265,  266,
  267,   -1,  326,   -1,  257,   -1,  273,  274,   -1,  262,
   -1,   -1,  265,  266,  267,  282,   -1,  123,   -1,   -1,
   38,  274,   40,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  326,   -1,
   -1,   59,   -1,   61,   62,   -1,   -1,  326,  257,   41,
   -1,   -1,   44,  262,   -1,  308,  265,  266,  267,   -1,
   -1,   41,   -1,  316,   44,  274,   58,   59,   -1,   -1,
   -1,  324,   -1,   91,   -1,  257,   -1,   -1,   58,   59,
  262,  290,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,  308,
   38,   93,   40,   41,   42,  123,   44,  316,  290,   -1,
   -1,   -1,   -1,   93,   38,  324,   40,   41,   42,   -1,
   44,   59,   -1,   61,   62,   -1,  308,   -1,   -1,  257,
   -1,   -1,   -1,  125,  316,   59,   -1,   61,   62,   -1,
   -1,   -1,  324,  271,  272,  125,   -1,   -1,  290,   -1,
   -1,  257,   38,   91,   40,   41,  262,   -1,   44,  265,
  266,  267,   -1,   -1,   -1,   -1,  308,   91,  274,   -1,
   -1,   -1,   -1,   -1,  316,   -1,   62,   41,   -1,   43,
   44,   45,  324,   -1,  290,  123,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   58,   59,   -1,   61,  326,  123,
   -1,   -1,  308,   -1,   -1,   91,   -1,   -1,   -1,   -1,
  316,   62,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   37,   93,
   -1,   -1,   -1,   -1,   43,   44,   45,   46,   47,  257,
   91,   58,   59,   -1,  262,   -1,   -1,  265,  266,  267,
   59,   -1,   61,   62,   63,   -1,  274,   -1,  257,   -1,
   -1,  125,   -1,  262,   -1,  257,  265,  266,  267,   -1,
   -1,   -1,  290,   -1,  273,  274,   93,  257,   -1,  271,
  272,   -1,   91,  282,   -1,   94,   -1,   -1,   -1,   -1,
  308,  271,  272,   -1,   -1,  257,   -1,   -1,  316,   -1,
  262,   -1,   -1,  265,  266,  267,  324,   -1,  125,   -1,
   -1,  273,  274,   -1,   -1,  124,  125,  126,   -1,  257,
  282,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  257,  326,   -1,  274,   41,  262,   -1,
   44,  265,  266,  267,   -1,   41,  326,   -1,   44,   -1,
  274,   -1,  290,   -1,   58,   59,   -1,   41,   -1,   -1,
   44,   -1,   58,   59,   -1,   41,  290,   -1,   44,   -1,
  308,  257,   -1,   -1,   58,   59,  262,   -1,  316,  265,
  266,  267,   58,   59,  308,   -1,  324,  273,  274,   93,
   -1,   -1,  316,  257,   -1,   41,  282,   93,   44,   -1,
  324,   -1,   -1,   -1,  290,   -1,  257,  271,  272,   93,
   -1,  262,   58,   59,  265,  266,  267,   93,   -1,   -1,
   -1,  125,  273,  274,   -1,   -1,   -1,  257,   -1,  125,
  316,  282,  262,   -1,   -1,  265,  266,  267,  324,  290,
  257,  125,   -1,  273,  274,   -1,   -1,   93,   -1,  125,
   -1,   -1,  282,   41,  271,  272,   44,   -1,   -1,   -1,
   -1,   -1,  326,   41,   -1,  316,   44,   -1,   -1,   -1,
   58,   59,   -1,  324,   -1,   -1,   -1,   -1,   -1,  125,
   58,   59,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,  310,  311,  312,  313,   93,   -1,   -1,   -1,  326,
  319,   -1,  321,  322,   41,   93,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   58,   59,   41,   -1,   -1,   44,  125,   -1,   -1,
   -1,   -1,   58,   59,   -1,   41,   -1,  125,   44,   -1,
   58,   59,   41,  257,   41,   44,   -1,   44,   -1,   -1,
   -1,  257,   58,   59,   -1,   -1,   93,  271,  272,   58,
   59,   58,   59,  257,   -1,  271,  272,   93,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   93,   -1,  271,  272,   -1,
   40,   41,   -1,   -1,   44,  271,  272,   93,  125,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   93,   -1,   -1,  125,
   -1,  257,   62,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,  326,   -1,   -1,  271,  272,   40,   41,  125,
  326,   44,   -1,   -1,   -1,   -1,  125,   -1,  125,   -1,
   -1,   91,  326,   -1,   -1,   -1,   -1,   -1,   -1,   62,
  326,   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,  257,
   42,   43,   44,   45,   -1,   47,   62,   -1,   91,  257,
  326,   -1,   -1,  271,  272,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,  271,  272,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   91,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   91,
   -1,   -1,   94,  282,   42,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
   -1,  257,   -1,   -1,  271,  272,   -1,   -1,  326,  257,
   -1,   -1,  124,   -1,  126,  271,  272,  316,  317,  318,
   -1,  257,   -1,  271,  272,  324,   -1,   -1,  257,   -1,
  257,   37,   -1,   -1,   40,  271,  272,   43,   44,   45,
   46,   47,  271,  272,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   62,   63,   -1,  326,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  326,   -1,  262,   -1,   -1,  265,  266,  267,  326,   -1,
   -1,   -1,   -1,  273,  274,   91,   -1,   -1,   94,   -1,
  326,   -1,  282,   -1,   -1,   -1,   -1,  326,   -1,  326,
  290,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  124,  125,
  273,  274,   -1,   -1,   -1,   -1,  316,   -1,   -1,  282,
   -1,  257,   -1,   -1,  324,   -1,  262,  290,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,  257,   -1,   -1,   -1,  282,  262,   -1,   -1,
  265,  266,  267,  316,  290,   -1,   -1,   -1,  273,  274,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  282,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  262,   -1,   -1,  265,  266,  267,
   -1,  316,  317,  318,   -1,  273,  274,   -1,   -1,  324,
   -1,   -1,   -1,   -1,  282,   37,   38,   -1,   40,   -1,
   42,   43,  290,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,
  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,   -1,   -1,
   37,   38,  124,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   63,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,  124,   -1,   91,   -1,   93,   94,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,  124,  310,  311,
  312,  313,   91,   37,   38,   94,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
  124,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   91,   37,   38,   94,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   93,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   37,   38,  124,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,  124,   -1,   91,   -1,   93,
   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   37,   38,
  124,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,
   61,   62,   63,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   60,   61,   62,   63,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,  124,   -1,   -1,   60,   61,   62,   63,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  124,  310,  311,  312,  313,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
  124,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   91,   -1,
   -1,   94,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   63,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,  124,   -1,   91,   37,   38,   94,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   63,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,  124,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  124,   -1,  310,  311,  312,  313,   91,   37,   38,   94,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,  124,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,  124,   -1,   -1,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  124,
   -1,   91,   37,   38,   94,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   60,   61,   62,   63,   -1,
  273,  274,   -1,   -1,  124,   -1,   -1,   37,   38,  282,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,
   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,  124,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  126,
   -1,   91,   -1,   60,   94,   62,   63,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   37,   38,   94,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   -1,   63,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   60,   -1,   62,   63,  262,   -1,   -1,  265,  266,
  267,   -1,   94,   -1,   -1,   -1,  273,  274,   -1,  124,
   -1,   -1,   -1,   -1,   60,  282,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   94,  316,
  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   94,   -1,
  310,  311,  312,  313,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   94,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   60,   -1,
   62,   63,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   60,   -1,
   62,   63,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   94,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   94,   -1,  310,  311,  312,  313,   60,   -1,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   60,
   -1,   62,   63,  262,   -1,   -1,  265,  266,  267,   -1,
   94,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,  257,   60,  282,   62,   63,  262,   -1,   -1,  265,
  266,  267,   -1,   94,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   60,  282,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   94,  316,  317,  318,
  319,   -1,  321,  322,   -1,  324,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   94,
  316,  317,  318,   -1,   -1,   -1,   -1,   -1,  324,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   94,   -1,  310,  311,
  312,  313,   60,   -1,   62,   63,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   94,   -1,  310,  311,  312,  313,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   94,   -1,  310,  311,  312,  313,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  126,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,  126,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,  126,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  126,   -1,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,  126,  282,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,  126,  282,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
  316,  317,  318,  319,   -1,  321,  322,  282,  324,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,
  257,  324,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,  316,  317,  318,  319,  282,  321,  322,  126,  324,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,  257,  321,  322,   -1,  324,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,
  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,   -1,
  324,   -1,   -1,   -1,   -1,  316,  317,  318,  319,   -1,
  321,  322,   -1,  324,   -1,   -1,   -1,   -1,  316,  317,
  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,
  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,  316,  317,  318,   -1,  257,   -1,
   -1,   -1,  324,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,   -1,
  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,
   -1,   -1,   -1,  273,  274,   -1,   -1,  316,  317,  318,
   -1,   -1,  282,   -1,   -1,  324,   -1,   -1,   -1,   -1,
  316,  317,  318,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,  316,  317,  318,   -1,
  257,   -1,   -1,   -1,  324,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,
   -1,  265,  266,  267,   -1,  282,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,   -1,   -1,   -1,
  324,
};
static int yyctable[] = {                                      1,
    2,  182,  193,  263,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  182,
  193,  263,   -1,    7,    2,   -1,    8,    2,  182,  193,
  263,   -1,    9,    2,  182,  193,  263,   -1,   10,    2,
  182,  193,  263,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  182,  193,
  263,   -1,   16,    2,  182,  193,  263,   -1,   17,    2,
   -1,   18,    2,  182,  193,  263,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,  182,  263,   -1,   31,    2,   -1,   32,    2,
   -1,   33,    2,   -1,   34,    2,   -1,   35,    2,  182,
  263,   -1,   36,    2,  182,  263,   -1,   37,    2,  182,
  263,   -1,   38,    2,  182,  263,   -1,   39,    2,  182,
  263,   -1,    2,  182,  263,   -1,   40,    2,   -1,   41,
    2,  182,  263,   -1,   42,    2,   -1,   43,    2,   -1,
   44,    2,   -1,   45,    2,   -1,   46,    2,   -1,   47,
    2,   -1,   48,    2,   -1,  104,  193,  264,   -1,    6,
  193,  264,   -1,  105,  193,  264,   -1,  106,  193,  264,
   -1,  107,  193,  264,   -1,  108,   61,  193,  264,   -1,
   16,  193,  264,   -1,   18,   61,  193,  264,   -1,   61,
  128,   -1,  109,  128,   -1,   35,  264,   -1,   36,  264,
   -1,   37,  264,   -1,   41,  264,   -1,  112,  193,  263,
   -1,  193,  263,   -1,   35,  263,   -1,   41,  263,   -1,
  117,   64,   -1,    6,   64,   -1,  105,   64,   -1,  106,
   64,   -1,  107,   64,   -1,   15,   64,   -1,   16,   64,
   -1,   18,   64,   -1,  117,  249,   -1,    6,  249,   -1,
  105,  249,   -1,  106,  249,   -1,  107,  249,   -1,   15,
  249,   -1,   16,  249,   -1,   18,  249,   -1,  117,  250,
   -1,    6,  250,   -1,  105,  250,   -1,  106,  250,   -1,
  107,  250,   -1,   15,  250,   -1,   16,  250,   -1,   18,
  250,   -1,  117,  251,   -1,    6,  251,   -1,  105,  251,
   -1,  106,  251,   -1,  107,  251,   -1,   15,  251,   -1,
   16,  251,   -1,   18,  251,   -1,  117,   66,   -1,    6,
   66,   -1,  105,   66,   -1,  106,   66,   -1,  107,   66,
   -1,   15,   66,   -1,   16,   66,   -1,   18,   66,   -1,
  134,  334,   -1,   25,  334,   -1,   26,  334,   -1,   27,
  334,   -1,   28,  334,   -1,   29,  334,   -1,   32,  334,
   -1,  134,  193,   -1,    6,  193,   -1,  105,  193,   -1,
  106,  193,   -1,  107,  193,   -1,   15,  193,   -1,   16,
  193,   -1,   18,  193,   -1,  194,  182,   -1,   39,  182,
   -1,    1,  182,  193,  263,   -1,    6,  182,  193,  263,
   -1,    8,  182,  193,  263,   -1,    9,  182,  193,  263,
   -1,   10,  182,  193,  263,   -1,   15,  182,  193,  263,
   -1,   16,  182,  193,  263,   -1,   18,  182,  193,  263,
   -1,   30,  182,  263,   -1,   35,  182,  263,   -1,   36,
  182,  263,   -1,   37,  182,  263,   -1,   38,  182,  263,
   -1,   39,  182,  263,   -1,  182,  263,   -1,   41,  182,
  263,   -1,  134,  332,   -1,   25,  332,   -1,   26,  332,
   -1,   27,  332,   -1,   28,  332,   -1,   29,  332,   -1,
   32,  332,   -1,  182,  193,   -1,   35,  182,   -1,   41,
  182,   -1,  249,  182,  263,   -1,    6,  182,  263,   -1,
    8,  182,  263,   -1,    9,  182,  263,   -1,   10,  182,
  263,   -1,   15,  182,  263,   -1,   16,  182,  263,   -1,
   18,  182,  263,   -1,  294,   15,   -1,  306,  263,   -1,
    6,  263,   -1,  105,  263,   -1,  106,  263,   -1,  107,
  263,   -1,   15,  263,   -1,   16,  263,   -1,   18,  263,
   -1,  311,  263,   -1,   61,  266,   -1,  321,  193,  263,
   -1,    6,  193,  263,   -1,  105,  193,  263,   -1,  106,
  193,  263,   -1,  107,  193,  263,   -1,   15,  193,  263,
   -1,   16,  193,  263,   -1,   18,  193,  263,   -1,   36,
  263,   -1,   37,  263,   -1,  328,   74,   -1,  227,   74,
   -1,  330,  264,   -1,  328,   65,   -1,  227,   65,   -1,
  228,   65,   -1,  328,   68,   -1,  227,   68,   -1,  228,
   68,   -1,  328,   69,   -1,  227,   69,   -1,  228,   69,
   -1,  328,   70,   -1,  227,   70,   -1,  228,   70,   -1,
  328,   62,   -1,  227,   62,   -1,  228,   62,   -1,  328,
   67,   -1,  227,   67,   -1,  228,   67,   -1,  257,  333,
   -1,  258,  333,   -1,  259,  333,   -1,  260,  333,   -1,
  261,  333,   -1,  262,  333,   -1,  263,  333,   -1,  264,
  333,   -1,  265,  333,   -1,  266,  333,   -1,  267,  333,
   -1,  268,  333,   -1,  269,  333,   -1,  270,  333,   -1,
  271,  333,   -1,  272,  333,   -1,  273,  333,   -1,  274,
  333,   -1,  275,  333,   -1,  276,  333,   -1,  277,  333,
   -1,  278,  333,   -1,  279,  333,   -1,  280,  333,   -1,
  281,  333,   -1,  282,  333,   -1,  283,  333,   -1,  284,
  333,   -1,  285,  333,   -1,  286,  333,   -1,  287,  333,
   -1,  288,  333,   -1,  289,  333,   -1,  290,  333,   -1,
  291,  333,   -1,  293,  333,   -1,  357,  168,   -1,  358,
  170,   -1,  257,  283,   -1,  258,  283,   -1,  259,  283,
   -1,  260,  283,   -1,  261,  283,   -1,  262,  283,   -1,
  263,  283,   -1,  264,  283,   -1,  265,  283,   -1,  266,
  283,   -1,  267,  283,   -1,  268,  283,   -1,  269,  283,
   -1,  270,  283,   -1,  271,  283,   -1,  272,  283,   -1,
  273,  283,   -1,  274,  283,   -1,  275,  283,   -1,  276,
  283,   -1,  277,  283,   -1,  278,  283,   -1,  279,  283,
   -1,  280,  283,   -1,  281,  283,   -1,  282,  283,   -1,
  283,  283,   -1,  284,  283,   -1,  285,  283,   -1,  286,
  283,   -1,  287,  283,   -1,  288,  283,   -1,  289,  283,
   -1,  290,  283,   -1,  291,  283,   -1,  293,  283,   -1,
  257,  285,   -1,  258,  285,   -1,  259,  285,   -1,  260,
  285,   -1,  261,  285,   -1,  262,  285,   -1,  263,  285,
   -1,  264,  285,   -1,  265,  285,   -1,  266,  285,   -1,
  267,  285,   -1,  268,  285,   -1,  269,  285,   -1,  270,
  285,   -1,  271,  285,   -1,  272,  285,   -1,  273,  285,
   -1,  274,  285,   -1,  275,  285,   -1,  276,  285,   -1,
  277,  285,   -1,  278,  285,   -1,  279,  285,   -1,  280,
  285,   -1,  281,  285,   -1,  282,  285,   -1,  283,  285,
   -1,  284,  285,   -1,  285,  285,   -1,  286,  285,   -1,
  287,  285,   -1,  288,  285,   -1,  289,  285,   -1,  290,
  285,   -1,  291,  285,   -1,  293,  285,   -1,  257,  278,
   -1,  258,  278,   -1,  259,  278,   -1,  260,  278,   -1,
  261,  278,   -1,  262,  278,   -1,  263,  278,   -1,  264,
  278,   -1,  265,  278,   -1,  266,  278,   -1,  267,  278,
   -1,  268,  278,   -1,  269,  278,   -1,  270,  278,   -1,
  271,  278,   -1,  272,  278,   -1,  273,  278,   -1,  274,
  278,   -1,  275,  278,   -1,  276,  278,   -1,  277,  278,
   -1,  278,  278,   -1,  279,  278,   -1,  285,  278,   -1,
  293,  278,   -1,  257,  281,   -1,  258,  281,   -1,  259,
  281,   -1,  260,  281,   -1,  261,  281,   -1,  262,  281,
   -1,  263,  281,   -1,  264,  281,   -1,  265,  281,   -1,
  266,  281,   -1,  267,  281,   -1,  268,  281,   -1,  269,
  281,   -1,  270,  281,   -1,  271,  281,   -1,  272,  281,
   -1,  273,  281,   -1,  274,  281,   -1,  275,  281,   -1,
  276,  281,   -1,  277,  281,   -1,  278,  281,   -1,  279,
  281,   -1,  285,  281,   -1,  293,  281,   -1,  257,  282,
   -1,  258,  282,   -1,  259,  282,   -1,  260,  282,   -1,
  261,  282,   -1,  262,  282,   -1,  263,  282,   -1,  264,
  282,   -1,  265,  282,   -1,  266,  282,   -1,  267,  282,
   -1,  268,  282,   -1,  269,  282,   -1,  270,  282,   -1,
  271,  282,   -1,  272,  282,   -1,  273,  282,   -1,  274,
  282,   -1,  275,  282,   -1,  276,  282,   -1,  277,  282,
   -1,  278,  282,   -1,  279,  282,   -1,  285,  282,   -1,
  293,  282,   -1,  257,  279,   -1,  258,  279,   -1,  259,
  279,   -1,  260,  279,   -1,  261,  279,   -1,  262,  279,
   -1,  263,  279,   -1,  264,  279,   -1,  265,  279,   -1,
  266,  279,   -1,  267,  279,   -1,  268,  279,   -1,  269,
  279,   -1,  270,  279,   -1,  271,  279,   -1,  272,  279,
   -1,  273,  279,   -1,  274,  279,   -1,  275,  279,   -1,
  276,  279,   -1,  277,  279,   -1,  278,  279,   -1,  279,
  279,   -1,  285,  279,   -1,  293,  279,   -1,  257,  280,
   -1,  258,  280,   -1,  259,  280,   -1,  260,  280,   -1,
  261,  280,   -1,  262,  280,   -1,  263,  280,   -1,  264,
  280,   -1,  265,  280,   -1,  266,  280,   -1,  267,  280,
   -1,  268,  280,   -1,  269,  280,   -1,  270,  280,   -1,
  271,  280,   -1,  272,  280,   -1,  273,  280,   -1,  274,
  280,   -1,  275,  280,   -1,  276,  280,   -1,  277,  280,
   -1,  278,  280,   -1,  279,  280,   -1,  285,  280,   -1,
  293,  280,   -1,  257,  328,   -1,  258,  328,   -1,  259,
  328,   -1,  260,  328,   -1,  261,  328,   -1,  262,  328,
   -1,  263,  328,   -1,  264,  328,   -1,  265,  328,   -1,
  266,  328,   -1,  267,  328,   -1,  268,  328,   -1,  269,
  328,   -1,  270,  328,   -1,  271,  328,   -1,  272,  328,
   -1,  273,  328,   -1,  274,  328,   -1,  275,  328,   -1,
  276,  328,   -1,  277,  328,   -1,  278,  328,   -1,  279,
  328,   -1,  280,  328,   -1,  281,  328,   -1,  282,  328,
   -1,  283,  328,   -1,  284,  328,   -1,  285,  328,   -1,
  286,  328,   -1,  287,  328,   -1,  288,  328,   -1,  289,
  328,   -1,  290,  328,   -1,  291,  328,   -1,  293,  328,
   -1,  257,  329,   -1,  258,  329,   -1,  259,  329,   -1,
  260,  329,   -1,  261,  329,   -1,  262,  329,   -1,  263,
  329,   -1,  264,  329,   -1,  265,  329,   -1,  266,  329,
   -1,  267,  329,   -1,  268,  329,   -1,  269,  329,   -1,
  270,  329,   -1,  271,  329,   -1,  272,  329,   -1,  273,
  329,   -1,  274,  329,   -1,  275,  329,   -1,  276,  329,
   -1,  277,  329,   -1,  278,  329,   -1,  279,  329,   -1,
  280,  329,   -1,  281,  329,   -1,  282,  329,   -1,  283,
  329,   -1,  284,  329,   -1,  285,  329,   -1,  286,  329,
   -1,  287,  329,   -1,  288,  329,   -1,  289,  329,   -1,
  290,  329,   -1,  291,  329,   -1,  293,  329,   -1,  364,
   61,   -1,  257,  331,   -1,  258,  331,   -1,  259,  331,
   -1,  260,  331,   -1,  261,  331,   -1,  262,  331,   -1,
  263,  331,   -1,  264,  331,   -1,  265,  331,   -1,  266,
  331,   -1,  267,  331,   -1,  268,  331,   -1,  269,  331,
   -1,  270,  331,   -1,  271,  331,   -1,  272,  331,   -1,
  273,  331,   -1,  274,  331,   -1,  275,  331,   -1,  276,
  331,   -1,  277,  331,   -1,  278,  331,   -1,  279,  331,
   -1,  280,  331,   -1,  281,  331,   -1,  282,  331,   -1,
  283,  331,   -1,  284,  331,   -1,  285,  331,   -1,  286,
  331,   -1,  287,  331,   -1,  288,  331,   -1,  289,  331,
   -1,  290,  331,   -1,  291,  331,   -1,  293,  331,   -1,
  112,  263,   -1,   35,  193,   -1,   41,  193,   -1,  364,
   61,  264,   -1,   61,  264,   -1,  207,  208,   -1,  299,
  207,   -1,  331,  205,   -1,  117,  262,   -1,  306,  193,
  263,   -1,  490,   44,   -1,  491,   44,   -1,  492,   44,
   -1,  493,   44,   -1,  505,   61,   -1,  328,   63,   -1,
  227,   63,   -1,  228,   63,   -1,  257,  299,   -1,  258,
  299,   -1,  259,  299,   -1,  260,  299,   -1,  261,  299,
   -1,  262,  299,   -1,  263,  299,   -1,  264,  299,   -1,
  265,  299,   -1,  266,  299,   -1,  267,  299,   -1,  268,
  299,   -1,  269,  299,   -1,  270,  299,   -1,  271,  299,
   -1,  272,  299,   -1,  273,  299,   -1,  274,  299,   -1,
  275,  299,   -1,  276,  299,   -1,  277,  299,   -1,  278,
  299,   -1,  279,  299,   -1,  280,  299,   -1,  281,  299,
   -1,  282,  299,   -1,  283,  299,   -1,  284,  299,   -1,
  285,  299,   -1,  286,  299,   -1,  287,  299,   -1,  288,
  299,   -1,  289,  299,   -1,  290,  299,   -1,  291,  299,
   -1,  293,  299,   -1,  257,  300,   -1,  258,  300,   -1,
  259,  300,   -1,  260,  300,   -1,  261,  300,   -1,  262,
  300,   -1,  263,  300,   -1,  264,  300,   -1,  265,  300,
   -1,  266,  300,   -1,  267,  300,   -1,  268,  300,   -1,
  269,  300,   -1,  270,  300,   -1,  271,  300,   -1,  272,
  300,   -1,  273,  300,   -1,  274,  300,   -1,  275,  300,
   -1,  276,  300,   -1,  277,  300,   -1,  278,  300,   -1,
  279,  300,   -1,  280,  300,   -1,  281,  300,   -1,  282,
  300,   -1,  283,  300,   -1,  284,  300,   -1,  285,  300,
   -1,  286,  300,   -1,  287,  300,   -1,  288,  300,   -1,
  289,  300,   -1,  290,  300,   -1,  291,  300,   -1,  293,
  300,   -1,  257,  301,   -1,  258,  301,   -1,  259,  301,
   -1,  260,  301,   -1,  261,  301,   -1,  262,  301,   -1,
  263,  301,   -1,  264,  301,   -1,  265,  301,   -1,  266,
  301,   -1,  267,  301,   -1,  268,  301,   -1,  269,  301,
   -1,  270,  301,   -1,  271,  301,   -1,  272,  301,   -1,
  273,  301,   -1,  274,  301,   -1,  275,  301,   -1,  276,
  301,   -1,  277,  301,   -1,  278,  301,   -1,  279,  301,
   -1,  280,  301,   -1,  281,  301,   -1,  282,  301,   -1,
  283,  301,   -1,  284,  301,   -1,  285,  301,   -1,  286,
  301,   -1,  287,  301,   -1,  288,  301,   -1,  289,  301,
   -1,  290,  301,   -1,  291,  301,   -1,  293,  301,   -1,
  257,  302,   -1,  258,  302,   -1,  259,  302,   -1,  260,
  302,   -1,  261,  302,   -1,  262,  302,   -1,  263,  302,
   -1,  264,  302,   -1,  265,  302,   -1,  266,  302,   -1,
  267,  302,   -1,  268,  302,   -1,  269,  302,   -1,  270,
  302,   -1,  271,  302,   -1,  272,  302,   -1,  273,  302,
   -1,  274,  302,   -1,  275,  302,   -1,  276,  302,   -1,
  277,  302,   -1,  278,  302,   -1,  279,  302,   -1,  280,
  302,   -1,  281,  302,   -1,  282,  302,   -1,  283,  302,
   -1,  284,  302,   -1,  285,  302,   -1,  286,  302,   -1,
  287,  302,   -1,  288,  302,   -1,  289,  302,   -1,  290,
  302,   -1,  291,  302,   -1,  293,  302,   -1,  257,  303,
   -1,  258,  303,   -1,  259,  303,   -1,  260,  303,   -1,
  261,  303,   -1,  262,  303,   -1,  263,  303,   -1,  264,
  303,   -1,  265,  303,   -1,  266,  303,   -1,  267,  303,
   -1,  268,  303,   -1,  269,  303,   -1,  270,  303,   -1,
  271,  303,   -1,  272,  303,   -1,  273,  303,   -1,  274,
  303,   -1,  275,  303,   -1,  276,  303,   -1,  277,  303,
   -1,  278,  303,   -1,  279,  303,   -1,  280,  303,   -1,
  281,  303,   -1,  282,  303,   -1,  283,  303,   -1,  284,
  303,   -1,  285,  303,   -1,  286,  303,   -1,  287,  303,
   -1,  288,  303,   -1,  289,  303,   -1,  290,  303,   -1,
  291,  303,   -1,  293,  303,   -1,  257,  304,   -1,  258,
  304,   -1,  259,  304,   -1,  260,  304,   -1,  261,  304,
   -1,  262,  304,   -1,  263,  304,   -1,  264,  304,   -1,
  265,  304,   -1,  266,  304,   -1,  267,  304,   -1,  268,
  304,   -1,  269,  304,   -1,  270,  304,   -1,  271,  304,
   -1,  272,  304,   -1,  273,  304,   -1,  274,  304,   -1,
  275,  304,   -1,  276,  304,   -1,  277,  304,   -1,  278,
  304,   -1,  279,  304,   -1,  280,  304,   -1,  281,  304,
   -1,  282,  304,   -1,  283,  304,   -1,  284,  304,   -1,
  285,  304,   -1,  286,  304,   -1,  287,  304,   -1,  288,
  304,   -1,  289,  304,   -1,  290,  304,   -1,  291,  304,
   -1,  293,  304,   -1,  257,  305,   -1,  258,  305,   -1,
  259,  305,   -1,  260,  305,   -1,  261,  305,   -1,  262,
  305,   -1,  263,  305,   -1,  264,  305,   -1,  265,  305,
   -1,  266,  305,   -1,  267,  305,   -1,  268,  305,   -1,
  269,  305,   -1,  270,  305,   -1,  271,  305,   -1,  272,
  305,   -1,  273,  305,   -1,  274,  305,   -1,  275,  305,
   -1,  276,  305,   -1,  277,  305,   -1,  278,  305,   -1,
  279,  305,   -1,  280,  305,   -1,  281,  305,   -1,  282,
  305,   -1,  283,  305,   -1,  284,  305,   -1,  285,  305,
   -1,  286,  305,   -1,  287,  305,   -1,  288,  305,   -1,
  289,  305,   -1,  290,  305,   -1,  291,  305,   -1,  293,
  305,   -1,  257,  306,   -1,  258,  306,   -1,  259,  306,
   -1,  260,  306,   -1,  261,  306,   -1,  262,  306,   -1,
  263,  306,   -1,  264,  306,   -1,  265,  306,   -1,  266,
  306,   -1,  267,  306,   -1,  268,  306,   -1,  269,  306,
   -1,  270,  306,   -1,  271,  306,   -1,  272,  306,   -1,
  273,  306,   -1,  274,  306,   -1,  275,  306,   -1,  276,
  306,   -1,  277,  306,   -1,  278,  306,   -1,  279,  306,
   -1,  280,  306,   -1,  281,  306,   -1,  282,  306,   -1,
  283,  306,   -1,  284,  306,   -1,  285,  306,   -1,  286,
  306,   -1,  287,  306,   -1,  288,  306,   -1,  289,  306,
   -1,  290,  306,   -1,  291,  306,   -1,  293,  306,   -1,
  257,  307,   -1,  258,  307,   -1,  259,  307,   -1,  260,
  307,   -1,  261,  307,   -1,  262,  307,   -1,  263,  307,
   -1,  264,  307,   -1,  265,  307,   -1,  266,  307,   -1,
  267,  307,   -1,  268,  307,   -1,  269,  307,   -1,  270,
  307,   -1,  271,  307,   -1,  272,  307,   -1,  273,  307,
   -1,  274,  307,   -1,  275,  307,   -1,  276,  307,   -1,
  277,  307,   -1,  278,  307,   -1,  279,  307,   -1,  285,
  307,   -1,  293,  307,   -1,  257,  308,   -1,  258,  308,
   -1,  259,  308,   -1,  260,  308,   -1,  261,  308,   -1,
  262,  308,   -1,  263,  308,   -1,  264,  308,   -1,  265,
  308,   -1,  266,  308,   -1,  267,  308,   -1,  268,  308,
   -1,  269,  308,   -1,  270,  308,   -1,  271,  308,   -1,
  272,  308,   -1,  273,  308,   -1,  274,  308,   -1,  275,
  308,   -1,  276,  308,   -1,  277,  308,   -1,  278,  308,
   -1,  279,  308,   -1,  285,  308,   -1,  293,  308,   -1,
  257,  309,   -1,  258,  309,   -1,  259,  309,   -1,  260,
  309,   -1,  261,  309,   -1,  262,  309,   -1,  263,  309,
   -1,  264,  309,   -1,  265,  309,   -1,  266,  309,   -1,
  267,  309,   -1,  268,  309,   -1,  269,  309,   -1,  270,
  309,   -1,  271,  309,   -1,  272,  309,   -1,  273,  309,
   -1,  274,  309,   -1,  275,  309,   -1,  276,  309,   -1,
  277,  309,   -1,  278,  309,   -1,  279,  309,   -1,  280,
  309,   -1,  281,  309,   -1,  282,  309,   -1,  283,  309,
   -1,  284,  309,   -1,  285,  309,   -1,  286,  309,   -1,
  287,  309,   -1,  288,  309,   -1,  289,  309,   -1,  290,
  309,   -1,  291,  309,   -1,  293,  309,   -1,  257,  310,
   -1,  258,  310,   -1,  259,  310,   -1,  260,  310,   -1,
  261,  310,   -1,  262,  310,   -1,  263,  310,   -1,  264,
  310,   -1,  265,  310,   -1,  266,  310,   -1,  267,  310,
   -1,  268,  310,   -1,  269,  310,   -1,  270,  310,   -1,
  271,  310,   -1,  272,  310,   -1,  273,  310,   -1,  274,
  310,   -1,  275,  310,   -1,  276,  310,   -1,  277,  310,
   -1,  278,  310,   -1,  279,  310,   -1,  280,  310,   -1,
  281,  310,   -1,  282,  310,   -1,  283,  310,   -1,  284,
  310,   -1,  285,  310,   -1,  286,  310,   -1,  287,  310,
   -1,  288,  310,   -1,  289,  310,   -1,  290,  310,   -1,
  291,  310,   -1,  293,  310,   -1,  257,  311,   -1,  258,
  311,   -1,  259,  311,   -1,  260,  311,   -1,  261,  311,
   -1,  262,  311,   -1,  263,  311,   -1,  264,  311,   -1,
  265,  311,   -1,  266,  311,   -1,  267,  311,   -1,  268,
  311,   -1,  269,  311,   -1,  270,  311,   -1,  271,  311,
   -1,  272,  311,   -1,  273,  311,   -1,  274,  311,   -1,
  275,  311,   -1,  276,  311,   -1,  277,  311,   -1,  278,
  311,   -1,  279,  311,   -1,  285,  311,   -1,  293,  311,
   -1,  257,  312,   -1,  258,  312,   -1,  259,  312,   -1,
  260,  312,   -1,  261,  312,   -1,  262,  312,   -1,  263,
  312,   -1,  264,  312,   -1,  265,  312,   -1,  266,  312,
   -1,  267,  312,   -1,  268,  312,   -1,  269,  312,   -1,
  270,  312,   -1,  271,  312,   -1,  272,  312,   -1,  273,
  312,   -1,  274,  312,   -1,  275,  312,   -1,  276,  312,
   -1,  277,  312,   -1,  278,  312,   -1,  279,  312,   -1,
  280,  312,   -1,  281,  312,   -1,  282,  312,   -1,  283,
  312,   -1,  284,  312,   -1,  285,  312,   -1,  286,  312,
   -1,  287,  312,   -1,  288,  312,   -1,  289,  312,   -1,
  290,  312,   -1,  291,  312,   -1,  293,  312,   -1,  257,
  313,   -1,  258,  313,   -1,  259,  313,   -1,  260,  313,
   -1,  261,  313,   -1,  262,  313,   -1,  263,  313,   -1,
  264,  313,   -1,  265,  313,   -1,  266,  313,   -1,  267,
  313,   -1,  268,  313,   -1,  269,  313,   -1,  270,  313,
   -1,  271,  313,   -1,  272,  313,   -1,  273,  313,   -1,
  274,  313,   -1,  275,  313,   -1,  276,  313,   -1,  277,
  313,   -1,  278,  313,   -1,  279,  313,   -1,  280,  313,
   -1,  281,  313,   -1,  282,  313,   -1,  283,  313,   -1,
  284,  313,   -1,  285,  313,   -1,  286,  313,   -1,  287,
  313,   -1,  288,  313,   -1,  289,  313,   -1,  290,  313,
   -1,  291,  313,   -1,  293,  313,   -1,  257,  314,   -1,
  258,  314,   -1,  259,  314,   -1,  260,  314,   -1,  261,
  314,   -1,  262,  314,   -1,  263,  314,   -1,  264,  314,
   -1,  265,  314,   -1,  266,  314,   -1,  267,  314,   -1,
  268,  314,   -1,  269,  314,   -1,  270,  314,   -1,  271,
  314,   -1,  272,  314,   -1,  273,  314,   -1,  274,  314,
   -1,  275,  314,   -1,  276,  314,   -1,  277,  314,   -1,
  278,  314,   -1,  279,  314,   -1,  280,  314,   -1,  281,
  314,   -1,  282,  314,   -1,  283,  314,   -1,  284,  314,
   -1,  285,  314,   -1,  286,  314,   -1,  287,  314,   -1,
  288,  314,   -1,  289,  314,   -1,  290,  314,   -1,  291,
  314,   -1,  293,  314,   -1,  257,  315,   -1,  258,  315,
   -1,  259,  315,   -1,  260,  315,   -1,  261,  315,   -1,
  262,  315,   -1,  263,  315,   -1,  264,  315,   -1,  265,
  315,   -1,  266,  315,   -1,  267,  315,   -1,  268,  315,
   -1,  269,  315,   -1,  270,  315,   -1,  271,  315,   -1,
  272,  315,   -1,  273,  315,   -1,  274,  315,   -1,  275,
  315,   -1,  276,  315,   -1,  277,  315,   -1,  278,  315,
   -1,  279,  315,   -1,  280,  315,   -1,  281,  315,   -1,
  282,  315,   -1,  283,  315,   -1,  284,  315,   -1,  285,
  315,   -1,  286,  315,   -1,  287,  315,   -1,  288,  315,
   -1,  289,  315,   -1,  290,  315,   -1,  291,  315,   -1,
  293,  315,   -1,  257,  317,   -1,  258,  317,   -1,  259,
  317,   -1,  260,  317,   -1,  261,  317,   -1,  262,  317,
   -1,  263,  317,   -1,  264,  317,   -1,  265,  317,   -1,
  266,  317,   -1,  267,  317,   -1,  268,  317,   -1,  269,
  317,   -1,  270,  317,   -1,  271,  317,   -1,  272,  317,
   -1,  273,  317,   -1,  274,  317,   -1,  275,  317,   -1,
  276,  317,   -1,  277,  317,   -1,  278,  317,   -1,  279,
  317,   -1,  285,  317,   -1,  293,  317,   -1,  257,  318,
   -1,  258,  318,   -1,  259,  318,   -1,  260,  318,   -1,
  261,  318,   -1,  262,  318,   -1,  263,  318,   -1,  264,
  318,   -1,  265,  318,   -1,  266,  318,   -1,  267,  318,
   -1,  268,  318,   -1,  269,  318,   -1,  270,  318,   -1,
  271,  318,   -1,  272,  318,   -1,  273,  318,   -1,  274,
  318,   -1,  275,  318,   -1,  276,  318,   -1,  277,  318,
   -1,  278,  318,   -1,  279,  318,   -1,  280,  318,   -1,
  281,  318,   -1,  282,  318,   -1,  283,  318,   -1,  284,
  318,   -1,  285,  318,   -1,  286,  318,   -1,  287,  318,
   -1,  288,  318,   -1,  289,  318,   -1,  290,  318,   -1,
  291,  318,   -1,  293,  318,   -1,  257,  296,   -1,  258,
  296,   -1,  259,  296,   -1,  260,  296,   -1,  261,  296,
   -1,  262,  296,   -1,  263,  296,   -1,  264,  296,   -1,
  265,  296,   -1,  266,  296,   -1,  267,  296,   -1,  268,
  296,   -1,  269,  296,   -1,  270,  296,   -1,  271,  296,
   -1,  272,  296,   -1,  273,  296,   -1,  274,  296,   -1,
  275,  296,   -1,  276,  296,   -1,  277,  296,   -1,  278,
  296,   -1,  279,  296,   -1,  280,  296,   -1,  281,  296,
   -1,  282,  296,   -1,  283,  296,   -1,  284,  296,   -1,
  285,  296,   -1,  286,  296,   -1,  287,  296,   -1,  288,
  296,   -1,  289,  296,   -1,  290,  296,   -1,  291,  296,
   -1,  293,  296,   -1,  257,  297,   -1,  258,  297,   -1,
  259,  297,   -1,  260,  297,   -1,  261,  297,   -1,  262,
  297,   -1,  263,  297,   -1,  264,  297,   -1,  265,  297,
   -1,  266,  297,   -1,  267,  297,   -1,  268,  297,   -1,
  269,  297,   -1,  270,  297,   -1,  271,  297,   -1,  272,
  297,   -1,  273,  297,   -1,  274,  297,   -1,  275,  297,
   -1,  276,  297,   -1,  277,  297,   -1,  278,  297,   -1,
  279,  297,   -1,  280,  297,   -1,  281,  297,   -1,  282,
  297,   -1,  283,  297,   -1,  284,  297,   -1,  285,  297,
   -1,  286,  297,   -1,  287,  297,   -1,  288,  297,   -1,
  289,  297,   -1,  290,  297,   -1,  291,  297,   -1,  293,
  297,   -1,  257,  287,   -1,  258,  287,   -1,  259,  287,
   -1,  260,  287,   -1,  261,  287,   -1,  262,  287,   -1,
  263,  287,   -1,  264,  287,   -1,  265,  287,   -1,  266,
  287,   -1,  267,  287,   -1,  268,  287,   -1,  269,  287,
   -1,  270,  287,   -1,  271,  287,   -1,  272,  287,   -1,
  273,  287,   -1,  274,  287,   -1,  275,  287,   -1,  276,
  287,   -1,  277,  287,   -1,  278,  287,   -1,  279,  287,
   -1,  285,  287,   -1,  293,  287,   -1,  257,  288,   -1,
  258,  288,   -1,  259,  288,   -1,  260,  288,   -1,  261,
  288,   -1,  262,  288,   -1,  263,  288,   -1,  264,  288,
   -1,  265,  288,   -1,  266,  288,   -1,  267,  288,   -1,
  268,  288,   -1,  269,  288,   -1,  270,  288,   -1,  271,
  288,   -1,  272,  288,   -1,  273,  288,   -1,  274,  288,
   -1,  275,  288,   -1,  276,  288,   -1,  277,  288,   -1,
  278,  288,   -1,  279,  288,   -1,  285,  288,   -1,  293,
  288,   -1,  257,  289,   -1,  258,  289,   -1,  259,  289,
   -1,  260,  289,   -1,  261,  289,   -1,  262,  289,   -1,
  263,  289,   -1,  264,  289,   -1,  265,  289,   -1,  266,
  289,   -1,  267,  289,   -1,  268,  289,   -1,  269,  289,
   -1,  270,  289,   -1,  271,  289,   -1,  272,  289,   -1,
  273,  289,   -1,  274,  289,   -1,  275,  289,   -1,  276,
  289,   -1,  277,  289,   -1,  278,  289,   -1,  279,  289,
   -1,  285,  289,   -1,  293,  289,   -1,  257,  290,   -1,
  258,  290,   -1,  259,  290,   -1,  260,  290,   -1,  261,
  290,   -1,  262,  290,   -1,  263,  290,   -1,  264,  290,
   -1,  265,  290,   -1,  266,  290,   -1,  267,  290,   -1,
  268,  290,   -1,  269,  290,   -1,  270,  290,   -1,  271,
  290,   -1,  272,  290,   -1,  273,  290,   -1,  274,  290,
   -1,  275,  290,   -1,  276,  290,   -1,  277,  290,   -1,
  278,  290,   -1,  279,  290,   -1,  285,  290,   -1,  293,
  290,   -1,  257,  291,   -1,  258,  291,   -1,  259,  291,
   -1,  260,  291,   -1,  261,  291,   -1,  262,  291,   -1,
  263,  291,   -1,  264,  291,   -1,  265,  291,   -1,  266,
  291,   -1,  267,  291,   -1,  268,  291,   -1,  269,  291,
   -1,  270,  291,   -1,  271,  291,   -1,  272,  291,   -1,
  273,  291,   -1,  274,  291,   -1,  275,  291,   -1,  276,
  291,   -1,  277,  291,   -1,  278,  291,   -1,  279,  291,
   -1,  285,  291,   -1,  293,  291,   -1,  257,  294,   -1,
  258,  294,   -1,  259,  294,   -1,  260,  294,   -1,  261,
  294,   -1,  262,  294,   -1,  263,  294,   -1,  264,  294,
   -1,  265,  294,   -1,  266,  294,   -1,  267,  294,   -1,
  268,  294,   -1,  269,  294,   -1,  270,  294,   -1,  271,
  294,   -1,  272,  294,   -1,  273,  294,   -1,  274,  294,
   -1,  275,  294,   -1,  276,  294,   -1,  277,  294,   -1,
  278,  294,   -1,  279,  294,   -1,  280,  294,   -1,  281,
  294,   -1,  282,  294,   -1,  283,  294,   -1,  284,  294,
   -1,  285,  294,   -1,  286,  294,   -1,  287,  294,   -1,
  288,  294,   -1,  289,  294,   -1,  290,  294,   -1,  291,
  294,   -1,  293,  294,   -1,  257,  292,   -1,  258,  292,
   -1,  259,  292,   -1,  260,  292,   -1,  261,  292,   -1,
  262,  292,   -1,  263,  292,   -1,  264,  292,   -1,  265,
  292,   -1,  266,  292,   -1,  267,  292,   -1,  268,  292,
   -1,  269,  292,   -1,  270,  292,   -1,  271,  292,   -1,
  272,  292,   -1,  273,  292,   -1,  274,  292,   -1,  275,
  292,   -1,  276,  292,   -1,  277,  292,   -1,  278,  292,
   -1,  279,  292,   -1,  285,  292,   -1,  293,  292,   -1,
  257,  293,   -1,  258,  293,   -1,  259,  293,   -1,  260,
  293,   -1,  261,  293,   -1,  262,  293,   -1,  263,  293,
   -1,  264,  293,   -1,  265,  293,   -1,  266,  293,   -1,
  267,  293,   -1,  268,  293,   -1,  269,  293,   -1,  270,
  293,   -1,  271,  293,   -1,  272,  293,   -1,  273,  293,
   -1,  274,  293,   -1,  275,  293,   -1,  276,  293,   -1,
  277,  293,   -1,  278,  293,   -1,  279,  293,   -1,  285,
  293,   -1,  293,  293,   -1,  257,  295,   -1,  258,  295,
   -1,  259,  295,   -1,  260,  295,   -1,  261,  295,   -1,
  262,  295,   -1,  263,  295,   -1,  264,  295,   -1,  265,
  295,   -1,  266,  295,   -1,  267,  295,   -1,  268,  295,
   -1,  269,  295,   -1,  270,  295,   -1,  271,  295,   -1,
  272,  295,   -1,  273,  295,   -1,  274,  295,   -1,  275,
  295,   -1,  276,  295,   -1,  277,  295,   -1,  278,  295,
   -1,  279,  295,   -1,  285,  295,   -1,  293,  295,   -1,
  257,  316,   -1,  258,  316,   -1,  259,  316,   -1,  260,
  316,   -1,  261,  316,   -1,  262,  316,   -1,  263,  316,
   -1,  264,  316,   -1,  265,  316,   -1,  266,  316,   -1,
  267,  316,   -1,  268,  316,   -1,  269,  316,   -1,  270,
  316,   -1,  271,  316,   -1,  272,  316,   -1,  273,  316,
   -1,  274,  316,   -1,  275,  316,   -1,  276,  316,   -1,
  277,  316,   -1,  278,  316,   -1,  279,  316,   -1,  285,
  316,   -1,  293,  316,   -1,  257,  322,   -1,  258,  322,
   -1,  259,  322,   -1,  260,  322,   -1,  261,  322,   -1,
  262,  322,   -1,  263,  322,   -1,  264,  322,   -1,  265,
  322,   -1,  266,  322,   -1,  267,  322,   -1,  268,  322,
   -1,  269,  322,   -1,  270,  322,   -1,  271,  322,   -1,
  272,  322,   -1,  273,  322,   -1,  274,  322,   -1,  275,
  322,   -1,  276,  322,   -1,  277,  322,   -1,  278,  322,
   -1,  279,  322,   -1,  280,  322,   -1,  281,  322,   -1,
  282,  322,   -1,  283,  322,   -1,  284,  322,   -1,  285,
  322,   -1,  286,  322,   -1,  287,  322,   -1,  288,  322,
   -1,  289,  322,   -1,  290,  322,   -1,  291,  322,   -1,
  293,  322,   -1,  257,  330,   -1,  258,  330,   -1,  259,
  330,   -1,  260,  330,   -1,  261,  330,   -1,  262,  330,
   -1,  263,  330,   -1,  264,  330,   -1,  265,  330,   -1,
  266,  330,   -1,  267,  330,   -1,  268,  330,   -1,  269,
  330,   -1,  270,  330,   -1,  271,  330,   -1,  272,  330,
   -1,  273,  330,   -1,  274,  330,   -1,  275,  330,   -1,
  276,  330,   -1,  277,  330,   -1,  278,  330,   -1,  279,
  330,   -1,  280,  330,   -1,  281,  330,   -1,  282,  330,
   -1,  283,  330,   -1,  284,  330,   -1,  285,  330,   -1,
  286,  330,   -1,  287,  330,   -1,  288,  330,   -1,  289,
  330,   -1,  290,  330,   -1,  291,  330,   -1,  293,  330,
   -1,  553,   61,   -1,  539,   84,   -1,   13,   84,   -1,
   14,   84,   -1,  541,   84,   -1,  279,  260,   -1,  257,
  298,   -1,  258,  298,   -1,  259,  298,   -1,  260,  298,
   -1,  261,  298,   -1,  262,  298,   -1,  263,  298,   -1,
  264,  298,   -1,  265,  298,   -1,  266,  298,   -1,  267,
  298,   -1,  268,  298,   -1,  269,  298,   -1,  270,  298,
   -1,  271,  298,   -1,  272,  298,   -1,  273,  298,   -1,
  274,  298,   -1,  275,  298,   -1,  276,  298,   -1,  277,
  298,   -1,  278,  298,   -1,  279,  298,   -1,  280,  298,
   -1,  281,  298,   -1,  282,  298,   -1,  283,  298,   -1,
  284,  298,   -1,  285,  298,   -1,  286,  298,   -1,  287,
  298,   -1,  288,  298,   -1,  289,  298,   -1,  290,  298,
   -1,  291,  298,   -1,  293,  298,   -1,
};
#define YYFINAL 49
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 352
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID",
"tknStrLit","tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum",
"tknPreProDef","tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate",
"tknTypename","tknDocBlockComment","tknDocLineComment","tknScopeResOp",
"tknNumSignSpec","tknPublic","tknProtected","tknPrivate","tknExternC",
"tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast",
"tknStaticCast","tknDynamicCast","tknReinterpretCast","tknTry","tknCatch",
"tknThrow","tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq",
"tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknNew","tknDelete","tknConst","tknStatic","tknExtern","tknVirtual",
"tknOverride","tknInline","tknExplicit","tknFriend","tknVolatile","tknFinal",
"tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf","tknIfDef",
"tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor","tknWhile","tknDo",
"tknSwitch","tknCase","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT",
"ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumdefn : tknTypedef tknEnum optid '{' enumitemlist '}' tknID ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer functype varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : basefuncname",
"funcname : identifier tknScopeResOp basefuncname",
"basefuncname : tknID",
"basefuncname : tknOperator '+'",
"basefuncname : tknOperator '-'",
"basefuncname : tknOperator '*'",
"basefuncname : tknOperator '/'",
"basefuncname : tknOperator '%'",
"basefuncname : tknOperator '^'",
"basefuncname : tknOperator '&'",
"basefuncname : tknOperator '|'",
"basefuncname : tknOperator '~'",
"basefuncname : tknOperator '!'",
"basefuncname : tknOperator '='",
"basefuncname : tknOperator '<'",
"basefuncname : tknOperator '>'",
"basefuncname : tknOperator tknPlusEq",
"basefuncname : tknOperator tknMinusEq",
"basefuncname : tknOperator tknMulEq",
"basefuncname : tknOperator tknDivEq",
"basefuncname : tknOperator tknPerEq",
"basefuncname : tknOperator tknXorEq",
"basefuncname : tknOperator tknAndEq",
"basefuncname : tknOperator tknOrEq",
"basefuncname : tknOperator tknLShift",
"basefuncname : tknOperator tknRShift",
"basefuncname : tknOperator tknLShiftEq",
"basefuncname : tknOperator tknRShiftEq",
"basefuncname : tknOperator tknCmpEq",
"basefuncname : tknOperator tknNotEq",
"basefuncname : tknOperator tknLessEq",
"basefuncname : tknOperator tknGreaterEq",
"basefuncname : tknOperator tkn3WayCmp",
"basefuncname : tknOperator tknAnd",
"basefuncname : tknOperator tknOr",
"basefuncname : tknOperator tknInc",
"basefuncname : tknOperator tknDec",
"basefuncname : tknOperator ','",
"basefuncname : tknOperator tknArrow",
"basefuncname : tknOperator tknArrowStar",
"basefuncname : tknOperator '(' ')'",
"basefuncname : tknOperator '[' ']'",
"basefuncname : tknOperator tknNew",
"basefuncname : tknOperator tknNew '[' ']'",
"basefuncname : tknOperator tknDelete",
"basefuncname : tknOperator tknDelete '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam :",
"templateparam : identifier",
"templateparam : templateparam ',' identifier",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib tknFinal",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : tknInline ctordefn",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : ':' tknID '(' ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"dtordecl : apidocer '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr '?' expr ':' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1085 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3592 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 283 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 3982 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 3988 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 291 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3998 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 296 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4008 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4014 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4020 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4026 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4032 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4038 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4044 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4050 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4056 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4062 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4068 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4074 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4080 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4086 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4092 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4098 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4104 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4110 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4116 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4122 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4128 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4134 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4140 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4146 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4152 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4158 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4164 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4170 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4176 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 331 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4182 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4188 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 335 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4196 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 340 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4205 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 344 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4214 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 350 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4223 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 356 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4232 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 362 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4240 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 367 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4248 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 370 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4256 "y_tab.c"
break;
case 43:
#line 375 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4261 "y_tab.c"
  if (!yytrial)
#line 375 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4268 "y_tab.c"
break;
case 44:
#line 379 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4273 "y_tab.c"
  if (!yytrial)
#line 379 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4280 "y_tab.c"
break;
case 45:
#line 383 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4285 "y_tab.c"
  if (!yytrial)
#line 383 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4292 "y_tab.c"
break;
case 46:
#line 387 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4297 "y_tab.c"
  if (!yytrial)
#line 387 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4304 "y_tab.c"
break;
case 47:
#line 391 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4309 "y_tab.c"
  if (!yytrial)
#line 391 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4316 "y_tab.c"
break;
case 48:
#line 395 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4321 "y_tab.c"
  if (!yytrial)
#line 395 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4328 "y_tab.c"
break;
case 49:
#line 401 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4333 "y_tab.c"
  if (!yytrial)
#line 401 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4337 "y_tab.c"
break;
case 50:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4342 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4346 "y_tab.c"
break;
case 51:
#line 405 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4351 "y_tab.c"
  if (!yytrial)
#line 405 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4355 "y_tab.c"
break;
case 52:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4360 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4364 "y_tab.c"
break;
case 53:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4369 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4373 "y_tab.c"
break;
case 54:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4378 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4382 "y_tab.c"
break;
case 55:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4387 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4391 "y_tab.c"
break;
case 56:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4396 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4400 "y_tab.c"
break;
case 57:
#line 416 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4405 "y_tab.c"
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4409 "y_tab.c"
break;
case 58:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4414 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4418 "y_tab.c"
break;
case 59:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4423 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4427 "y_tab.c"
break;
case 60:
#line 423 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4432 "y_tab.c"
  if (!yytrial)
#line 423 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4436 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4442 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4448 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4454 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4460 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4466 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4472 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4478 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4484 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4490 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4496 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4502 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4508 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                  }
#line 4516 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4522 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4528 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4534 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4540 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4546 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4552 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4558 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4564 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4573 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4582 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4590 "y_tab.c"
break;
case 85:
#line 470 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4595 "y_tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4601 "y_tab.c"
break;
case 86:
#line 473 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4606 "y_tab.c"
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4612 "y_tab.c"
break;
case 87:
#line 476 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4617 "y_tab.c"
  if (!yytrial)
#line 476 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4623 "y_tab.c"
break;
case 88:
#line 479 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4628 "y_tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4634 "y_tab.c"
break;
case 89:
#line 482 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4639 "y_tab.c"
  if (!yytrial)
#line 482 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].enumItemList);
                  }
#line 4645 "y_tab.c"
break;
case 90:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4650 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4656 "y_tab.c"
break;
case 91:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4661 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4667 "y_tab.c"
break;
case 92:
#line 492 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4672 "y_tab.c"
  if (!yytrial)
#line 492 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4678 "y_tab.c"
break;
case 93:
#line 497 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4683 "y_tab.c"
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4687 "y_tab.c"
break;
case 94:
#line 498 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4692 "y_tab.c"
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4696 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4702 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4711 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 510 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4717 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4728 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 519 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4738 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 524 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4749 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 530 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4759 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 535 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4770 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 541 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4780 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 550 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4788 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4796 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 556 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4804 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 562 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4812 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4821 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 569 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4829 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4835 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 575 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4841 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 4849 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 4858 "y_tab.c"
break;
case 114:
#line 587 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4863 "y_tab.c"
  if (!yytrial)
#line 587 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 4869 "y_tab.c"
break;
case 115:
#line 590 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4874 "y_tab.c"
  if (!yytrial)
#line 590 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 4881 "y_tab.c"
break;
case 116:
#line 596 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4886 "y_tab.c"
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4890 "y_tab.c"
break;
case 117:
#line 599 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4895 "y_tab.c"
  if (!yytrial)
#line 599 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4902 "y_tab.c"
break;
case 118:
#line 605 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4907 "y_tab.c"
  if (!yytrial)
#line 605 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4914 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 610 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4924 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4934 "y_tab.c"
break;
case 121:
#line 622 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4939 "y_tab.c"
  if (!yytrial)
#line 622 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 4943 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4953 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-7].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-8].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4963 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4973 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 4982 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4988 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4994 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5000 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5006 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5012 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5018 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5024 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5030 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5036 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5042 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5048 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5054 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5060 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5066 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5072 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5078 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5084 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5090 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5096 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5102 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5108 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5114 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5120 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5126 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5132 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5138 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5144 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5150 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5156 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5162 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5168 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5174 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5180 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5186 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5192 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5198 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5204 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5210 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5216 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5222 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5228 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5234 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5240 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5246 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5252 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5258 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5264 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5273 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5282 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5288 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5294 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5300 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5306 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, 0); }
#line 5312 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 715 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5318 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5324 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5330 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5336 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 721 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5342 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 722 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5348 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 723 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5354 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5360 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 727 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5366 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 728 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5372 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 729 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5378 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 730 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 5384 "y_tab.c"
break;
case 192:
#line 731 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5389 "y_tab.c"
  if (!yytrial)
#line 732 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5393 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 735 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5399 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 736 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5405 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 737 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5411 "y_tab.c"
break;
case 196:
#line 740 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5416 "y_tab.c"
  if (!yytrial)
#line 740 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5420 "y_tab.c"
break;
case 197:
#line 746 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5425 "y_tab.c"
  if (!yytrial)
#line 747 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5433 "y_tab.c"
break;
case 198:
#line 752 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5438 "y_tab.c"
break;
case 199:
#line 756 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5443 "y_tab.c"
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5450 "y_tab.c"
break;
case 200:
#line 761 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5455 "y_tab.c"
break;
case 201:
#line 765 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5460 "y_tab.c"
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5467 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 770 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kInline;
                  }
#line 5476 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 774 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5485 "y_tab.c"
break;
case 204:
#line 781 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5497 "y_tab.c"
  if (!yytrial)
#line 789 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5503 "y_tab.c"
break;
case 205:
#line 792 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5508 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5516 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 796 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5525 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 802 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5531 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 803 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5537 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 804 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-2].str, nullptr)); }
#line 5543 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 805 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5549 "y_tab.c"
break;
case 212:
#line 808 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5554 "y_tab.c"
  if (!yytrial)
#line 808 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5558 "y_tab.c"
break;
case 213:
#line 811 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5563 "y_tab.c"
  if (!yytrial)
#line 812 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5570 "y_tab.c"
break;
case 214:
#line 816 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5575 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 818 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-7].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-7].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5584 "y_tab.c"
break;
case 216:
#line 822 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5589 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 824 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5598 "y_tab.c"
break;
case 218:
#line 831 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5610 "y_tab.c"
  if (!yytrial)
#line 839 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5618 "y_tab.c"
break;
case 219:
#line 845 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5630 "y_tab.c"
  if (!yytrial)
#line 853 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5638 "y_tab.c"
break;
case 220:
#line 859 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5650 "y_tab.c"
  if (!yytrial)
#line 867 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5658 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5668 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 879 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5677 "y_tab.c"
break;
case 223:
#line 885 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5682 "y_tab.c"
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5686 "y_tab.c"
break;
case 224:
#line 888 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5691 "y_tab.c"
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5695 "y_tab.c"
break;
case 225:
#line 889 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5700 "y_tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5704 "y_tab.c"
break;
case 226:
#line 890 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5709 "y_tab.c"
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5713 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5719 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5725 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 897 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5731 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5737 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 901 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5743 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 902 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5749 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5755 "y_tab.c"
break;
case 234:
#line 906 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5760 "y_tab.c"
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5764 "y_tab.c"
break;
case 235:
#line 908 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5774 "y_tab.c"
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5780 "y_tab.c"
break;
case 236:
#line 920 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5785 "y_tab.c"
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5789 "y_tab.c"
break;
case 237:
#line 922 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5794 "y_tab.c"
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5807 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5816 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 939 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5822 "y_tab.c"
break;
case 240:
#line 940 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5827 "y_tab.c"
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5831 "y_tab.c"
break;
case 241:
#line 941 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5836 "y_tab.c"
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5840 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5846 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5852 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5858 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 947 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5864 "y_tab.c"
break;
case 246:
#line 950 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5869 "y_tab.c"
  if (!yytrial)
#line 950 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5873 "y_tab.c"
break;
case 247:
#line 951 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5878 "y_tab.c"
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5882 "y_tab.c"
break;
case 248:
#line 952 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5887 "y_tab.c"
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 5891 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 955 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5897 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5903 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 957 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5909 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5915 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 961 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5923 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5932 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5941 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5947 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5953 "y_tab.c"
break;
case 258:
#line 980 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5958 "y_tab.c"
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5964 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5972 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 5981 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5987 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5993 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5999 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6005 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6011 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6017 "y_tab.c"
break;
case 267:
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6022 "y_tab.c"
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6026 "y_tab.c"
break;
case 268:
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6031 "y_tab.c"
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6035 "y_tab.c"
break;
case 269:
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6040 "y_tab.c"
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6044 "y_tab.c"
break;
case 270:
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6049 "y_tab.c"
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6053 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6059 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6065 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6071 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6077 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6083 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6089 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6095 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6101 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6107 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6113 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6119 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6125 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6131 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6137 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6143 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6149 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6155 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6161 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6167 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6173 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6179 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6185 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6191 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6197 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6203 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6209 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6215 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppExprObj);                       }
#line 6221 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6227 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6233 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6239 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6245 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6251 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6257 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6263 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6269 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6275 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6281 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6287 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6293 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6299 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6305 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1056 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6311 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1057 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6317 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6323 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1060 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6329 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1061 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6335 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1062 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6341 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1063 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6347 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1064 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6353 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1065 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6359 "y_tab.c"
break;
case 322:
  if (!yytrial)
#line 1066 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6365 "y_tab.c"
break;
case 323:
  if (!yytrial)
#line 1067 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6371 "y_tab.c"
break;
case 324:
  if (!yytrial)
#line 1068 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6377 "y_tab.c"
break;
case 325:
  if (!yytrial)
#line 1069 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6383 "y_tab.c"
break;
case 326:
  if (!yytrial)
#line 1070 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6389 "y_tab.c"
break;
case 327:
  if (!yytrial)
#line 1071 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6395 "y_tab.c"
break;
case 328:
  if (!yytrial)
#line 1072 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6401 "y_tab.c"
break;
case 329:
  if (!yytrial)
#line 1073 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6407 "y_tab.c"
break;
case 330:
  if (!yytrial)
#line 1074 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6413 "y_tab.c"
break;
case 331:
  if (!yytrial)
#line 1075 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6419 "y_tab.c"
break;
case 332:
  if (!yytrial)
#line 1076 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6425 "y_tab.c"
break;
case 333:
  if (!yytrial)
#line 1077 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6431 "y_tab.c"
break;
case 334:
  if (!yytrial)
#line 1078 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 6437 "y_tab.c"
break;
case 335:
#line 1081 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6442 "y_tab.c"
  if (!yytrial)
#line 1081 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6446 "y_tab.c"
break;
#line 6448 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
