#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,   39,   39,   40,   40,   41,   41,   42,   42,
   38,   38,   67,   67,   67,   67,   67,   67,   68,   69,
   69,   70,   70,   70,   70,   70,   70,   71,   35,   35,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    4,    4,   11,   11,   11,   11,
   12,   12,   12,   12,    9,    9,    9,    9,   10,   10,
   10,   25,   25,   24,   23,   16,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   14,   14,   14,   60,   60,
   46,   47,    8,   43,   43,   44,   45,   45,   45,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   22,
   22,   22,   18,   18,   18,   18,   19,   19,   62,   62,
   62,   62,   62,   62,   61,   61,   61,   61,   59,   59,
   59,   49,   50,   72,   50,   73,   50,   50,   48,   74,
   48,   48,   54,   54,   54,   52,   53,   75,   53,   76,
   53,   51,   51,   51,   20,   20,   21,   17,   17,   17,
   56,   56,   57,   57,   58,   58,   58,   28,   28,   77,
   27,   27,   63,   63,   63,   64,   64,   64,   64,   13,
   13,   55,   55,   55,   55,   30,   31,   31,   32,   32,
   33,   33,   34,    6,    6,    1,    1,    1,    1,   65,
   65,   65,   29,   66,   66,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   37,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    5,    7,    5,    7,    6,    8,    9,   11,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    2,    2,
    1,    2,    4,    1,    0,    1,    1,    3,    1,    1,
    0,    2,    3,    2,    6,    8,    9,    7,    5,    6,
    4,    2,    2,    3,    6,    3,    4,    3,    6,    5,
    5,    4,    3,    3,    3,    6,    9,    8,    1,    1,
    2,    4,    3,   11,   10,    2,    9,    8,    2,    1,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    3,    3,    0,
    1,    3,    1,    1,    1,    1,    1,    1,    0,    2,
    2,    2,    2,    2,    0,    2,    2,    3,    0,    1,
    1,    2,    5,    0,   11,    0,   13,    2,    4,    0,
    6,    2,    0,    5,    6,    2,    4,    0,   10,    0,
   12,    4,    5,    7,    8,    8,    2,    2,    2,    3,
    0,    1,    1,    2,    0,    1,    2,    2,    1,    0,
    8,    2,    0,    3,    4,    0,    1,    1,    1,    3,
    4,    1,    1,    1,    1,    4,    1,    3,    1,    1,
    2,    2,    3,    1,    1,    0,    1,    4,    2,    2,
    2,    2,    4,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    4,    3,    4,    4,    7,    7,    7,    7,    3,    2,
    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  256,  257,  258,    0,    0,    0,    0,    0,    0,
  235,    0,   59,   60,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  180,  109,  110,    0,  181,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  259,
    3,   27,    8,    9,   12,    0,    0,    0,    6,    0,
    7,    0,    0,   10,    0,    0,   11,   26,    0,   13,
    0,   14,   15,   16,   17,   18,    0,   19,    0,   20,
   21,    0,   22,   23,    0,   24,   25,    0,    0,    0,
    0,   28,   29,   30,   31,   32,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   61,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  134,  135,  136,  137,  138,  139,
  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  156,  157,  132,  133,  121,
  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
  155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,    0,   57,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,    0,    0,  213,    0,    0,    0,    0,    0,  208,
  209,    0,  207,    0,   93,   92,    0,    0,    0,    4,
    5,  218,    0,    0,    0,  222,  119,    0,  188,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  267,  269,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  315,  116,    0,  111,
  182,    0,    0,    0,  196,    0,    0,    0,    0,    0,
    0,    0,  170,  173,  172,  171,  174,    0,    0,    0,
    0,    0,    0,  163,  161,    0,  166,    0,  210,  249,
    0,    0,  113,    0,    0,    0,   81,    0,  244,    0,
    0,    0,  237,    0,  240,    0,    0,    0,    0,    0,
  158,  159,    0,    0,  309,    0,   58,    0,   49,   50,
   51,   52,   53,   54,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,    0,    0,    0,    0,    0,
  167,    0,  168,    0,    0,  214,    0,    0,   98,    0,
    0,    0,   94,  250,  251,  252,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  302,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  230,    0,    0,    0,    0,    0,    0,  198,  248,
    0,  189,    0,    0,    0,    0,   81,   91,    0,    0,
  242,  241,  236,    0,    0,  253,    0,    0,    0,    0,
  202,    0,    0,   43,   46,   47,   45,   48,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
  102,    0,    0,    0,  184,    0,    0,  303,  301,  112,
    0,    0,    0,  197,    0,    0,  231,    0,    0,   97,
    0,    0,    0,    0,    0,  162,    0,    0,   81,   89,
    0,    0,    0,    0,    0,    0,   82,   79,   80,  238,
    0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
   35,    0,    0,    0,    0,    0,  186,    0,  101,    0,
    0,    0,    0,    0,  183,  227,  228,  229,    0,    0,
  220,    0,  100,    0,    0,  203,    0,    0,    0,  217,
   95,    0,    0,   81,   90,    0,   83,   85,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   37,   76,    0,
    0,    0,    0,  200,    0,    0,  194,    0,    0,    0,
    0,    0,  106,   99,  191,    0,    0,    0,    0,   88,
    0,    0,  305,  306,  307,  308,  204,   34,    0,   36,
    0,    0,  175,    0,    0,    0,    0,    0,  195,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,   38,
    0,    0,    0,    0,    0,  205,  206,  221,  108,    0,
  175,    0,    0,   87,    0,   39,    0,    0,  176,  177,
    0,    0,    0,  107,    0,    0,  199,    0,  115,  178,
    0,    0,    0,  185,   40,  114,    0,    0,    0,  201,
  187,
};
static int yydgoto[] = {                                      46,
   47,  165,   49,  113,   50,  311,   51,   52,   53,   54,
  497,  430,   55,   56,   57,   58,   59,  295,  352,   60,
   61,  296,   62,   63,   64,   65,   66,   67,   68,   69,
  312,  313,  314,  315,   70,   71,   72,  338,   73,   74,
   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
   85,   86,   87,  273,   88,  424,  425,  488,   89,   90,
  612,   91,  476,  529,  221,  197,   92,   93,   94,   95,
   96,  418,  563,  415,  485,  596,  571,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, -117,    0,    0,    0,
    0,   83,    0,    0, 2717,    0,  -90,    0,  133,  140,
  184,  200, 6219, 3894, 3894, 3894, 3894, 3894, 3959, 3894,
 4032,    0,    0,    0,  -89,    0, 2228,   34,   66,  268,
 3263, 3894,   90,  596, 3894,    0,    0, -202,  -19,    0,
    0,    0,    0,    0,    0, 2717,  419,  257,    0,  -13,
    0,  146,  264,    0, 3177,  281,    0,    0,  -95,    0,
 6520,    0,    0,    0,    0,    0,  319,    0,  -41,    0,
    0,  431,    0,    0,   14,    0,    0,    0, 2717,  -87,
  159,    0,    0,    0,    0,    0,    0, 2717, 2717, 2717,
 2635,    0,  353,  358,  402,    0,  396, 2717,    0,    0,
  403,  202,  342,    0,    0,    0, 2461,    0,    0,    0,
  -87,  -87,  -87,  -87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  456,  413, 3894, -146,    0,    0,   43,   43,   43,
    0,   43,   43,  471, 6548,  274,  275,  295,  299,  -23,
  306,  317,  325,    0,  323,    0, 3894, 3894, 3894,    0,
  260,    0,  508,    0,    0, 7544,  -15,  569, 2494, 2803,
    0,    0, 2717,    0, 2717,  742,   85, 3894,    0,    0,
    0,    0,    0,  368,    0,    0,  580,  587,  589,    0,
    0,    0,  612,  -87,  -17,    0,    0,    0,    0,    0,
  572, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,    0,    0,
 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
 3894, 3894, 3894, 3605, 3894, 3894,    0,    0,    0,    0,
    0,  370,   21,    0,    0,  402, 3134,  139,    0, 2717,
    0,  379,    0,    0,    0,    0,    0,  -87,    0,  399,
  523, 2717,  597,    0,    0,  232,    0, 2717,    0,    0,
  406,  569,    0,  639, 2717,  344,    0,  931,    0,  426,
  432,  277,    0,  634,    0,  401,  655,  661,  680,  684,
    0,    0,  670, 3894,    0,  695,    0,  501,    0,    0,
    0,    0,    0,    0,    0, 6585, 7544,  724, 6640, 2153,
 6520,  751, 3894, 3894,    0,  529, 2205,  754,    0,    0,
    0,  733,    0,   -2,   -2,    0,   -2, 3687,    0, 7544,
  639,  639,    0,    0,    0,    0,  542,    0, 3237,  544,
    0,    0,    0,    0,    0,    0,    0,    0,   47,   47,
    0,    0, 3111,    0,    0,    0,    0,   43,    0,    0,
    0,  854,  854,   47,   47,   47,    0,   22,   22, 3111,
    0,  507, 6680,   43, 2239,  762,  550,    0, 2327,  748,
  163,    0,  639,   89,  768,  769,    0,  787,    0,    0,
    0,    0,  781,  772,  786,  106,    0,    0, 2717,   -9,
    0,    0,    0, 2461, 3894,    0,  789,  791,  796,  804,
    0,    0,  806,    0,    0,    0,    0,    0, 3350, 3894,
 3432,  514, 3894,    0, 7544,  810,  808,  529,  -96,    0,
    0, 6861,  772,  772,    0,    0,  748,    0,    0,    0,
 3894,  813, 2409,    0,  424,   63,    0,  772, 3776,    0,
    0,  816, 2205,    0,  824,    0,  827,  609,    0,    0,
  394,  333,  807,    0,  708,  814,    0,    0,    0,    0,
 9333, 3894, 3894, 3894, 3894,  811,    0,    0,  817,    0,
    0,  835, 6954,  620,    0,  851,    0,  645,    0,  -87,
  -87,  646, 6980, 3894,    0,    0,    0,    0, 2717,  424,
    0,  -64,    0, 7015,  551,    0,  865,  578,  866,    0,
    0,  425,  847,    0,    0, 3894,    0,    0, 7050, 7085,
 7143, 7363,  648, 2495, 3894, 2583, 3894,    0,    0,  869,
  602,  620,  872,    0, 2717, 2717,    0, 7418,   -2, 2717,
    0, 3863,    0,    0,    0,    0,  856,  805,  870,    0,
  567, 7544,    0,    0,    0,    0,    0,    0,  896,    0,
 7453,  901,    0,  903,    0,  902,  176,  176,    0,   -2,
 2665,  -87, 7479,  630,   73,    0,    0,  890, 3518,    0,
    0,  -21,  910,  649,  919,    0,    0,    0,    0,  -87,
    0,    0, 2751,    0,    0,    0,  666,  701,    0,    0,
    0,  856,  839,    0,  -21, 2839,    0, 2921,    0,    0,
  674,   87,    0,    0,    0,    0,    0, 3007, 3095,    0,
    0,
};
static int yyrindex[] = {                                     50,
 5732,    0,    0,    0,  607, 4961,  840,    0,    0,    0,
    0,    0,    0,    0,    0, 5091,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5241,    0,    0,  640, 7506,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  964,  792,    0,    0,  640,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,    0,    0,    0, 3302,
 3656,    0,    0,    0,    0,    0,  -16,    0,    0,    0,
    0,   28, 5607,    0, 5932,  640,    0,    0,    0, 4145,
  844,    0,    0, 4212, 4334, 4523,    0, 4618, 4677,  -93,
 3302, 3302, 3302, 3302,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5149,   -5,  144,  109,  774, 5252,
 6493, 5310, 5371,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  909,    0,  -93,
    0,  261,    0,  469, 3281,    4,    0, 2020, 3302,    0,
    0,  607,    0,    0,    0,    0,  167,    0, 2555,    0,
    0, 2555,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -47, 3302,    0,    0,    0,  911,    0,    0,
 3656,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -93,    0,
    0,    0,    0,  -93,    0,   17,    0,    0,10013,    0,
 4079,    0,    0,    0,    0,    0,    0, 3302,  461,    0,
  660,  703,  746,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  345,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  871,    0,    0,
    0,    0,    0,    0,    0,    0,  407,    0,    0,    0,
   -3,    0,    0,    0,    0,  933,    0,    0, 6361, 4807,
    0,    0,    0,  324,  539,    0,  782,    0,    0,  549,
  531,  531,    0,    0,    0,    0,    0, 2020,    0,    0,
 3573, 3706, 4007, 4050, 4432, 5527, 5724, 5862, 4267, 5594,
 5872, 5945, 5958, 6012, 6020, 6028, 6032, 5429, 6037, 6048,
 6058, 2307, 3437, 5629, 5662, 5671, 6108, 5557, 5568, 6115,
    0,    0,    0, 5532,    0,    0,    0,  -93,    0,  899,
    0,    0, 3147,  167,    0,    0, 2020,    0,    0,    0,
  300,    0,    0,  723, 5697,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6117,    0,    0,    0,    0,    0,    0,    0,  909,
    0,    0,    0, 6125,   37,    0,    0,  933,    0,    0,
    0,    0, 3745, 3745,    0,  -52,  120,    0,    0,    0,
    0,    0,    0,    0, 3315,    0,    0, 5793,    0,    0,
   28,    0,    0,   28,    0,    0, 5849,    0,    0,    0,
    0,    0,  770,    8,    0,    0,    0,    0,    0,    0,
  937,    0,    0,    0,    0,    0,  -93,    0,    0,  -93,
    0,    0,    0,  941,   28,    0,    0,    0,    0, 3302,
 3302,    0,    0,    0,    0,    0,    0,    0,    0, 3315,
    0, 2379,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  942,    0,    0,    0,    0,    0,
    0,  941,    0,    0,    0,    0,    0,    0,  151,    0,
  -93,    0,    0,    0,    0,   28,  116,    0,    0,    0,
    0,  904,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   28,    0,  233,  233,    0,  165,
    0, 2379,    0,    0,    0,  -93,    0,    0,    0,    0,
   28,   46,    0,    0,    0,    0,    0,    0,    0, 2379,
    0,  -93,    0,    0,  -93,    0,    0,    0,    0,    0,
   28,  116,    0,    0,   56,    0,    0,    0,    0,    0,
    0,    0,  -93,    0,    0,    0,  -93,    0,    0,    0,
    0,
};
static int yycindex[] = {                                    960,
  673,    0,    0,    0, 4752, 3814,    0, 4015, 4280, 4492,
    0,    0,    0,    0,    0, 4510,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4605,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4906,    0,    0,   11,    0,    0, 4771,  272,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 6176,    0,    0,    0, 5237,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4784,    0,    0,
  731,    0,    0,    0,    0,    0,  220,    0,    0,    0,
    0, 3394,  223,    0,  732, 5679,    0,    0,    0,   31,
    0,    0,    0,   64,  117,  132,    0,  178,  227, 1047,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  930, 7640, 7821, 6174, 9356, 9422,
  951, 9457, 9518,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1129,
    0, 7860,    0, 7915, 7943,    0,    0,  744,    0,    0,
    0, 7909,    0,    0,    0,    0,    0,    0,   42,    0,
    0,  204,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -115,    0,    0,    0,    0,    3,    0,  749,
  753,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1216,    0,
    0,    0,    0, 1303,    0,  138,    0,    0,  216,    0,
  -40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  180,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  755,    0,    0,
    0,    0,    0,    0,    0, 7762,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  470,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10070,
    0,    0,    0,    0,    0,    0,    0,    0,  730,  247,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  756,    0,    0,
 7970, 8008, 8282, 8308, 8343, 8378, 8404, 8439, 9607, 9633,
 8713, 8739, 9674, 8774, 8809, 8835, 8870, 9709, 9144, 9170,
 9205, 9735, 9770, 9793, 9818, 9858, 9240, 9885, 9926,10069,
    0,    0,    0,10109,10158,    0,    0, 1385,10171,    0,
    0,    0,    0,    0,    0,    0,  757,    0,    0,    0,
 4434,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9266,    0,    0,    0,    0,    0,    0,10184,    0,
10248,    0,    0, 9301,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  738,    0,    0,    0,    0,
    0,    0,10262,    0,    0,    0,    0,    0,    0,    0,
 4964,    0,    0, 5913,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  265,    0,    0,    0,    0,    0,    0,
  955,    0,    0,    0,    0,    0, 1472,    0,    0, 1559,
    0,    0,    0,    0, 6432,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,10326,    0,10339,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1641,    0,    0,    0,    0, 7823,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8247,    0,    0,    0,    0,    0,
10352,    0,    0,    0,    0, 1728,    0,    0,10413,    0,
 8678,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1815,10426,    0, 1897,    0,    0,    0,    0,    0,
 9980,    0,    0,    0,    0,10440,    0,10498,    0,    0,
    0,    0, 1984,    0,    0,    0, 2071,10520,10534,    0,
    0,
};
static int yygindex[] = {                                      0,
   23,    1,  -83, -375, -326,    0,   19,    0,    0,    0,
  534, -403,    0,  -27,    2,  -97,    0,  604,    0,    0,
    0, -417,    0,    0,    0,   69,  961,    0,    0,    0,
    0,  605,    0,    0,  309,  516,    0, -436,    0,    0,
    0,    0,   10,    0,  969,    0,    0,  974,    0,  975,
    0,    0,    0, -469,  978,   71,  999,  125,   33,    0,
  435,  313,    0,  552,    0,  820,    0,    0,    0,  355,
    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 10853
static int yytable[] = {                                    1555,
   48,  103,  104,  174,  294,  279,  110,   61,  114,  115,
  116,  211,   61,  509,  107,  118,  119,  270,  205,  198,
  457,   61,  204,  491,  304,   61,  572,  106,  344,  518,
  212,    2,  120,  310,  494,  266,  176,  108,  266,  628,
  254,   48,  202,   61,  254,  213, 1548,  254,  461,    2,
  464,   84,  458,  266,   61,  455,  207,  202,   61,  191,
 1552,  264,  280,  535,  407,   48,  538,  266,  160,  225,
  200,  160,  275,  187,  292,   61,   61,  255,  302,  201,
  255,  269,  264,  220,  261,  542,  264,  266,  278,  103,
  597,  224,  266,  317,  318,  319,  320,  561,  114,  115,
  116,  118,  103,  293,  118,  188,  530,  605,  103,  345,
  277,  297,  265,  288,  117,  496,  407,  103,  589,  266,
   48,  254,   30,  606,  106, 1548,  298,   28,  254,   31,
  407,   27,   84,  265,   26,  201,  274,  265,  560,  111,
  581,  588,  117,  408,  202,  261,  261,  112,  202,  261,
  261,  261,  261,  261,  261,  261,  537, 1542,  604,  193,
  517,  255,  642,  223,  490,  202, 1545,  261,  118,  261,
  262,  348,   11,   12,  351,  358,  615,  614,  117,  479,
  193,    2,    2,    2,  268,  531,  594,  268,  316,  214,
   48,  624,  121,  627,  224,  622,  368,  412,  202,  122,
  350,  261,  268,  354,  215,  355,  357,  179,  225,  647,
  179,  353,   45,  641,  247,  164,  588,  247,  247,  247,
  347,  477,  202,   32,  106,  179,  247,  179,  489,   61,
  211,   36,  261,  261,  330,  202,  268,  633,  193,  359,
  249,  361,  223,  123,  362,  249,   32,  493,  249,  249,
  249,  266,  370,  288,   36,  369,  331,  249,  340,  124,
  417,   13,   14,  247,  201,  266,  266,  446,  268,   48,
  298,  247,  422,  224,   48,  421,  179,  411,  247,  201,
  414,  247,  247,  247,  282,  203,  642,  225,   61,  629,
  247,  179,  207,  630,  249,  249,  249,  249,  350,  249,
  249,  310,  249,  591,  310,  426, 1582,  189,  114,  478,
  495,  413,  594,  478,  266,  211,   48,  449,  452,  310,
  434,   61,  216,  294,    2,    2,    2,  247,  247,  247,
  247,  476,  247,  247,  220,  247,  600,  405,  433,  222,
   48,  246,  409,  246,  246,  603,  109,    2,    3,    4,
  310,    6, 1536,  310,   98,   99,  100,  298,  220,  199,
 1539,  298,   15,   16,  105,  261,  201,  105,  456,  350,
  201,   18,   19,   20,   21,   22,   23,  268,  298,  261,
  261,  231,  105,  294,  105,  310,  294,  201,  239,  609,
  347,  545,  202,  292,  588,   32,   24,   25,  612,   32,
  268,  429,  428,   36,  618,   48,  239,   36,   48,   48,
 1545,  298,  202,  621,  268,  268,  299,  294,  199, 1545,
  201,  103,  293,  220,   42,   43,   44,  220,  261,  492,
  297,  463,  464,   30,  103,  298,  588,  494,   28,  483,
   31,  301,   27,  106,  201,   26,  480,   42,  298,   48,
  627,   48, 1545,  292,  303,  544,  292,  201,  306,  630,
  305, 1545,  209,  268,  307,   42,  427,  508,  494,  511,
  283,  284,  285,   48,  286,  287,  473,  210,  294,  208,
  516,  103,  293,  478,  103,  293,   32,  292,  272,  271,
  297,  220,  540,  297,   36,  582,  321,  294,   61,  636,
  184,  540,   61,  106,  585,  322,  106,   48,  639,  311,
   48,  324,  311,  294, 1536,  103,  293,  310,  543, 1576,
   61, 4628, 1539,   45,  297,  436, 1536,  311, 1579,  569,
  326,  310,  310,  294, 1539, 4631, 4634,  106,  327,  166,
  167,  168,  169,  170,  172,  173,  175,  468,  292,  579,
  344,  328,  565,  566,   48,  329,   48,  192,  194,  195,
  196,  311,  301,  420,  573,  597,  598,  292,  211,  332,
  600,   48,  220,  333,  220,  554,  103,  293,  556,  104,
  310,  334,  104,  292, 4637,  297,  335,  520,  521,   96,
  342,  575,   96,  311,  421,  103,  293,  104,  106,  104,
  343,   48,  532,  292,  297,  298,   48,   96,  346,   48,
  494,  103,  293,  246,  201,  246,  246,  106,  577,  220,
  297,  421,   48,   48,  363,   48,  406,  626,   30,  616,
  617,  103,  293,  106,  619,  416,   48,  364,   48,  601,
  297,  220,  593,   48,  365,  421,  366,   48,   48,   48,
  493,  102,  634,  106,  220,  419,  220,  208,    2,    3,
    4,    5,  423,    7,   13,   14,  220,  220,   11,   12,
  621,   13,   14,  421,  623,  217,  218,  219,   17,  172,
  204,  493,  431,   19,   20,   21,   22,   23,  432,  632,
  636,  608,  421,  638,  435,   13,   14,   61,  526,  527,
  528,   61,  336,  337,  339,  341,  639,   24,   25,  421,
  441,  648,  208,  495,  646,  649,  437,  421,   45,   61,
   37,  164,  438,  360,   38,  311, 1561, 1564, 1567, 1570,
   39,   40,   41,   61,  443,   42,   43,   44,  498,  311,
  311,  439,   61,  165,  495,  440,  165,  371,  372,  373,
  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,
  384,  385,  386,  387,  448,   61,  388,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  196,
  403,  404,  450,  356,  499,  105,  164,  211,  311,  164,
  453,  219,  211,  458,  460,  211,  211,  211,  465,  498,
  467,  471,  498,  211,  211,  475,  472,  481,  482,  487,
  264,  264,  211,   77,  264,  264,  264,  264,  264,  264,
  264,  420,  103,  493,  219,  103,  484,  356,  502,  219,
  503,  219,  264,  219,  264,  504,  219,   13,   14,  442,
  103,  211,  103,  505,  512,  499,  506,  515,  499,  211,
  498,  514,  524,    2,    3,    4,  536,    6,  454,  455,
   98,   99,  100,  539,  540,  541,  264,  546,   15,   16,
   44,  553,  548,  462,  557,  555,  559,   18,   19,   20,
   21,   22,   23,  283,  284,  285,  495,  286,  287,  498,
  259,  261,  562,  264,   77,  257,  499,  264,  264,  266,
  258,  564,  517,   44,  576,  580,  578,  587,   44,  592,
   44,  595,   44,  272,  219,   44,  219,  219,  246,  246,
  246,  247,  246,  246,  247,  247,  247,  606,  607,  174,
   42,   43,   44,  247,  178,  499,  609,  182,  186,  190,
  611,  615,  223,  613,  265,  194,  199,   78,  624,  631,
  501,  169,  169,  169,  203,  169,  169,   61,   61,  633,
  640,  643,   75,    1,   61,  337,   76,   41,  513,  192,
  247,  247,  247,  247,  246,  247,  247,  262,  247,  215,
  243,   75,   41,  211,  214,  217,  523,  538,  588,  476,
 1071,  220,  112,   44,  534,   44,   44,  105,  109,  115,
 1533,  102, 1573,    6,   99, 1533,   98,   99,  100,  538,
 4625, 1558, 1533, 1533,   15,   16, 4640,  549,  550,  551,
  552,  223,  341,   18,  486,  341,   77,  547,   78,  226,
  264,  181,  182,  183,  184,  185,  186,  227,  500,  568,
   77,   77,  228,  229,  264,  264,  230,  206,  219,  219,
  219,  219,  219,  219,  219,  635,  219,  219,  219,  219,
  219,  582,  219,  219,  219,  219,  219,  219,  219,  219,
  337,    0,  591,  219,  219,  219,  219,  219,  219,  112,
    0,  570,  171,  402,  105,  108,  115,  603,  102,   77,
    0,   99,    0,  264,    0,    0,    0,    0,  219,  219,
    0,    0,  219,  219,  219,  219,    0,  219,  219,    0,
  219,  219,    0,    0,    0,  219,    0,    0,    0,    0,
    0,  219,  219,  219,    0,    0,  219,  219,  219,    0,
    0,   44,   44,   44,    0,   44,   44,   44,   44,   44,
  341,   44,   44,   44,   44,   44,   44,   44,   44,    0,
    0,    0,   44,   44,   44,   44,   44,   44,    0,    0,
   78,  112,    0,    0,    0,    0,  105,    0,  115,  171,
  102,   61,  108,   99,   78,   78,    0,   44,   44,    0,
   61,   44,   44,   44,   44,    0,   44,   44,    0,   44,
   44,    0,    6,    0,   44,   98,   99,  100,    0,    0,
   44,   44,   44,   15,   16,   44,   44,   44,    0,    0,
    0,    0,   18,    0,    0,    0,    0,    6,    9,   12,
   15,   18,   24,   78,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,   90,    0,  112,    0,
    0,  171,    0,  105,  108,  115,    0,  102,    0,    0,
   99,    0,    0,    0,    0,    0,   93,   96,    0,    0,
  118,  123,  128,  133,    0,  137,  137,    0,  142,  147,
    0,    0,    0,  150,    0,    0,    0,    0,    0,  153,
  156,  159,    0,    0,  162,  165,  168,    0,    0,    0,
    0,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,   90,    0,  112,    0,    0,  171,    0,
  105,  108,  115,    0,  102,    0,    0,   99,    0,    0,
    0,    0,    0,   93,   96,    0,    0,  118,  123,  128,
  133,    0,  137,  137,    0,  142,  147,    0,    0,    0,
  150,    0,    0,    0,    0,    0,  153,  156,  159,    0,
    0,  162,  165,  168,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,   90,    0,  112,    0,    0,
    0,    0,  105,    0,  115,  171,  102,    0,  108,   99,
    0,    0,    0,    0,    0,   93,   96,    0,    0,  118,
  123,  128,  133,    0,  137,  137,    0,  142,  147,    0,
    0,    0,  150,    0,    0,    0,    0,    0,  153,  156,
  159,    0,    0,  162,  165,  168,    0,    0,    0,    0,
    0,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,   90,    0,  112,    0,    0,  171,    0,  105,
  108,  115,    0,  102,    0,    0,   99,    0,    0,    0,
    0,    0,   93,   96,    0,    0,  118,  123,  128,  133,
    0,  137,  137,    0,  142,  147,    0,    0,    0,  150,
    0,    0,    0,    0,    0,  153,  156,  159,    0,    0,
  162,  165,  168,    0,    0,    0,    0,    0,    0,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,   90,
    0,  112,    0,    0,  171,    0,  105,  108,  115,    0,
  102,    0,    0,   99,    0,    0,    0,    0,    0,   93,
   96,    0,    0,  118,  123,  128,  133,    0,  137,  137,
    0,  142,  147,    0,    0,    0,  150,    0,    0,    0,
    0,    0,  153,  156,  159,    0,    0,  162,  165,  168,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,   90,    0,  112,    0,    0,    0,    0,  105,    0,
  115,  171,  102,    0,  108,   99,    0,    0,    0,    0,
    0,   93,   96,    0,    0,  118,  123,  128,  133,    0,
  137,  137,    0,  142,  147,    0,    0,    0,  150,    0,
    0,    0,    0,    0,  153,  156,  159,    0,    0,  162,
  165,  168,    0,    0,    0,    0,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,   90,    0,
  112,    0,    0,  171,    0,  105,  108,  115,    0,  102,
    0,    0,   99,    0,    0,    0,    0,    0,   93,   96,
    0,    0,  118,  123,  128,  133,    0,  137,  137,    0,
  142,  147,    0,    0,    0,  150,    0,    0,    0,    0,
    0,  153,  156,  159,    0,    0,  162,  165,  168,    0,
    0,    0,    0,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,   90,    0,  112,    0,    0,
  171,    0,  105,  108,  115,    0,  102,    0,    0,   99,
    0,    0,    0,    0,    0,   93,   96,    0,    0,  118,
  123,  128,  133,    0,  137,  137,    0,  142,  147,    0,
    0,    0,  150,    0,    0,    0,    0,    0,  153,  156,
  159,    0,    0,  162,  165,  168,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,    0,    0,    0,   69,    0,
    0,    0,   72,   78,   81,   84,   87,   90,    0,  112,
    0,    0,    0,    0,  105,    0,  115,  171,  102,    0,
  108,   99,    0,    0,    0,    0,    0,   93,   96,    0,
    0,  118,  123,  128,  133,    0,  137,  137,    0,  142,
  147,    0,    0,    0,  150,    0,    0,    0,    0,    0,
  153,  156,  159,    0,    0,  162,  165,  168,    0,    0,
    0,    0,    0,    0,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    0,    0,   69,    0,    0,    0,   72,
   78,   81,   84,   87,   90,    0,  112,    0,    0,  171,
    0,  105,  108,  115,    0,  102,    0,    0,   99,    0,
    0,    0,    0,    0,   93,   96,    0,    0,  118,  123,
  128,  133,    0,  137,  137,    0,  142,  147,    0,    0,
    0,  150,    0,    0,    0,    0,    0,  153,  156,  159,
    0,    0,  162,  165,  168,    0,    0,    0,    0,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,   90,    0,  112,    0,    0,  171,    0,  105,  108,
  115,    0,  102,    0,    0,   99,    0,    0,    0,    0,
    0,   93,   96,    0,    0,  118,  123,  128,  133,    0,
  137,  137,    0,  142,  147,    0,    0,    0,  150,    0,
    0,    0,    0,    0,  153,  156,  159,    0,    0,  162,
  165,  168,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,   90,    0,   30,    0,    0,    0,    0,
   28,    0,   31,  171,   27,    0,  108,   26,    0,    0,
    0,    0,    0,   93,   96,    0,    0,  118,  123,  128,
  133,    0,  137,  137,    0,  142,  147,    0,    0,    0,
  150,    0,    0,    0,    0,    0,  153,  156,  159,    0,
    0,  162,  165,  168,    0,    0,    0,    0,    0,    0,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
    0,   69,    0,    0,    0,   72,   78,   81,   84,   87,
   90,   30,    0,    0,    0,   45,   28,  452,   31,    0,
   27,  246,    0,   26,  246,  246,  246,    0,    0,    0,
   93,   96,  246,  246,  118,  123,  128,  133,    0,  137,
  137,  246,  142,  147,    0,    0,  246,  150,    0,    0,
    0,    0,    0,  153,  156,  159,    0,    0,  162,  165,
  168,    0,    0,    0,    0,    0,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,    0,    0,  270,   69,  270,
  270,  270,   72,   78,   81,   84,   87,   90,    0,   30,
    0,   45,    0,  470,   28,  270,   31,  270,   27,    0,
    0,   26,    0,    0,    0,    0,    0,   93,   96,    0,
    0,  118,  123,  128,  133,    0,  137,  137,    0,  142,
  147,    0,    0,    0,  150,    0,    0,    0,    0,  270,
  153,  156,  159,    0,    0,  162,  165,  168,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,  179,  179,
   11,   12,  179,   13,   14,    0,    0,  217,  218,  219,
   17,  270,    0,    0,    0,   19,   20,   21,   22,   23,
  179,   30,    0,    0,    0,    0,   28,    0,   31,   45,
   27,  474,    0,   26,    0,    0,    0,    0,    0,   24,
   25,  109,    0,    0,    0,    0,    6,    0,    0,   98,
   99,  100,   37,    0,    0,    0,   38,   15,   16,    0,
    0,    0,   39,   40,   41,    0,   18,   42,   43,   44,
    0,   23,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,  177,   13,
   14,    0,    0,  217,  218,  219,   17,    0,    0,    0,
    0,   19,   20,   21,   22,   23,    0,   30,    0,    0,
    0,   45,   28,  525,   31,    0,   27,    0,    0,   26,
    0,    0,    0,    0,    0,   24,   25,    0,  178,  179,
  180,  181,  182,  183,  184,  185,  186,    0,   37,    0,
    0,    0,   38,  270,    0,    0,    0,    0,   39,   40,
   41,    0,    0,   42,   43,   44,    0,  270,  270,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    0,    7,
    0,    0,  179,    0,   11,   12,  179,   13,   14,    0,
    0,  217,  218,  219,   17,    0,    0,    0,    0,   19,
   20,   21,   22,   23,    0,   30,    0,   45,    0,  588,
   28,    0,   31,    0,   27,    0,  270,   26,    0,    0,
    0,    0,    0,   24,   25,  179,    0,    0,    0,    0,
  179,    0,    0,  179,  179,  179,   37,    0,    0,    0,
   38,  179,  179,    0,    0,    0,   39,   40,   41,    0,
  179,   42,   43,   44,    0,  179,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,    0,  217,  218,  219,   17,    0,    0,    0,
    0,   19,   20,   21,   22,   23,    0,   30,    0,    0,
    0,    0,   28,    0,   31,   45,   27,  590,    0,   26,
    0,    0,    0,    0,    0,   24,   25,  109,    0,    0,
    0,    0,    6,    0,    0,  308,   99,  100,   37,    0,
  309,    0,   38,   15,   16,    0,    0,    0,   39,   40,
   41,    0,   18,   42,   43,   44,    0,    0,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
  290,    0,   11,   12,    0,   13,   14,    0,    0,  217,
  218,  219,   17,    0,    0,    0,    0,   19,   20,   21,
   22,   23,    0,   30,    0,    0,    0,   45,   28,  618,
   31,    0,   27,    0,    0,   26,    0,    0,    0,    0,
    0,   24,   25,    0,   32,  283,  284,  285,    0,  286,
  287,  179,   36,    0,   37,    0,  179,    0,   38,  179,
  179,  179,    0,    0,   39,   40,   41,  179,  179,   42,
   43,   44,    0,    0,    0,    0,  179,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,    0,   13,   14,    0,    0,  217,  218,  219,
   17,    0,    0,    0,    0,   19,   20,   21,   22,   23,
    0,   30,    0,   45,    0,  637,   28,    0,   31,    0,
   27,    0,    0,   26,    0,    0,    0,    0,    0,   24,
   25,  289,    0,    0,    0,    0,    6,    0,    0,   98,
   99,  100,   37,    0,    0,    0,   38,   15,   16,    0,
    0,    0,   39,   40,   41,    0,   18,   42,   43,   44,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,    0,   13,   14,    0,    0,  217,
  218,  219,   17,    0,    0,    0,    0,   19,   20,   21,
   22,   23,    0,   30,    0,    0,    0,    0,   28,    0,
   31,   45,   27,  644,    0,   26,    0,    0,    0,    0,
    0,   24,   25,  109,    0,    0,    0,    0,    6,    0,
    0,   98,   99,  100,   37,    0,    0,    0,   38,   15,
   16,    0,    0,    0,   39,   40,   41,    0,   18,   42,
   43,   44,    0,    0,    0,    0,    0,    0,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
    0,   13,   14,    0,    0,  217,  218,  219,   17,    0,
    0,    0,    0,   19,   20,   21,   22,   23,    0,   30,
    0,    0,    0,   45,   28,  645,   31,    0,   27,    0,
    0,   26,    0,    0,    0,    0,    0,   24,   25,  349,
    0,    0,    0,    0,    6,    0,    0,   98,   99,  100,
   37,    0,    0,    0,   38,   15,   16,    0,    0,    0,
   39,   40,   41,    0,   18,   42,   43,   44,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,    0,  217,  218,  219,   17,    0,    0,    0,
    0,   19,   20,   21,   22,   23,    0,   30,    0,   45,
    0,  650,   28,    0,   31,    0,   27,    0,    0,   26,
    0,    0,    0,    0,    0,   24,   25,  259,  261,    0,
  264,    0,  257,  255,    0,  256,  266,  258,   37,    0,
    0,    0,   38,    0,    0,    0,    0,    0,   39,   40,
   41,  263,    0,   42,   43,   44,    0,    0,    2,    3,
    4,    5,    0,    7,  211,    0,  211,  211,   11,   12,
  211,   13,   14,    0,    0,  217,  218,  219,   17,    0,
    0,  265,    0,   19,   20,   21,   22,   23,  211,   30,
    0,    0,    0,    0,   28,    0,   31,   45,   27,  651,
    0,   26,    0,    0,    0,    0,    0,   24,   25,    0,
    0,    0,    0,    0,  262,    0,    0,  211,    0,    0,
   37,    0,    0,    0,   38,    0,    0,    0,    0,    0,
   39,   40,   41,    0,    0,   42,   43,   44,    0,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,    0,   13,   14,    0,
    0,  217,  218,  219,   17,    0,    0,    0,    0,   19,
   20,   21,   22,   23,    0,   30,    0,    0,    0,   45,
   28,    0,   31,    0,   27,    0,    0,   26,    0,    0,
    0,    0,    0,   24,   25,    0,    0,    0,    0,    0,
    0,  313,    0,    0,  313,    0,   37,    0,    0,    0,
   38,    0,    0,    0,    0,    0,   39,   40,   41,  313,
    0,   42,   43,   44,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,    0,   13,   14,    0,    0,  217,
  218,  219,   17,  313,    0,    0,    0,   19,   20,   21,
   22,   23,   30,    0,    0,  190,    0,   28,    0,   31,
  410,   27,    0,    0,   26,    6,    0,    0,   98,   99,
  100,   24,   25,  211,    0,  313,   15,   16,  211,    0,
    0,  211,  211,  211,   37,   18,    0,    0,   38,  211,
  211,    0,    0,    0,   39,   40,   41,    0,  211,   42,
   43,   44,    0,  211,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,    0,   13,   14,    0,
    0,  217,  218,  219,   17,    0,    0,  211,    0,   19,
   20,   21,   22,   23,   30,  211,    0,    0,    0,   28,
    0,   31,  507,   27,    0,    0,   26,  271,    0,  271,
  271,  271,    0,   24,   25,    0,    0,    0,    0,    0,
    0,    0,    0,  466,    0,  271,   37,  271,    6,    0,
   38,   98,   99,  100,    0,    0,   39,   40,   41,   15,
   16,   42,   43,   44,    0,    0,    0,    0,   18,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,  271,
   11,   12,    0,   13,   14,    0,    0,  313,    0,    0,
   17,    0,    0,    0,    0,   19,   20,   21,   22,   23,
   30,  313,  313,    0,  510,   28,    0,   31,  179,   27,
    0,  271,   26,  179,    0,    0,  179,  179,  179,   24,
   25,  226,    0,    0,  179,  179,  226,    0,    0,  226,
  226,  226,   37,  179,    0,    0,   38,  226,  226,    0,
    0,    0,   39,   40,   41,    0,  226,   42,   43,   44,
  313,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,  281,    0,    0,  281,   11,   12,    0,
   13,   14,    0,    0,    0,    0,    0,   17,    0,    0,
    0,  281,   19,   20,   21,   22,   23,   30,    0,    0,
  625,    0,   28,    0,   31,  401,   27,    0,    0,   26,
  544,    0,    0,    0,    0,  548,   24,   25,  552,  556,
  560,    0,    0,    0,    0,  281,  564,  568,    0,   37,
    0,    0,    0,   38,    0,  572,    0,    0,    0,   39,
   40,   41,    0,    0,   42,   43,   44,    0,    0,    2,
    3,    4,    5,  271,    7,    0,    0,  281,    0,   11,
   12,    0,   13,   14,  230,  576,  579,  271,  271,   17,
    0,    0,  233,    0,   19,   20,   21,   22,   23,   30,
    0,    0,    0,    0,   28,    0,   31,   45,   27,    0,
  164,   26,    0,    0,    0,    0,    0,    0,   24,   25,
    0,    0,    0,    0,    0,    0,  282,    0,    0,  282,
    0,   37,    0,    0,    0,   38,  271,    0,    0,    0,
    0,   39,   40,   41,  282,    0,   42,   43,   44,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,  461,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,    0,    0,    0,   17,    0,    0,  282,    0,
   19,   20,   21,   22,   23,    0,    0,    0,   30,   45,
    0,    0,  164,   28,    0,   31,    0,   27,    0,    0,
   26,    0,    0,    0,   24,   25,    0,    0,    0,  281,
  282,    0,    0,    0,    0,    0,    0,   37,    0,    0,
    0,   38,    0,  281,  281,    0,    0,   39,   40,   41,
    0,    0,   42,   43,   44,    0,    0,    0,    0,    0,
    0,  109,    2,    3,    4,    0,    6,    0,  533,   98,
   99,  100,    0,    0,    0,    0,    0,   15,   16,    0,
    0,    0,    0,    0,    0,    0,   18,   19,   20,   21,
   22,   23,  281,    0,    0,   30,    0,    0,   45,    0,
   28,  164,   31,    0,   27,    0,    0,   26,    0,    0,
    0,   24,   25,    0,    0,    0,    0,  246,    0,    0,
  246,  246,  246,    0,    0,    0,   30,    0,  246,  246,
    0,   28,    0,   31,    0,   27,    0,  246,   26,   42,
   43,   44,    0,  109,    2,    3,    4,    0,    6,    0,
    0,   98,   99,  100,    0,  602,    0,    0,    0,   15,
   16,    0,  282,    0,    0,    0,  246,    0,   18,   19,
   20,   21,   22,   23,  246,    0,  282,  282,    0,    0,
    0,    0,    0,    0,    0,   45,    0,    0,  164,    0,
    0,   30,    0,   24,   25,    0,   28,    0,   31,    0,
   27,  215,    0,   26,    0,    0,  215,    0,    0,  215,
  215,  215,    0,    0,    0,    0,   45,  215,  215,  164,
    0,   42,   43,   44,    0,  282,  215,    0,    0,    0,
    0,    0,  109,    2,    3,    4,    0,    6,    0,    0,
   98,   99,  100,    0,    0,    0,    0,  283,   15,   16,
  283,    0,    0,    0,    0,  215,    0,   18,   19,   20,
   21,   22,   23,  215,   30,  283,    0,    0,    0,   28,
  236,   31,    0,   27,    0,  239,   26,    0,  242,  245,
  248,   45,   24,   25,  164,    0,  251,  254,    0,    0,
  284,    0,    0,  284,    0,  257,    0,    0,    0,  283,
    0,    0,    0,    0,    0,    0,    0,    0,  284,    0,
   42,   43,   44,    0,    0,    0,    0,    0,    0,  109,
    2,    3,    4,    0,    6,    0,    0,   98,   99,  100,
    0,  283,    0,    0,    0,   15,   16,    0,    0,    0,
    0,    0,  284,    0,   18,   19,   20,   21,   22,   23,
  109,    2,    3,    4,   45,    6,    0,  164,   98,   99,
  100,    0,    0,    0,    0,    0,   15,   16,    0,   24,
   25,    0,    0,    0,  284,   18,   19,   20,   21,   22,
   23,   65,   65,    0,   65,   65,   65,   65,   65,   65,
   65,   65,    0,    0,    0,    0,    0,   42,   43,   44,
   24,   25,    0,   65,    0,   65,   65,    0,    0,    0,
    0,    0,    0,    0,    0,  171,    2,    3,    4,    0,
    6,    0,    0,   98,   99,  100,    0,    0,   42,   43,
   44,   15,   16,    0,    0,   65,    0,   65,   65,    0,
   18,   19,   20,   21,   22,   23,    0,    0,   68,   68,
    0,   68,   68,   68,   68,   68,   68,   68,   68,    0,
    0,    0,    0,  283,    0,   24,   25,   65,   65,   65,
   68,  260,   68,   68,    0,    0,  263,  283,  283,  266,
  269,  272,    0,    0,    0,    0,    0,  275,  278,    2,
    3,    4,    0,   42,   43,   44,  281,    0,    0,    0,
    0,    0,   68,  289,   68,   68,  284,  289,  289,  289,
  289,  289,    0,  289,   19,   20,   21,   22,   23,    0,
  284,  284,    0,    0,    0,  289,  283,  289,    0,    0,
    0,    0,    0,    0,   68,   68,   68,    0,   24,   25,
  247,    0,   32,  247,  247,  247,    0,    0,    0,    0,
   36,  247,  247,    0,    0,    0,    0,    0,    0,  289,
  247,    0,    0,    0,    0,    0,   42,   43,   44,  284,
   69,   69,    0,   69,   69,   69,   69,   69,   69,   69,
   69,    0,    0,    0,    0,    0,    0,    0,    0,  247,
    0,  289,   69,    0,   69,   69,    0,  247,    0,    0,
    0,   65,    0,    0,    0,    0,   65,    0,    0,   65,
   65,   65,    0,    0,    0,   65,   65,    0,   65,    0,
    0,    0,    0,    0,   69,    0,   69,   69,    0,    0,
    0,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
    0,   65,   65,   65,   65,   65,   69,   69,   69,    0,
    0,    0,    0,   65,   65,    0,    0,    0,   68,    0,
    0,    0,  285,   68,    0,  285,   68,   68,   68,    0,
    0,    0,   68,   68,    0,   68,    0,    0,    0,    0,
  285,    0,    0,    0,    0,    0,    0,    0,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,    0,   68,   68,
   68,   68,   68,  289,  285,    0,    0,    0,    0,    0,
   68,   68,    0,    0,    0,    0,  284,  289,  289,    0,
    0,  287,    0,    0,  290,  293,  296,    0,    0,    0,
    0,    0,  299,  302,    0,    0,  285,    0,    0,   70,
   70,  305,   70,   70,   70,   70,   70,   70,   70,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   70,    0,   70,   70,    0,  289,    0,    0,    0,
   69,    0,    0,    0,    0,   69,    0,    0,   69,   69,
   69,    0,    0,    0,   69,   69,    0,   69,    0,    0,
    0,    0,    0,   70,    0,   70,   70,    0,    0,    0,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,    0,
   69,   69,   69,   69,   69,   70,   70,   70,    0,    0,
    0,    0,   69,   69,   62,   62,    0,   62,   62,   62,
   62,   62,   62,   62,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   62,    0,   62,   62,
    0,    0,    0,    0,    0,    0,    0,    0,  285,    0,
 4411,    0,    0,    0,    0,  548,    0,    0,  552,  556,
  560,    0,  285,  285,    0,    0,  564,  568,   62,    0,
   62,   62,    0,   67,   67,  572,   67,   67,   67,   67,
   67,   67,   67,   67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,    0,   67,   67,    0,
   62,   62,   62,    0,  230,  576,  579,    0,  308,    0,
    0,  285,  233,  311,    0,    0,  314,  317,  320,    0,
    0,    0,    0,    0,  323,  326,  332,   67,    0,   67,
   67,  335,    0,  329,  338,  341,  344,    0,    0,   70,
    0,    0,  347,  350,   70,    0,    0,   70,   70,   70,
    0,  353,    0,   70,   70,    0,   70,    0,    0,   67,
   67,   67,    0,    0,    0,    0,    0,    0,    0,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,    0,   70,
   70,   70,   70,   70,    0,    0,    0,    0,    0,    0,
    0,   70,   70,   63,   63,    0,   63,   63,   63,   63,
   63,   63,   63,   63,    0,    0,    0,    0,    0,    0,
    0,  356,    0,    0,    0,   63,  359,   63,   63,  362,
  365,  368,    0,    0,   62,    0,    0,  371,  374,   62,
    0,    0,   62,   62,   62,    0,  377,    0,   62,   62,
    0,   62,    0,    0,    0,    0,    0,   63,    0,   63,
   63,    0,    0,    0,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,    0,   62,   62,   62,   62,   62,   63,
   63,   63,    0,   67,    0,    0,   62,   62,   67,    0,
    0,   67,   67,   67,    0,    0,    0,   67,   67,    0,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,    0,   67,   67,   67,   67,   67,    0,    0,
    0,    0,    0,    0,    0,   67,   67,   64,   64,    0,
   64,   64,   64,   64,   64,   64,   64,   64,  223,    0,
    0,    0,    0,  226,    0,    0,  226,  226,  226,   64,
   64,   64,   64,    0,  226,  226,    0,  466,    0,    0,
    0,  420,  466,  226,    0,  466,  466,  466,    0,    0,
  514,    0,    0,  466,  466,  517,    0,    0,  520,  523,
  526,   64,  466,   64,   64,    0,  529,  532,    0,    0,
    0,    0,  230,   63,    0,  535,    0,    0,   63,    0,
  233,   63,   63,   63,    0,    0,    0,   63,   63,    0,
   63,  470,    0,   64,   64,   64,    0,    0,    0,  473,
    0,    0,    0,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,    0,   63,   63,   63,   63,   63,    0,    0,
    0,    0,    0,    0,    0,   63,   63,   66,   66,    0,
   66,   66,   66,   66,   66,   66,   66,   66,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
   66,   66,   66,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  380,    0,    0,    0,    0,  385,    0,    0,
  390,  395,  400,    0,    0,    0,    0,    0,  405,  410,
    0,   66,    0,   66,   66,  120,  120,  415,  120,  120,
  120,  120,  120,  120,  120,  120,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  120,    0,  120,
  120,    0,    0,   66,   66,   66,  423,  427,  431,  435,
 4411,  438,  438,    0,  442,  548,    0,    0,  552,  556,
  560,   64,   64,    0,    0,    0,  564,  568,    0,  120,
    0,  120,  120,    0,    0,  572,    0,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,    0,   64,   64,   64,
   64,   64,  120,  120,  230,  576,  579,  314,    0,   64,
   64,  314,  233,  314,  314,    0,  314,  314,  265,  265,
    0,    0,  265,  265,  265,  265,  265,  265,  265,  314,
  314,  314,  314,    0,    0,    0,    0,    0,    0,    0,
  265,    0,  265,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  314,    0,  314,  314,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  265,    0,  262,  262,    0,    0,
  262,  262,  262,  262,  262,  262,  262,    0,    0,    0,
    0,   66,   66,    0,  314,  314,    0,    0,  262,    0,
  262,    0,    0,    0,    0,  265,  265,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,    0,   66,   66,   66,
   66,   66,  262,    0,    0,  120,    0,  263,  263,   66,
   66,  263,  263,  263,  263,  263,  263,  263,    0,  120,
  120,    0,    0,    0,    0,    0,    0,    0,    0,  263,
    0,  263,    0,  262,  262,    0,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,    0,    0,  120,  120,  120,  120,    0,
    0,    0,    0,  263,    0,  299,  299,    0,  120,  299,
  299,  299,  299,  299,  299,  299,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  299,    0,  299,
    0,    0,    0,  482,  263,  263,    0,    0,  486,    0,
    0,  490,  494,  498,    0,    0,    0,    0,  265,  502,
  506,  314,  314,    0,    0,    0,    0,    0,  510,    0,
    0,  299,  265,  265,    0,    0,    0,    0,  314,  314,
  314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
  314,  314,  314,  314,  314,    0,    0,  438,    0,  314,
  314,    0,  299,  299,    0,  438,    0,    0,    0,    0,
  314,    0,    0,    0,    0,    0,  262,  286,  298,  298,
  286,  265,  298,  298,  298,  298,  298,  298,  298,    0,
  262,  262,    0,    0,    0,  286,    0,    0,    0,    0,
  298,    0,  298,  275,  275,    0,    0,  275,  275,  275,
  275,  275,    0,  275,  276,  276,    0,    0,  276,  276,
  276,  276,  276,    0,  276,  275,    0,  275,    0,  286,
    0,    0,    0,    0,  298,    0,  276,  263,  276,  262,
  290,    0,    0,    0,  290,  290,  290,  290,  290,    0,
  290,  263,  263,    0,   74,    0,   74,   74,   74,  275,
   74,  286,  290,    0,  290,  298,  298,    0,    0,    0,
  276,    0,    0,    0,    0,  272,    0,    0,   74,  272,
  272,  272,  272,  272,    0,  272,    0,    0,    0,    0,
  275,  275,    0,    0,    0,  299,  290,  272,    0,  272,
  263,  276,  276,    0,    0,    0,    0,   74,  273,  299,
  299,    0,  273,  273,  273,  273,  273,  274,  273,    0,
    0,  274,  274,  274,  274,  274,    0,  274,  290,    0,
  273,  272,  273,    0,    0,    0,    0,    0,    0,  274,
    0,  274,    0,    0,  212,    0,  212,  212,    0,    0,
  212,    0,    0,    0,    0,    0,    0,    0,  299,    0,
    0,    0,    0,  272,  273,    0,    0,    0,  212,    0,
    0,    0,    0,  274,  287,    0,    0,  287,   61,   61,
    0,    0,    0,   61,   61,   61,   61,   61,   61,    0,
    0,    0,  287,  286,    0,    0,  273,  212,  298,    0,
   61,   61,   61,   61,    0,  274,    0,  286,  286,    0,
    0,    0,  298,  298,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  275,    0,    0,  287,    0,    0,    0,
    0,    0,   61,    0,  276,   61,    0,  275,  275,    0,
    0,    0,  215,  215,    0,    0,  215,    0,  276,  276,
    0,    0,    0,    0,    0,    0,  286,    0,  287,    0,
  290,  298,    0,    0,  215,   61,   61,    0,    0,    0,
    0,    0,    0,   74,  290,  290,    0,    0,   74,    0,
    0,   74,   74,   74,    0,    0,  275,    0,    0,    0,
   74,    0,    0,  215,    0,  272,    0,  276,  216,  216,
    0,    0,  216,   74,    0,    0,    0,    0,    0,  272,
  272,    0,  288,    0,    0,  288,    0,    0,    0,    0,
  216,   74,  291,  290,    0,  291,    0,   74,  273,    0,
  288,    0,    0,    0,    0,   74,    0,  274,    0,    0,
  291,    0,  273,  273,    0,  466,    0,    0,    0,  216,
  466,  274,  274,  466,  466,  466,    0,    0,  272,    0,
    0,  466,  466,  212,  288,    0,    0,    0,  212,    0,
  466,  212,  212,  212,  291,    0,    0,    0,    0,  212,
  212,    0,    0,  247,    0,    0,    0,    0,  212,    0,
  287,  273,    0,  212,    0,  292,  288,    0,  292,  470,
  274,    0,    0,    0,  287,  287,  291,  473,  293,    0,
    0,  293,    0,  292,    0,    0,    0,  212,    0,    0,
    0,    0,    0,    0,    0,  212,  293,    0,    0,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,  292,   61,   61,
   61,   61,    0,  287,    0,  247,    0,  247,  247,  215,
  293,    0,  294,    0,  215,  294,    0,  215,  215,  215,
  295,    0,    0,  295,    0,  215,  215,    0,  296,  292,
  294,  296,  297,    0,  215,  297,    0,  300,  295,  215,
  300,    0,  293,    0,    0,    0,  296,    0,  279,    0,
  297,  279,    0,    0,    0,  300,    0,    0,  280,    0,
    0,  280,    0,  215,  294,  216,  279,    0,    0,    0,
  216,  215,  295,  216,  216,  216,  280,    0,  288,    0,
  296,  216,  216,    0,  297,    0,    0,    0,  291,  300,
  216,    0,  288,  288,    0,  216,  294,    0,    0,    0,
  279,    0,  291,  291,  295,    0,    0,    0,  277,    0,
  280,  277,  296,    0,    0,  278,  297,  304,  278,  216,
  304,  300,    0,    0,    0,  312,  277,  216,  312, 4411,
    0,    0,  279,  278,  548,  304,    0,  552,  556,  560,
    0,  288,  280,  312,    0,  564,  568,    0,    0,    0,
    0,  291,    0,  247,  572,    0,  247,  247,  247,    0,
  277,  292,    0,    0,  247,  247,    0,  278,    0,  304,
    0,    0,    0,  247,  293,  292,  292,  312,  247,    0,
    0,    0,    0,  230,  576,  579,    0,    0,  293,  293,
    0,  233,  277,  918,    0,  921,    0,    0,    0,  278,
    0,  304,  247,  247,  247,  247,    0,  247,  247,  312,
  247,  159,    0,    0,    0,  154,  156,    0,  162,    0,
  152,  150,  161,  151,  292,  153,    0,  924,  294,    0,
    0,    0,    0,    0,    0,    0,  295,  293,  148,  160,
  149,    0,  294,  294,  296,    0,    0,    0,  297,    0,
  295,  295,    0,  300,    0,    0,    0,    0,  296,  296,
    0,  420,  297,  297,  279,    0,    0,  300,  300,  163,
    0,    0,  155,    0,  280,    0,    0,    0,  279,  279,
    0,    0,    0,    0,    0,    0,    0,    0,  280,  280,
    0,  294,    0,    0,    0,    0,    0,    0,    0,  295,
    0,    0,  157,    0,  158,    0,    0,  296,    0,    0,
    0,  297,    0,    0,    0,    0,  300,    0,    0,    0,
    0,    0,    0,    0,  277,    0,    0,  279,    0,    0,
    0,  278,    0,  304,    0,    0,    0,  280,  277,  277,
    0,  312,    0,    0,    0,  278,  278,  304,  304,    0,
    0,    0,    0,    0,    0,  312,  312,   61,   61,    0,
   61,    0,   61,   61,   61,   61,   61,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,   61,   61,    0,    0,    0,    0,  277,    0,    0,
    0,    0,  380,    0,  278,    0,  304,  385,    0,    0,
  390,  395,  400,    0,  312,    0,    0,    0,  405,  410,
    0,   61,    0,    0,   61,    0,    0,  415,    0,    0,
    0,  855,  858,  861,  864,  867,  870,  873,  876,  879,
  882,  885,  888,  891,  894,  897,  900,  903,    0,    0,
  906,  909,  912,  915,   61,   61,  423,  427,  431,  435,
    0,  438,  438,    0,  442,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,  140,  141,  142,  143,  144,  145,  146,  147,   61,
   61,    0,    0,    0,   61,   61,   61,   61,   61,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,   61,   61,   61,    0,  259,  261,    0,  264,
    0,  257,  255,    0,  256,  266,  258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  267,  253,
  263,  254,    0,   61,  259,  261,   61,  264,  325,  257,
  255,    0,  256,  266,  258,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  253,  263,  254,
  265,    0,    0,  260,    0,    0,   61,   61,    0,    0,
    0,  259,  261,    0,  264,  449,  257,  255,    0,  256,
  266,  258,    0,    0,    0,    0,    0,    0,  265,    0,
    0,  260,   61,  262,  253,  263,  254,    0,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,    0,   61,   61,   61,
   61,  262,    0,    0,    0,  265,  259,  261,  260,  264,
  451,  257,  255,    0,  256,  266,  258,    0, 4411,    0,
    0,    0,    0,  548,    0,    0,  552,  556,  560,  253,
  263,  254,    0,    0,  564,  568,    0,    0,  262,    0,
    0,    0,    0,  572,    0,    0,  259,  261,    0,  264,
    0,  257,  255,    0,  256,  266,  258,    0,    0,    0,
  265,    0,    0,  260,    0,    0,    0,    0,    0,  253,
  263,  254,  230,  576,  579,    0,    0,    0,    0,    0,
  233,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  262,    0,   61,    0,    0,    0,    0,
  265,    0,  469,  260,   61,    0,    0,    0,    0,    0,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,    0,    0,   61,
   61,   61,   61,  262,    0,    0,    0,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,    0,    0,  249,  250,  251,  252,
    0,    0,    0,    0,    0,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  247,  248,    0,    0,  249,  250,  251,  252,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,    0,
    0,  249,  250,  251,  252,    0,    0,  259,  261,    0,
  264,    0,  257,  255,    0,  256,  266,  258,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  253,  263,  254,    0,    0,    0,    0,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,    0,    0,  249,  250,  251,  252,
    0,  265,    0,  519,  260,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  262,    0,  249,  250,  251,  252,
  259,  261,    0,  264,  558,  257,  255,    0,  256,  266,
  258,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  253,  263,  254,  259,  261,    0,  264,
  567,  257,  255,    0,  256,  266,  258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  253,
  263,  254,    0,    0,  265,    0,    0,  260,    0,    0,
    0,  259,  261,    0,  264,    0,  257,  255,    0,  256,
  266,  258,    0,    0,    0,    0,    0,    0,    0,    0,
  265,    0,    0,  260,  253,  263,  254,  262,    0,    0,
    0,    0,    0,    0,    0,    0,  259,  261,    0,  264,
  583,  257,  255,    0,  256,  266,  258,    0,    0,    0,
    0,    0,    0,  262,    0,  265,    0,  574,  260,  253,
  263,  254,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  259,  261,    0,  264,  584,  257,  255,    0,  256,
  266,  258,    0,    0,    0,    0,    0,    0,  262,    0,
  265,    0,    0,  260,  253,  263,  254,    0,  232,  233,
  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
  244,  245,  246,  247,  248,    0,    0,  249,  250,  251,
  252,    0,    0,  262,    0,  265,    0,    0,  260,  259,
  261,    0,  264,  585,  257,  255,    0,  256,  266,  258,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  253,  263,  254,    0,    0,    0,  262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  265,    0,    0,  260,    0,    0,    0,
    0,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,  248,    0,    0,
  249,  250,  251,  252,    0,    0,  262,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,    0,    0,  249,  250,  251,  252,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,    0,
    0,  249,  250,  251,  252,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,    0,    0,  249,  250,  251,  252,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  232,  233,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,    0,
    0,  249,  250,  251,  252,    0,    0,    0,    0,  259,
  261,    0,  264,  586,  257,  255,    0,  256,  266,  258,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  253,  263,  254,    0,    0,    0,    0,    0,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,    0,    0,  249,
  250,  251,  252,  265,  259,  261,  260,  264,  599,  257,
  255,    0,  256,  266,  258,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  253,  263,  254,
    0,    0,    0,    0,    0,    0,  262,    0,    0,  259,
  261,    0,  264,  610,  257,  255,    0,  256,  266,  258,
    0,    0,    0,    0,    0,    0,    0,    0,  265,    0,
    0,  260,  253,  263,  254,  259,  261,    0,  264,    0,
  257,  255,    0,  256,  266,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  253,  263,
  254,  262,  120,  265,    0,  120,  260,    0,  120,  120,
  120,  120,  120,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  120,    0,  120,  120,    0,  265,
    0,  620,  260,    0,    0,    0,  262,    0,    0,    0,
  259,  261,    0,  264,    0,  257,  255,    0,  256,  266,
  258,    0,    0,    0,    0,    0,  120,    0,    0,  120,
    0,    0,  262,  253,  263,  254,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
  120,    0,    0,    0,  265,    0,    0,  260,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  262,    0,  249,
  250,  251,  252,    0,    0,    0,  726,  732,    0,  741,
    0,  720,  714,    0,  717,  747,  723,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  708,
  738,  711,    0,    0,    0,  232,  233,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  247,  248,    0,    0,  249,  250,  251,  252,    0,    0,
  744,    0,    0,  729,    0,    0,    0,    0,    0,    0,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,    0,    0,  249,
  250,  251,  252,  735,    0,    0,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,  248,    0,    0,  249,  250,  251,  252,    0,
    0,    0,    0,  120,  120,  120,  120,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
   74,    0,  120,  120,  120,  120,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,  248,    0,    0,
  249,  250,  251,  252,    0,    0,    0,  831,  837,    0,
  846,    0,  825,  819,    0,  822,  852,  828,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  813,  843,  816,    0,    0,    0,    0,  420,    0,    0,
    0,    0,    0,    0,    0,    0, 1299, 1305,    0, 1314,
    0, 1293, 1287,    0, 1290, 1320, 1296,    0,    0,    0,
    0,  849,    0,    0,  834,    0,    0,    0,    0, 1281,
 1311, 1284,    0,    0,    0,    0,    0,  645,  648,  651,
  654,  657,  660,  663,  666,  669,  672,  675,  678,  681,
  684,  687,  690,  693,  840,    0,  696,  699,  702,  705,
 1317, 1404, 1410, 1302, 1419,    0, 1398, 1392,    0, 1395,
 1425, 1401,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1386, 1416, 1389,    0,    0, 1509,
 1515,    0, 1524, 1308, 1503, 1497,    0, 1500, 1530, 1506,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1491, 1521, 1494, 1422, 1666, 1672, 1407, 1681,
    0, 1660, 1654,    0, 1657, 1687, 1663,    0,  380,    0,
    0,    0,    0,  385,    0,    0,  390,  395,  400, 1648,
 1678, 1651,    0, 1527,  405,  410, 1512,    0, 1413,    0,
    0,    0,    0,  415, 1771, 1777,    0, 1786,    0, 1765,
 1759,    0, 1762, 1792, 1768,    0,    0,    0,    0,    0,
 1684,    0,    0, 1669,    0,    0, 1518, 1753, 1783, 1756,
    0,    0,  423,  427,  431,  435,    0,  438,  438, 4411,
  442,    0,    0,    0,  548,    0,    0,  552,  556,  560,
    0,    0,    0, 1675,    0,  564,  568,    0, 1789,    0,
    0, 1774,    0,    0,  572,    0,    0,    0,  750,  753,
  756,  759,  762,  765,  768,  771,  774,  777,  780,  783,
  786,  789,  792,  795,  798,    0,    0,  801,  804,  807,
  810, 1780,    0,  230,  576,  579,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,    0, 1218, 1221, 1224,
 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254,
 1257, 1260, 1263, 1266,    0,  223, 1269, 1272, 1275, 1278,
  226,    0,    0,  226,  226,  226,    0,    0,    0,    0,
    0,  226,  226,    0,    0,    0,    0,    0,    0,    0,
  226,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 1344,
 1347, 1350, 1353, 1356, 1359, 1362, 1365, 1368, 1371,  230,
    0, 1374, 1377, 1380, 1383,    0,    0,  233,    0,    0,
 1428, 1431, 1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455,
 1458, 1461, 1464, 1467, 1470, 1473, 1476,    0,    0, 1479,
 1482, 1485, 1488,    0,    0,    0,    0, 1585, 1588, 1591,
 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621,
 1624, 1627, 1630, 1633,    0,    0, 1636, 1639, 1642, 1645,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1690, 1693, 1696, 1699, 1702,
 1705, 1708, 1711, 1714, 1717, 1720, 1723, 1726, 1729, 1732,
 1735, 1738,    0,    0, 1741, 1744, 1747, 1750, 1876, 1882,
    0, 1891,    0, 1870, 1864,    0, 1867, 1897, 1873,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1858, 1888, 1861, 1981, 1987,    0, 1996,    0, 1975,
 1969,    0, 1972, 2002, 1978,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1963, 1993, 1966,
    0,    0, 1894,    0,    0, 1879,    0,    0,    0, 2086,
 2092,    0, 2101,    0, 2080, 2074,    0, 2077, 2107, 2083,
    0,    0,    0,    0,    0,    0,    0,    0, 1999,    0,
    0, 1984, 2068, 2098, 2071, 1885,    0,    0,    0,    0,
    0,    0,    0,    0, 2191, 2197,    0, 2206,    0, 2185,
 2179,    0, 2182, 2212, 2188,    0,    0,    0,    0,    0,
    0, 1990,    0, 2104,    0,    0, 2089, 2173, 2203, 2176,
 2296, 2302,    0, 2311,    0, 2290, 2284,    0, 2287, 2317,
 2293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2278, 2308, 2281, 2095,    0, 2209,    0,
    0, 2194,    0,    0,    0, 2401, 2407,    0, 2416,    0,
 2395, 2389,    0, 2392, 2422, 2398,    0,    0,    0,    0,
    0,    0,    0,    0, 2314,    0,    0, 2299, 2383, 2413,
 2386, 2200,    0, 4411,    0,    0,    0,    0,  548,    0,
    0,  552,  556,  560,    0,    0,    0,    0,    0,  564,
  568,    0,    0,    0,    0,    0,    0, 2305,  572, 2419,
    0,    0, 2404,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  230,  576,  579,
    0,    0, 2410,    0,    0,  233,    0,    0,    0, 1795,
 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825,
 1828, 1831, 1834, 1837, 1840, 1843,    0,    0, 1846, 1849,
 1852, 1855,    0,    0,    0, 1900, 1903, 1906, 1909, 1912,
 1915, 1918, 1921, 1924, 1927, 1930, 1933, 1936, 1939, 1942,
 1945, 1948,    0,    0, 1951, 1954, 1957, 1960,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2005, 2008, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032,
 2035, 2038, 2041, 2044, 2047, 2050, 2053,    0,    0, 2056,
 2059, 2062, 2065,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2110, 2113, 2116, 2119, 2122,
 2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146, 2149, 2152,
 2155, 2158,    0,    0, 2161, 2164, 2167, 2170,    0,    0,
    0, 2215, 2218, 2221, 2224, 2227, 2230, 2233, 2236, 2239,
 2242, 2245, 2248, 2251, 2254, 2257, 2260, 2263,    0,    0,
 2266, 2269, 2272, 2275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2320, 2323, 2326, 2329,
 2332, 2335, 2338, 2341, 2344, 2347, 2350, 2353, 2356, 2359,
 2362, 2365, 2368,    0,    0, 2371, 2374, 2377, 2380, 2650,
 2656,    0, 2665,    0, 2644, 2638,    0, 2641, 2671, 2647,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2632, 2662, 2635, 2755, 2761,    0, 2770,    0,
 2749, 2743,    0, 2746, 2776, 2752,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2737, 2767,
 2740,    0,    0, 2668,    0,    0, 2653,    0,    0,    0,
 2932, 2938,    0, 2947,    0, 2926, 2920,    0, 2923, 2953,
 2929,    0,    0,    0,    0,    0,    0,    0,    0, 2773,
    0,    0, 2758, 2914, 2944, 2917, 2659,    0,    0,    0,
    0,    0,    0,    0,    0, 3037, 3043,    0, 3052,    0,
 3031, 3025,    0, 3028, 3058, 3034,    0,    0,    0,    0,
    0,    0, 2764,    0, 2950,    0,    0, 2935, 3019, 3049,
 3022, 3142, 3148,    0, 3157,    0, 3136, 3130,    0, 3133,
 3163, 3139,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3124, 3154, 3127, 2941,    0, 3055,
    0,    0, 3040,    0,    0,    0, 3247, 3253,    0, 3262,
    0, 3241, 3235,    0, 3238, 3268, 3244,    0,    0,    0,
    0,    0,    0,    0,    0, 3160,    0,    0, 3145, 3229,
 3259, 3232, 3046,    0, 4411,    0,    0,    0,    0,  548,
    0,    0,  552,  556,  560,    0,    0,    0,    0,    0,
  564,  568,    0,    0,    0,    0,    0,    0, 3151,  572,
 3265,    0,    0, 3250,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  230,  576,
  579,    0,    0, 3256,    0,    0,  233,    0,    0,    0,
 2569, 2572, 2575, 2578, 2581, 2584, 2587, 2590, 2593, 2596,
 2599, 2602, 2605, 2608, 2611, 2614, 2617,    0,    0, 2620,
 2623, 2626, 2629,    0,    0,    0, 2674, 2677, 2680, 2683,
 2686, 2689, 2692, 2695, 2698, 2701, 2704, 2707, 2710, 2713,
 2716, 2719, 2722,    0,    0, 2725, 2728, 2731, 2734,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2851, 2854, 2857, 2860, 2863, 2866, 2869, 2872, 2875,
 2878, 2881, 2884, 2887, 2890, 2893, 2896, 2899,    0,    0,
 2902, 2905, 2908, 2911,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2956, 2959, 2962, 2965,
 2968, 2971, 2974, 2977, 2980, 2983, 2986, 2989, 2992, 2995,
 2998, 3001, 3004,    0,    0, 3007, 3010, 3013, 3016,    0,
    0,    0, 3061, 3064, 3067, 3070, 3073, 3076, 3079, 3082,
 3085, 3088, 3091, 3094, 3097, 3100, 3103, 3106, 3109,    0,
    0, 3112, 3115, 3118, 3121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3166, 3169, 3172,
 3175, 3178, 3181, 3184, 3187, 3190, 3193, 3196, 3199, 3202,
 3205, 3208, 3211, 3214,    0,    0, 3217, 3220, 3223, 3226,
 3424, 3430,    0, 3439,    0, 3418, 3412,    0, 3415, 3445,
 3421,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3406, 3436, 3409, 3529, 3535,    0, 3544,
    0, 3523, 3517,    0, 3520, 3550, 3526,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3511,
 3541, 3514,    0,    0, 3442,    0,    0, 3427,    0,    0,
    0, 3634, 3640,    0, 3649,    0, 3628, 3622,    0, 3625,
 3655, 3631,    0,    0,    0,    0,    0,    0,    0,    0,
 3547,    0,    0, 3532, 3616, 3646, 3619, 3433,    0,    0,
    0,    0,    0,    0,    0,    0, 4099, 4105,    0, 4114,
    0, 4093, 4087,    0, 4090, 4120, 4096,    0,    0,    0,
    0,    0,    0, 3538,    0, 3652,    0,    0, 3637, 4081,
 4111, 4084, 4496, 4502,    0, 4511,    0, 4490, 4484,    0,
 4487, 4517, 4493,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4478, 4508, 4481, 3643,    0,
 4117,    0,    0, 4102,    0,    0,    0, 4601, 4607,    0,
 4616,    0, 4595, 4589,    0, 4592, 4622, 4598,    0,    0,
    0,    0,    0,    0,    0,    0, 4514,    0,    0, 4499,
 4583, 4613, 4586, 4108,    0,    0,    0,    0,    0,  259,
  261,    0,  264,    0,  257,  255,    0,  256,  266,  258,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4505,
    0, 4619,  253,  263, 4604,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  990,    0,  993,    0,    0,
    0,    0,    0,  265, 4610,    0,  260,    0,    0,    0,
    0, 3343, 3346, 3349, 3352, 3355, 3358, 3361, 3364, 3367,
 3370, 3373, 3376, 3379, 3382, 3385, 3388, 3391,    0,  996,
 3394, 3397, 3400, 3403,    0,    0,  262, 3448, 3451, 3454,
 3457, 3460, 3463, 3466, 3469, 3472, 3475, 3478, 3481, 3484,
 3487, 3490, 3493, 3496,    0,    0, 3499, 3502, 3505, 3508,
    0, 1062,    0, 1065,    0,    0,    0,    0,    0,    0,
    0,    0, 3553, 3556, 3559, 3562, 3565, 3568, 3571, 3574,
 3577, 3580, 3583, 3586, 3589, 3592, 3595, 3598, 3601,    0,
    0, 3604, 3607, 3610, 3613, 1068, 1137,    0, 1140,    0,
    0,    0,    0,    0,    0,    0,    0, 4018, 4021, 4024,
 4027, 4030, 4033, 4036, 4039, 4042, 4045, 4048, 4051, 4054,
 4057, 4060, 4063, 4066,    0,    0, 4069, 4072, 4075, 4078,
 1143,    0,    0, 4415, 4418, 4421, 4424, 4427, 4430, 4433,
 4436, 4439, 4442, 4445, 4448, 4451, 4454, 4457, 4460, 4463,
    0,    0, 4466, 4469, 4472, 4475,    0, 1209,    0, 1212,
    0,    0,    0,    0,    0,    0,    0,    0, 4520, 4523,
 4526, 4529, 4532, 4535, 4538, 4541, 4544, 4547, 4550, 4553,
 4556, 4559, 4562, 4565, 4568,    0,    0, 4571, 4574, 4577,
 4580, 1215,    0,    0,    0,    0,    0,    0,    0,    0,
  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,    0,    0,  249,
  250,  251,  252,  927,  930,  933,  936,  939,  942,  945,
  948,  951,  954,  957,  960,  963,  966,  969,  972,  975,
    0,    0,  978,  981,  984,  987, 2488,    0, 2491,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2560,    0, 2563,    0,    0,    0,    0,    0,
 2494,    0,    0,    0,    0,    0,    0,    0,    0,  999,
 1002, 1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029,
 1032, 1035, 1038, 1041, 1044, 1047, 2566,    0, 1050, 1053,
 1056, 1059,    0, 2842,    0, 2845,    0,    0,    0,    0,
    0,    0,    0,    0, 1074, 1077, 1080, 1083, 1086, 1089,
 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119,
 1122,    0,    0, 1125, 1128, 1131, 1134, 2848, 3334,    0,
 3337,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3721,    0, 3724,    0,    0,    0,
    0,    0, 3340,    0,    0, 1146, 1149, 1152, 1155, 1158,
 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188,
 1191, 1194,    0,    0, 1197, 1200, 1203, 1206, 3727, 3793,
    0, 3796,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3865,    0, 3868,    0,    0,    0,    0,    0,
    0,    0,    0, 3799,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3937,    0, 3940,
    0,    0,    0,    0,    0,    0, 3871,    0,    0,    0,
    0,    0,    0,    0, 2425, 2428, 2431, 2434, 2437, 2440,
 2443, 2446, 2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470,
 2473, 3943,    0, 2476, 2479, 2482, 2485, 4009,    0, 4012,
 2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2524,
 2527, 2530, 2533, 2536, 2539, 2542, 2545,    0,    0, 2548,
 2551, 2554, 2557,    0, 4186,    0, 4189,    0,    0,    0,
    0, 4015,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2779, 2782, 2785, 2788, 2791, 2794, 2797, 2800, 2803,
 2806, 2809, 2812, 2815, 2818, 2821, 2824, 2827, 4192,    0,
 2830, 2833, 2836, 2839,    0, 4258,    0, 4261,    0,    0,
    0,    0,    0,    0,    0,    0, 3271, 3274, 3277, 3280,
 3283, 3286, 3289, 3292, 3295, 3298, 3301, 3304, 3307, 3310,
 3313, 3316, 3319,    0,    0, 3322, 3325, 3328, 3331, 4264,
    0,    0, 3658, 3661, 3664, 3667, 3670, 3673, 3676, 3679,
 3682, 3685, 3688, 3691, 3694, 3697, 3700, 3703, 3706,    0,
    0, 3709, 3712, 3715, 3718,    0,    0,    0,    0,    0,
  179,    0,  179,  179,  179,    0,  179, 3730, 3733, 3736,
 3739, 3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766,
 3769, 3772, 3775, 3778,  179,    0, 3781, 3784, 3787, 3790,
 3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829,
 3832, 3835, 3838, 3841, 3844, 3847, 3850,    0,    0, 3853,
 3856, 3859, 3862,  179,    0, 3874, 3877, 3880, 3883, 3886,
 3889, 3892, 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916,
 3919, 3922,    0,    0, 3925, 3928, 3931, 3934, 4330,    0,
 4333,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3946, 3949, 3952, 3955, 3958,
 3961, 3964, 3967, 3970, 3973, 3976, 3979, 3982, 3985, 3988,
 3991, 3994, 4336,    0, 3997, 4000, 4003, 4006, 4402,    0,
 4405,    0, 4123, 4126, 4129, 4132, 4135, 4138, 4141, 4144,
 4147, 4150, 4153, 4156, 4159, 4162, 4165, 4168, 4171,    0,
    0, 4174, 4177, 4180, 4183,  420,    0,    0,    0,    0,
    0,    0, 4408,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4195, 4198, 4201, 4204, 4207, 4210, 4213,
 4216, 4219, 4222, 4225, 4228, 4231, 4234, 4237, 4240, 4243,
    0,    0, 4246, 4249, 4252, 4255, 4411,    0,    0,    0,
    0,  548,    0,    0,  552,  556,  560,    0,    0,    0,
    0,    0,  564,  568,    0,    0,    0,    0,    0,    0,
    0,  572,    0,    0,    0,    0,    0,    0,    0,  179,
    0,    0,    0,    0,  179,    0,    0,  179,  179,  179,
    0,    0,    0,  420,    0,  179,  179,    0,    0,    0,
  230,  576,  579,    0,  179,    0,  420,    0,  233,  179,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  420,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  380,    0,    0,    0,
    0,  385,    0,    0,  390,  395,  400,    0,    0,    0,
    0,    0,  405,  410,    0,    0,    0,    0,    0,    0,
    0,  415,    0,    0,    0,    0, 4267, 4270, 4273, 4276,
 4279, 4282, 4285, 4288, 4291, 4294, 4297, 4300, 4303, 4306,
 4309, 4312, 4315,  420,    0, 4318, 4321, 4324, 4327,    0,
  423,  427,  431,  435,    0,  438,  438,  420,  442,    0,
    0,    0,    0,    0,    0,    0, 4339, 4342, 4345, 4348,
 4351, 4354, 4357, 4360, 4363, 4366, 4369, 4372, 4375, 4378,
 4381, 4384, 4387,    0,  380, 4390, 4393, 4396, 4399,  385,
    0,    0,  390,  395,  400,    0,    0,  380,    0,    0,
  405,  410,  385,    0,    0,  390,  395,  400,    0,  415,
  380,    0,    0,  405,  410,  385,    0,    0,  390,  395,
  400,  420,  415,    0,    0,    0,  405,  410,    0,    0,
    0,    0,    0,    0,  420,  415,    0,    0,  423,  427,
  431,  435,    0,  438,  438,    0,  442,  420,    0,    0,
    0,  423,  427,  431,  435,    0,  438,  438,    0,  442,
    0,    0,    0,    0,  423,  427,  431,  435,    0,  438,
  438,    0,  442,    0,  380,    0,    0,    0,    0,  385,
    0,    0,  390,  395,  400,    0,    0,    0,  380,    0,
  405,  410,    0,  385,    0,    0,  390,  395,  400,  415,
    0,    0,    0,    0,  405,  410,    0,    0,  420,    0,
    0,    0,    0,  415,    0,    0,    0,    0,    0,    0,
    0,  420,    0,    0,    0,    0,    0,    0,  423,  427,
  431,  435,    0,  438,  438,  420,  442,    0,    0,    0,
    0,    0,  423,  427,  431,  435,    0,  438,  438,    0,
  442,    0,  380,    0,    0,    0,    0,  385,    0,    0,
  390,  395,  400,    0,    0,  380,    0,    0,  405,  410,
  385,    0,    0,  390,  395,  400,    0,  415,  380,    0,
    0,  405,  410,  385,    0,    0,  390,  395,  400,    0,
  415,    0,    0,  420,  405,  410,    0,    0,    0,    0,
    0,    0,    0,  415,    0,    0,  423,  427,  431,  435,
    0,  438,  438,    0,  442,  420,    0,    0,    0,  423,
  427,  431,  435,    0,  438,  438,    0,  442,    0,  420,
    0,    0,  423,  427,  431,  435,    0,  438,  438,  380,
  442,    0,    0,    0,  385,    0,    0,  390,  395,  400,
    0,    0,  380,    0,    0,  405,  410,  385,    0,    0,
  390,  395,  400,    0,  415,    0,  380,    0,  405,  410,
    0,  385,    0,    0,  390,  395,  400,  415,    0,    0,
    0,    0,  405,  410,    0,    0,    0,    0,    0,    0,
    0,  415,    0,  423,  427,  431,  435,    0,  438,  438,
    0,  442,    0,    0,    0,    0,  423,  427,  431,  435,
    0,  438,  438,    0,  442,    0,    0,    0,    0,    0,
  423,  427,  431,  435,  380,  438,  438,    0,  442,  385,
    0,    0,  390,  395,  400,    0,    0,    0,    0,    0,
  405,  410,    0,    0,    0,    0,  380,    0,    0,  415,
    0,  385,    0,    0,  390,  395,  400,    0,    0,    0,
  380,    0,  405,  410,    0,  385,    0,    0,  390,  395,
  400,  415,    0,    0,    0,    0,  405,  410,  423,  427,
  431,  435,    0,  438,  438,  415,  442,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  423,  427,  431,  435,    0,  438,  438,    0,  442,    0,
    0,    0,    0,    0,  423,  427,  431,  435,    0,  438,
  438,    0,  442,
};
static int yycheck[] = {                                      40,
    0,    1,    1,   31,  102,   89,    6,   60,    8,    9,
   10,   38,   60,  450,    5,   15,   16,   59,   38,   47,
  347,   38,   42,  427,  108,   42,   91,    5,   44,  126,
   44,  125,  123,  117,   44,   41,  126,    5,   44,   61,
   44,   41,   60,   60,   41,   59,   44,   44,   38,    0,
   40,   44,   42,   59,   38,   45,   56,   60,   42,   41,
   58,   40,   90,  481,   44,   65,  484,   46,   41,   69,
  273,   44,   59,   40,  102,   59,   60,   41,  106,  282,
   44,  123,   40,   65,   38,  489,   40,   93,   88,   89,
   60,   69,   46,  121,  122,  123,  124,  515,   98,   99,
  100,  101,  102,  102,   59,   40,   44,  577,  108,  125,
   88,  102,   91,   91,   59,  125,   44,  117,  555,  125,
  120,  125,   33,   60,  102,  123,  273,   38,  125,   40,
   44,   42,  125,   91,   45,  282,  123,   91,  514,  257,
  544,  257,   60,  123,   60,   37,   38,  265,   60,   41,
   42,   43,   44,   45,   46,   47,  483,  273,  576,   44,
  257,  125,  632,   44,   59,   60,  282,   59,  123,   61,
  124,  199,  268,  269,  202,   91,   60,  595,  123,   91,
   91,  275,  276,  277,   41,  123,  562,   44,  120,   44,
  190,   60,   60,  611,   44,  123,  224,   59,   60,   60,
  200,   93,   59,  203,   59,  205,  206,   41,   44,  123,
   44,  202,  123,  631,  262,  126,  257,  265,  266,  267,
  198,   59,   60,  311,  202,   59,  274,   61,  123,  282,
  257,  319,  124,  125,  258,   60,   93,   60,  123,  207,
  257,  209,  123,   60,  212,  262,  311,  257,  265,  266,
  267,  257,  230,  231,  319,  273,  280,  274,  190,   60,
  288,  271,  272,  311,  282,  271,  272,  257,  125,  269,
  273,  319,   41,  123,  274,   44,   44,  277,  262,  282,
  280,  265,  266,  267,  126,  305,   60,  123,  305,  311,
  274,   59,  292,  315,  311,  312,  313,  314,  298,  316,
  317,   41,  319,  273,   44,  305,   60,   40,  308,   38,
  320,  279,  282,   42,  320,   59,  316,  307,  308,   59,
   44,  305,   59,  421,  275,  276,  277,  311,  312,  313,
  314,   60,  316,  317,  316,  319,  273,  269,   62,   59,
  340,  314,  274,  316,  317,  282,  257,  258,  259,  260,
  434,  262,  311,   93,  265,  266,  267,  273,  340,   47,
  319,  273,  273,  274,   41,  257,  282,   44,  346,  369,
  282,  282,  283,  284,  285,  286,  287,   59,  273,  271,
  272,   69,   59,  481,   61,  125,  484,  282,   44,  273,
  368,   59,   60,  421,  257,  311,  307,  308,  282,  311,
  257,   58,   59,  319,  273,  405,   62,  319,  408,  409,
  273,  273,   60,  282,  271,  272,   59,  515,  106,  282,
  282,  421,  421,  405,  335,  336,  337,  409,  320,  429,
  421,  361,  362,   33,  434,  273,  257,   44,   38,  417,
   40,   40,   42,  421,  282,   45,  414,   41,  273,  449,
  273,  451,  273,  481,   59,  123,  484,  282,  257,  282,
   58,  282,   44,  320,  123,   59,  123,  449,   44,  451,
  312,  313,  314,  473,  316,  317,  408,   59,  576,   61,
  458,  481,  481,  413,  484,  484,  311,  515,   58,   59,
  481,  473,  273,  484,  319,  273,   41,  595,   38,  273,
   40,  282,   42,  481,  282,   93,  484,  507,  282,   41,
  510,   41,   44,  611,  311,  515,  515,  257,  125,  273,
   60,  257,  319,  123,  515,  125,  311,   59,  282,  529,
  257,  271,  272,  631,  319,  271,  272,  515,  264,   24,
   25,   26,   27,   28,   29,   30,   31,   41,  576,  125,
   44,  257,  520,  521,  554,  257,  556,   42,   43,   44,
   45,   93,   40,   41,  532,  565,  566,  595,   38,  264,
  570,  571,  554,  257,  556,  507,  576,  576,  510,   41,
  320,  257,   44,  611,  320,  576,  264,  463,  464,   41,
  331,   41,   44,  125,   44,  595,  595,   59,  576,   61,
   93,  601,  478,  631,  595,  273,  606,   59,   40,  609,
   44,  611,  611,  314,  282,  316,  317,  595,   41,  601,
  611,   44,  622,  623,  257,  625,  257,  609,   33,  597,
  598,  631,  631,  611,  602,  257,  636,   58,  638,  571,
  631,  623,   41,  643,   58,   44,   58,  647,  648,  649,
  257,   40,  620,  631,  636,  257,  638,   61,  258,  259,
  260,  261,  257,  263,  271,  272,  648,  649,  268,  269,
   41,  271,  272,   44,  606,  275,  276,  277,  278,  164,
   42,  257,  257,  283,  284,  285,  286,  287,  257,   41,
  622,  125,   44,  625,   61,  271,  272,   38,  275,  276,
  277,   42,  187,  188,  189,  190,   41,  307,  308,   44,
   41,  643,   40,  320,   41,  647,   62,   44,  123,   60,
  320,  126,   62,  208,  324,  257,  257,  258,  259,  260,
  330,  331,  332,  273,   40,  335,  336,  337,  430,  271,
  272,   62,  282,   41,  320,   62,   44,  232,  233,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  264,  305,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,   59,   42,  430,  257,   41,  257,  320,   44,
   40,    0,  262,   40,   62,  265,  266,  267,  257,  491,
  257,   40,  494,  273,  274,   58,  257,   40,   40,   38,
   37,   38,  282,   44,   41,   42,   43,   44,   45,   46,
   47,   41,   41,  257,   33,   44,   40,   42,   40,   38,
   40,   40,   59,   42,   61,   40,   45,  271,  272,  324,
   59,  311,   61,   40,  331,  491,   41,   40,  494,  319,
  542,   42,   40,  258,  259,  260,   41,  262,  343,  344,
  265,  266,  267,   40,   38,  257,   93,   61,  273,  274,
    0,   61,   59,  358,   40,   59,  257,  282,  283,  284,
  285,  286,  287,  312,  313,  314,  320,  316,  317,  581,
   37,   38,   42,   40,  125,   42,  542,  124,  125,   46,
   47,  257,  257,   33,   40,   59,   41,  260,   38,   41,
   40,   40,   42,   58,  123,   45,  125,  126,  312,  313,
  314,  262,  316,  317,  265,  266,  267,  123,   59,  257,
  335,  336,  337,  274,  262,  581,   41,  265,  266,  267,
   40,   40,   44,   41,   91,  273,  274,   44,   59,   40,
  435,  312,  313,  314,  282,  316,  317,   59,   60,   41,
  260,  123,  123,    0,  305,  450,  123,   59,  453,   59,
  311,  312,  313,  314,   42,  316,  317,  124,  319,  257,
   44,   41,   41,  311,  312,  313,  471,  257,  257,   60,
   40,  319,   33,  123,  479,  125,  126,   38,  257,   40,
  257,   42,  273,  262,   45,  257,  265,  266,  267,  257,
  273,  257,  257,  257,  273,  274,   62,  502,  503,  504,
  505,  123,  507,  282,  421,  510,  257,  494,  125,   69,
  257,  324,  325,  326,  327,  328,  329,   69,  434,  524,
  271,  272,   69,   69,  271,  272,   69,   49,  257,  258,
  259,  260,  261,  262,  263,  621,  265,  266,  267,  268,
  269,  546,  271,  272,  273,  274,  275,  276,  277,  278,
  555,   -1,  557,  282,  283,  284,  285,  286,  287,   33,
   -1,  530,  123,  264,   38,  126,   40,  572,   42,  320,
   -1,   45,   -1,  320,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,
   -1,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
  625,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,   -1,
  257,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,
   42,  273,  126,   45,  271,  272,   -1,  307,  308,   -1,
  282,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,  262,   -1,  324,  265,  266,  267,   -1,   -1,
  330,  331,  332,  273,  274,  335,  336,  337,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,  320,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,  123,   42,   -1,  126,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,
  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,  123,   42,   -1,  126,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,   -1,
  126,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,  123,   42,   -1,  126,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   33,   -1,   -1,   -1,  123,   38,  125,   40,   -1,
   42,  262,   -1,   45,  265,  266,  267,   -1,   -1,   -1,
  307,  308,  273,  274,  311,  312,  313,  314,   -1,  316,
  317,  282,  319,  320,   -1,   -1,  287,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,   -1,   41,  278,   43,
   44,   45,  282,  283,  284,  285,  286,  287,   -1,   33,
   -1,  123,   -1,  125,   38,   59,   40,   61,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   93,
  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   40,   41,
  268,  269,   44,  271,  272,   -1,   -1,  275,  276,  277,
  278,  125,   -1,   -1,   -1,  283,  284,  285,  286,  287,
   62,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,
   42,  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,
   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,  337,
   -1,  287,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,  281,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
   -1,  123,   38,  125,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,  321,  322,
  323,  324,  325,  326,  327,  328,  329,   -1,  320,   -1,
   -1,   -1,  324,  257,   -1,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   38,   -1,  268,  269,   42,  271,  272,   -1,
   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,  287,   -1,   33,   -1,  123,   -1,  125,
   38,   -1,   40,   -1,   42,   -1,  320,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,  320,   -1,   -1,   -1,
  324,  273,  274,   -1,   -1,   -1,  330,  331,  332,   -1,
  282,  335,  336,  337,   -1,  287,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,  123,   42,  125,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,
  270,   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,
  332,   -1,  282,  335,  336,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
  126,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,   -1,  123,   38,  125,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,  311,  312,  313,  314,   -1,  316,
  317,  257,  319,   -1,  320,   -1,  262,   -1,  324,  265,
  266,  267,   -1,   -1,  330,  331,  332,  273,  274,  335,
  336,  337,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,
   -1,   33,   -1,  123,   -1,  125,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,
   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,  337,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,  123,   42,  125,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,  320,   -1,   -1,   -1,  324,  273,
  274,   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,
  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,   33,
   -1,   -1,   -1,  123,   38,  125,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
  320,   -1,   -1,   -1,  324,  273,  274,   -1,   -1,   -1,
  330,  331,  332,   -1,  282,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,  123,
   -1,  125,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,
  332,   61,   -1,  335,  336,  337,   -1,   -1,  258,  259,
  260,  261,   -1,  263,   38,   -1,   40,   41,  268,  269,
   44,  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,
   -1,   91,   -1,  283,  284,  285,  286,  287,   62,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,  125,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   91,   -1,   -1,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,
   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,  123,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   59,
   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,   93,   -1,   -1,   -1,  283,  284,  285,
  286,  287,   33,   -1,   -1,  123,   -1,   38,   -1,   40,
  257,   42,   -1,   -1,   45,  262,   -1,   -1,  265,  266,
  267,  307,  308,  257,   -1,  125,  273,  274,  262,   -1,
   -1,  265,  266,  267,  320,  282,   -1,   -1,  324,  273,
  274,   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,
  336,  337,   -1,  287,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,
   -1,  275,  276,  277,  278,   -1,   -1,  311,   -1,  283,
  284,  285,  286,  287,   33,  319,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,   -1,   -1,   45,   41,   -1,   43,
   44,   45,   -1,  307,  308,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   59,  320,   61,  262,   -1,
  324,  265,  266,  267,   -1,   -1,  330,  331,  332,  273,
  274,  335,  336,  337,   -1,   -1,   -1,   -1,  282,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   93,
  268,  269,   -1,  271,  272,   -1,   -1,  257,   -1,   -1,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,
   33,  271,  272,   -1,  123,   38,   -1,   40,  257,   42,
   -1,  125,   45,  262,   -1,   -1,  265,  266,  267,  307,
  308,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,  320,  282,   -1,   -1,  324,  273,  274,   -1,
   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,  337,
  320,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   41,   -1,   -1,   44,  268,  269,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   59,  283,  284,  285,  286,  287,   33,   -1,   -1,
  123,   -1,   38,   -1,   40,   41,   42,   -1,   -1,   45,
  257,   -1,   -1,   -1,   -1,  262,  307,  308,  265,  266,
  267,   -1,   -1,   -1,   -1,   93,  273,  274,   -1,  320,
   -1,   -1,   -1,  324,   -1,  282,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,  258,
  259,  260,  261,  257,  263,   -1,   -1,  125,   -1,  268,
  269,   -1,  271,  272,  311,  312,  313,  271,  272,  278,
   -1,   -1,  319,   -1,  283,  284,  285,  286,  287,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,   -1,
  126,   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,  320,   -1,   -1,   -1,  324,  320,   -1,   -1,   -1,
   -1,  330,  331,  332,   59,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   93,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   93,   -1,
  283,  284,  285,  286,  287,   -1,   -1,   -1,   33,  123,
   -1,   -1,  126,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,  307,  308,   -1,   -1,   -1,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,  271,  272,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,  262,   -1,   93,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,  320,   -1,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,  307,  308,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   33,   -1,  273,  274,
   -1,   38,   -1,   40,   -1,   42,   -1,  282,   45,  335,
  336,  337,   -1,  257,  258,  259,  260,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   93,   -1,   -1,   -1,  273,
  274,   -1,  257,   -1,   -1,   -1,  311,   -1,  282,  283,
  284,  285,  286,  287,  319,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   33,   -1,  307,  308,   -1,   38,   -1,   40,   -1,
   42,  257,   -1,   45,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,  123,  273,  274,  126,
   -1,  335,  336,  337,   -1,  320,  282,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   41,  273,  274,
   44,   -1,   -1,   -1,   -1,  311,   -1,  282,  283,  284,
  285,  286,  287,  319,   33,   59,   -1,   -1,   -1,   38,
  257,   40,   -1,   42,   -1,  262,   45,   -1,  265,  266,
  267,  123,  307,  308,  126,   -1,  273,  274,   -1,   -1,
   41,   -1,   -1,   44,   -1,  282,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,  125,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   93,   -1,  282,  283,  284,  285,  286,  287,
  257,  258,  259,  260,  123,  262,   -1,  126,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  307,
  308,   -1,   -1,   -1,  125,  282,  283,  284,  285,  286,
  287,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,  335,  336,  337,
  307,  308,   -1,   59,   -1,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,  335,  336,
  337,  273,  274,   -1,   -1,   91,   -1,   93,   94,   -1,
  282,  283,  284,  285,  286,  287,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,  257,   -1,  307,  308,  123,  124,  125,
   59,  257,   61,   62,   -1,   -1,  262,  271,  272,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  258,
  259,  260,   -1,  335,  336,  337,  282,   -1,   -1,   -1,
   -1,   -1,   91,   37,   93,   94,  257,   41,   42,   43,
   44,   45,   -1,   47,  283,  284,  285,  286,  287,   -1,
  271,  272,   -1,   -1,   -1,   59,  320,   61,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,   -1,  307,  308,
  262,   -1,  311,  265,  266,  267,   -1,   -1,   -1,   -1,
  319,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   93,
  282,   -1,   -1,   -1,   -1,   -1,  335,  336,  337,  320,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,
   -1,  125,   59,   -1,   61,   62,   -1,  319,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   -1,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
   -1,  307,  308,  309,  310,  311,  123,  124,  125,   -1,
   -1,   -1,   -1,  319,  320,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   41,  262,   -1,   44,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  311,  257,   93,   -1,   -1,   -1,   -1,   -1,
  319,  320,   -1,   -1,   -1,   -1,  257,  271,  272,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,  125,   -1,   -1,   37,
   38,  282,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   62,   -1,  320,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,   -1,
  307,  308,  309,  310,  311,  123,  124,  125,   -1,   -1,
   -1,   -1,  319,  320,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,  271,  272,   -1,   -1,  273,  274,   91,   -1,
   93,   94,   -1,   37,   38,  282,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,   -1,
  123,  124,  125,   -1,  311,  312,  313,   -1,  257,   -1,
   -1,  320,  319,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,  257,   91,   -1,   93,
   94,  262,   -1,  282,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,   -1,  271,  272,   -1,  274,   -1,   -1,  123,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,   -1,  307,
  308,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  319,  320,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   59,  262,   61,   62,  265,
  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,  271,  272,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,  308,  309,  310,  311,  123,
  124,  125,   -1,  257,   -1,   -1,  319,  320,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,  320,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   59,
   60,   61,   62,   -1,  273,  274,   -1,  257,   -1,   -1,
   -1,  126,  262,  282,   -1,  265,  266,  267,   -1,   -1,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,   91,  282,   93,   94,   -1,  273,  274,   -1,   -1,
   -1,   -1,  311,  257,   -1,  282,   -1,   -1,  262,   -1,
  319,  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,
  274,  311,   -1,  123,  124,  125,   -1,   -1,   -1,  319,
   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,  320,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   91,   -1,   93,   94,   37,   38,  282,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   62,   -1,   -1,  123,  124,  125,  311,  312,  313,  314,
  257,  316,  317,   -1,  319,  262,   -1,   -1,  265,  266,
  267,  271,  272,   -1,   -1,   -1,  273,  274,   -1,   91,
   -1,   93,   94,   -1,   -1,  282,   -1,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  311,  124,  125,  311,  312,  313,   37,   -1,  319,
  320,   41,  319,   43,   44,   -1,   46,   47,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,  271,  272,   -1,  124,  125,   -1,   -1,   59,   -1,
   61,   -1,   -1,   -1,   -1,  124,  125,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  311,   93,   -1,   -1,  257,   -1,   37,   38,  319,
  320,   41,   42,   43,   44,   45,   46,   47,   -1,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   61,   -1,  124,  125,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,   93,   -1,   37,   38,   -1,  320,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,  257,  124,  125,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,  257,  273,
  274,  271,  272,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   93,  271,  272,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  311,   -1,  309,
  310,   -1,  124,  125,   -1,  319,   -1,   -1,   -1,   -1,
  320,   -1,   -1,   -1,   -1,   -1,  257,   41,   37,   38,
   44,  320,   41,   42,   43,   44,   45,   46,   47,   -1,
  271,  272,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,
   59,   -1,   61,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   59,   -1,   61,   -1,   93,
   -1,   -1,   -1,   -1,   93,   -1,   59,  257,   61,  320,
   37,   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,
   47,  271,  272,   -1,   38,   -1,   40,   41,   42,   93,
   44,  125,   59,   -1,   61,  124,  125,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   37,   -1,   -1,   62,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,  257,   93,   59,   -1,   61,
  320,  124,  125,   -1,   -1,   -1,   -1,   91,   37,  271,
  272,   -1,   41,   42,   43,   44,   45,   37,   47,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,  125,   -1,
   59,   93,   61,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   61,   -1,   -1,   38,   -1,   40,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,
   -1,   -1,   -1,  125,   93,   -1,   -1,   -1,   62,   -1,
   -1,   -1,   -1,   93,   41,   -1,   -1,   44,   37,   38,
   -1,   -1,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   59,  257,   -1,   -1,  125,   91,  257,   -1,
   59,   60,   61,   62,   -1,  125,   -1,  271,  272,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   91,   -1,  257,   94,   -1,  271,  272,   -1,
   -1,   -1,   40,   41,   -1,   -1,   44,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,  320,   -1,  125,   -1,
  257,  320,   -1,   -1,   62,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  271,  272,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,  320,   -1,   -1,   -1,
  274,   -1,   -1,   91,   -1,  257,   -1,  320,   40,   41,
   -1,   -1,   44,  287,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   62,  305,   41,  320,   -1,   44,   -1,  311,  257,   -1,
   59,   -1,   -1,   -1,   -1,  319,   -1,  257,   -1,   -1,
   59,   -1,  271,  272,   -1,  257,   -1,   -1,   -1,   91,
  262,  271,  272,  265,  266,  267,   -1,   -1,  320,   -1,
   -1,  273,  274,  257,   93,   -1,   -1,   -1,  262,   -1,
  282,  265,  266,  267,   93,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   42,   -1,   -1,   -1,   -1,  282,   -1,
  257,  320,   -1,  287,   -1,   41,  125,   -1,   44,  311,
  320,   -1,   -1,   -1,  271,  272,  125,  319,   41,   -1,
   -1,   44,   -1,   59,   -1,   -1,   -1,  311,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,   59,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   93,  307,  308,
  309,  310,   -1,  320,   -1,  314,   -1,  316,  317,  257,
   93,   -1,   41,   -1,  262,   44,   -1,  265,  266,  267,
   41,   -1,   -1,   44,   -1,  273,  274,   -1,   41,  125,
   59,   44,   41,   -1,  282,   44,   -1,   41,   59,  287,
   44,   -1,  125,   -1,   -1,   -1,   59,   -1,   41,   -1,
   59,   44,   -1,   -1,   -1,   59,   -1,   -1,   41,   -1,
   -1,   44,   -1,  311,   93,  257,   59,   -1,   -1,   -1,
  262,  319,   93,  265,  266,  267,   59,   -1,  257,   -1,
   93,  273,  274,   -1,   93,   -1,   -1,   -1,  257,   93,
  282,   -1,  271,  272,   -1,  287,  125,   -1,   -1,   -1,
   93,   -1,  271,  272,  125,   -1,   -1,   -1,   41,   -1,
   93,   44,  125,   -1,   -1,   41,  125,   41,   44,  311,
   44,  125,   -1,   -1,   -1,   41,   59,  319,   44,  257,
   -1,   -1,  125,   59,  262,   59,   -1,  265,  266,  267,
   -1,  320,  125,   59,   -1,  273,  274,   -1,   -1,   -1,
   -1,  320,   -1,  262,  282,   -1,  265,  266,  267,   -1,
   93,  257,   -1,   -1,  273,  274,   -1,   93,   -1,   93,
   -1,   -1,   -1,  282,  257,  271,  272,   93,  287,   -1,
   -1,   -1,   -1,  311,  312,  313,   -1,   -1,  271,  272,
   -1,  319,  125,   60,   -1,   62,   -1,   -1,   -1,  125,
   -1,  125,  311,  312,  313,  314,   -1,  316,  317,  125,
  319,   33,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   44,   45,  320,   47,   -1,   94,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  320,   60,   61,
   62,   -1,  271,  272,  257,   -1,   -1,   -1,  257,   -1,
  271,  272,   -1,  257,   -1,   -1,   -1,   -1,  271,  272,
   -1,  126,  271,  272,  257,   -1,   -1,  271,  272,   91,
   -1,   -1,   94,   -1,  257,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  320,
   -1,   -1,  124,   -1,  126,   -1,   -1,  320,   -1,   -1,
   -1,  320,   -1,   -1,   -1,   -1,  320,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  320,   -1,   -1,
   -1,  257,   -1,  257,   -1,   -1,   -1,  320,  271,  272,
   -1,  257,   -1,   -1,   -1,  271,  272,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,  271,  272,   37,   38,   -1,
   40,   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,  320,   -1,   -1,
   -1,   -1,  257,   -1,  320,   -1,  320,  262,   -1,   -1,
  265,  266,  267,   -1,  320,   -1,   -1,   -1,  273,  274,
   -1,   91,   -1,   -1,   94,   -1,   -1,  282,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,  125,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,   37,
   38,   -1,   -1,   -1,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   91,   37,   38,   94,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   91,   -1,   -1,   94,   -1,   -1,  124,  125,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,  282,  124,   60,   61,   62,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  124,   -1,   -1,   -1,   91,   37,   38,   94,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   60,
   61,   62,   -1,   -1,  273,  274,   -1,   -1,  124,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,  273,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,  282,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  124,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  124,   -1,  307,  308,  309,  310,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   93,   94,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,  124,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   91,   37,   38,   94,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,  124,   37,   91,   -1,   40,   94,   -1,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   62,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  124,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  124,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  124,   -1,  307,  308,  309,  310,
   91,   37,   38,   94,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   37,
   38,   -1,   40,  124,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   60,
   61,   62,   -1,   91,  273,  274,   94,   -1,  124,   -1,
   -1,   -1,   -1,  282,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,  124,   60,   61,   62,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,  257,
  319,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  124,   -1,  273,  274,   -1,   91,   -1,
   -1,   94,   -1,   -1,  282,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  124,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,  319,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,  257,  307,  308,  309,  310,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  311,
   -1,  307,  308,  309,  310,   -1,   -1,  319,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,  124,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,
   62,  124,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,  124,  282,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,  312,  313,
   -1,   -1,  124,   -1,   -1,  319,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,  124,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,  124,  282,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,  312,
  313,   -1,   -1,  124,   -1,   -1,  319,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   60,   61,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   91,  124,   -1,   94,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   94,
  307,  308,  309,  310,   -1,   -1,  124,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   94,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   94,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   94,   -1,  307,  308,
  309,  310,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   94,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   94,   -1,  307,  308,  309,  310,   60,   -1,   62,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   94,   -1,
  307,  308,  309,  310,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   94,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   -1,   44,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   62,   -1,  307,  308,  309,  310,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   91,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   94,   -1,  307,  308,  309,  310,   60,   -1,
   62,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  126,   -1,  273,  274,   -1,   -1,   -1,
  311,  312,  313,   -1,  282,   -1,  126,   -1,  319,  287,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  126,   -1,  307,  308,  309,  310,   -1,
  311,  312,  313,  314,   -1,  316,  317,  126,  319,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,  257,  307,  308,  309,  310,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,  257,   -1,   -1,
  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,  126,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,  126,  282,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  126,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  257,   -1,
  273,  274,   -1,  262,   -1,   -1,  265,  266,  267,  282,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,  126,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,  126,  319,   -1,   -1,   -1,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,   -1,   -1,  126,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  126,   -1,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,  126,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,  257,
  319,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,   -1,  257,   -1,  273,  274,
   -1,  262,   -1,   -1,  265,  266,  267,  282,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,   -1,   -1,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,
  311,  312,  313,  314,  257,  316,  317,   -1,  319,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,  257,   -1,   -1,  282,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,
  267,  282,   -1,   -1,   -1,   -1,  273,  274,  311,  312,
  313,  314,   -1,  316,  317,  282,  319,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,
   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,
};
static int yyctable[] = {                                      1,
    2,  169,  179,  246,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  169,
  179,  246,   -1,    7,    2,   -1,    8,    2,  169,  179,
  246,   -1,    9,    2,  169,  179,  246,   -1,   10,    2,
  169,  179,  246,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  169,  179,
  246,   -1,   16,    2,  169,  179,  246,   -1,   17,    2,
   -1,   18,    2,  169,  179,  246,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,  169,
   -1,   30,    2,   -1,   31,    2,   -1,   32,    2,  169,
  246,   -1,   33,    2,  169,  246,   -1,   34,    2,  169,
  246,   -1,   35,    2,  169,  246,   -1,    2,  169,  246,
   -1,   36,    2,  169,  246,   -1,   37,    2,   -1,   38,
    2,   -1,   39,    2,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   97,  179,  247,   -1,    6,  179,  247,
   -1,   98,  179,  247,   -1,   99,  179,  247,   -1,  100,
  179,  247,   -1,  101,   61,  179,  247,   -1,   16,  179,
  247,   -1,   18,   61,  179,  247,   -1,  102,   61,   -1,
   32,  247,   -1,   33,  247,   -1,   34,  247,   -1,   36,
  247,   -1,  105,  179,  246,   -1,  179,  246,   -1,   32,
  246,   -1,   36,  246,   -1,  109,   64,   -1,    6,   64,
   -1,   98,   64,   -1,   99,   64,   -1,  100,   64,   -1,
   15,   64,   -1,   16,   64,   -1,   18,   64,   -1,  109,
  232,   -1,    6,  232,   -1,   98,  232,   -1,   99,  232,
   -1,  100,  232,   -1,   15,  232,   -1,   16,  232,   -1,
   18,  232,   -1,  109,  233,   -1,    6,  233,   -1,   98,
  233,   -1,   99,  233,   -1,  100,  233,   -1,   15,  233,
   -1,   16,  233,   -1,   18,  233,   -1,  109,  234,   -1,
    6,  234,   -1,   98,  234,   -1,   99,  234,   -1,  100,
  234,   -1,   15,  234,   -1,   16,  234,   -1,   18,  234,
   -1,  109,   66,   -1,    6,   66,   -1,   98,   66,   -1,
   99,   66,   -1,  100,   66,   -1,   15,   66,   -1,   16,
   66,   -1,   18,   66,   -1,  109,  179,   -1,    6,  179,
   -1,   98,  179,   -1,   99,  179,   -1,  100,  179,   -1,
   15,  179,   -1,   16,  179,   -1,   18,  179,   -1,    1,
  169,  179,  246,   -1,    6,  169,  179,  246,   -1,    8,
  169,  179,  246,   -1,    9,  169,  179,  246,   -1,   10,
  169,  179,  246,   -1,   15,  169,  179,  246,   -1,   16,
  169,  179,  246,   -1,   18,  169,  179,  246,   -1,   29,
  169,   -1,   32,  169,  246,   -1,   33,  169,  246,   -1,
   34,  169,  246,   -1,   35,  169,  246,   -1,  169,  246,
   -1,   36,  169,  246,   -1,  109,  314,   -1,   24,  314,
   -1,   25,  314,   -1,   26,  314,   -1,   27,  314,   -1,
   28,  314,   -1,   31,  314,   -1,  169,  179,   -1,   32,
  169,   -1,   36,  169,   -1,  202,  120,   -1,   74,  120,
   -1,  223,  169,  246,   -1,    6,  169,  246,   -1,    8,
  169,  246,   -1,    9,  169,  246,   -1,   10,  169,  246,
   -1,   15,  169,  246,   -1,   16,  169,  246,   -1,   18,
  169,  246,   -1,  276,  246,   -1,    6,  246,   -1,   98,
  246,   -1,   99,  246,   -1,  100,  246,   -1,   15,  246,
   -1,   16,  246,   -1,   18,  246,   -1,  281,  246,   -1,
   61,  249,   -1,  291,  179,  246,   -1,    6,  179,  246,
   -1,   98,  179,  246,   -1,   99,  179,  246,   -1,  100,
  179,  246,   -1,   15,  179,  246,   -1,   16,  179,  246,
   -1,   18,  179,  246,   -1,   33,  246,   -1,   34,  246,
   -1,  298,   74,   -1,  201,   74,   -1,  300,  247,   -1,
  298,   65,   -1,  201,   65,   -1,  202,   65,   -1,  298,
   68,   -1,  201,   68,   -1,  202,   68,   -1,  298,   69,
   -1,  201,   69,   -1,  202,   69,   -1,  298,   70,   -1,
  201,   70,   -1,  202,   70,   -1,  298,   62,   -1,  201,
   62,   -1,  202,   62,   -1,  298,   67,   -1,  201,   67,
   -1,  202,   67,   -1,  232,  266,   -1,  233,  266,   -1,
  234,  266,   -1,  235,  266,   -1,  236,  266,   -1,  237,
  266,   -1,  238,  266,   -1,  239,  266,   -1,  240,  266,
   -1,  241,  266,   -1,  242,  266,   -1,  243,  266,   -1,
  244,  266,   -1,  245,  266,   -1,  246,  266,   -1,  247,
  266,   -1,  248,  266,   -1,  249,  266,   -1,  250,  266,
   -1,  251,  266,   -1,  252,  266,   -1,  253,  266,   -1,
  254,  266,   -1,  255,  266,   -1,  256,  266,   -1,  257,
  266,   -1,  258,  266,   -1,  259,  266,   -1,  260,  266,
   -1,  261,  266,   -1,  262,  266,   -1,  263,  266,   -1,
  264,  266,   -1,  265,  266,   -1,  266,  266,   -1,  232,
  268,   -1,  233,  268,   -1,  234,  268,   -1,  235,  268,
   -1,  236,  268,   -1,  237,  268,   -1,  238,  268,   -1,
  239,  268,   -1,  240,  268,   -1,  241,  268,   -1,  242,
  268,   -1,  243,  268,   -1,  244,  268,   -1,  245,  268,
   -1,  246,  268,   -1,  247,  268,   -1,  248,  268,   -1,
  249,  268,   -1,  250,  268,   -1,  251,  268,   -1,  252,
  268,   -1,  253,  268,   -1,  254,  268,   -1,  255,  268,
   -1,  256,  268,   -1,  257,  268,   -1,  258,  268,   -1,
  259,  268,   -1,  260,  268,   -1,  261,  268,   -1,  262,
  268,   -1,  263,  268,   -1,  264,  268,   -1,  265,  268,
   -1,  266,  268,   -1,  232,  261,   -1,  233,  261,   -1,
  234,  261,   -1,  235,  261,   -1,  236,  261,   -1,  237,
  261,   -1,  238,  261,   -1,  239,  261,   -1,  240,  261,
   -1,  241,  261,   -1,  242,  261,   -1,  243,  261,   -1,
  244,  261,   -1,  245,  261,   -1,  246,  261,   -1,  247,
  261,   -1,  248,  261,   -1,  249,  261,   -1,  250,  261,
   -1,  251,  261,   -1,  252,  261,   -1,  253,  261,   -1,
  254,  261,   -1,  260,  261,   -1,  232,  264,   -1,  233,
  264,   -1,  234,  264,   -1,  235,  264,   -1,  236,  264,
   -1,  237,  264,   -1,  238,  264,   -1,  239,  264,   -1,
  240,  264,   -1,  241,  264,   -1,  242,  264,   -1,  243,
  264,   -1,  244,  264,   -1,  245,  264,   -1,  246,  264,
   -1,  247,  264,   -1,  248,  264,   -1,  249,  264,   -1,
  250,  264,   -1,  251,  264,   -1,  252,  264,   -1,  253,
  264,   -1,  254,  264,   -1,  260,  264,   -1,  232,  265,
   -1,  233,  265,   -1,  234,  265,   -1,  235,  265,   -1,
  236,  265,   -1,  237,  265,   -1,  238,  265,   -1,  239,
  265,   -1,  240,  265,   -1,  241,  265,   -1,  242,  265,
   -1,  243,  265,   -1,  244,  265,   -1,  245,  265,   -1,
  246,  265,   -1,  247,  265,   -1,  248,  265,   -1,  249,
  265,   -1,  250,  265,   -1,  251,  265,   -1,  252,  265,
   -1,  253,  265,   -1,  254,  265,   -1,  260,  265,   -1,
  323,   61,   -1,  232,  262,   -1,  233,  262,   -1,  234,
  262,   -1,  235,  262,   -1,  236,  262,   -1,  237,  262,
   -1,  238,  262,   -1,  239,  262,   -1,  240,  262,   -1,
  241,  262,   -1,  242,  262,   -1,  243,  262,   -1,  244,
  262,   -1,  245,  262,   -1,  246,  262,   -1,  247,  262,
   -1,  248,  262,   -1,  249,  262,   -1,  250,  262,   -1,
  251,  262,   -1,  252,  262,   -1,  253,  262,   -1,  254,
  262,   -1,  260,  262,   -1,  232,  263,   -1,  233,  263,
   -1,  234,  263,   -1,  235,  263,   -1,  236,  263,   -1,
  237,  263,   -1,  238,  263,   -1,  239,  263,   -1,  240,
  263,   -1,  241,  263,   -1,  242,  263,   -1,  243,  263,
   -1,  244,  263,   -1,  245,  263,   -1,  246,  263,   -1,
  247,  263,   -1,  248,  263,   -1,  249,  263,   -1,  250,
  263,   -1,  251,  263,   -1,  252,  263,   -1,  253,  263,
   -1,  254,  263,   -1,  260,  263,   -1,  232,  310,   -1,
  233,  310,   -1,  234,  310,   -1,  235,  310,   -1,  236,
  310,   -1,  237,  310,   -1,  238,  310,   -1,  239,  310,
   -1,  240,  310,   -1,  241,  310,   -1,  242,  310,   -1,
  243,  310,   -1,  244,  310,   -1,  245,  310,   -1,  246,
  310,   -1,  247,  310,   -1,  248,  310,   -1,  249,  310,
   -1,  250,  310,   -1,  251,  310,   -1,  252,  310,   -1,
  253,  310,   -1,  254,  310,   -1,  255,  310,   -1,  256,
  310,   -1,  257,  310,   -1,  258,  310,   -1,  259,  310,
   -1,  260,  310,   -1,  261,  310,   -1,  262,  310,   -1,
  263,  310,   -1,  264,  310,   -1,  265,  310,   -1,  266,
  310,   -1,  232,  311,   -1,  233,  311,   -1,  234,  311,
   -1,  235,  311,   -1,  236,  311,   -1,  237,  311,   -1,
  238,  311,   -1,  239,  311,   -1,  240,  311,   -1,  241,
  311,   -1,  242,  311,   -1,  243,  311,   -1,  244,  311,
   -1,  245,  311,   -1,  246,  311,   -1,  247,  311,   -1,
  248,  311,   -1,  249,  311,   -1,  250,  311,   -1,  251,
  311,   -1,  252,  311,   -1,  253,  311,   -1,  254,  311,
   -1,  255,  311,   -1,  256,  311,   -1,  257,  311,   -1,
  258,  311,   -1,  259,  311,   -1,  260,  311,   -1,  261,
  311,   -1,  262,  311,   -1,  263,  311,   -1,  264,  311,
   -1,  265,  311,   -1,  266,  311,   -1,  232,  313,   -1,
  233,  313,   -1,  234,  313,   -1,  235,  313,   -1,  236,
  313,   -1,  237,  313,   -1,  238,  313,   -1,  239,  313,
   -1,  240,  313,   -1,  241,  313,   -1,  242,  313,   -1,
  243,  313,   -1,  244,  313,   -1,  245,  313,   -1,  246,
  313,   -1,  247,  313,   -1,  248,  313,   -1,  249,  313,
   -1,  250,  313,   -1,  251,  313,   -1,  252,  313,   -1,
  253,  313,   -1,  254,  313,   -1,  255,  313,   -1,  256,
  313,   -1,  257,  313,   -1,  258,  313,   -1,  259,  313,
   -1,  260,  313,   -1,  261,  313,   -1,  262,  313,   -1,
  263,  313,   -1,  264,  313,   -1,  265,  313,   -1,  266,
  313,   -1,  105,  246,   -1,   32,  179,   -1,   36,  179,
   -1,  367,   61,  247,   -1,   61,  247,   -1,  192,  193,
   -1,  272,  192,   -1,  301,  190,   -1,  109,  245,   -1,
  444,   44,   -1,  445,   44,   -1,  446,   44,   -1,  447,
   44,   -1,  459,   61,   -1,  298,   63,   -1,  201,   63,
   -1,  202,   63,   -1,  232,  281,   -1,  233,  281,   -1,
  234,  281,   -1,  235,  281,   -1,  236,  281,   -1,  237,
  281,   -1,  238,  281,   -1,  239,  281,   -1,  240,  281,
   -1,  241,  281,   -1,  242,  281,   -1,  243,  281,   -1,
  244,  281,   -1,  245,  281,   -1,  246,  281,   -1,  247,
  281,   -1,  248,  281,   -1,  249,  281,   -1,  250,  281,
   -1,  251,  281,   -1,  252,  281,   -1,  253,  281,   -1,
  254,  281,   -1,  255,  281,   -1,  256,  281,   -1,  257,
  281,   -1,  258,  281,   -1,  259,  281,   -1,  260,  281,
   -1,  261,  281,   -1,  262,  281,   -1,  263,  281,   -1,
  264,  281,   -1,  265,  281,   -1,  266,  281,   -1,  232,
  282,   -1,  233,  282,   -1,  234,  282,   -1,  235,  282,
   -1,  236,  282,   -1,  237,  282,   -1,  238,  282,   -1,
  239,  282,   -1,  240,  282,   -1,  241,  282,   -1,  242,
  282,   -1,  243,  282,   -1,  244,  282,   -1,  245,  282,
   -1,  246,  282,   -1,  247,  282,   -1,  248,  282,   -1,
  249,  282,   -1,  250,  282,   -1,  251,  282,   -1,  252,
  282,   -1,  253,  282,   -1,  254,  282,   -1,  255,  282,
   -1,  256,  282,   -1,  257,  282,   -1,  258,  282,   -1,
  259,  282,   -1,  260,  282,   -1,  261,  282,   -1,  262,
  282,   -1,  263,  282,   -1,  264,  282,   -1,  265,  282,
   -1,  266,  282,   -1,  232,  283,   -1,  233,  283,   -1,
  234,  283,   -1,  235,  283,   -1,  236,  283,   -1,  237,
  283,   -1,  238,  283,   -1,  239,  283,   -1,  240,  283,
   -1,  241,  283,   -1,  242,  283,   -1,  243,  283,   -1,
  244,  283,   -1,  245,  283,   -1,  246,  283,   -1,  247,
  283,   -1,  248,  283,   -1,  249,  283,   -1,  250,  283,
   -1,  251,  283,   -1,  252,  283,   -1,  253,  283,   -1,
  254,  283,   -1,  255,  283,   -1,  256,  283,   -1,  257,
  283,   -1,  258,  283,   -1,  259,  283,   -1,  260,  283,
   -1,  261,  283,   -1,  262,  283,   -1,  263,  283,   -1,
  264,  283,   -1,  265,  283,   -1,  266,  283,   -1,  232,
  284,   -1,  233,  284,   -1,  234,  284,   -1,  235,  284,
   -1,  236,  284,   -1,  237,  284,   -1,  238,  284,   -1,
  239,  284,   -1,  240,  284,   -1,  241,  284,   -1,  242,
  284,   -1,  243,  284,   -1,  244,  284,   -1,  245,  284,
   -1,  246,  284,   -1,  247,  284,   -1,  248,  284,   -1,
  249,  284,   -1,  250,  284,   -1,  251,  284,   -1,  252,
  284,   -1,  253,  284,   -1,  254,  284,   -1,  255,  284,
   -1,  256,  284,   -1,  257,  284,   -1,  258,  284,   -1,
  259,  284,   -1,  260,  284,   -1,  261,  284,   -1,  262,
  284,   -1,  263,  284,   -1,  264,  284,   -1,  265,  284,
   -1,  266,  284,   -1,  232,  285,   -1,  233,  285,   -1,
  234,  285,   -1,  235,  285,   -1,  236,  285,   -1,  237,
  285,   -1,  238,  285,   -1,  239,  285,   -1,  240,  285,
   -1,  241,  285,   -1,  242,  285,   -1,  243,  285,   -1,
  244,  285,   -1,  245,  285,   -1,  246,  285,   -1,  247,
  285,   -1,  248,  285,   -1,  249,  285,   -1,  250,  285,
   -1,  251,  285,   -1,  252,  285,   -1,  253,  285,   -1,
  254,  285,   -1,  255,  285,   -1,  256,  285,   -1,  257,
  285,   -1,  258,  285,   -1,  259,  285,   -1,  260,  285,
   -1,  261,  285,   -1,  262,  285,   -1,  263,  285,   -1,
  264,  285,   -1,  265,  285,   -1,  266,  285,   -1,  232,
  286,   -1,  233,  286,   -1,  234,  286,   -1,  235,  286,
   -1,  236,  286,   -1,  237,  286,   -1,  238,  286,   -1,
  239,  286,   -1,  240,  286,   -1,  241,  286,   -1,  242,
  286,   -1,  243,  286,   -1,  244,  286,   -1,  245,  286,
   -1,  246,  286,   -1,  247,  286,   -1,  248,  286,   -1,
  249,  286,   -1,  250,  286,   -1,  251,  286,   -1,  252,
  286,   -1,  253,  286,   -1,  254,  286,   -1,  255,  286,
   -1,  256,  286,   -1,  257,  286,   -1,  258,  286,   -1,
  259,  286,   -1,  260,  286,   -1,  261,  286,   -1,  262,
  286,   -1,  263,  286,   -1,  264,  286,   -1,  265,  286,
   -1,  266,  286,   -1,  232,  287,   -1,  233,  287,   -1,
  234,  287,   -1,  235,  287,   -1,  236,  287,   -1,  237,
  287,   -1,  238,  287,   -1,  239,  287,   -1,  240,  287,
   -1,  241,  287,   -1,  242,  287,   -1,  243,  287,   -1,
  244,  287,   -1,  245,  287,   -1,  246,  287,   -1,  247,
  287,   -1,  248,  287,   -1,  249,  287,   -1,  250,  287,
   -1,  251,  287,   -1,  252,  287,   -1,  253,  287,   -1,
  254,  287,   -1,  255,  287,   -1,  256,  287,   -1,  257,
  287,   -1,  258,  287,   -1,  259,  287,   -1,  260,  287,
   -1,  261,  287,   -1,  262,  287,   -1,  263,  287,   -1,
  264,  287,   -1,  265,  287,   -1,  266,  287,   -1,  232,
  288,   -1,  233,  288,   -1,  234,  288,   -1,  235,  288,
   -1,  236,  288,   -1,  237,  288,   -1,  238,  288,   -1,
  239,  288,   -1,  240,  288,   -1,  241,  288,   -1,  242,
  288,   -1,  243,  288,   -1,  244,  288,   -1,  245,  288,
   -1,  246,  288,   -1,  247,  288,   -1,  248,  288,   -1,
  249,  288,   -1,  250,  288,   -1,  251,  288,   -1,  252,
  288,   -1,  253,  288,   -1,  254,  288,   -1,  255,  288,
   -1,  256,  288,   -1,  257,  288,   -1,  258,  288,   -1,
  259,  288,   -1,  260,  288,   -1,  261,  288,   -1,  262,
  288,   -1,  263,  288,   -1,  264,  288,   -1,  265,  288,
   -1,  266,  288,   -1,  232,  289,   -1,  233,  289,   -1,
  234,  289,   -1,  235,  289,   -1,  236,  289,   -1,  237,
  289,   -1,  238,  289,   -1,  239,  289,   -1,  240,  289,
   -1,  241,  289,   -1,  242,  289,   -1,  243,  289,   -1,
  244,  289,   -1,  245,  289,   -1,  246,  289,   -1,  247,
  289,   -1,  248,  289,   -1,  249,  289,   -1,  250,  289,
   -1,  251,  289,   -1,  252,  289,   -1,  253,  289,   -1,
  254,  289,   -1,  260,  289,   -1,  232,  290,   -1,  233,
  290,   -1,  234,  290,   -1,  235,  290,   -1,  236,  290,
   -1,  237,  290,   -1,  238,  290,   -1,  239,  290,   -1,
  240,  290,   -1,  241,  290,   -1,  242,  290,   -1,  243,
  290,   -1,  244,  290,   -1,  245,  290,   -1,  246,  290,
   -1,  247,  290,   -1,  248,  290,   -1,  249,  290,   -1,
  250,  290,   -1,  251,  290,   -1,  252,  290,   -1,  253,
  290,   -1,  254,  290,   -1,  260,  290,   -1,  232,  291,
   -1,  233,  291,   -1,  234,  291,   -1,  235,  291,   -1,
  236,  291,   -1,  237,  291,   -1,  238,  291,   -1,  239,
  291,   -1,  240,  291,   -1,  241,  291,   -1,  242,  291,
   -1,  243,  291,   -1,  244,  291,   -1,  245,  291,   -1,
  246,  291,   -1,  247,  291,   -1,  248,  291,   -1,  249,
  291,   -1,  250,  291,   -1,  251,  291,   -1,  252,  291,
   -1,  253,  291,   -1,  254,  291,   -1,  255,  291,   -1,
  256,  291,   -1,  257,  291,   -1,  258,  291,   -1,  259,
  291,   -1,  260,  291,   -1,  261,  291,   -1,  262,  291,
   -1,  263,  291,   -1,  264,  291,   -1,  265,  291,   -1,
  266,  291,   -1,  232,  292,   -1,  233,  292,   -1,  234,
  292,   -1,  235,  292,   -1,  236,  292,   -1,  237,  292,
   -1,  238,  292,   -1,  239,  292,   -1,  240,  292,   -1,
  241,  292,   -1,  242,  292,   -1,  243,  292,   -1,  244,
  292,   -1,  245,  292,   -1,  246,  292,   -1,  247,  292,
   -1,  248,  292,   -1,  249,  292,   -1,  250,  292,   -1,
  251,  292,   -1,  252,  292,   -1,  253,  292,   -1,  254,
  292,   -1,  255,  292,   -1,  256,  292,   -1,  257,  292,
   -1,  258,  292,   -1,  259,  292,   -1,  260,  292,   -1,
  261,  292,   -1,  262,  292,   -1,  263,  292,   -1,  264,
  292,   -1,  265,  292,   -1,  266,  292,   -1,  232,  293,
   -1,  233,  293,   -1,  234,  293,   -1,  235,  293,   -1,
  236,  293,   -1,  237,  293,   -1,  238,  293,   -1,  239,
  293,   -1,  240,  293,   -1,  241,  293,   -1,  242,  293,
   -1,  243,  293,   -1,  244,  293,   -1,  245,  293,   -1,
  246,  293,   -1,  247,  293,   -1,  248,  293,   -1,  249,
  293,   -1,  250,  293,   -1,  251,  293,   -1,  252,  293,
   -1,  253,  293,   -1,  254,  293,   -1,  260,  293,   -1,
  232,  294,   -1,  233,  294,   -1,  234,  294,   -1,  235,
  294,   -1,  236,  294,   -1,  237,  294,   -1,  238,  294,
   -1,  239,  294,   -1,  240,  294,   -1,  241,  294,   -1,
  242,  294,   -1,  243,  294,   -1,  244,  294,   -1,  245,
  294,   -1,  246,  294,   -1,  247,  294,   -1,  248,  294,
   -1,  249,  294,   -1,  250,  294,   -1,  251,  294,   -1,
  252,  294,   -1,  253,  294,   -1,  254,  294,   -1,  255,
  294,   -1,  256,  294,   -1,  257,  294,   -1,  258,  294,
   -1,  259,  294,   -1,  260,  294,   -1,  261,  294,   -1,
  262,  294,   -1,  263,  294,   -1,  264,  294,   -1,  265,
  294,   -1,  266,  294,   -1,  232,  295,   -1,  233,  295,
   -1,  234,  295,   -1,  235,  295,   -1,  236,  295,   -1,
  237,  295,   -1,  238,  295,   -1,  239,  295,   -1,  240,
  295,   -1,  241,  295,   -1,  242,  295,   -1,  243,  295,
   -1,  244,  295,   -1,  245,  295,   -1,  246,  295,   -1,
  247,  295,   -1,  248,  295,   -1,  249,  295,   -1,  250,
  295,   -1,  251,  295,   -1,  252,  295,   -1,  253,  295,
   -1,  254,  295,   -1,  255,  295,   -1,  256,  295,   -1,
  257,  295,   -1,  258,  295,   -1,  259,  295,   -1,  260,
  295,   -1,  261,  295,   -1,  262,  295,   -1,  263,  295,
   -1,  264,  295,   -1,  265,  295,   -1,  266,  295,   -1,
  232,  296,   -1,  233,  296,   -1,  234,  296,   -1,  235,
  296,   -1,  236,  296,   -1,  237,  296,   -1,  238,  296,
   -1,  239,  296,   -1,  240,  296,   -1,  241,  296,   -1,
  242,  296,   -1,  243,  296,   -1,  244,  296,   -1,  245,
  296,   -1,  246,  296,   -1,  247,  296,   -1,  248,  296,
   -1,  249,  296,   -1,  250,  296,   -1,  251,  296,   -1,
  252,  296,   -1,  253,  296,   -1,  254,  296,   -1,  255,
  296,   -1,  256,  296,   -1,  257,  296,   -1,  258,  296,
   -1,  259,  296,   -1,  260,  296,   -1,  261,  296,   -1,
  262,  296,   -1,  263,  296,   -1,  264,  296,   -1,  265,
  296,   -1,  266,  296,   -1,  232,  297,   -1,  233,  297,
   -1,  234,  297,   -1,  235,  297,   -1,  236,  297,   -1,
  237,  297,   -1,  238,  297,   -1,  239,  297,   -1,  240,
  297,   -1,  241,  297,   -1,  242,  297,   -1,  243,  297,
   -1,  244,  297,   -1,  245,  297,   -1,  246,  297,   -1,
  247,  297,   -1,  248,  297,   -1,  249,  297,   -1,  250,
  297,   -1,  251,  297,   -1,  252,  297,   -1,  253,  297,
   -1,  254,  297,   -1,  255,  297,   -1,  256,  297,   -1,
  257,  297,   -1,  258,  297,   -1,  259,  297,   -1,  260,
  297,   -1,  261,  297,   -1,  262,  297,   -1,  263,  297,
   -1,  264,  297,   -1,  265,  297,   -1,  266,  297,   -1,
  232,  299,   -1,  233,  299,   -1,  234,  299,   -1,  235,
  299,   -1,  236,  299,   -1,  237,  299,   -1,  238,  299,
   -1,  239,  299,   -1,  240,  299,   -1,  241,  299,   -1,
  242,  299,   -1,  243,  299,   -1,  244,  299,   -1,  245,
  299,   -1,  246,  299,   -1,  247,  299,   -1,  248,  299,
   -1,  249,  299,   -1,  250,  299,   -1,  251,  299,   -1,
  252,  299,   -1,  253,  299,   -1,  254,  299,   -1,  260,
  299,   -1,  232,  300,   -1,  233,  300,   -1,  234,  300,
   -1,  235,  300,   -1,  236,  300,   -1,  237,  300,   -1,
  238,  300,   -1,  239,  300,   -1,  240,  300,   -1,  241,
  300,   -1,  242,  300,   -1,  243,  300,   -1,  244,  300,
   -1,  245,  300,   -1,  246,  300,   -1,  247,  300,   -1,
  248,  300,   -1,  249,  300,   -1,  250,  300,   -1,  251,
  300,   -1,  252,  300,   -1,  253,  300,   -1,  254,  300,
   -1,  255,  300,   -1,  256,  300,   -1,  257,  300,   -1,
  258,  300,   -1,  259,  300,   -1,  260,  300,   -1,  261,
  300,   -1,  262,  300,   -1,  263,  300,   -1,  264,  300,
   -1,  265,  300,   -1,  266,  300,   -1,  232,  279,   -1,
  233,  279,   -1,  234,  279,   -1,  235,  279,   -1,  236,
  279,   -1,  237,  279,   -1,  238,  279,   -1,  239,  279,
   -1,  240,  279,   -1,  241,  279,   -1,  242,  279,   -1,
  243,  279,   -1,  244,  279,   -1,  245,  279,   -1,  246,
  279,   -1,  247,  279,   -1,  248,  279,   -1,  249,  279,
   -1,  250,  279,   -1,  251,  279,   -1,  252,  279,   -1,
  253,  279,   -1,  254,  279,   -1,  255,  279,   -1,  256,
  279,   -1,  257,  279,   -1,  258,  279,   -1,  259,  279,
   -1,  260,  279,   -1,  261,  279,   -1,  262,  279,   -1,
  263,  279,   -1,  264,  279,   -1,  265,  279,   -1,  266,
  279,   -1,  232,  280,   -1,  233,  280,   -1,  234,  280,
   -1,  235,  280,   -1,  236,  280,   -1,  237,  280,   -1,
  238,  280,   -1,  239,  280,   -1,  240,  280,   -1,  241,
  280,   -1,  242,  280,   -1,  243,  280,   -1,  244,  280,
   -1,  245,  280,   -1,  246,  280,   -1,  247,  280,   -1,
  248,  280,   -1,  249,  280,   -1,  250,  280,   -1,  251,
  280,   -1,  252,  280,   -1,  253,  280,   -1,  254,  280,
   -1,  255,  280,   -1,  256,  280,   -1,  257,  280,   -1,
  258,  280,   -1,  259,  280,   -1,  260,  280,   -1,  261,
  280,   -1,  262,  280,   -1,  263,  280,   -1,  264,  280,
   -1,  265,  280,   -1,  266,  280,   -1,  232,  270,   -1,
  233,  270,   -1,  234,  270,   -1,  235,  270,   -1,  236,
  270,   -1,  237,  270,   -1,  238,  270,   -1,  239,  270,
   -1,  240,  270,   -1,  241,  270,   -1,  242,  270,   -1,
  243,  270,   -1,  244,  270,   -1,  245,  270,   -1,  246,
  270,   -1,  247,  270,   -1,  248,  270,   -1,  249,  270,
   -1,  250,  270,   -1,  251,  270,   -1,  252,  270,   -1,
  253,  270,   -1,  254,  270,   -1,  260,  270,   -1,  232,
  271,   -1,  233,  271,   -1,  234,  271,   -1,  235,  271,
   -1,  236,  271,   -1,  237,  271,   -1,  238,  271,   -1,
  239,  271,   -1,  240,  271,   -1,  241,  271,   -1,  242,
  271,   -1,  243,  271,   -1,  244,  271,   -1,  245,  271,
   -1,  246,  271,   -1,  247,  271,   -1,  248,  271,   -1,
  249,  271,   -1,  250,  271,   -1,  251,  271,   -1,  252,
  271,   -1,  253,  271,   -1,  254,  271,   -1,  260,  271,
   -1,  232,  272,   -1,  233,  272,   -1,  234,  272,   -1,
  235,  272,   -1,  236,  272,   -1,  237,  272,   -1,  238,
  272,   -1,  239,  272,   -1,  240,  272,   -1,  241,  272,
   -1,  242,  272,   -1,  243,  272,   -1,  244,  272,   -1,
  245,  272,   -1,  246,  272,   -1,  247,  272,   -1,  248,
  272,   -1,  249,  272,   -1,  250,  272,   -1,  251,  272,
   -1,  252,  272,   -1,  253,  272,   -1,  254,  272,   -1,
  260,  272,   -1,  232,  273,   -1,  233,  273,   -1,  234,
  273,   -1,  235,  273,   -1,  236,  273,   -1,  237,  273,
   -1,  238,  273,   -1,  239,  273,   -1,  240,  273,   -1,
  241,  273,   -1,  242,  273,   -1,  243,  273,   -1,  244,
  273,   -1,  245,  273,   -1,  246,  273,   -1,  247,  273,
   -1,  248,  273,   -1,  249,  273,   -1,  250,  273,   -1,
  251,  273,   -1,  252,  273,   -1,  253,  273,   -1,  254,
  273,   -1,  260,  273,   -1,  232,  274,   -1,  233,  274,
   -1,  234,  274,   -1,  235,  274,   -1,  236,  274,   -1,
  237,  274,   -1,  238,  274,   -1,  239,  274,   -1,  240,
  274,   -1,  241,  274,   -1,  242,  274,   -1,  243,  274,
   -1,  244,  274,   -1,  245,  274,   -1,  246,  274,   -1,
  247,  274,   -1,  248,  274,   -1,  249,  274,   -1,  250,
  274,   -1,  251,  274,   -1,  252,  274,   -1,  253,  274,
   -1,  254,  274,   -1,  260,  274,   -1,  232,  277,   -1,
  233,  277,   -1,  234,  277,   -1,  235,  277,   -1,  236,
  277,   -1,  237,  277,   -1,  238,  277,   -1,  239,  277,
   -1,  240,  277,   -1,  241,  277,   -1,  242,  277,   -1,
  243,  277,   -1,  244,  277,   -1,  245,  277,   -1,  246,
  277,   -1,  247,  277,   -1,  248,  277,   -1,  249,  277,
   -1,  250,  277,   -1,  251,  277,   -1,  252,  277,   -1,
  253,  277,   -1,  254,  277,   -1,  255,  277,   -1,  256,
  277,   -1,  257,  277,   -1,  258,  277,   -1,  259,  277,
   -1,  260,  277,   -1,  261,  277,   -1,  262,  277,   -1,
  263,  277,   -1,  264,  277,   -1,  265,  277,   -1,  266,
  277,   -1,  232,  275,   -1,  233,  275,   -1,  234,  275,
   -1,  235,  275,   -1,  236,  275,   -1,  237,  275,   -1,
  238,  275,   -1,  239,  275,   -1,  240,  275,   -1,  241,
  275,   -1,  242,  275,   -1,  243,  275,   -1,  244,  275,
   -1,  245,  275,   -1,  246,  275,   -1,  247,  275,   -1,
  248,  275,   -1,  249,  275,   -1,  250,  275,   -1,  251,
  275,   -1,  252,  275,   -1,  253,  275,   -1,  254,  275,
   -1,  260,  275,   -1,  232,  276,   -1,  233,  276,   -1,
  234,  276,   -1,  235,  276,   -1,  236,  276,   -1,  237,
  276,   -1,  238,  276,   -1,  239,  276,   -1,  240,  276,
   -1,  241,  276,   -1,  242,  276,   -1,  243,  276,   -1,
  244,  276,   -1,  245,  276,   -1,  246,  276,   -1,  247,
  276,   -1,  248,  276,   -1,  249,  276,   -1,  250,  276,
   -1,  251,  276,   -1,  252,  276,   -1,  253,  276,   -1,
  254,  276,   -1,  260,  276,   -1,  232,  278,   -1,  233,
  278,   -1,  234,  278,   -1,  235,  278,   -1,  236,  278,
   -1,  237,  278,   -1,  238,  278,   -1,  239,  278,   -1,
  240,  278,   -1,  241,  278,   -1,  242,  278,   -1,  243,
  278,   -1,  244,  278,   -1,  245,  278,   -1,  246,  278,
   -1,  247,  278,   -1,  248,  278,   -1,  249,  278,   -1,
  250,  278,   -1,  251,  278,   -1,  252,  278,   -1,  253,
  278,   -1,  254,  278,   -1,  260,  278,   -1,  232,  298,
   -1,  233,  298,   -1,  234,  298,   -1,  235,  298,   -1,
  236,  298,   -1,  237,  298,   -1,  238,  298,   -1,  239,
  298,   -1,  240,  298,   -1,  241,  298,   -1,  242,  298,
   -1,  243,  298,   -1,  244,  298,   -1,  245,  298,   -1,
  246,  298,   -1,  247,  298,   -1,  248,  298,   -1,  249,
  298,   -1,  250,  298,   -1,  251,  298,   -1,  252,  298,
   -1,  253,  298,   -1,  254,  298,   -1,  260,  298,   -1,
  276,  179,  246,   -1,  232,  304,   -1,  233,  304,   -1,
  234,  304,   -1,  235,  304,   -1,  236,  304,   -1,  237,
  304,   -1,  238,  304,   -1,  239,  304,   -1,  240,  304,
   -1,  241,  304,   -1,  242,  304,   -1,  243,  304,   -1,
  244,  304,   -1,  245,  304,   -1,  246,  304,   -1,  247,
  304,   -1,  248,  304,   -1,  249,  304,   -1,  250,  304,
   -1,  251,  304,   -1,  252,  304,   -1,  253,  304,   -1,
  254,  304,   -1,  255,  304,   -1,  256,  304,   -1,  257,
  304,   -1,  258,  304,   -1,  259,  304,   -1,  260,  304,
   -1,  261,  304,   -1,  262,  304,   -1,  263,  304,   -1,
  264,  304,   -1,  265,  304,   -1,  266,  304,   -1,  232,
  312,   -1,  233,  312,   -1,  234,  312,   -1,  235,  312,
   -1,  236,  312,   -1,  237,  312,   -1,  238,  312,   -1,
  239,  312,   -1,  240,  312,   -1,  241,  312,   -1,  242,
  312,   -1,  243,  312,   -1,  244,  312,   -1,  245,  312,
   -1,  246,  312,   -1,  247,  312,   -1,  248,  312,   -1,
  249,  312,   -1,  250,  312,   -1,  251,  312,   -1,  252,
  312,   -1,  253,  312,   -1,  254,  312,   -1,  255,  312,
   -1,  256,  312,   -1,  257,  312,   -1,  258,  312,   -1,
  259,  312,   -1,  260,  312,   -1,  261,  312,   -1,  262,
  312,   -1,  263,  312,   -1,  264,  312,   -1,  265,  312,
   -1,  266,  312,   -1,  522,   61,   -1,  493,   84,   -1,
   13,   84,   -1,   14,   84,   -1,  495,   84,   -1,  254,
  243,   -1,
};
#define YYFINAL 46
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 348
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq",
"tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift",
"tknRShift","tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq",
"tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow",
"tknArrowStar","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew",
"tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1040 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3756 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 278 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4146 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 285 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4152 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 286 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4162 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 291 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4172 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 296 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4178 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4184 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4190 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4196 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4202 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4208 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4214 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4220 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4226 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4232 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4238 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4244 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4250 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4256 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4262 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4268 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4274 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4280 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4286 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4292 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4298 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4304 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4310 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4316 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4322 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4328 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4334 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4340 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4349 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4358 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4367 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4376 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4385 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 352 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4394 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 358 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4402 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 361 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4410 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4418 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 369 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4426 "y_tab.c"
break;
case 43:
#line 374 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4431 "y_tab.c"
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4438 "y_tab.c"
break;
case 44:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4443 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4450 "y_tab.c"
break;
case 45:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4455 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4462 "y_tab.c"
break;
case 46:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4467 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4474 "y_tab.c"
break;
case 47:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4479 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4486 "y_tab.c"
break;
case 48:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4491 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4498 "y_tab.c"
break;
case 49:
#line 400 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4503 "y_tab.c"
  if (!yytrial)
#line 400 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4507 "y_tab.c"
break;
case 50:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4512 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4516 "y_tab.c"
break;
case 51:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4521 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4525 "y_tab.c"
break;
case 52:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4530 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4534 "y_tab.c"
break;
case 53:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4539 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4543 "y_tab.c"
break;
case 54:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4548 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4552 "y_tab.c"
break;
case 55:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4557 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4561 "y_tab.c"
break;
case 56:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4566 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4570 "y_tab.c"
break;
case 57:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4575 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4579 "y_tab.c"
break;
case 58:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4584 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4588 "y_tab.c"
break;
case 59:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4593 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4597 "y_tab.c"
break;
case 60:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4602 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4606 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4612 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4618 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4624 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4630 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4636 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4642 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4648 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4654 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4660 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4666 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4672 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4678 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4687 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4693 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4699 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4705 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4711 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4717 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4723 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4729 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4735 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4744 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4753 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4761 "y_tab.c"
break;
case 85:
#line 470 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4766 "y_tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4772 "y_tab.c"
break;
case 86:
#line 473 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4777 "y_tab.c"
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4783 "y_tab.c"
break;
case 87:
#line 476 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4788 "y_tab.c"
  if (!yytrial)
#line 476 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4794 "y_tab.c"
break;
case 88:
#line 479 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4799 "y_tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4805 "y_tab.c"
break;
case 89:
#line 483 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4810 "y_tab.c"
  if (!yytrial)
#line 483 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4816 "y_tab.c"
break;
case 90:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4821 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4827 "y_tab.c"
break;
case 91:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4832 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4838 "y_tab.c"
break;
case 92:
#line 494 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4843 "y_tab.c"
  if (!yytrial)
#line 494 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4847 "y_tab.c"
break;
case 93:
#line 495 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4852 "y_tab.c"
  if (!yytrial)
#line 495 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4856 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4862 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4871 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 507 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4877 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 510 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4888 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 516 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4898 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 521 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4909 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 527 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4919 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 532 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4930 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 538 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4940 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 547 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4948 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 550 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4956 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4964 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 559 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4972 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 562 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4981 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 566 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4989 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 571 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4995 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5001 "y_tab.c"
break;
case 111:
#line 575 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5006 "y_tab.c"
  if (!yytrial)
#line 575 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5010 "y_tab.c"
break;
case 112:
#line 578 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5015 "y_tab.c"
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 5023 "y_tab.c"
break;
case 113:
#line 585 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5028 "y_tab.c"
  if (!yytrial)
#line 585 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5035 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 590 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5045 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 595 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5055 "y_tab.c"
break;
case 116:
#line 602 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5060 "y_tab.c"
  if (!yytrial)
#line 602 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5064 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 605 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5074 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 610 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5084 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5093 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5099 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 622 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5105 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 623 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5111 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5117 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5123 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5129 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5135 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 628 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5141 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 629 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5147 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5153 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5159 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5165 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5171 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5177 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5183 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5189 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5195 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5201 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5207 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5213 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5219 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5225 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5231 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5237 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5243 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5249 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5255 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5261 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5267 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5273 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5279 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5285 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5291 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5297 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5303 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5309 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5315 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5321 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5327 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5333 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5339 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5348 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5357 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5363 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5369 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5375 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5381 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5387 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5393 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5399 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5405 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5411 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5417 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5423 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5429 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5435 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5441 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5447 "y_tab.c"
break;
case 178:
#line 695 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5452 "y_tab.c"
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5456 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5462 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5468 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5474 "y_tab.c"
break;
case 182:
#line 704 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5479 "y_tab.c"
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5483 "y_tab.c"
break;
case 183:
#line 710 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5488 "y_tab.c"
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5496 "y_tab.c"
break;
case 184:
#line 716 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5501 "y_tab.c"
break;
case 185:
#line 720 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5506 "y_tab.c"
  if (!yytrial)
#line 721 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5513 "y_tab.c"
break;
case 186:
#line 725 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5518 "y_tab.c"
break;
case 187:
#line 729 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5523 "y_tab.c"
  if (!yytrial)
#line 730 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5530 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 734 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5539 "y_tab.c"
break;
case 189:
#line 741 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5551 "y_tab.c"
  if (!yytrial)
#line 749 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5557 "y_tab.c"
break;
case 190:
#line 752 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5562 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 753 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5570 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 756 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5579 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 762 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5585 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 763 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5591 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 764 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5597 "y_tab.c"
break;
case 196:
#line 767 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5602 "y_tab.c"
  if (!yytrial)
#line 767 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5606 "y_tab.c"
break;
case 197:
#line 770 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5611 "y_tab.c"
  if (!yytrial)
#line 771 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5618 "y_tab.c"
break;
case 198:
#line 775 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5623 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 777 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5632 "y_tab.c"
break;
case 200:
#line 781 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5637 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5646 "y_tab.c"
break;
case 202:
#line 790 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5658 "y_tab.c"
  if (!yytrial)
#line 798 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5666 "y_tab.c"
break;
case 203:
#line 804 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5678 "y_tab.c"
  if (!yytrial)
#line 812 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5686 "y_tab.c"
break;
case 204:
#line 818 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5698 "y_tab.c"
  if (!yytrial)
#line 826 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5706 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 833 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5716 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 838 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5725 "y_tab.c"
break;
case 207:
#line 844 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5730 "y_tab.c"
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5734 "y_tab.c"
break;
case 208:
#line 847 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5739 "y_tab.c"
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5743 "y_tab.c"
break;
case 209:
#line 848 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5748 "y_tab.c"
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5752 "y_tab.c"
break;
case 210:
#line 849 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5757 "y_tab.c"
  if (!yytrial)
#line 849 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5761 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 852 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5767 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 853 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5773 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 856 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5779 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5785 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5791 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 861 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5797 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 862 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5803 "y_tab.c"
break;
case 218:
#line 865 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5808 "y_tab.c"
  if (!yytrial)
#line 865 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5812 "y_tab.c"
break;
case 219:
#line 867 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5822 "y_tab.c"
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5828 "y_tab.c"
break;
case 220:
#line 879 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5833 "y_tab.c"
  if (!yytrial)
#line 879 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5837 "y_tab.c"
break;
case 221:
#line 881 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5842 "y_tab.c"
  if (!yytrial)
#line 882 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5855 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5864 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5870 "y_tab.c"
break;
case 224:
#line 899 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5875 "y_tab.c"
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5879 "y_tab.c"
break;
case 225:
#line 900 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5884 "y_tab.c"
  if (!yytrial)
#line 900 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5888 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5894 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5900 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5906 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5912 "y_tab.c"
break;
case 230:
#line 909 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5917 "y_tab.c"
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5921 "y_tab.c"
break;
case 231:
#line 910 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5926 "y_tab.c"
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5930 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5936 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5942 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5948 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5954 "y_tab.c"
break;
case 236:
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5962 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5971 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5980 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5986 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5992 "y_tab.c"
break;
case 241:
#line 938 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5997 "y_tab.c"
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6003 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6011 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6020 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6026 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6032 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 6038 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 957 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6044 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6050 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6056 "y_tab.c"
break;
case 250:
#line 962 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6061 "y_tab.c"
  if (!yytrial)
#line 962 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6065 "y_tab.c"
break;
case 251:
#line 963 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6070 "y_tab.c"
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6074 "y_tab.c"
break;
case 252:
#line 964 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6079 "y_tab.c"
  if (!yytrial)
#line 964 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6083 "y_tab.c"
break;
case 253:
#line 967 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6088 "y_tab.c"
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6092 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6098 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6104 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6110 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6116 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6122 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6128 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6134 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6140 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6146 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6152 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6158 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6164 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6170 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6176 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 986 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6182 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6188 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6194 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6200 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6206 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6212 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6218 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 993 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6224 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6230 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6236 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6242 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 997 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6248 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6254 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6260 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6266 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6272 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6278 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6284 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6290 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6296 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6302 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6308 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6314 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6320 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6326 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6332 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6338 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6344 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6350 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6356 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6362 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6368 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6374 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6380 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6386 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6392 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6398 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6404 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6410 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6416 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6422 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6428 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6434 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6440 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6446 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6452 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6458 "y_tab.c"
break;
case 315:
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6463 "y_tab.c"
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6467 "y_tab.c"
break;
#line 6469 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
