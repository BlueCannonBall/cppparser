#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "C:/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 102 "C:/github/cppparser/parser.y"
#line 89 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   24,   24,   24,   24,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   59,
   59,   54,   54,   54,   54,   54,   54,   55,   56,   56,
   57,   57,   57,   57,   57,   57,   58,   27,   27,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    9,    9,    9,    9,    9,   10,   10,   10,   10,    7,
    7,    7,    7,    8,    8,    8,   23,   23,   22,   21,
    3,    3,    3,    3,    3,    3,   14,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   12,   12,   12,   47,
   47,   33,   34,    6,   30,   30,   31,   32,   32,   20,
   20,   20,   16,   16,   16,   16,   17,   17,   49,   49,
   49,   49,   49,   49,   49,   48,   48,   48,   48,   46,
   46,   46,   36,   37,   60,   37,   61,   37,   35,   62,
   35,   41,   41,   41,   39,   40,   63,   40,   64,   40,
   38,   38,   38,   18,   18,   19,   15,   15,   15,   43,
   43,   44,   44,   45,   45,   45,   65,   25,   50,   50,
   50,   51,   51,   51,   51,   11,   11,   42,   42,   42,
   42,   66,   66,    1,    1,   52,   52,   52,   26,   53,
   53,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   29,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    4,    3,    4,    4,    4,    4,    3,    3,    3,
    3,    3,    3,    2,    3,    2,    3,    1,    1,    1,
    2,    3,    1,    2,    1,    2,    1,    2,    0,    1,
    1,    3,    1,    1,    1,    0,    2,    3,    2,    6,
    8,    9,    7,    5,    6,    4,    2,    2,    3,    6,
    1,    2,    2,    2,    2,    4,    3,    4,    3,    6,
    5,    5,    4,    3,    3,    4,    6,    9,    8,    1,
    1,    2,    4,    3,   11,   10,    2,    9,    8,    0,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    0,    2,    2,    3,    0,
    1,    1,    2,    5,    0,   11,    0,   13,    4,    0,
    6,    0,    5,    6,    2,    4,    0,   10,    0,   12,
    4,    5,    7,    8,    8,    2,    2,    2,    3,    0,
    1,    1,    2,    0,    1,    2,    0,    9,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    1,    1,    1,
    1,    0,    1,    0,    1,    2,    2,    2,    4,    1,
    3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    4,    4,
    4,    4,    4,    3,    3,    4,    3,    2,    2,    4,
    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  192,  193,  194,    0,    0,    0,    0,    0,    0,
  181,   48,   49,    0,    0,    0,   57,  131,  100,    0,
    0,    0,    0,  132,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,   23,    8,    9,   12,    0,    0,    0,    6,    0,
    7,    0,    0,   10,    0,   11,   22,   13,    0,   14,
    0,   15,    0,   16,   17,    0,   18,   19,    0,   20,
   21,    0,    0,    0,    0,   24,   25,   26,   27,   28,
    0,   50,    0,    0,    0,    0,  101,    0,    0,    0,
    0,  185,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  124,  125,    0,
    0,    0,    0,    0,    0,    0,   44,    0,   46,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  121,    0,  119,    0,    0,   58,
    0,  162,    0,    0,    0,    0,    0,  157,  158,    0,
  156,    0,   78,   77,    0,    0,    0,    4,    5,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  223,  107,    0,  102,  133,    0,    0,    0,  145,
    0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
    0,    0,    0,  113,  111,    0,  116,    0,  159,    0,
  104,    0,    0,    0,    0,   66,    0,    0,   47,    0,
   38,   39,   40,   41,   42,   43,   45,    0,  217,    0,
  196,    0,    0,    0,    0,    0,    0,  117,    0,  118,
    0,    0,  163,    0,    0,   89,    0,    0,    0,   79,
  186,  187,  188,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  215,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  176,    0,    0,    0,    0,
    0,    0,  147,    0,  139,    0,    0,    0,   66,   76,
    0,    0,  189,    0,   32,   35,   36,   34,   37,    0,
    0,  151,    0,    0,    0,    0,   86,    0,   93,    0,
    0,    0,    0,    0,    0,    0,  216,  209,  103,    0,
    0,    0,  146,    0,    0,  177,    0,    0,   88,    0,
    0,    0,    0,    0,  112,    0,    0,   66,   74,    0,
    0,    0,    0,    0,    0,   67,   63,   64,    0,    0,
    0,    0,    0,  137,    0,   92,    0,    0,    0,    0,
  134,  173,  174,  175,    0,    0,  167,    0,   91,    0,
    0,  152,    0,    0,    0,  166,   80,    0,    0,   66,
   75,    0,   68,   70,    0,    0,    0,    0,    0,  149,
    0,    0,  143,    0,    0,    0,    0,    0,   97,   90,
  141,    0,    0,    0,    0,   73,    0,    0,  153,    0,
  126,    0,    0,    0,    0,    0,  144,    0,    0,    0,
    0,    0,    0,    0,   71,    0,    0,    0,    0,    0,
    0,  154,  155,    0,   99,    0,  126,    0,    0,   72,
    0,  127,  128,    0,    0,    0,    0,  183,  168,   98,
    0,    0,  148,  106,  129,    0,    0,    0,  136,  105,
    0,    0,    0,  150,  138,
};
static int yydgoto[] = {                                      37,
   38,  121,   40,  100,   41,   42,   43,   44,  336,  282,
   45,   46,   47,   48,   49,  195,  229,   50,   51,  196,
   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
  178,   72,  276,  277,  327,   73,   74,  418,   75,  315,
  355,  159,  131,   76,   77,   78,   79,   80,   81,  272,
  379,  269,  324,  404,  387,  439,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,   47,    0,    0,    0,
    0,    0,    0,  388,    0,  -91,    0,    0,    0,    0,
    0, -249, -241,    0, 1213, 2337, 2141,   39,    0, 2337,
 2337, 2337, 2337, 2337, 2458, 2337,    0, 1059, -232,  192,
    0,    0,    0,    0,    0,  388,  115,   12,    0,   35,
    0,  145,   29,    0, 2062,    0,    0,    0, 3614,    0,
   32,    0,   64,    0,    0,   78,    0,    0,   65,    0,
    0,    0,  842,    0,   21,    0,    0,    0,    0,    0,
    0,    0,  388,  388,  388,  280,    0,    0,   42,   95,
   -1,    0, 1059,  157,  842,    0,    0,  119,  -26,  122,
    0,    0,    0,    0,    0,    0,   33,    0,    0,   27,
   38,   52, -223,   56,   90,  104,    0,  107,    0, 2337,
  -98,    0,  190,    0,    0,   87,   87,   87,  966, 3772,
  -25,    0,   87,   87,    0,  256,    0,   -1,  720,    0,
    0,    0,  -33,  -29,  244, 2337,    0,    0,    0,    0,
    0,  133,    0,    0,  318,  333,  337,    0,    0,  336,
  378, 2168, 2337, 2174, 2337, 2337, 2337, 2337, 2337, 2193,
 2337,    0,    0,    0,    0,    0,  150,  -22,    0,    0,
    0,  722,   62,    0,  388,    0,  194,   -1,    0,    0,
  200,  388,  400,    0,    0,  345,    0,  388,    0,  256,
    0,  445,    0,  388,   23,    0, 1456,  458,    0,  242,
    0,    0,    0,    0,    0,    0,    0, 2337,    0, 2337,
    0,  470,  269,  388,  490,    0,    0,    0,  486,    0,
  388,  -98,    0,  -98, 2248,    0, 3772,  445,  445,    0,
    0,    0,    0, 2337, 2337, 2337, 2347,  898, 2337,  898,
  448,  448,  144,  144,   87,    0,  452, 3642, 1530,  514,
  301,    0, 1700,  522,   75,    0,  445,  275,  541,  546,
    0,  586,    0,    0,    0,  558,  590,  -59,    0,    0,
  388,  211,    0,  595,    0,    0,    0,    0,    0,    0,
 3772,    0,  598,  -34,  269, -118,    0,  -98,    0, 3654,
  558,  558,  448,  448, 2347,   87,    0,    0,    0, 2337,
  609, 1736,    0,  509,   -3,    0,  558, 2364,    0,    0,
  625,  388,    0,  650,    0,  660,  449,    0,    0,  314,
  -13,  651,  628,    0,  701,    0,    0,    0,    0,  708,
  547,    0,  748,    0,  560,    0,   -1,   -1, 3679, 2337,
    0,    0,    0,    0,  388,  509,    0,  -74,    0, 3711,
  476,    0,   37,  533,  756,    0,    0,  364,  739,    0,
    0, 2337,    0,    0,  553,  786,  603,  576,  794,    0,
  388,  388,    0, 3722,  -98,  388,    0, 2439,    0,    0,
    0,    0,  779,  737,  808,    0,  711, 3772,    0,  830,
    0,  837,    0,  846,  238,  238,    0,  -98, 1796,   -1,
 3747,  614,   15,    0,    0,  828,    0,  -24,  864,  633,
  867,    0,    0,  851,    0,   -1,    0,    0, 1815,    0,
  673,    0,    0,  645,    0,  779,  793,    0,    0,    0,
  -24, 1861,    0,    0,    0,  706,   18,    0,    0,    0,
    0, 1897, 2002,    0,    0,
};
static int yyrindex[] = {                                      4,
 1826,    0,    0,    0,  792, 2798,  796,    0,    0,    0,
    0,    0,    0,    0,  912,    0,    0,    0,    0,    0,
 1321, 3247, 3328,    0,    0,    0,    0,  532,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2088, 1864,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  928,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   19,    0,    0,    0,    0,
    0,    0,    0,  815, 1198,    0,    0,    0,    0,    0,
  582,    0,    0,    0,    0,    0,    0,  114,  557,    0,
 2088,    0, 2088,    0,    0, 2887, 2495,  820,    0,    0,
 1556, 3303, 3316, 2609,  592, -105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2912,   24,    0,  259,  372, 1659, 2922, 3013,    0,   10,
    0, 3415, 3039, 3069,    0, 1578,    0, 2088,    0,    0,
  792,    0,    0,    0,  500,    0, 1195,    0,    0, 1195,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -105,    0,    0,    0,    0, -105,    0,
 3136,    0,    0, 2644,    0, 1482,    0, 2088,    0,  232,
    0,  715,  755,    0,    0,    0,    0,    0,    0,    0,
    0,   14, 2728,    0,    0,    0,    0,    0,    0,  505,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  904,    0,    0, 3521, 2763,    0,    0,    0,
    0,  638,    0,  652,    0,    0,  326,  251,  251,    0,
    0,    0,    0,    0,    0,    0,  836, 1984,    0, 2738,
  -17, 1347, 3142, 3195, 3080,    0,    0,    0,    0,    0,
    0, -105,    0,  -30,    0,    0,   88,  500,    0,    0,
 1578,    0,    0,  397,    0,  690, 3273,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2255,
   26,    0,    0,    0,  904,    0,    0,  759,    0,    0,
  429,  429, 3202, 3230, 2523, 3106,    0,    0,    0,    0,
    0,    0,    0,  767,    0,    0, 3167,    0,    0,  114,
    0,    0,  114,    0,    0, 3344,    0,    0,    0,    0,
    0,  841,    0,  -10,    0,    0,    0,    0,  -21,    0,
    0,  114,    0,    0,    0,    0,  871,  871,    0,    0,
    0,    0,    0,    0,    0,  767,    0,  423,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   25,    0, -105,    0,    0,    0,
    0,  114,   19,    0,    0,    0,    0, 1165,    0,    0,
    0,    0,  114,    0,  159,  159,    0,   48,    0,  423,
    0,    0,    0, -105,    0,    0,  114,   72,    0,    0,
    0,    0,    0,  462,    0,  423,    0, -105,    0,    0,
    0,    0,    0,    0,  114,   19,    0,    0,    0,    0,
   74,    0,    0,    0,    0,    0,    0, -105,    0,    0,
 -105,    0,    0,    0,    0,
};
static int yycindex[] = {                                    631,
 1148,    0,    0,    0, 3656, 1161,    0, 1219, 1293, 1305,
    0,    0,    0,    0, 1493,    0,    0,    0,    0, 3369,
  822,    0,    0,    0,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  184,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3668,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1515,    0, 4200,  692,    0,    0,    0,    0,    0,
  648,    0,    0,    0,    0,    0,    0, 3948,  -86,    0,
    0,    0,    0,    0,    0, 1539,  -57,    0,    0,    0,
   36,  101,  140,  153, 3260,  783,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3782,    0, 3807, 3819,  270,  365,  422,    0,    0,
    0,  920,  474,  540,    0,  705,    0,    0,    0,    0,
 4211,    0,    0,    0,    0,    0,   68,    0,    0,  128,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  897,    0,    0,    0,    0,  945,    0,
  164,    0,    0,  210,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  179,    0,    0,    0, 3696,    0,    0,  308,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  693,  212,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  556,  610,    0,  642,
  679,  749,  750,  764,  770,    0,    0,    0, 3724,    0,
    0,  992, 3752,    0,    0,    0,    0,    0,    0,    0,
  710,    0,    0, 3976,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3847,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  799,  813,  814,  819,    0,    0,    0,    0,
    0, 3780,    0,    0,    0,    0,    0,    0,    0, 4004,
    0,    0, 4032,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  300,    0,    0,    0,    0,  662,    0,
    0, 4060,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1049,    0,    0,    0,
    0, 4088,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4116,    0,    0,    0,    0,    0, 3808,    0,
    0,    0,    0, 1096,    0,    0, 4144,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1258, 3836,    0,
    0,    0,    0,    0, 4172,    0,    0,    0,    0,    0,
    0, 3864,    0,    0,    0,    0,    0, 1362,    0,    0,
 1409, 3892, 3920,    0,    0,
};
static int yygindex[] = {                                      0,
   31,    1,  -20,    0,    3,    0,    0,    0,  629, -248,
    0,  118,   11,  -55,    0,  695,    0,    0,    0,  323,
    0,    0,    0,  -49,    0,    0, -216,  443,    0,   55,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -375,    0, -189,  930, -100,   16,    2,  548,    5,    0,
  620,    0,  816,    0,    0,    0, -177,    0, -170,    0,
    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4500
static int yytable[] = {                                     329,
   39,   89,   91,    2,  231,  342,   97,  345,  101,  102,
  103,   90,  233,  169,  104,  105,  388,  413,  220,    2,
   95,  261,   65,  204,  204,  204,  204,  204,   50,  204,
  330,  106,  194,   69,  212,   93,  434,  108,  139,  137,
  356,  204,  138,  204,  109,  371,  145,  140,  301,  302,
  190,  160,  184,  190,  213,   39,  207,  158,  261,   94,
  447,  261,  142,  328,  218,  337,  191,  218,  170,  191,
  149,   36,  183,   89,  202,  204,  392,  317,  150,  368,
  281,  280,  218,  101,  102,  103,  104,  154,   89,   91,
  173,  171,  169,  151,  137,   89,  203,  138,  193,  221,
  262,  141,  182,   65,  338,  188,   39,  204,  283,  370,
  286,  339,  280,  337,   69,  277,  218,  337,   93,  357,
  266,  397,  175,  180,  259,  160,  170,  160,  160,  263,
  109,  160,  108,  316,  190,  177,  176,  428,  344,  227,
  451,  142,  197,  232,  234,  279,  187,  170,  218,  160,
  191,  337,  338,  199,  110,  136,  338,  110,  147,  339,
  236,   34,  238,  339,  120,  239,  224,    2,    2,    2,
  171,   93,  198,  148,   39,  146,  204,  171,  160,   39,
  337,  140,  265,  170,  391,  268,  174,  179,  152,  169,
  338,  185,  145,  394,  109,  230,  108,  339,  227,  267,
  347,  348,  130,  153,  278,  192,   18,   39,  185,  158,
  200,  198,  312,  397,   24,  201,  358,  130,  194,  338,
  140,  291,  400,   82,  294,  291,  339,   82,    6,  143,
  205,  298,    6,  142,  171,   65,  198,   14,   96,  204,
   50,   14,   96,  289,  206,  140,   17,   65,   65,   50,
   17,  204,  204,  293,  334,  225,  432,  198,  228,   39,
  433,  158,   39,   39,  194,  158,  140,  194,   65,   50,
  160,  135,  204,   50,   89,   91,    2,    2,    2,   18,
  218,  331,  218,  319,  193,  204,  194,   24,  160,  208,
  209,   50,  218,  218,  210,  223,    2,    3,    4,  219,
    6,  322,  219,   98,   93,  271,  403,  198,  211,   14,
   96,   99,   39,  218,  158,  406,  140,  219,   17,  214,
   89,   91,  363,   89,   91,  343,  218,  274,  197,  546,
  193,  549,  198,  193,  235,  335,  194,  409,   26,   27,
   28,  140,   89,   91,  160,  198,  215,  194,  582,  160,
   93,  219,  193,   93,  140,  385,  585,  334,  160,  160,
  216,  194,  381,  382,  429,  318,   87,  160,  160,   87,
  217,  409,   93,  389,  197,  241,  160,  197,  442,  194,
  412,  405,  406,  219,   87,  275,  408,   39,  274,  240,
  242,  192,   89,   91,  243,  244,  197,  184,  452,  184,
  184,  453,  193,   89,   91,  191,  260,  334,  582,   39,
  415,  158,  221,  193,   39,  221,  585,   89,   91,  418,
  422,  423,   93,  421,  552,  425,  555,  193,   39,   39,
  221,  158,  424,   93,  587,   89,   91,  192,  369,  245,
  192,  440,   39,  587,  158,  193,  197,   93,   39,  591,
  270,   39,   39,   39,  158,  158,  273,  197,  594,  192,
  146,  182,  130,  130,  221,   93,  130,  332,  122,  124,
  125,  197,  126,  127,  128,  129,  130,  133,  134,   12,
   13,  558,  612,  561,  130,  167,  142,  170,  395,  197,
  582,  615,  307,  169,  182,  220,  221,  284,  585,  182,
  333,  182,   50,  182,   33,  289,  182,  160,  198,  192,
  292,   50,  160,   29,  198,  219,  391,  140,   18,  274,
  192,  160,  160,  140,   18,   92,   24,  219,  219,  295,
  160,  160,   24,  567,  192,  570,  190,   33,  171,  160,
  130,    6,   33,  130,   33,  198,   33,  297,  219,   33,
   14,   96,  192,  310,  140,   18,  726,  311,  130,   17,
  130,  219,  133,   24,  597,  600,  603,  606,  729,  732,
  332,  168,  222,  393,  222,  222,  274,  222,  222,  314,
  320,   29,   12,   13,  182,  321,  182,  182,  237,  735,
  222,  222,  222,  222,   81,  326,   81,   81,   81,  573,
   81,  576,  738,  333,  247,  248,  250,  251,  252,  253,
  254,  255,  130,  258,   29,  618,   29,  621,   81,   29,
  332,   29,  222,   29,  222,  323,   29,   33,  221,   33,
   33,  233,   12,   13,   56,  340,   56,   56,   56,  341,
  221,  221,  361,  401,   82,  364,  274,   81,  350,    6,
   56,   56,   56,  333,  427,  222,  222,  274,   14,   96,
  290,  221,  291,  128,  377,  362,   29,   17,  116,  624,
  119,  627,  113,  436,  221,  110,  274,  300,   95,  130,
  184,   95,  184,  184,  130,  164,  303,  304,  305,  365,
  164,  306,   94,  130,  130,   94,   95,  366,   95,  164,
  164,  630,  130,  633,   29,  367,   29,   29,  164,  164,
   94,  372,   94,  444,  412,   56,  274,  164,  182,  182,
  182,  182,  182,  182,  182,  420,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  636,  431,
  639,  182,  182,  182,  182,  182,  450,  182,  182,  274,
  182,  182,  349,  122,  334,  115,  125,  446,  115,  374,
  360,  182,  182,  182,  182,   33,   33,   33,  375,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,  352,  353,  354,   33,   33,   33,   33,   33,  378,
   33,   33,  384,   33,   33,  114,  394,  396,  114,   96,
  222,  222,   96,  376,   33,   33,   33,   33,  642,  648,
  645,  651,  399,   81,  398,  128,  380,   96,   81,   96,
  116,  222,  119,  654,  113,  657,  400,  110,   81,  660,
  411,  663,  402,  403,  222,  416,  177,   81,   29,   29,
   29,   29,   29,   29,   29,   81,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,  702,  414,
  705,   29,   29,   29,   29,   29,  415,   29,   29,  417,
   29,   29,  708,  714,  711,  717,  208,  419,  720,  208,
  723,   29,   29,   29,   61,  421,  430,    0,    5,    8,
   11,   14,   17,   22,  208,   25,   30,   35,   40,   43,
   46,   49,   54,  435,  445,  122,   59,  437,  125,  438,
   62,   67,   71,   75,   79,  448,   83,   87,   59,   91,
   95,  114,  115,  116,  117,  118,  119,    1,  208,  128,
   98,  101,  104,  107,  116,  167,  119,  170,  113,  165,
  119,  110,   60,  169,  166,  184,  164,  271,  366,   55,
  369,   55,   55,   55,   55,   55,   55,   55,   55,  564,
  208,  579,  373,  609,  741,   61,  579,  332,  325,  144,
   55,   55,   55,   55,  441,  386,  226,  128,  264,   12,
   13,    6,  116,    6,  119,  257,  113,    0,  171,  110,
   14,   96,   14,   96,    0,    0,    0,    0,    0,   17,
  333,   17,   55,  167,    0,  170,  219,  165,  163,    0,
  164,  169,  166,   29,    0,    0,    0,    0,    0,  122,
    0,  168,  125,  172,  128,  160,  162,  161,  172,  116,
    0,  119,    0,  113,    0,   55,  110,  172,  172,    0,
    5,    8,   11,   14,   17,   22,  172,   25,   30,   35,
   40,   43,   46,   49,   54,    0,  171,    0,   59,    0,
    0,    0,   62,   67,   71,   75,   79,  122,   83,   87,
  125,   91,   95,  184,  184,  184,    0,  184,  184,    0,
    0,  128,   98,  101,  104,  107,  116,    0,  119,  168,
  113,    0,  208,  110,    0,    0,    0,   61,   82,    0,
    0,    0,    0,    6,  208,  208,   83,   84,   85,   61,
   61,    0,   14,   15,  122,    0,    0,  125,    0,    0,
    0,   17,    0,    0,    0,  208,    0,  130,  128,    0,
   61,    0,  130,  116,    0,  119,    0,  113,  208,    0,
  110,  130,  130,   61,    0,    0,    0,    0,    0,    0,
  130,    0,    0,    0,    5,    8,   11,   14,   17,   22,
    0,   25,   30,   35,   40,   43,   46,   49,   54,    0,
    0,  122,   59,    0,  125,    0,   62,   67,   71,   75,
   79,    0,   83,   87,    0,   91,   95,  177,    0,    0,
    0,    0,   55,    0,    0,    0,   98,  101,  104,  107,
   55,    0,    5,    8,   11,   14,   17,   22,   62,   25,
   30,   35,   40,   43,   46,   49,   54,    0,  122,    0,
   59,  125,    0,    0,   62,   67,   71,   75,   79,    0,
   83,   87,  130,   91,   95,    0,  130,    0,    0,    0,
    0,    0,    0,    0,   98,  101,  104,  107,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   71,   75,   79,    0,   83,   87,    0,
   91,   95,    0,    0,    0,    0,    0,    0,    0,   62,
  128,   98,  101,  104,  107,  116,    0,  119,    0,  113,
    0,    0,  110,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   71,   75,   79,    0,   83,   87,    0,   91,   95,   18,
   19,   20,  135,    0,   22,   23,    0,   24,   98,  101,
  104,  107,    0,    5,    8,   11,   14,   17,   22,    0,
   25,   30,   35,   40,   43,   46,   49,   54,    0,    0,
    0,   59,    0,    0,    0,   62,   67,   71,   75,   79,
  122,   83,   87,  125,   91,   95,    0,  205,  205,  205,
  205,  205,    0,  205,  128,   98,  101,  104,  107,  116,
    0,  119,    0,  113,  131,  205,  110,  205,    0,  135,
    0,    0,  139,  143,  147,    0,    0,  193,  151,  156,
    0,   62,  196,    0,    0,    0,    0,  160,  165,  168,
  171,  199,  202,   62,   62,    0,  174,    0,    0,  205,
  205,  128,    0,    0,    0,    0,  116,    0,  119,    0,
  113,  130,    0,  110,   62,    0,  130,    0,    0,  184,
    0,    0,  184,  184,  184,  130,  130,   62,  184,  184,
    0,  205,    0,    0,  130,  208,    0,  184,  184,    0,
  211,    0,    0,    0,  122,    0,  184,  125,   36,  214,
  217,  110,    0,   32,    0,   33,    0,   31,  220,    0,
   30,    0,    0,  111,  112,  113,  114,  115,  116,  117,
  118,  119,    0,    0,    0,    5,    8,   11,   14,   17,
   22,  140,   25,   30,   35,   40,   43,   46,   49,   54,
    0,  122,    0,   59,  125,    0,    0,   62,   67,   71,
   75,   79,    0,   83,   87,    0,   91,   95,    0,  223,
    0,    0,    0,    0,  226,    0,    0,   98,  101,  104,
  107,  238,   36,  229,  232,    0,  241,   32,    0,   33,
    0,   31,  235,    0,   30,  244,  247,  121,   34,    0,
  283,   35,  121,    0,  250,  121,  121,  121,    0,    0,
    0,  121,  121,   83,    0,   83,   83,   83,    0,   83,
  121,  121,    0,  205,    0,    0,    0,    0,    0,  121,
    0,    0,    0,    0,    0,  205,  205,   83,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,  205,   59,    0,    0,
    0,   62,   67,   71,   75,   79,   83,   83,   87,  205,
   91,   95,   34,    0,  309,   35,    0,    0,    0,    0,
    0,   98,  101,  104,  107,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   71,   75,   79,    0,   83,   87,  197,   91,   95,  197,
  197,  197,  197,  197,  197,  197,    0,    0,   98,  101,
  104,  107,    0,    2,    3,    4,    5,  197,    7,  197,
    0,    0,    0,   11,   12,   13,    0,    0,  155,  156,
  157,   16,   36,    0,    0,    0,    0,   32,  185,   33,
    0,   31,    0,  185,   30,   25,  185,  185,  185,  253,
    0,  197,  185,  185,  256,   26,   27,   28,   29,    0,
    0,  185,  185,  259,  262,    0,    0,    0,   36,    0,
  185,  342,  265,   32,    0,   33,  345,   31,    0,    0,
   30,    0,  197,  197,    0,  348,  351,    2,    3,    4,
    5,    0,    7,    0,  354,  253,    0,   11,   12,   13,
  256,    0,  155,  156,  157,   16,    0,    0,    0,  259,
  262,    0,   83,    0,    0,    0,    0,   83,  265,   25,
    0,    0,   34,    0,  313,   35,    0,   83,   36,   26,
   27,   28,   29,   32,    0,   33,   83,   31,    0,  184,
   30,    0,    0,    0,   83,    0,    0,   36,  184,  184,
    0,    0,   32,    0,   33,    0,   31,  184,   34,   30,
  351,   35,    0,   50,    0,    0,    0,   50,   50,    0,
   50,   50,   50,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   50,   50,   50,   50,    0,    0,
    0,    0,    0,   36,    0,    0,    0,    0,   32,    0,
   33,    0,   31,  195,    0,   30,  195,    0,  195,  195,
  195,    0,    0,    0,    0,  197,   50,    0,   34,    0,
  424,   35,  195,    0,  195,  195,    0,  197,  197,   36,
    0,    0,    0,    0,   32,    0,   33,   34,   31,  443,
   35,   30,    0,    0,    0,    0,    0,    0,  197,   50,
    0,    0,    0,    0,  195,    0,    0,    2,    3,    4,
    5,  197,    7,    0,    0,    0,    0,   11,   12,   13,
    0,    0,  155,  156,  157,   16,    0,    0,    0,    0,
    0,    0,    0,   34,    0,  449,   35,  195,    0,   25,
    0,    0,    0,    2,    3,    4,    5,    0,    7,   26,
   27,   28,   29,   11,   12,   13,    0,    0,  155,  156,
  157,   16,    0,    0,    0,    0,    0,    0,    0,   34,
    0,  454,   35,    0,  202,   25,  202,  202,  202,    0,
    0,    0,    0,    0,   36,   26,   27,   28,   29,   32,
    0,   33,  202,   31,  202,    0,   30,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,   13,    0,    0,  155,  156,
  157,   16,    2,    3,    4,    5,  202,    7,    0,    0,
    0,    0,   11,   12,   13,   25,    0,  155,  156,  157,
   16,    0,    0,    0,   36,   26,   27,   28,   29,   32,
    0,   33,    0,   31,   25,    0,   30,    0,  202,  185,
    0,  185,  185,    0,   26,   27,   28,   29,    2,    3,
    4,    5,    0,    7,   34,    0,  455,   35,   11,   12,
   13,    0,    0,  155,  156,  157,   16,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   25,    0,    0,    0,    2,    3,    4,    5,    0,    7,
   26,   27,   28,   29,   11,   12,   13,    0,    0,  155,
  156,  157,   16,   36,    0,    0,    0,    0,   32,    0,
   33,    0,   31,    0,   34,   30,   25,   35,    0,    0,
    0,    0,    0,    0,    0,    0,   26,   27,   28,   29,
   36,    0,    0,    0,    0,   32,   36,   33,    0,   31,
    0,   32,   30,   33,    0,   31,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   36,    0,    0,  246,    0,
   32,  123,   33,  256,   31,  249,    0,   30,    0,    0,
  202,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  202,  202,    0,    0,    0,    0,    0,    2,
    3,    4,    5,   34,    7,    0,  120,    0,    0,   11,
   12,   13,    0,  202,  155,  156,  157,   16,    0,    0,
   36,    0,    0,    0,    0,   32,  202,   33,    0,   31,
   34,   25,   30,  120,    0,  220,   34,    0,  220,  120,
    0,   26,   27,   28,   29,    0,    0,    0,    0,    0,
    0,    0,    0,  220,    0,   34,    0,    0,  120,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,   13,    0,    0,  155,  156,  157,   16,    0,    0,
  299,    0,    0,    0,  130,    0,    0,  220,    0,  130,
    0,   25,  130,  130,  130,    0,    0,    0,  130,  130,
    0,   26,   27,   28,   29,    0,    0,  130,    0,   36,
   34,    0,    0,  120,   32,    0,   33,    0,   31,  220,
    0,   30,    0,    0,  167,    0,  170,    0,  165,  163,
    0,  164,  169,  166,    0,    0,   36,   82,    2,    3,
    4,   32,    6,   33,    0,   31,    0,  162,   30,    0,
    0,   14,   96,    0,    0,    0,    0,    0,    0,    0,
   17,    0,    0,    0,   82,    2,    3,    4,    0,    6,
   82,    2,    3,    4,    0,    6,    0,  171,   14,   96,
   26,   27,   28,    0,   14,   96,    0,   17,    0,   82,
    2,    3,    4,   17,    6,    0,  359,    0,    0,   34,
    0,    0,  120,   14,   96,    0,    0,   26,   27,   28,
  168,   36,   17,   26,   27,   28,   32,    0,   33,    0,
   31,    0,    0,   30,    0,    0,   34,    0,    0,  120,
   36,    0,   26,   27,   28,   32,    0,   33,    0,   31,
    0,    0,   30,    0,   82,    2,    3,    4,    0,    6,
    0,  220,    0,    0,    0,    0,    0,    0,   14,   96,
    0,    0,    0,  220,  220,    0,    0,   17,    0,    0,
    0,  410,   54,    0,   54,   54,   54,   54,   54,   54,
   54,   54,    0,    0,  220,    0,    0,   26,   27,   28,
    0,    0,    0,   54,   54,   54,   54,  220,    0,    0,
    0,   34,    0,  210,  120,    0,  210,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   34,  210,    0,  120,    0,   54,    0,   54,    0,    0,
    0,    0,    0,   82,    2,    3,    4,    0,    6,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   96,    0,
    0,    0,    0,    0,    0,  210,   17,   54,   54,   54,
   82,    2,    3,    4,    0,    6,    0,    0,    0,    0,
    0,    0,    0,    0,   14,   96,   26,   27,   28,    0,
    0,    0,    0,   17,    0,    0,   51,  210,   51,   51,
   51,   51,   51,   51,   51,   51,    0,    0,    0,    0,
    0,    0,    0,   26,   27,   28,    0,   51,   51,   51,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  130,    0,  130,  130,  130,    0,  130,    0,    0,
    0,    0,    0,    0,    0,   82,    2,    3,    4,   51,
    6,   51,    0,    0,    0,  130,    0,    0,    0,   14,
   96,    0,    0,    0,  132,    2,    3,    4,   17,    6,
    0,    0,    0,    0,    0,    0,    0,    0,   14,   96,
    0,   51,   51,   51,  130,    0,    0,   17,   26,   27,
   28,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,    0,    0,    0,    0,   54,   26,   27,   28,
    0,    0,    0,   54,   54,   56,   54,   56,   56,   56,
   56,   56,   56,   56,   56,   54,    0,    0,  203,  210,
  203,  203,  203,   54,   54,    0,   56,   56,   56,   56,
    0,  210,  210,    0,    0,    0,  203,   54,  203,    0,
   52,    0,   52,   52,   52,   52,   52,   52,   52,   52,
    0,    0,  210,    0,    0,    0,    0,    0,   56,    0,
   56,   52,   52,   52,   52,  210,    0,    0,    0,    0,
  203,    0,    0,    0,    0,   53,    0,   53,   53,   53,
   53,   53,   53,   53,   53,    0,    0,    0,    0,    0,
   56,   56,   56,   52,    0,   52,   53,   53,   53,   53,
    0,    0,  203,    0,    0,   51,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,    0,   51,   51,    0,
   51,    0,    0,    0,    0,   52,   52,   52,   53,   51,
   53,    0,    0,    0,    0,    0,    0,   51,   51,    0,
  130,    0,    0,    0,    0,  130,    0,    0,    0,    0,
    0,   51,    0,    0,  130,  130,    0,    0,    0,    0,
   53,   53,   53,  130,   55,    0,   55,   55,   55,   55,
   55,   55,   55,   55,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   55,   55,   55,   55,  195,
    0,  195,  195,  195,  195,  195,  195,  195,  195,  200,
    0,    0,  200,  200,  200,  200,  200,  200,  200,    0,
  195,  195,  195,  195,    0,    0,    0,   55,    0,   55,
  200,    0,  200,    0,   56,    0,    0,    0,    0,   56,
    0,    0,    0,    0,  203,    0,   56,   56,    0,   56,
    0,    0,  195,    0,  195,    0,  203,  203,   56,   55,
   55,   55,    0,    0,  200,    0,   56,   56,    0,   52,
    0,    0,    0,    0,   52,    0,    0,  203,    0,    0,
   56,   52,   52,    0,   52,  195,  195,    0,    0,    0,
  203,    0,    0,   52,    0,  200,  200,    0,    0,    0,
  201,   52,   52,  201,  201,  201,  201,  201,  201,  201,
    0,    0,    0,    0,    0,   52,   53,   53,    0,    0,
    0,  201,    0,  201,    0,    0,  198,    0,   53,  198,
  198,  198,  198,  198,  198,  198,   53,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  198,    0,  198,
   53,    0,    0,    0,    0,  201,  199,    0,    0,  199,
  199,  199,  199,  199,  199,  199,    0,  214,    0,    0,
  214,  214,  214,  214,  214,  214,  214,  199,    0,  199,
    0,  198,    0,    0,    0,    0,  201,  201,  214,    0,
  214,    0,    0,  213,    0,    0,  213,  213,  213,  213,
  213,  213,  213,    0,    0,   55,   55,    0,    0,    0,
    0,  199,  198,  198,  213,    0,  213,   55,  195,    0,
    0,    0,  214,   50,    0,   55,   55,   50,  200,  206,
  195,  195,  206,  206,  206,  206,  206,    0,  206,   55,
  200,  200,  199,  199,   50,   50,    0,    0,  213,    0,
  206,  195,  206,  214,  214,    0,  164,  164,    0,    0,
  164,  200,    0,    0,  195,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  200,    0,    0,    0,  164,  213,
  213,    0,  207,    0,  206,  207,  207,  207,  207,  207,
    0,  207,  211,  211,  211,  211,  211,    0,  211,    0,
    0,    0,    0,  207,    0,  207,    0,  164,    0,    0,
  211,    0,  211,    0,    0,  206,  206,    0,    0,  201,
  212,  212,  212,  212,  212,    0,  212,    0,    0,    0,
    0,  201,  201,    0,    0,    0,    0,  207,  212,    0,
  212,    0,    0,    0,  211,  198,    0,  426,    0,  426,
  426,  426,  201,  426,    0,    0,    0,  198,  198,    0,
  161,    0,  161,  161,    0,  201,  161,    0,  207,  207,
    0,  426,  212,    0,    0,  199,  211,    0,  198,    0,
    0,    0,    0,    0,  161,    0,  214,  199,  199,    0,
   84,  198,   84,   84,   84,    0,   84,    0,  214,  214,
  426,    0,    0,   85,  212,   85,   85,   85,  199,   85,
    0,    0,  213,  161,   84,    0,    0,    0,    0,  214,
    0,  199,  120,    0,  213,  213,    0,   85,    0,    0,
    0,    0,  214,  165,  165,    0,    0,  165,    0,    0,
    0,    0,  185,   84,    0,  213,    0,  185,  206,    0,
  185,  185,  185,    0,    0,  165,   85,  185,  213,    0,
  206,  206,    0,    0,    0,    0,  185,  185,  185,  185,
    0,  185,  185,  164,  185,    0,    0,    0,  164,    0,
    0,  206,    0,    0,  165,    0,    0,  164,  164,    0,
    0,    0,    0,    0,  206,    0,  164,  164,    0,    0,
    0,  207,   50,  123,    0,  164,   50,   50,  211,   50,
   50,   50,    0,  207,  207,    0,    0,    0,    0,    0,
  211,  211,    0,   50,   50,   50,   50,    0,    0,    0,
    0,    0,    0,    0,  207,    0,  212,    0,    0,    0,
    0,  211,    0,    0,  267,    0,    0,  207,  212,  212,
    0,    0,    0,  120,  211,   50,    0,    0,  120,    0,
    0,  120,  120,  120,    0,    0,  426,  120,  120,  212,
    0,  426,    0,    0,    0,    0,  120,  120,    0,  161,
  430,  426,  212,    0,  161,  120,    0,    0,   50,  434,
  426,    0,    0,  161,  161,    0,    0,    0,  426,    0,
    0,    0,  161,  161,    0,    0,    0,    0,   50,   84,
   50,  161,   50,   50,   84,   50,   50,   50,    0,    0,
    0,    0,   85,    0,   84,    0,    0,   85,    0,   50,
   50,   50,   50,   84,  123,    0,    0,   85,    0,  123,
    0,   84,  123,  123,  123,    0,   85,    0,  123,  123,
  165,    0,    0,    0,   85,  165,    0,  123,  123,    0,
    0,   50,    0,    0,  165,  165,  123,    0,    0,    0,
    0,    0,    0,  165,  165,  267,    0,    0,    0,    0,
  267,    0,  165,  267,  267,  267,    0,    0,    0,  267,
  267,    0,    0,    0,   50,    0,    0,    0,  267,  267,
    0,  167,    0,  170,    0,  165,  163,  267,  164,  169,
  166,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  172,  160,  162,  161,    0,    0,    0,  167,
    0,  170,    0,  165,  163,   50,  164,  169,  166,    0,
    0,  167,    0,  170,   50,  165,  163,    0,  164,  169,
  166,  160,  162,  161,  171,    0,    0,    0,    0,    0,
    0,    0,    0,  160,  162,  161,  167,    0,  170,  383,
  165,  163,    0,  164,  169,  166,    0,    0,    0,    0,
    0,    0,  171,    0,  308,    0,    0,  168,  160,  162,
  161,    0,    0,    0,  171,    0,  346,    0,  167,    0,
  170,    0,  165,  163,    0,  164,  169,  166,    0,  167,
    0,  170,  407,  165,  163,  168,  164,  169,  166,  171,
  160,  162,  161,    0,    0,    0,    0,  168,    0,    0,
    0,  160,  162,  161,  167,    0,  170,    0,  165,  163,
    0,  164,  169,  166,    0,    0,    0,    0,    0,    0,
   50,  171,  168,  390,    0,    0,  160,  162,  161,  167,
    0,  170,  171,  165,  163,    0,  164,  169,  166,  459,
    0,  468,    0,  453,  447,    0,  450,  465,  456,    0,
    0,  160,  162,  161,  168,    0,    0,  171,    0,  426,
    0,  438,  444,  441,  495,  168,  504,    0,  489,  483,
    0,  486,  501,  492,    0,    0,  531,    0,  540,    0,
  525,  519,  171,  522,  537,  528,  474,  480,  477,    0,
  168,    0,  471,    0,    0,    0,    0,    0,  510,  516,
  513,    0,    0,    0,  687,    0,  696,    0,  681,  675,
    0,  678,  693,  684,    0,  168,    0,  507,    0,    0,
    0,    0,    0,    0,    0,  462,  666,  672,  669,  543,
    0,    0,  180,    0,    0,    0,    0,  183,    0,    0,
  183,  183,  183,    0,  295,    0,  183,  183,    0,  299,
  498,    0,  303,  307,  311,  183,  187,  699,  315,  319,
    0,    0,  534,    0,  190,    0,    0,  323,  187,  327,
  330,  333,  295,  336,  339,    0,  190,  299,    0,    0,
  303,  307,  311,    0,    0,    0,  315,  319,    0,    0,
  690,    0,    0,    0,    0,  323,  187,  327,  330,  333,
  295,  336,  339,    0,  190,  299,    0,    0,  303,  307,
  311,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  330,  333,  295,  336,
  339,    0,  190,  299,    0,    0,  303,  307,  311,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  330,  333,  295,  336,  339,    0,
  190,  299,    0,    0,  303,  307,  311,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  330,  333,  295,  336,  339,    0,  190,  299,
    0,    0,  303,  307,  311,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  330,  333,  295,  336,  339,    0,  190,  299,    0,    0,
  303,  307,  311,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  330,  333,
  295,  336,  339,    0,  190,  299,    0,    0,  303,  307,
  311,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  330,  333,  295,  336,
  339,    0,  190,  299,    0,    0,  303,  307,  311,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  330,  333,  295,  336,  339,    0,
  190,  299,    0,    0,  303,  307,  311,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  330,  333,  372,  336,  339,    0,  190,  299,
    0,    0,  376,  380,  384,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  388,    0,  372,    0,    0,    0,  190,  299,    0,    0,
  376,  380,  384,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  388,    0,
  372,    0,    0,    0,  190,  299,    0,    0,  376,  380,
  384,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  388,    0,  372,    0,
    0,    0,  190,  299,    0,    0,  376,  380,  384,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  388,    0,  372,    0,    0,    0,
  190,  299,    0,    0,  376,  380,  384,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  388,    0,  372,    0,    0,    0,  190,  299,
    0,    0,  376,  380,  384,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  388,    0,  372,    0,    0,    0,  190,  299,    0,    0,
  376,  380,  384,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  388,    0,
  372,    0,    0,    0,  190,  299,    0,    0,  376,  380,
  384,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  388,    0,  372,    0,
    0,    0,  190,  299,    0,    0,  376,  380,  384,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  388,    0,  356,    0,    0,    0,
  190,  356,    0,    0,  356,  356,  356,  180,    0,    0,
  356,  356,  183,    0,    0,  183,  183,  183,    0,  356,
  360,  183,  183,    0,    0,    0,    0,    0,  363,    0,
  183,  187,    0,    0,    0,    0,    0,    0,    0,  190,
};
static int yycheck[] = {                                      59,
    0,    1,    1,    0,   38,   40,    6,  126,    8,    9,
   10,    1,   42,   44,   14,   15,   91,  393,   44,  125,
    5,   44,   44,   41,   42,   43,   44,   45,   59,   47,
  279,  123,   88,   44,  258,    5,   61,  287,  271,   38,
   44,   59,   38,   61,  286,   59,   46,  280,  238,  239,
   41,   38,   73,   44,  278,   55,  106,   55,   44,    5,
  436,   44,   44,  123,   41,  282,   41,   44,   44,   44,
   59,   33,   72,   73,   95,   93,   40,  267,   44,  328,
   58,   59,   59,   83,   84,   85,   86,   59,   88,   88,
   59,   44,  123,   59,   93,   95,   96,   93,   88,  125,
  123,   60,   72,  125,  282,   75,  106,  125,   38,  123,
   40,  282,   42,  330,  125,   45,   93,  334,   88,  123,
   59,  370,   59,   59,  174,   38,   40,   40,   41,  179,
   59,   44,   59,   59,  125,   58,   59,  123,  257,  139,
  123,  123,   88,  143,  144,  123,  126,  123,  125,   62,
  125,  368,  330,   59,   41,   38,  334,   44,   44,  330,
  145,  123,  147,  334,  126,  150,  136,  273,  274,  275,
  123,  141,  271,   59,  174,   61,   58,   91,   91,  179,
  397,  280,  182,   40,  271,  185,  123,  123,   44,   46,
  368,   74,  192,  280,  123,  141,  123,  368,  198,  184,
  301,  302,   44,   59,  204,   88,  281,  207,   91,  207,
   93,  271,  262,  271,  289,   59,  317,   59,  274,  397,
  280,   38,  280,  257,  224,   42,  397,  257,  262,   38,
  257,  231,  262,   42,   91,  257,  271,  271,  272,  257,
  271,  271,  272,   60,  123,  280,  280,  269,  270,  280,
  280,  269,  270,  223,   44,  138,  281,  271,  141,  259,
  285,  259,  262,  263,  320,  263,  280,  323,  290,   38,
  257,   40,  290,   42,  274,  274,  273,  274,  275,  281,
  257,  281,   93,  268,  274,  303,  342,  289,   38,  257,
  264,   60,  269,  270,  257,   40,  258,  259,  260,   41,
  262,  271,   44,  257,  274,  188,  271,  271,  257,  271,
  272,  265,  312,  290,  312,  280,  280,   59,  280,  264,
  320,  320,  322,  323,  323,  295,  303,  257,  274,   60,
  320,   62,  271,  323,   91,  125,  392,  387,  300,  301,
  302,  280,  342,  342,  257,  271,  257,  403,  281,  262,
  320,   93,  342,  323,  280,  355,  289,   44,  271,  272,
  257,  417,  347,  348,  414,   91,   41,  280,  281,   44,
  264,  271,  342,  358,  320,   58,  289,  323,  428,  435,
  280,  381,  382,  125,   59,   41,  386,  387,   44,  257,
   58,  274,  392,  392,   58,   60,  342,  284,  448,  286,
  287,  451,  392,  403,  403,  126,  257,   44,  281,  409,
  271,  409,   41,  403,  414,   44,  289,  417,  417,  280,
  405,  406,  392,  271,   60,  410,   62,  417,  428,  429,
   59,  429,  280,  403,  271,  435,  435,  320,  125,   62,
  323,  426,  442,  280,  442,  435,  392,  417,  448,  271,
  257,  451,  452,  453,  452,  453,  257,  403,  280,  342,
   61,    0,   40,   41,   93,  435,   44,  257,   26,   27,
   28,  417,   30,   31,   32,   33,   34,   35,   36,  269,
  270,   60,  271,   62,   62,   38,   42,   40,  125,  435,
  281,  280,   41,   46,   33,   44,  125,   40,  289,   38,
  290,   40,  271,   42,    0,  264,   45,  257,  271,  392,
   41,  280,  262,  303,  271,  257,   41,  280,  281,   44,
  403,  271,  272,  280,  281,  257,  289,  269,  270,   40,
  280,  281,  289,   60,  417,   62,  257,   33,   91,  289,
   41,  262,   38,   44,   40,  271,   42,   62,  290,   45,
  271,  272,  435,   40,  280,  281,  257,  257,   59,  280,
   61,  303,  120,  289,  257,  258,  259,  260,  269,  270,
  257,  124,   41,   41,   43,   44,   44,   46,   47,   58,
   40,    0,  269,  270,  123,   40,  125,  126,  146,  290,
   59,   60,   61,   62,   38,   38,   40,   41,   42,   60,
   44,   62,  303,  290,  162,  163,  164,  165,  166,  167,
  168,  169,  170,  171,   33,   60,  303,   62,   62,   38,
  257,   40,   91,   42,   93,   40,   45,  123,  257,  125,
  126,   42,  269,  270,   43,   41,   45,   46,   47,   42,
  269,  270,  320,   41,  257,  323,   44,   91,   40,  262,
   59,   60,   61,  290,   41,  124,  125,   44,  271,  272,
  218,  290,  220,   33,  342,   41,  303,  280,   38,   60,
   40,   62,   42,   41,  303,   45,   44,  235,   41,  257,
  284,   44,  286,  287,  262,  257,  244,  245,  246,   40,
  262,  249,   41,  271,  272,   44,   59,   38,   61,  271,
  272,   60,  280,   62,  123,  257,  125,  126,  280,  281,
   59,   61,   61,   41,  392,  124,   44,  289,  257,  258,
  259,  260,  261,  262,  263,  403,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,   60,  417,
   62,  280,  281,  282,  283,  284,   41,  286,  287,   44,
  289,  290,  310,  123,   44,   41,  126,  435,   44,   59,
  318,  300,  301,  302,  303,  261,  262,  263,   61,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  273,  274,  275,  280,  281,  282,  283,  284,   42,
  286,  287,  350,  289,  290,   41,   41,   59,   44,   41,
  269,  270,   44,  257,  300,  301,  302,  303,   60,   60,
   62,   62,  260,  257,  372,   33,  257,   59,  262,   61,
   38,  290,   40,   60,   42,   62,   41,   45,  272,   60,
  388,   62,  257,   40,  303,  125,   58,  281,  257,  258,
  259,  260,  261,  262,  263,  289,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,   60,  123,
   62,  280,  281,  282,  283,  284,   59,  286,  287,   40,
  289,  290,   60,   60,   62,   62,   41,   41,   60,   44,
   62,  300,  301,  302,   44,   40,   59,  257,  258,  259,
  260,  261,  262,  263,   59,  265,  266,  267,  268,  269,
  270,  271,  272,   40,  260,  123,  276,   41,  126,   59,
  280,  281,  282,  283,  284,  123,  286,  287,  123,  289,
  290,  294,  295,  296,  297,  298,  299,    0,   93,   33,
  300,  301,  302,  303,   38,   38,   40,   40,   42,   42,
  126,   45,  123,   46,   47,   42,  257,  126,  257,   38,
  303,   40,   41,   42,   43,   44,   45,   46,   47,   40,
  125,  257,  334,  271,  303,  125,  257,  257,  274,   40,
   59,   60,   61,   62,  427,  356,  257,   33,  257,  269,
  270,  262,   38,  262,   40,  170,   42,   -1,   91,   45,
  271,  272,  271,  272,   -1,   -1,   -1,   -1,   -1,  280,
  290,  280,   91,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,  303,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  124,  126,  257,   33,   60,   61,   62,  262,   38,
   -1,   40,   -1,   42,   -1,  124,   45,  271,  272,  257,
  258,  259,  260,  261,  262,  263,  280,  265,  266,  267,
  268,  269,  270,  271,  272,   -1,   91,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  123,  286,  287,
  126,  289,  290,  282,  283,  284,   -1,  286,  287,   -1,
   -1,   33,  300,  301,  302,  303,   38,   -1,   40,  124,
   42,   -1,  257,   45,   -1,   -1,   -1,  257,  257,   -1,
   -1,   -1,   -1,  262,  269,  270,  265,  266,  267,  269,
  270,   -1,  271,  272,  123,   -1,   -1,  126,   -1,   -1,
   -1,  280,   -1,   -1,   -1,  290,   -1,  257,   33,   -1,
  290,   -1,  262,   38,   -1,   40,   -1,   42,  303,   -1,
   45,  271,  272,  303,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
   -1,  123,  276,   -1,  126,   -1,  280,  281,  282,  283,
  284,   -1,  286,  287,   -1,  289,  290,   40,   -1,   -1,
   -1,   -1,  281,   -1,   -1,   -1,  300,  301,  302,  303,
  289,  257,  258,  259,  260,  261,  262,  263,   44,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,  123,   -1,
  276,  126,   -1,   -1,  280,  281,  282,  283,  284,   -1,
  286,  287,   38,  289,  290,   -1,   42,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  300,  301,  302,  303,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,   -1,  286,  287,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   33,  300,  301,  302,  303,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,   -1,  286,  287,   -1,  289,  290,  281,
  282,  283,  284,   -1,  286,  287,   -1,  289,  300,  301,
  302,  303,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  123,  286,  287,  126,  289,  290,   -1,   41,   42,   43,
   44,   45,   -1,   47,   33,  300,  301,  302,  303,   38,
   -1,   40,   -1,   42,  257,   59,   45,   61,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,  257,  271,  272,
   -1,  257,  262,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,  271,  272,  269,  270,   -1,  289,   -1,   -1,   93,
  280,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,  257,   -1,   45,  290,   -1,  262,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,  271,  272,  303,  271,  272,
   -1,  125,   -1,   -1,  280,  257,   -1,  280,  281,   -1,
  262,   -1,   -1,   -1,  123,   -1,  289,  126,   33,  271,
  272,  279,   -1,   38,   -1,   40,   -1,   42,  280,   -1,
   45,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   40,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,  123,   -1,  276,  126,   -1,   -1,  280,  281,  282,
  283,  284,   -1,  286,  287,   -1,  289,  290,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  300,  301,  302,
  303,  257,   33,  271,  272,   -1,  262,   38,   -1,   40,
   -1,   42,  280,   -1,   45,  271,  272,  257,  123,   -1,
  125,  126,  262,   -1,  280,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   38,   -1,   40,   41,   42,   -1,   44,
  280,  281,   -1,  257,   -1,   -1,   -1,   -1,   -1,  289,
   -1,   -1,   -1,   -1,   -1,  269,  270,   62,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,  290,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,   91,  286,  287,  303,
  289,  290,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,
   -1,  300,  301,  302,  303,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,   -1,  286,  287,   38,  289,  290,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,  300,  301,
  302,  303,   -1,  258,  259,  260,  261,   59,  263,   61,
   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,   33,   -1,   -1,   -1,   -1,   38,  257,   40,
   -1,   42,   -1,  262,   45,  290,  265,  266,  267,  257,
   -1,   93,  271,  272,  262,  300,  301,  302,  303,   -1,
   -1,  280,  281,  271,  272,   -1,   -1,   -1,   33,   -1,
  289,  257,  280,   38,   -1,   40,  262,   42,   -1,   -1,
   45,   -1,  124,  125,   -1,  271,  272,  258,  259,  260,
  261,   -1,  263,   -1,  280,  257,   -1,  268,  269,  270,
  262,   -1,  273,  274,  275,  276,   -1,   -1,   -1,  271,
  272,   -1,  257,   -1,   -1,   -1,   -1,  262,  280,  290,
   -1,   -1,  123,   -1,  125,  126,   -1,  272,   33,  300,
  301,  302,  303,   38,   -1,   40,  281,   42,   -1,  262,
   45,   -1,   -1,   -1,  289,   -1,   -1,   33,  271,  272,
   -1,   -1,   38,   -1,   40,   -1,   42,  280,  123,   45,
  125,  126,   -1,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   40,   -1,   45,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,  257,   91,   -1,  123,   -1,
  125,  126,   59,   -1,   61,   62,   -1,  269,  270,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,  125,
  126,   45,   -1,   -1,   -1,   -1,   -1,   -1,  290,  124,
   -1,   -1,   -1,   -1,   91,   -1,   -1,  258,  259,  260,
  261,  303,  263,   -1,   -1,   -1,   -1,  268,  269,  270,
   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,  126,  124,   -1,  290,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,  300,
  301,  302,  303,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   41,  290,   43,   44,   45,   -1,
   -1,   -1,   -1,   -1,   33,  300,  301,  302,  303,   38,
   -1,   40,   59,   42,   61,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,  258,  259,  260,  261,   93,  263,   -1,   -1,
   -1,   -1,  268,  269,  270,  290,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   33,  300,  301,  302,  303,   38,
   -1,   40,   -1,   42,  290,   -1,   45,   -1,  125,  284,
   -1,  286,  287,   -1,  300,  301,  302,  303,  258,  259,
  260,  261,   -1,  263,  123,   -1,  125,  126,  268,  269,
  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
  300,  301,  302,  303,  268,  269,  270,   -1,   -1,  273,
  274,  275,  276,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,  123,   45,  290,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  300,  301,  302,  303,
   33,   -1,   -1,   -1,   -1,   38,   33,   40,   -1,   42,
   -1,   38,   45,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   61,   -1,
   38,   91,   40,   41,   42,   62,   -1,   45,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,  123,  263,   -1,  126,   -1,   -1,  268,
  269,  270,   -1,  290,  273,  274,  275,  276,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,  303,   40,   -1,   42,
  123,  290,   45,  126,   -1,   41,  123,   -1,   44,  126,
   -1,  300,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  123,   -1,   -1,  126,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
   93,   -1,   -1,   -1,  257,   -1,   -1,   93,   -1,  262,
   -1,  290,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,  300,  301,  302,  303,   -1,   -1,  280,   -1,   33,
  123,   -1,   -1,  126,   38,   -1,   40,   -1,   42,  125,
   -1,   45,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   33,  257,  258,  259,
  260,   38,  262,   40,   -1,   42,   -1,   61,   45,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,
  257,  258,  259,  260,   -1,  262,   -1,   91,  271,  272,
  300,  301,  302,   -1,  271,  272,   -1,  280,   -1,  257,
  258,  259,  260,  280,  262,   -1,   93,   -1,   -1,  123,
   -1,   -1,  126,  271,  272,   -1,   -1,  300,  301,  302,
  124,   33,  280,  300,  301,  302,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,  123,   -1,   -1,  126,
   33,   -1,  300,  301,  302,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,  257,  258,  259,  260,   -1,  262,
   -1,  257,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,  269,  270,   -1,   -1,  280,   -1,   -1,
   -1,   93,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,  290,   -1,   -1,  300,  301,  302,
   -1,   -1,   -1,   59,   60,   61,   62,  303,   -1,   -1,
   -1,  123,   -1,   41,  126,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   59,   -1,  126,   -1,   91,   -1,   93,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   93,  280,  123,  124,  125,
  257,  258,  259,  260,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,  300,  301,  302,   -1,
   -1,   -1,   -1,  280,   -1,   -1,   38,  125,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  300,  301,  302,   -1,   59,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   40,   41,   42,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   91,
  262,   93,   -1,   -1,   -1,   62,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,  257,  258,  259,  260,  280,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,  123,  124,  125,   91,   -1,   -1,  280,  300,  301,
  302,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,  300,  301,  302,
   -1,   -1,   -1,  269,  270,   38,  272,   40,   41,   42,
   43,   44,   45,   46,   47,  281,   -1,   -1,   41,  257,
   43,   44,   45,  289,  290,   -1,   59,   60,   61,   62,
   -1,  269,  270,   -1,   -1,   -1,   59,  303,   61,   -1,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   59,   60,   61,   62,  303,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,   91,   -1,   93,   59,   60,   61,   62,
   -1,   -1,  125,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,
  272,   -1,   -1,   -1,   -1,  123,  124,  125,   91,  281,
   93,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,  303,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
  123,  124,  125,  280,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,   91,   -1,   93,
   59,   -1,   61,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,  257,   -1,  269,  270,   -1,  272,
   -1,   -1,   91,   -1,   93,   -1,  269,  270,  281,  123,
  124,  125,   -1,   -1,   93,   -1,  289,  290,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  290,   -1,   -1,
  303,  269,  270,   -1,  272,  124,  125,   -1,   -1,   -1,
  303,   -1,   -1,  281,   -1,  124,  125,   -1,   -1,   -1,
   38,  289,  290,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,  303,  269,  270,   -1,   -1,
   -1,   59,   -1,   61,   -1,   -1,   38,   -1,  281,   41,
   42,   43,   44,   45,   46,   47,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
  303,   -1,   -1,   -1,   -1,   93,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   59,   -1,   61,
   -1,   93,   -1,   -1,   -1,   -1,  124,  125,   59,   -1,
   61,   -1,   -1,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,  269,  270,   -1,   -1,   -1,
   -1,   93,  124,  125,   59,   -1,   61,  281,  257,   -1,
   -1,   -1,   93,   38,   -1,  289,  290,   42,  257,   38,
  269,  270,   41,   42,   43,   44,   45,   -1,   47,  303,
  269,  270,  124,  125,   59,   60,   -1,   -1,   93,   -1,
   59,  290,   61,  124,  125,   -1,   40,   41,   -1,   -1,
   44,  290,   -1,   -1,  303,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,   62,  124,
  125,   -1,   38,   -1,   93,   41,   42,   43,   44,   45,
   -1,   47,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   59,   -1,   61,   -1,   91,   -1,   -1,
   59,   -1,   61,   -1,   -1,  124,  125,   -1,   -1,  257,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,  269,  270,   -1,   -1,   -1,   -1,   93,   59,   -1,
   61,   -1,   -1,   -1,   93,  257,   -1,   38,   -1,   40,
   41,   42,  290,   44,   -1,   -1,   -1,  269,  270,   -1,
   38,   -1,   40,   41,   -1,  303,   44,   -1,  124,  125,
   -1,   62,   93,   -1,   -1,  257,  125,   -1,  290,   -1,
   -1,   -1,   -1,   -1,   62,   -1,  257,  269,  270,   -1,
   38,  303,   40,   41,   42,   -1,   44,   -1,  269,  270,
   91,   -1,   -1,   38,  125,   40,   41,   42,  290,   44,
   -1,   -1,  257,   91,   62,   -1,   -1,   -1,   -1,  290,
   -1,  303,  126,   -1,  269,  270,   -1,   62,   -1,   -1,
   -1,   -1,  303,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,  257,   91,   -1,  290,   -1,  262,  257,   -1,
  265,  266,  267,   -1,   -1,   62,   91,  272,  303,   -1,
  269,  270,   -1,   -1,   -1,   -1,  281,  282,  283,  284,
   -1,  286,  287,  257,  289,   -1,   -1,   -1,  262,   -1,
   -1,  290,   -1,   -1,   91,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,  303,   -1,  280,  281,   -1,   -1,
   -1,  257,   38,  126,   -1,  289,   42,   43,  257,   45,
   46,   47,   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,
  269,  270,   -1,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,   -1,  257,   -1,   -1,   -1,
   -1,  290,   -1,   -1,  126,   -1,   -1,  303,  269,  270,
   -1,   -1,   -1,  257,  303,   91,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,  257,  271,  272,  290,
   -1,  262,   -1,   -1,   -1,   -1,  280,  281,   -1,  257,
  271,  272,  303,   -1,  262,  289,   -1,   -1,  124,  280,
  281,   -1,   -1,  271,  272,   -1,   -1,   -1,  289,   -1,
   -1,   -1,  280,  281,   -1,   -1,   -1,   -1,   38,  257,
   40,  289,   42,   43,  262,   45,   46,   47,   -1,   -1,
   -1,   -1,  257,   -1,  272,   -1,   -1,  262,   -1,   59,
   60,   61,   62,  281,  257,   -1,   -1,  272,   -1,  262,
   -1,  289,  265,  266,  267,   -1,  281,   -1,  271,  272,
  257,   -1,   -1,   -1,  289,  262,   -1,  280,  281,   -1,
   -1,   91,   -1,   -1,  271,  272,  289,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  257,   -1,   -1,   -1,   -1,
  262,   -1,  289,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,  124,   -1,   -1,   -1,  280,  281,
   -1,   38,   -1,   40,   -1,   42,   43,  289,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,  271,   45,   46,   47,   -1,
   -1,   38,   -1,   40,  280,   42,   43,   -1,   45,   46,
   47,   60,   61,   62,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   -1,   -1,  124,   60,   61,
   62,   -1,   -1,   -1,   91,   -1,   93,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   38,
   -1,   40,   41,   42,   43,  124,   45,   46,   47,   91,
   60,   61,   62,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   60,   61,   62,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  280,   91,  124,   93,   -1,   -1,   60,   61,   62,   38,
   -1,   40,   91,   42,   43,   -1,   45,   46,   47,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   60,   61,   62,  124,   -1,   -1,   91,   -1,   93,
   -1,   60,   61,   62,   38,  124,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   91,   45,   46,   47,   60,   61,   62,   -1,
  124,   -1,   91,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,  124,   -1,   91,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   60,   61,   62,   91,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,  257,   -1,  271,  272,   -1,  262,
  124,   -1,  265,  266,  267,  280,  281,   91,  271,  272,
   -1,   -1,  124,   -1,  289,   -1,   -1,  280,  281,  282,
  283,  284,  257,  286,  287,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
  124,   -1,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  257,  286,  287,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  257,  286,
  287,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  257,  286,  287,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  257,  286,  287,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,  284,  257,  286,  287,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  257,  286,  287,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  257,  286,
  287,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  257,  286,  287,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  257,  286,  287,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,   -1,  257,   -1,   -1,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,   -1,
  257,   -1,   -1,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,   -1,  257,   -1,
   -1,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,   -1,  257,   -1,   -1,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,   -1,  257,   -1,   -1,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,   -1,  257,   -1,   -1,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,   -1,
  257,   -1,   -1,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,   -1,  257,   -1,
   -1,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,   -1,  257,   -1,   -1,   -1,
  289,  262,   -1,   -1,  265,  266,  267,  257,   -1,   -1,
  271,  272,  262,   -1,   -1,  265,  266,  267,   -1,  280,
  281,  271,  272,   -1,   -1,   -1,   -1,   -1,  289,   -1,
  280,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,
};
static int yyctable[] = {                                      1,
    2,  130,  184,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  130,  184,
   -1,    7,    2,   -1,    8,    2,  130,  184,   -1,    9,
    2,  130,  184,   -1,   10,    2,  130,  184,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
  130,  184,   -1,   15,    2,  130,  184,   -1,   16,    2,
   -1,   17,    2,  130,  184,   -1,   18,    2,  184,   -1,
   19,    2,  184,   -1,   20,    2,  184,   -1,   21,    2,
  184,   -1,   22,    2,  184,   -1,   23,    2,  184,   -1,
   24,    2,  184,   -1,   25,    2,   -1,   26,    2,   -1,
   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,   30,
    2,   -1,   31,    2,   -1,   32,    2,   -1,   33,    2,
   -1,   34,    2,   -1,   35,    2,   -1,   36,    2,   -1,
   82,  130,  185,   -1,    6,  130,  185,   -1,   83,  130,
  185,   -1,   84,  130,  185,   -1,   85,  130,  185,   -1,
   86,   50,  130,  185,   -1,   15,  130,  185,   -1,   17,
   50,  130,  185,   -1,   18,  185,   -1,   19,  185,   -1,
   87,  185,   -1,   24,  185,   -1,   88,   50,   -1,   92,
  130,  184,   -1,  130,  184,   -1,   18,  184,   -1,   24,
  184,   -1,   82,   53,   -1,    6,   53,   -1,   14,   53,
   -1,   96,   53,   -1,   17,   53,   -1,   82,  178,   -1,
    6,  178,   -1,   14,  178,   -1,   96,  178,   -1,   17,
  178,   -1,   82,  179,   -1,    6,  179,   -1,   14,  179,
   -1,   96,  179,   -1,   17,  179,   -1,   82,  180,   -1,
    6,  180,   -1,   14,  180,   -1,   96,  180,   -1,   17,
  180,   -1,   82,   55,   -1,    6,   55,   -1,   14,   55,
   -1,   96,   55,   -1,   17,   55,   -1,  101,  122,   -1,
  107,  121,   -1,   82,  222,   -1,   30,  222,   -1,   31,
  222,   -1,   32,  222,   -1,   33,  222,   -1,  141,  195,
   -1,   81,  195,   -1,    1,  130,  184,   -1,    6,  130,
  184,   -1,    8,  130,  184,   -1,    9,  130,  184,   -1,
   10,  130,  184,   -1,   14,  130,  184,   -1,   15,  130,
  184,   -1,   17,  130,  184,   -1,   19,  184,   -1,   20,
  184,   -1,   21,  184,   -1,   22,  184,   -1,   23,  184,
   -1,  181,  184,   -1,    6,  184,   -1,   14,  184,   -1,
   96,  184,   -1,   17,  184,   -1,  119,  130,   -1,   18,
  119,   -1,   24,  119,   -1,  186,  184,   -1,  189,   29,
   -1,  181,  130,  184,   -1,   83,  130,  184,   -1,   84,
  130,  184,   -1,   85,  130,  184,   -1,   87,  184,   -1,
  198,   81,   -1,  140,   81,   -1,  198,   54,   -1,  140,
   54,   -1,  198,   83,   -1,  140,   83,   -1,  198,   84,
   -1,  140,   84,   -1,  198,   85,   -1,  140,   85,   -1,
  198,   51,   -1,  140,   51,   -1,   56,   82,   -1,  198,
   56,   82,   -1,  140,   56,   82,   -1,  160,  218,   -1,
  161,  218,   -1,  162,  218,   -1,  163,  218,   -1,  164,
  218,   -1,  165,  218,   -1,  166,  218,   -1,  167,  218,
   -1,  168,  218,   -1,  169,  218,   -1,  170,  218,   -1,
  171,  218,   -1,  160,  219,   -1,  161,  219,   -1,  162,
  219,   -1,  163,  219,   -1,  164,  219,   -1,  165,  219,
   -1,  166,  219,   -1,  167,  219,   -1,  168,  219,   -1,
  169,  219,   -1,  170,  219,   -1,  171,  219,   -1,  160,
  221,   -1,  161,  221,   -1,  162,  221,   -1,  163,  221,
   -1,  164,  221,   -1,  165,  221,   -1,  166,  221,   -1,
  167,  221,   -1,  168,  221,   -1,  169,  221,   -1,  170,
  221,   -1,  171,  221,   -1,  160,  197,   -1,  161,  197,
   -1,  160,  200,   -1,  161,  200,   -1,  160,  201,   -1,
  161,  201,   -1,  222,   50,   -1,  160,  198,   -1,  161,
  198,   -1,  160,  199,   -1,  161,  199,   -1,   92,  184,
   -1,   18,  130,   -1,   24,  130,   -1,   50,  185,   -1,
  198,   56,   -1,  140,   56,   -1,  285,   33,   -1,  286,
   33,   -1,  287,   33,   -1,  288,   33,   -1,  296,   50,
   -1,  198,   52,   -1,  140,   52,   -1,  160,  208,   -1,
  161,  208,   -1,  160,  202,   -1,  161,  202,   -1,  160,
  203,   -1,  161,  203,   -1,  160,  204,   -1,  161,  204,
   -1,  160,  205,   -1,  161,  205,   -1,  160,  206,   -1,
  161,  206,   -1,  160,  207,   -1,  161,  207,   -1,  160,
  214,   -1,  161,  214,   -1,  160,  220,   -1,  161,  220,
   -1,  162,  220,   -1,  163,  220,   -1,  164,  220,   -1,
  165,  220,   -1,  166,  220,   -1,  167,  220,   -1,  168,
  220,   -1,  169,  220,   -1,  170,  220,   -1,  171,  220,
   -1,  160,  211,   -1,  161,  211,   -1,  160,  212,   -1,
  161,  212,   -1,  160,  210,   -1,  161,  210,   -1,  160,
  213,   -1,  161,  213,   -1,  332,   69,   -1,   12,   69,
   -1,   13,   69,   -1,  333,   69,   -1,   29,   69,   -1,
  189,   65,   -1,
};
#define YYFINAL 37
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 313
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknEllipsis","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknNew","tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT",
"RSHIFT","ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}' classdefnend",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"classdefnend :",
"classdefnend : ';'",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 837 "C:/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "' found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  void setupScanBuffer(char* buf, size_t bufsize);
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();

  return gProgUnit;
}
#line 1846 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 253 "C:/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 2236 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 260 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2242 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 261 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2252 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 266 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2262 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 271 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2268 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 274 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2274 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 275 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2280 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 276 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2286 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 277 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2292 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 278 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2298 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 279 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2304 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 280 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2310 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 281 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2316 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 282 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2322 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 283 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2328 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 284 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2334 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 285 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2340 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 286 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2346 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 287 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2352 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 288 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2358 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 289 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2364 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 290 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2370 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 291 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2376 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 292 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2382 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 293 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2388 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 294 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2394 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 295 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2400 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 296 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2406 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 297 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2412 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 300 "C:/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 2418 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 301 "C:/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 2424 "y_tab.c"
break;
case 32:
#line 304 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2429 "y_tab.c"
  if (!yytrial)
#line 304 "C:/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2436 "y_tab.c"
break;
case 33:
#line 308 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2441 "y_tab.c"
  if (!yytrial)
#line 308 "C:/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2448 "y_tab.c"
break;
case 34:
#line 312 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2453 "y_tab.c"
  if (!yytrial)
#line 312 "C:/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 2460 "y_tab.c"
break;
case 35:
#line 316 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2465 "y_tab.c"
  if (!yytrial)
#line 316 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 2472 "y_tab.c"
break;
case 36:
#line 320 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2477 "y_tab.c"
  if (!yytrial)
#line 320 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 2484 "y_tab.c"
break;
case 37:
#line 324 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2489 "y_tab.c"
  if (!yytrial)
#line 324 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 2496 "y_tab.c"
break;
case 38:
#line 330 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2501 "y_tab.c"
  if (!yytrial)
#line 330 "C:/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 2505 "y_tab.c"
break;
case 39:
#line 333 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2510 "y_tab.c"
  if (!yytrial)
#line 333 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2514 "y_tab.c"
break;
case 40:
#line 334 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2519 "y_tab.c"
  if (!yytrial)
#line 334 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2523 "y_tab.c"
break;
case 41:
#line 340 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2528 "y_tab.c"
  if (!yytrial)
#line 340 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 2532 "y_tab.c"
break;
case 42:
#line 341 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2537 "y_tab.c"
  if (!yytrial)
#line 341 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 2541 "y_tab.c"
break;
case 43:
#line 342 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2546 "y_tab.c"
  if (!yytrial)
#line 342 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 2550 "y_tab.c"
break;
case 44:
#line 343 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2555 "y_tab.c"
  if (!yytrial)
#line 343 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 2559 "y_tab.c"
break;
case 45:
#line 344 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2564 "y_tab.c"
  if (!yytrial)
#line 344 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 2568 "y_tab.c"
break;
case 46:
#line 345 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2573 "y_tab.c"
  if (!yytrial)
#line 345 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 2577 "y_tab.c"
break;
case 47:
#line 348 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2582 "y_tab.c"
  if (!yytrial)
#line 348 "C:/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 2586 "y_tab.c"
break;
case 48:
#line 351 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2591 "y_tab.c"
  if (!yytrial)
#line 351 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2595 "y_tab.c"
break;
case 49:
#line 352 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2600 "y_tab.c"
  if (!yytrial)
#line 352 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2604 "y_tab.c"
break;
case 50:
  if (!yytrial)
#line 355 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2610 "y_tab.c"
break;
case 51:
  if (!yytrial)
#line 356 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2616 "y_tab.c"
break;
case 52:
  if (!yytrial)
#line 357 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 2622 "y_tab.c"
break;
case 53:
  if (!yytrial)
#line 358 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2628 "y_tab.c"
break;
case 54:
  if (!yytrial)
#line 359 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2634 "y_tab.c"
break;
case 55:
  if (!yytrial)
#line 360 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2640 "y_tab.c"
break;
case 56:
  if (!yytrial)
#line 361 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2646 "y_tab.c"
break;
case 57:
  if (!yytrial)
#line 362 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2652 "y_tab.c"
break;
case 58:
  if (!yytrial)
#line 363 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2658 "y_tab.c"
break;
case 59:
  if (!yytrial)
#line 366 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 2664 "y_tab.c"
break;
case 60:
  if (!yytrial)
#line 367 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2670 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 370 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 2676 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 371 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 2682 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 372 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 2688 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 373 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 2694 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 374 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 2700 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 377 "C:/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 2706 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 378 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2715 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 382 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2724 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 386 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 2732 "y_tab.c"
break;
case 70:
#line 391 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2737 "y_tab.c"
  if (!yytrial)
#line 391 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 2743 "y_tab.c"
break;
case 71:
#line 394 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2748 "y_tab.c"
  if (!yytrial)
#line 394 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 2754 "y_tab.c"
break;
case 72:
#line 397 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2759 "y_tab.c"
  if (!yytrial)
#line 397 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 2765 "y_tab.c"
break;
case 73:
#line 400 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2770 "y_tab.c"
  if (!yytrial)
#line 400 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 2776 "y_tab.c"
break;
case 74:
#line 404 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2781 "y_tab.c"
  if (!yytrial)
#line 404 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 2787 "y_tab.c"
break;
case 75:
#line 407 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2792 "y_tab.c"
  if (!yytrial)
#line 407 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 2798 "y_tab.c"
break;
case 76:
#line 410 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2803 "y_tab.c"
  if (!yytrial)
#line 410 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 2809 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 415 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2815 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 416 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2821 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 419 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 2827 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 422 "C:/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 2836 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 428 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2842 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 429 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2848 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 430 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2854 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 431 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2860 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 432 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2866 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 433 "C:/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 2875 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 439 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 2881 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 442 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 2892 "y_tab.c"
break;
case 89:
  if (!yytrial)
#line 448 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 2902 "y_tab.c"
break;
case 90:
  if (!yytrial)
#line 453 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2913 "y_tab.c"
break;
case 91:
  if (!yytrial)
#line 459 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 2923 "y_tab.c"
break;
case 92:
  if (!yytrial)
#line 464 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2934 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 470 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 2944 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 479 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 2952 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 482 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 2960 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 485 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 2968 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 491 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 2976 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 494 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 2985 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 498 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 2993 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 503 "C:/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 2999 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 504 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 3005 "y_tab.c"
break;
case 102:
#line 507 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3010 "y_tab.c"
  if (!yytrial)
#line 507 "C:/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 3014 "y_tab.c"
break;
case 103:
#line 510 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3019 "y_tab.c"
  if (!yytrial)
#line 510 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 3027 "y_tab.c"
break;
case 104:
#line 517 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3032 "y_tab.c"
  if (!yytrial)
#line 517 "C:/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 3039 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 522 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3049 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 527 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3059 "y_tab.c"
break;
case 107:
#line 534 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3064 "y_tab.c"
  if (!yytrial)
#line 534 "C:/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 3068 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 537 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3078 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 542 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3088 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 549 "C:/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 3094 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 550 "C:/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 3103 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 554 "C:/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 3112 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 560 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3118 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 561 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3124 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 562 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3130 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 563 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 3136 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 566 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 3142 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 567 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 3148 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 570 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 3154 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 571 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 3160 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 572 "C:/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 3166 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 573 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 3172 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 574 "C:/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 3178 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 575 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3184 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 576 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3190 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 579 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3196 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 580 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 3202 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 581 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 3208 "y_tab.c"
break;
case 129:
#line 582 "C:/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else YYVALID;}
#line 3213 "y_tab.c"
  if (!yytrial)
#line 583 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 3217 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 586 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3223 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 587 "C:/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 3229 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 588 "C:/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 3235 "y_tab.c"
break;
case 133:
#line 591 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3240 "y_tab.c"
  if (!yytrial)
#line 591 "C:/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 3244 "y_tab.c"
break;
case 134:
#line 597 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3249 "y_tab.c"
  if (!yytrial)
#line 598 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3257 "y_tab.c"
break;
case 135:
#line 603 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3262 "y_tab.c"
break;
case 136:
#line 607 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3267 "y_tab.c"
  if (!yytrial)
#line 608 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3274 "y_tab.c"
break;
case 137:
#line 612 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3279 "y_tab.c"
break;
case 138:
#line 616 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3284 "y_tab.c"
  if (!yytrial)
#line 617 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 3291 "y_tab.c"
break;
case 139:
#line 624 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3303 "y_tab.c"
  if (!yytrial)
#line 632 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 3309 "y_tab.c"
break;
case 140:
#line 635 "C:/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3314 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 636 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 3322 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 641 "C:/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 3328 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 642 "C:/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3334 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 643 "C:/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3340 "y_tab.c"
break;
case 145:
#line 646 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3345 "y_tab.c"
  if (!yytrial)
#line 646 "C:/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 3349 "y_tab.c"
break;
case 146:
#line 649 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3354 "y_tab.c"
  if (!yytrial)
#line 650 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3361 "y_tab.c"
break;
case 147:
#line 654 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3366 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 656 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3375 "y_tab.c"
break;
case 149:
#line 660 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3380 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 662 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3389 "y_tab.c"
break;
case 151:
#line 669 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3401 "y_tab.c"
  if (!yytrial)
#line 677 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 3409 "y_tab.c"
break;
case 152:
#line 683 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3421 "y_tab.c"
  if (!yytrial)
#line 691 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 3429 "y_tab.c"
break;
case 153:
#line 697 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3441 "y_tab.c"
  if (!yytrial)
#line 705 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 3449 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 712 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3459 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 717 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3468 "y_tab.c"
break;
case 156:
#line 723 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3473 "y_tab.c"
  if (!yytrial)
#line 723 "C:/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 3477 "y_tab.c"
break;
case 157:
#line 726 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3482 "y_tab.c"
  if (!yytrial)
#line 726 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3486 "y_tab.c"
break;
case 158:
#line 727 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3491 "y_tab.c"
  if (!yytrial)
#line 727 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3495 "y_tab.c"
break;
case 159:
#line 728 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3500 "y_tab.c"
  if (!yytrial)
#line 728 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 3504 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 731 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 3510 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 732 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 3516 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 735 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 3522 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 736 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 3528 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 739 "C:/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 3534 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 740 "C:/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 3540 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 741 "C:/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 3546 "y_tab.c"
break;
case 167:
#line 745 "C:/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); YYVALID;}
#line 3551 "y_tab.c"
  if (!yytrial)
#line 745 "C:/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 3555 "y_tab.c"
break;
case 168:
#line 747 "C:/github/cppparser/parser.y"
{gCompoundStack.pop(); YYVALID;}
#line 3560 "y_tab.c"
  if (!yytrial)
#line 748 "C:/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-2].cppCompundObj ? yyvsp[-2].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-8].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-7].str;
                    yyval.cppCompundObj->name_      = yyvsp[-6].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 3573 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 759 "C:/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 3579 "y_tab.c"
break;
case 170:
#line 760 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3584 "y_tab.c"
  if (!yytrial)
#line 760 "C:/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3588 "y_tab.c"
break;
case 171:
#line 761 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3593 "y_tab.c"
  if (!yytrial)
#line 761 "C:/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3597 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 764 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 3603 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 765 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 3609 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 766 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3615 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 767 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 3621 "y_tab.c"
break;
case 176:
#line 770 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3626 "y_tab.c"
  if (!yytrial)
#line 770 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 3630 "y_tab.c"
break;
case 177:
#line 771 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3635 "y_tab.c"
  if (!yytrial)
#line 771 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 3639 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 774 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 3645 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 775 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 3651 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 776 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 3657 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 777 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 3663 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 784 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3669 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 785 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3675 "y_tab.c"
break;
case 186:
#line 788 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3680 "y_tab.c"
  if (!yytrial)
#line 788 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 3684 "y_tab.c"
break;
case 187:
#line 789 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3689 "y_tab.c"
  if (!yytrial)
#line 789 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3693 "y_tab.c"
break;
case 188:
#line 790 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3698 "y_tab.c"
  if (!yytrial)
#line 790 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 3702 "y_tab.c"
break;
case 189:
#line 793 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3707 "y_tab.c"
  if (!yytrial)
#line 793 "C:/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 3711 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 796 "C:/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 3717 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 797 "C:/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 3723 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 800 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3729 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 801 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3735 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 802 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3741 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 803 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3747 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 804 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 3753 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 805 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 3759 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 806 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 3765 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 807 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 3771 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 808 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 3777 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 809 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 3783 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 810 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 3789 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 811 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 3795 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 812 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 3801 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 813 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 3807 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 814 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 3813 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 815 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 3819 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 816 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 3825 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 817 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 3831 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 818 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 3837 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 819 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 3843 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 820 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 3849 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 821 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 3855 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 822 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 3861 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 823 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 3867 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 824 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 3873 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 825 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 3879 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 826 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 3885 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 827 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 3891 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 828 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 3897 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 829 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 3903 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 830 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 3909 "y_tab.c"
break;
case 223:
#line 833 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3914 "y_tab.c"
  if (!yytrial)
#line 833 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 3918 "y_tab.c"
break;
#line 3920 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
