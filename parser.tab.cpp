#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "C:/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 107 "C:/github/cppparser/parser.y"
#line 94 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   24,   24,   24,   24,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   60,
   60,   55,   55,   55,   55,   55,   55,   56,   57,   57,
   58,   58,   58,   58,   58,   58,   59,   28,   28,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    9,    9,    9,    9,    9,   10,   10,   10,   10,    7,
    7,    7,    7,    8,    8,    8,   23,   23,   22,   21,
    3,    3,    3,    3,    3,    3,   14,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   12,   12,   12,   48,
   48,   34,   35,    6,   31,   31,   32,   33,   33,   20,
   20,   20,   16,   16,   16,   16,   17,   17,   50,   50,
   50,   50,   50,   50,   50,   49,   49,   49,   49,   47,
   47,   47,   37,   38,   61,   38,   62,   38,   36,   63,
   36,   42,   42,   42,   40,   41,   64,   41,   65,   41,
   39,   39,   39,   18,   18,   19,   15,   15,   15,   44,
   44,   45,   45,   46,   46,   46,   26,   26,   66,   25,
   51,   51,   51,   52,   52,   52,   52,   11,   11,   43,
   43,   43,   43,    1,    1,   53,   53,   53,   27,   54,
   54,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   30,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    4,    3,    4,    4,    4,    4,    3,    3,    3,
    3,    3,    3,    2,    3,    2,    3,    1,    1,    1,
    2,    3,    1,    2,    1,    2,    1,    2,    0,    1,
    1,    3,    1,    1,    1,    0,    2,    3,    2,    6,
    8,    9,    7,    5,    6,    4,    2,    2,    3,    6,
    1,    2,    2,    2,    2,    4,    3,    4,    3,    6,
    5,    5,    4,    3,    3,    4,    6,    9,    8,    1,
    1,    2,    4,    3,   11,   10,    2,    9,    8,    0,
    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    0,    2,    2,    3,    0,
    1,    1,    2,    5,    0,   11,    0,   13,    4,    0,
    6,    0,    5,    6,    2,    4,    0,   10,    0,   12,
    4,    5,    7,    8,    8,    2,    2,    2,    3,    0,
    1,    1,    2,    0,    1,    2,    2,    1,    0,    8,
    0,    3,    4,    0,    1,    1,    1,    3,    4,    1,
    1,    1,    1,    0,    1,    2,    2,    2,    4,    1,
    3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    4,    4,
    4,    4,    4,    3,    3,    4,    3,    2,    2,    4,
    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  192,  193,  194,    0,    0,    0,    0,    0,    0,
  183,   48,   49,    0,    0,    0,   57,  131,  100,    0,
    0,    0,    0,  132,    0,    0,    0,    0,   30,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,   23,    8,    9,   12,    0,    0,    0,    6,    0,
    7,    0,    0,   10,    0,    0,   11,   22,   13,    0,
   14,    0,   15,    0,   16,   17,    0,   18,   19,    0,
   20,   21,    0,    0,    0,    0,   24,   25,   26,   27,
   28,    0,   50,    0,    0,    0,    0,  101,    0,    0,
    0,    0,  185,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,  125,
    0,    0,    0,    0,    0,    0,    0,   44,    0,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  121,    0,  119,    0,    0,
   58,    0,  162,    0,    0,    0,    0,    0,  157,  158,
    0,  156,    0,   78,   77,    0,    0,    0,    4,    5,
  167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  223,  107,    0,  102,  133,    0,    0,
    0,  145,    0,    0,    0,    0,    0,    0,    0,    0,
   31,    0,    0,    0,    0,  113,  111,    0,  116,    0,
  159,    0,  104,    0,    0,    0,    0,   66,    0,    0,
   47,    0,   38,   39,   40,   41,   42,   43,   45,    0,
  217,    0,  196,    0,    0,    0,    0,    0,    0,  117,
    0,  118,    0,    0,  163,    0,    0,   89,    0,    0,
    0,   79,  186,  187,  188,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  215,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  178,    0,    0,
    0,    0,    0,    0,  147,    0,  139,    0,    0,    0,
   66,   76,    0,    0,  189,    0,   32,   35,   36,   34,
   37,    0,    0,  151,    0,    0,    0,    0,   86,    0,
   93,    0,    0,    0,    0,    0,    0,    0,  216,  209,
  103,    0,    0,    0,  146,    0,    0,  179,    0,    0,
   88,    0,    0,    0,    0,    0,  112,    0,    0,   66,
   74,    0,    0,    0,    0,    0,    0,   67,   63,   64,
    0,    0,    0,    0,    0,  137,    0,   92,    0,    0,
    0,    0,  134,  175,  176,  177,    0,    0,  169,    0,
   91,    0,    0,  152,    0,    0,    0,  166,   80,    0,
    0,   66,   75,    0,   68,   70,    0,   60,    0,    0,
    0,    0,  149,    0,    0,  143,    0,    0,    0,    0,
    0,   97,   90,  141,    0,    0,    0,    0,   73,    0,
    0,  153,    0,  126,    0,    0,    0,    0,    0,  144,
    0,    0,    0,    0,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,  154,  155,  170,   99,    0,  126,
    0,    0,   72,    0,  127,  128,    0,    0,    0,    0,
   98,    0,    0,  148,  106,  129,    0,    0,    0,  136,
  105,    0,    0,    0,  150,  138,
};
static int yydgoto[] = {                                      37,
   38,  122,   40,  101,   41,   42,   43,   44,  338,  284,
   45,   46,   47,   48,   49,  197,  231,   50,   51,  198,
   52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
   62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
   72,  180,   73,  278,  279,  329,   74,   75,  421,   76,
  317,  357,  160,  132,   77,   78,   79,   80,   81,   82,
  274,  382,  271,  326,  407,  390,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, -236,    0,    0,    0,
    0,    0,    0,  698,    0,  -89,    0,    0,    0,    0,
    0, -227, -192,    0, 1590, 2333, 2174,   -8,    0, 2333,
 2333, 2333, 2333, 2333, 2535, 2333,    0,  583,   61,  112,
    0,    0,    0,    0,    0,  698,  238,   72,    0,  227,
    0,  231,  105,    0, 2125,  145,    0,    0,    0, 3724,
    0,  146,    0,   30,    0,    0,  117,    0,    0,   44,
    0,    0,    0, 1503,    0,  -31,    0,    0,    0,    0,
    0,    0,    0,  698,  698,  698, -100,    0,    0,  158,
  164, -223,    0,  583,  178, 1503,    0,    0,  218,   41,
  188,    0,    0,    0,    0,    0,    0,   43,    0,    0,
   48,   78,   85,   -5,   84,  124,  130,    0,  147,    0,
 2333,  118,    0,  317,    0,    0,   95,   95,   95, 3812,
 3967,  -11,    0,   95,   95,    0,  395,    0, -223,  741,
    0,    0,    0,  366,  405,  -72, 2333,    0,    0,    0,
    0,    0,  203,    0,    0,  414,  427,  428,    0,    0,
    0,  451,  473, 2191, 2333, 2237, 2333, 2333, 2333, 2333,
 2333, 2283, 2333,    0,    0,    0,    0,    0,  291,   20,
    0,    0,    0,  757,   34,    0,  698,    0,  315, -223,
    0,    0,  319,  698,  529,    0,    0,  296,    0,  698,
    0,  395,    0,  561,    0,  698,  -14,    0, 1477,  559,
    0,  344,    0,    0,    0,    0,    0,    0,    0, 2333,
    0, 2333,    0,  575,  360,  698,  596,    0,    0,    0,
  579,    0,  698,  118,    0,  118, 2379,    0, 3967,  561,
  561,    0,    0,    0,    0, 2333, 2333, 2333,  844,   25,
 2333,   25,  593,  593,  157,  157,   95,    0,  333, 3822,
 1716,  602,  390,    0, 1752,  598,   63,    0,  561,  -69,
  648,  651,    0,  657,    0,    0,    0,  622,  645,  -55,
    0,    0,  698,   26,    0,  660,    0,    0,    0,    0,
    0,    0, 3967,    0,  667,  -40,  360,  -99,    0,  118,
    0, 3847,  622,  622,  593,  593,  844,   95,    0,    0,
    0, 2333,  662, 1771,    0,  155,   36,    0,  622, 2473,
    0,    0,  672,  698,    0,  678,    0,  685,  469,    0,
    0,  225,  -41,  670,  478,    0,  675,    0,    0,    0,
    0,  682,  500,    0,  728,    0,  521,    0, -223, -223,
 3859, 2333,    0,    0,    0,    0,  698,  155,    0,  -67,
    0, 3887,  351,    0,  -35,  359,  743,    0,    0,  276,
  730,    0,    0, 2333,    0,    0,  542,    0,  769,  506,
  500,  773,    0,  698,  698,    0, 3913,  118,  698,    0,
 2489,    0,    0,    0,    0,  762,  699,  758,    0,  340,
 3967,    0,  783,    0,  788,    0,  811,  249,  249,    0,
  118, 1807, -223, 3939,  520,   37,    0,    0,  799,    0,
  -53,  821,  527,  827,    0,    0,    0,    0, -223,    0,
    0, 1826,    0,  545,    0,    0,  621,    0,  762,  765,
    0,  -53, 1872,    0,    0,    0,  557,   55,    0,    0,
    0,    0, 1925, 2079,    0,    0,
};
static int yyrindex[] = {                                      6,
 1011,    0,    0,    0,  205, 2882,  770,    0,    0,    0,
    0,    0,    0,    0,  964,    0,    0,    0,    0,    0,
 3058, 1060, 1175,    0,    0,    0,    0,  534,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1688, 1789,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  885,  479,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,    0,    0,    0,
    0,    0,    0,    0,  766, 2422,    0,    0,    0,    0,
    0,  573,    0,    0,    0,    0,    0,    0,  -27, 3450,
    0, 1688,    0, 1688,    0,    0, 2941, 2583,  771,    0,
    0, 3476, 3506, 3518, 2677,  647,  -84,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2976,  375,    0, 1530, 1634, 3037, 3080, 3136,    0,
    7,    0, 1880, 3194, 3229,    0,  320,    0, 1688,    0,
    0,  205,    0,    0,    0,  422,    0,  280,    0,    0,
  280,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -84,    0,    0,    0,    0,
  -84,    0,  438,    0,    0, 3359,    0, 1218,    0, 1688,
    0,  -10,    0,  580,  585,    0,    0,    0,    0,    0,
    0,    0,    0,  -15, 2787,    0,    0,    0,    0,    0,
    0,  525,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  853,    0,    0, 1022, 2847,    0,
    0,    0,    0,  455,    0,  495,    0,    0,  185,  691,
  691,    0,    0,    0,    0,    0,    0,    0, 2120, 1188,
    0, 3379, 1367, 2396, 3335, 3343, 3239,    0,    0,    0,
    0,    0,    0,  -84,    0,  -13,    0,    0, 3404,  422,
    0,    0,  320,    0,    0,   65,    0,  639, 3439,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2426,    8,    0,    0,    0,  853,    0,    0,  671,
    0,    0,  694,  694, 2515, 3388, 2918, 3267,    0,    0,
    0,    0,    0,    0,    0,  760,    0,    0, 3546,    0,
    0,  -27,    0,    0,  -27,    0,    0, 3562,    0,    0,
    0,    0,    0,  350,    0,   -1,    0,    0,    0,    0,
   90,    0,  856,  -27,    0,    0,    0,    0,  880,  880,
    0,    0,    0,    0,    0,    0,    0,  760,    0,  269,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  856,    0,    0,    0,    0,    0,    0,   73,    0,  -84,
    0,    0,    0,    0,  -27,   69,    0,    0,    0,    0,
  365,    0,    0,    0,    0,  -27,    0,  262,  262,    0,
   75,    0,  269,    0,    0,    0,  -84,    0,    0,  -27,
   71,    0,    0,    0,    0,    0,    0,    0,  269,    0,
  -84,    0,    0,    0,    0,    0,    0,  -27,   69,    0,
    0,   83,    0,    0,    0,    0,    0,    0,  -84,    0,
    0,  -84,    0,    0,    0,    0,
};
static int yycindex[] = {                                    641,
 1071,    0,    0,    0, 3437,  891,    0, 1100, 1172, 1215,
    0,    0,    0,    0, 1231,    0,    0,    0,    0, 1992,
  789,    0,    0,    0,    0,    0,    0,   17,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2021,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1252,    0, 4304,  659,    0,    0,    0,    0,
    0,  611,    0,    0,    0,    0,    0,    0, 2594,  134,
    0,    0,    0,    0,    0,    0, 1534,  144,    0,    0,
    0,  177,  193,  242,  247, 3304,  838,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3978,    0, 4004, 4014,   76,  383,  399,    0,
    0,    0,  878,  552,  592,    0,  663,    0,    0,    0,
    0, 4315,    0,    0,    0,    0,    0, -205,    0,    0,
  -68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  907,    0,    0,    0,    0,
  954,    0,  252,    0,    0,  -34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  263,    0,    0,    0, 3853,    0,
    0,  412,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  655,  282,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  601,  604,
    0,  613,  620,  654,  673,  696,  723,    0,    0,    0,
 3884,    0,    0, 1003, 3912,    0,    0,    0,    0,    0,
    0,    0,  676,    0,    0, 3470,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4039,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  756,  759,  790,  817,    0,    0,
    0,    0,    0, 3940,    0,    0,    0,    0,    0,    0,
    0, 4108,    0,    0, 4136,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  109,    0,    0,    0,    0,
  616,    0,    0, 4164,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1116,
    0,    0,    0,    0, 4192,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4220,    0,    0,    0,    0,
    0, 3968,    0,    0,    0,    0, 1278,    0,    0, 4248,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1325, 3996,    0,    0,    0,    0,    0, 4276,    0,    0,
    0,    0, 4024,    0,    0,    0,    0,    0, 1382,    0,
    0, 1429, 4052, 4080,    0,    0,
};
static int yygindex[] = {                                      0,
   31,    1,   70, -308,   24,    0,    0,    0,  600, -261,
    0,  149,   11,  -76,    0,  653,    0,    0,    0, -283,
    0,    0,    0,  -29,    0,    0,    0, -231,  337,    0,
   32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -313,    0, -113,  892,   -2,   33,    2,  504,   54,
    0,  581,    0,  774,    0,    0,    0, -230,    0, -207,
    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4604
static int yytable[] = {                                     344,
   39,   90,   92,  331,  395,    2,   98,  437,  102,  103,
  104,   91,  196,  110,  105,  106,  110,  373,  237,  332,
   99,  320,  160,  391,   36,  193,  347,   50,  100,  135,
  171,   50,  222,  107,  379,   94,   95,   96,  363,  138,
    2,  366,   69,  283,  282,   50,  146,  190,  191,   50,
  190,  191,  339,  340,  283,   39,  286,   18,  280,  109,
  380,  277,  169,  263,  172,   24,  167,  330,  370,  336,
  171,  168,  405,  185,   90,  582,  341,  209,  159,  358,
  263,  372,  416,  585,  102,  103,  104,  105,  177,   90,
   92,  139,  268,  110,  189,  138,   90,  205,  263,  195,
  339,  340,  182,  184,  339,  340,  190,   39,  281,  171,
  400,  415,  142,  223,   34,  173,  172,  121,  173,   94,
  199,  318,  423,   69,  341,  448,  303,  304,  341,  109,
  150,  190,  191,   65,  172,  546,  434,  549,  339,  340,
  229,  108,  264,  186,  234,  236,  261,  139,  170,  144,
  337,  265,  176,  143,  447,  319,  192,  346,  359,  431,
  291,    6,  341,  155,  291,  204,  181,  226,  339,  340,
   14,   97,   94,  232,  179,  178,   39,  452,  238,   17,
  240,   39,  289,  241,  267,  173,  137,  270,    2,    2,
    2,  142,  341,  109,  146,  172,  172,  173,  200,  196,
  229,  200,  171,  161,  175,  108,  280,  141,   18,   39,
  141,   18,  582,   18,   65,  200,   24,  142,  269,   24,
  585,   24,  201,  187,  141,   87,  296,  435,   87,  200,
  200,  436,  159,  300,  314,  200,  203,  194,  141,  141,
  187,  160,  202,   87,  141,  196,  582,  173,  196,    2,
    3,    4,  214,    6,  585,  295,  184,   50,  184,  184,
   50,   39,   14,   97,   39,   39,   50,  196,  336,   50,
  151,   17,  215,  274,  153,  206,   90,   92,    2,    2,
    2,  148,  334,  333,  159,  152,  195,  227,  159,  154,
  230,   26,   27,   28,   12,   13,  149,  207,  147,  210,
  349,  350,  321,  324,  200,  130,   94,  199,  130,  130,
  208,  211,  130,  141,   39,  335,  360,  130,  196,  336,
  130,  130,   90,   92,  365,   90,   92,  345,   29,  196,
  130,  140,  195,  200,  212,  195,  277,  159,  273,  276,
  141,  213,  141,  196,   90,   92,   65,  216,  184,  371,
  184,  184,   94,  199,  195,   94,  199,  388,   65,   65,
  412,  196,  123,  125,  126,  726,  127,  128,  129,  130,
  131,  134,  135,  309,   94,  199,  222,  729,  732,   65,
  217,  384,  385,  336,  408,  409,  218,  432,  200,  411,
   39,  394,  392,   61,  276,   90,   92,  141,  735,  396,
  398,  443,  276,  233,  391,  195,   90,   92,   62,  220,
  219,  738,   39,  394,  397,  218,  195,   39,  218,  453,
   90,   92,  454,  400,  194,   94,  199,  354,  355,  356,
  195,   39,   39,  218,  225,  159,   94,  199,   90,   92,
  425,  426,  552,   39,  555,  428,  235,  403,  195,   39,
   94,  199,   39,   39,   39,  159,  406,  134,  558,  242,
  561,  441,  130,  409,  419,  130,  159,  218,   94,  199,
  194,  243,  412,  194,   61,   50,  159,  159,  168,   50,
  130,  334,  130,  239,  244,  245,  184,  184,  184,   62,
  184,  184,  194,   12,   13,   95,   50,   50,   95,  218,
  249,  250,  252,  253,  254,  255,  256,  257,  131,  260,
  246,  168,  415,   95,  335,   95,  168,  421,  168,  200,
  168,  418,  587,  168,   33,  130,  424,   29,  141,   18,
  130,  587,  334,  591,  247,   94,  130,   24,   94,  130,
  130,  130,  594,  194,   12,   13,  404,  262,  130,  276,
  130,  130,  612,   94,  194,   94,  292,   33,  293,  130,
  430,  615,   33,  276,   33,  335,   33,  439,  194,   33,
  276,  272,   29,  302,  222,  275,  222,  222,   29,  222,
  222,  184,  305,  306,  307,  445,  194,  308,  276,  147,
  184,  184,  222,  222,  222,  222,  334,  451,  286,  184,
  276,  168,  143,  168,  168,   29,   61,  291,   12,   13,
   29,  567,   29,  570,   29,  294,   93,   29,   61,   61,
  115,   62,   83,  115,  222,  114,  222,    6,  114,  335,
  169,  218,  172,   62,   62,  297,   14,   97,  171,   61,
  299,  312,   29,  218,  218,   17,  313,   33,  351,   33,
   33,  573,   61,  576,   62,  316,  362,  222,  222,  328,
  618,   83,  621,  624,  218,  627,    6,   62,  597,  600,
  603,  606,  630,  128,  633,   14,   97,  218,  116,  636,
  119,  639,  113,  173,   17,  110,  235,  322,  387,   56,
  323,   56,   56,   56,  185,   29,  325,   29,   29,  185,
  342,  352,  185,  185,  185,   56,   56,   56,  343,  185,
  401,   96,  364,  642,   96,  645,  170,  367,  185,  185,
  185,  185,  368,  185,  185,  369,  185,  414,  160,   96,
  374,   96,  648,  376,  651,  168,  168,  168,  168,  168,
  168,  168,  377,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  168,  654,  378,  657,  168,  168,
  168,  168,  168,  122,  168,  168,  125,  168,  168,  381,
   56,  115,  116,  117,  118,  119,  120,  383,  168,  168,
  168,  168,  660,  397,  663,   33,   33,   33,  399,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,  402,  222,  222,   33,   33,   33,   33,   33,  403,
   33,   33,  406,   33,   33,  702,  418,  705,  708,  179,
  711,  417,  420,  222,   33,   33,   33,   33,  422,   29,
   29,   29,   29,   29,   29,   29,  222,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,  714,
  424,  717,   29,   29,   29,   29,   29,  433,   29,   29,
  438,   29,   29,   18,   19,   20,  136,  440,   22,   23,
  128,   24,   29,   29,   29,  116,  720,  119,  723,  113,
  446,  169,  110,  172,    1,  167,  165,  449,  166,  171,
  168,  119,   59,   60,  184,  164,   59,    0,    5,    8,
   11,   14,   17,   22,  164,   25,   30,   35,   40,   43,
   46,   49,   54,  369,  271,  366,   59,  564,  741,  579,
   62,   67,   71,   75,   79,  609,   83,   87,  327,   91,
   95,  145,  579,  442,  173,  375,    0,    0,  389,  128,
   98,  101,  104,  107,  116,  259,  119,  160,  113,    0,
  164,  110,  160,    0,   83,  164,    0,    0,    0,    6,
  122,  160,  160,  125,  164,  164,    0,  170,   14,   97,
  160,  160,    0,  164,  164,    0,    0,   17,    0,  160,
    0,    0,  164,    0,    0,    0,  128,    0,    0,    0,
    0,  116,    0,  119,    0,  113,    0,  228,  110,    0,
    0,   55,    6,   55,   55,   55,   55,   55,   55,   55,
   55,   14,   97,  266,    0,    0,  174,    0,    6,    0,
   17,  174,   55,   55,   55,   55,    0,   14,   97,  122,
  174,  174,  125,    0,    0,  128,   17,    0,    0,  174,
  116,    0,  119,    0,  113,    0,    0,  110,   50,    0,
    0,    0,   50,   50,   55,   50,   50,   50,    0,   50,
    0,   50,    0,   50,   50,    0,   50,   50,   50,   50,
   50,   50,   50,    0,    0,    0,  122,    0,    0,  125,
   50,   50,   50,   50,    0,    0,    0,   55,    0,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
   22,   50,   25,   30,   35,   40,   43,   46,   49,   54,
  177,    0,   50,   59,    0,    0,    0,   62,   67,   71,
   75,   79,    0,   83,   87,  122,   91,   95,  125,    0,
    0,    0,    0,    0,   50,    0,  130,   98,  101,  104,
  107,  130,    0,    0,    0,   50,    0,  193,  128,    0,
  130,  130,  196,  116,    0,  119,    0,  113,    0,  130,
  110,  199,  202,    0,    5,    8,   11,   14,   17,   22,
  205,   25,   30,   35,   40,   43,   46,   49,   54,    0,
    0,    0,   59,    0,    0,  120,   62,   67,   71,   75,
   79,    0,   83,   87,    0,   91,   95,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   98,  101,  104,  107,
    0,    5,    8,   11,   14,   17,   22,    0,   25,   30,
   35,   40,   43,   46,   49,   54,    0,    0,  202,   59,
  202,  202,  202,   62,   67,   71,   75,   79,  122,   83,
   87,  125,   91,   95,   55,    0,  202,    0,  202,    0,
    0,    0,   55,   98,  101,  104,  107,  140,    0,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,    0,    0,    0,   59,    0,
  202,    0,   62,   67,   71,   75,   79,    0,   83,   87,
    0,   91,   95,    0,  185,    0,  185,  185,    0,    0,
  123,   50,   98,  101,  104,  107,    0,    0,    0,    0,
  128,    0,  202,    0,    0,  116,  120,  119,    0,  113,
    0,  120,  110,    0,  120,  120,  120,  131,    0,    0,
  120,  120,  135,    0,    0,  139,  143,  147,    0,  120,
  120,  151,  156,    0,    0,    0,    0,    0,  120,    0,
  160,  165,  168,  171,    0,    0,  208,  128,    0,  174,
    0,  211,  116,    0,  119,    0,  113,    0,    0,  110,
  214,  217,    0,    5,    8,   11,   14,   17,   22,  220,
   25,   30,   35,   40,   43,   46,   49,   54,    0,    0,
    0,   59,    0,    0,    0,   62,   67,   71,   75,   79,
  122,   83,   87,  125,   91,   95,    0,  204,  204,  204,
  204,  204,    0,  204,  128,   98,  101,  104,  107,  116,
    0,  119,    0,  113,    0,  204,  110,  204,  223,    0,
    0,  123,    0,  226,    0,    0,  123,    0,    0,  123,
  123,  123,  229,  232,  202,  123,  123,  122,    0,    0,
  125,  235,    0,    0,  123,  123,  202,  202,    0,  204,
    0,  128,    0,  123,    0,    0,  116,    0,  119,    0,
  113,  238,    0,  110,  185,    0,  241,  202,    0,  185,
    0,    0,  185,  185,  185,  244,  247,  253,  185,  185,
  202,  204,  256,    0,  250,    0,    0,  185,  185,    0,
    0,  259,  262,    0,  122,    0,  185,  125,  342,   36,
  265,    0,    0,  345,   32,    0,   33,    0,   31,    0,
    0,   30,  348,  351,    0,    0,    0,    0,    0,    0,
    0,  354,    0,    0,    0,    5,    8,   11,   14,   17,
   22,    0,   25,   30,   35,   40,   43,   46,   49,   54,
    0,  122,    0,   59,  125,    0,    0,   62,   67,   71,
   75,   79,    0,   83,   87,    0,   91,   95,    0,    0,
  219,    0,    0,  219,    0,    0,    0,   98,  101,  104,
  107,    0,    5,    8,   11,   14,   17,   22,  219,   25,
   30,   35,   40,   43,   46,   49,   54,    0,    0,   34,
   59,  285,   35,    0,   62,   67,   71,   75,   79,    0,
   83,   87,    0,   91,   95,    0,    0,    0,    0,    0,
    0,    0,  219,  204,   98,  101,  104,  107,    0,    0,
    0,    0,    0,    0,    0,  204,  204,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,  219,    0,  204,   59,    0,    0,
    0,   62,   67,   71,   75,   79,    0,   83,   87,  204,
   91,   95,    0,    0,  221,    0,    0,  221,    0,    0,
    0,   98,  101,  104,  107,    0,    5,    8,   11,   14,
   17,   22,  221,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   71,   75,   79,    0,   83,   87,    0,   91,   95,    0,
    0,    0,    0,    0,    0,    0,  221,    0,   98,  101,
  104,  107,    0,    0,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,   13,    0,   36,  156,
  157,  158,   16,   32,    0,   33,    0,   31,  221,   83,
   30,    0,    0,    0,    6,    0,   25,   84,   85,   86,
    0,    0,    0,   14,   15,    0,   26,   27,   28,   29,
    0,    0,   17,    0,   36,    0,  219,    0,    0,   32,
  253,   33,    0,   31,    0,  256,   30,    0,  219,  219,
    0,    0,    0,   36,  259,  262,    0,    0,   32,    0,
   33,    0,   31,  265,    0,   30,    0,    0,    0,  219,
    0,    0,    0,    0,    0,    0,    0,    0,  195,    0,
    0,  195,  219,  195,  195,  195,    0,    0,   34,   36,
  311,   35,    0,    0,   32,    0,   33,  195,   31,  195,
  195,   30,    0,    0,    0,    0,    0,    0,   36,    0,
    0,    0,    0,   32,    0,   33,    0,   31,  111,    0,
   30,    0,    0,    0,   34,    0,  315,   35,    0,  195,
  112,  113,  114,  115,  116,  117,  118,  119,  120,    0,
  221,    0,    0,   34,    0,  353,   35,    0,    0,    0,
    0,    0,  221,  221,   36,    0,    0,    0,    0,   32,
    0,   33,  195,   31,    0,    0,   30,   50,    0,    0,
    0,   50,   50,  221,   50,   50,   50,    0,    0,   34,
    0,  427,   35,    0,    0,    0,  221,    0,   50,   50,
   50,   50,    0,    0,  130,    0,    0,    0,   34,  130,
  444,   35,  130,  130,  130,    0,    0,   36,  130,  130,
    0,    0,   32,    0,   33,    0,   31,  130,    0,   30,
   50,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,   13,    0,    0,  156,  157,
  158,   16,    0,    0,   34,    0,  450,   35,    0,    0,
    0,    0,    0,   50,    0,   25,    0,    0,    0,    2,
    3,    4,    5,    0,    7,   26,   27,   28,   29,   11,
   12,   13,    0,    0,  156,  157,  158,   16,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
   13,   25,    0,  156,  157,  158,   16,   34,    0,  455,
   35,   26,   27,   28,   29,    0,    0,    0,    0,    0,
   25,    0,    0,    0,    2,    3,    4,    5,    0,    7,
   26,   27,   28,   29,   11,   12,   13,    0,    0,  156,
  157,  158,   16,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,   13,   25,    0,  156,  157,
  158,   16,    0,    0,    0,    0,   26,   27,   28,   29,
    0,   36,    0,    0,    0,   25,   32,  267,   33,    0,
   31,    0,    0,   30,    0,   26,   27,   28,   29,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,   13,    0,    0,  156,  157,  158,   16,    0,    0,
   50,    0,    0,    0,    0,    0,    0,   36,    0,   50,
  208,   25,   32,  208,   33,    0,   31,    0,    0,   30,
    0,   26,   27,   28,   29,    0,    0,    0,  208,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,   13,    0,    0,  156,  157,  158,
   16,   34,    0,  456,   35,    0,   36,    0,    0,    0,
    0,   32,  208,   33,   25,   31,    0,    0,   30,    0,
    0,    0,    0,   36,   26,   27,   28,   29,   32,    0,
   33,    0,   31,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,  208,    0,    0,   34,  267,    0,
   35,  248,    0,  267,    0,    0,  267,  267,  267,    0,
    0,    0,  267,  267,  124,    0,    0,    0,    0,   36,
    0,  267,  267,    0,   32,    0,   33,  295,   31,    0,
  267,   30,  299,    0,    0,  303,  307,  311,    0,    0,
    0,  315,  319,    0,    0,    0,   34,    0,  251,  121,
  323,  187,  327,  330,  333,    0,  336,  339,    0,  190,
    0,    0,    0,   34,    0,   36,  121,    0,    0,    0,
   32,    0,   33,  258,   31,    0,    0,   30,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,   13,    0,
    0,  156,  157,  158,   16,    0,    0,    0,    0,   34,
    0,    0,  121,    0,    0,   36,    0,    0,   25,    0,
   32,    0,   33,    0,   31,    0,  208,   30,   26,   27,
   28,   29,    2,    3,    4,    5,    0,    7,  208,  208,
    0,    0,   11,   12,   13,    0,    0,  156,  157,  158,
   16,    0,    0,    0,    0,   34,    0,    0,  121,  208,
    0,   36,    0,    0,   25,    0,   32,    0,   33,    0,
   31,    0,  208,   30,   26,   27,   28,   29,    0,    0,
   83,    2,    3,    4,    0,    6,  205,  205,  205,  205,
  205,    0,  205,    0,   14,   97,    0,   83,    2,    3,
    4,    0,    6,   17,  205,   34,  205,    0,  121,    0,
    0,   14,   97,    0,    0,    0,  220,    0,    0,  220,
   17,  301,    0,   26,   27,   28,    0,    0,    0,    0,
    0,    0,    0,    0,  220,    0,    0,    0,  205,    0,
   26,   27,   28,   83,    2,    3,    4,    0,    6,    0,
    0,   34,    0,    0,  121,   36,    0,   14,   97,    0,
   32,    0,   33,    0,   31,    0,   17,   30,  220,    0,
  205,   36,    0,    0,    0,    0,   32,    0,   33,    0,
   31,    0,    0,   30,    0,    0,   26,   27,   28,   83,
    2,    3,    4,    0,    6,    0,    0,    0,    0,    0,
  220,    0,    0,   14,   97,  211,  211,  211,  211,  211,
    0,  211,   17,    0,    0,  361,    0,   36,    0,    0,
    0,    0,   32,  211,   33,  211,   31,    0,    0,   30,
    0,  413,   26,   27,   28,    0,    0,    0,    0,   83,
    2,    3,    4,    0,    6,   34,    0,    0,  121,    0,
    0,    0,    0,   14,   97,    0,    0,  211,    0,    0,
    0,   34,   17,    0,  121,    0,    0,    0,    0,    0,
   54,    0,   54,   54,   54,   54,   54,   54,   54,   54,
    0,    0,   26,   27,   28,   83,    2,    3,    4,  211,
    6,   54,   54,   54,   54,    0,    0,    0,    0,   14,
   97,    0,  205,    0,    0,    0,    0,   34,   17,    0,
  121,    0,    0,    0,  205,  205,    0,    0,    0,    0,
    0,    0,    0,   54,    0,   54,    0,    0,   26,   27,
   28,    0,  220,  184,    0,  205,  184,  184,  184,    0,
    0,    0,  184,  184,  220,  220,    0,    0,  205,    0,
    0,  184,  184,    0,    0,   54,   54,   54,    0,    0,
  184,    0,    0,    0,   51,  220,   51,   51,   51,   51,
   51,   51,   51,   51,    0,    0,    0,    0,  220,   83,
    2,    3,    4,    0,    6,   51,   51,   51,   51,    0,
    0,    0,    0,   14,   97,   83,    2,    3,    4,    0,
    6,    0,   17,    0,    0,    0,    0,    0,    0,   14,
   97,    0,    0,    0,    0,    0,    0,   51,   17,   51,
    0,  211,   26,   27,   28,    0,    0,    0,    0,    0,
    0,    0,    0,  211,  211,    0,    0,    0,   26,   27,
   28,  133,    2,    3,    4,    0,    6,    0,    0,   51,
   51,   51,    0,    0,  211,   14,   97,    0,    0,    0,
    0,    0,    0,    0,   17,    0,    0,  211,    0,    0,
    0,    0,    0,    0,   56,    0,   56,   56,   56,   56,
   56,   56,   56,   56,   26,   27,   28,    0,    0,   54,
    0,    0,    0,    0,   54,   56,   56,   56,   56,    0,
  372,   54,   54,    0,   54,  299,    0,    0,  376,  380,
  384,    0,    0,   54,  315,  319,    0,    0,    0,    0,
    0,   54,   54,  323,  187,  327,  388,   56,    0,   56,
    0,    0,  190,    0,   52,   54,   52,   52,   52,   52,
   52,   52,   52,   52,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   52,   52,   52,   52,   56,
   56,   56,    0,    0,    0,    0,    0,    0,    0,   53,
    0,   53,   53,   53,   53,   53,   53,   53,   53,    0,
    0,    0,    0,   51,    0,    0,    0,   52,   51,   52,
   53,   53,   53,   53,    0,   51,   51,    0,   51,    0,
    0,    0,    0,    0,    0,    0,    0,   51,  210,    0,
    0,  210,    0,    0,    0,   51,   51,    0,    0,   52,
   52,   52,   53,    0,   53,    0,  210,    0,   55,   51,
   55,   55,   55,   55,   55,   55,   55,   55,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
   55,   55,   55,    0,   53,   53,   53,    0,    0,    0,
  210,    0,    0,  195,    0,  195,  195,  195,  195,  195,
  195,  195,  195,    0,    0,    0,    0,    0,    0,    0,
    0,   55,    0,   55,  195,  195,  195,  195,    0,    0,
    0,    0,  210,   56,    0,    0,    0,    0,   56,    0,
    0,    0,    0,    0,    0,   56,   56,    0,   56,    0,
    0,    0,    0,   55,   55,   55,  195,   56,  195,    0,
    0,    0,    0,    0,  197,   56,   56,  197,  197,  197,
  197,  197,  197,  197,    0,    0,    0,    0,    0,   56,
    0,    0,    0,    0,    0,  197,    0,  197,    0,  195,
  195,    0,    0,   52,    0,    0,    0,    0,   52,    0,
    0,    0,    0,    0,    0,   52,   52,  200,   52,    0,
  200,  200,  200,  200,  200,  200,  200,   52,    0,  197,
    0,    0,    0,    0,    0,   52,   52,    0,  200,    0,
  200,    0,    0,    0,    0,    0,    0,    0,    0,   52,
   53,   53,    0,    0,    0,    0,    0,    0,    0,    0,
  197,  197,   53,    0,    0,    0,    0,    0,    0,    0,
   53,   53,  200,  201,  210,    0,  201,  201,  201,  201,
  201,  201,  201,    0,   53,    0,  210,  210,    0,    0,
    0,    0,    0,    0,  201,    0,  201,    0,    0,    0,
    0,    0,    0,  200,  200,    0,    0,  210,    0,   55,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  210,   55,    0,    0,    0,    0,    0,    0,  201,   55,
   55,  198,  195,    0,  198,  198,  198,  198,  198,  198,
  198,    0,    0,   55,  195,  195,    0,    0,    0,    0,
    0,    0,  198,    0,  198,    0,    0,    0,    0,  201,
  201,    0,    0,    0,    0,  195,  199,    0,    0,  199,
  199,  199,  199,  199,  199,  199,  214,    0,  195,  214,
  214,  214,  214,  214,  214,  214,  198,  199,    0,  199,
    0,    0,    0,  197,    0,    0,    0,  214,    0,  214,
    0,    0,    0,    0,  213,  197,  197,  213,  213,  213,
  213,  213,  213,  213,  121,    0,    0,  198,  198,  121,
    0,  199,  121,  121,  121,  213,  197,  213,  121,  121,
    0,  214,    0,    0,    0,    0,  200,  121,  121,  197,
    0,  426,    0,  426,  426,  426,  121,  426,  200,  200,
    0,    0,  199,  199,    0,    0,    0,    0,    0,  213,
    0,    0,  214,  214,    0,  426,    0,    0,    0,  200,
    0,    0,  206,    0,    0,  206,  206,  206,  206,  206,
  207,  206,  200,  207,  207,  207,  207,  207,    0,  207,
  213,  213,  201,  206,  426,  206,  130,    0,  130,  130,
  130,  207,  130,  207,  201,  201,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  203,
  130,  203,  203,  203,    0,  201,    0,  206,  212,  212,
  212,  212,  212,    0,  212,  207,    0,  203,  201,  203,
    0,  160,    0,  160,  160,    0,  212,  160,  212,  130,
  198,    0,    0,    0,    0,    0,    0,    0,  206,  206,
    0,    0,  198,  198,    0,  160,  207,  207,    0,    0,
    0,  203,    0,    0,    0,    0,  161,    0,  161,  161,
  212,    0,  161,  198,    0,  199,    0,   81,    0,   81,
   81,   81,    0,   81,  160,  214,  198,  199,  199,    0,
  161,    0,    0,  203,    0,    0,    0,  214,  214,    0,
    0,   81,  212,   83,    0,   83,   83,   83,  199,   83,
    0,    0,    0,  213,    0,    0,    0,    0,  214,  161,
    0,  199,    0,    0,    0,  213,  213,   83,    0,    0,
   81,  214,    0,   84,    0,   84,   84,   84,    0,   84,
    0,    0,    0,    0,    0,   85,  213,   85,   85,   85,
  426,   85,    0,    0,    0,  426,   83,   84,    0,  213,
    0,    0,    0,    0,  430,  426,    0,    0,    0,   85,
    0,    0,    0,  434,  426,  164,  164,    0,    0,  164,
    0,  206,  426,    0,    0,    0,   84,    0,    0,  207,
    0,  165,  165,  206,  206,  165,    0,  164,   85,    0,
    0,  207,  207,    0,    0,  130,    0,    0,    0,    0,
  130,    0,    0,  165,  206,    0,    0,    0,    0,  130,
  130,    0,  207,    0,    0,  203,  164,  206,  130,    0,
    0,    0,    0,    0,  212,  207,    0,  203,  203,    0,
    0,    0,  165,    0,    0,    0,  212,  212,    0,    0,
  160,    0,    0,    0,    0,  160,    0,    0,  203,    0,
    0,    0,    0,    0,  160,  160,    0,  212,    0,    0,
    0,  203,    0,  160,  160,    0,    0,    0,    0,    0,
  212,    0,  160,  180,    0,  161,    0,    0,  183,    0,
  161,  183,  183,  183,    0,    0,   81,  183,  183,  161,
  161,   81,    0,    0,    0,    0,  183,  187,  161,  161,
    0,   81,    0,    0,    0,  190,  372,  161,    0,    0,
   81,  299,   83,    0,  376,  380,  384,   83,   81,    0,
  315,  319,    0,    0,    0,    0,    0,   83,    0,  323,
  187,  327,  388,    0,    0,    0,   83,    0,  190,    0,
    0,  169,   84,  172,   83,  167,  165,   84,  166,  171,
  168,    0,    0,    0,   85,    0,    0,   84,    0,   85,
    0,    0,  174,  162,  164,  163,   84,    0,    0,   85,
    0,    0,    0,    0,   84,    0,    0,    0,   85,    0,
    0,    0,  164,    0,    0,    0,   85,  164,    0,    0,
    0,    0,    0,    0,  173,    0,  164,  164,  165,    0,
    0,    0,    0,  165,    0,  164,  164,    0,    0,    0,
    0,    0,  165,  165,  164,    0,    0,    0,    0,    0,
    0,  165,  165,    0,    0,    0,    0,  170,    0,  169,
  165,  172,  221,  167,  165,    0,  166,  171,  168,  169,
    0,  172,    0,  167,  165,    0,  166,  171,  168,    0,
    0,  162,  164,  163,    0,    0,    0,    0,    0,    0,
    0,  162,  164,  163,  169,    0,  172,    0,  167,  165,
    0,  166,  171,  168,    0,    0,  169,    0,  172,  386,
  167,  165,  173,  166,  171,  168,  162,  164,  163,    0,
    0,    0,  173,    0,  310,    0,    0,    0,  162,  164,
  163,    0,    0,    0,  169,    0,  172,    0,  167,  165,
    0,  166,  171,  168,    0,  170,    0,  173,    0,  348,
    0,    0,    0,    0,    0,  170,  162,  164,  163,  173,
  169,    0,  172,  410,  167,  165,    0,  166,  171,  168,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  170,    0,  162,  164,  163,    0,  169,  173,  172,  393,
  167,  165,  170,  166,  171,  168,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  162,  164,
  163,    0,    0,  173,  169,    0,  172,    0,  167,  165,
  170,  166,  171,  168,    0,  459,    0,  468,    0,  453,
  447,    0,  450,  465,  456,    0,  162,  164,  163,  173,
    0,  429,    0,    0,    0,    0,  170,  438,  444,  441,
    0,  495,    0,  504,    0,  489,  483,    0,  486,  501,
  492,  531,    0,  540,    0,  525,  519,  173,  522,  537,
  528,    0,  170,  474,  480,  477,    0,    0,  471,    0,
    0,    0,    0,  510,  516,  513,  687,    0,  696,    0,
  681,  675,    0,  678,  693,  684,    0,    0,    0,    0,
  170,    0,    0,    0,  507,    0,    0,    0,  666,  672,
  669,  462,    0,    0,  543,    0,    0,    0,    0,  295,
    0,    0,    0,    0,  299,    0,    0,  303,  307,  311,
    0,    0,    0,  315,  319,    0,    0,  498,    0,  699,
    0,    0,  323,  187,  327,  330,  333,  534,  336,  339,
  295,  190,    0,    0,    0,  299,    0,    0,  303,  307,
  311,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,  690,  323,  187,  327,  330,  333,  295,  336,
  339,    0,  190,  299,    0,    0,  303,  307,  311,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  330,  333,  295,  336,  339,    0,
  190,  299,    0,    0,  303,  307,  311,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  330,  333,  295,  336,  339,    0,  190,  299,
    0,    0,  303,  307,  311,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  330,  333,  295,  336,  339,    0,  190,  299,    0,    0,
  303,  307,  311,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  330,  333,
  295,  336,  339,    0,  190,  299,    0,    0,  303,  307,
  311,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  330,  333,  295,  336,
  339,    0,  190,  299,    0,    0,  303,  307,  311,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  330,  333,  295,  336,  339,    0,
  190,  299,    0,    0,  303,  307,  311,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  330,  333,  372,  336,  339,    0,  190,  299,
    0,    0,  376,  380,  384,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  388,    0,  372,    0,    0,    0,  190,  299,    0,    0,
  376,  380,  384,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  388,    0,
  372,    0,    0,    0,  190,  299,    0,    0,  376,  380,
  384,    0,    0,    0,  315,  319,    0,    0,    0,    0,
    0,    0,    0,  323,  187,  327,  388,    0,  372,    0,
    0,    0,  190,  299,    0,    0,  376,  380,  384,    0,
    0,    0,  315,  319,    0,    0,    0,    0,    0,    0,
    0,  323,  187,  327,  388,    0,  372,    0,    0,    0,
  190,  299,    0,    0,  376,  380,  384,    0,    0,    0,
  315,  319,    0,    0,    0,    0,    0,    0,    0,  323,
  187,  327,  388,    0,  372,    0,    0,    0,  190,  299,
    0,    0,  376,  380,  384,    0,    0,    0,  315,  319,
    0,    0,    0,    0,    0,    0,    0,  323,  187,  327,
  388,    0,  372,    0,    0,    0,  190,  299,    0,    0,
  376,  380,  384,    0,    0,    0,  315,  319,    0,    0,
    0,    0,    0,    0,    0,  323,  187,  327,  388,    0,
  356,    0,    0,    0,  190,  356,    0,    0,  356,  356,
  356,  180,    0,    0,  356,  356,  183,    0,    0,  183,
  183,  183,    0,  356,  360,  183,  183,    0,    0,    0,
    0,    0,  363,    0,  183,  187,    0,    0,    0,    0,
    0,    0,    0,  190,
};
static int yycheck[] = {                                      40,
    0,    1,    1,   59,   40,    0,    6,   61,    8,    9,
   10,    1,   89,   41,   14,   15,   44,   59,   91,  281,
  257,   91,   38,   91,   33,  126,  126,   38,  265,   40,
   44,   42,   44,  123,  343,    5,    5,    5,  322,   38,
  125,  325,   44,   58,   59,   59,   46,   41,   41,   60,
   44,   44,  284,  284,   38,   55,   40,  281,   42,  287,
  344,   45,   38,   44,   40,  289,   42,  123,  330,   44,
   46,   47,  381,   73,   74,  281,  284,  107,   55,   44,
   44,  123,  396,  289,   84,   85,   86,   87,   59,   89,
   89,   38,   59,  286,  126,   94,   96,   97,   44,   89,
  332,  332,   59,   73,  336,  336,   76,  107,  123,  123,
  372,  395,   44,  125,  123,   91,   44,  126,   44,   89,
   89,   59,  406,  125,  332,  439,  240,  241,  336,   59,
   59,  125,  125,   44,   40,   60,  420,   62,  370,  370,
  140,   59,  123,   74,  144,  145,  176,   94,  124,   38,
  125,  181,  123,   42,  438,  269,  257,  257,  123,  123,
   38,  262,  370,   59,   42,   96,  123,  137,  400,  400,
  271,  272,  142,  142,   58,   59,  176,  123,  146,  280,
  148,  181,   60,  151,  184,   91,   38,  187,  273,  274,
  275,  123,  400,  123,  194,  123,   40,  123,  271,  276,
  200,  271,   46,   59,   59,  123,  206,  280,  281,  209,
  280,  281,  281,  281,  125,  271,  289,   60,  186,  289,
  289,  289,   59,   75,  280,   41,  226,  281,   44,  271,
  271,  285,  209,  233,  264,  271,   59,   89,  280,  280,
   92,  257,   94,   59,  280,  322,  281,   91,  325,  258,
  259,  260,  258,  262,  289,  225,  284,  271,  286,  287,
  271,  261,  271,  272,  264,  265,  280,  344,   44,  280,
   44,  280,  278,  257,   44,   58,  276,  276,  273,  274,
  275,   44,  257,  283,  261,   59,  276,  139,  265,   59,
  142,  300,  301,  302,  269,  270,   59,  257,   61,  257,
  303,  304,  270,  273,  271,   44,  276,  276,   40,   41,
  123,  264,   44,  280,  314,  290,  319,   38,  395,   44,
   59,   42,  322,  322,  324,  325,  325,  297,  303,  406,
   62,  271,  322,  271,  257,  325,   41,  314,  190,   44,
  280,  257,  280,  420,  344,  344,  257,  264,  284,  125,
  286,  287,  322,  322,  344,  325,  325,  357,  269,  270,
  390,  438,   26,   27,   28,  257,   30,   31,   32,   33,
   34,   35,   36,   41,  344,  344,   44,  269,  270,  290,
  257,  349,  350,   44,  384,  385,  257,  417,  271,  389,
  390,   41,  360,   44,   44,  395,  395,  280,  290,   41,
  125,  431,   44,   38,  271,  395,  406,  406,   44,   93,
  264,  303,  412,  280,  271,   41,  406,  417,   44,  449,
  420,  420,  452,  280,  276,  395,  395,  273,  274,  275,
  420,  431,  432,   59,   40,  412,  406,  406,  438,  438,
  408,  409,   60,  443,   62,  413,   42,  271,  438,  449,
  420,  420,  452,  453,  454,  432,  280,  121,   60,  257,
   62,  429,   41,  271,  125,   44,  443,   93,  438,  438,
  322,   58,  280,  325,  125,   38,  453,  454,    0,   42,
   59,  257,   61,  147,   58,   58,  282,  283,  284,  125,
  286,  287,  344,  269,  270,   41,   59,   60,   44,  125,
  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
   60,   33,  271,   59,  290,   61,   38,  271,   40,  271,
   42,  280,  271,   45,    0,  257,  280,  303,  280,  281,
  262,  280,  257,  271,   62,   41,  257,  289,   44,  271,
  272,  262,  280,  395,  269,  270,   41,  257,  280,   44,
  271,  272,  271,   59,  406,   61,  220,   33,  222,  280,
   41,  280,   38,   44,   40,  290,   42,   41,  420,   45,
   44,  257,    0,  237,   41,  257,   43,   44,  303,   46,
   47,  262,  246,  247,  248,   41,  438,  251,   44,   61,
  271,  272,   59,   60,   61,   62,  257,   41,   40,  280,
   44,  123,   42,  125,  126,   33,  257,  264,  269,  270,
   38,   60,   40,   62,   42,   41,  257,   45,  269,  270,
   41,  257,  257,   44,   91,   41,   93,  262,   44,  290,
   38,  257,   40,  269,  270,   40,  271,  272,   46,  290,
   62,   40,  303,  269,  270,  280,  257,  123,  312,  125,
  126,   60,  303,   62,  290,   58,  320,  124,  125,   38,
   60,  257,   62,   60,  290,   62,  262,  303,  257,  258,
  259,  260,   60,   33,   62,  271,  272,  303,   38,   60,
   40,   62,   42,   91,  280,   45,   42,   40,  352,   43,
   40,   45,   46,   47,  257,  123,   40,  125,  126,  262,
   41,   40,  265,  266,  267,   59,   60,   61,   42,  272,
  374,   41,   41,   60,   44,   62,  124,   40,  281,  282,
  283,  284,   38,  286,  287,  257,  289,  391,   38,   59,
   61,   61,   60,   59,   62,  257,  258,  259,  260,  261,
  262,  263,   61,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,   60,  257,   62,  280,  281,
  282,  283,  284,  123,  286,  287,  126,  289,  290,   42,
  124,  294,  295,  296,  297,  298,  299,  257,  300,  301,
  302,  303,   60,   41,   62,  261,  262,  263,   59,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  260,  269,  270,  280,  281,  282,  283,  284,   41,
  286,  287,   40,  289,  290,   60,   59,   62,   60,   58,
   62,  123,   40,  290,  300,  301,  302,  303,   41,  257,
  258,  259,  260,  261,  262,  263,  303,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,   60,
   40,   62,  280,  281,  282,  283,  284,   59,  286,  287,
   40,  289,  290,  281,  282,  283,  284,   41,  286,  287,
   33,  289,  300,  301,  302,   38,   60,   40,   62,   42,
  260,   38,   45,   40,    0,   42,   43,  123,   45,   46,
   47,  126,  123,  123,   42,  257,   41,  257,  258,  259,
  260,  261,  262,  263,   61,  265,  266,  267,  268,  269,
  270,  271,  272,  303,  126,  257,  276,   40,  303,  257,
  280,  281,  282,  283,  284,  271,  286,  287,  276,  289,
  290,   40,  257,  430,   91,  336,   -1,   -1,  358,   33,
  300,  301,  302,  303,   38,  172,   40,  257,   42,   -1,
  257,   45,  262,   -1,  257,  262,   -1,   -1,   -1,  262,
  123,  271,  272,  126,  271,  272,   -1,  124,  271,  272,
  280,  281,   -1,  280,  281,   -1,   -1,  280,   -1,  289,
   -1,   -1,  289,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   -1,  257,   45,   -1,
   -1,   38,  262,   40,   41,   42,   43,   44,   45,   46,
   47,  271,  272,  257,   -1,   -1,  257,   -1,  262,   -1,
  280,  262,   59,   60,   61,   62,   -1,  271,  272,  123,
  271,  272,  126,   -1,   -1,   33,  280,   -1,   -1,  280,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   38,   -1,
   -1,   -1,   42,   43,   91,   45,   46,   47,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   59,
   60,   61,   62,   -1,   -1,   -1,  123,   -1,   -1,  126,
   59,   60,   61,   62,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   91,  265,  266,  267,  268,  269,  270,  271,  272,
   40,   -1,   91,  276,   -1,   -1,   -1,  280,  281,  282,
  283,  284,   -1,  286,  287,  123,  289,  290,  126,   -1,
   -1,   -1,   -1,   -1,  124,   -1,  257,  300,  301,  302,
  303,  262,   -1,   -1,   -1,  124,   -1,  257,   33,   -1,
  271,  272,  262,   38,   -1,   40,   -1,   42,   -1,  280,
   45,  271,  272,  257,  258,  259,  260,  261,  262,  263,
  280,  265,  266,  267,  268,  269,  270,  271,  272,   -1,
   -1,   -1,  276,   -1,   -1,  126,  280,  281,  282,  283,
  284,   -1,  286,  287,   -1,  289,  290,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  300,  301,  302,  303,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,  270,  271,  272,   -1,   -1,   41,  276,
   43,   44,   45,  280,  281,  282,  283,  284,  123,  286,
  287,  126,  289,  290,  281,   -1,   59,   -1,   61,   -1,
   -1,   -1,  289,  300,  301,  302,  303,   40,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,
   93,   -1,  280,  281,  282,  283,  284,   -1,  286,  287,
   -1,  289,  290,   -1,  284,   -1,  286,  287,   -1,   -1,
  126,  280,  300,  301,  302,  303,   -1,   -1,   -1,   -1,
   33,   -1,  125,   -1,   -1,   38,  257,   40,   -1,   42,
   -1,  262,   45,   -1,  265,  266,  267,  257,   -1,   -1,
  271,  272,  262,   -1,   -1,  265,  266,  267,   -1,  280,
  281,  271,  272,   -1,   -1,   -1,   -1,   -1,  289,   -1,
  280,  281,  282,  283,   -1,   -1,  257,   33,   -1,  289,
   -1,  262,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
  271,  272,  257,  258,  259,  260,  261,  262,  263,  280,
  265,  266,  267,  268,  269,  270,  271,  272,   -1,   -1,
   -1,  276,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  123,  286,  287,  126,  289,  290,   -1,   41,   42,   43,
   44,   45,   -1,   47,   33,  300,  301,  302,  303,   38,
   -1,   40,   -1,   42,   -1,   59,   45,   61,  257,   -1,
   -1,  257,   -1,  262,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  271,  272,  257,  271,  272,  123,   -1,   -1,
  126,  280,   -1,   -1,  280,  281,  269,  270,   -1,   93,
   -1,   33,   -1,  289,   -1,   -1,   38,   -1,   40,   -1,
   42,  257,   -1,   45,  257,   -1,  262,  290,   -1,  262,
   -1,   -1,  265,  266,  267,  271,  272,  257,  271,  272,
  303,  125,  262,   -1,  280,   -1,   -1,  280,  281,   -1,
   -1,  271,  272,   -1,  123,   -1,  289,  126,  257,   33,
  280,   -1,   -1,  262,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,  270,  271,  272,
   -1,  123,   -1,  276,  126,   -1,   -1,  280,  281,  282,
  283,  284,   -1,  286,  287,   -1,  289,  290,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,  300,  301,  302,
  303,  257,  258,  259,  260,  261,  262,  263,   59,  265,
  266,  267,  268,  269,  270,  271,  272,   -1,   -1,  123,
  276,  125,  126,   -1,  280,  281,  282,  283,  284,   -1,
  286,  287,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,  257,  300,  301,  302,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,  125,   -1,  290,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,   -1,  286,  287,  303,
  289,  290,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,  300,  301,  302,  303,  257,  258,  259,  260,  261,
  262,  263,   59,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,   -1,  286,  287,   -1,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,  300,  301,
  302,  303,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   33,  273,
  274,  275,  276,   38,   -1,   40,   -1,   42,  125,  257,
   45,   -1,   -1,   -1,  262,   -1,  290,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,  300,  301,  302,  303,
   -1,   -1,  280,   -1,   33,   -1,  257,   -1,   -1,   38,
  257,   40,   -1,   42,   -1,  262,   45,   -1,  269,  270,
   -1,   -1,   -1,   33,  271,  272,   -1,   -1,   38,   -1,
   40,   -1,   42,  280,   -1,   45,   -1,   -1,   -1,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,
   -1,   43,  303,   45,   46,   47,   -1,   -1,  123,   33,
  125,  126,   -1,   -1,   38,   -1,   40,   59,   42,   61,
   62,   45,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,  279,   -1,
   45,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   91,
  291,  292,  293,  294,  295,  296,  297,  298,  299,   -1,
  257,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,
   -1,   -1,  269,  270,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  124,   42,   -1,   -1,   45,   38,   -1,   -1,
   -1,   42,   43,  290,   45,   46,   47,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,  303,   -1,   59,   60,
   61,   62,   -1,   -1,  257,   -1,   -1,   -1,  123,  262,
  125,  126,  265,  266,  267,   -1,   -1,   33,  271,  272,
   -1,   -1,   38,   -1,   40,   -1,   42,  280,   -1,   45,
   91,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,
  275,  276,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
   -1,   -1,   -1,  124,   -1,  290,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,  300,  301,  302,  303,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
  270,  290,   -1,  273,  274,  275,  276,  123,   -1,  125,
  126,  300,  301,  302,  303,   -1,   -1,   -1,   -1,   -1,
  290,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
  300,  301,  302,  303,  268,  269,  270,   -1,   -1,  273,
  274,  275,  276,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,  270,  290,   -1,  273,  274,
  275,  276,   -1,   -1,   -1,   -1,  300,  301,  302,  303,
   -1,   33,   -1,   -1,   -1,  290,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,  300,  301,  302,  303,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  280,
   41,  290,   38,   44,   40,   -1,   42,   -1,   -1,   45,
   -1,  300,  301,  302,  303,   -1,   -1,   -1,   59,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,  123,   -1,  125,  126,   -1,   33,   -1,   -1,   -1,
   -1,   38,   93,   40,  290,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   33,  300,  301,  302,  303,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,  123,  257,   -1,
  126,   61,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   91,   -1,   -1,   -1,   -1,   33,
   -1,  280,  281,   -1,   38,   -1,   40,  257,   42,   -1,
  289,   45,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,  123,   -1,   62,  126,
  280,  281,  282,  283,  284,   -1,  286,  287,   -1,  289,
   -1,   -1,   -1,  123,   -1,   33,  126,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,  270,   -1,
   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,   33,   -1,   -1,  290,   -1,
   38,   -1,   40,   -1,   42,   -1,  257,   45,  300,  301,
  302,  303,  258,  259,  260,  261,   -1,  263,  269,  270,
   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,  290,
   -1,   33,   -1,   -1,  290,   -1,   38,   -1,   40,   -1,
   42,   -1,  303,   45,  300,  301,  302,  303,   -1,   -1,
  257,  258,  259,  260,   -1,  262,   41,   42,   43,   44,
   45,   -1,   47,   -1,  271,  272,   -1,  257,  258,  259,
  260,   -1,  262,  280,   59,  123,   61,   -1,  126,   -1,
   -1,  271,  272,   -1,   -1,   -1,   41,   -1,   -1,   44,
  280,   93,   -1,  300,  301,  302,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   93,   -1,
  300,  301,  302,  257,  258,  259,  260,   -1,  262,   -1,
   -1,  123,   -1,   -1,  126,   33,   -1,  271,  272,   -1,
   38,   -1,   40,   -1,   42,   -1,  280,   45,   93,   -1,
  125,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,  300,  301,  302,  257,
  258,  259,  260,   -1,  262,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,  271,  272,   41,   42,   43,   44,   45,
   -1,   47,  280,   -1,   -1,   93,   -1,   33,   -1,   -1,
   -1,   -1,   38,   59,   40,   61,   42,   -1,   -1,   45,
   -1,   93,  300,  301,  302,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,  262,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   93,   -1,   -1,
   -1,  123,  280,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,  300,  301,  302,  257,  258,  259,  260,  125,
  262,   59,   60,   61,   62,   -1,   -1,   -1,   -1,  271,
  272,   -1,  257,   -1,   -1,   -1,   -1,  123,  280,   -1,
  126,   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   93,   -1,   -1,  300,  301,
  302,   -1,  257,  262,   -1,  290,  265,  266,  267,   -1,
   -1,   -1,  271,  272,  269,  270,   -1,   -1,  303,   -1,
   -1,  280,  281,   -1,   -1,  123,  124,  125,   -1,   -1,
  289,   -1,   -1,   -1,   38,  290,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,  303,  257,
  258,  259,  260,   -1,  262,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,  271,  272,  257,  258,  259,  260,   -1,
  262,   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   91,  280,   93,
   -1,  257,  300,  301,  302,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,   -1,   -1,   -1,  300,  301,
  302,  257,  258,  259,  260,   -1,  262,   -1,   -1,  123,
  124,  125,   -1,   -1,  290,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  280,   -1,   -1,  303,   -1,   -1,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,  300,  301,  302,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   59,   60,   61,   62,   -1,
  257,  269,  270,   -1,  272,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  281,  271,  272,   -1,   -1,   -1,   -1,
   -1,  289,  290,  280,  281,  282,  283,   91,   -1,   93,
   -1,   -1,  289,   -1,   38,  303,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,  123,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   91,  262,   93,
   59,   60,   61,   62,   -1,  269,  270,   -1,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,   41,   -1,
   -1,   44,   -1,   -1,   -1,  289,  290,   -1,   -1,  123,
  124,  125,   91,   -1,   93,   -1,   59,   -1,   38,  303,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,  123,  124,  125,   -1,   -1,   -1,
   93,   -1,   -1,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   93,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,  125,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,   -1,  272,   -1,
   -1,   -1,   -1,  123,  124,  125,   91,  281,   93,   -1,
   -1,   -1,   -1,   -1,   38,  289,  290,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,  303,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,  124,
  125,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,   38,  272,   -1,
   41,   42,   43,   44,   45,   46,   47,  281,   -1,   93,
   -1,   -1,   -1,   -1,   -1,  289,  290,   -1,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,
  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,  290,   93,   38,  257,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,  303,   -1,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,  124,  125,   -1,   -1,  290,   -1,  269,
  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  303,  281,   -1,   -1,   -1,   -1,   -1,   -1,   93,  289,
  290,   38,  257,   -1,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,  303,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,  290,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   38,   -1,  303,   41,
   42,   43,   44,   45,   46,   47,   93,   59,   -1,   61,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   59,   -1,   61,
   -1,   -1,   -1,   -1,   38,  269,  270,   41,   42,   43,
   44,   45,   46,   47,  257,   -1,   -1,  124,  125,  262,
   -1,   93,  265,  266,  267,   59,  290,   61,  271,  272,
   -1,   93,   -1,   -1,   -1,   -1,  257,  280,  281,  303,
   -1,   38,   -1,   40,   41,   42,  289,   44,  269,  270,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,  124,  125,   -1,   62,   -1,   -1,   -1,  290,
   -1,   -1,   38,   -1,   -1,   41,   42,   43,   44,   45,
   38,   47,  303,   41,   42,   43,   44,   45,   -1,   47,
  124,  125,  257,   59,   91,   61,   38,   -1,   40,   41,
   42,   59,   44,   61,  269,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   62,   43,   44,   45,   -1,  290,   -1,   93,   41,   42,
   43,   44,   45,   -1,   47,   93,   -1,   59,  303,   61,
   -1,   38,   -1,   40,   41,   -1,   59,   44,   61,   91,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,  269,  270,   -1,   62,  124,  125,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   93,   -1,   44,  290,   -1,  257,   -1,   38,   -1,   40,
   41,   42,   -1,   44,   91,  257,  303,  269,  270,   -1,
   62,   -1,   -1,  125,   -1,   -1,   -1,  269,  270,   -1,
   -1,   62,  125,   38,   -1,   40,   41,   42,  290,   44,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,  290,   91,
   -1,  303,   -1,   -1,   -1,  269,  270,   62,   -1,   -1,
   91,  303,   -1,   38,   -1,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   38,  290,   40,   41,   42,
  257,   44,   -1,   -1,   -1,  262,   91,   62,   -1,  303,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   62,
   -1,   -1,   -1,  280,  281,   40,   41,   -1,   -1,   44,
   -1,  257,  289,   -1,   -1,   -1,   91,   -1,   -1,  257,
   -1,   40,   41,  269,  270,   44,   -1,   62,   91,   -1,
   -1,  269,  270,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   62,  290,   -1,   -1,   -1,   -1,  271,
  272,   -1,  290,   -1,   -1,  257,   91,  303,  280,   -1,
   -1,   -1,   -1,   -1,  257,  303,   -1,  269,  270,   -1,
   -1,   -1,   91,   -1,   -1,   -1,  269,  270,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  290,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,  290,   -1,   -1,
   -1,  303,   -1,  280,  281,   -1,   -1,   -1,   -1,   -1,
  303,   -1,  289,  257,   -1,  257,   -1,   -1,  262,   -1,
  262,  265,  266,  267,   -1,   -1,  257,  271,  272,  271,
  272,  262,   -1,   -1,   -1,   -1,  280,  281,  280,  281,
   -1,  272,   -1,   -1,   -1,  289,  257,  289,   -1,   -1,
  281,  262,  257,   -1,  265,  266,  267,  262,  289,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,  272,   -1,  280,
  281,  282,  283,   -1,   -1,   -1,  281,   -1,  289,   -1,
   -1,   38,  257,   40,  289,   42,   43,  262,   45,   46,
   47,   -1,   -1,   -1,  257,   -1,   -1,  272,   -1,  262,
   -1,   -1,   59,   60,   61,   62,  281,   -1,   -1,  272,
   -1,   -1,   -1,   -1,  289,   -1,   -1,   -1,  281,   -1,
   -1,   -1,  257,   -1,   -1,   -1,  289,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,  271,  272,  257,   -1,
   -1,   -1,   -1,  262,   -1,  280,  281,   -1,   -1,   -1,
   -1,   -1,  271,  272,  289,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,   -1,   -1,   -1,   -1,  124,   -1,   38,
  289,   40,   41,   42,   43,   -1,   45,   46,   47,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   38,   -1,   40,   41,
   42,   43,   91,   45,   46,   47,   60,   61,   62,   -1,
   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,  124,   -1,   91,   -1,   93,
   -1,   -1,   -1,   -1,   -1,  124,   60,   61,   62,   91,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   60,   61,   62,   -1,   38,   91,   40,   93,
   42,   43,  124,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   91,   38,   -1,   40,   -1,   42,   43,
  124,   45,   46,   47,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   60,   61,   62,   91,
   -1,   93,   -1,   -1,   -1,   -1,  124,   60,   61,   62,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   38,   -1,   40,   -1,   42,   43,   91,   45,   46,
   47,   -1,  124,   60,   61,   62,   -1,   -1,   91,   -1,
   -1,   -1,   -1,   60,   61,   62,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   91,   -1,   -1,   -1,   60,   61,
   62,  124,   -1,   -1,   91,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,   -1,  124,   -1,   91,
   -1,   -1,  280,  281,  282,  283,  284,  124,  286,  287,
  257,  289,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  280,  281,  282,  283,  284,  257,  286,
  287,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  257,  286,  287,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  257,  286,  287,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,  284,  257,  286,  287,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,  284,
  257,  286,  287,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,  257,  286,
  287,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  257,  286,  287,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,  284,  257,  286,  287,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,   -1,  257,   -1,   -1,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,   -1,
  257,   -1,   -1,   -1,  289,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,   -1,  257,   -1,
   -1,   -1,  289,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,  281,  282,  283,   -1,  257,   -1,   -1,   -1,
  289,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,
  281,  282,  283,   -1,  257,   -1,   -1,   -1,  289,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,
  283,   -1,  257,   -1,   -1,   -1,  289,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,   -1,
  257,   -1,   -1,   -1,  289,  262,   -1,   -1,  265,  266,
  267,  257,   -1,   -1,  271,  272,  262,   -1,   -1,  265,
  266,  267,   -1,  280,  281,  271,  272,   -1,   -1,   -1,
   -1,   -1,  289,   -1,  280,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  289,
};
static int yyctable[] = {                                      1,
    2,  130,  184,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  130,  184,
   -1,    7,    2,   -1,    8,    2,  130,  184,   -1,    9,
    2,  130,  184,   -1,   10,    2,  130,  184,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
  130,  184,   -1,   15,    2,  130,  184,   -1,   16,    2,
   -1,   17,    2,  130,  184,   -1,   18,    2,  184,   -1,
   19,    2,  184,   -1,   20,    2,  184,   -1,   21,    2,
  184,   -1,   22,    2,  184,   -1,   23,    2,  184,   -1,
   24,    2,  184,   -1,   25,    2,   -1,   26,    2,   -1,
   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,   30,
    2,   -1,   31,    2,   -1,   32,    2,   -1,   33,    2,
   -1,   34,    2,   -1,   35,    2,   -1,   36,    2,   -1,
   83,  130,  185,   -1,    6,  130,  185,   -1,   84,  130,
  185,   -1,   85,  130,  185,   -1,   86,  130,  185,   -1,
   87,   50,  130,  185,   -1,   15,  130,  185,   -1,   17,
   50,  130,  185,   -1,   18,  185,   -1,   19,  185,   -1,
   88,  185,   -1,   24,  185,   -1,   89,   50,   -1,   93,
  130,  184,   -1,  130,  184,   -1,   18,  184,   -1,   24,
  184,   -1,   83,   53,   -1,    6,   53,   -1,   14,   53,
   -1,   97,   53,   -1,   17,   53,   -1,   83,  180,   -1,
    6,  180,   -1,   14,  180,   -1,   97,  180,   -1,   17,
  180,   -1,   83,  181,   -1,    6,  181,   -1,   14,  181,
   -1,   97,  181,   -1,   17,  181,   -1,   83,  182,   -1,
    6,  182,   -1,   14,  182,   -1,   97,  182,   -1,   17,
  182,   -1,   83,   55,   -1,    6,   55,   -1,   14,   55,
   -1,   97,   55,   -1,   17,   55,   -1,  101,  122,   -1,
  108,  121,   -1,   83,  222,   -1,   30,  222,   -1,   31,
  222,   -1,   32,  222,   -1,   33,  222,   -1,  142,  195,
   -1,   81,  195,   -1,    1,  130,  184,   -1,    6,  130,
  184,   -1,    8,  130,  184,   -1,    9,  130,  184,   -1,
   10,  130,  184,   -1,   14,  130,  184,   -1,   15,  130,
  184,   -1,   17,  130,  184,   -1,   19,  184,   -1,   20,
  184,   -1,   21,  184,   -1,   22,  184,   -1,   23,  184,
   -1,  183,  184,   -1,    6,  184,   -1,   14,  184,   -1,
   97,  184,   -1,   17,  184,   -1,  119,  130,   -1,   18,
  119,   -1,   24,  119,   -1,  188,  184,   -1,  191,   29,
   -1,  183,  130,  184,   -1,   84,  130,  184,   -1,   85,
  130,  184,   -1,   86,  130,  184,   -1,   88,  184,   -1,
  200,   81,   -1,  141,   81,   -1,  200,   54,   -1,  141,
   54,   -1,  200,   83,   -1,  141,   83,   -1,  200,   84,
   -1,  141,   84,   -1,  200,   85,   -1,  141,   85,   -1,
  200,   51,   -1,  141,   51,   -1,   56,   82,   -1,  200,
   56,   82,   -1,  141,   56,   82,   -1,  162,  218,   -1,
  163,  218,   -1,  164,  218,   -1,  165,  218,   -1,  166,
  218,   -1,  167,  218,   -1,  168,  218,   -1,  169,  218,
   -1,  170,  218,   -1,  171,  218,   -1,  172,  218,   -1,
  173,  218,   -1,  162,  219,   -1,  163,  219,   -1,  164,
  219,   -1,  165,  219,   -1,  166,  219,   -1,  167,  219,
   -1,  168,  219,   -1,  169,  219,   -1,  170,  219,   -1,
  171,  219,   -1,  172,  219,   -1,  173,  219,   -1,  162,
  221,   -1,  163,  221,   -1,  164,  221,   -1,  165,  221,
   -1,  166,  221,   -1,  167,  221,   -1,  168,  221,   -1,
  169,  221,   -1,  170,  221,   -1,  171,  221,   -1,  172,
  221,   -1,  173,  221,   -1,  162,  197,   -1,  163,  197,
   -1,  162,  200,   -1,  163,  200,   -1,  162,  201,   -1,
  163,  201,   -1,  224,   50,   -1,  162,  198,   -1,  163,
  198,   -1,  162,  199,   -1,  163,  199,   -1,   93,  184,
   -1,   18,  130,   -1,   24,  130,   -1,   50,  185,   -1,
  200,   56,   -1,  141,   56,   -1,  287,   33,   -1,  288,
   33,   -1,  289,   33,   -1,  290,   33,   -1,  298,   50,
   -1,  200,   52,   -1,  141,   52,   -1,  162,  208,   -1,
  163,  208,   -1,  162,  202,   -1,  163,  202,   -1,  162,
  203,   -1,  163,  203,   -1,  162,  204,   -1,  163,  204,
   -1,  162,  205,   -1,  163,  205,   -1,  162,  206,   -1,
  163,  206,   -1,  162,  207,   -1,  163,  207,   -1,  162,
  214,   -1,  163,  214,   -1,  162,  220,   -1,  163,  220,
   -1,  164,  220,   -1,  165,  220,   -1,  166,  220,   -1,
  167,  220,   -1,  168,  220,   -1,  169,  220,   -1,  170,
  220,   -1,  171,  220,   -1,  172,  220,   -1,  173,  220,
   -1,  162,  211,   -1,  163,  211,   -1,  162,  212,   -1,
  163,  212,   -1,  162,  210,   -1,  163,  210,   -1,  162,
  213,   -1,  163,  213,   -1,  334,   69,   -1,   12,   69,
   -1,   13,   69,   -1,  335,   69,   -1,   29,   69,   -1,
  191,   65,   -1,
};
#define YYFINAL 37
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 313
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknEllipsis","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknNew","tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT",
"RSHIFT","ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 851 "C:/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 1877 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 258 "C:/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 2267 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 265 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2273 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 266 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2283 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 271 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2293 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 276 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2299 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 279 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2305 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 280 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2311 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 281 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2317 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 282 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2323 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 283 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2329 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 284 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2335 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 285 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2341 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 286 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2347 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 287 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2353 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 288 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2359 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 289 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2365 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 290 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2371 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 291 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2377 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 292 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2383 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 293 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2389 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 294 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2395 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 295 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2401 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 296 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2407 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 297 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2413 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 298 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2419 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 299 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2425 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 300 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2431 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 301 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2437 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 302 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2443 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 305 "C:/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 2449 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 306 "C:/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 2455 "y_tab.c"
break;
case 32:
#line 309 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2460 "y_tab.c"
  if (!yytrial)
#line 309 "C:/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2467 "y_tab.c"
break;
case 33:
#line 313 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2472 "y_tab.c"
  if (!yytrial)
#line 313 "C:/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2479 "y_tab.c"
break;
case 34:
#line 317 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2484 "y_tab.c"
  if (!yytrial)
#line 317 "C:/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 2491 "y_tab.c"
break;
case 35:
#line 321 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2496 "y_tab.c"
  if (!yytrial)
#line 321 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 2503 "y_tab.c"
break;
case 36:
#line 325 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2508 "y_tab.c"
  if (!yytrial)
#line 325 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 2515 "y_tab.c"
break;
case 37:
#line 329 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2520 "y_tab.c"
  if (!yytrial)
#line 329 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 2527 "y_tab.c"
break;
case 38:
#line 335 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2532 "y_tab.c"
  if (!yytrial)
#line 335 "C:/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 2536 "y_tab.c"
break;
case 39:
#line 338 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2541 "y_tab.c"
  if (!yytrial)
#line 338 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2545 "y_tab.c"
break;
case 40:
#line 339 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2550 "y_tab.c"
  if (!yytrial)
#line 339 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2554 "y_tab.c"
break;
case 41:
#line 345 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2559 "y_tab.c"
  if (!yytrial)
#line 345 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 2563 "y_tab.c"
break;
case 42:
#line 346 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2568 "y_tab.c"
  if (!yytrial)
#line 346 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 2572 "y_tab.c"
break;
case 43:
#line 347 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2577 "y_tab.c"
  if (!yytrial)
#line 347 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 2581 "y_tab.c"
break;
case 44:
#line 348 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2586 "y_tab.c"
  if (!yytrial)
#line 348 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 2590 "y_tab.c"
break;
case 45:
#line 349 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2595 "y_tab.c"
  if (!yytrial)
#line 349 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 2599 "y_tab.c"
break;
case 46:
#line 350 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2604 "y_tab.c"
  if (!yytrial)
#line 350 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 2608 "y_tab.c"
break;
case 47:
#line 353 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2613 "y_tab.c"
  if (!yytrial)
#line 353 "C:/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 2617 "y_tab.c"
break;
case 48:
#line 356 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2622 "y_tab.c"
  if (!yytrial)
#line 356 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2626 "y_tab.c"
break;
case 49:
#line 357 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2631 "y_tab.c"
  if (!yytrial)
#line 357 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2635 "y_tab.c"
break;
case 50:
  if (!yytrial)
#line 360 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2641 "y_tab.c"
break;
case 51:
  if (!yytrial)
#line 361 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2647 "y_tab.c"
break;
case 52:
  if (!yytrial)
#line 362 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 2653 "y_tab.c"
break;
case 53:
  if (!yytrial)
#line 363 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2659 "y_tab.c"
break;
case 54:
  if (!yytrial)
#line 364 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2665 "y_tab.c"
break;
case 55:
  if (!yytrial)
#line 365 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2671 "y_tab.c"
break;
case 56:
  if (!yytrial)
#line 366 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2677 "y_tab.c"
break;
case 57:
  if (!yytrial)
#line 367 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2683 "y_tab.c"
break;
case 58:
  if (!yytrial)
#line 368 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2689 "y_tab.c"
break;
case 59:
  if (!yytrial)
#line 371 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 2695 "y_tab.c"
break;
case 60:
  if (!yytrial)
#line 372 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2701 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 375 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 2707 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 376 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 2713 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 377 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 2719 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 378 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 2725 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 379 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 2731 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 382 "C:/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 2737 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 383 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2746 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 387 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2755 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 391 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 2763 "y_tab.c"
break;
case 70:
#line 396 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2768 "y_tab.c"
  if (!yytrial)
#line 396 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 2774 "y_tab.c"
break;
case 71:
#line 399 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2779 "y_tab.c"
  if (!yytrial)
#line 399 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 2785 "y_tab.c"
break;
case 72:
#line 402 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2790 "y_tab.c"
  if (!yytrial)
#line 402 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 2796 "y_tab.c"
break;
case 73:
#line 405 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2801 "y_tab.c"
  if (!yytrial)
#line 405 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 2807 "y_tab.c"
break;
case 74:
#line 409 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2812 "y_tab.c"
  if (!yytrial)
#line 409 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 2818 "y_tab.c"
break;
case 75:
#line 412 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2823 "y_tab.c"
  if (!yytrial)
#line 412 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 2829 "y_tab.c"
break;
case 76:
#line 415 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2834 "y_tab.c"
  if (!yytrial)
#line 415 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 2840 "y_tab.c"
break;
case 77:
#line 420 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2845 "y_tab.c"
  if (!yytrial)
#line 420 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2849 "y_tab.c"
break;
case 78:
#line 421 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 2854 "y_tab.c"
  if (!yytrial)
#line 421 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2858 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 424 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 2864 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 427 "C:/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 2873 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 433 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2879 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 434 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2885 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 435 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2891 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 436 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2897 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 437 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2903 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 438 "C:/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 2912 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 444 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 2918 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 447 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 2929 "y_tab.c"
break;
case 89:
  if (!yytrial)
#line 453 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 2939 "y_tab.c"
break;
case 90:
  if (!yytrial)
#line 458 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2950 "y_tab.c"
break;
case 91:
  if (!yytrial)
#line 464 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 2960 "y_tab.c"
break;
case 92:
  if (!yytrial)
#line 469 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2971 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 475 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 2981 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 484 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 2989 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 487 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 2997 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 490 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 3005 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 496 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 3013 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 499 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 3022 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 503 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 3030 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 508 "C:/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 3036 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 509 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 3042 "y_tab.c"
break;
case 102:
#line 512 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3047 "y_tab.c"
  if (!yytrial)
#line 512 "C:/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 3051 "y_tab.c"
break;
case 103:
#line 515 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3056 "y_tab.c"
  if (!yytrial)
#line 515 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 3064 "y_tab.c"
break;
case 104:
#line 522 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3069 "y_tab.c"
  if (!yytrial)
#line 522 "C:/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 3076 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 527 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3086 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 532 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3096 "y_tab.c"
break;
case 107:
#line 539 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3101 "y_tab.c"
  if (!yytrial)
#line 539 "C:/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 3105 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 542 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3115 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 547 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3125 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 554 "C:/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 3131 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 555 "C:/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 3140 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 559 "C:/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 3149 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 565 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3155 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 566 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3161 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 567 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3167 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 568 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 3173 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 571 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 3179 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 572 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 3185 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 575 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 3191 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 576 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 3197 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 577 "C:/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 3203 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 578 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 3209 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 579 "C:/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 3215 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 580 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3221 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 581 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3227 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 584 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3233 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 585 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 3239 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 586 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 3245 "y_tab.c"
break;
case 129:
#line 587 "C:/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 3250 "y_tab.c"
  if (!yytrial)
#line 588 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 3254 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 591 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3260 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 592 "C:/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 3266 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 593 "C:/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 3272 "y_tab.c"
break;
case 133:
#line 596 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3277 "y_tab.c"
  if (!yytrial)
#line 596 "C:/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 3281 "y_tab.c"
break;
case 134:
#line 602 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3286 "y_tab.c"
  if (!yytrial)
#line 603 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3294 "y_tab.c"
break;
case 135:
#line 608 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3299 "y_tab.c"
break;
case 136:
#line 612 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3304 "y_tab.c"
  if (!yytrial)
#line 613 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3311 "y_tab.c"
break;
case 137:
#line 617 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3316 "y_tab.c"
break;
case 138:
#line 621 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3321 "y_tab.c"
  if (!yytrial)
#line 622 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 3328 "y_tab.c"
break;
case 139:
#line 629 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 3340 "y_tab.c"
  if (!yytrial)
#line 637 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 3346 "y_tab.c"
break;
case 140:
#line 640 "C:/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3351 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 641 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 3359 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 646 "C:/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 3365 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 647 "C:/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3371 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 648 "C:/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3377 "y_tab.c"
break;
case 145:
#line 651 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3382 "y_tab.c"
  if (!yytrial)
#line 651 "C:/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 3386 "y_tab.c"
break;
case 146:
#line 654 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3391 "y_tab.c"
  if (!yytrial)
#line 655 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3398 "y_tab.c"
break;
case 147:
#line 659 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3403 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 661 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3412 "y_tab.c"
break;
case 149:
#line 665 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3417 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 667 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3426 "y_tab.c"
break;
case 151:
#line 674 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 3438 "y_tab.c"
  if (!yytrial)
#line 682 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 3446 "y_tab.c"
break;
case 152:
#line 688 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 3458 "y_tab.c"
  if (!yytrial)
#line 696 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 3466 "y_tab.c"
break;
case 153:
#line 702 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 3478 "y_tab.c"
  if (!yytrial)
#line 710 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 3486 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 717 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3496 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 722 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3505 "y_tab.c"
break;
case 156:
#line 728 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3510 "y_tab.c"
  if (!yytrial)
#line 728 "C:/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 3514 "y_tab.c"
break;
case 157:
#line 731 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3519 "y_tab.c"
  if (!yytrial)
#line 731 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3523 "y_tab.c"
break;
case 158:
#line 732 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3528 "y_tab.c"
  if (!yytrial)
#line 732 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3532 "y_tab.c"
break;
case 159:
#line 733 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3537 "y_tab.c"
  if (!yytrial)
#line 733 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 3541 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 736 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 3547 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 737 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 3553 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 740 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 3559 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 741 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 3565 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 744 "C:/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 3571 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 745 "C:/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 3577 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 746 "C:/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 3583 "y_tab.c"
break;
case 167:
#line 749 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3588 "y_tab.c"
  if (!yytrial)
#line 749 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 3592 "y_tab.c"
break;
case 168:
#line 751 "C:/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 3602 "y_tab.c"
  if (!yytrial)
#line 757 "C:/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 3608 "y_tab.c"
break;
case 169:
#line 763 "C:/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 3613 "y_tab.c"
  if (!yytrial)
#line 763 "C:/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 3617 "y_tab.c"
break;
case 170:
#line 765 "C:/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 3622 "y_tab.c"
  if (!yytrial)
#line 766 "C:/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 3635 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 777 "C:/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 3641 "y_tab.c"
break;
case 172:
#line 778 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3646 "y_tab.c"
  if (!yytrial)
#line 778 "C:/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3650 "y_tab.c"
break;
case 173:
#line 779 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3655 "y_tab.c"
  if (!yytrial)
#line 779 "C:/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3659 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 782 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 3665 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 783 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 3671 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 784 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3677 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 785 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 3683 "y_tab.c"
break;
case 178:
#line 788 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3688 "y_tab.c"
  if (!yytrial)
#line 788 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 3692 "y_tab.c"
break;
case 179:
#line 789 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3697 "y_tab.c"
  if (!yytrial)
#line 789 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 3701 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 792 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 3707 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 793 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 3713 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 794 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 3719 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 795 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 3725 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 798 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3731 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 799 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3737 "y_tab.c"
break;
case 186:
#line 802 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3742 "y_tab.c"
  if (!yytrial)
#line 802 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 3746 "y_tab.c"
break;
case 187:
#line 803 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3751 "y_tab.c"
  if (!yytrial)
#line 803 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3755 "y_tab.c"
break;
case 188:
#line 804 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3760 "y_tab.c"
  if (!yytrial)
#line 804 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 3764 "y_tab.c"
break;
case 189:
#line 807 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3769 "y_tab.c"
  if (!yytrial)
#line 807 "C:/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 3773 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 810 "C:/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 3779 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 811 "C:/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 3785 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 814 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3791 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 815 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3797 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 816 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3803 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 817 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3809 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 818 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 3815 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 819 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 3821 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 820 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 3827 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 821 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 3833 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 822 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 3839 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 823 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 3845 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 824 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 3851 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 825 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 3857 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 826 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 3863 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 827 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 3869 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 828 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 3875 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 829 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 3881 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 830 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 3887 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 831 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 3893 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 832 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 3899 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 833 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 3905 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 834 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 3911 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 835 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 3917 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 836 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 3923 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 837 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 3929 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 838 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 3935 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 839 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 3941 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 840 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 3947 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 841 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 3953 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 842 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 3959 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 843 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 3965 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 844 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 3971 "y_tab.c"
break;
case 223:
#line 847 "C:/github/cppparser/parser.y"
{ZZVALID;}
#line 3976 "y_tab.c"
  if (!yytrial)
#line 847 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 3980 "y_tab.c"
break;
#line 3982 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
