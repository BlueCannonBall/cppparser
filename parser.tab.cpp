#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   24,   24,   24,   24,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   32,   32,   33,   33,   34,   34,   35,
   35,   31,   31,   65,   65,   60,   60,   60,   60,   60,
   60,   61,   62,   62,   63,   63,   63,   63,   63,   63,
   64,   28,   28,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    4,    4,    9,    9,    9,    9,    9,   10,
   10,   10,   10,    7,    7,    7,    7,    8,    8,    8,
   23,   23,   22,   21,    3,    3,    3,    3,    3,    3,
   14,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   12,   12,   12,   53,   53,   39,   40,    6,   36,   36,
   37,   38,   38,   20,   20,   20,   16,   16,   16,   16,
   17,   17,   55,   55,   55,   55,   55,   55,   55,   54,
   54,   54,   54,   52,   52,   52,   42,   43,   66,   43,
   67,   43,   41,   68,   41,   47,   47,   47,   45,   46,
   69,   46,   70,   46,   44,   44,   44,   18,   18,   19,
   15,   15,   15,   49,   49,   50,   50,   51,   51,   51,
   26,   26,   71,   25,   56,   56,   56,   57,   57,   57,
   57,   11,   11,   48,   48,   48,   48,    1,    1,   58,
   58,   58,   27,   59,   59,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   30,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    7,    6,    8,    9,
   11,    0,    1,    1,    2,    4,    3,    4,    4,    4,
    4,    3,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    1,    1,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    4,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    2,    9,    8,    0,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    0,
    2,    2,    3,    0,    1,    1,    2,    5,    0,   11,
    0,   13,    4,    0,    6,    0,    5,    6,    2,    4,
    0,   10,    0,   12,    4,    5,    7,    8,    8,    2,
    2,    2,    3,    0,    1,    1,    2,    0,    1,    2,
    2,    1,    0,    8,    0,    3,    4,    0,    1,    1,
    1,    3,    4,    1,    1,    1,    1,    0,    1,    2,
    2,    2,    4,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    4,    4,
    4,    4,    4,    4,    4,    3,    3,    4,    4,    7,
    7,    7,    7,    3,    2,    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  206,  207,  208,    0,    0,    0,    0,    0,    0,
  197,   62,   63,    0,    0,    0,   71,    0,    0,    0,
    0,  145,  114,    0,    0,    0,    0,  146,    0,    0,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
   27,    8,    9,   12,    0,    0,    0,    6,    0,    7,
    0,    0,   10,    0,    0,   11,   26,   13,    0,   14,
   15,   16,   17,   18,    0,   19,    0,   20,   21,    0,
   22,   23,    0,   24,   25,    0,    0,    0,    0,   28,
   29,   30,   31,   32,    0,   64,    0,    0,    0,    0,
  115,    0,    0,    0,    0,  199,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  138,  139,    0,    0,    0,
    0,    0,    0,    0,   58,    0,   60,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,  133,    0,    0,   72,    0,  176,    0,    0,
    0,    0,  171,    0,  172,  170,    0,   92,    0,   91,
    0,    0,    0,    4,    5,  181,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  250,  121,
    0,  116,  147,    0,    0,    0,  159,    0,    0,    0,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
  127,  125,    0,  130,    0,  173,    0,  118,    0,    0,
    0,    0,   80,    0,    0,    0,    0,    0,    0,   61,
    0,   52,   53,   54,   55,   56,   57,   59,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  244,
  210,    0,    0,    0,    0,    0,    0,    0,  131,    0,
  132,    0,    0,  177,    0,    0,  103,    0,    0,    0,
   93,  200,  201,  202,    0,    0,    0,    0,    0,    0,
    0,    0,  217,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  192,    0,    0,    0,    0,    0,    0,  161,
  153,    0,    0,    0,    0,   80,   90,    0,    0,  203,
    0,    0,    0,    0,    0,   46,   49,   50,   48,   51,
    0,    0,    0,    0,    0,    0,    0,    0,  165,    0,
    0,    0,    0,  100,    0,  107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  238,  235,  117,    0,    0,
    0,  160,    0,    0,  193,    0,    0,  102,    0,    0,
    0,    0,    0,  126,    0,    0,   80,   88,    0,    0,
    0,    0,    0,    0,   81,   77,   78,    0,    0,    0,
    0,    0,    0,    0,   34,    0,    0,   36,    0,    0,
    0,    0,    0,  151,    0,  106,    0,    0,    0,  148,
    0,  189,  190,  191,    0,  183,    0,    0,  105,    0,
    0,  166,    0,    0,    0,  180,   94,    0,    0,   80,
   89,    0,   84,   82,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   38,   74,    0,    0,    0,    0,  163,
    0,    0,  157,    0,    0,    0,    0,    0,  111,  104,
  155,    0,    0,    0,    0,   87,    0,    0,  240,  241,
  242,  243,  167,   35,    0,   37,    0,    0,  140,    0,
    0,    0,    0,    0,  158,    0,    0,    0,    0,    0,
    0,    0,   85,    0,    0,   39,    0,    0,    0,    0,
    0,  168,  169,  184,  113,    0,  140,    0,    0,   86,
    0,   40,    0,  141,  142,    0,    0,    0,    0,  112,
    0,    0,  162,    0,  120,  143,    0,    0,    0,  150,
   41,  119,    0,    0,    0,  164,  152,
};
static int yydgoto[] = {                                      46,
   47,  144,   49,  114,   50,   51,   52,   53,  395,  329,
   54,   55,   56,   57,   58,  222,  270,   59,   60,  223,
   61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
  251,   71,   72,   73,   74,   75,   76,   77,   78,   79,
   80,   81,   82,   83,   84,   85,  205,   86,  323,  324,
  386,   87,   88,  508,   89,  374,  425,  185,  157,   90,
   91,   92,   93,   94,   95,  319,  459,  316,  383,  492,
  466,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,  334,    0,    0,    0,
    0,    0,    0,  432,    0, -104,    0,   36,  138,  169,
  189,    0,    0,    0,    0, -255, -229,    0, 1118,  241,
  245,  276, 3507, 4166, 3891,  860,    0,   28, 4317, 4166,
 4166, 2692, 4166, 4358, 4166,    0,  460, -248,  -12,    0,
    0,    0,    0,    0,  432,    7,  273,    0,  115,    0,
  129,  300,    0, 3475,  301,    0,    0,    0, 3053,    0,
    0,    0,    0,    0,  326,    0,   89,    0,    0,  121,
    0,    0,  141,    0,    0,    0,  690,    0,  271,    0,
    0,    0,    0,    0,    0,    0,  432,  432,  432,   34,
    0,    0,  352,  358,  319,    0,  460,  362,  690,    0,
    0,  374,  181,  320,    0,    0,    0,    0,    0,    0,
  319,  319,  319,  319,  187,    0,    0,  186,  208,  213,
 -223,  207,  234,  244,    0,  240,    0, 4166, 4166, 4166,
    0,  200, 4166,  153,    0,  423,    0,    0, 4166, 4317,
  103,  103,  103,  485, 3328, 5917,   50,    0,  103,  103,
    0,  497,    0,  319,  516,    0,    0,    0,  270,   65,
  325, 4166,    0,    0,    0,    0,    0,    0,  302,    0,
  502,  507,  521,    0,    0,    0,  716, 3789, 3958, 4374,
 3964, 4166, 4166, 4166, 4166, 4166, 3999, 4166,    0,    0,
    0,    0,    0,  338,   81,    0,    0,    0,  709,  -11,
    0,  432,    0,  364,  319,    0,    0,  372,  432,  547,
    0,    0,  378,    0,  432,    0,  497,    0,  591,    0,
  432,  254,    0, 2292,  588,  624,  643,  647,  684,    0,
  462,    0,    0,    0,    0,    0,    0,    0, 4795, 5917,
  682, 4850, 2393, 3053,  704, 4166,  681,  103, 4166,    0,
    0, 4166,  711,  518,  432,  739,    0,    0,    0,  720,
    0,  432,  153,    0,  153, 4063,    0, 5917,  591,  591,
    0,    0,    0,    0, 4166, 4166,    0, 4166, 4166,    0,
 4166, 3515,    0,  681, 4166,  387,  681,  560,  560,  395,
  395,  103,    0,  420, 5513, 2484,  755,    0,  545, 2583,
  758,   -9,    0,  591,  351,  779,  786,    0,  789,    0,
    0,    0,  796,  798,  -53,    0,    0,  432,  -19,    0,
  804,  816,  841,  851,  853,    0,    0,    0,    0,    0,
 3584, 4166, 3616,  590, 4166,    0,    0, 5917,    0,  857,
  -32,  518, -108,    0,  153,    0, 5684,  796,  796,  560,
 3515,  560, 3515, 3515,  103,    0,    0,    0, 4166, 2650,
  872,    0,  596,   85,    0,  796, 4255,    0,    0,  859,
  432,    0,  875,    0,  889,  679,    0,    0,   84,  -28,
  878,  607,  881,    0,    0,    0,    0,    0, 4166, 4166,
 4166, 4166,  884,    0,    0,  905,    0,    0,  925, 4917,
  715,    0,  943,    0,  737,    0,  319,  319, 5738,    0,
 4166,    0,    0,    0,  432,    0,  596,  -71,    0, 5749,
  454,    0,  -27,  599,  972,    0,    0,  242,  942,    0,
    0, 4166,    0,    0, 5774, 5785, 5810, 5842,  769, 2759,
 4166, 2858, 4166,    0,    0,  983,  611,  715,  990,    0,
  432,  432,    0, 5870,  153,    0,  432, 4261,    0,    0,
    0,    0,  977,  913,  984,    0,  344, 5917,    0,    0,
    0,    0,    0,    0, 1003,    0, 5880, 1014,    0, 1015,
    0, 1020,  -90,  -90,    0, 2925,  153,  319, 5907,  619,
  123,    0,    0,  996, 3683,    0,    0,  -44, 1021,  620,
 1026,    0,    0,    0,    0,  319,    0,    0, 3034,    0,
    0,    0,  632,    0,    0,  802,    0,  977,  958,    0,
  -44, 3133,    0, 3200,    0,    0,  658,  149,    0,    0,
    0,    0,    0, 3309, 3408,    0,    0,
};
static int yyrindex[] = {                                      4,
 5447,    0,    0,    0,  901, 4753,  975,    0,    0,    0,
    0,    0,    0,    0, 3239,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5325, 1883, 2555,    0,    0,    0,
    0,    0,    0,    0,    0,   -2,    0,    0,    0,    0,
    0,  738,    0,    0,    0,    0, 1051, 2587,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1099,  592,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  161,
    0,    0,    0,    0,    0,    0,    0,  976, 2448,    0,
    0,    0,    0,    0,  892,    0,    0,    0,    0,    0,
    0,   -1, 1294,    0, 1051,    0, 1051,    0,    0, 4823,
 4632,  981,    0,    0, 1854, 2271, 4516, 4658,  764, -111,
 1051, 1051, 1051, 1051,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1044,    0,
 -111,    0,    0, 4989,  106,    0,  396,  431,    0,    0,
   31, 4021, 5016,    0,    0,   71,    0, 2598, 5043, 5083,
    0,   86,    0, 1051,    0,    0,  901,    0,    0,    0,
  613,    0,    0,  130,    0,    0,  130,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -111,    0,    0,    0,    0, -111,    0, 1319,    0,    0,
  876,    0, 1040,    0, 1051,    0,  440,    0,  666,  672,
    0,    0,    0,    0,    0,    0,    0,    0,  -38, 4699,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  803,    0,    0,    0,    0,    0,    0,    0,    0,  128,
    0,    0,    0,   72,    0,    0, 5346,    0,    0,    0,
    0,    0,    0, 1063,    0,    0, 1826, 4725,    0,    0,
    0,    0,  634,    0,  730,    0,    0,  350,  331,  331,
    0,    0,    0,    0,    0,    0, 2790,    0,    0, 2956,
    0, 3065,    0, 5375,    0, 5233, 5403,  722, 5210, 5143,
 5172, 5105,    0,    0,    0,    0,    0, -111,    0,    0,
   -6,    0,    0, 2134,  613,    0,    0,   86,    0,    0,
    0,   40,  849, 5419,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1044,    0,    0,    0, 3231, 3340,  100,    0,    0,
    0, 1063,    0,    0,  753,    0,    0,  697,  697, 5273,
 3545, 5300, 4071, 5112, 5116,    0,    0,    0,    0,    0,
    0,    0, 1057,    0,    0, 5471,    0,    0,   -1,    0,
    0,   -1,    0,    0, 5477,    0,    0,    0,    0,    0,
  523,    0,    0,   76,    0,    0,    0,  190,    0,    0,
    0,    0,    0, -111,    0,    0, -111,    0,    0,    0,
 1069,   -1,    0,    0,    0,    0, 1331, 1331,    0,    0,
    0,    0,    0,    0,    0,    0, 1057, 2367,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1070,    0,    0,    0,    0,    0,    0, 1069,    0,    0,
    0,    0,    0,    0,  180, -111,    0,    0,    0,    0,
    0,   -1,  161,    0,    0,    0,    0,  788,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   -1,    0,  260,  260,    0,    0,  203, 2367,    0,    0,
    0, -111,    0,    0,    0,    0,   -1,  217,    0,    0,
    0,    0,    0,    0,    0, 2367,    0, -111,    0,    0,
 -111,    0,    0,    0,    0,    0,   -1,  161,    0,    0,
  224,    0,    0,    0,    0,    0,    0,    0, -111,    0,
    0,    0, -111,    0,    0,    0,    0,
};
static int yycindex[] = {                                    969,
  766,    0,    0,    0, 6401, 1420,    0, 1422, 1603, 1619,
    0,    0,    0,    0, 1700,    0,    0,    0,    0,    0,
    0,    0,    0, 4198,  991,    0,    0,    0,    0,    0,
    0,    0, 5362,    0,    0,   41,    0,    0,    0,    0,
    0, 1702,    0,    0,    0,    0,    0,  -14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5882,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1871,    0, 6425,  867,    0,
    0,    0,    0,    0,  815,    0,    0,    0,    0,    0,
    0, 3872,  168,    0,    0,    0,    0,    0,    0, 1899,
  174,    0,    0,    0,  178,  214,  259,  278,  528, 1083,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1172,    0,    0,    0, 5945,    0, 5972, 5982,    0,    0,
  124,  235,  579,    0,    0,    0,    0, 1089,  617,  695,
    0,  873,    0,    0,    0,    0, 6436,    0,    0,    0,
    0,    0,    0,  324,    0,    0,  330,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1249,    0,    0,    0,    0, 1363,    0,  284,    0,    0,
  335,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
    0,    0,    0, 5920,    0,    0,    0,    0,    0,    0,
  664,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 5952,    0,    0,    0,  700,   92,    0,    0,
    0,    0,    0,    0,    0,    0,  863,  309,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6010,    0,    0, 6037,
    0,  708,    0,  724,    0,  879,  760,  871,  888,  891,
  898,  946,    0,    0,    0, 5964,    0, 1452,    0, 5996,
    0,    0,    0,    0,    0,    0,    0,  880,    0,    0,
    0, 4223,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6008,    0, 6040,    0,    0, 6047, 6075,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  959,
  960,  979,  980,  987,  988,    0,    0,    0,    0, 6052,
    0,    0,    0,    0,    0,    0,    0,    0, 5399,    0,
    0, 6272,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,  823,    0,    0,
    0,    0,    0, 1529,    0,    0, 1643,    0,    0,    0,
    0, 6304,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 6084,
    0, 6096,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1732,    0,    0,    0,    0,
    0, 6315,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 6347,    0,    0,    0,    0, 6128,    0,    0,    0,    0,
    0, 1809,    0,    0, 6140,    0, 6358,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1923, 6172,    0,
 2012,    0,    0,    0,    0,    0, 6390,    0,    0,    0,
    0, 6184,    0, 6216,    0,    0,    0,    0, 2089,    0,
    0,    0, 2203, 6228, 6260,    0,    0,
};
static int yygindex[] = {                                      0,
   16,    1,  -24, -406,   29,    0,    0,    0,  745, -279,
    0,  135,   11,  -61,    0,  824,    0,    0,    0,  215,
    0,    0,    0,  -87,    0,    0,    0, -262,  542,    0,
 -320,    0,    0,    0,    0,   24,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -446,    0, -122, 1096,
   -3,   59,    2,  667,  -10,    0,  754,    0,  997,    0,
    0,    0, -249,    0, -183,    0,    0,    0,    0,    0,
    0,
};
#define YYTABLESIZE 6729
static int yytable[] = {                                     174,
   48,  103,  105,    2,  456,  388,  111,  412,  115,  116,
  117,  104,  472,    2,  118,  119,  526,  415,  120,  468,
  107,  406,  165,  383,  394,  169,  501,  383,  108,  168,
  441,  166,  234,   48,  243,  126,  164,  185,  249,  124,
  221,  249,  124,  249,  249,  381,  389,  313,  163,  375,
  174,  490,   64,  253,  244,  171,  249,  249,  249,  249,
  127,  142,  211,  109,   48,  173,  396,  172,  211,  387,
  149,  211,  211,  211,  211,  211,  211,  211,  360,  397,
  363,  538,  357,  351,  229,  354,  210,  103,  249,  211,
  249,  211,  184,  262,  440,  121,  164,  115,  116,  117,
  118,  209,  103,  105,  215,  393,  274,  438,  163,  103,
  230,  204,  220,  306,  204,  204,  185,  107,  310,   83,
   48,  249,  249,  211,  309,  224,  396,  394,  427,  659,
  485,  396,  659,  659,  659,  659,  659,  659,  659,  397,
  205,   48,  197,  205,  397,  398,  245,  202,  414,  245,
  659,  663,  659,  667,  211,  211,  358,  359,  177,  218,
  477,    2,    2,    2,  245,  268,  309,  144,   43,  273,
  275,  144,  179,  176,  261,  396,  154,  265,  204,  203,
  225,  162,  107,  591,  659,  594,   43,  178,  397,  166,
  271,  376,  309,  198,   22,  204,  204,  122,  245,  207,
   83,   48,   28,  308,  156,  398,   48,  426,  439,  312,
  398,  201,  315,   22,  396,  659,  659,  225,  174,  171,
  370,   28,  212,  186,  205,  268,  166,  397,  123,  277,
  245,  325,  279,   79,   48,  280,  219,  391,  225,  212,
  524,  227,  225,  225,  525,  518,  187,  166,  124,   12,
   13,  166,  166,   48,  398,  235,  236,  237,  238,  225,
  221,  225,  184,  206,   64,  351,  249,  249,  166,  314,
  166,  543,  355,   64,  392,  123,    2,    2,    2,  350,
  138,  184,  122,  156,  139,  394,  198,  211,  198,  198,
  217,  249,   37,  398,  597,    6,  600,  348,  266,  211,
  211,  269,  186,  144,   14,  110,   48,  272,   48,  249,
   48,  328,  327,   17,   79,  140,  450,  221,  144,  452,
  221,   96,  103,  105,  211,  187,    6,  198,  390,  198,
  198,  175,  220,  381,  184,   14,  110,  107,  184,  123,
  391,   48,  211,   48,   17,  224,  122,  198,  659,  318,
  221,  911,   12,   13,  417,  418,  198,  198,  180,  186,
  659,  659,  245,  914,  917,  198,  475,  413,  174,  405,
   48,  408,  428,  378,  245,  245,  326,  392,  496,  103,
  105,  433,  103,  105,  200,  659,  144,  394,  920,  220,
  101,  144,  220,  101,  107,   37,  214,  107,  184,  245,
  144,  144,  224,  659,   48,  224,  923,   48,  101,  144,
  221,  167,  103,  105,  519,  276,  226,  245,  321,   45,
  228,  322,  220,  225,   41,  465,   42,  107,   40,  221,
  532,  231,  166,  534,  197,  224,  246,  232,  436,  246,
  196,  377,  233,  239,  442,  221,   79,  439,  448,  240,
   48,  544,   48,  445,  246,  545,  219,  451,   79,   79,
  366,  493,  494,  262,  241,  221,   48,  497,  504,  242,
  245,  248,  103,  105,  248,  461,  462,   64,  184,  149,
  184,   64,  220,   79,  454,  198,  469,  107,  246,  248,
  246,  103,  105,  457,  471,  224,   48,  322,  391,   64,
  247,  220,   48,  248,  255,   48,  107,  103,  105,   43,
   12,   13,  143,  219,  224,  256,  219,  220,   48,   48,
  246,   48,  107,  248,  184,  259,   96,  103,  105,  460,
  224,    6,   48,  522,   48,  392,  264,  220,  463,   48,
   14,  110,  107,   48,   48,   48,  219,  184,  466,   17,
  224,  512,  513,   37,  632,  248,  515,  469,  281,  282,
  184,  636,  184,  632,  283,  471,   75,  471,  471,  471,
  639,  471,  184,  184,  530,  145,  147,  148,  284,  674,
  151,  152,  153,  155,  156,  159,  160,  174,  677,  471,
  112,  182,  174,  431,  307,  225,  434,  194,  113,  197,
  391,  174,  174,   22,  166,  196,  219,  172,  627,   22,
  174,   28,   12,   13,  627,  174,  630,   28,  471,  627,
  317,  225,  630,  174,  182,  219,  457,  630,  320,  182,
  166,  182,  168,  182,  182,   22,  182,  392,  603,  473,
  606,  219,  322,   28,    2,    3,    4,   75,    6,  331,
  198,  489,  246,  144,  322,   37,  144,   14,  110,  517,
  528,  219,  322,  322,  246,  246,   17,   18,   19,   20,
   21,  144,  535,  144,  109,  322,  612,  109,  615,  249,
  250,  252,  254,  195,  159,  332,  500,  248,   96,  246,
  257,  258,  109,    6,  109,   34,   35,   36,  542,  248,
  248,  322,   14,  110,  333,  510,  129,  246,  334,  129,
   64,   17,  128,  278,  182,  128,  182,  182,  194,   64,
  197,  523,  192,  335,  248,  340,  196,  193,  287,  290,
  292,  294,  297,  298,  299,  300,  301,  302,  156,  305,
  342,  537,  248,  345,   22,   23,   24,  161,   45,   26,
   27,  349,   28,   41,  618,   42,  621,   40,   38,  654,
   39,  657,  222,  222,  222,  222,  222,  752,  222,  755,
  108,  198,  267,  108,  106,  285,  286,    6,  352,   75,
  222,  354,  222,  758,  471,  761,   14,  110,  108,  471,
  108,   75,   75,  110,  369,   17,  110,  346,  475,  471,
  347,  371,   47,  348,  195,  204,   70,  479,   70,   70,
   70,  110,  471,  110,  222,  373,   75,  357,  379,  767,
  471,  770,   70,   70,   70,  380,  360,  361,  382,  362,
  363,   76,  364,  385,   75,   47,  365,  151,   43,  274,
   47,  143,   47,  399,   47,   47,  222,   47,  182,  182,
  182,  182,  182,  182,  182,  400,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  422,  423,
  424,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  401,  182,  182,  250,  182,  182,  410,   70,   70,  182,
  402,   33,   45,  403,  409,  182,  182,  182,  411,  432,
  182,  182,  182,  182,  132,  133,  134,  135,  136,  137,
  419,  421,   76,  144,  435,  144,  144,  144,  430,  144,
  642,  645,  648,  651,   33,   47,  436,   47,   47,   33,
  773,   33,  776,   33,   33,  437,   33,  144,  442,  443,
  445,  446,  447,  448,  449,  254,   96,  779,  254,  782,
  785,    6,  788,  178,   97,   98,   99,  791,  178,  794,
   14,   15,  464,  451,  453,  311,  144,  178,  178,   17,
    6,  455,   96,    2,    3,    4,  178,    6,  222,   14,
  110,  178,   43,  478,  458,  143,   14,  110,   17,  178,
  222,  222,  250,  460,  487,   17,   18,   19,   20,   21,
  476,  155,  144,  144,  144,  797,  143,  800,  146,  499,
  140,  134,  474,  137,   33,  222,   33,   33,  875,  881,
  878,  884,  158,  488,   34,   35,   36,  162,  483,  491,
  166,  170,  174,  222,  204,  502,  178,  183,  887,  893,
  890,  896,  503,  505,   76,  187,  899,  905,  902,  908,
  192,  195,  198,  507,  520,  509,   76,   76,  201,  511,
  527,  536,  254,   47,   47,   47,  529,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,  154,
  539,   76,   47,   47,   47,   47,   47,   47,   47,   47,
   47,  149,   47,   47,  152,   47,   47,   73,    1,   76,
   47,  133,   42,   74,  198,  178,   47,   47,   47,   73,
   42,   47,   47,   47,   47,  155,  298,    2,    3,    4,
  143,    6,  146,  411,  140,  134,  414,  137,  609,  624,
   14,  110,  144,  671,  926,  764,  624,  144,  444,   17,
   18,   19,   20,   21,  170,  384,  144,  144,   33,   33,
   33,   33,   33,   33,   33,  144,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   34,   35,
   36,   33,   33,   33,   33,   33,   33,   33,   33,   33,
  467,   33,   33,  531,   33,   33,  198,  198,  198,   33,
  198,  198,    0,  304,    0,   33,   33,   33,    0,    0,
   33,   33,   33,    0,  155,  149,    0,    0,  152,  143,
    0,  146,    0,  140,  134,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   83,   87,   91,    0,   95,   99,
    0,  103,  107,    0,    0,    0,  110,    0,    0,    0,
    0,    0,  113,  116,  119,    0,    0,  122,  125,  128,
  131,  155,    0,    0,    0,    0,  143,    0,  146,    0,
  140,  134,    0,  137,  149,    0,  199,  152,    0,    0,
    0,  199,    0,    0,  199,  199,  199,  144,    0,    0,
  199,  199,  144,  188,    0,  144,  144,  144,  188,  199,
    0,  144,  144,    0,  199,    0,    0,  188,  188,    0,
  144,   95,  199,   95,   95,   95,  188,   95,    0,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,   95,   64,    0,   59,    0,
   64,    0,   62,   67,   70,   73,   76,   79,   83,   87,
   91,  149,   95,   99,  152,  103,  107,   64,   64,    0,
  110,    0,    0,    0,   95,    0,  113,  116,  119,    0,
    0,  122,  125,  128,  131,  155,  128,    0,    0,    0,
  143,    0,  146,    0,  140,  134,    0,  137,    0,    0,
    0,    0,  129,  130,  131,  132,  133,  134,  135,  136,
  137,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   70,   73,   76,   79,   83,   87,   91,
    0,   95,   99,    0,  103,  107,    0,    0,    0,  110,
    0,    0,    0,    0,    0,  113,  116,  119,    0,    0,
  122,  125,  128,  131,  155,  149,    0,    0,  152,  143,
    0,  146,    0,  140,  134,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   83,   87,   91,    0,   95,   99,
    0,  103,  107,    0,    0,    0,  110,    0,    0,    0,
   95,    0,  113,  116,  119,   95,    0,  122,  125,  128,
  131,  155,    0,    0,    0,   95,  143,    0,  146,    0,
  140,  134,    0,  137,  149,  199,    0,  152,   95,    0,
  199,    0,    0,  199,  199,  199,   95,  144,    0,    0,
  199,    0,  144,    0,    0,    0,    0,    0,    0,    0,
    0,  144,  144,  199,  199,  199,  199,    0,  199,  199,
  144,  199,    0,    0,    0,    0,    0,    0,    0,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,    0,    0,    0,   59,    0,
    0,    0,   62,   67,   70,   73,   76,   79,   83,   87,
   91,  149,   95,   99,  152,  103,  107,    0,    0,    0,
  110,    0,    0,    0,    0,    0,  113,  116,  119,    0,
    0,  122,  125,  128,  131,  155,  220,    0,  235,    0,
  143,  223,  146,  238,  140,  134,    0,  137,    0,    0,
  226,  229,  241,  244,    0,    0,    0,    0,    0,  232,
    0,  247,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   70,   73,   76,   79,   83,   87,   91,
    0,   95,   99,    0,  103,  107,    0,    0,    0,  110,
    0,    0,    0,    0,    0,  113,  116,  119,    0,    0,
  122,  125,  128,  131,  155,  149,    0,    0,  152,  143,
    0,  146,    0,  140,  134,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   83,   87,   91,    0,   95,   99,
    0,  103,  107,    0,    0,    0,  110,    0,    0,    0,
    0,    0,  113,  116,  119,    0,    0,  122,  125,  128,
  131,  155,    0,    0,    0,    0,  143,    0,  146,    0,
  140,  134,    0,  137,  149,    0,    0,  152,    0,  250,
    0,    0,    0,   64,  253,   64,    0,   64,   64,   64,
   64,   64,   64,  256,  259,  265,    0,    0,    0,    0,
  268,    0,  262,    0,   64,   64,   64,   64,    0,  271,
  274,   97,    0,   97,   97,   97,    0,   97,  277,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,   97,   64,    0,   59,    0,
    0,    0,   62,   67,   70,   73,   76,   79,   83,   87,
   91,  149,   95,   99,  152,  103,  107,    0,    0,    0,
  110,    0,    0,    0,   97,    0,  113,  116,  119,   64,
   64,  122,  125,  128,  131,  155,  280,    0,  366,    0,
  143,  283,  146,  369,  140,  134,    0,  137,    0,    0,
  286,  289,  372,  375,    0,    0,    0,    0,    0,  292,
    0,  378,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,  134,    0,
    0,   62,   67,   70,   73,   76,   79,   83,   87,   91,
    0,   95,   99,    0,  103,  107,    0,    0,    0,  110,
    0,    0,    0,    0,    0,  113,  116,  119,    0,    0,
  122,  125,  128,  131,  155,  149,    0,    0,  152,  143,
    0,  146,    0,  140,  134,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,    0,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   83,   87,   91,    0,   95,   99,
    0,  103,  107,    0,    0,   64,  110,    0,    0,    0,
   97,    0,  113,  116,  119,   97,    0,  122,  125,  128,
  131,  155,    0,    0,    0,   97,  143,  387,  146,    0,
  140,  134,  390,  137,  149,    0,    0,  152,   97,  134,
    0,  393,  396,    0,  134,    0,   97,  134,  134,  134,
  399,    0,    0,  134,  134,  280,    0,    0,    0,    0,
  283,    0,  134,    0,    0,    0,    0,  134,    0,  286,
  289,  174,    0,  174,  174,  134,    0,  174,  292,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,  174,    0,    0,   59,    0,
    0,    0,   62,   67,   70,   73,   76,   79,   83,   87,
   91,  149,   95,   99,  152,  103,  107,    0,    0,    0,
  110,    0,    0,    0,  174,    0,  113,  116,  119,    0,
    0,  122,  125,  128,  131,  155,    0,    0,    0,    0,
  143,    0,  146,    0,  140,  134,    0,  137,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,   22,    0,   25,   30,   35,   40,
   43,   46,   49,   54,    0,    0,    0,   59,    0,    0,
    0,   62,   67,   70,   73,   76,   79,   83,   87,   91,
    0,   95,   99,    0,  103,  107,    0,    0,   98,  110,
   98,   98,   98,    0,   98,  113,  116,  119,    0,    0,
  122,  125,  128,  131,   45,  149,    0,    0,  152,   41,
    0,   42,   98,   40,   38,    0,   39,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   22,    0,   25,   30,   35,   40,   43,   46,   49,
   54,   98,    0,    0,   59,    0,    0,    0,   62,   67,
   70,   73,   76,   79,   83,   87,   91,    0,   95,   99,
    0,  103,  107,    0,    0,    0,  110,    0,    0,    0,
  174,    0,  113,  116,  119,  174,    0,  122,  125,  128,
  131,    0,    0,    0,  174,  174,  144,  144,    0,    0,
  144,    0,    0,  174,   43,    0,  330,   44,  174,    0,
    0,    0,    0,    0,    0,   45,  174,    0,  144,    0,
   41,    0,   42,    0,   40,   38,    0,   39,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    5,    8,   11,   14,   17,   22,    0,   25,   30,   35,
   40,   43,   46,   49,   54,    0,    0,    0,   59,    0,
    0,    0,   62,   67,   70,   73,   76,   79,   83,   87,
   91,    0,   95,   99,    0,  103,  107,    0,    0,    0,
  110,    0,    0,    0,    0,    0,  113,  116,  119,    0,
    0,  122,  125,  128,  131,   43,   45,  344,   44,    0,
    0,   41,    0,   42,    0,   40,   38,   98,   39,    0,
    0,    0,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,   98,    0,    0,    0,   11,
   12,   13,    0,   98,  181,  182,  183,   16,    0,    0,
    0,    0,   18,   19,   20,   21,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   29,    0,    0,    0,   30,
    0,    0,    0,    0,    0,   31,   32,   33,    0,    0,
   34,   35,   36,   37,    0,    0,   43,    0,  368,   44,
    0,    0,    0,    0,    0,   45,    0,    0,    0,    0,
   41,    0,   42,  144,   40,   38,  209,   39,  144,  209,
  209,  209,  209,  209,    0,   64,    0,  144,  144,   64,
   64,   64,   64,   64,   64,  209,  144,  209,  209,    0,
    2,    3,    4,    5,    0,    7,   64,   64,   64,   64,
   11,   12,   13,    0,    0,  181,  182,  183,   16,    0,
    0,    0,    0,   18,   19,   20,   21,  209,    0,    0,
  137,    0,   45,    0,    0,    0,   29,   41,   64,   42,
   30,   40,   38,    0,   39,    0,   31,   32,   33,    0,
    0,   34,   35,   36,   37,   43,    0,  372,   44,  198,
  209,  209,  198,  198,  198,    0,    0,    0,  198,  198,
    0,   64,   64,    0,   45,    0,    0,  198,    0,   41,
    0,   42,  198,   40,   38,    0,   39,    0,    0,    0,
  198,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,   13,    0,    0,  181,  182,  183,   16,
    0,    0,    0,    0,   18,   19,   20,   21,    0,    0,
    0,    0,   43,    0,  420,   44,    0,   29,    0,    0,
    0,   30,    0,    0,    0,    0,    0,   31,   32,   33,
    0,   45,   34,   35,   36,   37,   41,    0,   42,    0,
   40,   38,    0,   39,    0,    0,    0,    0,    0,    0,
    0,  137,    0,    0,   43,    0,  137,  143,    0,  137,
  137,  137,    0,    0,    0,  137,  137,    0,    0,    0,
  227,    0,    0,  227,  137,    0,    0,    0,    0,  137,
    2,    3,    4,    5,    0,    7,    0,  137,  227,    0,
   11,   12,   13,    0,    0,  181,  182,  183,   16,    0,
    0,    0,    0,   18,   19,   20,   21,    0,   64,    0,
    0,    0,    0,    0,    0,    0,   29,   64,    0,    0,
   30,   43,  227,  484,   44,    0,   31,   32,   33,    0,
   45,   34,   35,   36,   37,   41,    0,   42,    0,   40,
   38,    0,   39,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,  227,    0,    0,   11,   12,   13,
    0,    0,  181,  182,  183,   16,    0,    0,    0,    0,
   18,   19,   20,   21,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   29,    0,    0,    0,   30,    0,    2,
    3,    4,    0,   31,   32,   33,    0,   45,   34,   35,
   36,   37,   41,    0,   42,    0,   40,   38,    0,   39,
    0,    0,   18,   19,   20,   21,   22,    0,    0,    0,
   43,    0,  486,   44,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  228,    0,    0,  228,
   34,   35,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  228,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,    0,   11,   12,   13,    0,
    0,  181,  182,  183,   16,    0,    0,    0,    0,   18,
   19,   20,   21,    0,    0,    0,  227,   43,  228,  514,
   44,    0,   29,    0,    0,    0,   30,    0,  227,  227,
    0,    0,   31,   32,   33,    0,   45,   34,   35,   36,
   37,   41,    0,   42,    0,   40,   38,    0,   39,    0,
  228,    0,    0,  227,    0,    0,    0,    0,    0,    0,
  194,    0,  197,    0,  192,  190,    0,  191,  196,  193,
    0,  227,    0,    0,    0,  226,    0,    0,  226,    0,
    0,  199,  187,  189,  188,    2,    3,    4,    5,    0,
    7,    0,    0,  226,    0,   11,   12,   13,    0,    0,
  181,  182,  183,   16,    0,    0,    0,    0,   18,   19,
   20,   21,    0,  198,    0,    0,    0,    0,    0,    0,
    0,   29,    0,    0,    0,   30,   43,  226,  533,   44,
    0,   31,   32,   33,    0,   45,   34,   35,   36,   37,
   41,    0,   42,    0,   40,   38,  195,   39,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,    0,  226,
    0,    0,   11,   12,   13,    0,    0,  181,  182,  183,
   16,    0,    0,    0,    0,   18,   19,   20,   21,    0,
    0,    0,  228,    0,    0,    0,    0,    0,   29,    0,
    0,    0,   30,    0,  228,  228,    0,    0,   31,   32,
   33,    0,   45,   34,   35,   36,   37,   41,    0,   42,
    0,   40,   38,    0,   39,    0,    0,    0,    0,  228,
    0,    0,    0,    0,    0,   43,    0,  540,   44,    0,
    0,    0,    0,    0,    0,    0,    0,  228,    0,    0,
    0,  247,    0,    0,  247,    0,   69,    0,   69,   69,
   69,   69,   69,   69,   69,   69,    0,    0,    0,  247,
    0,    2,    3,    4,    5,    0,    7,   69,   69,   69,
   69,   11,   12,   13,    0,    0,  181,  182,  183,   16,
    0,    0,    0,    0,   18,   19,   20,   21,    0,    0,
    0,  226,   43,  247,  541,   44,    0,   29,    0,   69,
    0,   30,    0,  226,  226,    0,    0,   31,   32,   33,
    0,   45,   34,   35,   36,   37,   41,    0,   42,    0,
   40,   38,    0,   39,    0,  247,    0,    0,  226,    0,
    0,    0,   69,   69,    0,  194,    0,  197,  260,  192,
  190,    0,  191,  196,  193,    0,  226,    0,    0,    0,
  239,    0,    0,  239,    0,    0,    0,  187,  189,  188,
    2,    3,    4,    5,    0,    7,    0,    0,  239,    0,
   11,   12,   13,    0,    0,  181,  182,  183,   16,    0,
    0,    0,    0,   18,   19,   20,   21,    0,  198,    0,
    0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
   30,   43,  239,  546,   44,    0,   31,   32,   33,    0,
   45,   34,   35,   36,   37,   41,    0,   42,    0,   40,
   38,  195,   39,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,  239,    0,    0,   11,   12,   13,
    0,    0,  181,  182,  183,   16,    0,    0,    0,    0,
   18,   19,   20,   21,    0,    0,    0,  247,    0,    0,
    0,    0,    0,   29,    0,    0,    0,   30,    0,  247,
  247,    0,    0,   31,   32,   33,    0,   45,   34,   35,
   36,   37,   41,    0,   42,    0,   40,   38,    0,   39,
    0,    0,    0,   69,  247,    0,    0,    0,    0,    0,
   43,   69,  547,   44,    0,    0,    0,    0,    0,   45,
    0,    0,  247,    0,   41,    0,   42,    0,   40,   38,
    0,   39,  194,    0,  197,    0,  192,  190,    0,  191,
  196,  193,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,    0,    0,    0,  189,   11,   12,   13,    0,
    0,  181,  182,  183,   16,  229,    0,    0,  229,   18,
   19,   20,   21,    0,    0,    0,  239,   43,    0,    0,
   44,    0,   29,  229,    0,  198,   30,    0,  239,  239,
    0,    0,   31,   32,   33,    0,   45,   34,   35,   36,
   37,   41,    0,   42,    0,   40,   38,    0,   39,  141,
    0,    0,   44,  239,    0,    0,    0,  229,  195,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
    0,  239,    0,   41,    0,   42,    0,   40,   38,    0,
   39,    0,    0,    0,    0,    2,    3,    4,    5,  229,
    7,    0,    0,    0,    0,   11,   12,   13,    0,    0,
  181,  182,  183,   16,    0,    0,    0,    0,   18,   19,
   20,   21,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   29,    0,    0,    0,   30,  404,    0,    0,   44,
    0,   31,   32,   33,    0,   45,   34,   35,   36,   37,
   41,    0,   42,    0,   40,   38,    0,   39,    0,    0,
    0,    0,    2,    3,    4,    5,    0,    7,  407,    0,
    0,   44,   11,   12,   13,    0,    0,  181,  182,  183,
   16,    0,    0,    0,    0,   18,   19,   20,   21,    0,
    0,    0,    0,    0,    2,    3,    4,    5,   29,    7,
    0,    0,   30,    0,   11,   12,   13,    0,   31,   32,
   33,    0,   16,   34,   35,   36,   37,   18,   19,   20,
   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   29,  229,    0,    0,   30,  521,    0,    0,   44,    0,
   31,   32,   33,  229,  229,   34,   35,   36,   37,    0,
    0,   45,    0,    0,    0,    0,   41,    0,   42,    0,
   40,   38,    0,   39,    0,    0,    0,    0,  229,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,  289,
  288,   11,   12,   13,    0,    0,  229,    0,    0,   16,
    0,    0,    0,    0,   18,   19,   20,   21,    0,    0,
    0,    0,    0,    2,    3,    4,    5,   29,    7,    0,
    0,   30,    0,   11,   12,   13,    0,   31,   32,   33,
    0,   16,   34,   35,   36,   37,   18,   19,   20,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
    0,   43,    0,   30,  143,    0,    0,    0,    0,   31,
   32,   33,    0,   45,   34,   35,   36,   37,   41,    0,
   42,    0,   40,   38,    0,   39,    0,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,   13,    0,    0,    0,    0,    0,   16,    0,
    0,    0,    0,   18,   19,   20,   21,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   29,    0,    0,    0,
   30,  146,    0,    0,    0,    0,   31,   32,   33,    0,
   45,   34,   35,   36,   37,   41,   45,   42,    0,   40,
   38,   41,   39,   42,    0,   40,   38,    0,  296,    0,
    0,    0,    0,   43,    0,    0,  143,    0,  291,    0,
    0,    0,    0,    0,    0,  295,    0,    0,    0,    0,
    0,   45,    0,    0,    0,    0,   41,    0,   42,  303,
   40,   38,    0,   39,    0,   96,    2,    3,    4,    0,
    6,    0,    0,    0,    0,    0,    0,    0,  214,   14,
  110,  214,  214,  214,  214,  214,  214,  214,   17,   18,
   19,   20,   21,    0,    0,    0,    0,    0,    0,  214,
   43,  214,    0,  143,    0,    0,   43,    0,    0,  143,
    0,    0,    0,    0,    0,   45,    0,   34,   35,   36,
   41,    0,   42,    0,   40,   38,    0,   39,    0,    0,
    0,  230,    0,  214,  230,    0,    0,    0,    0,    0,
    0,   43,    0,    0,  143,    0,    0,    0,  417,  230,
    0,    0,    0,  305,    0,    0,  421,  425,  429,    0,
    0,    0,  321,  325,  214,  214,    0,   96,    2,    3,
    4,  329,    6,    0,    0,  356,  214,  333,  433,    0,
    0,   14,  110,  230,  217,    0,    0,    0,    0,    0,
   17,   18,   19,   20,   21,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   43,    0,    0,  143,    0,
    0,    0,    0,    0,    0,  230,    0,    0,   45,   34,
   35,   36,    0,   41,    0,   42,    0,   40,   38,    0,
   39,    0,    0,    0,   96,    2,    3,    4,    0,    6,
   96,    2,    3,    4,    0,    6,    0,    0,   14,  110,
    0,    0,    0,    0,   14,  110,    0,   17,   18,   19,
   20,   21,    0,   17,   18,   19,   20,   21,    0,    0,
    0,    0,    0,    0,    0,   96,    2,    3,    4,    0,
    6,    0,    0,    0,    0,    0,   34,   35,   36,   14,
  110,    0,   34,   35,   36,    0,    0,  214,   17,   18,
   19,   20,   21,    0,    0,    0,    0,   45,   43,  214,
  214,  143,   41,   45,   42,    0,   40,   38,   41,   39,
   42,    0,   40,   38,    0,   39,    0,   34,   35,   36,
    0,    0,    0,    0,  214,    0,    0,    0,    0,   96,
    2,    3,    4,  294,    6,    0,    0,  230,    0,    0,
    0,    0,  214,   14,  110,    0,    0,    0,    0,  230,
  230,    0,   17,   18,   19,   20,   21,  429,    0,   45,
    0,    0,    0,  498,   41,    0,   42,    0,   40,   38,
    0,  150,    0,    0,  230,    0,    0,    0,    0,    0,
    0,   34,   35,   36,    0,    0,    0,   43,    0,    0,
  143,    0,  230,   43,    0,    0,  143,    0,    0,    0,
   45,    0,    0,    0,    0,   41,    0,   42,    0,   40,
   38,    0,   39,    0,    0,    0,   45,    0,    0,    0,
    0,   41,    0,   42,    0,   40,  293,    0,   39,    0,
    0,    0,   96,    2,    3,    4,    0,    6,    0,    0,
    0,    0,    0,    0,    0,    0,   14,  110,    0,   43,
    0,    0,  143,    0,    0,   17,   18,   19,   20,   21,
    0,    0,    0,    0,  294,    0,    0,    0,    0,  294,
    0,    0,  294,  294,  294,    0,    0,    0,  294,  294,
    0,    0,    0,    0,   34,   35,   36,  294,    0,  417,
   43,    0,  294,  143,  305,    0,    0,  421,  425,  429,
  294,    0,    0,  321,  325,    0,   43,    0,    0,  143,
    0,    0,  329,    0,    0,    0,    0,  214,  333,  433,
    0,   96,    2,    3,    4,  217,    6,   96,    2,    3,
    4,    0,    6,    0,    0,   14,  110,    0,    0,    0,
    0,   14,  110,    0,   17,   18,   19,   20,   21,    0,
   17,   18,   19,   20,   21,    0,    0,    0,    0,    0,
    0,    0,    0,   99,    0,   99,   99,   99,    0,   99,
    0,    0,    0,   34,   35,   36,    0,    0,    0,   34,
   35,   36,    0,   96,    2,    3,    4,   99,    6,    0,
    0,    0,    0,    0,    0,    0,    0,   14,  110,    0,
    0,    0,    0,    0,    0,    0,   17,   18,   19,   20,
   21,    0,    0,    0,    0,    0,   99,    0,    0,    0,
    0,    0,    0,    0,  158,    2,    3,    4,    0,    6,
    0,    0,    0,    0,    0,   34,   35,   36,   14,  110,
   96,    2,    3,    4,    0,    6,    0,   17,   18,   19,
   20,   21,    0,    0,   14,  110,    0,    0,    0,    0,
    0,    0,    0,   17,   18,   19,   20,   21,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   35,   36,   68,
    0,   68,   68,   68,   68,   68,   68,   68,   68,    0,
    0,    0,   34,   35,   36,    0,    0,    0,    0,    0,
   68,   68,   68,   68,    0,   65,    0,   65,   65,   65,
   65,   65,   65,   65,   65,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   65,   65,   65,   65,
    0,    0,   68,    0,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   70,    0,   70,   70,
   70,   70,   70,   70,   70,   70,    0,    0,   65,    0,
   65,    0,    0,    0,   68,   68,   68,   70,   70,   70,
   70,    0,   66,    0,   66,   66,   66,   66,   66,   66,
   66,   66,   99,    0,    0,    0,    0,   99,    0,    0,
   65,   65,   65,   66,   66,   66,   66,   99,    0,   70,
   67,   70,   67,   67,   67,   67,   67,   67,   67,   67,
   99,    0,    0,    0,    0,    0,    0,    0,   99,    0,
    0,   67,   67,   67,   67,   66,    0,   66,    0,    0,
    0,   70,   70,   70,    0,    0,    0,    0,    0,    0,
    0,    0,  194,    0,  197,  341,  192,  190,    0,  191,
  196,  193,    0,   67,    0,   67,    0,   66,   66,   66,
    0,    0,    0,    0,  187,  189,  188,    0,    0,    0,
   69,    0,   69,   69,   69,   69,   69,   69,   69,   69,
    0,    0,    0,    0,    0,   67,   67,   67,    0,    0,
    0,   69,   69,   69,   69,  198,    0,  194,   68,  197,
  343,  192,  190,   68,  191,  196,  193,    0,    0,    0,
   68,   68,    0,   68,    0,    0,    0,    0,    0,  187,
  189,  188,    0,   69,   65,   69,   68,    0,  195,   65,
    0,    0,    0,    0,   68,   68,   65,   65,    0,   65,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  198,    0,   65,   68,    0,   69,   69,   69,    0,    0,
   65,   65,    0,    0,  194,   70,  197,  454,  192,  190,
   70,  191,  196,  193,    0,    0,    0,   70,   70,   65,
   70,    0,    0,  195,    0,    0,  187,  189,  188,    0,
    0,   66,    0,   70,    0,    0,   66,    0,    0,    0,
    0,   70,   70,   66,   66,    0,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  198,    0,   66,
   70,    0,    0,    0,    0,    0,    0,   66,   66,    0,
    0,   67,   67,    0,    0,    0,  209,    0,  209,  209,
  209,  209,  209,  209,  209,  209,   66,   67,    0,    0,
  195,    0,    0,    0,    0,   67,   67,  209,  209,  209,
  209,    0,    0,  215,    0,    0,  215,  215,  215,  215,
  215,  215,  215,    0,   67,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  215,    0,  215,    0,    0,  209,
  212,  209,    0,  212,  212,  212,  212,  212,  212,  212,
    0,   69,   69,    0,    0,    0,    0,    0,    0,    0,
    0,  212,    0,  212,    0,    0,    0,   69,  215,    0,
    0,    0,  209,  209,    0,   69,   69,    0,    0,    0,
  213,    0,    0,  213,  213,  213,  213,  213,  213,  213,
    0,    0,    0,    0,   69,  212,    0,    0,    0,  215,
  215,  213,  236,  213,    0,  236,  236,  236,  236,  236,
  236,  236,  231,  234,    0,  231,  234,  234,  234,  234,
  234,  234,  234,  236,    0,  236,  212,  212,    0,    0,
  231,    0,    0,    0,  234,  213,  234,    0,    0,    0,
  224,    0,    0,  224,  224,  224,  224,  224,    0,  224,
    0,    0,    0,    0,    0,    0,    0,  236,    0,    0,
    0,  224,    0,  224,  231,    0,  213,  213,  234,  225,
    0,    0,  225,  225,  225,  225,  225,    0,  225,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  236,  236,
  225,    0,  225,    0,    0,  224,  231,    0,    0,  234,
  234,    0,    0,    0,    0,  209,    0,    0,    0,    0,
  223,  223,  223,  223,  223,    0,  223,  209,  209,    0,
    0,    0,    0,    0,  225,    0,  224,  224,  223,    0,
  223,    0,  215,  219,    0,  219,  219,  219,  219,  219,
    0,    0,  209,    0,  215,  215,    0,    0,    0,    0,
    0,  219,  219,  219,  219,  225,  225,    0,    0,  212,
  209,    0,  223,    0,    0,    0,    0,    0,    0,  215,
    0,  212,  212,  232,  232,  232,  232,  232,    0,  232,
    0,    0,    0,  219,    0,  219,    0,  215,    0,    0,
    0,  232,    0,  232,  223,    0,  212,    0,    0,  213,
  233,  233,  233,  233,  233,    0,  233,    0,    0,    0,
    0,  213,  213,    0,  212,    0,  219,  219,  233,    0,
  233,  236,    0,    0,    0,  232,    0,    0,  231,    0,
    0,    0,  234,  236,  236,    0,  213,    0,    0,    0,
  231,  231,    0,    0,  234,  234,  216,    0,  216,  216,
  216,    0,  233,    0,  213,    0,    0,  232,  236,  224,
    0,    0,    0,    0,  216,  231,  216,    0,    0,  234,
    0,  224,  224,    0,    0,  220,  236,  220,  220,  220,
    0,    0,    0,  231,  233,    0,    0,  234,  225,    0,
    0,    0,    0,  220,    0,  220,  224,    0,  216,    0,
  225,  225,    0,  221,    0,  221,  221,  221,    0,    0,
    0,    0,    0,    0,  224,    0,  175,    0,  175,  175,
    0,  221,  175,  221,    0,  225,  223,  220,    0,    0,
  216,    0,    0,    0,    0,    0,    0,    0,  223,  223,
  175,    0,    0,  225,   64,    0,    0,    0,   64,   64,
   64,   64,   64,   64,    0,  221,    0,    0,    0,  220,
    0,  219,  219,  223,    0,   64,   64,   64,   64,  175,
  178,  178,    0,    0,  178,    0,  179,  179,    0,    0,
  179,  223,    0,    0,    0,    0,  219,  221,    0,  232,
    0,    0,  178,    0,    0,    0,    0,   64,  179,    0,
    0,  232,  232,    0,  219,    0,    0,    0,    0,    0,
  194,    0,  197,    0,  192,  190,  233,  191,  196,  193,
    0,  178,    0,    0,    0,    0,  232,  179,  233,  233,
   64,   64,  187,  189,  188,    0,    0,    0,    0,    0,
    0,  135,    0,    0,  232,    0,  135,    0,    0,  135,
  135,  135,    0,  233,    0,  135,  135,    0,    0,    0,
    0,    0,  216,  198,  135,  367,    0,    0,    0,  135,
    0,  233,    0,    0,  216,  216,    0,  135,  301,    0,
    0,    0,    0,  305,    0,    0,  309,  313,  317,    0,
    0,  220,  321,  325,    0,    0,  195,    0,    0,  216,
    0,  329,    0,  220,  220,    0,  214,  333,  336,  339,
    0,  342,  345,    0,  217,  417,    0,  216,    0,  221,
  305,    0,    0,  421,  425,  429,    0,    0,  220,  321,
  325,  221,  221,    0,    0,  175,    0,    0,  329,    0,
  175,    0,    0,  214,  333,  433,  220,    0,    0,  175,
  175,  217,    0,    0,    0,    0,  221,    0,  175,    0,
    0,    0,    0,  175,    0,    0,    0,    0,    0,    0,
    0,  175,    0,    0,  221,    0,    0,    0,    0,    0,
    0,  194,    0,  197,    0,  192,  190,  178,  191,  196,
  193,    0,  178,  179,  199,    0,  199,  199,  179,    0,
    0,  178,  178,  187,  189,  188,    0,  179,  179,    0,
  178,    0,    0,    0,    0,  178,  179,    0,    0,    0,
    0,  179,    0,  178,    0,    0,    0,    0,    0,  179,
    0,    0,    0,    0,  198,  194,  416,  197,  463,  192,
  190,    0,  191,  196,  193,    0,  194,    0,  197,    0,
  192,  190,    0,  191,  196,  193,    0,  187,  189,  188,
    0,    0,    0,    0,    0,    0,    0,  195,  187,  189,
  188,  194,    0,  197,  479,  192,  190,    0,  191,  196,
  193,    0,  194,    0,  197,  480,  192,  190,  198,  191,
  196,  193,    0,  187,  189,  188,    0,    0,    0,  198,
    0,  470,    0,    0,  187,  189,  188,  194,    0,  197,
  481,  192,  190,    0,  191,  196,  193,    0,    0,    0,
    0,  195,    0,    0,  198,    0,    0,    0,    0,  187,
  189,  188,  195,    0,    0,  198,    0,    0,    0,  194,
    0,  197,  482,  192,  190,    0,  191,  196,  193,    0,
    0,    0,    0,    0,    0,    0,    0,  195,    0,    0,
  198,  187,  189,  188,    0,    0,    0,  194,  195,  197,
  495,  192,  190,    0,  191,  196,  193,  194,    0,  197,
  506,  192,  190,    0,  191,  196,  193,    0,    0,  187,
  189,  188,  198,  195,    0,    0,    0,    0,    0,  187,
  189,  188,    0,    0,  194,    0,  197,    0,  192,  190,
    0,  191,  196,  193,  194,    0,  197,    0,  192,  190,
  198,  191,  196,  193,    0,  195,  187,  189,  188,    0,
  198,    0,    0,    0,    0,    0,  187,  189,  188,    0,
    0,    0,  504,    0,  513,    0,  498,  492,    0,  495,
  510,  501,    0,  195,    0,    0,    0,  198,    0,  516,
    0,    0,    0,  195,  483,  489,  486,  198,    0,  540,
    0,  549,    0,  534,  528,    0,  531,  546,  537,  576,
    0,  585,    0,  570,  564,    0,  567,  582,  573,    0,
  195,  519,  525,  522,    0,  516,    0,    0,    0,    0,
  195,  555,  561,  558,    0,    0,    0,  701,    0,  710,
    0,  695,  689,    0,  692,  707,  698,    0,    0,    0,
    0,    0,  552,    0,    0,    0,    0,    0,  507,  680,
  686,  683,  588,    0,  737,    0,  746,    0,  731,  725,
    0,  728,  743,  734,  824,    0,  833,    0,  818,  812,
    0,  815,  830,  821,    0,  543,  716,  722,  719,    0,
  713,    0,    0,    0,    0,  579,  803,  809,  806,    0,
    0,    0,  860,    0,  869,    0,  854,  848,    0,  851,
  866,  857,    0,    0,    0,    0,    0,  749,    0,    0,
    0,    0,    0,  704,  839,  845,  842,  836,  301,    0,
    0,    0,    0,  305,    0,    0,  309,  313,  317,    0,
    0,    0,  321,  325,    0,    0,    0,    0,    0,    0,
  740,  329,    0,    0,    0,  872,  214,  333,  336,  339,
  827,  342,  345,    0,  217,    0,  301,    0,    0,    0,
    0,  305,    0,    0,  309,  313,  317,    0,    0,    0,
  321,  325,    0,    0,    0,    0,    0,    0,  863,  329,
    0,    0,    0,    0,  214,  333,  336,  339,  301,  342,
  345,    0,  217,  305,    0,    0,  309,  313,  317,    0,
  301,    0,  321,  325,    0,  305,    0,    0,  309,  313,
  317,  329,    0,    0,  321,  325,  214,  333,  336,  339,
    0,  342,  345,  329,  217,    0,    0,    0,  214,  333,
  336,  339,  301,  342,  345,    0,  217,  305,    0,    0,
  309,  313,  317,    0,  301,    0,  321,  325,    0,  305,
    0,    0,  309,  313,  317,  329,    0,    0,  321,  325,
  214,  333,  336,  339,    0,  342,  345,  329,  217,    0,
    0,    0,  214,  333,  336,  339,  301,  342,  345,    0,
  217,  305,    0,    0,  309,  313,  317,    0,  301,    0,
  321,  325,    0,  305,    0,    0,  309,  313,  317,  329,
    0,    0,  321,  325,  214,  333,  336,  339,    0,  342,
  345,  329,  217,    0,    0,    0,  214,  333,  336,  339,
  301,  342,  345,    0,  217,  305,    0,    0,  309,  313,
  317,    0,  301,    0,  321,  325,    0,  305,    0,    0,
  309,  313,  317,  329,    0,    0,  321,  325,  214,  333,
  336,  339,    0,  342,  345,  329,  217,    0,    0,    0,
  214,  333,  336,  339,  301,  342,  345,    0,  217,  305,
    0,    0,  309,  313,  317,    0,  301,    0,  321,  325,
    0,  305,    0,    0,  309,  313,  317,  329,    0,    0,
  321,  325,  214,  333,  336,  339,    0,  342,  345,  329,
  217,    0,    0,    0,  214,  333,  336,  339,  301,  342,
  345,    0,  217,  305,    0,    0,  309,  313,  317,    0,
  301,    0,  321,  325,    0,  305,    0,    0,  309,  313,
  317,  329,    0,    0,  321,  325,  214,  333,  336,  339,
    0,  342,  345,  329,  217,    0,    0,    0,  214,  333,
  336,  339,  301,  342,  345,    0,  217,  305,    0,    0,
  309,  313,  317,    0,  301,    0,  321,  325,    0,  305,
    0,    0,  309,  313,  317,  329,    0,    0,  321,  325,
  214,  333,  336,  339,    0,  342,  345,  329,  217,    0,
    0,    0,  214,  333,  336,  339,  301,  342,  345,    0,
  217,  305,    0,    0,  309,  313,  317,    0,  417,    0,
  321,  325,    0,  305,    0,    0,  421,  425,  429,  329,
    0,    0,  321,  325,  214,  333,  336,  339,    0,  342,
  345,  329,  217,    0,    0,    0,  214,  333,  433,    0,
  417,    0,    0,    0,  217,  305,    0,    0,  421,  425,
  429,  417,    0,    0,  321,  325,  305,    0,    0,  421,
  425,  429,    0,  329,    0,  321,  325,    0,  214,  333,
  433,    0,    0,    0,  329,    0,  217,    0,    0,  214,
  333,  433,    0,  417,    0,    0,    0,  217,  305,    0,
    0,  421,  425,  429,  417,    0,    0,  321,  325,  305,
    0,    0,  421,  425,  429,    0,  329,    0,  321,  325,
    0,  214,  333,  433,    0,    0,    0,  329,    0,  217,
    0,    0,  214,  333,  433,    0,  417,    0,    0,    0,
  217,  305,    0,    0,  421,  425,  429,  207,    0,    0,
  321,  325,  210,    0,    0,  210,  210,  210,    0,  329,
    0,  210,  210,    0,  214,  333,  433,    0,    0,    0,
  210,  401,  217,    0,    0,  214,  401,    0,    0,  401,
  401,  401,  207,  217,    0,  401,  401,  210,    0,    0,
  210,  210,  210,    0,  401,    0,  210,  210,    0,  405,
    0,    0,    0,    0,    0,  210,    0,  408,    0,    0,
  214,    0,    0,    0,    0,    0,    0,    0,  217,
};
static int yycheck[] = {                                      38,
    0,    1,    1,    0,  411,   59,    6,   40,    8,    9,
   10,    1,   40,  125,   14,   15,   61,  126,  123,   91,
    5,  342,  271,   38,   44,   38,  473,   42,    5,   42,
   59,  280,  120,   33,  258,  291,   47,   44,   41,   41,
  102,   44,   44,   46,   47,   60,  326,   59,   47,   59,
   44,  458,   59,  141,  278,   55,   59,   60,   61,   62,
  290,   33,   87,    5,   64,   59,  329,   61,   38,  123,
   43,   41,   42,   43,   44,   45,   46,   47,   38,  329,
   40,  528,   42,   43,  109,   45,   86,   87,   91,   59,
   93,   61,   64,   44,  123,   60,  107,   97,   98,   99,
  100,   86,  102,  102,   89,  125,   42,  387,  107,  109,
  110,   41,  102,  201,   44,   44,  123,  102,  206,   44,
  120,  124,  125,   93,   44,  102,  389,   44,   44,   38,
  451,  394,   41,   42,   43,   44,   45,   46,   47,  389,
   41,  141,   40,   44,  394,  329,   41,   59,  257,   44,
   59,   60,   61,   62,  124,  125,  279,  280,   44,  126,
  440,  273,  274,  275,   59,  165,   44,   38,   41,  169,
  170,   42,   44,   59,  125,  438,   42,  162,   58,   59,
  271,   47,  167,   60,   93,   62,   59,   59,  438,  280,
  167,  314,   44,   91,  285,  125,  125,   60,   93,   59,
  125,  201,  293,  123,   44,  389,  206,  123,  125,  209,
  394,  123,  212,  285,  477,  124,  125,  271,  257,  219,
  308,  293,   88,   44,  125,  225,  280,  477,   60,  171,
  125,  231,  174,   44,  234,  177,  102,  257,  271,  105,
  285,  107,  271,  271,  289,  123,   44,  280,   60,  269,
  270,  280,  280,  253,  438,  121,  122,  123,  124,  271,
  322,  271,  234,  123,  271,  265,  269,  270,  280,  211,
  280,  123,  272,  280,  294,   59,  273,  274,  275,  264,
   40,  253,   59,  123,   40,   44,  288,  257,  290,  291,
  257,  294,  312,  477,   60,  262,   62,  257,  164,  269,
  270,  167,  123,   44,  271,  272,  306,   38,  308,  312,
  310,   58,   59,  280,  125,   40,  404,  379,   59,  407,
  382,  257,  322,  322,  294,  123,  262,  288,  328,  290,
  291,   59,  322,  318,  306,  271,  272,  322,  310,  123,
  257,  341,  312,  343,  280,  322,  123,  262,  257,  215,
  412,  257,  269,  270,  358,  359,  271,  272,   59,   59,
  269,  270,  257,  269,  270,  280,  125,  352,   38,  341,
  370,  343,  376,  315,  269,  270,  123,  294,  466,  379,
  379,  381,  382,  382,   59,  294,  257,   44,  294,  379,
   41,  262,  382,   44,  379,  312,  126,  382,  370,  294,
  271,  272,  379,  312,  404,  382,  312,  407,   59,  280,
  472,   60,  412,  412,  502,   91,   59,  312,   41,   33,
   59,   44,  412,  271,   38,  425,   40,  412,   42,  491,
  518,   58,  280,  521,   40,  412,   41,  257,  271,   44,
   46,   91,  123,  257,  271,  507,  257,  280,  271,  264,
  450,  539,  452,  280,   59,  543,  322,  280,  269,  270,
   41,  461,  462,   44,  257,  527,  466,  467,  125,  257,
  264,   41,  472,  472,   44,  417,  418,   38,  450,   40,
  452,   42,  472,  294,  271,   91,  428,  472,   93,   59,
  257,  491,  491,  280,   41,  472,  496,   44,  257,   60,
  257,  491,  502,  264,  305,  505,  491,  507,  507,  123,
  269,  270,  126,  379,  491,   93,  382,  507,  518,  519,
  125,  521,  507,   93,  496,   41,  257,  527,  527,  271,
  507,  262,  532,  505,  534,  294,   40,  527,  280,  539,
  271,  272,  527,  543,  544,  545,  412,  519,  271,  280,
  527,  493,  494,  312,  271,  125,  498,  280,  257,   58,
  532,  271,  534,  280,   58,   38,   44,   40,   41,   42,
  280,   44,  544,  545,  516,   34,   35,   36,   58,  271,
   39,   40,   41,   42,   43,   44,   45,  257,  280,   62,
  257,    0,  262,  379,  257,  271,  382,   38,  265,   40,
  257,  271,  272,  285,  280,   46,  472,   61,  285,  285,
  280,  293,  269,  270,  285,  285,  293,  293,   91,  285,
  257,  271,  293,  293,   33,  491,  412,  293,  257,   38,
  280,   40,   42,   42,   43,  285,   45,  294,   60,   41,
   62,  507,   44,  293,  258,  259,  260,  125,  262,   62,
   91,   41,  257,   41,   44,  312,   44,  271,  272,   41,
   41,  527,   44,   44,  269,  270,  280,  281,  282,  283,
  284,   59,   41,   61,   41,   44,   60,   44,   62,  138,
  139,  140,  141,  124,  143,   62,  472,  257,  257,  294,
  149,  150,   59,  262,   61,  309,  310,  311,   41,  269,
  270,   44,  271,  272,   62,  491,   41,  312,   62,   44,
  271,  280,   41,  172,  123,   44,  125,  126,   38,  280,
   40,  507,   42,   40,  294,  264,   46,   47,  187,  188,
  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,
   59,  527,  312,   40,  285,  286,  287,  288,   33,  290,
  291,   41,  293,   38,   60,   40,   62,   42,   43,   60,
   45,   62,   41,   42,   43,   44,   45,   60,   47,   62,
   41,   91,  257,   44,  257,   60,   61,  262,   40,  257,
   59,   62,   61,   60,  257,   62,  271,  272,   59,  262,
   61,  269,  270,   41,   40,  280,   44,  256,  271,  272,
  259,  257,    0,  262,  124,   40,   43,  280,   45,   46,
   47,   59,  285,   61,   93,   58,  294,  276,   40,   60,
  293,   62,   59,   60,   61,   40,  285,  286,   40,  288,
  289,   44,  291,   38,  312,   33,  295,  296,  123,   42,
   38,  126,   40,   40,   42,   43,  125,   45,  257,  258,
  259,  260,  261,  262,  263,   40,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  273,  274,
  275,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   40,  290,  291,  342,  293,  294,  345,  124,  125,  298,
   40,    0,   33,   41,  305,  304,  305,  306,   42,   41,
  309,  310,  311,  312,  298,  299,  300,  301,  302,  303,
  369,   40,  125,   38,   40,   40,   41,   42,  377,   44,
  257,  258,  259,  260,   33,  123,   38,  125,  126,   38,
   60,   40,   62,   42,   43,  257,   45,   62,   61,   59,
  399,  400,  401,  402,   61,  404,  257,   60,  407,   62,
   60,  262,   62,  257,  265,  266,  267,   60,  262,   62,
  271,  272,  421,   59,   40,  257,   91,  271,  272,  280,
  262,  257,  257,  258,  259,  260,  280,  262,  257,  271,
  272,  285,  123,  442,   42,  126,  271,  272,  280,  293,
  269,  270,  451,  257,  453,  280,  281,  282,  283,  284,
   59,   33,  265,  266,  267,   60,   38,   62,   40,  468,
   42,   43,   41,   45,  123,  294,  125,  126,   60,   60,
   62,   62,  257,   41,  309,  310,  311,  262,  260,   40,
  265,  266,  267,  312,   58,  123,  271,  272,   60,   60,
   62,   62,   59,   41,  257,  280,   60,   60,   62,   62,
  285,  286,  287,   40,   59,   41,  269,  270,  293,   40,
   40,  260,  521,  261,  262,  263,   41,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,   40,
  123,  294,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  123,  290,  291,  126,  293,  294,  123,    0,  312,
  298,  126,   59,  123,   42,  257,  304,  305,  306,   41,
   41,  309,  310,  311,  312,   33,  126,  258,  259,  260,
   38,  262,   40,  257,   42,   43,  312,   45,   40,  257,
  271,  272,  257,  271,  312,  257,  257,  262,  394,  280,
  281,  282,  283,  284,   49,  322,  271,  272,  257,  258,
  259,  260,  261,  262,  263,  280,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  309,  310,
  311,  280,  281,  282,  283,  284,  285,  286,  287,  288,
  427,  290,  291,  517,  293,  294,  286,  287,  288,  298,
  290,  291,   -1,  197,   -1,  304,  305,  306,   -1,   -1,
  309,  310,  311,   -1,   33,  123,   -1,   -1,  126,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,  298,   -1,   -1,   -1,
   -1,   -1,  304,  305,  306,   -1,   -1,  309,  310,  311,
  312,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  123,   -1,  257,  126,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,  257,   -1,   -1,
  271,  272,  262,  257,   -1,  265,  266,  267,  262,  280,
   -1,  271,  272,   -1,  285,   -1,   -1,  271,  272,   -1,
  280,   38,  293,   40,   41,   42,  280,   44,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   62,   38,   -1,  276,   -1,
   42,   -1,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  123,  290,  291,  126,  293,  294,   59,   60,   -1,
  298,   -1,   -1,   -1,   91,   -1,  304,  305,  306,   -1,
   -1,  309,  310,  311,  312,   33,  279,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,  295,  296,  297,  298,  299,  300,  301,  302,
  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,  290,  291,   -1,  293,  294,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,   -1,
  309,  310,  311,  312,   33,  123,   -1,   -1,  126,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,  298,   -1,   -1,   -1,
  257,   -1,  304,  305,  306,  262,   -1,  309,  310,  311,
  312,   33,   -1,   -1,   -1,  272,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  123,  257,   -1,  126,  285,   -1,
  262,   -1,   -1,  265,  266,  267,  293,  257,   -1,   -1,
  272,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  271,  272,  285,  286,  287,  288,   -1,  290,  291,
  280,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  123,  290,  291,  126,  293,  294,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,
   -1,  309,  310,  311,  312,   33,  257,   -1,  257,   -1,
   38,  262,   40,  262,   42,   43,   -1,   45,   -1,   -1,
  271,  272,  271,  272,   -1,   -1,   -1,   -1,   -1,  280,
   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,  290,  291,   -1,  293,  294,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,   -1,
  309,  310,  311,  312,   33,  123,   -1,   -1,  126,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,  298,   -1,   -1,   -1,
   -1,   -1,  304,  305,  306,   -1,   -1,  309,  310,  311,
  312,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  123,   -1,   -1,  126,   -1,  257,
   -1,   -1,   -1,   38,  262,   40,   -1,   42,   43,   44,
   45,   46,   47,  271,  272,  257,   -1,   -1,   -1,   -1,
  262,   -1,  280,   -1,   59,   60,   61,   62,   -1,  271,
  272,   38,   -1,   40,   41,   42,   -1,   44,  280,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   62,   91,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  123,  290,  291,  126,  293,  294,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   91,   -1,  304,  305,  306,  124,
  125,  309,  310,  311,  312,   33,  257,   -1,  257,   -1,
   38,  262,   40,  262,   42,   43,   -1,   45,   -1,   -1,
  271,  272,  271,  272,   -1,   -1,   -1,   -1,   -1,  280,
   -1,  280,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,  126,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,  290,  291,   -1,  293,  294,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,   -1,
  309,  310,  311,  312,   33,  123,   -1,   -1,  126,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   -1,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  290,  291,
   -1,  293,  294,   -1,   -1,  280,  298,   -1,   -1,   -1,
  257,   -1,  304,  305,  306,  262,   -1,  309,  310,  311,
  312,   33,   -1,   -1,   -1,  272,   38,  257,   40,   -1,
   42,   43,  262,   45,  123,   -1,   -1,  126,  285,  257,
   -1,  271,  272,   -1,  262,   -1,  293,  265,  266,  267,
  280,   -1,   -1,  271,  272,  257,   -1,   -1,   -1,   -1,
  262,   -1,  280,   -1,   -1,   -1,   -1,  285,   -1,  271,
  272,   38,   -1,   40,   41,  293,   -1,   44,  280,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   62,   -1,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  123,  290,  291,  126,  293,  294,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   91,   -1,  304,  305,  306,   -1,
   -1,  309,  310,  311,  312,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,   -1,
   -1,  280,  281,  282,  283,  284,  285,  286,  287,  288,
   -1,  290,  291,   -1,  293,  294,   -1,   -1,   38,  298,
   40,   41,   42,   -1,   44,  304,  305,  306,   -1,   -1,
  309,  310,  311,  312,   33,  123,   -1,   -1,  126,   38,
   -1,   40,   62,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,  270,  271,
  272,   91,   -1,   -1,  276,   -1,   -1,   -1,  280,  281,
  282,  283,  284,  285,  286,  287,  288,   -1,  290,  291,
   -1,  293,  294,   -1,   -1,   -1,  298,   -1,   -1,   -1,
  257,   -1,  304,  305,  306,  262,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  271,  272,   40,   41,   -1,   -1,
   44,   -1,   -1,  280,  123,   -1,  125,  126,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   33,  293,   -1,   62,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  270,  271,  272,   -1,   -1,   -1,  276,   -1,
   -1,   -1,  280,  281,  282,  283,  284,  285,  286,  287,
  288,   -1,  290,  291,   -1,  293,  294,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,
   -1,  309,  310,  311,  312,  123,   33,  125,  126,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,  257,   45,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,  285,   -1,   -1,   -1,  268,
  269,  270,   -1,  293,  273,  274,  275,  276,   -1,   -1,
   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,   -1,
  309,  310,  311,  312,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,  257,   42,   43,   40,   45,  262,   43,
   44,   45,   46,   47,   -1,   38,   -1,  271,  272,   42,
   43,   44,   45,   46,   47,   59,  280,   61,   62,   -1,
  258,  259,  260,  261,   -1,  263,   59,   60,   61,   62,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,   91,   -1,   -1,
  126,   -1,   33,   -1,   -1,   -1,  294,   38,   91,   40,
  298,   42,   43,   -1,   45,   -1,  304,  305,  306,   -1,
   -1,  309,  310,  311,  312,  123,   -1,  125,  126,  262,
  124,  125,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,  124,  125,   -1,   33,   -1,   -1,  280,   -1,   38,
   -1,   40,  285,   42,   43,   -1,   45,   -1,   -1,   -1,
  293,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,  276,
   -1,   -1,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,  294,   -1,   -1,
   -1,  298,   -1,   -1,   -1,   -1,   -1,  304,  305,  306,
   -1,   33,  309,  310,  311,  312,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  123,   -1,  262,  126,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
   41,   -1,   -1,   44,  280,   -1,   -1,   -1,   -1,  285,
  258,  259,  260,  261,   -1,  263,   -1,  293,   59,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,   -1,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,  280,   -1,   -1,
  298,  123,   93,  125,  126,   -1,  304,  305,  306,   -1,
   33,  309,  310,  311,  312,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,  125,   -1,   -1,  268,  269,  270,
   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,  258,
  259,  260,   -1,  304,  305,  306,   -1,   33,  309,  310,
  311,  312,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,  281,  282,  283,  284,  285,   -1,   -1,   -1,
  123,   -1,  125,  126,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  309,  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   -1,  268,  269,  270,   -1,
   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,
  282,  283,  284,   -1,   -1,   -1,  257,  123,   93,  125,
  126,   -1,  294,   -1,   -1,   -1,  298,   -1,  269,  270,
   -1,   -1,  304,  305,  306,   -1,   33,  309,  310,  311,
  312,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
  125,   -1,   -1,  294,   -1,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,  312,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   59,   60,   61,   62,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   59,   -1,  268,  269,  270,   -1,   -1,
  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,
  283,  284,   -1,   91,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  298,  123,   93,  125,  126,
   -1,  304,  305,  306,   -1,   33,  309,  310,  311,  312,
   38,   -1,   40,   -1,   42,   43,  124,   45,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,  125,
   -1,   -1,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  294,   -1,
   -1,   -1,  298,   -1,  269,  270,   -1,   -1,  304,  305,
  306,   -1,   33,  309,  310,  311,  312,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  312,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   59,
   -1,  258,  259,  260,  261,   -1,  263,   59,   60,   61,
   62,  268,  269,  270,   -1,   -1,  273,  274,  275,  276,
   -1,   -1,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,  257,  123,   93,  125,  126,   -1,  294,   -1,   91,
   -1,  298,   -1,  269,  270,   -1,   -1,  304,  305,  306,
   -1,   33,  309,  310,  311,  312,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,  125,   -1,   -1,  294,   -1,
   -1,   -1,  124,  125,   -1,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,  312,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   60,   61,   62,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   59,   -1,
  268,  269,  270,   -1,   -1,  273,  274,  275,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,   -1,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  298,  123,   93,  125,  126,   -1,  304,  305,  306,   -1,
   33,  309,  310,  311,  312,   38,   -1,   40,   -1,   42,
   43,  124,   45,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,  125,   -1,   -1,  268,  269,  270,
   -1,   -1,  273,  274,  275,  276,   -1,   -1,   -1,   -1,
  281,  282,  283,  284,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,  269,
  270,   -1,   -1,  304,  305,  306,   -1,   33,  309,  310,
  311,  312,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,  285,  294,   -1,   -1,   -1,   -1,   -1,
  123,  293,  125,  126,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,  312,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   -1,   -1,   -1,   61,  268,  269,  270,   -1,
   -1,  273,  274,  275,  276,   41,   -1,   -1,   44,  281,
  282,  283,  284,   -1,   -1,   -1,  257,  123,   -1,   -1,
  126,   -1,  294,   59,   -1,   91,  298,   -1,  269,  270,
   -1,   -1,  304,  305,  306,   -1,   33,  309,  310,  311,
  312,   38,   -1,   40,   -1,   42,   43,   -1,   45,  123,
   -1,   -1,  126,  294,   -1,   -1,   -1,   93,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,  312,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,  258,  259,  260,  261,  125,
  263,   -1,   -1,   -1,   -1,  268,  269,  270,   -1,   -1,
  273,  274,  275,  276,   -1,   -1,   -1,   -1,  281,  282,
  283,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  294,   -1,   -1,   -1,  298,  123,   -1,   -1,  126,
   -1,  304,  305,  306,   -1,   33,  309,  310,  311,  312,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,  258,  259,  260,  261,   -1,  263,  123,   -1,
   -1,  126,  268,  269,  270,   -1,   -1,  273,  274,  275,
  276,   -1,   -1,   -1,   -1,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  294,  263,
   -1,   -1,  298,   -1,  268,  269,  270,   -1,  304,  305,
  306,   -1,  276,  309,  310,  311,  312,  281,  282,  283,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,  257,   -1,   -1,  298,  123,   -1,   -1,  126,   -1,
  304,  305,  306,  269,  270,  309,  310,  311,  312,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  294,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   61,
   62,  268,  269,  270,   -1,   -1,  312,   -1,   -1,  276,
   -1,   -1,   -1,   -1,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,  294,  263,   -1,
   -1,  298,   -1,  268,  269,  270,   -1,  304,  305,  306,
   -1,  276,  309,  310,  311,  312,  281,  282,  283,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,  123,   -1,  298,  126,   -1,   -1,   -1,   -1,  304,
  305,  306,   -1,   33,  309,  310,  311,  312,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,  270,   -1,   -1,   -1,   -1,   -1,  276,   -1,
   -1,   -1,   -1,  281,  282,  283,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,
  298,   91,   -1,   -1,   -1,   -1,  304,  305,  306,   -1,
   33,  309,  310,  311,  312,   38,   33,   40,   -1,   42,
   43,   38,   45,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   43,   -1,   45,   -1,  257,  258,  259,  260,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,  271,
  272,   41,   42,   43,   44,   45,   46,   47,  280,  281,
  282,  283,  284,   -1,   -1,   -1,   -1,   -1,   -1,   59,
  123,   61,   -1,  126,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   33,   -1,  309,  310,  311,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   41,   -1,   93,   44,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,  257,   59,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,  124,  125,   -1,  257,  258,  259,
  260,  280,  262,   -1,   -1,   93,  285,  286,  287,   -1,
   -1,  271,  272,   93,  293,   -1,   -1,   -1,   -1,   -1,
  280,  281,  282,  283,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   33,  309,
  310,  311,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,
  257,  258,  259,  260,   -1,  262,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,  271,  272,   -1,  280,  281,  282,
  283,  284,   -1,  280,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  271,
  272,   -1,  309,  310,  311,   -1,   -1,  257,  280,  281,
  282,  283,  284,   -1,   -1,   -1,   -1,   33,  123,  269,
  270,  126,   38,   33,   40,   -1,   42,   43,   38,   45,
   40,   -1,   42,   43,   -1,   45,   -1,  309,  310,  311,
   -1,   -1,   -1,   -1,  294,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  126,  262,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  312,  271,  272,   -1,   -1,   -1,   -1,  269,
  270,   -1,  280,  281,  282,  283,  284,   93,   -1,   33,
   -1,   -1,   -1,   93,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,  294,   -1,   -1,   -1,   -1,   -1,
   -1,  309,  310,  311,   -1,   -1,   -1,  123,   -1,   -1,
  126,   -1,  312,  123,   -1,   -1,  126,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,  123,
   -1,   -1,  126,   -1,   -1,  280,  281,  282,  283,  284,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,  309,  310,  311,  280,   -1,  257,
  123,   -1,  285,  126,  262,   -1,   -1,  265,  266,  267,
  293,   -1,   -1,  271,  272,   -1,  123,   -1,   -1,  126,
   -1,   -1,  280,   -1,   -1,   -1,   -1,  285,  286,  287,
   -1,  257,  258,  259,  260,  293,  262,  257,  258,  259,
  260,   -1,  262,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,  271,  272,   -1,  280,  281,  282,  283,  284,   -1,
  280,  281,  282,  283,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   40,   41,   42,   -1,   44,
   -1,   -1,   -1,  309,  310,  311,   -1,   -1,   -1,  309,
  310,  311,   -1,  257,  258,  259,  260,   62,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  280,  281,  282,  283,
  284,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,
   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  271,  272,
  257,  258,  259,  260,   -1,  262,   -1,  280,  281,  282,
  283,  284,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  280,  281,  282,  283,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,  311,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   91,   -1,
   93,   -1,   -1,   -1,  123,  124,  125,   59,   60,   61,
   62,   -1,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  123,  124,  125,   59,   60,   61,   62,  272,   -1,   91,
   38,   93,   40,   41,   42,   43,   44,   45,   46,   47,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,   -1,
   -1,   59,   60,   61,   62,   91,   -1,   93,   -1,   -1,
   -1,  123,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   91,   -1,   93,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   -1,   -1,
   -1,   59,   60,   61,   62,   91,   -1,   38,  257,   40,
   41,   42,   43,  262,   45,   46,   47,   -1,   -1,   -1,
  269,  270,   -1,  272,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   91,  257,   93,  285,   -1,  124,  262,
   -1,   -1,   -1,   -1,  293,  294,  269,  270,   -1,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,  285,  312,   -1,  123,  124,  125,   -1,   -1,
  293,  294,   -1,   -1,   38,  257,   40,   41,   42,   43,
  262,   45,   46,   47,   -1,   -1,   -1,  269,  270,  312,
  272,   -1,   -1,  124,   -1,   -1,   60,   61,   62,   -1,
   -1,  257,   -1,  285,   -1,   -1,  262,   -1,   -1,   -1,
   -1,  293,  294,  269,  270,   -1,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,  285,
  312,   -1,   -1,   -1,   -1,   -1,   -1,  293,  294,   -1,
   -1,  269,  270,   -1,   -1,   -1,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,  312,  285,   -1,   -1,
  124,   -1,   -1,   -1,   -1,  293,  294,   59,   60,   61,
   62,   -1,   -1,   38,   -1,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   91,
   38,   93,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,  269,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   -1,   -1,   -1,  285,   93,   -1,
   -1,   -1,  124,  125,   -1,  293,  294,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,  312,   93,   -1,   -1,   -1,  124,
  125,   59,   38,   61,   -1,   41,   42,   43,   44,   45,
   46,   47,   41,   38,   -1,   44,   41,   42,   43,   44,
   45,   46,   47,   59,   -1,   61,  124,  125,   -1,   -1,
   59,   -1,   -1,   -1,   59,   93,   61,   -1,   -1,   -1,
   38,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   59,   -1,   61,   93,   -1,  124,  125,   93,   38,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   59,   -1,   61,   -1,   -1,   93,  125,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,  269,  270,   -1,
   -1,   -1,   -1,   -1,   93,   -1,  124,  125,   59,   -1,
   61,   -1,  257,   41,   -1,   43,   44,   45,   46,   47,
   -1,   -1,  294,   -1,  269,  270,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,  124,  125,   -1,   -1,  257,
  312,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,  294,
   -1,  269,  270,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   91,   -1,   93,   -1,  312,   -1,   -1,
   -1,   59,   -1,   61,  125,   -1,  294,   -1,   -1,  257,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,  269,  270,   -1,  312,   -1,  124,  125,   59,   -1,
   61,  257,   -1,   -1,   -1,   93,   -1,   -1,  257,   -1,
   -1,   -1,  257,  269,  270,   -1,  294,   -1,   -1,   -1,
  269,  270,   -1,   -1,  269,  270,   41,   -1,   43,   44,
   45,   -1,   93,   -1,  312,   -1,   -1,  125,  294,  257,
   -1,   -1,   -1,   -1,   59,  294,   61,   -1,   -1,  294,
   -1,  269,  270,   -1,   -1,   41,  312,   43,   44,   45,
   -1,   -1,   -1,  312,  125,   -1,   -1,  312,  257,   -1,
   -1,   -1,   -1,   59,   -1,   61,  294,   -1,   93,   -1,
  269,  270,   -1,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,   -1,  312,   -1,   38,   -1,   40,   41,
   -1,   59,   44,   61,   -1,  294,  257,   93,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
   62,   -1,   -1,  312,   38,   -1,   -1,   -1,   42,   43,
   44,   45,   46,   47,   -1,   93,   -1,   -1,   -1,  125,
   -1,  269,  270,  294,   -1,   59,   60,   61,   62,   91,
   40,   41,   -1,   -1,   44,   -1,   40,   41,   -1,   -1,
   44,  312,   -1,   -1,   -1,   -1,  294,  125,   -1,  257,
   -1,   -1,   62,   -1,   -1,   -1,   -1,   91,   62,   -1,
   -1,  269,  270,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,  257,   45,   46,   47,
   -1,   91,   -1,   -1,   -1,   -1,  294,   91,  269,  270,
  124,  125,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  312,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,  294,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  257,   91,  280,   93,   -1,   -1,   -1,  285,
   -1,  312,   -1,   -1,  269,  270,   -1,  293,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,  257,  271,  272,   -1,   -1,  124,   -1,   -1,  294,
   -1,  280,   -1,  269,  270,   -1,  285,  286,  287,  288,
   -1,  290,  291,   -1,  293,  257,   -1,  312,   -1,  257,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,  294,  271,
  272,  269,  270,   -1,   -1,  257,   -1,   -1,  280,   -1,
  262,   -1,   -1,  285,  286,  287,  312,   -1,   -1,  271,
  272,  293,   -1,   -1,   -1,   -1,  294,   -1,  280,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  293,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,  257,   45,   46,
   47,   -1,  262,  257,  288,   -1,  290,  291,  262,   -1,
   -1,  271,  272,   60,   61,   62,   -1,  271,  272,   -1,
  280,   -1,   -1,   -1,   -1,  285,  280,   -1,   -1,   -1,
   -1,  285,   -1,  293,   -1,   -1,   -1,   -1,   -1,  293,
   -1,   -1,   -1,   -1,   91,   38,   93,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   60,   61,
   62,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   38,   -1,   40,   41,   42,   43,   91,   45,
   46,   47,   -1,   60,   61,   62,   -1,   -1,   -1,   91,
   -1,   93,   -1,   -1,   60,   61,   62,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,  124,   -1,   -1,   91,   -1,   -1,   -1,   -1,   60,
   61,   62,  124,   -1,   -1,   91,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   91,   60,   61,   62,   -1,   -1,   -1,   38,  124,   40,
   41,   42,   43,   -1,   45,   46,   47,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   60,
   61,   62,   91,  124,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   38,   -1,   40,   -1,   42,   43,
   91,   45,   46,   47,   -1,  124,   60,   61,   62,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,  124,   -1,   -1,   -1,   91,   -1,   93,
   -1,   -1,   -1,  124,   60,   61,   62,   91,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
  124,   60,   61,   62,   -1,   91,   -1,   -1,   -1,   -1,
  124,   60,   61,   62,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,  124,   60,
   61,   62,   91,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,  124,   60,   61,   62,   -1,
   91,   -1,   -1,   -1,   -1,  124,   60,   61,   62,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   -1,   -1,   -1,  124,   60,   61,   62,   91,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  280,   -1,   -1,   -1,   91,  285,  286,  287,  288,
  124,  290,  291,   -1,  293,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,  124,  280,
   -1,   -1,   -1,   -1,  285,  286,  287,  288,  257,  290,
  291,   -1,  293,  262,   -1,   -1,  265,  266,  267,   -1,
  257,   -1,  271,  272,   -1,  262,   -1,   -1,  265,  266,
  267,  280,   -1,   -1,  271,  272,  285,  286,  287,  288,
   -1,  290,  291,  280,  293,   -1,   -1,   -1,  285,  286,
  287,  288,  257,  290,  291,   -1,  293,  262,   -1,   -1,
  265,  266,  267,   -1,  257,   -1,  271,  272,   -1,  262,
   -1,   -1,  265,  266,  267,  280,   -1,   -1,  271,  272,
  285,  286,  287,  288,   -1,  290,  291,  280,  293,   -1,
   -1,   -1,  285,  286,  287,  288,  257,  290,  291,   -1,
  293,  262,   -1,   -1,  265,  266,  267,   -1,  257,   -1,
  271,  272,   -1,  262,   -1,   -1,  265,  266,  267,  280,
   -1,   -1,  271,  272,  285,  286,  287,  288,   -1,  290,
  291,  280,  293,   -1,   -1,   -1,  285,  286,  287,  288,
  257,  290,  291,   -1,  293,  262,   -1,   -1,  265,  266,
  267,   -1,  257,   -1,  271,  272,   -1,  262,   -1,   -1,
  265,  266,  267,  280,   -1,   -1,  271,  272,  285,  286,
  287,  288,   -1,  290,  291,  280,  293,   -1,   -1,   -1,
  285,  286,  287,  288,  257,  290,  291,   -1,  293,  262,
   -1,   -1,  265,  266,  267,   -1,  257,   -1,  271,  272,
   -1,  262,   -1,   -1,  265,  266,  267,  280,   -1,   -1,
  271,  272,  285,  286,  287,  288,   -1,  290,  291,  280,
  293,   -1,   -1,   -1,  285,  286,  287,  288,  257,  290,
  291,   -1,  293,  262,   -1,   -1,  265,  266,  267,   -1,
  257,   -1,  271,  272,   -1,  262,   -1,   -1,  265,  266,
  267,  280,   -1,   -1,  271,  272,  285,  286,  287,  288,
   -1,  290,  291,  280,  293,   -1,   -1,   -1,  285,  286,
  287,  288,  257,  290,  291,   -1,  293,  262,   -1,   -1,
  265,  266,  267,   -1,  257,   -1,  271,  272,   -1,  262,
   -1,   -1,  265,  266,  267,  280,   -1,   -1,  271,  272,
  285,  286,  287,  288,   -1,  290,  291,  280,  293,   -1,
   -1,   -1,  285,  286,  287,  288,  257,  290,  291,   -1,
  293,  262,   -1,   -1,  265,  266,  267,   -1,  257,   -1,
  271,  272,   -1,  262,   -1,   -1,  265,  266,  267,  280,
   -1,   -1,  271,  272,  285,  286,  287,  288,   -1,  290,
  291,  280,  293,   -1,   -1,   -1,  285,  286,  287,   -1,
  257,   -1,   -1,   -1,  293,  262,   -1,   -1,  265,  266,
  267,  257,   -1,   -1,  271,  272,  262,   -1,   -1,  265,
  266,  267,   -1,  280,   -1,  271,  272,   -1,  285,  286,
  287,   -1,   -1,   -1,  280,   -1,  293,   -1,   -1,  285,
  286,  287,   -1,  257,   -1,   -1,   -1,  293,  262,   -1,
   -1,  265,  266,  267,  257,   -1,   -1,  271,  272,  262,
   -1,   -1,  265,  266,  267,   -1,  280,   -1,  271,  272,
   -1,  285,  286,  287,   -1,   -1,   -1,  280,   -1,  293,
   -1,   -1,  285,  286,  287,   -1,  257,   -1,   -1,   -1,
  293,  262,   -1,   -1,  265,  266,  267,  257,   -1,   -1,
  271,  272,  262,   -1,   -1,  265,  266,  267,   -1,  280,
   -1,  271,  272,   -1,  285,  286,  287,   -1,   -1,   -1,
  280,  257,  293,   -1,   -1,  285,  262,   -1,   -1,  265,
  266,  267,  257,  293,   -1,  271,  272,  262,   -1,   -1,
  265,  266,  267,   -1,  280,   -1,  271,  272,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  280,   -1,  293,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  293,
};
static int yyctable[] = {                                      1,
    2,  144,  198,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,  144,  198,
   -1,    7,    2,   -1,    8,    2,  144,  198,   -1,    9,
    2,  144,  198,   -1,   10,    2,  144,  198,   -1,   11,
    2,   -1,   12,    2,   -1,   13,    2,   -1,   14,    2,
  144,  198,   -1,   15,    2,  144,  198,   -1,   16,    2,
   -1,   17,    2,  144,  198,   -1,   18,    2,   -1,   19,
    2,   -1,   20,    2,   -1,   21,    2,   -1,   22,    2,
  198,   -1,   23,    2,  198,   -1,   24,    2,  198,   -1,
   25,    2,  198,   -1,   26,    2,  198,   -1,   27,    2,
  198,   -1,   28,    2,  198,   -1,   29,    2,   -1,   30,
    2,   -1,   31,    2,   -1,   32,    2,   -1,   33,    2,
   -1,   34,    2,   -1,   35,    2,   -1,   36,    2,   -1,
   37,    2,   -1,   38,    2,   -1,   39,    2,   -1,   40,
    2,   -1,   41,    2,   -1,   42,    2,   -1,   43,    2,
   -1,   44,    2,   -1,   45,    2,   -1,   96,  144,  199,
   -1,    6,  144,  199,   -1,   97,  144,  199,   -1,   98,
  144,  199,   -1,   99,  144,  199,   -1,  100,   64,  144,
  199,   -1,   15,  144,  199,   -1,   17,   64,  144,  199,
   -1,   22,  199,   -1,   23,  199,   -1,  101,  199,   -1,
   28,  199,   -1,  102,   64,   -1,  106,  144,  198,   -1,
  144,  198,   -1,   22,  198,   -1,   28,  198,   -1,   96,
   67,   -1,    6,   67,   -1,   14,   67,   -1,  110,   67,
   -1,   17,   67,   -1,   96,  194,   -1,    6,  194,   -1,
   14,  194,   -1,  110,  194,   -1,   17,  194,   -1,   96,
  195,   -1,    6,  195,   -1,   14,  195,   -1,  110,  195,
   -1,   17,  195,   -1,   96,  196,   -1,    6,  196,   -1,
   14,  196,   -1,  110,  196,   -1,   17,  196,   -1,   96,
   69,   -1,    6,   69,   -1,   14,   69,   -1,  110,   69,
   -1,   17,   69,   -1,  115,  136,   -1,  125,  135,   -1,
    1,  144,  198,   -1,    6,  144,  198,   -1,    8,  144,
  198,   -1,    9,  144,  198,   -1,   10,  144,  198,   -1,
   14,  144,  198,   -1,   15,  144,  198,   -1,   17,  144,
  198,   -1,   23,  198,   -1,   24,  198,   -1,   25,  198,
   -1,   26,  198,   -1,   27,  198,   -1,   96,  249,   -1,
   38,  249,   -1,   39,  249,   -1,   40,  249,   -1,   41,
  249,   -1,   42,  249,   -1,   96,  144,   -1,    6,  144,
   -1,   14,  144,   -1,  110,  144,   -1,   17,  144,   -1,
  167,  209,   -1,   95,  209,   -1,  208,  198,   -1,    6,
  198,   -1,   14,  198,   -1,  110,  198,   -1,   17,  198,
   -1,  133,  144,   -1,   22,  133,   -1,   28,  133,   -1,
  213,  198,   -1,  216,   33,   -1,  208,  144,  198,   -1,
   97,  144,  198,   -1,   98,  144,  198,   -1,   99,  144,
  198,   -1,  101,  198,   -1,  225,   95,   -1,  166,   95,
   -1,  225,   68,   -1,  166,   68,   -1,  225,   97,   -1,
  166,   97,   -1,  225,   98,   -1,  166,   98,   -1,  225,
   99,   -1,  166,   99,   -1,  225,   65,   -1,  166,   65,
   -1,   70,   96,   -1,  225,   70,   96,   -1,  166,   70,
   96,   -1,  187,  245,   -1,  188,  245,   -1,  189,  245,
   -1,  190,  245,   -1,  191,  245,   -1,  192,  245,   -1,
  193,  245,   -1,  194,  245,   -1,  195,  245,   -1,  196,
  245,   -1,  197,  245,   -1,  198,  245,   -1,  187,  246,
   -1,  188,  246,   -1,  189,  246,   -1,  190,  246,   -1,
  191,  246,   -1,  192,  246,   -1,  193,  246,   -1,  194,
  246,   -1,  195,  246,   -1,  196,  246,   -1,  197,  246,
   -1,  198,  246,   -1,  187,  248,   -1,  188,  248,   -1,
  189,  248,   -1,  190,  248,   -1,  191,  248,   -1,  192,
  248,   -1,  193,  248,   -1,  194,  248,   -1,  195,  248,
   -1,  196,  248,   -1,  197,  248,   -1,  198,  248,   -1,
  187,  211,   -1,  188,  211,   -1,  187,  214,   -1,  188,
  214,   -1,  187,  215,   -1,  188,  215,   -1,  263,   64,
   -1,  187,  212,   -1,  188,  212,   -1,  187,  213,   -1,
  188,  213,   -1,  106,  198,   -1,   22,  144,   -1,   28,
  144,   -1,   64,  199,   -1,  225,   70,   -1,  166,   70,
   -1,  336,   47,   -1,  337,   47,   -1,  338,   47,   -1,
  339,   47,   -1,  187,  216,   -1,  188,  216,   -1,  211,
  218,   -1,  187,  211,  218,   -1,  188,  211,  218,   -1,
  353,   64,   -1,  225,   66,   -1,  166,   66,   -1,  187,
  227,   -1,  188,  227,   -1,  189,  227,   -1,  190,  227,
   -1,  191,  227,   -1,  192,  227,   -1,  193,  227,   -1,
  194,  227,   -1,  195,  227,   -1,  196,  227,   -1,  197,
  227,   -1,  198,  227,   -1,  187,  228,   -1,  188,  228,
   -1,  189,  228,   -1,  190,  228,   -1,  191,  228,   -1,
  192,  228,   -1,  193,  228,   -1,  194,  228,   -1,  195,
  228,   -1,  196,  228,   -1,  197,  228,   -1,  198,  228,
   -1,  187,  226,   -1,  188,  226,   -1,  187,  220,   -1,
  188,  220,   -1,   96,  219,   -1,  187,  221,   -1,  188,
  221,   -1,  187,  222,   -1,  188,  222,   -1,  187,  223,
   -1,  188,  223,   -1,  187,  224,   -1,  188,  224,   -1,
  187,  225,   -1,  188,  225,   -1,  187,  236,   -1,  188,
  236,   -1,  187,  247,   -1,  188,  247,   -1,  189,  247,
   -1,  190,  247,   -1,  191,  247,   -1,  192,  247,   -1,
  193,  247,   -1,  194,  247,   -1,  195,  247,   -1,  196,
  247,   -1,  197,  247,   -1,  198,  247,   -1,  187,  239,
   -1,  188,  239,   -1,  189,  239,   -1,  190,  239,   -1,
  191,  239,   -1,  192,  239,   -1,  193,  239,   -1,  194,
  239,   -1,  195,  239,   -1,  196,  239,   -1,  197,  239,
   -1,  198,  239,   -1,  187,  232,   -1,  188,  232,   -1,
  187,  229,   -1,  188,  229,   -1,  187,  233,   -1,  188,
  233,   -1,  187,  230,   -1,  188,  230,   -1,  187,  231,
   -1,  188,  231,   -1,  187,  234,   -1,  188,  234,   -1,
  391,   83,   -1,   12,   83,   -1,   13,   83,   -1,  392,
   83,   -1,   37,   83,   -1,  216,   79,   -1,
};
#define YYFINAL 46
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 322
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknDocBlockComment",
"tknDocLineComment","tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected",
"tknPrivate","tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma",
"tknEllipsis","tknConstCast","tknStaticCast","tknDynamicCast",
"tknReinterpretCast","tknConst","tknStatic","tknExtern","tknVirtual",
"tknOverride","tknInline","tknExplicit","tknFriend","tknVolatile",
"tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf","tknIfDef",
"tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor","tknWhile","tknDo",
"tknSwitch","tknCase","tknNew","tknDelete","tknReturn","tknBlankLine",
"CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL",
"CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : '+' '+' expr",
"expr : expr '+' '+'",
"expr : '-' '-' expr",
"expr : expr '-' '-'",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr '<' '=' expr",
"expr : expr '>' '=' expr",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '[' expr ']'",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 929 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 2406 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 273 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 2796 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 280 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2802 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 281 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2812 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 286 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2822 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 291 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2828 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 294 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2834 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2840 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 296 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2846 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 297 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2852 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 298 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2858 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2864 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2870 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2876 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2882 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 2888 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 2894 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 2900 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 2906 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2912 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2918 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2924 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2930 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2936 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2942 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2948 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2954 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2960 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2966 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2972 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2978 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2984 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2990 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2996 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 3005 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 3014 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 334 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 3023 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 3032 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 344 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 3041 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 3050 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 354 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 3058 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 357 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 3066 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 362 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 3074 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 3082 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 370 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 3088 "y_tab.c"
break;
case 45:
  if (!yytrial)
#line 371 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 3094 "y_tab.c"
break;
case 46:
#line 374 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3099 "y_tab.c"
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 3106 "y_tab.c"
break;
case 47:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3111 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 3118 "y_tab.c"
break;
case 48:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3123 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 3130 "y_tab.c"
break;
case 49:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3135 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 3142 "y_tab.c"
break;
case 50:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3147 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 3154 "y_tab.c"
break;
case 51:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3159 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 3166 "y_tab.c"
break;
case 52:
#line 400 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3171 "y_tab.c"
  if (!yytrial)
#line 400 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 3175 "y_tab.c"
break;
case 53:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3180 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 3184 "y_tab.c"
break;
case 54:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3189 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 3193 "y_tab.c"
break;
case 55:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3198 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 3202 "y_tab.c"
break;
case 56:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3207 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 3211 "y_tab.c"
break;
case 57:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3216 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 3220 "y_tab.c"
break;
case 58:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3225 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 3229 "y_tab.c"
break;
case 59:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3234 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 3238 "y_tab.c"
break;
case 60:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3243 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 3247 "y_tab.c"
break;
case 61:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3252 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 3256 "y_tab.c"
break;
case 62:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3261 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 3265 "y_tab.c"
break;
case 63:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3270 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 3274 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3280 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3286 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 3292 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3298 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3304 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3310 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3316 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3322 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3328 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3334 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3340 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 3346 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 3352 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 3358 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 3364 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 3370 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 3376 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 448 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 3385 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 3394 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 3402 "y_tab.c"
break;
case 84:
#line 461 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3407 "y_tab.c"
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 3413 "y_tab.c"
break;
case 85:
#line 464 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3418 "y_tab.c"
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 3424 "y_tab.c"
break;
case 86:
#line 467 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3429 "y_tab.c"
  if (!yytrial)
#line 467 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 3435 "y_tab.c"
break;
case 87:
#line 470 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3440 "y_tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 3446 "y_tab.c"
break;
case 88:
#line 474 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3451 "y_tab.c"
  if (!yytrial)
#line 474 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 3457 "y_tab.c"
break;
case 89:
#line 477 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3462 "y_tab.c"
  if (!yytrial)
#line 477 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 3468 "y_tab.c"
break;
case 90:
#line 480 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3473 "y_tab.c"
  if (!yytrial)
#line 480 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 3479 "y_tab.c"
break;
case 91:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3484 "y_tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 3488 "y_tab.c"
break;
case 92:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3493 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 3497 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 3503 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 492 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 3512 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3518 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 499 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3524 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3530 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3536 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 502 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 3542 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 3551 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 3557 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 512 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 3568 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 518 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 3578 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 523 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 3589 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 529 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 3599 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 534 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 3610 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 540 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 3620 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 549 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 3628 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 552 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 3636 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 555 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 3644 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 561 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 3652 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 564 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 3661 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 568 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 3669 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 573 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 3675 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 3681 "y_tab.c"
break;
case 116:
#line 577 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3686 "y_tab.c"
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 3690 "y_tab.c"
break;
case 117:
#line 580 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3695 "y_tab.c"
  if (!yytrial)
#line 580 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 3703 "y_tab.c"
break;
case 118:
#line 587 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3708 "y_tab.c"
  if (!yytrial)
#line 587 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 3715 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 592 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3725 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 597 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 3735 "y_tab.c"
break;
case 121:
#line 604 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3740 "y_tab.c"
  if (!yytrial)
#line 604 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 3744 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 607 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3754 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 612 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 3764 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 619 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 3770 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 620 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 3779 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 3788 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3794 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3800 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 3806 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 3812 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 3818 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 3824 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 3830 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 3836 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 3842 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 3848 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 3854 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3860 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 3866 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3872 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 3878 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 3884 "y_tab.c"
break;
case 143:
#line 652 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 3889 "y_tab.c"
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 3893 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 3899 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 3905 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 3911 "y_tab.c"
break;
case 147:
#line 661 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3916 "y_tab.c"
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 3920 "y_tab.c"
break;
case 148:
#line 667 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3925 "y_tab.c"
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3933 "y_tab.c"
break;
case 149:
#line 673 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3938 "y_tab.c"
break;
case 150:
#line 677 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3943 "y_tab.c"
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3950 "y_tab.c"
break;
case 151:
#line 682 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3955 "y_tab.c"
break;
case 152:
#line 686 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 3960 "y_tab.c"
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 3967 "y_tab.c"
break;
case 153:
#line 694 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 3979 "y_tab.c"
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 3985 "y_tab.c"
break;
case 154:
#line 705 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 3990 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 3998 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 4004 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 4010 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 4016 "y_tab.c"
break;
case 159:
#line 716 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4021 "y_tab.c"
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 4025 "y_tab.c"
break;
case 160:
#line 719 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4030 "y_tab.c"
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4037 "y_tab.c"
break;
case 161:
#line 724 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 4042 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 726 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4051 "y_tab.c"
break;
case 163:
#line 730 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 4056 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 732 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4065 "y_tab.c"
break;
case 165:
#line 739 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 4077 "y_tab.c"
  if (!yytrial)
#line 747 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 4085 "y_tab.c"
break;
case 166:
#line 753 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 4097 "y_tab.c"
  if (!yytrial)
#line 761 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 4105 "y_tab.c"
break;
case 167:
#line 767 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 4117 "y_tab.c"
  if (!yytrial)
#line 775 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 4125 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 782 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 4135 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 4144 "y_tab.c"
break;
case 170:
#line 793 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4149 "y_tab.c"
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 4153 "y_tab.c"
break;
case 171:
#line 796 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4158 "y_tab.c"
  if (!yytrial)
#line 796 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 4162 "y_tab.c"
break;
case 172:
#line 797 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4167 "y_tab.c"
  if (!yytrial)
#line 797 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 4171 "y_tab.c"
break;
case 173:
#line 798 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4176 "y_tab.c"
  if (!yytrial)
#line 798 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 4180 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 801 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 4186 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 802 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 4192 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 805 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 4198 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 806 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 4204 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 809 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 4210 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 810 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 4216 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 811 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 4222 "y_tab.c"
break;
case 181:
#line 814 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4227 "y_tab.c"
  if (!yytrial)
#line 814 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 4231 "y_tab.c"
break;
case 182:
#line 816 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 4241 "y_tab.c"
  if (!yytrial)
#line 822 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 4247 "y_tab.c"
break;
case 183:
#line 828 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 4252 "y_tab.c"
  if (!yytrial)
#line 828 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 4256 "y_tab.c"
break;
case 184:
#line 830 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 4261 "y_tab.c"
  if (!yytrial)
#line 831 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 4274 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 842 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 4280 "y_tab.c"
break;
case 186:
#line 843 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4285 "y_tab.c"
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 4289 "y_tab.c"
break;
case 187:
#line 844 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4294 "y_tab.c"
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 4298 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 847 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 4304 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 4310 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 849 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 4316 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 850 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 4322 "y_tab.c"
break;
case 192:
#line 853 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4327 "y_tab.c"
  if (!yytrial)
#line 853 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 4331 "y_tab.c"
break;
case 193:
#line 854 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4336 "y_tab.c"
  if (!yytrial)
#line 854 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 4340 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 4346 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 858 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 4352 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 859 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 4358 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 4364 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 863 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4370 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4376 "y_tab.c"
break;
case 200:
#line 867 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4381 "y_tab.c"
  if (!yytrial)
#line 867 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 4385 "y_tab.c"
break;
case 201:
#line 868 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4390 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 4394 "y_tab.c"
break;
case 202:
#line 869 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4399 "y_tab.c"
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 4403 "y_tab.c"
break;
case 203:
#line 872 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4408 "y_tab.c"
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 4412 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 875 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 4418 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 4424 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 879 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 4430 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 880 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 4436 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 4442 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 882 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 4448 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 883 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 4454 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 884 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 4460 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 4466 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 886 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 4472 "y_tab.c"
break;
case 214:
  if (!yytrial)
#line 887 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 4478 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 4484 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 4490 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPostIncrement);               }
#line 4496 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 4502 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPostDecrement);               }
#line 4508 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 4514 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 4520 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 4526 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 896 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 4532 "y_tab.c"
break;
case 224:
  if (!yytrial)
#line 897 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 4538 "y_tab.c"
break;
case 225:
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 4544 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 4550 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 900 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 4556 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 901 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 4562 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 902 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLessOrEqual, yyvsp[0].cppExprObj);             }
#line 4568 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 903 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kGreaterOrEqual, yyvsp[0].cppExprObj);          }
#line 4574 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 4580 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 905 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 4586 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 906 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 4592 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 907 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 4598 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 908 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 4604 "y_tab.c"
break;
case 236:
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 4610 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 4616 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 911 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 4622 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 912 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 4628 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 4634 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 4640 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 4646 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 4652 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 4658 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 4664 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 4670 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 4676 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 4682 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 4688 "y_tab.c"
break;
case 250:
#line 925 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4693 "y_tab.c"
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 4697 "y_tab.c"
break;
#line 4699 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
