#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,   30,   40,   40,   41,   42,   43,
   39,   39,   70,   70,   70,   70,   70,   70,   71,   72,
   72,   73,   73,   73,   73,   73,   73,   74,   36,   36,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    4,    4,   11,   11,   11,   11,
   12,   12,   12,   12,    9,    9,    9,    9,   10,   10,
   10,   25,   25,   24,   23,   16,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   14,   14,   14,   63,   63,
   55,   55,   56,   56,   47,   48,    8,   44,   44,   45,
   46,   46,   46,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   22,   22,   22,   18,   18,   18,   18,
   19,   19,   65,   65,   65,   65,   65,   65,   64,   64,
   64,   64,   62,   62,   62,   50,   51,   75,   51,   76,
   51,   51,   49,   77,   49,   49,   57,   57,   57,   53,
   54,   78,   54,   79,   54,   52,   52,   52,   20,   20,
   21,   17,   17,   17,   59,   59,   60,   60,   61,   61,
   61,   28,   28,   80,   27,   27,   66,   66,   66,   67,
   67,   67,   67,   13,   13,   13,   58,   58,   58,   58,
   31,   32,   32,   33,   33,   34,   34,   35,    6,    6,
    1,    1,    1,    1,   68,   68,   68,   29,   69,   69,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   38,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    5,    3,    5,    6,    9,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    2,    2,
    1,    2,    4,    1,    0,    1,    1,    3,    1,    1,
    0,    2,    3,    2,    6,    8,    9,    7,    5,    6,
    4,    2,    2,    3,    6,    3,    4,    3,    6,    5,
    5,    4,    3,    3,    3,    6,    9,    8,    1,    1,
    4,    2,    2,    2,    2,    2,    3,   11,   10,    2,
    9,    8,    2,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    0,    1,    3,    1,    1,    1,    1,
    1,    1,    0,    2,    2,    2,    2,    2,    0,    2,
    2,    3,    0,    1,    1,    2,    5,    0,   11,    0,
   13,    2,    4,    0,    6,    2,    0,    5,    6,    2,
    2,    0,    8,    0,   10,    4,    5,    7,    8,    8,
    2,    2,    2,    3,    0,    1,    1,    2,    0,    1,
    2,    2,    1,    0,    8,    2,    0,    3,    4,    0,
    1,    1,    1,    3,    4,    2,    1,    1,    1,    1,
    4,    1,    3,    1,    1,    2,    2,    3,    1,    1,
    0,    1,    4,    2,    2,    2,    2,    2,    1,    3,
    1,    1,    1,    1,    3,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    4,    3,    4,    4,    7,
    7,    7,    7,    3,    2,    2,    4,    2,    1,    2,
    1,    2,
};
static int yydefred[] = {                                      0,
    0,  261,  262,  263,    0,    0,    0,    0,    0,    0,
  240,    0,   59,   60,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  184,  109,  110,    0,    0,  185,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  264,    3,   28,    8,    9,   12,    0,    0,    0,
    6,    0,    7,    0,    0,   10,    0,    0,   11,   27,
   34,    0,   13,    0,   14,    0,   16,   17,   18,    0,
   19,    0,   20,   21,    0,   22,   23,    0,   24,   25,
    0,   26,    0,    0,    0,    0,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   61,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  138,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  160,  161,  136,  137,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  159,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  237,  238,  239,  236,
    0,    0,    0,    0,    0,    0,    0,    0,   55,    0,
   57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,    0,    0,  217,    0,
    0,    0,    0,    0,  212,  213,    0,  211,    0,   93,
   92,    0,    0,    0,    4,    5,  222,    0,    0,    0,
  226,  123,    0,  192,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  272,  274,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  322,    0,  120,  115,  116,  186,    0,    0,  200,
  201,  112,  113,  114,    0,    0,    0,    0,    0,    0,
    0,  174,  177,  176,  175,  178,    0,    0,    0,    0,
    0,    0,  167,  165,    0,  170,    0,  214,  254,    0,
    0,  117,    0,    0,    0,   81,    0,  249,    0,    0,
    0,  242,    0,  245,    0,    0,    0,    0,    0,  162,
  163,    0,    0,    0,  314,    0,    0,   58,    0,   49,
   50,   51,   52,   53,   54,   56,    0,    0,    0,    0,
    0,    0,   35,    0,  265,    0,    0,    0,    0,    0,
  171,    0,  172,    0,    0,  218,    0,    0,   98,    0,
    0,    0,   94,  255,  256,  257,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  307,    0,    0,    0,   37,    0,    0,    0,    0,    0,
  234,    0,    0,    0,    0,    0,    0,  202,  253,    0,
  193,    0,    0,    0,    0,   81,   91,    0,    0,  247,
  246,  241,    0,    0,    0,    0,    0,    0,  111,  206,
    0,    0,   43,   46,   47,   45,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,  102,    0,
    0,    0,  188,    0,    0,  308,  306,    0,    0,    0,
    0,    0,  235,    0,    0,   97,    0,    0,    0,    0,
    0,  166,    0,    0,   81,   89,    0,    0,    0,    0,
    0,    0,   82,   79,   80,  243,    0,    0,    0,    0,
    0,    0,   36,    0,   38,    0,    0,    0,    0,  190,
    0,  101,    0,    0,    0,    0,    0,  187,  231,  232,
  233,    0,    0,  224,    0,  100,    0,    0,  207,    0,
    0,    0,  221,   95,    0,    0,   81,   90,    0,   83,
   85,    0,    0,    0,    0,    0,    0,   39,   76,    0,
    0,    0,    0,  204,    0,    0,  198,    0,    0,    0,
    0,    0,  106,   99,  195,    0,    0,    0,    0,   88,
    0,    0,  310,  311,  312,  313,  208,    0,    0,  179,
    0,    0,    0,    0,    0,  199,    0,    0,    0,    0,
    0,    0,  203,   86,    0,    0,    0,    0,    0,    0,
    0,  209,  210,  225,  108,    0,  179,    0,   87,   40,
    0,    0,  180,  181,    0,    0,    0,  107,    0,    0,
  119,  182,    0,    0,  205,  189,  118,    0,    0,  191,
};
static int yydgoto[] = {                                      48,
   49,  134,   51,  118,   52,  330,   53,   54,   55,   56,
  513,  449,   57,   58,   59,   60,   61,  314,  372,   62,
   63,  315,   64,   65,   66,  210,   68,   69,   70,   71,
   72,  331,  332,  333,  334,   73,   74,   75,  359,   76,
   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   92,  289,   93,  443,  444,
  504,   94,   95,  618,   96,  492,  542,  236,  212,   97,
   98,   99,  100,  101,  437,  573,  434,  501,  603,  581,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
    0,  -15,    0,    0, 1277,    0,  -53,    0,   23,  166,
  219,  231,  -25, 3370, 3048, 3048, 3048, 3048, 3048, 3089,
 3048, 3135,    0,    0,    0,   39,  665,    0,  826,  258,
  281,  298, 2456, 3048, 2556,  -25,    0,    0,    0, -192,
  -16,    0,    0,    0,    0,    0,    0, 1277,   41,  147,
    0,   -3,    0,  146,  300,    0, 2354,  329,    0,    0,
    0,  257,    0, 5532,    0,    0,    0,    0,    0,  339,
    0,  -34,    0,    0,  502,    0,    0,  -26,    0,    0,
  -46,    0,    0, 1277,   71,  559,    0,    0,    0,    0,
    0,    0, 1277, 1277, 1277,  915,    0,  376,  398,  403,
    0,  424, 1277,    0,    0,  431,  251,  392,    0,    0,
    0, 1160,    0,    0,    0,    0,   71,   71,   71,   71,
 5420, 3048, 3048,  -64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  512,  486,  558,    0,    0,   38,   38,   38,
    0,   38,   38,  567, 5567,  358,    0,    0,    0,    0,
    0,  362,  368,  373,  -67,  380,  391,  395,    0,  400,
    0, 3048, 3048, 3048,  325,    0,  575,    0,    0, 1849,
 5532,    2,  620,  572, 1575,    0,    0, 1277,    0, 1277,
  274,   72, 3048,    0,    0,    0,    0,    0,  426,    0,
    0,  633,  639,  643,    0,    0,    0,  662,   71,  -30,
    0,    0,    0,    0,    0,  438, 3048, 3048, 3048, 3048,
 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048,
 3048, 3048, 3048,    0,    0, 3048, 3048, 3048, 3048, 3048,
 3048, 3048, 3048, 3048, 3048, 3048, 3048, 3048, 2658, 3048,
 3048,    0, 2456,    0,    0,    0,    0,  451,   -8,    0,
    0,    0,    0,    0,  403, 2606,   61,    0, 1277,    0,
  452,    0,    0,    0,    0,    0,   71,    0,  457,  573,
 1277,  658,    0,    0,  195,    0, 1277,    0,    0,  468,
  620,    0,  690, 1277,  353,    0,  959,    0,  485,  508,
   25,    0,  698,    0,  715,  716,  717,  720, 6773,    0,
    0,  742,  744, 3048,    0,  746, 1277,    0,  523,    0,
    0,    0,    0,    0,    0,    0, 5844, 6773,  731, 5870,
  751, 3048,    0, 3048,    0,  539, 2790,  762,    0,    0,
    0,  741,    0,   62,   62,    0,   62, 2759,    0, 6773,
  690,  690,    0,    0,    0,    0,  547,    0, 2919,  551,
    0,    0,    0,    0,    0,    0,    0,    0,  597,  597,
    0,    0, 1085,    0,    0,    0,    0,   38,    0,    0,
    0, 1516, 1516,  597,  597,  597,    0,  333,  333, 1085,
    0,  311, 5905,   38,    0,  774,  564,    0,  764,   76,
    0,  690,  384,  796,  797,    0,  805,    0,    0,    0,
    0,  800,  808,  806,  533,    0,    0, 1277,    9,    0,
    0,    0, 1160, 3048,  813,  814,  817,  818,    0,    0,
    0,  819,    0,    0,    0,    0,    0, 2456, 3048, 2456,
 3048,    0, 6773,  822,  843,  539, -102,    0,    0, 5940,
  808,  808,    0,    0,  764,    0,    0, 3048,  850, 1950,
  313,   17,    0,  808, 2859,    0,    0,  820, 2790,    0,
  853,    0,  828,  681,    0,    0,   48,  546,  879,    0,
  863,  889,    0,    0,    0,    0, 8623, 3048, 3048, 3048,
 3048,  893,    0,  904,    0, 5966,  707,    0,  923,    0,
  718,    0,   71,   71,  721, 6001, 3048,    0,    0,    0,
    0, 1277,  313,    0,  -36,    0, 6036,  491,    0,  931,
  528,  936,    0,    0,  142,  913,    0,    0, 3048,    0,
    0, 6313, 6339, 6374, 6409,  722, 3048,    0,    0,  942,
  556,  707,  944,    0, 1277, 1277,    0, 6435,   62, 1277,
    0, 2961,    0,    0,    0,    0,  927,  -53,  930,    0,
  149, 6773,    0,    0,    0,    0,    0,  949,  951,    0,
  952,    0,  956,  144,  144,    0,   62, 2050,   71, 6470,
  580,  173,    0,    0,  938, 2456,    0,  -43,  962,  655,
  967,    0,    0,    0,    0,   71,    0,    0,    0,    0,
  679,  749,    0,    0,    0,  927,  -53,    0,  -43, 2153,
    0,    0,  686,  188,    0,    0,    0,    0, 2253,    0,
};
static int yyrindex[] = {                                     12,
 5024,    0,    0,    0,  456, 4315,  890,    0,    0,    0,
    0,    0,    0,    0,    0, 4373,    0,    0,    0,    0,
    0,    0, 4671, 3030,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4726,  -75,    0,  553, 6747,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1015,  684,    0,    0,
    0,  553,    0,    0,    0,  987,    0,    0,    0,    0,
    0,    0,    0,    0,  255,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3030, 2083,    0,    0,    0,    0,
    0,  396,    0,    0,    0,    0,  -13, 2464,    0,  897,
  553,    0,    0,    0, 3439,  898,    0,    0, 3498, 3565,
 3852,    0, 3911, 3970,  -75,    0, 3030, 3030, 3030, 3030,
    0,    0,    0, 4448,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   69,  130,  105,  138,  323,
 5496,  788, 1010,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  957,    0,    0, 1164,    0, 1275, 1857,    0,
   14,    0, 1357, 3030,    0,    0,  456,    0,    0,    0,
    0,  646,    0,  801,    0,    0,  801,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  714, 3030,    0,
    0,    0,  971,    0,    0, 2083,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  825,    0,    0, 9260,    0, 2588,
    0,    0,    0,    0,    0,    0, 3030,  291,    0, 2136,
  687,  725,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -19,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,    0,    0,    0,    0,    0,   -6,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1076,    0,
    0,    0,    0,    0,    0,    0,    0,  155,    0,    0,
    0,    0,    0,    0,    0,  989,    0,    0, 5460, 4257,
    0,    0,    0,  779,  783,    0,  821,    0,    0,  423,
   28,   28,    0,    0,    0,    0,    0, 1357,    0,    0,
 2072, 2238, 2261, 2577, 2766, 2834, 3069, 3868, 3232, 3983,
 4273, 4328, 4386, 4952, 5016, 5092, 5109, 2612, 5117, 5121,
 5128, 1474, 1527, 4784, 4793, 4819, 5152, 3195, 3323, 5154,
    0,    0,    0, 2934,    0,    0,    0,  -75,  337,    0,
    0, 4666,  646,    0,    0, 1357,    0,    0,    0,  266,
    0,    0,  776, 4830,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5156,    0,    0,    0,    0,    0,    0,    0,  957,    0,
    0, 5178,   -1,    0,    0,  989,    0,    0,    0,    0,
 1018, 1018,    0,   -9,  292,    0,    0,    0,    0,    0,
 3658,    0,    0, 4864,    0,    0,  -13,    0,    0,  -13,
    0,    0, 4917,    0,    0,    0,    0,    0,  151,   31,
    0,    0,    0,    0,    0,    0,  990,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  994,  -13,    0,    0,
    0,    0, 3030, 3030,    0,    0,    0,    0,    0,    0,
    0,    0, 3658,    0,  815,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  996,    0,    0,    0,
    0,  994,    0,    0,    0,    0,    0,    0,  295,    0,
  -75,    0,    0,    0,    0,  -13,  255,    0,    0,    0,
    0,  228,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -13,    0,  462,  462,    0,  328,    0,  815,    0,
    0,    0,    0,    0,    0,    0,  -13,  -20,    0,    0,
    0,    0,    0,    0,    0,  815,    0,  -75,    0,    0,
    0,    0,    0,    0,  -13,  255,    0,    0,    8,    0,
    0,    0,    0,    0,    0,    0,    0,  -75,    0,    0,
};
static int yycindex[] = {                                    478,
  230,    0,    0,    0, 1777, 3717,    0, 4063, 4189, 4374,
    0,    0,    0,    0,    0, 4517,    0,    0,    0,    0,
    0,    0,   46,    0,    0,    0,    0,    0,    0,    0,
    0, 4536,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3255,    0,    0,  170, 1189,    0, 1880,  165,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3784,    0,    0,    0,
    0, 2283,    0,    0,    0,  708,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4628,    0,    0,  782,    0,    0,    0,    0,
    0,   35,    0,    0,    0,    0, 1985,  246,    0,  785,
 2486,    0,    0,    0,  101,    0,    0,    0,  107,  118,
  160,    0,  164,  186, 1343,    0,    0,    0,    0,    0,
    0,    0,    0,  980, 6808,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6843, 6869, 5342, 5377, 8438,
 1003, 8471, 8504,    0,    0,    0,    0,    0,    0,    0,
 4994,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6904,    0, 6939, 7216, 3815,
    0,    0,  787,    0,    0,    0, 2688,    0,    0,    0,
    0,    0,    0,  172,    0,    0,  200,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -210,    0,    0,
    0,    0,  361,    0,  789,  792,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8840,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,    0,    0,  235,    0,   20,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  293,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  793,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  677,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  791,  286,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  804,    0,    0,
 7242, 7277, 7312, 7338, 7373, 7408, 7685, 7711, 8531, 8568,
 7746, 7781, 8658, 7807, 7842, 7877, 8154, 8693, 8180, 8215,
 8250, 8726, 8759, 8788, 8837, 8878, 8276, 8913, 8948, 8981,
    0,    0,    0, 9014,    0,    0,    0, 1443,    0,    0,
    0,    0,    0,    0,    0,  816,    0,    0,    0, 2873,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8311,    0,    0,    0,    0,    0,    0, 9066,    0, 9095,
    0, 8346,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  811,    0,    0,    0,    0,    0, 9163,
    0,    0,    0,    0,    0,    0, 3177,    0,    0, 3371,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  410,
    0,    0,    0,    0,    0,    0, 1000,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5032,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1545,    0,    0,    0,    0, 9199,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9335,    0,    0,    0,    0,    0, 9177,    0,    0,
    0,    0,    0,    0,    0, 9238, 9366,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1646,    0,    0,
    0,    0,    0,    0, 9379,    0,    0,    0,    0, 9274,
    0,    0,    0,    0,    0,    0,    0, 1747, 9305,    0,
};
static int yygindex[] = {                                      0,
   37,    1,  -90, -490, -346,    0,  -38,    0,    0,    0,
  555, -389, 1033,   30,    5,  -93,    0,  638,    0,    0,
    0, -448,    0,    0,    0,    3, 1007,    0,    0,  -17,
    0,    0,  632,    0,    0,  179,  648,    0, -449,    0,
    0,    0,    0,   10,    0, 1014,    0,    0, 1021,    0,
 1022,    0,    0,    0,    0,    0, -560,   27,   58, 1044,
   73,   29,    0,  469,  406,    0,  557,    0,  827,    0,
    0,    0,  193,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 9701
static int yytable[] = {                                     126,
   50,  108,   67,  298,  205,  109,  115,   31,  119,  120,
  121,    2,  293,  313,  112,  123,  124,  632,  215,  524,
  475,  220,  323,  531,  285,  219,  612,  164,  235,  217,
  164,  329,  290,  113,  259,  427,  570,  259,  122,  260,
  227,  111,  260,   50,  122,  364,  618,   50,  548,    2,
   61,  551,  510,  175,  582,  228,  507,  259,  222, 1690,
  543,  184, 1677,  191,  286,  215,  121,   50,  453,  125,
  291, 1680,  240,  294,   84,  644,  125,  279,  213,  571,
  215,  601,  127,  377,  224,  380,  452,  374,  125,  216,
  371,  510,  320,  297,  108,  320,  125,  133,  245,  225,
  132,  223,  122,  119,  120,  121,  123,  108,  239,  271,
  320,  312,  271,  108,  428,  555,  316,  598,  259,  431,
  217,  217,  108,  260,  299,   50,  365,  271,  280,  296,
  121,  217,  307,  512,  493,  217,  311,  611,  259,  544,
  321,  266,  266,  111,  320,  266,  266,  266,  266,  266,
  266,  266,  550,  620,  530,   84,  335,  336,  337,  338,
  627,  271,  378,  266,  186,  266,  636,  591,  631,  244,
  273,  235,  556,  273,  269,  269,  320,  645,  269,  269,
  269,  269,  269,  269,  269,  510,  643,  244,  273,  229,
  351,  297,  510,  271,   77,   42,  269,  266,  269,    2,
    2,    2,  505,  217,  230,  226,  505,  488,  317,  491,
   50,  485,  352,   42,  482,  370,  427,  216,  374,  654,
  375,  377,  273,  663,  503,  128,  373,  347,  266,  266,
  269,  427,    2,    3,    4,  441,    6,  215,  440,  103,
  104,  105,  389,  368,  425,  672,  371,   15,   16,  367,
  379,  216,  381,  111,  273,  382,   18,   19,   20,   21,
   22,  269,  269,   23,  131,  509,  589,  292,  388,  214,
  633,   78,   61,  615,  634,   77,  618,   33,  129,   13,
   14,  390,  307,   50,  215,   38,    2,    2,    2,  215,
  130,  218,  215,  215,  215,  628,  430,  202,  197,  433,
  215,  215,  362,  251,  509,  251,  251,  570,  320,  215,
  648,  222,   44,   45,   46,  376,  570,  370,   13,   14,
  203,  116,  320,  320,  445,  271,  432,  119,   61,  117,
  188,  511,   61,  317,  317,  227,  436,  204,  228,  271,
  271,  215,  216,  216,  317, 1717,  313,  430,  317,  215,
   61,  486,   78,  216,  364,  365,  368,  216,  231,  270,
  270,  266,  329,  270,  270,  270,  270,  270,  270,  270,
  511,  229,  279,  621,  320,  266,  266,  197,  281,  630,
  227,  270,  624,  270,   33,   33,  273,  237,  633,  370,
  639,  271,   38,   38,  269,   61,   61,  284,  509,  642,
  273,  273,  474,  313, 1683,  509,  313,   77,  269,  269,
  448,  447,   13,   14,  227,  270,  317,  228, 1687,   13,
   14,   77,   77,  280,  367,  216,  473,  266,   50,  523,
  490,  525,  648,   61,  313,  217,  657,   61,  481,  482,
  108,  651,  320,  217,  312,  660,  270,  270,  508,  316,
  229,  235,  273,  108,  214,   61,  318,   33,  666,  227,
  269,  496,  618,   96,  511,   38,   96,  669,   50,  311,
   50,  511,  499,   77,  495,  446,  111,  246, 1680,  476,
  479,   96,  322, 1683,   78, 1671,  180, 1680,  324,  494,
   50,  184,  313, 1674,  188,  192,  196,  108,   78,   78,
  108,  312,  200,  205,  312,  183,  316,  325,  313,  316,
  115,  209,  529, 1671,  326,  108,  214,  118,  612,  105,
  183, 1674,  102,  313,   11,   12,  311,  615,  108,  311,
  114,  585,  312,  111,  440,    6,  111,  316,  103,  104,
  105,  313,  579,  217,  220,  223,   15,   16, 1671,  618,
   78,  226,  340,  533,  534,   18, 1674,  311, 1711,  288,
  287,  575,  576,   61,  111, 1680,  545, 1714,  587,  235,
  613,  440,   61,  583, 1680,  604,  605,  630,  341,  270,
  607,   50,  251,  608,  251,  251,  108,  539,  540,  541,
  312,  506,  217,  270,  270,  316,  600,  342,   61,  440,
  177,  235,  108,  111,  558,  217,  312,  344,   50,   61,
  235,  316,  320,  439,  346,  311,   50,  108,   61,  645,
  627,  312,  111,  440,  349,  348,  316,  514,   50,  350,
  640,  311,  622,  623,  276,  108,  279,  625,  111,  312,
   50,  515,  281,  353,  316,  270,  311,  354,   50,   50,
  649,  355,  254,  111,  638,  505,  317,  254,  361,  366,
  254,  254,  254,  356,  311,  216, 4763,  362,  557,  254,
  135,  111,  176,  177,  178,  179,  180,  182,  183,  185,
 4766, 4769,  383,  223,  301,  514,  183,  280,  514,  183,
  384,  206,  208,  209,  211,  636,  385,   33,  440,  515,
  386,  107,  515,   61,  183,   38,  183,  426,  435,  254,
  254,  254,  254,  438,  254,  254,  223,  254,  223,  641,
  277,  223,  440,  223,  442,  223,  647,  169,  223,  440,
  169,  219, 4772,  514,    0,    6,    9,   12,   15,   18,
   24,  450,   27,   33,   39,   45,   48,  515,   51,   54,
   57,   63,  302,  303,  304,   69,  305,  306,  454,   72,
   78,   81,   84,   87,  451,  168,   90,   93,  168,  514,
  251,  251,  251,   61,  251,  251,  455,  456,  457,  182,
  339,  458,  459,  515,  460,  462,  467,   96,   99,  469,
  471,  121,  126,  131,  136,  110,  140,  140,  145,  148,
  153,  476,  478,  483,  156,  317,  223,  485,  223,  223,
  159,  162,  165,  488,  216,  168,  171,  174,  317,  105,
  489,  491,  105,  104,  267,  267,  104,  216,  267,  267,
  267,  267,  267,  267,  267,  497,  498,  105,  183,  105,
  439,  104,  183,  104,  500,  503,  267,  376,  267,  357,
  358,  360,  518,  519,  183,  183,  520,  521,  183,  522,
  549,  103,   61,  527,  103,  553,   61,  173,  173,  173,
  380,  173,  173,  302,  303,  304,  183,  305,  306,  103,
  267,  103,  528,   61,   61,   33,  302,  303,  304,  537,
  305,  306,  552,   38,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  267,  267,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,  418,  419,  420,  339,  423,  424,  187,
  188,  189,   11, 1696, 1699, 1702, 1705,  554,  252,  559,
  223,  223,  223,  223,  223,  223,  223,  561,  223,  223,
  223,  223,  223,  566,  223,  223,  223,  223,  223,  223,
  223,  223,  567,  569,  572,  223,  223,  223,  223,  223,
  586,  590,  223,  223,  574,  252,  588,  530,  252,  252,
  252,  597,  599,  602,  288,   37,   15,  252,  614,  616,
  617,  461,  619,  223,  223,  621,  629,  223,  223,  223,
  223,  635,  223,  223,  223,  223,  223,  637,  642,  472,
  223,  473,   75,  223,    1,   41,  223,  223,  223,   15,
   76,  223,  223,  223,   15,  480,   15,  252,   15,  196,
  251,   15,  219,  248,   75,  252,   41,  541,  568,  503,
  309,  618, 1206, 1668,  267, 1668,  268,  268,  568, 1693,
  268,  268,  268,  268,  268,  268,  268,  183,  267,  267,
 1668, 4775,  183, 1708,  560,  183,  183,  183,  268,  190,
  268,  183, 1668,  183,  183,   44,  183,  502,  241,  183,
  183,  183,  183, 4760,  516,  242,  252,  183,  183,  252,
  252,  252,  243,  244,  221,  639,  183,    0,  252,  580,
    0,  517,  268,    0,  183,  422,  192,    0,   44,   15,
  267,   15,   15,   44,    0,   44,  358,   44,  526,    0,
   44,  274,  276,    0,  279,    0,  272,  270,    0,  271,
  281,  273,   61,  268,  268,  536,    0,    0,  252,  252,
  252,  252,  547,  252,  252,  278,  252,    0,    0,  193,
  194,  195,  196,  197,  198,  199,  200,  201,  252,    0,
    0,  252,  252,  252,    0,  562,  563,  564,  565,  252,
  252,  308,    0,    0,    0,  280,    6,    0,  252,  103,
  104,  105,    0,    0,  578,    0,  252,   15,   16,  196,
  197,  198,  199,  200,  201,    0,   18,    0,   44,    0,
   44,   44,    0,    0,  315,    0,  592,  315,  277,    0,
  252,  252,  252,  252,  358,  252,  252,    0,  252,    0,
    6,  115,  315,  103,  104,  105,  108,    0,  118,  610,
  105,   15,   16,  102,    0,    0,    0,    0,    0,    0,
   18,    0,    0,   15,   15,   15,   15,   15,   15,   15,
    0,   15,   15,   15,   15,   15,  315,   15,   15,   15,
   15,   15,   15,   15,   15,    0,  268,    0,   15,   15,
   15,   15,   15,    0,  219,   15,   15,    0,    0,  219,
  268,  268,  219,  219,  219,    0,    0,    0,  315,    0,
  219,  219,    0,    0,    0,    0,   15,   15,    0,  219,
   15,   15,   15,   15,    0,   15,   15,   15,   15,   15,
    0,  177,    0,   15,  111,  316,    0,    0,  316,   15,
   15,   15,    0,    0,   15,   15,   15,    0,    0,    0,
    0,  219,  268,  316,    0,    0,   44,   44,   44,  219,
   44,   44,   44,   44,   44,    0,   44,   44,   44,   44,
   44,   44,   44,   44,    0,    0,    0,   44,   44,   44,
   44,   44,    0,    0,   44,   44,    0,  316,    0,    0,
    0,    0,    0,    0,    0,  115,    0,    0,    0,    0,
  108,    0,  118,    0,  105,   44,   44,  102,    0,   44,
   44,   44,   44,    0,   44,   44,   44,   44,   44,  316,
    0,    0,   44,    0,    0,   44,    0,    0,   44,   44,
   44,    0,    0,   44,   44,   44,  114,    0,    0,    0,
  315,    6,    0,    0,  327,  104,  105,    0,    0,  328,
    0,    0,   15,   16,  315,  315,    0,    0,    0,    0,
    0,   18,    0,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,  177,   69,    0,  111,    0,
   72,   78,   81,   84,   87,  115,    0,   90,   93,    0,
  108,    0,  118,    0,  105,    0,  315,  102,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   96,   99,
    0,    0,  121,  126,  131,  136,    0,  140,  140,  145,
  148,  153,    0,    0,  275,  156,  275,  275,  275,    0,
    0,  159,  162,  165,    0,    0,  168,  171,  174,    0,
    0,  316,  275,  114,  275,    0,    0,    0,    6,    0,
    0,  103,  104,  105,    0,  316,  316,    0,    0,   15,
   16,    0,  274,  276,    0,  279,    0,  272,   18,    0,
    0,  281,  273,    0,    0,  177,  275,  276,  111,  276,
  276,  276,    0,    0,    0,    0,    0,  115,    0,    0,
    0,    0,  108,    0,  118,  276,  105,  276,    0,  102,
    0,    0,    0,    0,    0,    0,    0,  316,  275,    0,
    6,    9,   12,   15,   18,   24,  280,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,  251,  276,
   69,  251,  251,  251,   72,   78,   81,   84,   87,  251,
  251,   90,   93,    0,    0,    0,    0,    0,  251,  277,
    0,    0,    0,    0,    0,    0,  251,    0,    0,    0,
    0,  276,   96,   99,    0,    0,  121,  126,  131,  136,
    0,  140,  140,  145,  148,  153,    0,  177,    0,  156,
  111,    0,    0,    0,    0,  159,  162,  165,  115,    0,
  168,  171,  174,  108,    0,  118,    0,  105,    0,    0,
  102,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,    0,
  275,   90,   93,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  275,  275,    0,    0,    0,    0,
    0,    0,   96,   99,    0,    0,  121,  126,  131,  136,
    0,  140,  140,  145,  148,  153,    0,    0,  177,  156,
    0,  111,    0,    0,    0,  159,  162,  165,    0,  115,
  168,  171,  174,  276,  108,    0,  118,    0,  105,    0,
    0,  102,    0,    0,    0,    0,  275,  276,  276,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,  369,    0,   90,   93,    0,    6,    0,    0,  103,
  104,  105,    0,    0,    0,    0,    0,   15,   16,  276,
    0,    0,    0,    0,   96,   99,   18,    0,  121,  126,
  131,  136,    0,  140,  140,  145,  148,  153,    0,  177,
    0,  156,  111,    0,    0,    0,    0,  159,  162,  165,
    0,   31,  168,  171,  174,    0,   29,    0,   32,    0,
   28,    0,    0,   27,    0,    0,    0,  318,    0,    0,
  318,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,  318,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,    0,    0,   90,   93,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  318,
    0,    0,    0,    0,    0,   96,   99,    0,    0,  121,
  126,  131,  136,    0,  140,  140,  145,  148,  153,    0,
    0,   47,  156,  363,    0,    0,    0,    0,  159,  162,
  165,  318,   31,  168,  171,  174,    0,   29,    0,   32,
    0,   28,    0,    0,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,  229,    0,   90,   93,    0,  232,    0,
    0,  232,  232,  232,    0,    0,    0,    0,    0,  232,
  232,    0,    0,    0,    0,    0,   96,   99,  232,    0,
  121,  126,  131,  136,    0,  140,  140,  145,  148,  153,
    0,    0,   47,  156,  538,    0,    0,    0,    0,  159,
  162,  165,   31,    0,  168,  171,  174,   29,    0,   32,
  236,   28,    0,    0,   27,    0,    0,    0,  239,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
    0,    7,  286,  318,    0,  286,   11,   12,    0,   13,
   14,    0,    0,  232,  233,  234,   17,  318,  318,    0,
  286,   19,   20,   21,   22,    0,  493,   23,   24,    0,
    0,  493,    0,    0,  493,  493,  493,    0,    0,    0,
    0,    0,  493,  493,    0,    0,    0,    0,   25,   26,
    0,  493,    0,    0,  286,    0,    0,    0,    0,   37,
    0,   39,   47,   61,  624,   40,    0,   61,    0,  318,
    0,   41,   42,   43,    0,   31,   44,   45,   46,    0,
   29,    0,   32,  497,   28,   61,  286,   27,    0,    0,
    0,  500,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  232,  233,  234,   17,    0,    0,
    0,    0,   19,   20,   21,   22,    0,    0,   23,   24,
    0,  574,    0,    0,    0,    0,  578,    0,    0,  582,
  586,  590,    0,    0,    0,    0,    0,  594,  598,   25,
   26,    0,    0,    0,    0,    0,  602,    0,    0,    0,
   37,    0,   39,    0,    0,   47,   40,  646,  287,    0,
    0,  287,   41,   42,   43,   31,    0,   44,   45,   46,
   29,    0,   32,    0,   28,    0,  287,   27,  236,  606,
  609,  288,    0,    0,  288,    0,  239,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,  288,
   13,   14,    0,    0,  232,  233,  234,   17,  286,    0,
  287,    0,   19,   20,   21,   22,    0,    0,   23,   24,
    0,    0,  286,  286,  251,    0,    0,  251,  251,  251,
    0,    0,    0,  288,    0,  251,  251,    0,    0,   25,
   26,    0,  287,    0,  251,    0,    0,    0,    0,    0,
   37,    0,   39,    0,    0,   47,   40,  650,    0,    0,
    0,    0,   41,   42,   43,  288,   31,   44,   45,   46,
    0,   29,    0,   32,  286,   28,  251,  252,   27,    0,
  252,  252,  252,    0,  251,    0,    0,    0,    0,  252,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,    0,   13,   14,    0,    0,  232,  233,  234,
   17,    0,    0,    0,    0,   19,   20,   21,   22,    0,
    0,   23,   24,   61,    0,    0,    0,    0,    0,  252,
  252,  252,  252,    0,  252,  252,    0,  252,    0,    0,
    0,    0,   25,   26,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   39,   47,    0,    0,   40,
    0,    0,    0,    0,    0,   41,   42,   43,   31,    0,
   44,   45,   46,   29,  287,   32,    0,   28,    0,    0,
   27,   74,    0,   74,   74,   74,    0,   74,  287,  287,
    2,    3,    4,    5,    0,    7,    0,  288,    0,    0,
   11,   12,    0,   13,   14,   74,    0,  232,  233,  234,
   17,  288,  288,    0,    0,   19,   20,   21,   22,  509,
    0,   23,   24,    0,  513,    0,    0,  517,  521,  525,
    0,    0,    0,    0,   74,  529,  533,    0,    0,    0,
  287,    0,   25,   26,  537,    0,    0,    0,    0,    0,
    0,    0,    0,   37,    0,   39,    0,    0,   47,   40,
    0,    0,    0,  288,    0,   41,   42,   43,   31,    0,
   44,   45,   46,   29,    0,   32,  465,   28,    0,    0,
   27,    0,    0,    0,  465,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,  289,    0,    0,
  289,   11,   12,    0,   13,   14,    0,    0,  232,  233,
  234,   17,    0,    0,    0,  289,   19,   20,   21,   22,
    0,    0,   23,   24,    0,    0,  207,    0,  304,  304,
    0,    0,  304,  304,  304,  304,  304,  304,  304,    0,
    0,    0,    0,   25,   26,    0,    0,    0,    0,  289,
  304,    0,  304,    0,   37,    0,   39,    0,  133,    0,
   40,  132,    0,    0,    0,    0,   41,   42,   43,    0,
   31,   44,   45,   46,    0,   29,    0,   32,  421,   28,
    0,  289,   27,    0,  304,    0,    0,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
   74,    0,    0,   11,   12,   74,   13,   14,   74,   74,
   74,    0,    0,   17,    0,  304,  304,   74,   19,   20,
   21,   22,  493,    0,   23,   24,    0,  493,    0,    0,
  493,  493,  493,   74,    0,    0,    0,    0,  493,  493,
    0,    0,    0,    0,    0,   25,   26,  493,    0,    0,
    0,   74,    0,    0,    0,    0,   37,   74,   39,    0,
  133,    0,   40,  132,    0,   74,    0,    0,   41,   42,
   43,   31,    0,   44,   45,   46,   29,    0,   32,  497,
   28,    0,    0,   27,    0,    0,  290,  500,    0,  290,
    0,    0,  114,    2,    3,    4,    0,    6,    0,    0,
  103,  104,  105,    0,  290,    0,    0,    0,   15,   16,
    0,    0,    0,  289,    0,    0,    0,   18,   19,   20,
   21,   22,    0,    0,   23,  131,    0,  289,  289,  252,
    0,  479,  252,  252,  252,    0,    0,    0,  290,    0,
  252,  252,  429,    0,    0,   25,   26,    6,  304,  252,
  103,  104,  105,    0,  291,    0,    0,  291,   15,   16,
    0,  133,  304,  304,  132,    0,    0,   18,    0,    0,
  290,   31,  291,   44,   45,   46,   29,    0,   32,  289,
   28,  252,    0,   27,    0,    0,    0,    0,    0,  252,
    0,    0,    0,    0,  114,    2,    3,    4,    0,    6,
    0,    0,  103,  104,  105,    0,  291,    0,    0,    0,
   15,   16,    0,    0,  304,    0,    0,    0,    0,   18,
   19,   20,   21,   22,  229,    0,   23,  131,    0,  232,
    0,  546,  232,  232,  232,    0,    0,    0,  291,    0,
  232,  232,    0,    0,    0,    0,    0,   25,   26,  232,
  303,  303,    0,    0,  303,  303,  303,  303,  303,  303,
  303,  133,    0,    0,  132,    0,    0,    0,    0,    0,
    0,    0,  303,   31,  303,   44,   45,   46,   29,    0,
   32,  236,   28,    0,    0,   27,    0,    0,    0,  239,
    0,    0,    0,    0,    0,  114,    2,    3,    4,    0,
    6,    0,  290,  103,  104,  105,  303,    0,    0,    0,
    0,   15,   16,    0,    0,    0,  290,  290,    0,    0,
   18,   19,   20,   21,   22,    0,  114,   23,  131,    0,
    0,    6,    0,  609,  103,  104,  105,  303,  303,    0,
    0,    0,   15,   16,    0,    0,    0,    0,   25,   26,
    0,   18,    0,    0,    0,    0,    0,    0,    0,  131,
   31,    0,    0,  133,    0,   29,  132,   32,  290,   28,
  291,    0,   27,    0,    0,    0,   44,   45,   46,    0,
    0,    0,    0,    0,  291,  291,    0,    0,    0,  292,
    0,    0,  292,    0,    0,  114,    2,    3,    4,    0,
    6,   31,    0,  103,  104,  105,   29,  292,   32, 4546,
   28,   15,   16,   27,  578,    0,    0,  582,  586,  590,
   18,   19,   20,   21,   22,  594,  598,   23,  131,    0,
    0,    0,    0,    0,  602,    0,  291,    0,    0,    0,
    0,  292,    0,    0,    0,    0,    0,   31,   25,   26,
  133,    0,   29,  132,   32,  484,   28,    0,    0,   27,
    6,    0,    0,  103,  104,  105,  236,  606,  609,    0,
  303,   15,   16,  292,  239,    0,   44,   45,   46,    0,
   18,    0,    0,    0,  303,  303,    0,    0,    0,    0,
    0,  133,    0,    0,  132,    0,    0,  114,    2,    3,
    4,    0,    6,    0,    0,  103,  104,  105,    0,    0,
    0,  280,  280,   15,   16,  280,  280,  280,  280,  280,
    0,  280,   18,   19,   20,   21,   22,    0,    0,   23,
  131,    0,    0,  280,    0,  280,  303,  133,    0,    0,
  132,    0,    0,    0,    0,    0,    0,    0,  294,    0,
   25,   26,  294,  294,  294,  294,  294,    0,  294,    0,
    0,    0,    0,    0,    0,    0,  183,  280,    0,    0,
  294,  183,  294,    0,  183,  183,  183,    0,   44,   45,
   46,    0,  183,  183,  114,    2,    3,    4,    0,    6,
    0,  183,  103,  104,  105,    0,    0,    0,  280,  280,
   15,   16,    0,    0,  294,  292,    0,    0,    0,   18,
   19,   20,   21,   22,    0,    0,   23,  131,    0,  292,
  292,    0,    0,    0,    0,  181,    2,    3,    4,    0,
    6,    0,    0,  103,  104,  105,  294,   25,   26,  281,
  281,   15,   16,  281,  281,  281,  281,  281,    0,  281,
   18,   19,   20,   21,   22,    0,    0,   23,  131,    0,
  447,  281,    0,  281,    0,   44,   45,   46,    0,    0,
    0,  292,    2,    3,    4,    0,    0,    0,   25,   26,
    0,    0,  170,    0,    0,    0,  165,  167,    0,  173,
    0,  163,  161,  172,  162,  281,  164,   19,   20,   21,
   22,    0,    0,   23,  131,    0,   44,   45,   46,  159,
  171,  160,    0, 4546,    0,    0,    0,    0,  578,    0,
    0,  582,  586,  590,   25,   26,  281,  281,   33,  594,
  598,  280,    0,    0,    0,    0,   38,    0,  602,    0,
  174,    0,    0,  166,    0,  280,  280,    0,    0,    0,
    0,    0,   44,   45,   46,   65,   65,    0,   65,   65,
   65,   65,   65,   65,   65,   65,    0,    0,  294,    0,
  236,  606,  609,  168,    0,  169,    0,   65,  239,   65,
   65,    0,  294,  294,    0,    0,    0,    0,    0,    0,
    0,  407,    0,    0,    0,    0,  412,  280,    0,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,   65,
    0,   65,   65,    0,   68,   68,  442,   68,   68,   68,
   68,   68,   68,   68,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  294,    0,   68,    0,   68,   68,
    0,   65,   65,   65,    0,    0,    0,    0,  450,  454,
  458,  462,    0,  465,  465,    0,  469,    0,    0,  281,
    0,    0,    0,    0,    0,    0,    0,    0,   68,    0,
   68,   68,    0,  281,  281,    0,    0,    0,    0,    0,
    0,   69,   69,    0,   69,   69,   69,   69,   69,   69,
   69,   69,    0,    0,    0,    0,    0,    0,    0,    0,
   68,   68,   68,   69,    0,   69,   69, 4546,    0,    0,
    0,    0,  578,    0,    0,  582,  586,  590,    0,    0,
    0,    0,    0,  594,  598,  281,    0,    0,    0,    0,
    0,    0,  602,    0,    0,   69,    0,   69,   69,    0,
  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,   33,  236,  606,  609,   69,   69,   69,
    0,   38,  239,    0,    0,   65,    0,    0,    0,    0,
   65,    0,    0,   65,   65,   65,    0,    0,    0,   65,
   65,    0,   65,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,    0,   65,   65,
   65,   65,   65,    0,   68,    0,    0,    0,    0,   68,
   65,   65,   68,   68,   68,    0,    0,    0,   68,   68,
    0,   68,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,    0,   68,   68,   68,
   68,   68,    0,    0,    0,    0,    0,    0,    0,   68,
   68,   69,    0,    0,    0,    0,   69,    0,    0,   69,
   69,   69,    0,    0,    0,   69,   69,    0,   69,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,    0,   69,   69,   69,   69,   69,    0,
    0,    0,    0,    0,    0,    0,   69,   69,   70,   70,
    0,   70,   70,   70,   70,   70,   70,   70,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  293,  447,
   70,  293,   70,   70,  230,    0,    0,    0,    0,  230,
    0,    0,  230,  230,  230,    0,  293,    0,    0,    0,
  230,  230,    0,    0,    0,    0,    0,    0,    0,  230,
  447,    0,   70,    0,   70,   70,    0,   62,   62,    0,
   62,   62,   62,   62,   62,   62,   62,   62,    0,    0,
  293,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,   62,   62,  242,   70,   70,   70,    0,  245,    0,
    0,  248,  251,  254,    0,    0,    0,    0,    0,  257,
  260,    0,  293,    0,    0,    0,    0,    0,  263,    0,
    0,   62,    0,   62,   62,    0,   67,   67,    0,   67,
   67,   67,   67,   67,   67,   67,   67,    0,    0,  295,
    0,    0,    0,  295,  295,  295,  295,  295,   67,  295,
   67,   67,    0,   62,   62,   62,    0,    0,    0,    0,
  407,  295,    0,  295,    0,  412,    0,    0,  417,  422,
  427,    0,    0,    0,    0,    0,  432,  437,    0,    0,
   67,    0,   67,   67,    0,  442,    0,    0,    0,    0,
    0,  407,    0,    0,    0,  295,  412,    0,    0,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,    0,
    0,    0,   67,   67,   67,    0,  442,  450,  454,  458,
  462,    0,  465,  465,    0,  469,    0,  295,   70,    0,
    0,    0,    0,   70,    0,    0,   70,   70,   70,    0,
    0,    0,   70,   70,  293,   70,    0,    0,  450,  454,
  458,  462,    0,  465,  465,    0,  469,    0,  293,  293,
    0,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
    0,   70,   70,   70,   70,   70,    0,   62,    0,    0,
    0,    0,   62,   70,   70,   62,   62,   62,    0,    0,
    0,   62,   62,    0,   62,    0,    0,    0,    0,    0,
  293,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
   62,   62,   62,   62,   62,    0,   67,    0,    0,    0,
    0,   67,   62,   62,   67,   67,   67,    0,    0,  295,
   67,   67,    0,   67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  295,  295,    0,    0,    0,    0,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
   67,   67,   67,   67,    0,    0,    0,    0,    0,    0,
    0,   67,   67,   63,   63,    0,   63,   63,   63,   63,
   63,   63,   63,   63,    0,  295,    0,    0,    0,    0,
    0,    0,    0,  296,    0,   63,  296,   63,   63,  266,
    0,    0,    0,    0,  269,    0,    0,  272,  275,  278,
    0,  296,    0,    0,    0,  281,  284,    0,    0,    0,
    0,    0,    0,    0,  287,    0,    0,   63,    0,   63,
   63,   64,   64,    0,   64,   64,   64,   64,   64,   64,
   64,   64,    0,    0,    0,  296,    0,    0,  297,    0,
    0,  297,    0,   64,   64,   64,   64,    0,    0,   63,
   63,   63,    0,    0,    0,    0,  297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  296,    0,    0,
    0,    0,    0,    0,    0,   64,    0,   64,   64,   66,
   66,    0,   66,   66,   66,   66,   66,   66,   66,   66,
  297,    0,    0,    0,    0,    0,  298,    0,    0,  298,
    0,   66,   66,   66,   66,    0,    0,   64,   64,   64,
    0,    0,    0,    0,  298,  290,    0,    0,    0,    0,
  293,    0,  297,  296,  299,  302,    0,    0,    0,    0,
    0,  305,  308,   66,    0,   66,   66,    0,    0,    0,
  311,    0,    0,    0,    0,    0,    0,    0,  298,    0,
    0,    0,    0,    0,  124,  124,    0,  124,  124,  124,
  124,  124,  124,  124,  124,   66,   66,   66,    0,    0,
    0,    0,    0,    0,    0,    0,  124,    0,  124,  124,
  298,    0,    0,   63,    0,    0,    0,    0,   63,    0,
    0,   63,   63,   63,    0,    0,    0,   63,   63,  296,
   63,    0,    0,    0,    0,    0,    0,    0,  124,    0,
  124,  124,    0,  296,  296,    0,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,    0,   63,   63,   63,   63,
   63,  124,  124,    0,    0,    0,    0,    0,   63,   63,
    0,    0,    0,    0,  297,   64,   64,    0,    0,    0,
    0,    0,    0,    0,    0,  296,    0,    0,  297,  297,
    0,    0,    0,    0,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,    0,   64,   64,   64,   64,   64,    0,
  314,    0,    0,    0,    0,  317,   64,   64,  320,  323,
  326,    0,  298,   66,   66,    0,  329,  332,    0,    0,
  297,    0,    0,    0,    0,  335,  298,  298,    0,    0,
    0,    0,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,    0,   66,   66,   66,   66,   66,    0,    0,    0,
    0,    0,    0,    0,   66,   66,    0,    0,    0,    0,
    0,    0,    0,  215,  124,  215,  215,  321,  298,  215,
    0,  321,    0,  321,  321,    0,  321,  321,  124,  124,
    0,    0,    0,    0,    0,    0,    0,  215,    0,  321,
  321,  321,  321,    0,    0,    0,    0,    0,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,    0,  215,  124,  124,  124,
  124,  321,  319,  321,  321,    0,  319,    0,  319,  319,
  124,  319,  319,  338,    0,    0,    0,    0,  341,    0,
    0,  344,  347,  350,  319,  319,  319,  319,    0,  353,
  356,    0,  383,    0,  321,  321,    0,  386,  359,    0,
  389,  392,  395,    0,    0,    0,    0,    0,  398,  401,
    0,    0,    0,    0,    0,    0,  319,  404,  319,  319,
  277,    0,    0,    0,  277,  277,  277,  277,  277,  278,
  277,    0,    0,  278,  278,  278,  278,  278,    0,  278,
    0,    0,  277,    0,  277,    0,    0,    0,    0,  319,
  319,  278,    0,  278,    0,  279,    0,    0,    0,  279,
  279,  279,  279,  279,    0,  279,    0,  216,    0,  216,
  216,    0,    0,  216,    0,    0,  277,  279,    0,  279,
    0,    0,    0,    0,  544,  278,    0,    0,    0,  547,
    0,  216,  550,  553,  556,    0,    0,    0,    0,    0,
  559,  562,    0,  219,  219,    0,    0,  219,  277,  565,
    0,  279,    0,    0,    0,    0,    0,  278,    0,    0,
  216,    0,  215,    0,    0,  219,    0,  215,    0,    0,
  215,  215,  215,    0,    0,    0,    0,    0,  215,  215,
    0,  321,  321,  279,    0,    0,    0,  215,    0,    0,
    0,    0,    0,    0,  219,  215,  220,  220,    0,    0,
  220,  321,  321,  321,  321,  321,  321,  321,  321,  321,
  321,  321,  321,  321,  321,  321,  321,  321,  220,  215,
    0,    0,  321,  321,    0,    0,    0,  215,    0,    0,
    0,    0,  299,  321,    0,  299,  319,  319,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
  299,    0,    0,    0,    0,    0,  319,  319,  319,  319,
  319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
  319,  319,  319,    0,    0,    0,    0,  319,  319,    0,
  277,    0,    0,    0,  299,    0,    0,    0,  319,  278,
    0,    0,    0,    0,  277,  277,  300,    0,    0,  300,
   61,   61,    0,  278,  278,   61,   61,   61,   61,   61,
   61,    0,    0,    0,  300,  279,  299,    0,    0,    0,
    0,    0,   61,   61,   61,   61,  216,    0,    0,  279,
  279,  216,    0,    0,  216,  216,  216,    0,    0,    0,
    0,    0,  216,  216,    0,    0,  277,    0,  300,    0,
    0,  216,    0,    0,   61,  278,    0,   61,    0,  216,
  219,    0,    0,    0,    0,  219,    0,    0,  219,  219,
  219,    0,  301,    0,    0,  301,  219,  219,    0,    0,
  300,  279,    0,  216,    0,  219,    0,   61,   61,  302,
  301,  216,  302,  219,    0,    0,    0,  305,    0,    0,
  305,  284,    0,    0,  284,    0,    0,  302,  285,    0,
    0,  285,    0,  220,    0,  305,    0,  219,  220,  284,
    0,  220,  220,  220,  301,  219,  285,    0,    0,  220,
  220,    0,  282,    0,  283,  282,  309,  283,  220,  309,
    0,  302,    0,    0,    0,    0,  220,    0,  299,  305,
  282,    0,  283,  284,  309,    0,  301,    0,  317,    0,
  285,  317,  299,  299,    0,    0,    0,    0,    0,    0,
  220,    0,    0,  302,    0,    0,  317,    0,  220,    0,
    0,  305,    0,    0,  282,  284,  283,    0,  309,    0,
  544,    0,  285,    0,    0,  547,    0,    0,  550,  553,
  556,    0,    0,    0,    0,    0,  559,  562,    0,    0,
  317,    0,  300,    0,  299,  565,  282,    0,  283,    0,
  309,    0,    0,    0,    0,    0,  300,  300, 4546,    0,
    0,    0,    0,  578,    0,    0,  582,  586,  590,    0,
    0,    0,  317,    0,  594,  598,    0,    0,    0,    0,
    0,    0,    0,  602,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,    0,   61,   61,   61,   61,    0,  300,    0,
  252,    0,  252,  252,    0,  236,  606,  609,  301,    0,
    0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
    0,    0,  301,  301,    0,  302,    0,    0,    0,    0,
    0,    0,    0,  305,    0,    0,    0,  284,    0,  302,
  302,    0,    0,    0,  285,    0,    0,  305,  305,    0,
    0,  284,  284,    0,    0,    0,    0,    0,  285,  285,
    0, 1053,    0, 1056,    0,    0,    0,    0,  282,    0,
  283,    0,  309,    0,  301,    0,    0,    0,    0,    0,
    0,    0,  282,  282,  283,  283,  309,  309,    0,    0,
    0,  302,    0,    0,  317, 1059, 1125,    0, 1128,  305,
    0,    0,    0,  284,    0,    0,    0,    0,  317,  317,
  285,    0,  170,    0,    0,    0,  165,  167,    0,  173,
    0,  163,  161,  172,  162,    0,  164,    0,    0,    0,
 1131,    0,    0,    0,  282,    0,  283,    0,  309,  159,
  171,  160,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,    0,   61,
  317,   61,   61,   61,   61,   61,   61,    0,    0,    0,
  174,    0,    0,  166,    0,    0,    0,    0,   61,   61,
   61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   61,   61,    0,    0,    0,   61,   61,   61,
   61,   61,   61,  168,    0,  169,    0,    0,    0,    0,
   61,    0,    0,   61,   61,   61,   61,   61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  274,  276,
    0,  279,    0,  272,  270,    0,  271,  281,  273,    0,
    0,    0,    0,   61,   61,    0,   61,    0,    0,   61,
  282,  268,  278,  269,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  274,  276,    0,  279,  345,  272,  270,
    0,  271,  281,  273,    0,    0,    0,    0,    0,   61,
   61,    0,  280,    0,    0,  275,  268,  278,  269,    0,
    0,    0,  990,  993,  996,  999, 1002, 1005, 1008, 1011,
 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038,    0,
    0, 1041, 1044, 1047, 1050,  277,    0,  280,    0,    0,
  275,    0,    0,    0,    0,    0,    0, 1062, 1065, 1068,
 1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098,
 1101, 1104, 1107, 1110,    0,    0, 1113, 1116, 1119, 1122,
  277,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,    0,    0,    0,    0,    0,    0,    0,
    0,   61,    0,    0,    0,    0,    0,    0,    0,    0,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,    0,    0,    0,    0,   61,    0,    0,
    0,    0,    0,    0,    0,    0,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,    0,    0,   61,   61,   61,   61,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,    0,
    0,  264,  265,  266,  267,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  247,  248,  249,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,  263,    0,    0,  264,  265,  266,  267,
  274,  276,    0,  279,  468,  272,  270,    0,  271,  281,
  273,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  268,  278,  269,  274,  276,    0,  279,
  470,  272,  270,    0,  271,  281,  273,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  268,
  278,  269,    0,    0,  280,    0,    0,  275,    0,    0,
    0,  274,  276,    0,  279,    0,  272,  270,    0,  271,
  281,  273,    0,    0,    0,    0,    0,    0,    0,    0,
  280,    0,    0,  275,  268,  278,  269,  277,    0,    0,
    0,    0,    0,    0,    0,    0,  274,  276,    0,  279,
    0,  272,  270,    0,  271,  281,  273,    0,    0,    0,
    0,    0,    0,  277,    0,  280,    0,  487,  275,  268,
  278,  269,  274,  276,    0,  279,  568,  272,  270,    0,
  271,  281,  273,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  268,  278,  269,  277,    0,
  280,    0,  532,  275,    0,    0,    0,  274,  276,    0,
  279,  577,  272,  270,    0,  271,  281,  273,    0,    0,
    0,    0,    0,    0,    0,    0,  280,    0,    0,  275,
  268,  278,  269,  277,    0,    0,    0,    0,    0,    0,
    0,    0,  274,  276,    0,  279,    0,  272,  270,    0,
  271,  281,  273,    0,    0,    0,    0,    0,    0,  277,
    0,  280,    0,    0,  275,  268,  278,  269,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  277,    0,  280,    0,  584,  275,
    0,    0,    0,    0,  247,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,    0,    0,  264,  265,  266,  267,    0,    0,  277,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,    0,    0,  264,
  265,  266,  267,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  247,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,    0,    0,  264,  265,  266,  267,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,    0,    0,  264,
  265,  266,  267,    0,    0,    0,  247,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,    0,    0,  264,  265,  266,  267,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  247,  248,  249,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,    0,    0,
  264,  265,  266,  267,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  247,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,    0,    0,  264,  265,  266,  267,  274,
  276,    0,  279,  593,  272,  270,    0,  271,  281,  273,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  268,  278,  269,  274,  276,    0,  279,  594,
  272,  270,    0,  271,  281,  273,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  268,  278,
  269,    0,    0,  280,    0,    0,  275,    0,    0,    0,
  274,  276,    0,  279,  595,  272,  270,    0,  271,  281,
  273,    0,    0,    0,    0,    0,    0,    0,    0,  280,
    0,    0,  275,  268,  278,  269,  277,    0,    0,    0,
    0,    0,    0,    0,    0,  274,  276,    0,  279,  596,
  272,  270,    0,  271,  281,  273,    0,    0,    0,    0,
    0,    0,  277,    0,  280,    0,    0,  275,  268,  278,
  269,  274,  276,    0,  279,  606,  272,  270,    0,  271,
  281,  273,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  268,  278,  269,  277,    0,  280,
    0,    0,  275,    0,    0,    0,  274,  276,    0,  279,
    0,  272,  270,    0,  271,  281,  273,    0,    0,    0,
    0,    0,    0,    0,    0,  280,    0,    0,  275,  268,
  278,  269,  277,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  277,    0,
  280,    0,  626,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  277,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
    0,    0,  264,  265,  266,  267,    0,    0,    0,  247,
  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,    0,    0,  264,  265,
  266,  267,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  247,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,    0,    0,  264,  265,  266,  267,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  247,
  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,    0,    0,  264,  265,
  266,  267,    0,    0,    0,  247,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,    0,    0,  264,  265,  266,  267,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,    0,    0,  264,
  265,  266,  267,  124,    0,    0,  124,    0,    0,  124,
  124,  124,  124,  124,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  124,    0,  124,  124,  274,
  276,    0,  279,    0,  272,  270,    0,  271,  281,  273,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  268,  278,  269,    0,    0,  124,    0,    0,
  124,    0,    0,    0,  756,  762,    0,  771,    0,  750,
  744,    0,  747,  777,  753,    0,    0,    0,    0,    0,
    0,    0,    0,  280,    0,    0,  275,  738,  768,  741,
  124,  124,    0,    0,    0,    0,    0,    0,    0,  861,
  867,    0,  876,    0,  855,  849,    0,  852,  882,  858,
    0,    0,    0,    0,    0,    0,  277,    0,  774,    0,
    0,  759,  843,  873,  846,  966,  972,    0,  981,    0,
  960,  954,    0,  957,  987,  963,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  948,  978,
  951,  765,    0,  879,    0,    0,  864,    0,    0,    0,
 1434, 1440,    0, 1449,    0, 1428, 1422,    0, 1425, 1455,
 1431,    0,    0,    0,    0,    0,    0,    0,    0,  984,
    0,    0,  969, 1416, 1446, 1419,  870,    0,    0,    0,
    0,    0,    0,    0,    0, 1539, 1545,    0, 1554,    0,
 1533, 1527,    0, 1530, 1560, 1536,    0,    0,    0,    0,
    0,    0,  975,    0, 1452,    0,    0, 1437, 1521, 1551,
 1524,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1443,    0, 1557,
    0,    0, 1542,    0,    0,    0,    0,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,   74,    0,  124,  124,  124,  124,
    0,    0, 1548,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
    0,    0,  264,  265,  266,  267,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  675,  678,
  681,  684,  687,  690,  693,  696,  699,  702,  705,  708,
  711,  714,  717,  720,  723,    0,    0,  726,  729,  732,
  735,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  780,  783,  786,  789,  792,  795,  798,
  801,  804,  807,  810,  813,  816,  819,  822,  825,  828,
    0,    0,  831,  834,  837,  840,    0,    0,    0,  885,
  888,  891,  894,  897,  900,  903,  906,  909,  912,  915,
  918,  921,  924,  927,  930,  933,    0,    0,  936,  939,
  942,  945,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1353, 1356, 1359, 1362, 1365, 1368,
 1371, 1374, 1377, 1380, 1383, 1386, 1389, 1392, 1395, 1398,
 1401,    0,    0, 1404, 1407, 1410, 1413,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1458,
 1461, 1464, 1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488,
 1491, 1494, 1497, 1500, 1503, 1506,    0,    0, 1509, 1512,
 1515, 1518, 1644, 1650,    0, 1659,    0, 1638, 1632,    0,
 1635, 1665, 1641,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1626, 1656, 1629, 1801, 1807,
    0, 1816,    0, 1795, 1789,    0, 1792, 1822, 1798,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1783, 1813, 1786,    0,    0, 1662,    0,    0, 1647,
    0,    0,    0, 1906, 1912,    0, 1921,    0, 1900, 1894,
    0, 1897, 1927, 1903,    0,    0,    0,    0,    0,    0,
    0,    0, 1819,    0,    0, 1804, 1888, 1918, 1891, 1653,
    0,    0,    0,    0,    0,    0,    0,    0, 2011, 2017,
    0, 2026,    0, 2005, 1999,    0, 2002, 2032, 2008,    0,
    0,    0,    0,    0,    0, 1810,    0, 1924,    0,    0,
 1909, 1993, 2023, 1996, 2116, 2122,    0, 2131,    0, 2110,
 2104,    0, 2107, 2137, 2113,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2098, 2128, 2101,
 1915,    0, 2029,    0,    0, 2014,    0,    0,    0, 2221,
 2227,    0, 2236,    0, 2215, 2209,    0, 2212, 2242, 2218,
    0,    0,    0,    0,    0,    0,    0,    0, 2134,    0,
    0, 2119, 2203, 2233, 2206, 2020,    0,    0,    0,    0,
    0,    0,    0,    0, 2326, 2332,    0, 2341,    0, 2320,
 2314,    0, 2317, 2347, 2323,    0,    0,    0,    0,    0,
    0, 2125,    0, 2239,    0,    0, 2224, 2308, 2338, 2311,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2230,    0, 2344,    0,
    0, 2329,    0,    0,    0,    0, 1563, 1566, 1569, 1572,
 1575, 1578, 1581, 1584, 1587, 1590, 1593, 1596, 1599, 1602,
 1605, 1608, 1611,    0,    0, 1614, 1617, 1620, 1623,    0,
    0, 2335, 1720, 1723, 1726, 1729, 1732, 1735, 1738, 1741,
 1744, 1747, 1750, 1753, 1756, 1759, 1762, 1765, 1768,    0,
    0, 1771, 1774, 1777, 1780,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1825, 1828, 1831,
 1834, 1837, 1840, 1843, 1846, 1849, 1852, 1855, 1858, 1861,
 1864, 1867, 1870, 1873,    0,    0, 1876, 1879, 1882, 1885,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1930, 1933, 1936, 1939, 1942, 1945, 1948, 1951,
 1954, 1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978,    0,
    0, 1981, 1984, 1987, 1990,    0,    0,    0, 2035, 2038,
 2041, 2044, 2047, 2050, 2053, 2056, 2059, 2062, 2065, 2068,
 2071, 2074, 2077, 2080, 2083,    0,    0, 2086, 2089, 2092,
 2095,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2140, 2143, 2146, 2149, 2152, 2155, 2158,
 2161, 2164, 2167, 2170, 2173, 2176, 2179, 2182, 2185, 2188,
    0,    0, 2191, 2194, 2197, 2200,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2245, 2248,
 2251, 2254, 2257, 2260, 2263, 2266, 2269, 2272, 2275, 2278,
 2281, 2284, 2287, 2290, 2293,    0,    0, 2296, 2299, 2302,
 2305, 2431, 2437,    0, 2446,    0, 2425, 2419,    0, 2422,
 2452, 2428,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2413, 2443, 2416, 2536, 2542,    0,
 2551,    0, 2530, 2524,    0, 2527, 2557, 2533,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2518, 2548, 2521,    0,    0, 2449,    0,    0, 2434,    0,
    0,    0, 2785, 2791,    0, 2800,    0, 2779, 2773,    0,
 2776, 2806, 2782,    0,    0,    0,    0,    0,    0,    0,
    0, 2554,    0,    0, 2539, 2767, 2797, 2770, 2440,    0,
    0,    0,    0,    0,    0,    0,    0, 2890, 2896,    0,
 2905,    0, 2884, 2878,    0, 2881, 2911, 2887,    0,    0,
    0,    0,    0,    0, 2545,    0, 2803,    0,    0, 2788,
 2872, 2902, 2875, 3067, 3073,    0, 3082,    0, 3061, 3055,
    0, 3058, 3088, 3064,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3049, 3079, 3052, 2794,
    0, 2908,    0,    0, 2893,    0,    0,    0, 3172, 3178,
    0, 3187,    0, 3166, 3160,    0, 3163, 3193, 3169,    0,
    0,    0,    0,    0,    0,    0,    0, 3085,    0,    0,
 3070, 3154, 3184, 3157, 2899,    0,    0,    0,    0,    0,
    0,    0,    0, 3277, 3283,    0, 3292,    0, 3271, 3265,
    0, 3268, 3298, 3274,    0,    0,    0,    0,    0,    0,
 3076,    0, 3190,    0,    0, 3175, 3259, 3289, 3262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3181,    0, 3295,    0,    0,
 3280,    0,    0,    0,    0, 2350, 2353, 2356, 2359, 2362,
 2365, 2368, 2371, 2374, 2377, 2380, 2383, 2386, 2389, 2392,
 2395, 2398,    0,    0, 2401, 2404, 2407, 2410,    0,    0,
 3286, 2455, 2458, 2461, 2464, 2467, 2470, 2473, 2476, 2479,
 2482, 2485, 2488, 2491, 2494, 2497, 2500, 2503,    0,    0,
 2506, 2509, 2512, 2515,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2704, 2707, 2710, 2713,
 2716, 2719, 2722, 2725, 2728, 2731, 2734, 2737, 2740, 2743,
 2746, 2749, 2752,    0,    0, 2755, 2758, 2761, 2764,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830, 2833,
 2836, 2839, 2842, 2845, 2848, 2851, 2854, 2857,    0,    0,
 2860, 2863, 2866, 2869,    0,    0,    0, 2986, 2989, 2992,
 2995, 2998, 3001, 3004, 3007, 3010, 3013, 3016, 3019, 3022,
 3025, 3028, 3031, 3034,    0,    0, 3037, 3040, 3043, 3046,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3091, 3094, 3097, 3100, 3103, 3106, 3109, 3112,
 3115, 3118, 3121, 3124, 3127, 3130, 3133, 3136, 3139,    0,
    0, 3142, 3145, 3148, 3151,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3196, 3199, 3202,
 3205, 3208, 3211, 3214, 3217, 3220, 3223, 3226, 3229, 3232,
 3235, 3238, 3241, 3244,    0,    0, 3247, 3250, 3253, 3256,
 3382, 3388,    0, 3397,    0, 3376, 3370,    0, 3373, 3403,
 3379,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3364, 3394, 3367, 3559, 3565,    0, 3574,
    0, 3553, 3547,    0, 3550, 3580, 3556,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3541,
 3571, 3544,    0,    0, 3400,    0,    0, 3385,    0,    0,
    0, 3664, 3670,    0, 3679,    0, 3658, 3652,    0, 3655,
 3685, 3661,    0,    0,    0,    0,    0,    0,    0,    0,
 3577,    0,    0, 3562, 3646, 3676, 3649, 3391,    0,    0,
    0,    0,    0,    0,    0,    0, 3769, 3775,    0, 3784,
    0, 3763, 3757,    0, 3760, 3790, 3766,    0,    0,    0,
    0,    0,    0, 3568,    0, 3682,    0,    0, 3667, 3751,
 3781, 3754, 4234, 4240,    0, 4249,    0, 4228, 4222,    0,
 4225, 4255, 4231,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4216, 4246, 4219, 3673,    0,
 3787,    0,    0, 3772,    0,    0,    0, 4631, 4637,    0,
 4646,    0, 4625, 4619,    0, 4622, 4652, 4628,    0,    0,
    0,    0,    0,    0,    0,    0, 4252,    0,    0, 4237,
 4613, 4643, 4616, 3778,    0,    0,    0,    0,    0,    0,
    0,    0, 4736, 4742,    0, 4751,    0, 4730, 4724,    0,
 4727, 4757, 4733,    0,    0,    0,    0,    0,    0, 4243,
    0, 4649,    0,    0, 4634, 4718, 4748, 4721,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4640,    0, 4754,    0,    0, 4739,
    0,    0,    0,    0, 3301, 3304, 3307, 3310, 3313, 3316,
 3319, 3322, 3325, 3328, 3331, 3334, 3337, 3340, 3343, 3346,
 3349,    0,    0, 3352, 3355, 3358, 3361,    0,    0, 4745,
 3478, 3481, 3484, 3487, 3490, 3493, 3496, 3499, 3502, 3505,
 3508, 3511, 3514, 3517, 3520, 3523, 3526,    0,    0, 3529,
 3532, 3535, 3538,    0,    0,    0,    0, 1197,    0, 1200,
    0,    0,    0,    0,    0, 3583, 3586, 3589, 3592, 3595,
 3598, 3601, 3604, 3607, 3610, 3613, 3616, 3619, 3622, 3625,
 3628, 3631,    0,    0, 3634, 3637, 3640, 3643,    0,    0,
 1272, 1203, 1275,    0,    0,    0,    0,    0,    0,    0,
 3688, 3691, 3694, 3697, 3700, 3703, 3706, 3709, 3712, 3715,
 3718, 3721, 3724, 3727, 3730, 3733, 3736,    0,    0, 3739,
 3742, 3745, 3748, 1344, 1278, 1347, 4153, 4156, 4159, 4162,
 4165, 4168, 4171, 4174, 4177, 4180, 4183, 4186, 4189, 4192,
 4195, 4198, 4201,    0,    0, 4204, 4207, 4210, 4213,    0,
 2623,    0, 2626,    0,    0,    0,    0, 1350,    0,    0,
    0, 4550, 4553, 4556, 4559, 4562, 4565, 4568, 4571, 4574,
 4577, 4580, 4583, 4586, 4589, 4592, 4595, 4598,    0,    0,
 4601, 4604, 4607, 4610, 2629,    0,    0, 2695,    0, 2698,
    0,    0,    0,    0,    0,    0, 4655, 4658, 4661, 4664,
 4667, 4670, 4673, 4676, 4679, 4682, 4685, 4688, 4691, 4694,
 4697, 4700, 4703,    0,    0, 4706, 4709, 4712, 4715,  274,
  276, 2701,  279,    0,  272,  270,    0,  271,  281,  273,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  268,  278,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  280,    0,    0,  275, 2977,    0, 2980,
    0,    0,    0,    0,    0,    0,    0,    0, 1134, 1137,
 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167,
 1170, 1173, 1176, 1179, 1182,    0,  277, 1185, 1188, 1191,
 1194, 2983, 3469,    0, 3472,    0,    0,    0,    0,    0,
    0, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233,
 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257,    0,    0,
 1260, 1263, 1266, 1269,    0, 3856, 3475, 3859,    0,    0,
    0,    0,    0,    0, 1281, 1284, 1287, 1290, 1293, 1296,
 1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 1326,
 1329,    0,    0, 1332, 1335, 1338, 1341,    0, 3928, 3862,
 3931, 2560, 2563, 2566, 2569, 2572, 2575, 2578, 2581, 2584,
 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608,    0,    0,
 2611, 2614, 2617, 2620,    0,    0,    0, 4000,    0, 4003,
    0,    0, 3934,    0,    0,    0,    0,    0, 2632, 2635,
 2638, 2641, 2644, 2647, 2650, 2653, 2656, 2659, 2662, 2665,
 2668, 2671, 2674, 2677, 2680,    0,    0, 2683, 2686, 2689,
 2692, 4006,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4072,    0, 4075,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  247,  248,  249,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
 4078,    0,  264,  265,  266,  267,    0, 4144,    0, 4147,
    0,    0,    0,    0,    0,    0,    0,    0, 2914, 2917,
 2920, 2923, 2926, 2929, 2932, 2935, 2938, 2941, 2944, 2947,
 2950, 2953, 2956, 2959, 2962,  447,    0, 2965, 2968, 2971,
 2974, 4150, 4321,    0, 4324,    0,    0,    0,    0,    0,
    0,    0,    0, 3406, 3409, 3412, 3415, 3418, 3421, 3424,
 3427, 3430, 3433, 3436, 3439, 3442, 3445, 3448, 3451, 3454,
    0,    0, 3457, 3460, 3463, 3466, 4327, 4393,    0, 4396,
    0,    0,    0,    0,    0,    0, 3793, 3796, 3799, 3802,
 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829, 3832,
 3835, 3838, 3841,    0,    0, 3844, 3847, 3850, 3853,    0,
 4465, 4399, 4468,    0,    0,    0,    0,    0,    0, 3865,
 3868, 3871, 3874, 3877, 3880, 3883, 3886, 3889, 3892, 3895,
 3898, 3901, 3904, 3907, 3910, 3913,    0,    0, 3916, 3919,
 3922, 3925,    0, 4537, 4471, 4540,    0,    0, 3937, 3940,
 3943, 3946, 3949, 3952, 3955, 3958, 3961, 3964, 3967, 3970,
 3973, 3976, 3979, 3982, 3985,    0,  407, 3988, 3991, 3994,
 3997,  412,    0,    0,  417,  422,  427, 4543,    0,    0,
    0,    0,  432,  437,    0,    0,    0,    0,    0,    0,
    0,  442,    0,    0,    0,    0,    0, 4009, 4012, 4015,
 4018, 4021, 4024, 4027, 4030, 4033, 4036, 4039, 4042, 4045,
 4048, 4051, 4054, 4057,    0,    0, 4060, 4063, 4066, 4069,
    0,    0,    0,  450,  454,  458,  462,    0,  465,  465,
    0,  469,    0,    0,    0,    0,    0,    0, 4081, 4084,
 4087, 4090, 4093, 4096, 4099, 4102, 4105, 4108, 4111, 4114,
 4117, 4120, 4123, 4126, 4129,    0,    0, 4132, 4135, 4138,
 4141,  447,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4258, 4261, 4264, 4267, 4270, 4273, 4276,
 4279, 4282, 4285, 4288, 4291, 4294, 4297, 4300, 4303, 4306,
  447,    0, 4309, 4312, 4315, 4318,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4330, 4333,
 4336, 4339, 4342, 4345, 4348, 4351, 4354, 4357, 4360, 4363,
 4366, 4369, 4372, 4375, 4378,    0,    0, 4381, 4384, 4387,
 4390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4402, 4405, 4408, 4411, 4414, 4417, 4420, 4423, 4426,
 4429, 4432, 4435, 4438, 4441, 4444, 4447, 4450,  447,    0,
 4453, 4456, 4459, 4462,    0,    0,    0,  183,    0,  183,
  183,  183,  447,  183, 4474, 4477, 4480, 4483, 4486, 4489,
 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513, 4516, 4519,
 4522,  183,  407, 4525, 4528, 4531, 4534,  412,    0,    0,
  417,  422,  427,    0,    0,    0,    0,    0,  432,  437,
    0,    0,    0,    0,    0,    0,    0,  442,    0,    0,
  183,  407,    0,    0,    0,    0,  412,    0,    0,  417,
  422,  427,    0,  447,    0,    0,    0,  432,  437,    0,
    0,    0,    0,    0,    0,    0,  442,    0,    0,  450,
  454,  458,  462,    0,  465,  465,    0,  469,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  447,
    0,    0,    0,    0,    0,    0,    0,    0,  450,  454,
  458,  462,    0,  465,  465,    0,  469,    0,    0,  407,
    0,    0,    0,    0,  412,    0,    0,  417,  422,  427,
  447,    0,    0,  407,    0,  432,  437,    0,  412,    0,
    0,  417,  422,  427,  442,    0,    0,    0,    0,  432,
  437,    0,    0,    0,    0, 4546,    0,    0,  442,    0,
  578,    0,    0,  582,  586,  590,    0,    0,    0,    0,
    0,  594,  598,    0,    0,    0,  450,  454,  458,  462,
  602,  465,  465,    0,  469,    0,    0,    0,    0,    0,
  450,  454,  458,  462,  407,  465,  465,    0,  469,  412,
    0,    0,  417,  422,  427,    0,    0,    0,    0,    0,
  432,  437,  236,  606,  609,    0,  183,    0,    0,  442,
  239,  183,    0,    0,  183,  183,  183,    0,    0,    0,
  407,    0,  183,  183,    0,  412,    0,    0,  417,  422,
  427,  183,    0,    0,    0,    0,  432,  437,    0,  183,
    0,  450,  454,  458,  462,  442,  465,  465,    0,  469,
    0,  407,    0,    0,    0,    0,  412,    0,    0,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,    0,
    0,    0,    0,    0,    0,    0,  442,  450,  454,  458,
  462, 4546,  465,  465,    0,  469,  578,    0,    0,  582,
  586,  590,    0,    0,    0,    0,    0,  594,  598,    0,
    0,    0,    0,    0,    0,    0,  602,    0,  450,  454,
  458,  462, 4546,  465,  465,    0,  469,  578,    0,    0,
  582,  586,  590,    0,    0, 4546,    0,    0,  594,  598,
  578,    0,    0,  582,  586,  590,    0,  602,  236,  606,
  609,  594,  598,    0,    0,    0,  239,    0,    0,    0,
  602,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  236,
  606,  609,    0,    0,    0,    0,    0,  239,    0,    0,
    0,    0,  236,  606,  609,    0,    0,    0,    0,    0,
  239,
};
static int yycheck[] = {                                      17,
    0,    1,    0,   94,   43,    1,    6,   33,    8,    9,
   10,    0,   59,  107,    5,   15,   16,   61,   38,  469,
  367,   38,  113,  126,   59,   42,  587,   41,   67,   60,
   44,  122,   59,    5,   41,   44,  527,   44,   59,   41,
   44,    5,   44,   43,   60,   44,  257,   47,  497,  125,
   60,  500,   44,   24,   91,   59,  446,   44,   58,   40,
   44,   32,  273,   37,   82,   38,   59,   67,   44,  123,
   88,  282,   72,   91,   44,  636,  123,   40,   49,  528,
  273,  572,   60,   38,   44,   40,   62,   42,  123,  282,
   45,   44,   41,   93,   94,   44,  123,  123,   72,   59,
  126,   61,  123,  103,  104,  105,  106,  107,   72,   41,
   59,  107,   44,  113,  123,  505,  107,  567,  125,   59,
   60,   60,  122,  125,   95,  125,  125,   59,   91,   93,
  123,   60,   96,  125,   59,   60,  107,  586,  125,  123,
  111,   37,   38,  107,   93,   41,   42,   43,   44,   45,
   46,   47,  499,  602,  257,  125,  127,  128,  129,  130,
   60,   93,   91,   59,  126,   61,   60,  557,  617,   44,
   41,  210,  125,   44,   37,   38,  125,   60,   41,   42,
   43,   44,   45,   46,   47,   44,  635,   62,   59,   44,
  258,  191,   44,  125,   44,   41,   59,   93,   61,  275,
  276,  277,   38,   60,   59,   59,   42,   38,  273,   40,
  210,   42,  280,   59,   45,  215,   44,  282,  218,   60,
  220,  221,   93,   60,   60,   60,  217,  191,  124,  125,
   93,   44,  258,  259,  260,   41,  262,  257,   44,  265,
  266,  267,  273,  214,  283,   60,  217,  273,  274,  213,
  222,  282,  224,  217,  125,  227,  282,  283,  284,  285,
  286,  124,  125,  289,  290,  257,  125,  314,  239,   40,
  314,   44,  282,  125,  318,  125,  257,  314,   60,  271,
  272,  245,  246,  283,  257,  322,  275,  276,  277,  262,
   60,  308,  265,  266,  267,  123,  296,   40,   44,  299,
  273,  274,  257,  317,  257,  319,  320,  273,  257,  282,
  123,  311,  338,  339,  340,   42,  282,  317,  271,  272,
   40,  257,  271,  272,  324,  257,  298,  327,   38,  265,
   40,  323,   42,  273,  273,   44,  307,   40,   44,  271,
  272,  314,  282,  282,  273,   60,  440,  347,  273,  322,
   60,   41,  125,  282,   44,  310,  311,  282,   59,   37,
   38,  257,  453,   41,   42,   43,   44,   45,   46,   47,
  323,   44,   40,  273,  323,  271,  272,  123,   46,  273,
   44,   59,  282,   61,  314,  314,  257,   59,  282,  389,
  273,  323,  322,  322,  257,   59,   60,   59,  257,  282,
  271,  272,  366,  497,   44,  257,  500,  257,  271,  272,
   58,   59,  271,  272,  123,   93,  273,  123,   58,  271,
  272,  271,  272,   91,  388,  282,  257,  323,  428,  468,
  428,  470,  273,   38,  528,   60,  273,   42,  381,  382,
  440,  282,   40,   60,  440,  282,  124,  125,  448,  440,
  123,  490,  323,  453,   49,   60,   59,  314,  273,  123,
  323,  433,  257,   41,  323,  322,   44,  282,  468,  440,
  470,  323,  436,  323,   91,  123,  440,   72,  273,  310,
  311,   59,   59,  123,  257,  314,  257,  282,   58,  432,
  490,  262,  586,  322,  265,  266,  267,  497,  271,  272,
  500,  497,  273,  274,  500,   44,  497,  257,  602,  500,
   33,  282,  476,  314,  123,   38,  111,   40,  273,   42,
   59,  322,   45,  617,  268,  269,  497,  282,  528,  500,
  257,   41,  528,  497,   44,  262,  500,  528,  265,  266,
  267,  635,  542,  314,  315,  316,  273,  274,  314,  257,
  323,  322,   41,  481,  482,  282,  322,  528,  273,   58,
   59,  533,  534,  273,  528,  273,  494,  282,   41,  608,
  588,   44,  282,  545,  282,  575,  576,  616,   93,  257,
  580,  581,  317,  581,  319,  320,  586,  275,  276,  277,
  586,   59,   60,  271,  272,  586,   41,   40,  308,   44,
  123,  640,  602,  126,   59,   60,  602,   41,  608,  273,
  649,  602,   40,   41,  257,  586,  616,  617,  282,  637,
   41,  617,  586,   44,  257,  264,  617,  449,  628,  257,
  628,  602,  604,  605,   38,  635,   40,  609,  602,  635,
  640,  449,   46,  264,  635,  323,  617,  257,  648,  649,
  648,  257,  257,  617,  626,  123,  273,  262,  334,   40,
  265,  266,  267,  264,  635,  282,  257,   93,  123,  274,
   23,  635,   25,   26,   27,   28,   29,   30,   31,   32,
  271,  272,  257,    0,  126,  507,   41,   91,  510,   44,
   58,   44,   45,   46,   47,   41,   58,  314,   44,  507,
   58,   40,  510,  308,   59,  322,   61,  257,  257,  314,
  315,  316,  317,  257,  319,  320,   33,  322,   61,   41,
  124,   38,   44,   40,  257,   42,   41,   41,   45,   44,
   44,   42,  323,  555,  257,  258,  259,  260,  261,  262,
  263,  257,  265,  266,  267,  268,  269,  555,  271,  272,
  273,  274,  315,  316,  317,  278,  319,  320,   61,  282,
  283,  284,  285,  286,  257,   41,  289,  290,   44,  591,
  315,  316,  317,   60,  319,  320,   62,   62,   62,  132,
  133,   62,   41,  591,   41,   40,  264,  310,  311,   59,
   40,  314,  315,  316,  317,  257,  319,  320,  321,  322,
  323,   40,   62,  257,  327,  273,  123,  257,  125,  126,
  333,  334,  335,   40,  282,  338,  339,  340,  273,   41,
  257,   58,   44,   41,   37,   38,   44,  282,   41,   42,
   43,   44,   45,   46,   47,   40,   40,   59,   38,   61,
   41,   59,   42,   61,   40,   38,   59,   42,   61,  202,
  203,  204,   40,   40,   40,   41,   40,   40,   44,   41,
   41,   41,   38,   42,   44,   38,   42,  315,  316,  317,
  223,  319,  320,  315,  316,  317,   62,  319,  320,   59,
   93,   61,   40,   59,   60,  314,  315,  316,  317,   40,
  319,  320,   40,  322,  247,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  124,  125,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  265,
  266,  267,  268,  257,  258,  259,  260,  257,   42,   61,
  257,  258,  259,  260,  261,  262,  263,   59,  265,  266,
  267,  268,  269,   61,  271,  272,  273,  274,  275,  276,
  277,  278,   59,  257,   42,  282,  283,  284,  285,  286,
   40,   59,  289,  290,  257,  262,   41,  257,  265,  266,
  267,  260,   41,   40,   58,  321,    0,  274,   59,   41,
   40,  344,   41,  310,  311,   40,   59,  314,  315,  316,
  317,   40,  319,  320,  321,  322,  323,   41,  260,  362,
  327,  364,  123,  330,    0,   59,  333,  334,  335,   33,
  123,  338,  339,  340,   38,  378,   40,  314,   42,   59,
   42,   45,  257,   44,   41,  322,   41,  330,  257,   60,
  126,  257,   40,  257,  257,  257,   37,   38,  257,  257,
   41,   42,   43,   44,   45,   46,   47,  257,  271,  272,
  257,   62,  262,  273,  510,  265,  266,  267,   59,   37,
   61,  257,  257,  273,  274,    0,  262,  440,   72,  265,
  266,  267,  282,  273,  453,   72,  262,  273,  274,  265,
  266,  267,   72,   72,   51,  627,  282,   -1,  274,  543,
   -1,  454,   93,   -1,  290,  279,  281,   -1,   33,  123,
  323,  125,  126,   38,   -1,   40,  469,   42,  471,   -1,
   45,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,  308,  124,  125,  488,   -1,   -1,  314,  315,
  316,  317,  495,  319,  320,   61,  322,   -1,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  262,   -1,
   -1,  265,  266,  267,   -1,  518,  519,  520,  521,  273,
  274,  257,   -1,   -1,   -1,   91,  262,   -1,  282,  265,
  266,  267,   -1,   -1,  537,   -1,  290,  273,  274,  327,
  328,  329,  330,  331,  332,   -1,  282,   -1,  123,   -1,
  125,  126,   -1,   -1,   41,   -1,  559,   44,  124,   -1,
  314,  315,  316,  317,  567,  319,  320,   -1,  322,   -1,
  262,   33,   59,  265,  266,  267,   38,   -1,   40,  582,
   42,  273,  274,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   93,  271,  272,  273,
  274,  275,  276,  277,  278,   -1,  257,   -1,  282,  283,
  284,  285,  286,   -1,  257,  289,  290,   -1,   -1,  262,
  271,  272,  265,  266,  267,   -1,   -1,   -1,  125,   -1,
  273,  274,   -1,   -1,   -1,   -1,  310,  311,   -1,  282,
  314,  315,  316,  317,   -1,  319,  320,  321,  322,  323,
   -1,  123,   -1,  327,  126,   41,   -1,   -1,   44,  333,
  334,  335,   -1,   -1,  338,  339,  340,   -1,   -1,   -1,
   -1,  314,  323,   59,   -1,   -1,  261,  262,  263,  322,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
  275,  276,  277,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,  310,  311,   45,   -1,  314,
  315,  316,  317,   -1,  319,  320,  321,  322,  323,  125,
   -1,   -1,  327,   -1,   -1,  330,   -1,   -1,  333,  334,
  335,   -1,   -1,  338,  339,  340,  257,   -1,   -1,   -1,
  257,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  270,
   -1,   -1,  273,  274,  271,  272,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,  123,  278,   -1,  126,   -1,
  282,  283,  284,  285,  286,   33,   -1,  289,  290,   -1,
   38,   -1,   40,   -1,   42,   -1,  323,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,  311,
   -1,   -1,  314,  315,  316,  317,   -1,  319,  320,  321,
  322,  323,   -1,   -1,   41,  327,   43,   44,   45,   -1,
   -1,  333,  334,  335,   -1,   -1,  338,  339,  340,   -1,
   -1,  257,   59,  257,   61,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,  271,  272,   -1,   -1,  273,
  274,   -1,   37,   38,   -1,   40,   -1,   42,  282,   -1,
   -1,   46,   47,   -1,   -1,  123,   93,   41,  126,   43,
   44,   45,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   59,   42,   61,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,  125,  257,
  258,  259,  260,  261,  262,  263,   91,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,  262,   93,
  278,  265,  266,  267,  282,  283,  284,  285,  286,  273,
  274,  289,  290,   -1,   -1,   -1,   -1,   -1,  282,  124,
   -1,   -1,   -1,   -1,   -1,   -1,  290,   -1,   -1,   -1,
   -1,  125,  310,  311,   -1,   -1,  314,  315,  316,  317,
   -1,  319,  320,  321,  322,  323,   -1,  123,   -1,  327,
  126,   -1,   -1,   -1,   -1,  333,  334,  335,   33,   -1,
  338,  339,  340,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,
  257,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,
   -1,  319,  320,  321,  322,  323,   -1,   -1,  123,  327,
   -1,  126,   -1,   -1,   -1,  333,  334,  335,   -1,   33,
  338,  339,  340,  257,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,  323,  271,  272,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  257,   -1,  289,  290,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  323,
   -1,   -1,   -1,   -1,  310,  311,  282,   -1,  314,  315,
  316,  317,   -1,  319,  320,  321,  322,  323,   -1,  123,
   -1,  327,  126,   -1,   -1,   -1,   -1,  333,  334,  335,
   -1,   33,  338,  339,  340,   -1,   38,   -1,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   59,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,
  315,  316,  317,   -1,  319,  320,  321,  322,  323,   -1,
   -1,  123,  327,  125,   -1,   -1,   -1,   -1,  333,  334,
  335,  125,   33,  338,  339,  340,   -1,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  257,   -1,  289,  290,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,  310,  311,  282,   -1,
  314,  315,  316,  317,   -1,  319,  320,  321,  322,  323,
   -1,   -1,  123,  327,  125,   -1,   -1,   -1,   -1,  333,
  334,  335,   33,   -1,  338,  339,  340,   38,   -1,   40,
  314,   42,   -1,   -1,   45,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   -1,  263,   41,  257,   -1,   44,  268,  269,   -1,  271,
  272,   -1,   -1,  275,  276,  277,  278,  271,  272,   -1,
   59,  283,  284,  285,  286,   -1,  257,  289,  290,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,  310,  311,
   -1,  282,   -1,   -1,   93,   -1,   -1,   -1,   -1,  321,
   -1,  323,  123,   38,  125,  327,   -1,   42,   -1,  323,
   -1,  333,  334,  335,   -1,   33,  338,  339,  340,   -1,
   38,   -1,   40,  314,   42,   60,  125,   45,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,  289,  290,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  310,
  311,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
  321,   -1,  323,   -1,   -1,  123,  327,  125,   41,   -1,
   -1,   44,  333,  334,  335,   33,   -1,  338,  339,  340,
   38,   -1,   40,   -1,   42,   -1,   59,   45,  314,  315,
  316,   41,   -1,   -1,   44,   -1,  322,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   59,
  271,  272,   -1,   -1,  275,  276,  277,  278,  257,   -1,
   93,   -1,  283,  284,  285,  286,   -1,   -1,  289,  290,
   -1,   -1,  271,  272,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   93,   -1,  273,  274,   -1,   -1,  310,
  311,   -1,  125,   -1,  282,   -1,   -1,   -1,   -1,   -1,
  321,   -1,  323,   -1,   -1,  123,  327,  125,   -1,   -1,
   -1,   -1,  333,  334,  335,  125,   33,  338,  339,  340,
   -1,   38,   -1,   40,  323,   42,  314,  262,   45,   -1,
  265,  266,  267,   -1,  322,   -1,   -1,   -1,   -1,  274,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,  289,  290,  308,   -1,   -1,   -1,   -1,   -1,  314,
  315,  316,  317,   -1,  319,  320,   -1,  322,   -1,   -1,
   -1,   -1,  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,  323,  123,   -1,   -1,  327,
   -1,   -1,   -1,   -1,   -1,  333,  334,  335,   33,   -1,
  338,  339,  340,   38,  257,   40,   -1,   42,   -1,   -1,
   45,   38,   -1,   40,   41,   42,   -1,   44,  271,  272,
  258,  259,  260,  261,   -1,  263,   -1,  257,   -1,   -1,
  268,  269,   -1,  271,  272,   62,   -1,  275,  276,  277,
  278,  271,  272,   -1,   -1,  283,  284,  285,  286,  257,
   -1,  289,  290,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   91,  273,  274,   -1,   -1,   -1,
  323,   -1,  310,  311,  282,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,  123,  327,
   -1,   -1,   -1,  323,   -1,  333,  334,  335,   33,   -1,
  338,  339,  340,   38,   -1,   40,  314,   42,   -1,   -1,
   45,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   41,   -1,   -1,
   44,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   59,  283,  284,  285,  286,
   -1,   -1,  289,  290,   -1,   -1,   91,   -1,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,  310,  311,   -1,   -1,   -1,   -1,   93,
   59,   -1,   61,   -1,  321,   -1,  323,   -1,  123,   -1,
  327,  126,   -1,   -1,   -1,   -1,  333,  334,  335,   -1,
   33,  338,  339,  340,   -1,   38,   -1,   40,   41,   42,
   -1,  125,   45,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
  257,   -1,   -1,  268,  269,  262,  271,  272,  265,  266,
  267,   -1,   -1,  278,   -1,  124,  125,  274,  283,  284,
  285,  286,  257,   -1,  289,  290,   -1,  262,   -1,   -1,
  265,  266,  267,  290,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,  310,  311,  282,   -1,   -1,
   -1,  308,   -1,   -1,   -1,   -1,  321,  314,  323,   -1,
  123,   -1,  327,  126,   -1,  322,   -1,   -1,  333,  334,
  335,   33,   -1,  338,  339,  340,   38,   -1,   40,  314,
   42,   -1,   -1,   45,   -1,   -1,   41,  322,   -1,   44,
   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   59,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,   -1,  271,  272,  262,
   -1,   93,  265,  266,  267,   -1,   -1,   -1,   93,   -1,
  273,  274,  257,   -1,   -1,  310,  311,  262,  257,  282,
  265,  266,  267,   -1,   41,   -1,   -1,   44,  273,  274,
   -1,  123,  271,  272,  126,   -1,   -1,  282,   -1,   -1,
  125,   33,   59,  338,  339,  340,   38,   -1,   40,  323,
   42,  314,   -1,   45,   -1,   -1,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   93,   -1,   -1,   -1,
  273,  274,   -1,   -1,  323,   -1,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  257,   -1,  289,  290,   -1,  262,
   -1,   93,  265,  266,  267,   -1,   -1,   -1,  125,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,  310,  311,  282,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   33,   61,  338,  339,  340,   38,   -1,
   40,  314,   42,   -1,   -1,   45,   -1,   -1,   -1,  322,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   -1,  257,  265,  266,  267,   93,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,  271,  272,   -1,   -1,
  282,  283,  284,  285,  286,   -1,  257,  289,  290,   -1,
   -1,  262,   -1,   93,  265,  266,  267,  124,  125,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,  310,  311,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,
   33,   -1,   -1,  123,   -1,   38,  126,   40,  323,   42,
  257,   -1,   45,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   33,   -1,  265,  266,  267,   38,   59,   40,  257,
   42,  273,  274,   45,  262,   -1,   -1,  265,  266,  267,
  282,  283,  284,  285,  286,  273,  274,  289,  290,   -1,
   -1,   -1,   -1,   -1,  282,   -1,  323,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   33,  310,  311,
  123,   -1,   38,  126,   40,  257,   42,   -1,   -1,   45,
  262,   -1,   -1,  265,  266,  267,  314,  315,  316,   -1,
  257,  273,  274,  125,  322,   -1,  338,  339,  340,   -1,
  282,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   -1,  126,   -1,   -1,  257,  258,  259,
  260,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   37,   38,  273,  274,   41,   42,   43,   44,   45,
   -1,   47,  282,  283,  284,  285,  286,   -1,   -1,  289,
  290,   -1,   -1,   59,   -1,   61,  323,  123,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,
  310,  311,   41,   42,   43,   44,   45,   -1,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   93,   -1,   -1,
   59,  262,   61,   -1,  265,  266,  267,   -1,  338,  339,
  340,   -1,  273,  274,  257,  258,  259,  260,   -1,  262,
   -1,  282,  265,  266,  267,   -1,   -1,   -1,  124,  125,
  273,  274,   -1,   -1,   93,  257,   -1,   -1,   -1,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,  271,
  272,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,   -1,   -1,  265,  266,  267,  125,  310,  311,   37,
   38,  273,  274,   41,   42,   43,   44,   45,   -1,   47,
  282,  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,
  126,   59,   -1,   61,   -1,  338,  339,  340,   -1,   -1,
   -1,  323,  258,  259,  260,   -1,   -1,   -1,  310,  311,
   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   44,   45,   93,   47,  283,  284,  285,
  286,   -1,   -1,  289,  290,   -1,  338,  339,  340,   60,
   61,   62,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,  310,  311,  124,  125,  314,  273,
  274,  257,   -1,   -1,   -1,   -1,  322,   -1,  282,   -1,
   91,   -1,   -1,   94,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,  257,   -1,
  314,  315,  316,  124,   -1,  126,   -1,   59,  322,   61,
   62,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,  323,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   91,
   -1,   93,   94,   -1,   37,   38,  282,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  323,   -1,   59,   -1,   61,   62,
   -1,  123,  124,  125,   -1,   -1,   -1,   -1,  314,  315,
  316,  317,   -1,  319,  320,   -1,  322,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,   59,   -1,   61,   62,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   91,   -1,   93,   94,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  314,  315,  316,  123,  124,  125,
   -1,  322,  322,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,   -1,  310,  311,
  312,  313,  314,   -1,  257,   -1,   -1,   -1,   -1,  262,
  322,  323,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,  310,  311,  312,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,
  323,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,  314,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  322,  323,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,  126,
   59,   44,   61,   62,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   59,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
  126,   -1,   91,   -1,   93,   94,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   61,   62,  257,  123,  124,  125,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,  125,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   91,   -1,   93,   94,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   37,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   59,   47,
   61,   62,   -1,  123,  124,  125,   -1,   -1,   -1,   -1,
  257,   59,   -1,   61,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   91,   -1,   93,   94,   -1,  282,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   93,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,  123,  124,  125,   -1,  282,  314,  315,  316,
  317,   -1,  319,  320,   -1,  322,   -1,  125,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,  257,  274,   -1,   -1,  314,  315,
  316,  317,   -1,  319,  320,   -1,  322,   -1,  271,  272,
   -1,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,  310,  311,  312,  313,  314,   -1,  257,   -1,   -1,
   -1,   -1,  262,  322,  323,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,
  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,  311,  312,  313,  314,   -1,  257,   -1,   -1,   -1,
   -1,  262,  322,  323,  265,  266,  267,   -1,   -1,  257,
  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,   -1,  310,
  311,  312,  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  322,  323,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   59,   44,   61,   62,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   59,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   91,   -1,   93,
   94,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   93,   -1,   -1,   41,   -1,
   -1,   44,   -1,   59,   60,   61,   62,   -1,   -1,  123,
  124,  125,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   93,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   59,   60,   61,   62,   -1,   -1,  123,  124,  125,
   -1,   -1,   -1,   -1,   59,  257,   -1,   -1,   -1,   -1,
  262,   -1,  125,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   91,   -1,   93,   94,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,  123,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,
  125,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,  257,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,  271,  272,   -1,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
  314,  124,  125,   -1,   -1,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,  257,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  323,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,  314,   -1,
  257,   -1,   -1,   -1,   -1,  262,  322,  323,  265,  266,
  267,   -1,  257,  271,  272,   -1,  273,  274,   -1,   -1,
  323,   -1,   -1,   -1,   -1,  282,  271,  272,   -1,   -1,
   -1,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,  310,  311,  312,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,  257,   40,   41,   37,  323,   44,
   -1,   41,   -1,   43,   44,   -1,   46,   47,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   62,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   91,  310,  311,  312,
  313,   91,   37,   93,   94,   -1,   41,   -1,   43,   44,
  323,   46,   47,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   59,   60,   61,   62,   -1,  273,
  274,   -1,  257,   -1,  124,  125,   -1,  262,  282,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   91,  282,   93,   94,
   37,   -1,   -1,   -1,   41,   42,   43,   44,   45,   37,
   47,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,  124,
  125,   59,   -1,   61,   -1,   37,   -1,   -1,   -1,   41,
   42,   43,   44,   45,   -1,   47,   -1,   38,   -1,   40,
   41,   -1,   -1,   44,   -1,   -1,   93,   59,   -1,   61,
   -1,   -1,   -1,   -1,  257,   93,   -1,   -1,   -1,  262,
   -1,   62,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   40,   41,   -1,   -1,   44,  125,  282,
   -1,   93,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   91,   -1,  257,   -1,   -1,   62,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,  271,  272,  125,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,   -1,   -1,   91,  290,   40,   41,   -1,   -1,
   44,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   62,  314,
   -1,   -1,  312,  313,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   41,  323,   -1,   44,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,   -1,   -1,  312,  313,   -1,
  257,   -1,   -1,   -1,   93,   -1,   -1,   -1,  323,  257,
   -1,   -1,   -1,   -1,  271,  272,   41,   -1,   -1,   44,
   37,   38,   -1,  271,  272,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   59,  257,  125,   -1,   -1,   -1,
   -1,   -1,   59,   60,   61,   62,  257,   -1,   -1,  271,
  272,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,  323,   -1,   93,   -1,
   -1,  282,   -1,   -1,   91,  323,   -1,   94,   -1,  290,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   41,   -1,   -1,   44,  273,  274,   -1,   -1,
  125,  323,   -1,  314,   -1,  282,   -1,  124,  125,   41,
   59,  322,   44,  290,   -1,   -1,   -1,   41,   -1,   -1,
   44,   41,   -1,   -1,   44,   -1,   -1,   59,   41,   -1,
   -1,   44,   -1,  257,   -1,   59,   -1,  314,  262,   59,
   -1,  265,  266,  267,   93,  322,   59,   -1,   -1,  273,
  274,   -1,   41,   -1,   41,   44,   41,   44,  282,   44,
   -1,   93,   -1,   -1,   -1,   -1,  290,   -1,  257,   93,
   59,   -1,   59,   93,   59,   -1,  125,   -1,   41,   -1,
   93,   44,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,   -1,  125,   -1,   -1,   59,   -1,  322,   -1,
   -1,  125,   -1,   -1,   93,  125,   93,   -1,   93,   -1,
  257,   -1,  125,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   93,   -1,  257,   -1,  323,  282,  125,   -1,  125,   -1,
  125,   -1,   -1,   -1,   -1,   -1,  271,  272,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  125,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,   -1,  323,   -1,
  317,   -1,  319,  320,   -1,  314,  315,  316,  257,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  257,   -1,  271,
  272,   -1,   -1,   -1,  257,   -1,   -1,  271,  272,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,  257,   -1,
  257,   -1,  257,   -1,  323,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  272,  271,  272,  271,  272,   -1,   -1,
   -1,  323,   -1,   -1,  257,   94,   60,   -1,   62,  323,
   -1,   -1,   -1,  323,   -1,   -1,   -1,   -1,  271,  272,
  323,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   94,   -1,   -1,   -1,  323,   -1,  323,   -1,  323,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
  323,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   44,
   45,   46,   47,  124,   -1,  126,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,  124,  125,   -1,   91,   -1,   -1,   94,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  273,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   93,   94,   60,
   61,   62,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,  124,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   37,   -1,   -1,   40,   -1,   -1,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  124,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,  124,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
  124,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,  124,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,  124,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   60,   94,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   60,   94,   62,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,   94,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   94,   -1,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   37,
   38,   94,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  124,  310,  311,  312,
  313,   94,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   60,   94,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   60,   94,
   62,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   60,   -1,   62,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   94,   -1,  310,  311,  312,  313,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  126,   -1,  310,  311,  312,
  313,   94,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   94,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   60,   94,   62,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   60,   94,   62,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  257,  310,  311,  312,
  313,  262,   -1,   -1,  265,  266,  267,   94,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,  314,  315,  316,  317,   -1,  319,  320,
   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  126,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  126,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   38,   -1,   40,
   41,   42,  126,   44,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   62,  257,  310,  311,  312,  313,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   91,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,  126,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,  314,
  315,  316,  317,   -1,  319,  320,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,  315,
  316,  317,   -1,  319,  320,   -1,  322,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
  126,   -1,   -1,  257,   -1,  273,  274,   -1,  262,   -1,
   -1,  265,  266,  267,  282,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,  257,   -1,   -1,  282,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,  314,  315,  316,  317,
  282,  319,  320,   -1,  322,   -1,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,  257,  319,  320,   -1,  322,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,  314,  315,  316,   -1,  257,   -1,   -1,  282,
  322,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,
  267,  282,   -1,   -1,   -1,   -1,  273,  274,   -1,  290,
   -1,  314,  315,  316,  317,  282,  319,  320,   -1,  322,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,  314,  315,  316,
  317,  257,  319,  320,   -1,  322,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,  314,  315,
  316,  317,  257,  319,  320,   -1,  322,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  314,  315,
  316,  273,  274,   -1,   -1,   -1,  322,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
  315,  316,   -1,   -1,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,  314,  315,  316,   -1,   -1,   -1,   -1,   -1,
  322,
};
static int yyctable[] = {                                      1,
    2,  173,  183,  251,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  173,
  183,  251,   -1,    7,    2,   -1,    8,    2,  173,  183,
  251,   -1,    9,    2,  173,  183,  251,   -1,   10,    2,
  173,  183,  251,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  173,  183,
  251,   -1,   16,    2,  173,  183,  251,   -1,   17,    2,
   -1,   18,    2,  173,  183,  251,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,  173,   -1,   31,    2,   -1,   32,    2,   -1,
   33,    2,  173,  251,   -1,   34,    2,  173,  251,   -1,
   35,    2,  173,  251,   -1,   36,    2,  173,  251,   -1,
    2,  173,  251,   -1,   37,    2,   -1,   38,    2,  173,
  251,   -1,   39,    2,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   46,    2,   -1,   47,    2,   -1,  102,
  183,  252,   -1,    6,  183,  252,   -1,  103,  183,  252,
   -1,  104,  183,  252,   -1,  105,  183,  252,   -1,  106,
   61,  183,  252,   -1,   16,  183,  252,   -1,   18,   61,
  183,  252,   -1,  107,   61,   -1,   33,  252,   -1,   34,
  252,   -1,   35,  252,   -1,   38,  252,   -1,  110,  183,
  251,   -1,  183,  251,   -1,   33,  251,   -1,   38,  251,
   -1,  114,   64,   -1,    6,   64,   -1,  103,   64,   -1,
  104,   64,   -1,  105,   64,   -1,   15,   64,   -1,   16,
   64,   -1,   18,   64,   -1,  114,  237,   -1,    6,  237,
   -1,  103,  237,   -1,  104,  237,   -1,  105,  237,   -1,
   15,  237,   -1,   16,  237,   -1,   18,  237,   -1,  114,
  238,   -1,    6,  238,   -1,  103,  238,   -1,  104,  238,
   -1,  105,  238,   -1,   15,  238,   -1,   16,  238,   -1,
   18,  238,   -1,  114,  239,   -1,    6,  239,   -1,  103,
  239,   -1,  104,  239,   -1,  105,  239,   -1,   15,  239,
   -1,   16,  239,   -1,   18,  239,   -1,  114,   66,   -1,
    6,   66,   -1,  103,   66,   -1,  104,   66,   -1,  105,
   66,   -1,   15,   66,   -1,   16,   66,   -1,   18,   66,
   -1,  114,  321,   -1,   25,  321,   -1,   26,  321,   -1,
   27,  321,   -1,   28,  321,   -1,   29,  321,   -1,   32,
  321,   -1,  114,  183,   -1,    6,  183,   -1,  103,  183,
   -1,  104,  183,   -1,  105,  183,   -1,   15,  183,   -1,
   16,  183,   -1,   18,  183,   -1,    1,  173,  183,  251,
   -1,    6,  173,  183,  251,   -1,    8,  173,  183,  251,
   -1,    9,  173,  183,  251,   -1,   10,  173,  183,  251,
   -1,   15,  173,  183,  251,   -1,   16,  173,  183,  251,
   -1,   18,  173,  183,  251,   -1,   30,  173,   -1,   33,
  173,  251,   -1,   34,  173,  251,   -1,   35,  173,  251,
   -1,   36,  173,  251,   -1,  173,  251,   -1,   38,  173,
  251,   -1,  114,  319,   -1,   25,  319,   -1,   26,  319,
   -1,   27,  319,   -1,   28,  319,   -1,   29,  319,   -1,
   32,  319,   -1,  173,  183,   -1,   33,  173,   -1,   38,
  173,   -1,  217,  124,   -1,   74,  124,   -1,  238,  173,
  251,   -1,    6,  173,  251,   -1,    8,  173,  251,   -1,
    9,  173,  251,   -1,   10,  173,  251,   -1,   15,  173,
  251,   -1,   16,  173,  251,   -1,   18,  173,  251,   -1,
  283,   15,   -1,  295,  251,   -1,    6,  251,   -1,  103,
  251,   -1,  104,  251,   -1,  105,  251,   -1,   15,  251,
   -1,   16,  251,   -1,   18,  251,   -1,  300,  251,   -1,
   61,  254,   -1,  310,  183,  251,   -1,    6,  183,  251,
   -1,  103,  183,  251,   -1,  104,  183,  251,   -1,  105,
  183,  251,   -1,   15,  183,  251,   -1,   16,  183,  251,
   -1,   18,  183,  251,   -1,   34,  251,   -1,   35,  251,
   -1,  317,   74,   -1,  216,   74,   -1,  319,  252,   -1,
  317,   65,   -1,  216,   65,   -1,  217,   65,   -1,  317,
   68,   -1,  216,   68,   -1,  217,   68,   -1,  317,   69,
   -1,  216,   69,   -1,  217,   69,   -1,  317,   70,   -1,
  216,   70,   -1,  217,   70,   -1,  317,   62,   -1,  216,
   62,   -1,  217,   62,   -1,  317,   67,   -1,  216,   67,
   -1,  217,   67,   -1,  247,  320,   -1,  248,  320,   -1,
  249,  320,   -1,  250,  320,   -1,  251,  320,   -1,  252,
  320,   -1,  253,  320,   -1,  254,  320,   -1,  255,  320,
   -1,  256,  320,   -1,  257,  320,   -1,  258,  320,   -1,
  259,  320,   -1,  260,  320,   -1,  261,  320,   -1,  262,
  320,   -1,  263,  320,   -1,  264,  320,   -1,  265,  320,
   -1,  266,  320,   -1,  267,  320,   -1,  268,  320,   -1,
  269,  320,   -1,  270,  320,   -1,  271,  320,   -1,  272,
  320,   -1,  273,  320,   -1,  274,  320,   -1,  275,  320,
   -1,  276,  320,   -1,  277,  320,   -1,  278,  320,   -1,
  279,  320,   -1,  280,  320,   -1,  281,  320,   -1,  247,
  271,   -1,  248,  271,   -1,  249,  271,   -1,  250,  271,
   -1,  251,  271,   -1,  252,  271,   -1,  253,  271,   -1,
  254,  271,   -1,  255,  271,   -1,  256,  271,   -1,  257,
  271,   -1,  258,  271,   -1,  259,  271,   -1,  260,  271,
   -1,  261,  271,   -1,  262,  271,   -1,  263,  271,   -1,
  264,  271,   -1,  265,  271,   -1,  266,  271,   -1,  267,
  271,   -1,  268,  271,   -1,  269,  271,   -1,  270,  271,
   -1,  271,  271,   -1,  272,  271,   -1,  273,  271,   -1,
  274,  271,   -1,  275,  271,   -1,  276,  271,   -1,  277,
  271,   -1,  278,  271,   -1,  279,  271,   -1,  280,  271,
   -1,  281,  271,   -1,  247,  273,   -1,  248,  273,   -1,
  249,  273,   -1,  250,  273,   -1,  251,  273,   -1,  252,
  273,   -1,  253,  273,   -1,  254,  273,   -1,  255,  273,
   -1,  256,  273,   -1,  257,  273,   -1,  258,  273,   -1,
  259,  273,   -1,  260,  273,   -1,  261,  273,   -1,  262,
  273,   -1,  263,  273,   -1,  264,  273,   -1,  265,  273,
   -1,  266,  273,   -1,  267,  273,   -1,  268,  273,   -1,
  269,  273,   -1,  270,  273,   -1,  271,  273,   -1,  272,
  273,   -1,  273,  273,   -1,  274,  273,   -1,  275,  273,
   -1,  276,  273,   -1,  277,  273,   -1,  278,  273,   -1,
  279,  273,   -1,  280,  273,   -1,  281,  273,   -1,  247,
  266,   -1,  248,  266,   -1,  249,  266,   -1,  250,  266,
   -1,  251,  266,   -1,  252,  266,   -1,  253,  266,   -1,
  254,  266,   -1,  255,  266,   -1,  256,  266,   -1,  257,
  266,   -1,  258,  266,   -1,  259,  266,   -1,  260,  266,
   -1,  261,  266,   -1,  262,  266,   -1,  263,  266,   -1,
  264,  266,   -1,  265,  266,   -1,  266,  266,   -1,  267,
  266,   -1,  268,  266,   -1,  269,  266,   -1,  275,  266,
   -1,  247,  269,   -1,  248,  269,   -1,  249,  269,   -1,
  250,  269,   -1,  251,  269,   -1,  252,  269,   -1,  253,
  269,   -1,  254,  269,   -1,  255,  269,   -1,  256,  269,
   -1,  257,  269,   -1,  258,  269,   -1,  259,  269,   -1,
  260,  269,   -1,  261,  269,   -1,  262,  269,   -1,  263,
  269,   -1,  264,  269,   -1,  265,  269,   -1,  266,  269,
   -1,  267,  269,   -1,  268,  269,   -1,  269,  269,   -1,
  275,  269,   -1,  247,  270,   -1,  248,  270,   -1,  249,
  270,   -1,  250,  270,   -1,  251,  270,   -1,  252,  270,
   -1,  253,  270,   -1,  254,  270,   -1,  255,  270,   -1,
  256,  270,   -1,  257,  270,   -1,  258,  270,   -1,  259,
  270,   -1,  260,  270,   -1,  261,  270,   -1,  262,  270,
   -1,  263,  270,   -1,  264,  270,   -1,  265,  270,   -1,
  266,  270,   -1,  267,  270,   -1,  268,  270,   -1,  269,
  270,   -1,  275,  270,   -1,  343,   61,   -1,  247,  267,
   -1,  248,  267,   -1,  249,  267,   -1,  250,  267,   -1,
  251,  267,   -1,  252,  267,   -1,  253,  267,   -1,  254,
  267,   -1,  255,  267,   -1,  256,  267,   -1,  257,  267,
   -1,  258,  267,   -1,  259,  267,   -1,  260,  267,   -1,
  261,  267,   -1,  262,  267,   -1,  263,  267,   -1,  264,
  267,   -1,  265,  267,   -1,  266,  267,   -1,  267,  267,
   -1,  268,  267,   -1,  269,  267,   -1,  275,  267,   -1,
  247,  268,   -1,  248,  268,   -1,  249,  268,   -1,  250,
  268,   -1,  251,  268,   -1,  252,  268,   -1,  253,  268,
   -1,  254,  268,   -1,  255,  268,   -1,  256,  268,   -1,
  257,  268,   -1,  258,  268,   -1,  259,  268,   -1,  260,
  268,   -1,  261,  268,   -1,  262,  268,   -1,  263,  268,
   -1,  264,  268,   -1,  265,  268,   -1,  266,  268,   -1,
  267,  268,   -1,  268,  268,   -1,  269,  268,   -1,  275,
  268,   -1,  247,  315,   -1,  248,  315,   -1,  249,  315,
   -1,  250,  315,   -1,  251,  315,   -1,  252,  315,   -1,
  253,  315,   -1,  254,  315,   -1,  255,  315,   -1,  256,
  315,   -1,  257,  315,   -1,  258,  315,   -1,  259,  315,
   -1,  260,  315,   -1,  261,  315,   -1,  262,  315,   -1,
  263,  315,   -1,  264,  315,   -1,  265,  315,   -1,  266,
  315,   -1,  267,  315,   -1,  268,  315,   -1,  269,  315,
   -1,  270,  315,   -1,  271,  315,   -1,  272,  315,   -1,
  273,  315,   -1,  274,  315,   -1,  275,  315,   -1,  276,
  315,   -1,  277,  315,   -1,  278,  315,   -1,  279,  315,
   -1,  280,  315,   -1,  281,  315,   -1,  247,  316,   -1,
  248,  316,   -1,  249,  316,   -1,  250,  316,   -1,  251,
  316,   -1,  252,  316,   -1,  253,  316,   -1,  254,  316,
   -1,  255,  316,   -1,  256,  316,   -1,  257,  316,   -1,
  258,  316,   -1,  259,  316,   -1,  260,  316,   -1,  261,
  316,   -1,  262,  316,   -1,  263,  316,   -1,  264,  316,
   -1,  265,  316,   -1,  266,  316,   -1,  267,  316,   -1,
  268,  316,   -1,  269,  316,   -1,  270,  316,   -1,  271,
  316,   -1,  272,  316,   -1,  273,  316,   -1,  274,  316,
   -1,  275,  316,   -1,  276,  316,   -1,  277,  316,   -1,
  278,  316,   -1,  279,  316,   -1,  280,  316,   -1,  281,
  316,   -1,  247,  318,   -1,  248,  318,   -1,  249,  318,
   -1,  250,  318,   -1,  251,  318,   -1,  252,  318,   -1,
  253,  318,   -1,  254,  318,   -1,  255,  318,   -1,  256,
  318,   -1,  257,  318,   -1,  258,  318,   -1,  259,  318,
   -1,  260,  318,   -1,  261,  318,   -1,  262,  318,   -1,
  263,  318,   -1,  264,  318,   -1,  265,  318,   -1,  266,
  318,   -1,  267,  318,   -1,  268,  318,   -1,  269,  318,
   -1,  270,  318,   -1,  271,  318,   -1,  272,  318,   -1,
  273,  318,   -1,  274,  318,   -1,  275,  318,   -1,  276,
  318,   -1,  277,  318,   -1,  278,  318,   -1,  279,  318,
   -1,  280,  318,   -1,  281,  318,   -1,  110,  251,   -1,
   33,  183,   -1,   38,  183,   -1,  387,   61,  252,   -1,
   61,  252,   -1,  196,  197,   -1,  288,  196,   -1,  320,
  194,   -1,  114,  250,   -1,  463,   44,   -1,  464,   44,
   -1,  465,   44,   -1,  466,   44,   -1,  477,   61,   -1,
  317,   63,   -1,  216,   63,   -1,  217,   63,   -1,  247,
  286,   -1,  248,  286,   -1,  249,  286,   -1,  250,  286,
   -1,  251,  286,   -1,  252,  286,   -1,  253,  286,   -1,
  254,  286,   -1,  255,  286,   -1,  256,  286,   -1,  257,
  286,   -1,  258,  286,   -1,  259,  286,   -1,  260,  286,
   -1,  261,  286,   -1,  262,  286,   -1,  263,  286,   -1,
  264,  286,   -1,  265,  286,   -1,  266,  286,   -1,  267,
  286,   -1,  268,  286,   -1,  269,  286,   -1,  270,  286,
   -1,  271,  286,   -1,  272,  286,   -1,  273,  286,   -1,
  274,  286,   -1,  275,  286,   -1,  276,  286,   -1,  277,
  286,   -1,  278,  286,   -1,  279,  286,   -1,  280,  286,
   -1,  281,  286,   -1,  247,  287,   -1,  248,  287,   -1,
  249,  287,   -1,  250,  287,   -1,  251,  287,   -1,  252,
  287,   -1,  253,  287,   -1,  254,  287,   -1,  255,  287,
   -1,  256,  287,   -1,  257,  287,   -1,  258,  287,   -1,
  259,  287,   -1,  260,  287,   -1,  261,  287,   -1,  262,
  287,   -1,  263,  287,   -1,  264,  287,   -1,  265,  287,
   -1,  266,  287,   -1,  267,  287,   -1,  268,  287,   -1,
  269,  287,   -1,  270,  287,   -1,  271,  287,   -1,  272,
  287,   -1,  273,  287,   -1,  274,  287,   -1,  275,  287,
   -1,  276,  287,   -1,  277,  287,   -1,  278,  287,   -1,
  279,  287,   -1,  280,  287,   -1,  281,  287,   -1,  247,
  288,   -1,  248,  288,   -1,  249,  288,   -1,  250,  288,
   -1,  251,  288,   -1,  252,  288,   -1,  253,  288,   -1,
  254,  288,   -1,  255,  288,   -1,  256,  288,   -1,  257,
  288,   -1,  258,  288,   -1,  259,  288,   -1,  260,  288,
   -1,  261,  288,   -1,  262,  288,   -1,  263,  288,   -1,
  264,  288,   -1,  265,  288,   -1,  266,  288,   -1,  267,
  288,   -1,  268,  288,   -1,  269,  288,   -1,  270,  288,
   -1,  271,  288,   -1,  272,  288,   -1,  273,  288,   -1,
  274,  288,   -1,  275,  288,   -1,  276,  288,   -1,  277,
  288,   -1,  278,  288,   -1,  279,  288,   -1,  280,  288,
   -1,  281,  288,   -1,  247,  289,   -1,  248,  289,   -1,
  249,  289,   -1,  250,  289,   -1,  251,  289,   -1,  252,
  289,   -1,  253,  289,   -1,  254,  289,   -1,  255,  289,
   -1,  256,  289,   -1,  257,  289,   -1,  258,  289,   -1,
  259,  289,   -1,  260,  289,   -1,  261,  289,   -1,  262,
  289,   -1,  263,  289,   -1,  264,  289,   -1,  265,  289,
   -1,  266,  289,   -1,  267,  289,   -1,  268,  289,   -1,
  269,  289,   -1,  270,  289,   -1,  271,  289,   -1,  272,
  289,   -1,  273,  289,   -1,  274,  289,   -1,  275,  289,
   -1,  276,  289,   -1,  277,  289,   -1,  278,  289,   -1,
  279,  289,   -1,  280,  289,   -1,  281,  289,   -1,  247,
  290,   -1,  248,  290,   -1,  249,  290,   -1,  250,  290,
   -1,  251,  290,   -1,  252,  290,   -1,  253,  290,   -1,
  254,  290,   -1,  255,  290,   -1,  256,  290,   -1,  257,
  290,   -1,  258,  290,   -1,  259,  290,   -1,  260,  290,
   -1,  261,  290,   -1,  262,  290,   -1,  263,  290,   -1,
  264,  290,   -1,  265,  290,   -1,  266,  290,   -1,  267,
  290,   -1,  268,  290,   -1,  269,  290,   -1,  270,  290,
   -1,  271,  290,   -1,  272,  290,   -1,  273,  290,   -1,
  274,  290,   -1,  275,  290,   -1,  276,  290,   -1,  277,
  290,   -1,  278,  290,   -1,  279,  290,   -1,  280,  290,
   -1,  281,  290,   -1,  247,  291,   -1,  248,  291,   -1,
  249,  291,   -1,  250,  291,   -1,  251,  291,   -1,  252,
  291,   -1,  253,  291,   -1,  254,  291,   -1,  255,  291,
   -1,  256,  291,   -1,  257,  291,   -1,  258,  291,   -1,
  259,  291,   -1,  260,  291,   -1,  261,  291,   -1,  262,
  291,   -1,  263,  291,   -1,  264,  291,   -1,  265,  291,
   -1,  266,  291,   -1,  267,  291,   -1,  268,  291,   -1,
  269,  291,   -1,  270,  291,   -1,  271,  291,   -1,  272,
  291,   -1,  273,  291,   -1,  274,  291,   -1,  275,  291,
   -1,  276,  291,   -1,  277,  291,   -1,  278,  291,   -1,
  279,  291,   -1,  280,  291,   -1,  281,  291,   -1,  247,
  292,   -1,  248,  292,   -1,  249,  292,   -1,  250,  292,
   -1,  251,  292,   -1,  252,  292,   -1,  253,  292,   -1,
  254,  292,   -1,  255,  292,   -1,  256,  292,   -1,  257,
  292,   -1,  258,  292,   -1,  259,  292,   -1,  260,  292,
   -1,  261,  292,   -1,  262,  292,   -1,  263,  292,   -1,
  264,  292,   -1,  265,  292,   -1,  266,  292,   -1,  267,
  292,   -1,  268,  292,   -1,  269,  292,   -1,  270,  292,
   -1,  271,  292,   -1,  272,  292,   -1,  273,  292,   -1,
  274,  292,   -1,  275,  292,   -1,  276,  292,   -1,  277,
  292,   -1,  278,  292,   -1,  279,  292,   -1,  280,  292,
   -1,  281,  292,   -1,  247,  293,   -1,  248,  293,   -1,
  249,  293,   -1,  250,  293,   -1,  251,  293,   -1,  252,
  293,   -1,  253,  293,   -1,  254,  293,   -1,  255,  293,
   -1,  256,  293,   -1,  257,  293,   -1,  258,  293,   -1,
  259,  293,   -1,  260,  293,   -1,  261,  293,   -1,  262,
  293,   -1,  263,  293,   -1,  264,  293,   -1,  265,  293,
   -1,  266,  293,   -1,  267,  293,   -1,  268,  293,   -1,
  269,  293,   -1,  270,  293,   -1,  271,  293,   -1,  272,
  293,   -1,  273,  293,   -1,  274,  293,   -1,  275,  293,
   -1,  276,  293,   -1,  277,  293,   -1,  278,  293,   -1,
  279,  293,   -1,  280,  293,   -1,  281,  293,   -1,  247,
  294,   -1,  248,  294,   -1,  249,  294,   -1,  250,  294,
   -1,  251,  294,   -1,  252,  294,   -1,  253,  294,   -1,
  254,  294,   -1,  255,  294,   -1,  256,  294,   -1,  257,
  294,   -1,  258,  294,   -1,  259,  294,   -1,  260,  294,
   -1,  261,  294,   -1,  262,  294,   -1,  263,  294,   -1,
  264,  294,   -1,  265,  294,   -1,  266,  294,   -1,  267,
  294,   -1,  268,  294,   -1,  269,  294,   -1,  275,  294,
   -1,  247,  295,   -1,  248,  295,   -1,  249,  295,   -1,
  250,  295,   -1,  251,  295,   -1,  252,  295,   -1,  253,
  295,   -1,  254,  295,   -1,  255,  295,   -1,  256,  295,
   -1,  257,  295,   -1,  258,  295,   -1,  259,  295,   -1,
  260,  295,   -1,  261,  295,   -1,  262,  295,   -1,  263,
  295,   -1,  264,  295,   -1,  265,  295,   -1,  266,  295,
   -1,  267,  295,   -1,  268,  295,   -1,  269,  295,   -1,
  275,  295,   -1,  247,  296,   -1,  248,  296,   -1,  249,
  296,   -1,  250,  296,   -1,  251,  296,   -1,  252,  296,
   -1,  253,  296,   -1,  254,  296,   -1,  255,  296,   -1,
  256,  296,   -1,  257,  296,   -1,  258,  296,   -1,  259,
  296,   -1,  260,  296,   -1,  261,  296,   -1,  262,  296,
   -1,  263,  296,   -1,  264,  296,   -1,  265,  296,   -1,
  266,  296,   -1,  267,  296,   -1,  268,  296,   -1,  269,
  296,   -1,  270,  296,   -1,  271,  296,   -1,  272,  296,
   -1,  273,  296,   -1,  274,  296,   -1,  275,  296,   -1,
  276,  296,   -1,  277,  296,   -1,  278,  296,   -1,  279,
  296,   -1,  280,  296,   -1,  281,  296,   -1,  247,  297,
   -1,  248,  297,   -1,  249,  297,   -1,  250,  297,   -1,
  251,  297,   -1,  252,  297,   -1,  253,  297,   -1,  254,
  297,   -1,  255,  297,   -1,  256,  297,   -1,  257,  297,
   -1,  258,  297,   -1,  259,  297,   -1,  260,  297,   -1,
  261,  297,   -1,  262,  297,   -1,  263,  297,   -1,  264,
  297,   -1,  265,  297,   -1,  266,  297,   -1,  267,  297,
   -1,  268,  297,   -1,  269,  297,   -1,  270,  297,   -1,
  271,  297,   -1,  272,  297,   -1,  273,  297,   -1,  274,
  297,   -1,  275,  297,   -1,  276,  297,   -1,  277,  297,
   -1,  278,  297,   -1,  279,  297,   -1,  280,  297,   -1,
  281,  297,   -1,  247,  298,   -1,  248,  298,   -1,  249,
  298,   -1,  250,  298,   -1,  251,  298,   -1,  252,  298,
   -1,  253,  298,   -1,  254,  298,   -1,  255,  298,   -1,
  256,  298,   -1,  257,  298,   -1,  258,  298,   -1,  259,
  298,   -1,  260,  298,   -1,  261,  298,   -1,  262,  298,
   -1,  263,  298,   -1,  264,  298,   -1,  265,  298,   -1,
  266,  298,   -1,  267,  298,   -1,  268,  298,   -1,  269,
  298,   -1,  275,  298,   -1,  247,  299,   -1,  248,  299,
   -1,  249,  299,   -1,  250,  299,   -1,  251,  299,   -1,
  252,  299,   -1,  253,  299,   -1,  254,  299,   -1,  255,
  299,   -1,  256,  299,   -1,  257,  299,   -1,  258,  299,
   -1,  259,  299,   -1,  260,  299,   -1,  261,  299,   -1,
  262,  299,   -1,  263,  299,   -1,  264,  299,   -1,  265,
  299,   -1,  266,  299,   -1,  267,  299,   -1,  268,  299,
   -1,  269,  299,   -1,  270,  299,   -1,  271,  299,   -1,
  272,  299,   -1,  273,  299,   -1,  274,  299,   -1,  275,
  299,   -1,  276,  299,   -1,  277,  299,   -1,  278,  299,
   -1,  279,  299,   -1,  280,  299,   -1,  281,  299,   -1,
  247,  300,   -1,  248,  300,   -1,  249,  300,   -1,  250,
  300,   -1,  251,  300,   -1,  252,  300,   -1,  253,  300,
   -1,  254,  300,   -1,  255,  300,   -1,  256,  300,   -1,
  257,  300,   -1,  258,  300,   -1,  259,  300,   -1,  260,
  300,   -1,  261,  300,   -1,  262,  300,   -1,  263,  300,
   -1,  264,  300,   -1,  265,  300,   -1,  266,  300,   -1,
  267,  300,   -1,  268,  300,   -1,  269,  300,   -1,  270,
  300,   -1,  271,  300,   -1,  272,  300,   -1,  273,  300,
   -1,  274,  300,   -1,  275,  300,   -1,  276,  300,   -1,
  277,  300,   -1,  278,  300,   -1,  279,  300,   -1,  280,
  300,   -1,  281,  300,   -1,  247,  301,   -1,  248,  301,
   -1,  249,  301,   -1,  250,  301,   -1,  251,  301,   -1,
  252,  301,   -1,  253,  301,   -1,  254,  301,   -1,  255,
  301,   -1,  256,  301,   -1,  257,  301,   -1,  258,  301,
   -1,  259,  301,   -1,  260,  301,   -1,  261,  301,   -1,
  262,  301,   -1,  263,  301,   -1,  264,  301,   -1,  265,
  301,   -1,  266,  301,   -1,  267,  301,   -1,  268,  301,
   -1,  269,  301,   -1,  270,  301,   -1,  271,  301,   -1,
  272,  301,   -1,  273,  301,   -1,  274,  301,   -1,  275,
  301,   -1,  276,  301,   -1,  277,  301,   -1,  278,  301,
   -1,  279,  301,   -1,  280,  301,   -1,  281,  301,   -1,
  247,  302,   -1,  248,  302,   -1,  249,  302,   -1,  250,
  302,   -1,  251,  302,   -1,  252,  302,   -1,  253,  302,
   -1,  254,  302,   -1,  255,  302,   -1,  256,  302,   -1,
  257,  302,   -1,  258,  302,   -1,  259,  302,   -1,  260,
  302,   -1,  261,  302,   -1,  262,  302,   -1,  263,  302,
   -1,  264,  302,   -1,  265,  302,   -1,  266,  302,   -1,
  267,  302,   -1,  268,  302,   -1,  269,  302,   -1,  270,
  302,   -1,  271,  302,   -1,  272,  302,   -1,  273,  302,
   -1,  274,  302,   -1,  275,  302,   -1,  276,  302,   -1,
  277,  302,   -1,  278,  302,   -1,  279,  302,   -1,  280,
  302,   -1,  281,  302,   -1,  247,  304,   -1,  248,  304,
   -1,  249,  304,   -1,  250,  304,   -1,  251,  304,   -1,
  252,  304,   -1,  253,  304,   -1,  254,  304,   -1,  255,
  304,   -1,  256,  304,   -1,  257,  304,   -1,  258,  304,
   -1,  259,  304,   -1,  260,  304,   -1,  261,  304,   -1,
  262,  304,   -1,  263,  304,   -1,  264,  304,   -1,  265,
  304,   -1,  266,  304,   -1,  267,  304,   -1,  268,  304,
   -1,  269,  304,   -1,  275,  304,   -1,  247,  305,   -1,
  248,  305,   -1,  249,  305,   -1,  250,  305,   -1,  251,
  305,   -1,  252,  305,   -1,  253,  305,   -1,  254,  305,
   -1,  255,  305,   -1,  256,  305,   -1,  257,  305,   -1,
  258,  305,   -1,  259,  305,   -1,  260,  305,   -1,  261,
  305,   -1,  262,  305,   -1,  263,  305,   -1,  264,  305,
   -1,  265,  305,   -1,  266,  305,   -1,  267,  305,   -1,
  268,  305,   -1,  269,  305,   -1,  270,  305,   -1,  271,
  305,   -1,  272,  305,   -1,  273,  305,   -1,  274,  305,
   -1,  275,  305,   -1,  276,  305,   -1,  277,  305,   -1,
  278,  305,   -1,  279,  305,   -1,  280,  305,   -1,  281,
  305,   -1,  247,  284,   -1,  248,  284,   -1,  249,  284,
   -1,  250,  284,   -1,  251,  284,   -1,  252,  284,   -1,
  253,  284,   -1,  254,  284,   -1,  255,  284,   -1,  256,
  284,   -1,  257,  284,   -1,  258,  284,   -1,  259,  284,
   -1,  260,  284,   -1,  261,  284,   -1,  262,  284,   -1,
  263,  284,   -1,  264,  284,   -1,  265,  284,   -1,  266,
  284,   -1,  267,  284,   -1,  268,  284,   -1,  269,  284,
   -1,  270,  284,   -1,  271,  284,   -1,  272,  284,   -1,
  273,  284,   -1,  274,  284,   -1,  275,  284,   -1,  276,
  284,   -1,  277,  284,   -1,  278,  284,   -1,  279,  284,
   -1,  280,  284,   -1,  281,  284,   -1,  247,  285,   -1,
  248,  285,   -1,  249,  285,   -1,  250,  285,   -1,  251,
  285,   -1,  252,  285,   -1,  253,  285,   -1,  254,  285,
   -1,  255,  285,   -1,  256,  285,   -1,  257,  285,   -1,
  258,  285,   -1,  259,  285,   -1,  260,  285,   -1,  261,
  285,   -1,  262,  285,   -1,  263,  285,   -1,  264,  285,
   -1,  265,  285,   -1,  266,  285,   -1,  267,  285,   -1,
  268,  285,   -1,  269,  285,   -1,  270,  285,   -1,  271,
  285,   -1,  272,  285,   -1,  273,  285,   -1,  274,  285,
   -1,  275,  285,   -1,  276,  285,   -1,  277,  285,   -1,
  278,  285,   -1,  279,  285,   -1,  280,  285,   -1,  281,
  285,   -1,  247,  275,   -1,  248,  275,   -1,  249,  275,
   -1,  250,  275,   -1,  251,  275,   -1,  252,  275,   -1,
  253,  275,   -1,  254,  275,   -1,  255,  275,   -1,  256,
  275,   -1,  257,  275,   -1,  258,  275,   -1,  259,  275,
   -1,  260,  275,   -1,  261,  275,   -1,  262,  275,   -1,
  263,  275,   -1,  264,  275,   -1,  265,  275,   -1,  266,
  275,   -1,  267,  275,   -1,  268,  275,   -1,  269,  275,
   -1,  275,  275,   -1,  247,  276,   -1,  248,  276,   -1,
  249,  276,   -1,  250,  276,   -1,  251,  276,   -1,  252,
  276,   -1,  253,  276,   -1,  254,  276,   -1,  255,  276,
   -1,  256,  276,   -1,  257,  276,   -1,  258,  276,   -1,
  259,  276,   -1,  260,  276,   -1,  261,  276,   -1,  262,
  276,   -1,  263,  276,   -1,  264,  276,   -1,  265,  276,
   -1,  266,  276,   -1,  267,  276,   -1,  268,  276,   -1,
  269,  276,   -1,  275,  276,   -1,  247,  277,   -1,  248,
  277,   -1,  249,  277,   -1,  250,  277,   -1,  251,  277,
   -1,  252,  277,   -1,  253,  277,   -1,  254,  277,   -1,
  255,  277,   -1,  256,  277,   -1,  257,  277,   -1,  258,
  277,   -1,  259,  277,   -1,  260,  277,   -1,  261,  277,
   -1,  262,  277,   -1,  263,  277,   -1,  264,  277,   -1,
  265,  277,   -1,  266,  277,   -1,  267,  277,   -1,  268,
  277,   -1,  269,  277,   -1,  275,  277,   -1,  247,  278,
   -1,  248,  278,   -1,  249,  278,   -1,  250,  278,   -1,
  251,  278,   -1,  252,  278,   -1,  253,  278,   -1,  254,
  278,   -1,  255,  278,   -1,  256,  278,   -1,  257,  278,
   -1,  258,  278,   -1,  259,  278,   -1,  260,  278,   -1,
  261,  278,   -1,  262,  278,   -1,  263,  278,   -1,  264,
  278,   -1,  265,  278,   -1,  266,  278,   -1,  267,  278,
   -1,  268,  278,   -1,  269,  278,   -1,  275,  278,   -1,
  247,  279,   -1,  248,  279,   -1,  249,  279,   -1,  250,
  279,   -1,  251,  279,   -1,  252,  279,   -1,  253,  279,
   -1,  254,  279,   -1,  255,  279,   -1,  256,  279,   -1,
  257,  279,   -1,  258,  279,   -1,  259,  279,   -1,  260,
  279,   -1,  261,  279,   -1,  262,  279,   -1,  263,  279,
   -1,  264,  279,   -1,  265,  279,   -1,  266,  279,   -1,
  267,  279,   -1,  268,  279,   -1,  269,  279,   -1,  275,
  279,   -1,  247,  282,   -1,  248,  282,   -1,  249,  282,
   -1,  250,  282,   -1,  251,  282,   -1,  252,  282,   -1,
  253,  282,   -1,  254,  282,   -1,  255,  282,   -1,  256,
  282,   -1,  257,  282,   -1,  258,  282,   -1,  259,  282,
   -1,  260,  282,   -1,  261,  282,   -1,  262,  282,   -1,
  263,  282,   -1,  264,  282,   -1,  265,  282,   -1,  266,
  282,   -1,  267,  282,   -1,  268,  282,   -1,  269,  282,
   -1,  270,  282,   -1,  271,  282,   -1,  272,  282,   -1,
  273,  282,   -1,  274,  282,   -1,  275,  282,   -1,  276,
  282,   -1,  277,  282,   -1,  278,  282,   -1,  279,  282,
   -1,  280,  282,   -1,  281,  282,   -1,  247,  280,   -1,
  248,  280,   -1,  249,  280,   -1,  250,  280,   -1,  251,
  280,   -1,  252,  280,   -1,  253,  280,   -1,  254,  280,
   -1,  255,  280,   -1,  256,  280,   -1,  257,  280,   -1,
  258,  280,   -1,  259,  280,   -1,  260,  280,   -1,  261,
  280,   -1,  262,  280,   -1,  263,  280,   -1,  264,  280,
   -1,  265,  280,   -1,  266,  280,   -1,  267,  280,   -1,
  268,  280,   -1,  269,  280,   -1,  275,  280,   -1,  247,
  281,   -1,  248,  281,   -1,  249,  281,   -1,  250,  281,
   -1,  251,  281,   -1,  252,  281,   -1,  253,  281,   -1,
  254,  281,   -1,  255,  281,   -1,  256,  281,   -1,  257,
  281,   -1,  258,  281,   -1,  259,  281,   -1,  260,  281,
   -1,  261,  281,   -1,  262,  281,   -1,  263,  281,   -1,
  264,  281,   -1,  265,  281,   -1,  266,  281,   -1,  267,
  281,   -1,  268,  281,   -1,  269,  281,   -1,  275,  281,
   -1,  247,  283,   -1,  248,  283,   -1,  249,  283,   -1,
  250,  283,   -1,  251,  283,   -1,  252,  283,   -1,  253,
  283,   -1,  254,  283,   -1,  255,  283,   -1,  256,  283,
   -1,  257,  283,   -1,  258,  283,   -1,  259,  283,   -1,
  260,  283,   -1,  261,  283,   -1,  262,  283,   -1,  263,
  283,   -1,  264,  283,   -1,  265,  283,   -1,  266,  283,
   -1,  267,  283,   -1,  268,  283,   -1,  269,  283,   -1,
  275,  283,   -1,  247,  303,   -1,  248,  303,   -1,  249,
  303,   -1,  250,  303,   -1,  251,  303,   -1,  252,  303,
   -1,  253,  303,   -1,  254,  303,   -1,  255,  303,   -1,
  256,  303,   -1,  257,  303,   -1,  258,  303,   -1,  259,
  303,   -1,  260,  303,   -1,  261,  303,   -1,  262,  303,
   -1,  263,  303,   -1,  264,  303,   -1,  265,  303,   -1,
  266,  303,   -1,  267,  303,   -1,  268,  303,   -1,  269,
  303,   -1,  275,  303,   -1,  295,  183,  251,   -1,  247,
  309,   -1,  248,  309,   -1,  249,  309,   -1,  250,  309,
   -1,  251,  309,   -1,  252,  309,   -1,  253,  309,   -1,
  254,  309,   -1,  255,  309,   -1,  256,  309,   -1,  257,
  309,   -1,  258,  309,   -1,  259,  309,   -1,  260,  309,
   -1,  261,  309,   -1,  262,  309,   -1,  263,  309,   -1,
  264,  309,   -1,  265,  309,   -1,  266,  309,   -1,  267,
  309,   -1,  268,  309,   -1,  269,  309,   -1,  270,  309,
   -1,  271,  309,   -1,  272,  309,   -1,  273,  309,   -1,
  274,  309,   -1,  275,  309,   -1,  276,  309,   -1,  277,
  309,   -1,  278,  309,   -1,  279,  309,   -1,  280,  309,
   -1,  281,  309,   -1,  247,  317,   -1,  248,  317,   -1,
  249,  317,   -1,  250,  317,   -1,  251,  317,   -1,  252,
  317,   -1,  253,  317,   -1,  254,  317,   -1,  255,  317,
   -1,  256,  317,   -1,  257,  317,   -1,  258,  317,   -1,
  259,  317,   -1,  260,  317,   -1,  261,  317,   -1,  262,
  317,   -1,  263,  317,   -1,  264,  317,   -1,  265,  317,
   -1,  266,  317,   -1,  267,  317,   -1,  268,  317,   -1,
  269,  317,   -1,  270,  317,   -1,  271,  317,   -1,  272,
  317,   -1,  273,  317,   -1,  274,  317,   -1,  275,  317,
   -1,  276,  317,   -1,  277,  317,   -1,  278,  317,   -1,
  279,  317,   -1,  280,  317,   -1,  281,  317,   -1,  535,
   61,   -1,  509,   84,   -1,   13,   84,   -1,   14,   84,
   -1,  511,   84,   -1,  269,  248,   -1,
};
#define YYFINAL 48
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 351
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknTry","tknCatch","tknThrow",
"tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq","tknPerEq",
"tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift","tknLShiftEq",
"tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq","tkn3WayCmp",
"tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar","tknConst",
"tknStatic","tknExtern","tknVirtual","tknOverride","tknInline","tknExplicit",
"tknFriend","tknVolatile","tknPreProHash","tknDefine","tknUndef","tknInclude",
"tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor",
"tknWhile","tknDo","tknSwitch","tknCase","tknNew","tknDelete","tknReturn",
"tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX","POSTFIX",
"PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1059 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3548 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 281 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 3938 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 288 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 3944 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 289 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3954 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 294 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3964 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 3970 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 3976 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 3982 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3988 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3994 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4000 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4006 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4012 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4018 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4024 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4030 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4036 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4042 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4048 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4054 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4060 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4066 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4072 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4078 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4084 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4090 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4096 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4102 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4108 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4114 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4120 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4126 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4132 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4138 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4144 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4152 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4161 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4170 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4179 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 354 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4188 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 360 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4196 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4204 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 368 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4212 "y_tab.c"
break;
case 43:
#line 373 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4217 "y_tab.c"
  if (!yytrial)
#line 373 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4224 "y_tab.c"
break;
case 44:
#line 377 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4229 "y_tab.c"
  if (!yytrial)
#line 377 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4236 "y_tab.c"
break;
case 45:
#line 381 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4241 "y_tab.c"
  if (!yytrial)
#line 381 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4248 "y_tab.c"
break;
case 46:
#line 385 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4253 "y_tab.c"
  if (!yytrial)
#line 385 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4260 "y_tab.c"
break;
case 47:
#line 389 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4265 "y_tab.c"
  if (!yytrial)
#line 389 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4272 "y_tab.c"
break;
case 48:
#line 393 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4277 "y_tab.c"
  if (!yytrial)
#line 393 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4284 "y_tab.c"
break;
case 49:
#line 399 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4289 "y_tab.c"
  if (!yytrial)
#line 399 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4293 "y_tab.c"
break;
case 50:
#line 402 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4298 "y_tab.c"
  if (!yytrial)
#line 402 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4302 "y_tab.c"
break;
case 51:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4307 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4311 "y_tab.c"
break;
case 52:
#line 409 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4316 "y_tab.c"
  if (!yytrial)
#line 409 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4320 "y_tab.c"
break;
case 53:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4325 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4329 "y_tab.c"
break;
case 54:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4334 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4338 "y_tab.c"
break;
case 55:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4343 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4347 "y_tab.c"
break;
case 56:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4352 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4356 "y_tab.c"
break;
case 57:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4361 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4365 "y_tab.c"
break;
case 58:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4370 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4374 "y_tab.c"
break;
case 59:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4379 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4383 "y_tab.c"
break;
case 60:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4388 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4392 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 424 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4398 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4404 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4410 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4416 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4422 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4428 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4434 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4440 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4446 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4452 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4458 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4464 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4473 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4479 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4485 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4491 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 449 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4497 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4503 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4509 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4515 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4521 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4530 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4539 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4547 "y_tab.c"
break;
case 85:
#line 469 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4552 "y_tab.c"
  if (!yytrial)
#line 469 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4558 "y_tab.c"
break;
case 86:
#line 472 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4563 "y_tab.c"
  if (!yytrial)
#line 472 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4569 "y_tab.c"
break;
case 87:
#line 475 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4574 "y_tab.c"
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4580 "y_tab.c"
break;
case 88:
#line 478 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4585 "y_tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4591 "y_tab.c"
break;
case 89:
#line 482 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4596 "y_tab.c"
  if (!yytrial)
#line 482 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4602 "y_tab.c"
break;
case 90:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4607 "y_tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4613 "y_tab.c"
break;
case 91:
#line 488 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4618 "y_tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4624 "y_tab.c"
break;
case 92:
#line 493 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4629 "y_tab.c"
  if (!yytrial)
#line 493 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4633 "y_tab.c"
break;
case 93:
#line 494 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4638 "y_tab.c"
  if (!yytrial)
#line 494 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4642 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4648 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4657 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 506 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4663 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4674 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 515 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4684 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 520 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4695 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 526 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4705 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 531 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4716 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 537 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4726 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 546 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4734 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 549 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4742 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 552 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4750 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 558 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4758 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 561 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4767 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4775 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 570 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4781 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 571 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4787 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 4795 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 4804 "y_tab.c"
break;
case 113:
#line 583 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4809 "y_tab.c"
  if (!yytrial)
#line 583 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 4815 "y_tab.c"
break;
case 114:
#line 586 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4820 "y_tab.c"
  if (!yytrial)
#line 586 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 4827 "y_tab.c"
break;
case 115:
#line 592 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4832 "y_tab.c"
  if (!yytrial)
#line 592 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4836 "y_tab.c"
break;
case 116:
#line 595 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4841 "y_tab.c"
  if (!yytrial)
#line 595 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4848 "y_tab.c"
break;
case 117:
#line 601 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4853 "y_tab.c"
  if (!yytrial)
#line 601 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4860 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 606 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4870 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 611 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4880 "y_tab.c"
break;
case 120:
#line 618 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4885 "y_tab.c"
  if (!yytrial)
#line 618 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 4889 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4899 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 626 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4909 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 4918 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4924 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4930 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4936 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4942 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4948 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4954 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4960 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4966 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4972 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4978 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4984 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4990 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4996 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5002 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5008 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5014 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5020 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5026 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5032 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5038 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5044 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5050 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5056 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5062 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5068 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5074 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5080 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5086 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5092 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5098 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5104 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5110 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5116 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5122 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5128 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5134 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5140 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5146 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5152 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5158 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5164 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5173 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5182 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5188 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5194 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5200 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5206 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5212 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5218 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5224 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5230 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5236 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5242 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5248 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5254 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5260 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5266 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5272 "y_tab.c"
break;
case 182:
#line 711 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5277 "y_tab.c"
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5281 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 715 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5287 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5293 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5299 "y_tab.c"
break;
case 186:
#line 720 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5304 "y_tab.c"
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5308 "y_tab.c"
break;
case 187:
#line 726 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5313 "y_tab.c"
  if (!yytrial)
#line 727 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5321 "y_tab.c"
break;
case 188:
#line 732 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5326 "y_tab.c"
break;
case 189:
#line 736 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5331 "y_tab.c"
  if (!yytrial)
#line 737 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5338 "y_tab.c"
break;
case 190:
#line 741 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5343 "y_tab.c"
break;
case 191:
#line 745 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5348 "y_tab.c"
  if (!yytrial)
#line 746 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5355 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 750 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5364 "y_tab.c"
break;
case 193:
#line 757 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5376 "y_tab.c"
  if (!yytrial)
#line 765 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5382 "y_tab.c"
break;
case 194:
#line 768 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5387 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 769 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5395 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 772 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5404 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 778 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5410 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 779 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5416 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 780 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5422 "y_tab.c"
break;
case 200:
#line 783 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5427 "y_tab.c"
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5431 "y_tab.c"
break;
case 201:
#line 786 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5436 "y_tab.c"
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5443 "y_tab.c"
break;
case 202:
#line 791 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5448 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-7].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-7].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5457 "y_tab.c"
break;
case 204:
#line 797 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5462 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 799 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5471 "y_tab.c"
break;
case 206:
#line 806 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5483 "y_tab.c"
  if (!yytrial)
#line 814 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5491 "y_tab.c"
break;
case 207:
#line 820 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5503 "y_tab.c"
  if (!yytrial)
#line 828 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5511 "y_tab.c"
break;
case 208:
#line 834 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5523 "y_tab.c"
  if (!yytrial)
#line 842 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5531 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 849 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5541 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 854 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5550 "y_tab.c"
break;
case 211:
#line 860 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5555 "y_tab.c"
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5559 "y_tab.c"
break;
case 212:
#line 863 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5564 "y_tab.c"
  if (!yytrial)
#line 863 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5568 "y_tab.c"
break;
case 213:
#line 864 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5573 "y_tab.c"
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5577 "y_tab.c"
break;
case 214:
#line 865 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5582 "y_tab.c"
  if (!yytrial)
#line 865 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5586 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5592 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5598 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5604 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5610 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5616 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5622 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 878 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5628 "y_tab.c"
break;
case 222:
#line 881 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5633 "y_tab.c"
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5637 "y_tab.c"
break;
case 223:
#line 883 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5647 "y_tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5653 "y_tab.c"
break;
case 224:
#line 895 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5658 "y_tab.c"
  if (!yytrial)
#line 895 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5662 "y_tab.c"
break;
case 225:
#line 897 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5667 "y_tab.c"
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5680 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 908 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5689 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5695 "y_tab.c"
break;
case 228:
#line 915 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5700 "y_tab.c"
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5704 "y_tab.c"
break;
case 229:
#line 916 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5709 "y_tab.c"
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5713 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5719 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5725 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 921 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5731 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 922 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5737 "y_tab.c"
break;
case 234:
#line 925 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5742 "y_tab.c"
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5746 "y_tab.c"
break;
case 235:
#line 926 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5751 "y_tab.c"
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5755 "y_tab.c"
break;
case 236:
#line 927 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5760 "y_tab.c"
  if (!yytrial)
#line 927 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 5764 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5770 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5776 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 932 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5782 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 933 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5788 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5796 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5805 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5814 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5820 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 952 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5826 "y_tab.c"
break;
case 246:
#line 955 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5831 "y_tab.c"
  if (!yytrial)
#line 955 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5837 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 958 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5845 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 5854 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 969 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5860 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5866 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5872 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5878 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5884 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5890 "y_tab.c"
break;
case 255:
#line 979 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5895 "y_tab.c"
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 5899 "y_tab.c"
break;
case 256:
#line 980 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5904 "y_tab.c"
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5908 "y_tab.c"
break;
case 257:
#line 981 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5913 "y_tab.c"
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 5917 "y_tab.c"
break;
case 258:
#line 984 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5922 "y_tab.c"
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 5926 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 5932 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 5938 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5944 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5950 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 993 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5956 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5962 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 5968 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 5974 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 997 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 5980 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 5986 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 5992 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 5998 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6004 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6010 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6016 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6022 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6028 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6034 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6040 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6046 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6052 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6058 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6064 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6070 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6076 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6082 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6088 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6094 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6100 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6106 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6112 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6118 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6124 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6130 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6136 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6142 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6148 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6154 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6160 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6166 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6172 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6178 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6184 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6190 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6196 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6202 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6208 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6214 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6220 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6226 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6232 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6238 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6244 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6250 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6256 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6262 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6268 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6274 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6280 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6286 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6292 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6298 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 6304 "y_tab.c"
break;
case 322:
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6309 "y_tab.c"
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6313 "y_tab.c"
break;
#line 6315 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
