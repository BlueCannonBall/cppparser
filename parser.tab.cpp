#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "C:/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 102 "C:/github/cppparser/parser.y"
#line 89 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   24,   24,   24,   24,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   58,
   58,   53,   53,   53,   53,   53,   53,   54,   55,   55,
   56,   56,   56,   56,   56,   56,   57,   27,   27,    2,
    2,    2,    4,    4,    9,    9,    9,    9,    9,   10,
   10,   10,   10,    7,    7,    7,    7,    8,    8,    8,
   23,   23,   22,   21,    3,    3,    3,    3,    3,    3,
   14,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   12,   12,   12,   46,   46,   32,   33,    6,   30,   30,
   31,   31,   20,   20,   20,   16,   16,   16,   16,   17,
   17,   48,   48,   48,   48,   48,   48,   48,   47,   47,
   47,   47,   45,   45,   35,   36,   59,   36,   60,   36,
   34,   61,   34,   40,   40,   40,   38,   39,   62,   39,
   63,   39,   37,   37,   18,   18,   19,   15,   15,   15,
   42,   42,   43,   43,   44,   44,   44,   64,   25,   49,
   49,   49,   50,   50,   50,   50,   11,   11,   41,   41,
   41,   41,   65,   65,    1,    1,   51,   51,   51,   26,
   52,   52,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   29,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    4,    3,    4,    4,    4,    4,    3,    3,    3,
    3,    3,    3,    2,    3,    2,    3,    1,    1,    1,
    2,    3,    0,    1,    1,    3,    1,    1,    1,    0,
    2,    3,    2,    6,    8,    9,    7,    5,    6,    4,
    2,    2,    3,    6,    1,    2,    2,    2,    2,    4,
    3,    4,    3,    6,    5,    5,    4,    3,    3,    4,
    6,    9,    8,    1,    1,    2,    4,    3,   11,   10,
    9,    8,    0,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    0,    2,
    2,    3,    0,    1,    2,    5,    0,   11,    0,   13,
    4,    0,    6,    0,    5,    6,    2,    4,    0,   10,
    0,   12,    4,    5,    8,    8,    2,    2,    2,    3,
    0,    1,    1,    2,    0,    1,    2,    0,    9,    0,
    3,    4,    0,    1,    1,    1,    3,    4,    1,    1,
    1,    1,    0,    1,    0,    1,    2,    2,    2,    4,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    2,    2,    3,    3,    3,    3,    3,    3,    3,    4,
    4,    4,    4,    4,    3,    3,    4,    3,    2,    2,
    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  183,  184,  185,    0,    0,    0,    0,    0,  172,
   48,   49,    0,    0,    0,  124,   94,    0,  114,    0,
    0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,   23,    8,
    9,   12,    0,    0,    0,    6,    0,    7,    0,    0,
   10,    0,   11,   22,   13,    0,   14,   15,    0,   16,
   17,    0,   18,   19,    0,   20,   21,    0,    0,    0,
    0,   24,   25,   26,   27,   28,    0,   50,    0,    0,
    0,    0,   95,    0,    0,    0,    0,  176,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  117,  118,    0,    0,    0,    0,    0,    0,    0,   44,
    0,   46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  112,    0,
    0,    0,  153,    0,    0,    0,    0,    0,  148,  149,
    0,  147,    0,   72,   71,    0,    0,    0,    4,    5,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  214,    0,   96,  125,    0,    0,    0,  137,
    0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
    0,    0,    0,  106,  104,    0,  109,    0,  150,    0,
   98,    0,    0,    0,   60,    0,   47,    0,   38,   39,
   40,   41,   42,   43,   45,    0,  208,    0,  187,    0,
    0,    0,    0,    0,    0,  110,    0,  111,    0,    0,
  154,    0,    0,   83,    0,    0,    0,   73,  177,  178,
  179,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  206,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  167,    0,    0,    0,    0,    0,    0,
  139,    0,  131,    0,    0,    0,   60,   70,    0,    0,
  180,   32,   35,   36,   34,   37,    0,    0,  143,    0,
    0,    0,    0,   80,    0,   87,    0,    0,    0,    0,
    0,    0,    0,  207,  200,   97,    0,    0,    0,  138,
    0,    0,  168,    0,    0,   82,    0,    0,    0,    0,
    0,  105,    0,    0,   60,   68,    0,    0,    0,    0,
    0,    0,   61,   57,   58,    0,    0,    0,    0,  129,
    0,   86,    0,    0,    0,    0,  126,  164,  165,  166,
    0,    0,  158,    0,   85,    0,    0,  144,    0,    0,
    0,  157,   74,    0,    0,   60,   69,    0,   62,   64,
    0,    0,    0,    0,  141,    0,    0,  135,    0,    0,
    0,    0,    0,   91,   84,  133,    0,    0,    0,    0,
   67,    0,    0,    0,  119,    0,    0,    0,    0,    0,
  136,    0,    0,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0,    0,    0,  145,  146,    0,   93,    0,
  119,    0,    0,   66,    0,  120,  121,    0,    0,    0,
    0,  174,  159,   92,    0,    0,  140,  100,  122,    0,
    0,    0,  128,   99,    0,    0,    0,  142,  130,
};
static int yydgoto[] = {                                      34,
   35,  114,   37,   94,   38,   39,   40,   41,  323,  270,
   42,   43,   44,   45,   46,  185,  217,   47,   48,  186,
   49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
   59,   60,   61,   62,   63,   64,   65,   66,   67,  168,
   68,  264,  265,  314,   69,   70,  402,   71,  302,  341,
  150,  124,   72,   73,   74,   75,   76,   77,  260,  364,
  257,  311,  388,  372,  423,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,   62,    0,    0,    0,    0,
    0,    0, -145, -145,  -83,    0,    0,    0,    0, -237,
 -212,  943, 2112,  -17,   -3,    0, 2112, 2112, 2112, 2112,
 2112, 2226, 2112,    0,  521, -148,  236,    0,    0,    0,
    0,    0, -145,  398,   99,    0,  291,    0,  410,  109,
    0, 1907,    0,    0,    0, 2971,    0,    0,   -9,    0,
    0,  240,    0,    0,   16,    0,    0,    0,  864,    0,
   65,    0,    0,    0,    0,    0,    0,    0, -145, -145,
 -145, -113,    0,    0,  138,  170,  -40,    0,  521,  327,
  864,  366,  160,  288,    0,    0,    0,    0,    0,    0,
    0,    0,  165,  177,  188, -236,  193,  216,  220,    0,
  228,    0, 2112,  226,    0,  404,    0,    0,   70,   70,
   70, 3068, 3242,    8,    0,   70,   70,  461,    0,  -40,
  -53,    0,    0,   57,   84,  -52, 2112,    0,    0,    0,
    0,    0,  249,    0,    0,  480,  485,  486,    0,    0,
  467,  502, 1983, 2112, 2063, 2112, 2112, 2112, 2112, 2112,
 2086, 2112,    0,    0,    0,    0,  343,   -2,    0,    0,
    0,  -49,  -59,    0, -145,    0,  346,  -40,    0,    0,
  351, -145,  487,    0,    0,  277,    0, -145,    0,  461,
    0,  542, -145,  289,    0, 1372,    0,  369,    0,    0,
    0,    0,    0,    0,    0, 2112,    0, 2112,    0,  572,
  399, -145,  623,    0,    0,    0,  605,    0, -145,  226,
    0,  226, 2106,    0, 3242,  542,  542,    0,    0,    0,
    0, 2112, 2112, 2112, 1798,  632, 2112,  632,   78,   78,
  324,  324,   70,    0,  476, 3108, 1427,  636,  420,    0,
 1448,  633,   -4,    0,  542,  -34,  657,  662,    0,  667,
    0,    0,    0,  677,  668,  -35,    0,    0, -145,  319,
    0,    0,    0,    0,    0,    0,    0, 3242,    0,  695,
  -36,  399,  -94,    0,  226,    0, 3133,  677,  677,   78,
   78, 1798,   70,    0,    0,    0, 2112,  713, 1530,    0,
   71,    7,    0,  677, 2177,    0,    0,  728, -145,    0,
  730,    0,  733,  515,    0,    0,  353,  -23,  714,  350,
    0,  729,    0,    0,    0,    0,  532,    0,  753,    0,
  541,    0,  -40,  -40, 3143, 2112,    0,    0,    0,    0,
 -145,   71,    0,  -80,    0, 3175,  488,    0,   -5,  522,
  763,    0,    0,  379,  748,    0,    0, 2112,    0,    0,
  767,  528,  557,  782,    0, -145, -145,    0, 3200,  226,
 -145,    0, 2183,    0,    0,    0,    0,  777,  727,  793,
    0,  382, 3242,  819,    0,  825,    0,  820,  -67,  -67,
    0,  226, 1634,  -40, 3232,  561,   23,    0,    0,  811,
    0,   -7,  831,  582,  832,    0,    0,  813,    0,  -40,
    0,    0, 1696,    0,  590,    0,    0,  615,    0,  777,
  769,    0,    0,    0,   -7, 1740,    0,    0,    0,  608,
   33,    0,    0,    0,    0, 1792, 1813,    0,    0,
};
static int yyrindex[] = {                                     12,
 1838,    0,    0,    0,  309,  770,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1243,
 1498,    0,    0,    0,  568,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1051, 1001,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  894,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   52,    0,    0,    0,    0,    0,    0,    0,  772,
  597,    0,    0,    0,    0,    0,  559,    0,    0,    0,
    0,    0,    0,  -24,   22,    0, 1051,    0, 1051,    0,
    0,  780,    0,    0,  430,  533,  973, 2457, 1290,  -87,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2353,   35,    0,  108, 1717, 2518, 2546,
 2585,    0,   15,    0, 2960, 2614, 2638,  639,    0, 1051,
    0,  309,    0,    0,    0,  279,    0,    5,    0,    0,
    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -87,    0,    0,    0,    0,  -87,    0,
 2784,    0,    0,  908,    0,  672,    0, 1051,    0,  -11,
    0,  627,  655,    0,    0,    0,    0,    0,    0,    0,
    0,  -19,    0,    0,    0,    0,    0,  512,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  866,    0,    0, 3014, 2492,    0,    0,    0,    0,  469,
    0,  478,    0,    0,  166,  -33,  -33,    0,    0,    0,
    0,    0,    0,    0, 2004, 2833,    0, 2876,  246,  869,
 2820, 2855, 2674,    0,    0,    0,    0,    0,    0,  -87,
    0,  -26,    0,    0, 1349,  279,    0,    0,  639,    0,
    0,  271,    0,  649, 1710,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2696,   17,    0,    0,
    0,  866,    0,    0,  537,    0,    0,  196,  196, 2204,
 2709, 2725, 2766,    0,    0,    0,    0,    0,    0,    0,
   45,    0,    0, 1041,    0,    0,  -24,    0,    0,  -24,
    0,    0, 1222,    0,    0,    0,    0,    0,  771,    0,
   29,    0,    0,    0,    0,  -38,    0,  -24,    0,    0,
    0,    0,  130,  130,    0,    0,    0,    0,    0,    0,
    0,   45,    0,   67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
    0,  -87,    0,    0,    0,    0,  -24,   52,    0,    0,
    0,    0,  830,    0,    0,    0,  -24,    0,  435,  435,
    0,   58,    0,   67,    0,    0,    0,  -87,    0,    0,
  -24,   72,    0,    0,    0,    0,    0,  460,    0,   67,
    0,  -87,    0,    0,    0,    0,    0,    0,  -24,   52,
    0,    0,    0,    0,   82,    0,    0,    0,    0,    0,
    0,  -87,    0,    0,  -87,    0,    0,    0,    0,
};
static int yycindex[] = {                                    620,
  424,    0,    0,    0, 1137,    0,  135,  191,  254,    0,
    0,    0,    0,    0,    0,    0,    0, 1607,    0,    0,
    0,    0,    0,    0,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  154,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3140,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  261,    0, 2022,
  666,    0,    0,    0,    0,    0,  624,    0,    0,    0,
    0,    0,    0, 2047,  656,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  661,  663,  664,  669,  670,  722,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3267,    0, 3292, 3302,  104,  320,
  356,    0,    0,    0,  901,  508,  520,  687,    0,    0,
    0, 2159,    0,    0,    0,    0,    0,  674,    0,    0,
  675,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  809,    0,    0,    0,    0,  882,    0,
  686,    0,    0,  678,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3173,    0,  359,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  691,  693,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  595,  613,    0,  638,  646,  651,
  654,  676,  688,    0,    0,    0, 3199,    0,    0,  927,
 3225,    0,    0,    0,    0,    0,    0,    0,  690,    0,
    0, 3407,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3327,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  689,
  692,  703,  706,    0,    0,    0,    0,    0, 3251,    0,
    0,    0,    0,    0,    0,    0, 3410,    0,    0, 3428,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  596,    0,    0,    0,    0,  644,    0, 3440,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  989,    0,    0,    0,    0, 3458,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3461,    0,    0,    0,
    0,    0, 3277,    0,    0,    0,    0, 1078,    0,    0,
 3479,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1177, 3303,    0,    0,    0,    0,    0, 3491,    0,
    0,    0,    0,    0,    0, 3329,    0,    0,    0,    0,
    0, 1259,    0,    0, 1328, 3355, 3381,    0,    0,
};
static int yygindex[] = {                                      0,
  122,    1,   46,    0,   26,    0,    0,    0,  637, -222,
    0,  139,    6,  148,    0,  697,    0,    0,    0, -239,
    0,    0,    0,  -66,    0,    0, -166,  328,    0,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -261,
    0,  -55,  929,  102,   41,    2,  553,   30,    0,  626,
    0,  810,    0,    0,    0,  126,    0,  225,    0,    0,
    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 3772
static int yytable[] = {                                     254,
   36,   85,   87,  328,  151,   59,   86,   95,   96,   97,
  373,    2,  181,   98,   99,   33,  103,  160,  151,  103,
   29,  200,   30,  316,   28,   90,   50,   27,  127,   33,
   50,  331,   50,  196,  377,  357,  129,    2,  223,  100,
  201,  249,  123,  136,  317,   91,  123,  101,   50,  165,
  342,  208,   36,  418,  303,  181,  305,  182,  181,   75,
  182,   75,   75,   75,  130,   75,  249,  347,  173,   85,
  350,  102,   63,  116,  170,  209,  249,  149,  209,   95,
   96,   97,   98,   75,   85,   87,   59,  315,  362,  183,
  129,   85,  354,  209,  219,  134,  160,  247,  161,  356,
   36,  162,  251,  324,  187,   31,  123,  123,  113,  161,
  123,   78,   75,  164,  174,  158,  397,  161,  130,   31,
  250,  131,  113,  160,   13,  221,   89,  209,  123,  343,
  102,  215,  209,  382,  220,  222,  192,  396,  169,  181,
  101,  182,  194,  180,  197,  412,  191,  404,  210,  188,
  324,  210,  218,   63,  324,  435,   13,  140,  431,  209,
  162,  415,  330,  408,   36,  411,  210,  145,  162,   36,
  288,  289,  253,  128,  134,  256,  224,  161,  226,  430,
  162,  227,  136,  299,    2,    2,    2,  324,  215,  172,
  177,  202,  178,  266,  102,  202,   36,  132,   16,  304,
  210,  159,  188,  214,  101,   89,   81,  252,  175,   81,
  188,   16,  281,  200,  255,  324,   13,  188,   59,  285,
   13,  149,  182,  151,   81,  175,   16,  190,  189,   59,
   59,  184,  210,  188,  188,  188,  151,  151,   16,   78,
    2,    3,    4,   50,   16,  151,  188,   36,   59,  212,
   36,   36,   13,   89,    2,    3,    4,  175,   50,  175,
  175,  123,   85,   87,  188,  188,   13,  183,  213,  318,
  216,  416,  149,  134,  123,  417,  149,  133,   75,   23,
   24,   25,  187,    2,    2,    2,  195,  195,  195,  195,
  195,  209,  195,   23,   24,   25,  306,  167,  166,   36,
   75,  163,  209,  209,  195,  393,  195,   85,   87,  349,
   85,   87,  183,   78,  163,  183,  259,  263,   92,  123,
  262,  209,  123,  123,  149,   93,   13,  187,   85,   87,
  187,  413,  280,  183,  141,  209,  123,  123,  195,  123,
   78,  370,  338,  339,  340,  426,  269,  268,  187,  142,
  115,  117,  118,   13,  119,  120,  121,  122,  123,  126,
  127,  185,  321,  161,  210,  436,  389,  390,  437,  160,
  195,  392,   36,  366,  367,  210,  210,   85,   87,  414,
  309,  417,  183,   89,  374,  191,  123,   85,   87,  333,
  334,  164,  183,   36,  210,  325,  321,  187,   36,  123,
  182,   85,   87,  329,  167,  344,  183,  187,  210,  184,
  195,  267,   36,   36,  162,  420,  194,  423,  149,   85,
   87,  187,  321,  193,  183,  321,   36,  197,   89,  406,
  407,   89,   36,  198,  409,   36,   36,   36,  149,  187,
  126,  138,  325,  322,  199,  182,  325,  170,  182,   89,
  424,  149,  155,  143,  184,  202,  139,  184,  137,  173,
  173,  149,  149,  151,  225,  155,  182,   77,  144,   77,
   77,   77,  203,   77,  155,  184,  204,  355,  123,  325,
  235,  236,  238,  239,  240,  241,  242,  243,  123,  246,
  205,   77,  173,  123,  326,  188,  206,  173,   89,  173,
  211,  173,  195,  380,  173,  228,  400,  325,   89,   89,
  176,   33,   89,  195,  195,  182,  294,  245,   88,  208,
   77,   88,   89,  179,  184,  182,  232,   89,  376,   89,
  248,  262,  195,  277,  184,  278,   88,  229,   88,  182,
   89,  326,  230,  231,   33,  326,  195,  137,  184,   33,
  287,   33,  175,   33,  175,  175,   33,  182,   29,  290,
  291,  292,  378,  233,  293,  262,  184,  429,  385,  432,
   78,  262,   78,   78,   78,  319,   78,   90,  326,  435,
   90,  438,  173,  133,  173,  173,   11,   12,  175,  175,
  175,   29,  175,  175,   78,   90,   29,   90,   29,  248,
   29,  411,  258,   29,  262,  320,  326,  261,  213,  319,
  213,  213,  279,  213,  213,  450,  453,  456,  459,   26,
   11,   12,  420,   78,  335,  262,  213,  213,  213,  213,
  428,  276,  346,  262,   33,  319,   33,   33,  319,  320,
  107,  108,  109,  110,  111,  112,   11,   12,  434,   11,
   12,  262,  114,   26,  468,   88,  471,  102,  213,  105,
  213,   99,  282,  369,   96,  320,  284,  108,  320,  158,
  108,  161,  474,  156,  477,  297,  298,  160,  157,   26,
  117,   29,   26,   29,   29,  383,   77,  121,  125,  129,
  301,  213,  213,  133,  138,  107,  307,  480,  107,  483,
  395,  308,  142,  145,  148,  486,  310,  489,   77,  221,
  492,  132,  495,  498,  313,  501,  173,  173,  173,  173,
  173,  173,  162,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  504,  327,  507,  173,  173,
  173,  173,  108,  173,  173,  111,  173,  510,  552,  513,
  555,  558,  336,  561,  114,  159,  173,  173,  173,  102,
  173,  105,  564,   99,  567,  570,   96,  573,  348,  351,
  352,  353,   33,   33,  358,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,  360,  361,   78,
   33,   33,   33,   33,  363,   33,   33,  365,   33,   16,
   17,   18,   19,  379,   20,   21,  381,  384,   33,   33,
   33,   78,   33,  386,   55,   29,   29,   29,   29,   29,
   29,  387,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,  167,  213,  213,   29,   29,   29,
   29,  114,   29,   29,  108,   29,  102,  111,  105,  398,
   99,  399,  576,   96,  213,   29,   29,   29,  401,  405,
  175,  175,  175,  579,  582,  403,  175,  175,  213,  414,
  419,  422,  421,   56,  429,  175,    0,    5,    8,   11,
   14,   17,  585,   20,   25,   30,   35,   38,   41,   44,
   49,  432,   53,    1,   54,   55,  588,  112,   57,   61,
   65,   69,   54,   73,   77,  155,   81,  175,  175,  196,
  196,  196,  196,  196,  114,  196,   84,   87,   90,  102,
   93,  105,  257,   99,  260,  282,   96,  196,  176,  196,
  285,  108,  288,  291,  111,  176,  176,  176,  294,  297,
  426,  176,  176,  441,  591,  123,  441,  123,  123,  123,
  176,  123,  444,  444,   56,  446,  444,  359,  312,  114,
  462,  196,  465,  425,  102,  135,  105,  371,   99,  123,
  245,   96,    0,    0,    0,    0,    0,    0,    0,    5,
    8,   11,   14,   17,    0,   20,   25,   30,   35,   38,
   41,   44,   49,  196,    0,    0,   54,    0,  123,    0,
   57,   61,   65,   69,  108,   73,   77,  111,   81,    0,
   79,    0,   79,   79,   79,    0,   79,    0,   84,   87,
   90,  114,   93,    0,    0,    0,  102,   55,  105,    0,
   99,    0,    0,   96,   79,    0,    0,    0,   55,   55,
  186,    0,    0,  186,    0,  186,  186,  186,    0,  108,
    0,    0,  111,    0,    0,    0,    0,   55,    0,  186,
    0,  186,  186,   79,    0,    0,    5,    8,   11,   14,
   17,   55,   20,   25,   30,   35,   38,   41,   44,   49,
  155,  155,    0,   54,  155,    0,   56,   57,   61,   65,
   69,  186,   73,   77,    0,   81,    0,   56,   56,    0,
    0,    0,  155,    0,    0,   84,   87,   90,    0,   93,
  114,  108,    0,    0,  111,  102,   56,  105,    0,   99,
   78,    0,   96,    0,  186,  196,    0,   79,   80,   81,
   56,  155,    0,   13,   14,    0,  196,  196,    0,    5,
    8,   11,   14,   17,    0,   20,   25,   30,   35,   38,
   41,   44,   49,    0,    0,  196,   54,    0,    0,    0,
   57,   61,   65,   69,  123,   73,   77,    0,   81,  196,
    0,    0,    0,    0,    0,    0,    0,  123,   84,   87,
   90,    0,   93,    0,    5,    8,   11,   14,   17,    0,
   20,   25,   30,   35,   38,   41,   44,   49,    0,    0,
  108,   54,    0,  111,    0,   57,   61,   65,   69,  114,
   73,   77,    0,   81,  102,    0,  105,    0,   99,    0,
  103,   96,    0,   84,   87,   90,    0,   93,    0,   79,
  104,  105,  106,  107,  108,  109,  110,  111,  112,    0,
    0,    0,    0,    0,    0,    0,    5,    8,   11,   14,
   17,   79,   20,   25,   30,   35,   38,   41,   44,   49,
    0,  156,  156,   54,    0,  156,    0,   57,   61,   65,
   69,    0,   73,   77,    0,   81,    0,    0,    0,    0,
    0,    0,    0,  156,    0,   84,   87,   90,    0,   93,
    0,  114,    0,    0,    0,    0,  102,  155,  105,  108,
   99,    0,  111,   96,    0,    0,    0,  123,    0,    0,
  155,    0,  156,    0,  123,  123,  123,    0,    0,  155,
  123,  123,    0,    0,    0,    0,    0,   76,    0,   76,
   76,   76,    0,   76,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,   76,   54,    0,    0,    0,   57,   61,   65,   69,
  114,   73,   77,    0,   81,  102,    0,  105,  113,   99,
    0,    0,   96,    0,   84,   87,   90,    0,   93,    0,
   76,  108,    0,    0,  111,    0,  151,    0,  151,  151,
    0,    0,  151,  154,    0,    0,    0,    0,    0,    0,
  157,  157,  157,    0,   33,    0,  157,  157,    0,   29,
  151,   30,    0,   28,    0,  161,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    5,    8,   11,   14,   17,  151,
   20,   25,   30,   35,   38,   41,   44,   49,    0,    0,
  108,   54,    0,  111,    0,   57,   61,   65,   69,   33,
   73,   77,    0,   81,   29,    0,   30,    0,   28,    0,
    0,   27,    0,   84,   87,   90,    0,   93,  156,    0,
   33,    0,    0,    0,    0,   29,    0,   30,    0,   28,
    0,  156,   27,    0,   31,    0,  271,   32,    0,  113,
  156,    0,    0,    0,    0,    0,  113,  113,  113,    0,
    0,    0,  113,  113,    0,    0,    5,    8,   11,   14,
   17,  113,   20,   25,   30,   35,   38,   41,   44,   49,
    0,    0,    0,   54,    0,    0,    0,   57,   61,   65,
   69,    0,   73,   77,    0,   81,   76,    0,    0,   31,
    0,  296,   32,    0,    0,   84,   87,   90,    0,   93,
    0,    0,   33,    0,    0,    0,    0,   29,   76,   30,
   31,   28,  300,   32,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    5,    8,   11,   14,   17,
    0,   20,   25,   30,   35,   38,   41,   44,   49,    0,
    0,    0,   54,    0,    0,  151,   57,   61,   65,   69,
    0,   73,   77,    0,   81,    0,    0,    0,  151,    0,
    0,    0,    0,  116,   84,   87,   90,  151,   93,    2,
    3,    4,    5,    6,    0,    0,    0,    0,   10,   11,
   12,    0,    0,  146,  147,  148,   15,    0,    0,    0,
    0,    0,   31,    0,  337,   32,    0,    0,   22,    0,
    0,    0,    0,    0,    0,    0,   33,    0,   23,   24,
   25,   29,   26,   30,    0,   28,    0,    0,   27,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    6,    0,
    0,    0,    0,   10,   11,   12,    0,    0,  146,  147,
  148,   15,    0,    0,    0,    2,    3,    4,    5,    6,
    0,    0,    0,   22,   10,   11,   12,    0,    0,  146,
  147,  148,   15,   23,   24,   25,    0,   26,   33,    0,
    0,    0,  181,   29,   22,   30,    0,   28,    0,    0,
   27,    0,    0,    0,   23,   24,   25,  152,   26,  152,
  152,    0,    0,  152,  116,    0,   31,  212,  408,   32,
  212,  116,  116,  116,    0,    0,    0,  116,  116,    0,
    0,  152,   33,    0,    0,  212,  116,   29,    0,   30,
    0,   28,    0,    0,   27,    0,    0,    2,    3,    4,
    5,    6,    0,    0,    0,    0,   10,   11,   12,    0,
  152,  146,  147,  148,   15,    0,    0,    0,    0,  212,
    0,    0,    0,    0,    0,    0,   22,    0,   31,    0,
  427,   32,    0,    0,   33,    0,   23,   24,   25,   29,
   26,   30,    0,   28,    0,  158,   27,  161,    0,  156,
  154,  212,  155,  160,  157,   33,    0,    0,    0,    0,
   29,    0,   30,    0,   28,    0,    0,   27,  153,    0,
    0,    0,   31,  181,  433,   32,    0,    0,    0,    0,
  181,  181,  181,    0,    0,   50,  181,  181,    0,   50,
   50,    0,   50,   50,   50,  181,    0,    0,  162,    0,
    0,    2,    3,    4,    5,    6,   50,   50,   50,   50,
   10,   11,   12,    0,    0,  146,  147,  148,   15,    0,
    0,    0,    0,    0,   31,    0,  438,   32,    0,    0,
   22,  159,    0,    0,    0,    0,    0,    0,   50,    0,
   23,   24,   25,    0,   26,   31,    0,  439,   32,   33,
    0,    0,    0,    0,   29,    0,   30,    0,   28,    0,
    0,   27,    0,    2,    3,    4,    5,    6,    0,    0,
    0,   50,   10,   11,   12,    0,  152,  146,  147,  148,
   15,    0,    0,  212,    0,    0,    0,    0,    0,  152,
    0,    0,   22,    0,  212,  212,    0,    0,  152,    0,
    0,    0,   23,   24,   25,    0,   26,    2,    3,    4,
    5,    6,    0,  212,    0,    0,   10,   11,   12,    0,
    0,  146,  147,  148,   15,   33,    0,  212,    0,    0,
   29,    0,   30,    0,   28,    0,   22,   27,    0,   31,
    0,    0,   32,    0,    0,    0,   23,   24,   25,    0,
   26,    0,    0,  234,  199,    0,    0,  199,    0,    2,
    3,    4,    5,    6,    0,    0,    0,    0,   10,   11,
   12,    0,  199,  146,  147,  148,   15,    0,    0,    0,
    2,    3,    4,    5,    6,    0,    0,    0,   22,   10,
   11,   12,    0,    0,  146,  147,  148,   15,   23,   24,
   25,    0,   26,    0,    0,   33,  199,    0,    0,   22,
   29,    0,   30,    0,   28,   31,    0,   27,  113,   23,
   24,   25,    0,   26,    0,    0,    0,    0,   33,  176,
    0,  176,  176,   29,  237,   30,  244,   28,  199,    0,
   27,    0,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,    0,   29,   33,   30,    0,   28,    0,   29,
   27,   30,    0,   28,    0,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    6,    0,
    0,    0,    0,   10,   11,   12,    0,    0,  146,  147,
  148,   15,    0,    0,    0,   31,    0,    0,  113,    0,
    0,    0,    0,   22,    0,    0,    0,    0,  286,    0,
    0,    0,    0,   23,   24,   25,    0,   26,   31,   33,
    0,  113,    0,    0,   29,   33,   30,    0,   28,    0,
   29,   27,   30,    0,   28,    0,    0,   27,   31,    0,
    0,  113,    0,    0,   31,    0,    0,  113,    0,   78,
    2,    3,    4,    0,  202,  202,  202,  202,  202,    0,
  202,    0,   13,    0,    0,    0,    0,    0,   33,    0,
  199,    0,  202,   29,  202,   30,    0,   28,    0,  345,
   27,  199,  199,    0,    0,  394,    0,    0,  250,   23,
   24,   25,    0,    0,    0,  250,  250,  250,    0,    0,
  199,  250,  250,    0,    0,    0,  202,    0,    0,   31,
  254,    0,  113,  263,  199,   31,    0,    0,  113,    0,
  267,  271,  275,    0,    0,    0,  222,  226,    0,   78,
    2,    3,    4,    0,    0,  161,  230,  279,  202,    0,
    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   78,    2,    3,    4,    0,    0,   31,    0,
    0,  113,    0,    0,    0,   13,    0,    0,    0,   23,
   24,   25,   78,    2,    3,    4,    0,    0,   78,    2,
    3,    4,    0,    0,    0,   13,    0,    0,    0,    0,
    0,   13,   23,   24,   25,    0,    0,    0,    0,    0,
  186,    0,  186,  186,  186,  186,  186,  186,  186,  186,
    0,    0,   23,   24,   25,    0,    0,    0,   23,   24,
   25,  186,  186,  186,  186,  154,    0,    0,    0,    0,
    0,    0,  157,  157,  157,    0,    0,    0,  157,  157,
    0,    0,    0,   78,    2,    3,    4,  161,    0,   78,
    2,    3,    4,  186,    0,  186,   13,    0,    0,    0,
    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
  202,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  202,  202,   23,   24,   25,  186,  186,    0,   23,
   24,   25,  125,    2,    3,    4,    0,    0,    0,    0,
  202,    0,    0,    0,   51,   13,   51,   51,   51,   51,
   51,   51,   51,   51,  202,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   51,   51,   51,   51,    0,
    0,    0,   23,   24,   25,    0,    0,    0,    0,   52,
    0,   52,   52,   52,   52,   52,   52,   52,   52,    0,
    0,    0,    0,    0,    0,    0,    0,   51,    0,   51,
   52,   52,   52,   52,    0,  188,    0,    0,  188,  188,
  188,  188,  188,  188,  188,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  188,    0,  188,   51,
   51,   51,   52,  191,   52,    0,  191,  191,  191,  191,
  191,  191,  191,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  191,    0,  191,    0,    0,  186,
  188,    0,    0,    0,   52,   52,   52,    0,    0,    0,
  186,  186,  192,    0,    0,  192,  192,  192,  192,  192,
  192,  192,    0,    0,    0,    0,    0,    0,  191,  186,
    0,  188,  188,  192,    0,  192,    0,    0,    0,    0,
    0,  189,    0,  186,  189,  189,  189,  189,  189,  189,
  189,    0,    0,    0,    0,    0,    0,    0,    0,  191,
  191,    0,  189,    0,  189,  190,    0,  192,  190,  190,
  190,  190,  190,  190,  190,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  190,    0,  190,    0,
    0,    0,    0,    0,    0,    0,  189,    0,  192,  192,
    0,  205,    0,   51,  205,  205,  205,  205,  205,  205,
  205,    0,    0,    0,   51,   51,    0,    0,    0,    0,
  190,    0,  205,    0,  205,   51,  211,  189,  189,  211,
    0,    0,    0,   51,    0,    0,    0,    0,   52,  203,
  203,  203,  203,  203,  211,  203,    0,   51,    0,   52,
   52,  190,  190,    0,    0,  201,  205,  203,  201,  203,
   52,    0,    0,    0,  188,    0,    0,    0,   52,    0,
    0,    0,    0,  201,    0,  188,  188,    0,  211,    0,
    0,    0,   52,    0,    0,    0,    0,  205,  205,    0,
    0,  203,  191,  204,  188,    0,  204,  204,  204,  204,
  204,  204,  204,  191,  191,    0,    0,  201,  188,    0,
  211,   50,    0,    0,  204,   50,  204,    0,    0,    0,
    0,    0,  191,  203,    0,    0,    0,    0,    0,    0,
    0,  192,   50,   50,    0,    0,  191,    0,    0,  201,
    0,    0,  192,  192,    0,    0,    0,  197,  204,    0,
  197,  197,  197,  197,  197,    0,  197,    0,    0,    0,
  189,  192,    0,  193,    0,  193,  193,  193,  197,    0,
  197,  189,  189,    0,    0,  192,    0,    0,    0,  204,
  204,  193,  198,  193,  190,  198,  198,  198,  198,  198,
  189,  198,    0,    0,    0,  190,  190,    0,    0,    0,
    0,    0,  197,  198,  189,  198,  194,    0,  194,  194,
  194,    0,    0,    0,  190,  193,    0,    0,    0,    0,
  205,    0,    0,    0,  194,    0,  194,    0,  190,    0,
    0,  205,  205,  197,  197,    0,    0,  198,    0,    0,
    0,    0,  211,    0,    0,    0,    0,  193,    0,    0,
  205,    0,    0,  211,  211,  203,    0,    0,  194,    0,
    0,    0,    0,    0,  205,    0,  203,  203,  198,  198,
    0,  201,  211,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  201,  201,    0,  203,  211,   50,    0,    0,
  194,   50,   50,    0,   50,   50,   50,    0,  158,  203,
  161,  201,  156,  154,    0,  155,  160,  157,   50,   50,
   50,   50,  204,    0,    0,  201,    0,    0,    0,  163,
  151,  153,  152,  204,  204,    0,    0,    0,    0,    0,
  176,    0,    0,    0,    0,    0,    0,  176,  176,  176,
   50,   50,  204,   50,  176,   50,   50,    0,   50,   50,
   50,  162,  176,  176,  176,  176,  204,  176,  176,    0,
    0,    0,   50,   50,   50,   50,  197,    0,    0,    0,
    0,    0,    0,   50,    0,    0,    0,  197,  197,  193,
    0,    0,    0,    0,  159,    0,    0,    0,    0,    0,
  193,  193,    0,    0,   50,  158,  197,  161,  207,  156,
  154,  198,  155,  160,  157,    0,    0,    0,    0,  193,
  197,    0,  198,  198,    0,    0,    0,  151,  153,  152,
    0,    0,  194,  193,    0,    0,    0,   50,    0,    0,
    0,  198,    0,  194,  194,  158,    0,  161,    0,  156,
  154,    0,  155,  160,  157,  198,    0,    0,  162,    0,
    0,    0,  194,    0,    0,    0,    0,  151,  153,  152,
  158,    0,  161,    0,  156,  154,  194,  155,  160,  157,
  158,    0,  161,  368,  156,  154,    0,  155,  160,  157,
    0,  159,  151,  153,  152,    0,    0,    0,  162,    0,
  295,    0,  151,  153,  152,    0,    0,    0,    0,    0,
    0,    0,  158,    0,  161,    0,  156,  154,    0,  155,
  160,  157,    0,  162,    0,  332,    0,    0,    0,   50,
    0,  159,    0,  162,  151,  153,  152,  158,    0,  161,
  391,  156,  154,    0,  155,  160,  157,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  159,    0,    0,  151,
  153,  152,    0,    0,    0,  162,  159,  375,    0,  158,
    0,  161,    0,  156,  154,    0,  155,  160,  157,  158,
    0,  161,    0,  156,  154,    0,  155,  160,  157,    0,
  162,  151,  153,  152,    0,    0,    0,    0,  159,    0,
    0,  151,  153,  152,  321,    0,  330,    0,  315,  309,
    0,  312,  327,  318,    0,    0,    0,    0,    0,    0,
    0,    0,  162,  159,  410,    0,  300,  306,  303,  357,
    0,  366,  162,  351,  345,    0,  348,  363,  354,  393,
    0,  402,    0,  387,  381,    0,  384,  399,  390,    0,
    0,  336,  342,  339,    0,  159,    0,  333,    0,    0,
    0,  372,  378,  375,  537,  159,  546,    0,  531,  525,
    0,  528,  543,  534,    0,    0,    0,    0,    0,    0,
    0,    0,  369,    0,    0,    0,  516,  522,  519,    0,
  324,    0,  405,    0,    0,    0,  206,    0,    0,    0,
    0,    0,    0,  210,  214,  218,    0,    0,    0,  222,
  226,    0,    0,    0,    0,  360,    0,  549,  161,  230,
  233,  236,    0,  239,  242,  396,    0,    0,    0,  206,
    0,    0,    0,    0,    0,    0,  210,  214,  218,    0,
    0,    0,  222,  226,    0,    0,    0,    0,    0,    0,
  540,  161,  230,  233,  236,  206,  239,  242,    0,    0,
    0,    0,  210,  214,  218,    0,    0,    0,  222,  226,
    0,    0,    0,    0,    0,    0,    0,  161,  230,  233,
  236,  206,  239,  242,    0,    0,    0,    0,  210,  214,
  218,    0,    0,    0,  222,  226,    0,    0,    0,    0,
    0,    0,    0,  161,  230,  233,  236,  206,  239,  242,
    0,    0,    0,    0,  210,  214,  218,    0,    0,    0,
  222,  226,    0,    0,    0,    0,    0,    0,    0,  161,
  230,  233,  236,  206,  239,  242,    0,    0,    0,    0,
  210,  214,  218,    0,    0,    0,  222,  226,    0,    0,
    0,    0,    0,    0,    0,  161,  230,  233,  236,  206,
  239,  242,    0,    0,    0,    0,  210,  214,  218,    0,
    0,    0,  222,  226,    0,    0,    0,    0,    0,    0,
    0,  161,  230,  233,  236,  206,  239,  242,    0,    0,
    0,    0,  210,  214,  218,    0,    0,    0,  222,  226,
    0,    0,    0,    0,    0,    0,    0,  161,  230,  233,
  236,  206,  239,  242,    0,    0,    0,    0,  210,  214,
  218,    0,    0,    0,  222,  226,    0,    0,    0,    0,
    0,    0,    0,  161,  230,  233,  236,  206,  239,  242,
    0,    0,    0,    0,  210,  214,  218,    0,    0,    0,
  222,  226,    0,    0,    0,    0,    0,    0,    0,  161,
  230,  233,  236,  263,  239,  242,  263,    0,    0,    0,
  267,  271,  275,  267,  271,  275,  222,  226,    0,  222,
  226,    0,    0,    0,  263,  161,  230,  279,  161,  230,
  279,  267,  271,  275,    0,    0,  263,  222,  226,    0,
    0,    0,    0,  267,  271,  275,  161,  230,  279,  222,
  226,    0,    0,    0,  263,    0,    0,  263,  161,  230,
  279,  267,  271,  275,  267,  271,  275,  222,  226,    0,
  222,  226,    0,    0,    0,  263,  161,  230,  279,  161,
  230,  279,  267,  271,  275,    0,    0,  263,  222,  226,
    0,    0,    0,    0,  267,  271,  275,  161,  230,  279,
  222,  226,    0,    0,    0,    0,    0,    0,    0,  161,
  230,  279,
};
static int yycheck[] = {                                      59,
    0,    1,    1,   40,   38,   44,    1,    7,    8,    9,
   91,    0,  126,   13,   14,   33,   41,   44,   38,   44,
   38,  258,   40,   59,   42,    5,   38,   45,   40,   33,
   42,  126,   59,  100,   40,   59,   35,  125,   91,  123,
  277,   44,   38,   43,  267,    5,   42,  285,   60,   59,
   44,   44,   52,   61,   59,   41,   91,   41,   44,   38,
   44,   40,   41,   42,   35,   44,   44,  307,   68,   69,
  310,  284,   44,   91,   59,   41,   44,   52,   44,   79,
   80,   81,   82,   62,   84,   84,  125,  123,  328,   84,
   89,   91,  315,   59,   38,   44,  123,  164,   44,  123,
  100,   44,  169,  270,   84,  123,   40,   41,  126,   40,
   44,  257,   91,  123,   69,   38,  378,   40,   89,  123,
  123,  270,  126,   46,  270,   42,    5,   93,   62,  123,
   59,  131,  125,  356,  134,  135,   91,  377,  123,  125,
   59,  125,   38,  257,   40,  123,   42,  387,   41,   45,
  317,   44,  132,  125,  321,  123,  270,   59,  420,  125,
   91,  401,  257,   60,  164,   62,   59,   59,   91,  169,
  226,  227,  172,   35,  123,  175,  136,  123,  138,  419,
  123,  141,  182,  250,  272,  273,  274,  354,  188,   68,
  126,   38,   71,  193,  123,   42,  196,   60,  279,  255,
   93,  124,  270,  257,  123,   84,   41,  257,   70,   44,
  270,  279,  212,   60,  174,  382,  270,  270,  257,  219,
  270,  196,   84,  257,   59,   87,  279,   89,   59,  268,
  269,   84,  125,  270,  270,  270,  270,  257,  279,  257,
  258,  259,  260,  270,  279,  279,  270,  247,  287,  128,
  250,  251,  270,  132,  258,  259,  260,  282,  270,  284,
  285,  257,  262,  262,  270,  270,  270,  262,  130,  269,
  132,  279,  247,   38,  270,  283,  251,   42,  257,  297,
  298,  299,  262,  272,  273,  274,   41,   42,   43,   44,
   45,  257,   47,  297,  298,  299,  256,   58,   59,  299,
  279,  257,  268,  269,   59,  372,   61,  307,  307,  309,
  310,  310,  307,  257,  270,  310,  178,   41,  257,   41,
   44,  287,   44,  257,  299,  264,  270,  307,  328,  328,
  310,  398,  211,  328,   44,  301,  270,   59,   93,   61,
  257,  341,  272,  273,  274,  412,   58,   59,  328,   59,
   23,   24,   25,  270,   27,   28,   29,   30,   31,   32,
   33,  257,   44,   40,  257,  432,  366,  367,  435,   46,
  125,  371,  372,  333,  334,  268,  269,  377,  377,   60,
  259,   62,  377,  262,  344,   59,  257,  387,  387,  288,
  289,  257,  387,  393,  287,  270,   44,  377,  398,  270,
  262,  401,  401,  282,  270,  304,  401,  387,  301,  262,
  123,  123,  412,  413,   91,   60,  257,   62,  393,  419,
  419,  401,   44,   58,  419,   44,  426,  263,  307,  389,
  390,  310,  432,  257,  394,  435,  436,  437,  413,  419,
  113,   44,  317,  125,  257,  307,  321,  257,  310,  328,
  410,  426,  257,   44,  307,  263,   59,  310,   61,    0,
  270,  436,  437,   40,  137,  270,  328,   38,   59,   40,
   41,   42,  257,   44,  279,  328,  257,  125,   44,  354,
  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
  263,   62,   33,   59,  270,  270,   93,   38,  377,   40,
   40,   42,  257,  125,   45,  257,  125,  382,  387,   41,
  257,    0,   44,  268,  269,  377,   41,  257,   41,   44,
   91,   44,  401,  270,  377,  387,   60,   59,   41,   61,
  270,   44,  287,  206,  387,  208,   59,   58,   61,  401,
  419,  317,   58,   58,   33,  321,  301,   61,  401,   38,
  223,   40,  282,   42,  284,  285,   45,  419,    0,  232,
  233,  234,   41,   62,  237,   44,  419,   60,   41,   62,
   38,   44,   40,   41,   42,  257,   44,   41,  354,   60,
   44,   62,  123,   42,  125,  126,  268,  269,  280,  281,
  282,   33,  284,  285,   62,   59,   38,   61,   40,  257,
   42,   41,  257,   45,   44,  287,  382,  257,   41,  257,
   43,   44,   41,   46,   47,  257,  258,  259,  260,  301,
  268,  269,   41,   91,  297,   44,   59,   60,   61,   62,
   41,  263,  305,   44,  123,  257,  125,  126,  257,  287,
  291,  292,  293,  294,  295,  296,  268,  269,   41,  268,
  269,   44,   33,  301,   60,  257,   62,   38,   91,   40,
   93,   42,   40,  336,   45,  287,   62,   41,  287,   38,
   44,   40,   60,   42,   62,   40,  257,   46,   47,  301,
  257,  123,  301,  125,  126,  358,  257,  264,  265,  266,
   58,  124,  125,  270,  271,   41,   40,   60,   44,   62,
  373,   40,  279,  280,  281,   60,   40,   62,  279,   42,
   60,   40,   62,   60,   38,   62,  257,  258,  259,  260,
  261,  262,   91,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,   60,   42,   62,  279,  280,
  281,  282,  123,  284,  285,  126,  287,   60,   60,   62,
   62,   60,   40,   62,   33,  124,  297,  298,  299,   38,
  301,   40,   60,   42,   62,   60,   45,   62,   41,   40,
   38,  257,  261,  262,   61,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,   59,  257,  257,
  279,  280,  281,  282,   42,  284,  285,  257,  287,  279,
  280,  281,  282,   41,  284,  285,   59,   41,  297,  298,
  299,  279,  301,  257,   44,  257,  258,  259,  260,  261,
  262,   40,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,   58,  268,  269,  279,  280,  281,
  282,   33,  284,  285,  123,  287,   38,  126,   40,  123,
   42,   59,  257,   45,  287,  297,  298,  299,   40,   40,
  264,  265,  266,  268,  269,   41,  270,  271,  301,   59,
   40,   59,   41,   44,  260,  279,  257,  258,  259,  260,
  261,  262,  287,  264,  265,  266,  267,  268,  269,  270,
  271,  123,  123,    0,  275,  125,  301,  126,  279,  280,
  281,  282,  123,  284,  285,  257,  287,   42,  270,   41,
   42,   43,   44,   45,   33,   47,  297,  298,  299,   38,
  301,   40,  257,   42,  301,  270,   45,   59,  257,   61,
  270,  123,  270,  270,  126,  264,  265,  266,  270,  270,
   40,  270,  271,  257,  301,   38,  257,   40,   41,   42,
  279,   44,  279,  279,  125,  270,  279,  321,  262,   33,
  270,   93,  270,  411,   38,   37,   40,  342,   42,   62,
  161,   45,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,  125,   -1,   -1,  275,   -1,   91,   -1,
  279,  280,  281,  282,  123,  284,  285,  126,  287,   -1,
   38,   -1,   40,   41,   42,   -1,   44,   -1,  297,  298,
  299,   33,  301,   -1,   -1,   -1,   38,  257,   40,   -1,
   42,   -1,   -1,   45,   62,   -1,   -1,   -1,  268,  269,
   40,   -1,   -1,   43,   -1,   45,   46,   47,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,   -1,  287,   -1,   59,
   -1,   61,   62,   91,   -1,  257,  258,  259,  260,  261,
  262,  301,  264,  265,  266,  267,  268,  269,  270,  271,
   40,   41,   -1,  275,   44,   -1,  257,  279,  280,  281,
  282,   91,  284,  285,   -1,  287,   -1,  268,  269,   -1,
   -1,   -1,   62,   -1,   -1,  297,  298,  299,   -1,  301,
   33,  123,   -1,   -1,  126,   38,  287,   40,   -1,   42,
  257,   -1,   45,   -1,  124,  257,   -1,  264,  265,  266,
  301,   91,   -1,  270,  271,   -1,  268,  269,  257,  258,
  259,  260,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  287,  275,   -1,   -1,   -1,
  279,  280,  281,  282,  257,  284,  285,   -1,  287,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  297,  298,
  299,   -1,  301,  257,  258,  259,  260,  261,  262,   -1,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  123,  275,   -1,  126,   -1,  279,  280,  281,  282,   33,
  284,  285,   -1,  287,   38,   -1,   40,   -1,   42,   -1,
  278,   45,   -1,  297,  298,  299,   -1,  301,   -1,  257,
  288,  289,  290,  291,  292,  293,  294,  295,  296,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  279,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   40,   41,  275,   -1,   44,   -1,  279,  280,  281,
  282,   -1,  284,  285,   -1,  287,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   62,   -1,  297,  298,  299,   -1,  301,
   -1,   33,   -1,   -1,   -1,   -1,   38,  257,   40,  123,
   42,   -1,  126,   45,   -1,   -1,   -1,  257,   -1,   -1,
  270,   -1,   91,   -1,  264,  265,  266,   -1,   -1,  279,
  270,  271,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,
   41,   42,   -1,   44,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   62,  275,   -1,   -1,   -1,  279,  280,  281,  282,
   33,  284,  285,   -1,  287,   38,   -1,   40,  126,   42,
   -1,   -1,   45,   -1,  297,  298,  299,   -1,  301,   -1,
   91,  123,   -1,   -1,  126,   -1,   38,   -1,   40,   41,
   -1,   -1,   44,  257,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,  266,   -1,   33,   -1,  270,  271,   -1,   38,
   62,   40,   -1,   42,   -1,  279,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,   91,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  123,  275,   -1,  126,   -1,  279,  280,  281,  282,   33,
  284,  285,   -1,  287,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,  297,  298,  299,   -1,  301,  257,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   -1,  270,   45,   -1,  123,   -1,  125,  126,   -1,  257,
  279,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   -1,  257,  258,  259,  260,  261,
  262,  279,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,  280,  281,
  282,   -1,  284,  285,   -1,  287,  257,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,  297,  298,  299,   -1,  301,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,  279,   40,
  123,   42,  125,  126,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,   -1,  275,   -1,   -1,  257,  279,  280,  281,  282,
   -1,  284,  285,   -1,  287,   -1,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  126,  297,  298,  299,  279,  301,  258,
  259,  260,  261,  262,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  126,   -1,   -1,  287,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,  297,  298,
  299,   38,  301,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  258,  259,  260,  261,  262,
   -1,   -1,   -1,  287,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  297,  298,  299,   -1,  301,   33,   -1,
   -1,   -1,  126,   38,  287,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,  297,  298,  299,   38,  301,   40,
   41,   -1,   -1,   44,  257,   -1,  123,   41,  125,  126,
   44,  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,
   -1,   62,   33,   -1,   -1,   59,  279,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,  258,  259,  260,
  261,  262,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,
   91,  272,  273,  274,  275,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,   -1,   -1,   -1,  287,   -1,  123,   -1,
  125,  126,   -1,   -1,   33,   -1,  297,  298,  299,   38,
  301,   40,   -1,   42,   -1,   38,   45,   40,   -1,   42,
   43,  125,   45,   46,   47,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,   61,   -1,
   -1,   -1,  123,  257,  125,  126,   -1,   -1,   -1,   -1,
  264,  265,  266,   -1,   -1,   38,  270,  271,   -1,   42,
   43,   -1,   45,   46,   47,  279,   -1,   -1,   91,   -1,
   -1,  258,  259,  260,  261,  262,   59,   60,   61,   62,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
  287,  124,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  297,  298,  299,   -1,  301,  123,   -1,  125,  126,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,  258,  259,  260,  261,  262,   -1,   -1,
   -1,  124,  267,  268,  269,   -1,  257,  272,  273,  274,
  275,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,  270,
   -1,   -1,  287,   -1,  268,  269,   -1,   -1,  279,   -1,
   -1,   -1,  297,  298,  299,   -1,  301,  258,  259,  260,
  261,  262,   -1,  287,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,   33,   -1,  301,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,  287,   45,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,  297,  298,  299,   -1,
  301,   -1,   -1,   61,   41,   -1,   -1,   44,   -1,  258,
  259,  260,  261,  262,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   59,  272,  273,  274,  275,   -1,   -1,   -1,
  258,  259,  260,  261,  262,   -1,   -1,   -1,  287,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  297,  298,
  299,   -1,  301,   -1,   -1,   33,   93,   -1,   -1,  287,
   38,   -1,   40,   -1,   42,  123,   -1,   45,  126,  297,
  298,  299,   -1,  301,   -1,   -1,   -1,   -1,   33,  282,
   -1,  284,  285,   38,   62,   40,   41,   42,  125,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   33,   40,   -1,   42,   -1,   38,
   45,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,  262,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,  297,  298,  299,   -1,  301,  123,   33,
   -1,  126,   -1,   -1,   38,   33,   40,   -1,   42,   -1,
   38,   45,   40,   -1,   42,   -1,   -1,   45,  123,   -1,
   -1,  126,   -1,   -1,  123,   -1,   -1,  126,   -1,  257,
  258,  259,  260,   -1,   41,   42,   43,   44,   45,   -1,
   47,   -1,  270,   -1,   -1,   -1,   -1,   -1,   33,   -1,
  257,   -1,   59,   38,   61,   40,   -1,   42,   -1,   93,
   45,  268,  269,   -1,   -1,   93,   -1,   -1,  257,  297,
  298,  299,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,
  287,  270,  271,   -1,   -1,   -1,   93,   -1,   -1,  123,
  279,   -1,  126,  257,  301,  123,   -1,   -1,  126,   -1,
  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,  257,
  258,  259,  260,   -1,   -1,  279,  280,  281,  125,   -1,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,   -1,  123,   -1,
   -1,  126,   -1,   -1,   -1,  270,   -1,   -1,   -1,  297,
  298,  299,  257,  258,  259,  260,   -1,   -1,  257,  258,
  259,  260,   -1,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,  270,  297,  298,  299,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,  297,  298,  299,   -1,   -1,   -1,  297,  298,
  299,   59,   60,   61,   62,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,  257,  258,  259,  260,  279,   -1,  257,
  258,  259,  260,   91,   -1,   93,  270,   -1,   -1,   -1,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  268,  269,  297,  298,  299,  124,  125,   -1,  297,
  298,  299,  257,  258,  259,  260,   -1,   -1,   -1,   -1,
  287,   -1,   -1,   -1,   38,  270,   40,   41,   42,   43,
   44,   45,   46,   47,  301,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,  297,  298,  299,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   59,   60,   61,   62,   -1,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,  123,
  124,  125,   91,   38,   93,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,  257,
   93,   -1,   -1,   -1,  123,  124,  125,   -1,   -1,   -1,
  268,  269,   38,   -1,   -1,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   93,  287,
   -1,  124,  125,   59,   -1,   61,   -1,   -1,   -1,   -1,
   -1,   38,   -1,  301,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   59,   -1,   61,   38,   -1,   93,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,  124,  125,
   -1,   38,   -1,  257,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,   -1,
   93,   -1,   59,   -1,   61,  279,   41,  124,  125,   44,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,  257,   41,
   42,   43,   44,   45,   59,   47,   -1,  301,   -1,  268,
  269,  124,  125,   -1,   -1,   41,   93,   59,   44,   61,
  279,   -1,   -1,   -1,  257,   -1,   -1,   -1,  287,   -1,
   -1,   -1,   -1,   59,   -1,  268,  269,   -1,   93,   -1,
   -1,   -1,  301,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   93,  257,   38,  287,   -1,   41,   42,   43,   44,
   45,   46,   47,  268,  269,   -1,   -1,   93,  301,   -1,
  125,   38,   -1,   -1,   59,   42,   61,   -1,   -1,   -1,
   -1,   -1,  287,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   59,   60,   -1,   -1,  301,   -1,   -1,  125,
   -1,   -1,  268,  269,   -1,   -1,   -1,   38,   93,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
  257,  287,   -1,   41,   -1,   43,   44,   45,   59,   -1,
   61,  268,  269,   -1,   -1,  301,   -1,   -1,   -1,  124,
  125,   59,   38,   61,  257,   41,   42,   43,   44,   45,
  287,   47,   -1,   -1,   -1,  268,  269,   -1,   -1,   -1,
   -1,   -1,   93,   59,  301,   61,   41,   -1,   43,   44,
   45,   -1,   -1,   -1,  287,   93,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   59,   -1,   61,   -1,  301,   -1,
   -1,  268,  269,  124,  125,   -1,   -1,   93,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  125,   -1,   -1,
  287,   -1,   -1,  268,  269,  257,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,  301,   -1,  268,  269,  124,  125,
   -1,  257,  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  268,  269,   -1,  287,  301,   38,   -1,   -1,
  125,   42,   43,   -1,   45,   46,   47,   -1,   38,  301,
   40,  287,   42,   43,   -1,   45,   46,   47,   59,   60,
   61,   62,  257,   -1,   -1,  301,   -1,   -1,   -1,   59,
   60,   61,   62,  268,  269,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,
   91,   38,  287,   40,  271,   42,   43,   -1,   45,   46,
   47,   91,  279,  280,  281,  282,  301,  284,  285,   -1,
   -1,   -1,   59,   60,   61,   62,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   -1,  268,  269,  257,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
  268,  269,   -1,   -1,   91,   38,  287,   40,   41,   42,
   43,  257,   45,   46,   47,   -1,   -1,   -1,   -1,  287,
  301,   -1,  268,  269,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,  257,  301,   -1,   -1,   -1,  124,   -1,   -1,
   -1,  287,   -1,  268,  269,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,  301,   -1,   -1,   91,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   60,   61,   62,
   38,   -1,   40,   -1,   42,   43,  301,   45,   46,   47,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,  124,   60,   61,   62,   -1,   -1,   -1,   91,   -1,
   93,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   91,   -1,   93,   -1,   -1,   -1,  270,
   -1,  124,   -1,   91,   60,   61,   62,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   91,  124,   93,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   91,   60,   61,   62,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   60,   61,   62,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  124,   93,   -1,   60,   61,   62,   38,
   -1,   40,   91,   42,   43,   -1,   45,   46,   47,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   60,   61,   62,   -1,  124,   -1,   91,   -1,   -1,
   -1,   60,   61,   62,   38,  124,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   60,   61,   62,   -1,
  124,   -1,   91,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,
  271,   -1,   -1,   -1,   -1,  124,   -1,   91,  279,  280,
  281,  282,   -1,  284,  285,  124,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  279,  280,  281,  282,  257,  284,  285,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
  282,  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,  257,  284,  285,
   -1,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,  282,  257,  284,  285,   -1,   -1,   -1,   -1,
  264,  265,  266,   -1,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  279,  280,  281,  282,  257,
  284,  285,   -1,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  279,  280,  281,  282,  257,  284,  285,   -1,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,  281,
  282,  257,  284,  285,   -1,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,  280,  281,  282,  257,  284,  285,
   -1,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,  282,  257,  284,  285,  257,   -1,   -1,   -1,
  264,  265,  266,  264,  265,  266,  270,  271,   -1,  270,
  271,   -1,   -1,   -1,  257,  279,  280,  281,  279,  280,
  281,  264,  265,  266,   -1,   -1,  257,  270,  271,   -1,
   -1,   -1,   -1,  264,  265,  266,  279,  280,  281,  270,
  271,   -1,   -1,   -1,  257,   -1,   -1,  257,  279,  280,
  281,  264,  265,  266,  264,  265,  266,  270,  271,   -1,
  270,  271,   -1,   -1,   -1,  257,  279,  280,  281,  279,
  280,  281,  264,  265,  266,   -1,   -1,  257,  270,  271,
   -1,   -1,   -1,   -1,  264,  265,  266,  279,  280,  281,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  280,  281,
};
static int yyctable[] = {                                      1,
    2,  123,  175,   -1,    2,    2,   -1,    3,    2,   -1,
    4,    2,   -1,    5,    2,   -1,    6,    2,   -1,    7,
    2,  123,  175,   -1,    8,    2,  123,  175,   -1,    9,
    2,  123,  175,   -1,   10,    2,   -1,   11,    2,   -1,
   12,    2,   -1,   13,    2,  123,  175,   -1,   14,    2,
  123,  175,   -1,   15,    2,   -1,   16,    2,  175,   -1,
   17,    2,  175,   -1,   18,    2,  175,   -1,   19,    2,
  175,   -1,   20,    2,  175,   -1,   21,    2,  175,   -1,
   22,    2,   -1,   23,    2,   -1,   24,    2,   -1,   25,
    2,   -1,   26,    2,   -1,   27,    2,   -1,   28,    2,
   -1,   29,    2,   -1,   30,    2,   -1,   31,    2,   -1,
   32,    2,   -1,   33,    2,   -1,   78,  123,  176,   -1,
   79,  123,  176,   -1,   80,  123,  176,   -1,   81,  123,
  176,   -1,   82,   50,  123,  176,   -1,   14,  123,  176,
   -1,   16,  176,   -1,   17,  176,   -1,   83,  176,   -1,
   84,   50,   -1,   88,  123,  175,   -1,  123,  175,   -1,
   16,  175,   -1,   78,  169,   -1,   13,  169,   -1,   78,
  170,   -1,   13,  170,   -1,   78,  171,   -1,   13,  171,
   -1,   95,  115,   -1,   78,  213,   -1,   27,  213,   -1,
   28,  213,   -1,   29,  213,   -1,   30,  213,   -1,  132,
  186,   -1,   75,  186,   -1,    1,  123,  175,   -1,    7,
  123,  175,   -1,    8,  123,  175,   -1,    9,  123,  175,
   -1,   13,  123,  175,   -1,   14,  123,  175,   -1,   17,
  175,   -1,   18,  175,   -1,   19,  175,   -1,   20,  175,
   -1,   21,  175,   -1,  171,  175,   -1,   13,  175,   -1,
  112,  123,   -1,   16,  112,   -1,  176,  175,   -1,  179,
   29,   -1,  171,  123,  175,   -1,   79,  123,  175,   -1,
   80,  123,  175,   -1,   81,  123,  175,   -1,   83,  175,
   -1,  188,   75,   -1,  188,   77,   -1,  188,   78,   -1,
  188,   79,   -1,  188,   51,   -1,  188,   76,   -1,  151,
  209,   -1,  152,  209,   -1,  153,  209,   -1,  154,  209,
   -1,  155,  209,   -1,  156,  209,   -1,  157,  209,   -1,
  158,  209,   -1,  159,  209,   -1,  160,  209,   -1,  161,
  209,   -1,  162,  209,   -1,  151,  210,   -1,  152,  210,
   -1,  153,  210,   -1,  154,  210,   -1,  155,  210,   -1,
  156,  210,   -1,  157,  210,   -1,  158,  210,   -1,  159,
  210,   -1,  160,  210,   -1,  161,  210,   -1,  162,  210,
   -1,  151,  212,   -1,  152,  212,   -1,  153,  212,   -1,
  154,  212,   -1,  155,  212,   -1,  156,  212,   -1,  157,
  212,   -1,  158,  212,   -1,  159,  212,   -1,  160,  212,
   -1,  161,  212,   -1,  162,  212,   -1,  151,  188,   -1,
  152,  188,   -1,  151,  191,   -1,  152,  191,   -1,  151,
  192,   -1,  152,  192,   -1,  210,   50,   -1,  151,  189,
   -1,  152,  189,   -1,  151,  190,   -1,  152,  190,   -1,
   88,  175,   -1,   16,  123,   -1,   50,  176,   -1,  272,
   33,   -1,  273,   33,   -1,  274,   33,   -1,  275,   33,
   -1,  283,   50,   -1,  188,   52,   -1,  151,  199,   -1,
  152,  199,   -1,  151,  193,   -1,  152,  193,   -1,  151,
  194,   -1,  152,  194,   -1,  151,  195,   -1,  152,  195,
   -1,  151,  196,   -1,  152,  196,   -1,  151,  197,   -1,
  152,  197,   -1,  151,  198,   -1,  152,  198,   -1,  151,
  205,   -1,  152,  205,   -1,  151,  211,   -1,  152,  211,
   -1,  153,  211,   -1,  154,  211,   -1,  155,  211,   -1,
  156,  211,   -1,  157,  211,   -1,  158,  211,   -1,  159,
  211,   -1,  160,  211,   -1,  161,  211,   -1,  162,  211,
   -1,  151,  202,   -1,  152,  202,   -1,  151,  203,   -1,
  152,  203,   -1,  151,  201,   -1,  152,  201,   -1,  151,
  204,   -1,  152,  204,   -1,  319,   63,   -1,   11,   63,
   -1,   12,   63,   -1,  320,   63,   -1,   26,   63,   -1,
  179,   59,   -1,
};
#define YYFINAL 34
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 311
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknEnum","tknPreProDef","tknClass",
"tknStruct","tknUnion","tknNamespace","tknDocBlockComment","tknDocLineComment",
"tknScopeResOp","tknNumSignSpec","tknPublic","tknProtected","tknPrivate",
"tknExternC","tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknConst",
"tknStatic","tknExtern","tknVirtual","tknOverride","tknInline","tknExplicit",
"tknFriend","tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf",
"tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf","tknNew","tknDelete",
"tknReturn","tknVarArg","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefn",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : functionpointer",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optconst vartype ptrlevelopt reftype tknID",
"vartype : identifier",
"vartype : tknNumSignSpec identifier",
"vartype : tknClass identifier",
"vartype : tknStruct identifier",
"vartype : tknUnion identifier",
"vartype : identifier '<' templateparam '>'",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optconst",
"vardecl : varqual identifier optconst",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype '&' '&' identifier",
"varqual : optconst vartype optconst ptrlevelopt reftype optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' expr ']' optconst",
"varqual : optconst vartype optconst ptrlevelopt reftype '[' ']' optconst",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' tknID ')' '(' paramlist ')'",
"funcdecl : functype apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer identifier '(' paramlist ')' funcattrib",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype : varattrib",
"functype : tknInline",
"functype : tknVirtual",
"functype : tknExtern",
"functype : tknExplicit",
"functype : tknInline tknExplicit",
"functype : tknExplicit tknInline",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optconst :",
"optconst : tknConst",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"vardecllist : vardecl ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardecllist : vardecllist ',' optconst ptrlevelopt reftype optconst identifier optconst",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}' classdefnend",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"classdefnend :",
"classdefnend : ';'",
"apidocer :",
"apidocer : tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : identifier",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '=' expr",
"expr : expr '[' expr ']'",
"expr : expr '=' '=' expr",
"expr : expr '<' '<' expr",
"expr : expr '>' '>' expr",
"expr : expr '-' '>' expr",
"expr : expr '.' expr",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 812 "C:/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "' found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  void setupScanBuffer(char* buf, size_t bufsize);
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();

  return gProgUnit;
}
#line 1665 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 252 "C:/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 2055 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 259 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 2061 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 260 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2071 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 265 "C:/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 2081 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 270 "C:/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 2087 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 273 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 2093 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 274 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 2099 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 275 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2105 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 276 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 2111 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 277 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 2117 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 278 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2123 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 279 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 2129 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 280 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 2135 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 281 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 2141 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 282 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 2147 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 283 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2153 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 284 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 2159 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 285 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2165 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 286 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 2171 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 287 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2177 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 288 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 2183 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 289 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 2189 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 290 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 2195 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 291 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 2201 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 292 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 2207 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 293 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 2213 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 294 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 2219 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 295 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 2225 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 296 "C:/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 2231 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 299 "C:/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 2237 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 300 "C:/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 2243 "y_tab.c"
break;
case 32:
#line 303 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2248 "y_tab.c"
  if (!yytrial)
#line 303 "C:/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2255 "y_tab.c"
break;
case 33:
#line 307 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2260 "y_tab.c"
  if (!yytrial)
#line 307 "C:/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 2267 "y_tab.c"
break;
case 34:
#line 311 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2272 "y_tab.c"
  if (!yytrial)
#line 311 "C:/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 2279 "y_tab.c"
break;
case 35:
#line 315 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2284 "y_tab.c"
  if (!yytrial)
#line 315 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 2291 "y_tab.c"
break;
case 36:
#line 319 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2296 "y_tab.c"
  if (!yytrial)
#line 319 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 2303 "y_tab.c"
break;
case 37:
#line 323 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2308 "y_tab.c"
  if (!yytrial)
#line 323 "C:/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 2315 "y_tab.c"
break;
case 38:
#line 329 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2320 "y_tab.c"
  if (!yytrial)
#line 329 "C:/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 2324 "y_tab.c"
break;
case 39:
#line 332 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2329 "y_tab.c"
  if (!yytrial)
#line 332 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2333 "y_tab.c"
break;
case 40:
#line 333 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2338 "y_tab.c"
  if (!yytrial)
#line 333 "C:/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 2342 "y_tab.c"
break;
case 41:
#line 339 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2347 "y_tab.c"
  if (!yytrial)
#line 339 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 2351 "y_tab.c"
break;
case 42:
#line 340 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2356 "y_tab.c"
  if (!yytrial)
#line 340 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 2360 "y_tab.c"
break;
case 43:
#line 341 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2365 "y_tab.c"
  if (!yytrial)
#line 341 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 2369 "y_tab.c"
break;
case 44:
#line 342 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2374 "y_tab.c"
  if (!yytrial)
#line 342 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 2378 "y_tab.c"
break;
case 45:
#line 343 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2383 "y_tab.c"
  if (!yytrial)
#line 343 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 2387 "y_tab.c"
break;
case 46:
#line 344 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2392 "y_tab.c"
  if (!yytrial)
#line 344 "C:/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 2396 "y_tab.c"
break;
case 47:
#line 347 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2401 "y_tab.c"
  if (!yytrial)
#line 347 "C:/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 2405 "y_tab.c"
break;
case 48:
#line 350 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2410 "y_tab.c"
  if (!yytrial)
#line 350 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2414 "y_tab.c"
break;
case 49:
#line 351 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2419 "y_tab.c"
  if (!yytrial)
#line 351 "C:/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str); }
#line 2423 "y_tab.c"
break;
case 50:
  if (!yytrial)
#line 354 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2429 "y_tab.c"
break;
case 51:
  if (!yytrial)
#line 355 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2435 "y_tab.c"
break;
case 52:
  if (!yytrial)
#line 356 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 2441 "y_tab.c"
break;
case 53:
  if (!yytrial)
#line 359 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 2447 "y_tab.c"
break;
case 54:
  if (!yytrial)
#line 360 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2453 "y_tab.c"
break;
case 55:
  if (!yytrial)
#line 363 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 2459 "y_tab.c"
break;
case 56:
  if (!yytrial)
#line 364 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 2465 "y_tab.c"
break;
case 57:
  if (!yytrial)
#line 365 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 2471 "y_tab.c"
break;
case 58:
  if (!yytrial)
#line 366 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 2477 "y_tab.c"
break;
case 59:
  if (!yytrial)
#line 367 "C:/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 2483 "y_tab.c"
break;
case 60:
  if (!yytrial)
#line 370 "C:/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 2489 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 371 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2498 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 375 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 2507 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 379 "C:/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 2515 "y_tab.c"
break;
case 64:
#line 384 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2520 "y_tab.c"
  if (!yytrial)
#line 384 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 2526 "y_tab.c"
break;
case 65:
#line 387 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2531 "y_tab.c"
  if (!yytrial)
#line 387 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 2537 "y_tab.c"
break;
case 66:
#line 390 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2542 "y_tab.c"
  if (!yytrial)
#line 390 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 2548 "y_tab.c"
break;
case 67:
#line 393 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2553 "y_tab.c"
  if (!yytrial)
#line 393 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 2559 "y_tab.c"
break;
case 68:
#line 397 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2564 "y_tab.c"
  if (!yytrial)
#line 397 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 2570 "y_tab.c"
break;
case 69:
#line 400 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2575 "y_tab.c"
  if (!yytrial)
#line 400 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 2581 "y_tab.c"
break;
case 70:
#line 403 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2586 "y_tab.c"
  if (!yytrial)
#line 403 "C:/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 2592 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 408 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2598 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 409 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 2604 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 412 "C:/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 2610 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 415 "C:/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 2619 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 421 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 2625 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 422 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2631 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 423 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2637 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 424 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2643 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 425 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 2649 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 426 "C:/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 2658 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 432 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 2664 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 435 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 2675 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 441 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 2685 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 446 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2696 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 452 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 2706 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 457 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 2717 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 463 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 2727 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 472 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 2735 "y_tab.c"
break;
case 89:
  if (!yytrial)
#line 475 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 2743 "y_tab.c"
break;
case 90:
  if (!yytrial)
#line 478 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-3].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 2751 "y_tab.c"
break;
case 91:
  if (!yytrial)
#line 484 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 2759 "y_tab.c"
break;
case 92:
  if (!yytrial)
#line 487 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 2768 "y_tab.c"
break;
case 93:
  if (!yytrial)
#line 491 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 2776 "y_tab.c"
break;
case 94:
  if (!yytrial)
#line 496 "C:/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 2782 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 497 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 2788 "y_tab.c"
break;
case 96:
#line 500 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2793 "y_tab.c"
  if (!yytrial)
#line 500 "C:/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 2797 "y_tab.c"
break;
case 97:
#line 503 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2802 "y_tab.c"
  if (!yytrial)
#line 503 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 2810 "y_tab.c"
break;
case 98:
#line 510 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 2815 "y_tab.c"
  if (!yytrial)
#line 510 "C:/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 2822 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 515 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 2832 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 520 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 2842 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 527 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 2852 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 532 "C:/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 2862 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 539 "C:/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 2868 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 540 "C:/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 2877 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 544 "C:/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 2886 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 550 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2892 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 551 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2898 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 552 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 2904 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 553 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 2910 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 556 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 2916 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 557 "C:/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 2922 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 560 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[0].attr;      }
#line 2928 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 561 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline;    }
#line 2934 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 562 "C:/github/cppparser/parser.y"
{ yyval.attr = kVirtual;  }
#line 2940 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 563 "C:/github/cppparser/parser.y"
{ yyval.attr = kExtern;    }
#line 2946 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 564 "C:/github/cppparser/parser.y"
{ yyval.attr = kExplicit;  }
#line 2952 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 565 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2958 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 566 "C:/github/cppparser/parser.y"
{ yyval.attr = kInline | kExplicit; }
#line 2964 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 569 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2970 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 570 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 2976 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 571 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 2982 "y_tab.c"
break;
case 122:
#line 572 "C:/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else YYVALID;}
#line 2987 "y_tab.c"
  if (!yytrial)
#line 573 "C:/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 2991 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 576 "C:/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 2997 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 577 "C:/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 3003 "y_tab.c"
break;
case 125:
#line 580 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3008 "y_tab.c"
  if (!yytrial)
#line 580 "C:/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 3012 "y_tab.c"
break;
case 126:
#line 586 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3017 "y_tab.c"
  if (!yytrial)
#line 587 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3025 "y_tab.c"
break;
case 127:
#line 592 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3030 "y_tab.c"
break;
case 128:
#line 596 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3035 "y_tab.c"
  if (!yytrial)
#line 597 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3042 "y_tab.c"
break;
case 129:
#line 601 "C:/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3047 "y_tab.c"
break;
case 130:
#line 605 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3052 "y_tab.c"
  if (!yytrial)
#line 606 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 3059 "y_tab.c"
break;
case 131:
#line 613 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3071 "y_tab.c"
  if (!yytrial)
#line 621 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 3077 "y_tab.c"
break;
case 132:
#line 624 "C:/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3082 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 625 "C:/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 3090 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 630 "C:/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 3096 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 631 "C:/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3102 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 632 "C:/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 3108 "y_tab.c"
break;
case 137:
#line 635 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3113 "y_tab.c"
  if (!yytrial)
#line 635 "C:/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 3117 "y_tab.c"
break;
case 138:
#line 638 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3122 "y_tab.c"
  if (!yytrial)
#line 639 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3129 "y_tab.c"
break;
case 139:
#line 643 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3134 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 645 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3143 "y_tab.c"
break;
case 141:
#line 649 "C:/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else YYVALID;}
#line 3148 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 651 "C:/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 3157 "y_tab.c"
break;
case 143:
#line 658 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3169 "y_tab.c"
  if (!yytrial)
#line 666 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 3177 "y_tab.c"
break;
case 144:
#line 672 "C:/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      YYVALID;
                  }
#line 3189 "y_tab.c"
  if (!yytrial)
#line 680 "C:/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 3197 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 687 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3207 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 692 "C:/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 3216 "y_tab.c"
break;
case 147:
#line 698 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3221 "y_tab.c"
  if (!yytrial)
#line 698 "C:/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 3225 "y_tab.c"
break;
case 148:
#line 701 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3230 "y_tab.c"
  if (!yytrial)
#line 701 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3234 "y_tab.c"
break;
case 149:
#line 702 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3239 "y_tab.c"
  if (!yytrial)
#line 702 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 3243 "y_tab.c"
break;
case 150:
#line 703 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3248 "y_tab.c"
  if (!yytrial)
#line 703 "C:/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 3252 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 706 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 3258 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 707 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 3264 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 710 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 3270 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 711 "C:/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 3276 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 714 "C:/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 3282 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 715 "C:/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 3288 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 716 "C:/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 3294 "y_tab.c"
break;
case 158:
#line 720 "C:/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); YYVALID;}
#line 3299 "y_tab.c"
  if (!yytrial)
#line 720 "C:/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 3303 "y_tab.c"
break;
case 159:
#line 722 "C:/github/cppparser/parser.y"
{gCompoundStack.pop(); YYVALID;}
#line 3308 "y_tab.c"
  if (!yytrial)
#line 723 "C:/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-2].cppCompundObj ? yyvsp[-2].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-8].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-7].str;
                    yyval.cppCompundObj->name_      = yyvsp[-6].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 3321 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 734 "C:/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 3327 "y_tab.c"
break;
case 161:
#line 735 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3332 "y_tab.c"
  if (!yytrial)
#line 735 "C:/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3336 "y_tab.c"
break;
case 162:
#line 736 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3341 "y_tab.c"
  if (!yytrial)
#line 736 "C:/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 3345 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 739 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 3351 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 740 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 3357 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 741 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3363 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 742 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 3369 "y_tab.c"
break;
case 167:
#line 745 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3374 "y_tab.c"
  if (!yytrial)
#line 745 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 3378 "y_tab.c"
break;
case 168:
#line 746 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3383 "y_tab.c"
  if (!yytrial)
#line 746 "C:/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 3387 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 749 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 3393 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 750 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 3399 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 751 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 3405 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 752 "C:/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 3411 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 759 "C:/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 3417 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 760 "C:/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 3423 "y_tab.c"
break;
case 177:
#line 763 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3428 "y_tab.c"
  if (!yytrial)
#line 763 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 3432 "y_tab.c"
break;
case 178:
#line 764 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3437 "y_tab.c"
  if (!yytrial)
#line 764 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 3441 "y_tab.c"
break;
case 179:
#line 765 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3446 "y_tab.c"
  if (!yytrial)
#line 765 "C:/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 3450 "y_tab.c"
break;
case 180:
#line 768 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3455 "y_tab.c"
  if (!yytrial)
#line 768 "C:/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 3459 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 771 "C:/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 3465 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 772 "C:/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 3471 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 775 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3477 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 776 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3483 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 777 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3489 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 778 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 3495 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 779 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 3501 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 780 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 3507 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 781 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 3513 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 782 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 3519 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 783 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 3525 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 784 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 3531 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 785 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 3537 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 786 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 3543 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 787 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 3549 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 788 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 3555 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 789 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 3561 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 790 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 3567 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 791 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 3573 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 792 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 3579 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 793 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 3585 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 794 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 3591 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 795 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 3597 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 796 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 3603 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 797 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 3609 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 798 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 3615 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 799 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 3621 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 800 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 3627 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 801 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 3633 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 802 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 3639 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 803 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 3645 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 804 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 3651 "y_tab.c"
break;
case 213:
  if (!yytrial)
#line 805 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 3657 "y_tab.c"
break;
case 214:
#line 808 "C:/github/cppparser/parser.y"
{YYVALID;}
#line 3662 "y_tab.c"
  if (!yytrial)
#line 808 "C:/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 3666 "y_tab.c"
break;
#line 3668 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
