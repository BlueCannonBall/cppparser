#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,   30,   40,   40,   41,   42,   43,
   39,   39,   70,   70,   70,   70,   70,   70,   71,   72,
   72,   73,   73,   73,   73,   73,   73,   74,   36,   36,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    4,    4,   11,   11,   11,   11,
   12,   12,   12,   12,    9,    9,    9,    9,    9,   10,
   10,   10,   25,   25,   24,   23,   16,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   14,   14,   14,   63,
   63,   55,   55,   56,   56,   47,   48,    8,   44,   44,
   45,   46,   46,   46,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,   22,   22,   22,   18,   18,   18,
   18,   19,   19,   65,   65,   65,   65,   65,   65,   64,
   64,   64,   64,   64,   62,   62,   62,   50,   51,   75,
   51,   76,   51,   51,   49,   77,   49,   49,   57,   57,
   57,   53,   54,   78,   54,   79,   54,   52,   52,   52,
   20,   20,   21,   17,   17,   17,   59,   59,   60,   60,
   61,   61,   61,   28,   28,   80,   27,   27,   66,   66,
   66,   67,   67,   67,   67,   13,   13,   13,   58,   58,
   58,   58,   31,   32,   32,   33,   33,   34,   34,   35,
    6,    6,    1,    1,    1,    1,   68,   68,   68,   29,
   69,   69,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   38,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    5,    3,    5,    6,    9,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    2,    2,
    1,    2,    4,    1,    0,    1,    1,    3,    1,    1,
    0,    2,    3,    2,    6,    8,    9,    7,    8,    5,
    6,    4,    2,    2,    3,    6,    3,    4,    3,    6,
    5,    5,    4,    3,    3,    3,    6,    9,    8,    1,
    1,    4,    2,    2,    2,    2,    2,    3,   11,   10,
    2,    9,    8,    2,    1,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    3,    0,    1,    3,    1,    1,    1,
    1,    1,    1,    0,    2,    2,    2,    2,    2,    0,
    2,    2,    2,    3,    0,    1,    1,    2,    5,    0,
   11,    0,   13,    2,    4,    0,    6,    2,    0,    5,
    6,    2,    2,    0,    8,    0,   10,    4,    5,    7,
    8,    8,    2,    2,    2,    3,    0,    1,    1,    2,
    0,    1,    2,    2,    1,    0,    8,    2,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    2,    1,    1,
    1,    1,    4,    1,    3,    1,    1,    2,    2,    3,
    1,    1,    0,    1,    4,    2,    2,    2,    2,    2,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    4,    3,    4,
    4,    7,    7,    7,    7,    3,    2,    2,    4,    2,
    1,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  263,  264,  265,    0,    0,    0,    0,    0,    0,
  242,    0,   59,   60,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  186,  110,  111,    0,    0,  187,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  266,    3,   28,    8,    9,   12,    0,    0,    0,
    6,    0,    7,    0,    0,   10,    0,    0,   11,   27,
   34,    0,   13,    0,   14,    0,   16,   17,   18,    0,
   19,    0,   20,   21,    0,   22,   23,    0,   24,   25,
    0,   26,    0,    0,    0,    0,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  159,  161,  162,  137,
  138,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  160,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  239,  240,  241,
  238,    0,    0,    0,    0,    0,    0,    0,    0,   55,
    0,   57,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   72,    0,    0,  219,
    0,    0,    0,    0,    0,  214,  215,    0,  213,    0,
   94,   93,    0,    0,    0,    4,    5,  224,    0,    0,
    0,  228,  124,    0,  194,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  274,  276,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  324,    0,  121,  116,  117,  188,    0,    0,
  202,  203,  113,  114,  115,    0,    0,    0,    0,    0,
    0,    0,  175,  178,  177,  176,  179,    0,    0,    0,
    0,    0,    0,  168,  166,    0,  171,    0,  216,  256,
    0,   76,    0,    0,  118,    0,    0,    0,   81,    0,
  251,    0,    0,    0,  244,    0,  247,    0,    0,    0,
    0,    0,  163,  164,    0,    0,    0,  316,    0,    0,
   58,    0,   49,   50,   51,   52,   53,   54,   56,    0,
    0,    0,    0,    0,    0,   35,    0,  267,    0,    0,
    0,    0,    0,  172,    0,  173,    0,    0,  220,    0,
    0,   99,    0,    0,    0,   95,  257,  258,  259,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  309,    0,    0,    0,   37,    0,    0,
    0,    0,    0,  236,    0,    0,    0,    0,    0,    0,
  204,  255,    0,  195,    0,   81,    0,    0,    0,   81,
   92,    0,    0,  249,  248,  243,    0,    0,    0,    0,
    0,    0,  112,  208,    0,    0,   43,   46,   47,   45,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,  103,    0,    0,    0,  190,    0,    0,  310,
  308,    0,    0,    0,    0,    0,  237,    0,    0,   98,
    0,    0,    0,    0,    0,  167,    0,    0,    0,   81,
   90,    0,    0,    0,    0,    0,    0,   82,   79,   80,
  245,    0,    0,    0,    0,    0,    0,   36,    0,   38,
    0,    0,    0,    0,  192,    0,  102,    0,    0,    0,
    0,    0,  189,  233,  234,  235,    0,    0,  226,    0,
  101,    0,    0,  209,    0,    0,    0,    0,  223,   96,
    0,    0,   81,   91,    0,   83,   85,    0,    0,    0,
    0,    0,    0,   39,    0,    0,    0,    0,  206,    0,
    0,  200,    0,    0,    0,    0,    0,  107,  100,  197,
    0,    0,    0,    0,    0,   88,    0,    0,  312,  313,
  314,  315,  210,    0,    0,  180,    0,    0,    0,    0,
    0,  201,    0,    0,    0,    0,    0,    0,  205,   89,
   86,    0,    0,    0,    0,    0,    0,    0,  211,  212,
  227,  109,    0,  180,    0,   87,   40,    0,    0,  181,
  182,  183,    0,    0,    0,  108,    0,    0,  120,  184,
    0,    0,  207,  191,  119,    0,    0,  193,
};
static int yydgoto[] = {                                      48,
   49,  135,   51,  119,   52,  333,   53,   54,   55,   56,
  518,  453,   57,   58,   59,   60,   61,  315,  375,   62,
   63,  316,   64,   65,   66,  211,   68,   69,   70,   71,
   72,  334,  335,  336,  337,   73,   74,   75,  362,   76,
   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   92,  290,   93,  447,  448,
  509,   94,   95,  625,   96,  496,  547,  237,  213,   97,
   98,   99,  100,  101,  440,  578,  437,  505,  609,  586,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0, -211,    0,  -71,    0,    0,    0,
    0,    2,    0,    0, 2272,    0,  -41,    0,   29,   42,
   65,  109,  443, 3013, 2668, 2668, 2668, 2668, 2668, 2755,
 2668, 2842,    0,    0,    0,   47,  397,    0, 1002,  216,
  270,  302, 2138, 2668, 2225,  443,    0,    0,    0, -224,
   -8,    0,    0,    0,    0,    0,    0, 2272,  247,  294,
    0,   33,    0,   39,  305,    0,  102,  336,    0,    0,
    0,  392,    0, 5396,    0,    0,    0,    0,    0,  341,
    0,  155,    0,    0,  245,    0,    0,  167,    0,    0,
  -44,    0,    0, 2272,  179,  372,    0,    0,    0,    0,
    0,    0, 2272, 2272, 2272, 1841,    0,  342,  366,  423,
  212,    0,  440, 2272,    0,    0,  465,  251,  429,    0,
    0,    0, 1129,    0,    0,    0,    0,  179,  179,  179,
  179, 5206, 2668, 2668, -137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  513,  477,  538,    0,    0,  176,  176,
  176,    0,  176,  176,  543, 5431,  347,    0,    0,    0,
    0,    0,  329,  349,  374,  -59,  334,  383,  385,    0,
  390,    0, 2668, 2668, 2668,  312,    0,  584,    0,    0,
 1716, 5396,  -22,  627, 1616, 2363,    0,    0, 2272,    0,
 2272, 1924,  174, 2668,    0,    0,    0,    0,    0,  433,
    0,    0,  636,  637,  646,    0,    0,    0,  666,  179,
  -29,    0,    0,    0,    0,    0,  578, 2668, 2668, 2668,
 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668,
 2668, 2668, 2668, 2668,    0,    0, 2668, 2668, 2668, 2668,
 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2312,
 2668, 2668,    0, 2138,    0,    0,    0,    0,  462,    7,
    0,    0,    0,    0,    0,  423, 2452,  -18,    0, 2272,
    0,  467,    0,    0,    0,    0,    0,  179,    0,  473,
  446, 2272,  685,    0,    0,  243,    0, 2272,    0,    0,
  495,    0,  563,  627,    0,  719, 2272,  143,    0, 1382,
    0,  506,  528,  166,    0,  709,    0,  726,  743,  745,
  747, 6510,    0,    0,  773,  774, 2668,    0,  771, 2272,
    0,  555,    0,    0,    0,    0,    0,    0,    0, 5505,
 6510,  761, 5621,  792, 2668,    0, 2668,    0,  576, 1757,
  795,    0,    0,    0,  775,    0,  -25,  -25,    0,  -25,
 2401,    0, 6510,  719,  719,    0,    0,    0,    0,  581,
    0, 2539,  587,    0,    0,    0,    0,    0,    0,    0,
    0,   26,   26,    0,    0, 1401,    0,    0,    0,    0,
  176,    0,    0,    0, 2334, 2334,   26,   26,   26,    0,
  381,  381, 1401,    0,  325, 5728,  176,    0,  805,  589,
    0,  794,  132,    0,  719, 1083,  810,  813,    0,  814,
    0,    0,    0,    0,  818,    0,  817,  819,   54,    0,
    0, 2272,   75,    0,    0,    0, 1129, 2668,  824,  833,
  834,  835,    0,    0,    0,  837,    0,    0,    0,    0,
    0, 2138, 2668, 2138, 2668,    0, 6510,  823,  839,  576,
 -106,    0,    0, 5786,  817,  817,    0,    0,  794,    0,
    0, 2668,  842, 1800,  461,   23,    0,  817, 2488,    0,
    0,  849, 1757,    0,  843,    0,  232,  853,  642,    0,
    0,  286,   72,  858,    0,  913,  841,    0,    0,    0,
    0, 8303, 2668, 2668, 2668, 2668,  875,    0,  878,    0,
 5813,  212,    0,  897,    0,  694,    0,  179,  179,  696,
 5912, 2668,    0,    0,    0,    0, 2272,  461,    0,  -83,
    0, 5951,  558,    0,  916,  575,  917,  702,    0,    0,
  450,  905,    0,    0, 2668,    0,    0, 6009, 6097, 6135,
 6232,  705, 2668,    0,  925,  582,  212,  927,    0, 2272,
 2272,    0, 6287,  -25, 2272,    0, 2579,    0,    0,    0,
    0,  921,  -41,  915,  922,    0,  718, 6510,    0,    0,
    0,    0,    0,  941,  944,    0,  945,    0,  947,   62,
   62,    0,  -25, 1884,  179, 6325,  586,   67,    0,    0,
    0,  926, 2138,    0,  106,  951,  628,  953,    0,    0,
    0,    0,  179,    0,    0,    0,    0,  679,  739,    0,
    0,    0,    0,  921,  -41,    0,  106, 1970,    0,    0,
  690,   74,    0,    0,    0,    0, 2054,    0,
};
static int yyrindex[] = {                                     19,
 4804,    0,    0,    0,  625, 3985,  879,    0,    0,    0,
    0,    0,    0,    0,    0, 4052,    0,    0,    0,    0,
    0,    0, 4377, 2558,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4414,  208,    0,  783, 6416,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1001,  482,    0,    0,
    0,  783,    0,    0,    0,  847,    0,    0,    0,    0,
    0,    0,    0,    0,   84,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2558,  681,    0,    0,    0,    0,
    0,  731,    0,    0,    0,    0,   -5,  -15,    0, 2470,
  879,  783,    0,    0,    0, 3074,  881,    0,    0, 3147,
 3435, 3503,    0, 3571, 3859,  208,    0, 2558, 2558, 2558,
 2558,    0,    0,    0, 4340,  735,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1893, 2089,  111,  137,
  279, 5321,  825, 2231,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  955,    0,    0, 2193,    0, 2370, 2638,
    0,  -16,    0, 1295, 2558,    0,    0,  625,    0,    0,
    0,    0,  418,    0, 1152,    0,    0, 1152,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  574, 2558,
    0,    0,    0,  956,    0,    0,  681,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  770,    0,    0, 9131,    0,
 2382,    0,    0,    0,    0,    0,    0, 2558,  173,    0,
 1113,  736,  737,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -33,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  224,    0,    0,    0,    0,
    0,   16,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  938,    0,    0,    0,    0,    0,    0,    0,    0,
  408,    0,    0,    0,    0,    0,    0,    0,  970,    0,
    0, 5280, 3927,    0,    0,    0,  553,  652,    0,  790,
    0,    0,  612,   15,   15,    0,    0,    0,    0,    0,
 1295,    0,    0, 3159, 3163, 3495, 3563, 3866, 3995, 4043,
 4533, 4483, 4692, 4562, 4566, 4684, 4811, 4815, 4817, 4865,
 2546, 4873, 4886, 4902,  144,  518, 4715, 4728, 4769, 4910,
 2939, 4474, 4930,    0,    0,    0, 2902,    0,    0,    0,
  208,   10,    0,    0, 3241,  418,    0,    0, 1295,    0,
    0,    0,  395,    0,    0,    0,  759, 4740,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4950,    0,    0,    0,    0,    0,
    0,    0,  955,    0,    0, 4960,   40,    0,    0,  970,
    0,    0,    0,    0, 2650, 2650,    0,  -42,   85,    0,
    0,    0,    0,    0, 2626,    0,    0, 5029,    0,    0,
   -5,    0,    0,   -5,    0,    0,    0, 5087,    0,    0,
    0,    0,    0,  751,   12,    0,    0,    0,    0,    0,
    0,  975,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  980,   -5,    0,    0,    0,    0, 2558, 2558,    0,
    0,    0,    0,    0,    0,    0,    0, 2626,    0, 2815,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  983,    0,    0,    0,  980,    0,    0,    0,
    0,    0,    0,   95,    0,  208,    0,    0,    0,    0,
   -5,   84,    0,    0,    0,    0,    0,  756,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   -5,    0,  297,
  297,    0,  120,    0, 2815,    0,    0,    0,    0,    0,
    0,    0,    0,   -5,  220,    0,    0,    0,    0,    0,
    0,    0, 2815,    0,  208,    0,    0,    0,    0,    0,
    0,    0,   -5,   84,    0,    0,  252,    0,    0,    0,
    0,    0,    0,    0,    0,  208,    0,    0,
};
static int yycindex[] = {                                   1027,
  695,    0,    0,    0, 3377, 2737,    0, 2881, 2904, 2963,
    0,    0,    0,    0,    0, 3728,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0, 4055,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2977,    0,    0,  310, 1192,    0, 4215,  530,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3401,    0,    0,    0,
    0, 4291,    0,    0,    0,  698,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4313,    0,    0,  768,    0,    0,    0,    0,
    0,  124,    0,    0,    0,    0, 2294,  218,    0,  769,
    0, 7527,    0,    0,    0,   36,    0,    0,    0,  108,
  116,  146,    0,  149,  172, 1281,    0,    0,    0,    0,
    0,    0,    0,    0,  971, 6606,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6641, 6700, 5590, 8155,
 8248,  990, 8339, 8375,    0,    0,    0,    0,    0,    0,
    0, 4615,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 6735,    0, 6790, 6831,
 4889,    0,    0,  776,    0,    0,    0, 9045,    0,    0,
    0,    0,    0,    0,  204,    0,    0,  211,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -182,    0,
    0,    0,    0,   43,    0,  781,  784,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7114,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  264,    0,    0,  225,    0,
   -3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  298,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  786,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  567,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  767,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  797,    0,    0, 6925, 7015, 7109, 7148, 7206, 7241, 7299,
 7431, 8410, 8435, 7522, 7577, 8470, 7615, 7657, 7712, 7800,
 8517, 7935, 7990, 8025, 8559, 8595, 8630, 8690, 8731, 8080,
 8773, 8815, 8850,    0,    0,    0, 8885,    0,    0,    0,
 1368,    0,    0,    0,    0,    0,    0,    0,  798,    0,
    0,    0, 3309,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 8119,    0,    0,    0,    0,    0,
    0, 7368,    0, 7872,    0, 8215,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  785,    0,    0,
    0,    0,    0, 8937,    0,    0,    0,    0,    0,    0,
 3665,    0,    0, 3742,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  193,    0,    0,    0,    0,    0,
    0,  994,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3988,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1455,    0,    0,    0,    0,
 4131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4963,    0,    0,
    0,    0,    0, 8961,    0,    0,    0,    0,    0,    0,
    0,    0, 9032, 4990,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1542,    0,    0,    0,    0,    0,
    0,    0, 8691,    0,    0,    0,    0, 9103,    0,    0,
    0,    0,    0,    0,    0, 1629, 9167,    0,
};
static int yygindex[] = {                                      0,
   27,    1,  -90,  -99, -332,    0,   18,    0,    0,    0,
  542, -400, 1025,   31,    5,  -94,    0,  623,    0,    0,
    0,  548,    0,    0,    0,    3,  996,    0,    0,  -17,
    0,    0,  613,    0,    0,    4,  653,    0, -452,    0,
    0,    0,    0,    9,    0,  999,    0,    0, 1004,    0,
 1005,    0,    0,    0,    0,    0, -547,    6,  160, 1022,
   55,   35,    0,  445,  368,    0,  526,    0,  803,    0,
    0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 9489
static int yytable[] = {                                     127,
   50,  108,   67,  299,  217,  109,  116,  587,  120,  121,
  122,  323,  314,  113,  294,  124,  125,   61,    2,  536,
  529,  367,   74,  326,   74,   74,   74,  261,   74,  221,
  218,  112,  332,  220,  218,  165, 1690,  479,  165,  114,
  434,  218,  192,   50,  618,  507,   74,   50,  216,  512,
  430,  111,  217,  229,  176,   84,  261,  217,  223,  261,
  206,  123,  185,  277,  287,  280,  548,   50,   61,   61,
  292,  282,  241,  295,  618,   74,  228,  246,  126,  214,
  262,  126,  230,  262,  236,  377, 1683,  380,  128,  374,
 1677,  229,  371,  298,  108,  627,  652,  231,  240, 1680,
 1687,  129,  368,  120,  121,  122,  124,  108,  261,  561,
  430,  313,  511,  218,  108,  317,  281,  430,  515,  297,
  604,  218,  308,  108,  130,  300,   50,  199,  229,  431,
  564,  218,  229,  112,   31,  318,   84,  312,  230,   29,
  261,   32,  324,   28,  217,  549,   27,  268,  268,  278,
  535,  268,  268,  268,  268,  268,  268,  268,  338,  339,
  340,  341,  597,  231,  262, 1683,  639,  636,  131,  268,
  555,  268,  187,  271,  271,  645,  510,  271,  271,  271,
  271,  271,  271,  271,  277,  117,  277,  277,  277,  635,
  497,  218,  298,  118,  563,  271,  656,  271,  354,  517,
  452,  451,  277,  268,  277,  654,  199,  229,  663,  457,
   61,   50,  190,  286,   61,  280,  373,  230,  350,  377,
  355,  378,  380,  217,   47,  291,  376,  456,  236,  271,
   33,  672,   61,  218,  268,  268,  277, 1717,   38,   61,
  370,   74,  231,  392,  112,  371,   74,  318,  374,   74,
   74,   74,  217,  618,  318,  203,  217,  382,   74,  384,
  271,  271,  385,  217,  381,  450,  281,  246,  277,  293,
  391,  217,  393,  308,   74,  515,  217,  126,  123,  217,
  217,  217,   61,  444,   50,  246,  443,  217,  217,  126,
  225,   61,   74,    2,    2,    2,  217,  433,   74,  219,
  436,  428,  289,  288,  362,  226,   74,  224,  621,  204,
  122,  253,  223,  253,  253,  272,  272,  624,  373,  272,
  272,  272,  272,  272,  272,  272,  318,  449,  217,  515,
  120,  514,    2,  435,  318,  217,  217,  272,  439,  272,
  185,  205,  123,  217,  318,   13,   14,  488,  314,  491,
  433,  485,  227,  217,  482,  185,  558,  365,  368,    2,
    3,    4,    5,  232,    7,  490,  332,  268,  367,   11,
   12,  272,   13,   14,  122,   33,  233,  234,  235,   17,
  630,  268,  268,   38,   19,   20,   21,   22,  639,  633,
   23,   24,  373,  271,  238,  478,  570,  642,  516,  285,
  277,  218,  272,  272,  318,  570,  314,  271,  271,  314,
  562,   25,   26,  217,  277,  277,  215,  370,  648,  640,
  280,  657,   37,  641,  319,   39,  282,  651,  642,   40,
  660,   50,  575,  494,  268,   41,   42,   43,  314,  247,
   44,   45,   46,  108,  666,   61,  318,  313,   42, 4763,
 1711,  317,  513,  669,   61,  217,  519,  108,  185, 1714,
  271,  185,  321, 4766, 4769,  503,   42,  277,  322,  112,
  500,  281,   50,  312,   50,   31,  185,  607,  185,  215,
   61,  225,    2,    2,    2,  321,  442,   33,  514,  528,
  612,  530,   33,  515,   50,   38,  314,  302,  325,  615,
   38,  108,   13,   14,  108,  313,  534,  328,  313,  317,
  519,  236,  317,  314,  225,  519, 4772, 1671,  519,  225,
  618,  225,  327,  225, 1671, 1674,  225,  112,  520,  314,
  112,  312, 1674,  108,  312,  272, 1680,  313, 1671,  538,
  539,  317,  514,  485,  486, 1680, 1674,  584,  314,  272,
  272,  329,  550,  343,  618,  516,   13,   14,  278,  112,
  278,  278,  278,  312,  519,  134,  473,  505,  133,  344,
 1680,  505,  580,  581,  595,  619,  278,  345,  278, 1680,
  610,  611,  520,  347,  588,  613,   50,  520,  614,  503,
  520,  108,  351,  106,  498,  313,  106,  356,  590,  317,
  519,  443,  272,  349,  225,  352,  225,  225,  108,  516,
  278,  106,  313,  106,   50,  592,  317,  112,  443,  476,
  479,  312,  606,   50,  108,  443,  634,  653,  313,  443,
  353,  236,  317,   61,  112,   50,  520,  648,  312,  357,
  637,  358,  278,  108,  629,  630,  364,  313,   50,  632,
  112,  317,   97,  359,  312,   97,   50,   50,  657,   11,
   12,  188,  189,  190,   11,  236,  369,  646,  644,  112,
   97,  443,  520,  312,  236,  136,  365,  177,  178,  179,
  180,  181,  183,  184,  186,  446,  303,  304,  305,  386,
  306,  307,  105,  387,  388,  105,  207,  209,  210,  212,
    2,    3,    4,  389,    6,  107,  514,  103,  104,  105,
  105,  253,  105,  253,  253,   15,   16,   37,  429,  649,
   13,   14,  443,  438,   18,   19,   20,   21,   22,  441,
  655,   23,  132,  443,  214,  544,  545,  546,  225,  225,
  225,  225,  225,  225,  225,  224,  225,  225,  225,  225,
  225,  445,  225,  225,  225,  225,  225,  225,  225,  225,
  220,  515,  454,  225,  225,  225,  225,  225,   61,  458,
  225,  225,   61,  516,  278,  322,  170,  169,  322,  170,
  169,   44,   45,   46,  455,  183,  342,  459,  278,  278,
   61,  225,  225,  322,   77,  225,  225,  225,  225,   78,
  225,  225,  225,  225,  460,  225,  461,   61,  462,  225,
  466,   61,  225,  463,  464,  225,  225,  225,  471,  473,
  225,  225,  225, 1696, 1699, 1702, 1705,  322,   61,   61,
  104,  475,  110,  104,  480,  254,  482,  487,  254,  254,
  254,  278,  622,  489,  492,  493,   15,  254,  104,  501,
  104,  495,  502,  504,  508,  360,  361,  363,  442,  322,
  379,  269,  269,  523,  532,  269,  269,  269,  269,  269,
  269,  269,  524,  525,  526,   77,  383,  527,  533,   15,
   78,  542,  557,  269,   15,  269,   15,  254,   15,  554,
  559,   15,  303,  304,  305,  254,  306,  307,  560,  567,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  269,  565,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
  422,  423,  342,  426,  427,  572,  573,   44,  577,  253,
  253,  253,  253,  253,  253,  253,  253,  253,  269,  269,
  579,  180,  535,  253,  253,  591,  184,  593,  594,  188,
  192,  196,  253,  596,  603,  605,  608,  200,  205,   15,
   44,   15,   15,  620,  514,   44,  209,   44,  289,   44,
  621,  623,   44,  624,  636,  626,  628,  256,   13,   14,
  643,  322,  256,  645,  253,  256,  256,  256,  650,  465,
    1,   75,  253,   76,  256,  322,  322,   77,  217,  220,
  223,  253,   78,   41,  198,  221,  226,  476,  250,  477,
   75,   77,   77,   41,  568,  618,   78,   78,  541, 1206,
  503,  254, 1668,  484,  254,  254,  254, 1668,   61, 1708,
  568,  516, 1693,  254,  256,  256,  256,  256,  553,  256,
  256,  556,  256, 1668, 1668, 4775,  566, 4760,  322,  115,
   44,  191,   44,   44,  108,  506,  118,  242,  105,  521,
  243,  102,  222,  585,   77,  244,  245,   61,  647,   78,
  576,  269,  425,  254,  254,  254,  254,    0,  254,  254,
    0,  254,    0,    0,    0,  269,  269,  174,  174,  174,
    0,  174,  174,   15,   15,   15,   15,   15,   15,   15,
  522,   15,   15,   15,   15,   15,    0,   15,   15,   15,
   15,   15,   15,   15,   15,  361,    0,  531,   15,   15,
   15,   15,   15,    0,    0,   15,   15,    0,  617,    0,
    0,    0,  218,    0,  541,    0,    0,    0,  269,  177,
   61,  552,  111,    0,   61,  627,   15,   15,    0,    0,
   15,   15,   15,   15,    0,   15,   15,   15,   15,    0,
   15,  638,   61,  499,   15,  568,  569,  570,  571,    0,
   15,   15,   15,    0,    0,   15,   15,   15,    0,  185,
  651,    0,    0,  185,  583,    0,    0,    0,   44,   44,
   44,    0,   44,   44,   44,   44,   44,    0,   44,   44,
   44,   44,   44,   44,   44,   44,    0,  598,    0,   44,
   44,   44,   44,   44,  115,  361,   44,   44,    0,  108,
    0,  118,    0,  105,    0,    0,  102,    0,    0,  616,
  197,  198,  199,  200,  201,  202,    0,   44,   44,    0,
    0,   44,   44,   44,   44,    0,   44,   44,   44,   44,
    0,   44,    0,    0,    0,   44,    0,    0,   44,    0,
    0,   44,   44,   44,    0,    0,   44,   44,   44,    0,
    0,    0,  193,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,  115,  177,   90,   93,  111,  108,    0,
  118,    0,  105,    0,    0,  102,  194,  195,  196,  197,
  198,  199,  200,  201,  202,    0,   96,   99,    0,    0,
  121,  126,  131,  136,    0,  140,  140,  145,  148,    0,
  153,    0,    0,    0,  156,  318,    0,    0,    0,    0,
  159,  162,  165,    0,  217,  168,  171,  174,    0,    0,
    0,    0,    0,    0,  254,    0,    0,  254,  254,  254,
    0,    0,    0,    0,    0,  115,  254,    0,    0,    0,
    6,    0,    0,  330,  104,  105,   33,    0,  331,    0,
  115,   15,   16,  177,   38,  108,  111,  118,  185,  105,
   18,    0,  102,  185,    0,    0,  185,  185,  185,    0,
   61,    0,    0,    0,  185,  185,  254,  254,  254,  254,
    0,  254,  254,  185,  254,    0,    0,  275,  277,    0,
  280,    0,  273,  271,    0,  272,  282,  274,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,  279,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,    0,    0,
   90,   93,    0,    0,    0,    0,    0,  115,    0,    0,
  177,  281,  108,  111,  118,    0,  105,    0,    0,  102,
    0,   96,   99,    0,    0,  121,  126,  131,  136,    0,
  140,  140,  145,  148,    0,  153,    0,    0,    0,  156,
    0,    0,    0,    0,  278,  159,  162,  165,    0,    0,
  168,  171,  174,    0,    0,    0,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,    0,  253,    0,   69,  253,
  253,  253,   72,   78,   81,   84,   87,  253,  253,   90,
   93,    0,    0,    0,  115,    0,  253,  177,    0,  108,
  111,  118,    0,  105,  253,    0,  102,    0,    0,    0,
   96,   99,    0,    0,  121,  126,  131,  136,    0,  140,
  140,  145,  148,    0,  153,    0,    0,    0,  156,    0,
    0,    0,    0,    0,  159,  162,  165,    0,    0,  168,
  171,  174,    0,    0,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    6,    0,   69,  103,  104,  105,   72,
   78,   81,   84,   87,   15,   16,   90,   93,    0,    0,
    0,  115,    0,   18,  177,    0,  108,  111,  118,    0,
  105,    0,    0,  102,    0,    0,    0,   96,   99,    0,
    0,  121,  126,  131,  136,    0,  140,  140,  145,  148,
    0,  153,    0,    0,    0,  156,    0,    0,    0,    0,
    0,  159,  162,  165,    0,    0,  168,  171,  174,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,    0,    0,   90,   93,    0,    0,    0,   31,    0,
    0,  177,    0,   29,  111,   32,    0,   28,    0,    0,
   27,    0,    0,    0,   96,   99,    0,    0,  121,  126,
  131,  136,    0,  140,  140,  145,  148,    0,  153,    0,
    0,    0,  156,    0,    0,    0,    0,    0,  159,  162,
  165,    0,    0,  168,  171,  174,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,    0,    0,
   90,   93,   31,    0,    0,    0,    0,   29,   47,   32,
  366,   28,    0,    0,   27,    0,    0,    0,    0,    0,
    0,   96,   99,    0,    0,  121,  126,  131,  136,    0,
  140,  140,  145,  148,    0,  153,    0,    0,    0,  156,
    0,    0,    0,    0,    0,  159,  162,  165,    0,    0,
  168,  171,  174,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,    0,   31,   90,   93,    0,
    0,   29,   47,   32,  543,   28,    0,    0,   27,   33,
  303,  304,  305,  273,  306,  307,  273,   38,   96,   99,
    0,    0,  121,  126,  131,  136,    0,  140,  140,  145,
  148,  273,  153,    0,    0,    0,  156,    0,    0,    0,
    0,    0,  159,  162,  165,  379,  310,  168,  171,  174,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,  273,   13,   14,    0,    0,
  233,  234,  235,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   31,    0,   23,   24,   47,   29,  631,   32,
    0,   28,    0,  115,   27,    0,    0,  273,    6,    0,
    0,  103,  104,  105,    0,   25,   26,    0,    0,   15,
   16,    0,    0,    0,    0,    0,   37,    0,   18,   39,
    0,    0,    0,   40,    0,    0,  132,    0,    0,   41,
   42,   43,    0,    0,   44,   45,   46,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  233,  234,  235,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   31,    0,   23,   24,
    0,   29,   47,   32,  654,   28,    0,  309,   27,    0,
    0,    0,    6,    0,    0,  103,  104,  105,    0,   25,
   26,    0,    0,   15,   16,    0,    0,    0,    0,    0,
   37,    0,   18,   39,    0,    0,    0,   40,    0,  275,
    0,    0,  275,   41,   42,   43,    0,    0,   44,   45,
   46,    2,    3,    4,    5,    0,    7,  275,    0,  273,
    0,   11,   12,    0,   13,   14,    0,    0,  233,  234,
  235,   17,    0,  273,  273,    0,   19,   20,   21,   22,
   31,    0,   23,   24,    0,   29,   47,   32,  658,   28,
  115,  275,   27,    0,    0,    6,    0,    0,  103,  104,
  105,    0,    0,   25,   26,    0,   15,   16,    0,    0,
    0,    0,    0,    0,   37,   18,    0,   39,    0,    0,
    0,   40,    0,  275,    0,    0,  273,   41,   42,   43,
    0,    0,   44,   45,   46,    0,    0,    2,    3,    4,
    5,    0,    7,  317,    0,    0,  317,   11,   12,    0,
   13,   14,    0,    0,  233,  234,  235,   17,    0,    0,
    0,  317,   19,   20,   21,   22,    0,   31,   23,   24,
   47,    0,   29,    0,   32,    0,   28,  270,  270,   27,
    0,  270,  270,  270,  270,  270,  270,  270,    0,   25,
   26,    0,    0,    0,    0,  317,    0,    0,    0,  270,
   37,  270,    0,   39,    0,    0,    0,   40,    0,    0,
    0,    0,    0,   41,   42,   43,    0,    0,   44,   45,
   46,    2,    3,    4,    5,  208,    7,  317,    0,    0,
    0,   11,   12,  270,   13,   14,    0,    0,  233,  234,
  235,   17,    0,    0,    0,    0,   19,   20,   21,   22,
    0,    0,   23,   24,   31,  275,    0,  134,    0,   29,
  133,   32,  424,   28,  270,  270,   27,    0,    0,  275,
  275,    0,    0,   25,   26,    0,    0,    0,    0,    0,
  275,  277,    0,  280,   37,  273,    0,   39,    0,  282,
  274,   40,    0,    0,    0,    0,    0,   41,   42,   43,
    0,    0,   44,   45,   46,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
  318,    0,  275,  318,    0,   17,    0,    0,    0,    0,
   19,   20,   21,   22,  281,    0,   23,   24,  318,    0,
    0,    0,    0,   31,  134,    0,    0,  133,   29,    0,
   32,    0,   28,    0,    0,   27,    0,   25,   26,  317,
    0,    0,    0,    0,    0,    0,    0,  278,   37,    0,
    0,   39,  318,  317,  317,   40,    0,    0,    0,    0,
    0,   41,   42,   43,    0,    0,   44,   45,   46,    0,
    0,  115,    2,    3,    4,    0,    6,  270,    0,  103,
  104,  105,    0,  483,  318,    0,    0,   15,   16,    0,
    0,  270,  270,    0,    0,    0,   18,   19,   20,   21,
   22,  254,    0,   23,  132,    0,  317,    0,    0,    0,
   31,    0,    0,  134,    0,   29,  133,   32,  115,   28,
    0,    0,   27,    6,   25,   26,  103,  104,  105,    0,
    0,    0,    0,    0,   15,   16,    0,    0,    0,    0,
  574,    0,    0,   18,  270,  578,    0,    0,  582,  586,
  590,    0,    0,   44,   45,   46,  594,  598,  115,    2,
    3,    4,    0,    6,    0,  602,  103,  104,  105,    0,
  551,    0,  306,  306,   15,   16,  306,  306,  306,  306,
  306,  306,  306,   18,   19,   20,   21,   22,    0,    0,
   23,  132,    0,    0,  306,    0,  306,  236,  606,  609,
  134,   31,    0,  133,    0,  239,   29,    0,   32,  372,
   28,   25,   26,   27,    6,    0,  318,  103,  104,  105,
    0,    0,    0,    0,    0,   15,   16,    0,  306,    0,
  318,  318,    0,  254,   18,    0,  254,  254,  254,    0,
   44,   45,   46,    0,  254,  254,    0,  115,    2,    3,
    4,    0,    6,  254,    0,  103,  104,  105,    0,  306,
  306,  615,    0,   15,   16,    0,    0,    0,  320,    0,
    0,  320,   18,   19,   20,   21,   22,    0,    0,   23,
  132,    0,    0,  318,    0,  254,  320,    0,    0,    0,
   31,  134,    0,  254,  133,   29,    0,   32,  432,   28,
   25,   26,   27,    6,    0,    0,  103,  104,  105,    0,
    0,    0,    0,    0,   15,   16,    0,    0,    0,    0,
  320,  254,    0,   18,  254,  254,  254,    0,    0,   44,
   45,   46,  254,  254,  115,    2,    3,    4,    0,    6,
    0,  254,  103,  104,  105,    0,    0,    0,    0,  254,
   15,   16,  320,    0,    0,    0,    0,    0,    0,   18,
   19,   20,   21,   22,    0,    0,   23,  132,    0,    0,
    0,    0,    0,  254,  254,  254,  254,   31,  254,  254,
  134,  254,   29,  133,   32,  488,   28,   25,   26,   27,
    6,    0,  306,  103,  104,  105,    0,    0,    0,    0,
    0,   15,   16,    0,  185,    0,  306,  306,    0,  185,
   18,    0,  185,  185,  185,    0,   44,   45,   46,    0,
  185,  185,    0,    0,    0,  115,    2,    3,    4,  185,
    6,    0,    0,  103,  104,  105,    0,    0,    0,    0,
    0,   15,   16,    0,  185,  185,    0,    0,  185,    0,
   18,   19,   20,   21,   22,    0,    0,   23,  132,  306,
    0,    0,    0,    0,   31,    0,  185,  134,    0,   29,
  133,   32,  232,   28,    0,    0,   27,  232,   25,   26,
  232,  232,  232,    0,  320,    0,    0,    0,  232,  232,
    0,    0,    0,    0,    0,    0,  221,  232,  320,  320,
    0,  221,    0,    0,  221,  221,  221,   44,   45,   46,
    0,    0,  221,  221,  115,    2,    3,    4,    0,    6,
    0,  221,  103,  104,  105,    0,    0,    0,  305,  305,
   15,   16,  305,  305,  305,  305,  305,  305,  305,   18,
   19,   20,   21,   22,    0,    0,   23,  132,    0,    0,
  305,  320,  305,  221,  134,    0,    0,  133,    0,    0,
    0,  221,    0,    0,    0,  282,  282,   25,   26,  282,
  282,  282,  282,  282,    0,  282,    0,    0,    0,    0,
    0,    0,    0,  242,  305,    0,    0,  282,  245,  282,
    0,  248,  251,  254,    0,    0,   44,   45,   46,  257,
  260,  182,    2,    3,    4,    0,    6,    0,  263,  103,
  104,  105,    0,    0,    0,  305,  305,   15,   16,    0,
    0,  282,    0,    0,    0,    0,   18,   19,   20,   21,
   22,    0,    0,   23,  132,  171,    0,    0,    0,  166,
  168,    0,  174,    0,  164,  162,  173,  163,    0,  165,
    0,    0,  282,  282,   25,   26,    0,    0,    0,    0,
    0,  185,  160,  172,  161,    0,  185,    0,    0,  185,
  185,  185,    0,    0,    0,    0,    0,  185,  185,    0,
    0,    0,    0,   44,   45,   46,  185,    0,    0,    2,
    3,    4,  447,  175,  185,    0,  167,    0,    0,    0,
   65,   65,    0,   65,   65,   65,   65,   65,   65,   65,
   65,    0,    0,    0,   19,   20,   21,   22,    0,    0,
   23,  132,   65,    0,   65,   65,  169,  266,  170,    0,
    0,    0,  269,    0,    0,  272,  275,  278,    0,    0,
    0,   25,   26,  281,  284,   33,    0,    0,  305,    0,
  290,    0,  287,   38,   65,  293,   65,   65,  296,  299,
  302,    0,  305,  305,    0,    0,  305,  308,    0,    0,
   44,   45,   46,   68,   68,  311,   68,   68,   68,   68,
   68,   68,   68,   68,    0,  282,   65,   65,   65,  288,
    0,    0,  288,  289,    0,   68,  289,   68,   68,  282,
  282,    0,    0,    0,    0,    0,    0,  288,    0,  314,
    0,  289,    0,    0,  317,  305,    0,  320,  323,  326,
    0,    0,    0,  407,    0,  329,  332,   68,  412,   68,
   68,  417,  422,  427,  335,    0,    0,    0,    0,  432,
  437,  288,    0,    0,    0,  289,    0,    0,  442,    0,
    0,    0,  282,    0,    0,    0,    0,    0,    0,   68,
   68,   68,    0,    0,    0,    0,    0,    0,  217,    0,
  217,  217,    0,  288,  217,    0,    0,  289,    0,    0,
  450,  454,  458,  462,    0,  465,  465,    0,  469,    0,
    0,    0,  217,  137,  138,  139,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  158,  159,   33,    0,    0,    0,
   65,  217,    0,    0,   38,   65,    0,    0,   65,   65,
   65,    0,    0,    0,   65,   65,    0,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,    0,   65,   65,   65,   65,   65,    0,    0,
    0,    0,    0,    0,    0,   65,    0,   65,    0,    0,
    0,    0,    0,   68,    0,    0,    0,    0,   68,    0,
    0,   68,   68,   68,    0,  288,    0,   68,   68,  289,
   68,    0,    0,    0,    0,    0,    0,    0,    0,  288,
  288,    0,    0,  289,  289,    0,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,    0,   68,   68,   68,   68,
   68,    0,    0,    0,    0,    0,    0,    0,   68,    0,
   68,   69,   69,    0,   69,   69,   69,   69,   69,   69,
   69,   69,  288,    0,    0,    0,  289,    0,    0,    0,
    0,    0,    0,   69,    0,   69,   69,  217,    0,    0,
    0,    0,  217,    0,    0,  217,  217,  217,    0,    0,
    0,    0,    0,  217,  217,    0,    0,    0,    0,    0,
    0,    0,  217,    0,    0,   69,  447,   69,   69,    0,
  217,    0,    0,    0,    0,  290,    0,    0,  290,   70,
   70,    0,   70,   70,   70,   70,   70,   70,   70,   70,
    0,    0,    0,  290,  217,    0,    0,   69,   69,   69,
    0,   70,  217,   70,   70, 4546,    0,    0,    0,    0,
  578,    0,    0,  582,  586,  590,    0,    0,    0,    0,
    0,  594,  598,    0,    0,    0,    0,  290,    0,    0,
  602,    0,    0,   70,    0,   70,   70,    0,    0,    0,
    0,    0,    0,  291,    0,    0,  291,   62,   62,    0,
   62,   62,   62,   62,   62,   62,   62,   62,    0,  290,
    0,  291,  236,  606,  609,   70,   70,   70,    0,   62,
  239,   62,   62,  229,    0,    0,    0,    0,  232,    0,
    0,  232,  232,  232,    0,    0,    0,    0,    0,  232,
  232,    0,    0,    0,    0,  291,    0,  407,  232,    0,
    0,   62,  412,   62,   62,  417,  422,  427,    0,    0,
    0,    0,    0,  432,  437,    0,    0,    0,    0,    0,
    0,    0,  442,    0,    0,    0,    0,  291,    0,    0,
  236,   69,    0,   62,   62,   62,   69,    0,  239,   69,
   69,   69,    0,    0,    0,   69,   69,    0,   69,    0,
    0,    0,    0,    0,  450,  454,  458,  462,    0,  465,
  465,    0,  469,    0,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,    0,   69,   69,   69,   69,   69,    0,
    0,  290,    0,    0,    0,    0,   69,    0,   69,   70,
    0,    0,    0,    0,   70,  290,  290,   70,   70,   70,
    0,    0,    0,   70,   70,    0,   70,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,    0,   70,   70,   70,   70,   70,    0,  290,  291,
    0,    0,    0,    0,   70,    0,   70,   62,    0,    0,
    0,    0,   62,  291,  291,   62,   62,   62,    0,    0,
    0,   62,   62,    0,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
   62,   62,   62,   62,   62,    0,  291,    0,    0,    0,
    0,    0,   62,    0,   62,   67,   67,    0,   67,   67,
   67,   67,   67,   67,   67,   67,  292,    0,    0,  292,
    0,    0,    0,    0,    0,    0,    0,   67,    0,   67,
   67, 4546,    0,    0,  292,    0,  578,    0,    0,  582,
  586,  590,    0,    0,    0,    0,    0,  594,  598,    0,
    0,    0,    0,    0,    0,    0,  602,    0,    0,   67,
    0,   67,   67,    0,    0,    0,    0,    0,  292,    0,
    0,    0,    0,   63,   63,    0,   63,   63,   63,   63,
   63,   63,   63,   63,    0,    0,    0,    0,  236,  606,
  609,   67,   67,   67,  338,   63,  239,   63,   63,  341,
  292,    0,  344,  347,  350,    0,    0,    0, 4546,    0,
  353,  356,    0,  578,    0,    0,  582,  586,  590,  359,
    0,    0,    0,    0,  594,  598,    0,   63,    0,   63,
   63,   64,   64,  602,   64,   64,   64,   64,   64,   64,
   64,   64,    0,    0,    0,  293,    0,    0,  293,    0,
    0,    0,    0,   64,   64,   64,   64,    0,    0,   63,
   63,   63,    0,  293,    0,  236,  606,  609,    0,    0,
    0,    0,    0,  239,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   64,    0,   64,   64,    0,
    0,    0,    0,  294,    0,    0,  294,  293,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,    0,
    0,  294,    0,    0,    0,    0,    0,   64,   64,   64,
   66,   66,   66,   66,    0,   67,    0,    0,    0,  293,
   67,    0,  292,   67,   67,   67,    0,    0,    0,   67,
   67,    0,   67,    0,    0,  294,  292,  292,    0,    0,
    0,    0,   66,    0,   66,   66,    0,    0,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,  294,   67,   67,
   67,   67,   67,    0,   66,   66,   66,    0,    0,    0,
   67,    0,   67,   63,    0,    0,    0,    0,   63,  292,
    0,   63,   63,   63,    0,    0,    0,   63,   63,    0,
   63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,    0,   63,   63,   63,   63,
   63,    0,    0,    0, 4546,    0,    0,    0,   63,  578,
   63,  293,  582,  586,  590,   64,   64,    0,    0,    0,
  594,  598,    0,    0,    0,  293,  293,    0,    0,  602,
    0,    0,    0,    0,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,    0,   64,   64,   64,   64,   64,  294,
    0,  236,  606,  609,    0,    0,   64,    0,   64,  239,
    0,  383,    0,  294,  294,    0,  386,    0,  293,  389,
  392,  395,   66,   66,    0,    0,    0,  398,  401,    0,
    0,    0,    0,    0,    0,    0,  404,    0,    0,    0,
    0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
    0,   66,   66,   66,   66,   66,  294,    0,    0,    0,
    0,    0,    0,   66,    0,   66,  125,  125,    0,  125,
  125,  125,  125,  125,  125,  125,  125, 4546,    0,    0,
    0,    0,  578,    0,    0,  582,  586,  590,  125,    0,
  125,  125,    0,  594,  598,    0,    0,    0,    0,    0,
    0,    0,  602,  323,    0,    0,    0,  323,    0,  323,
  323,    0,  323,  323,    0,    0,    0,    0,    0,    0,
  125,    0,  125,  125,    0,  323,  323,  323,  323,    0,
    0,    0,    0,    0,  236,  606,  609,    0,    0,    0,
  321,    0,  239,    0,  321,    0,  321,  321,    0,  321,
  321,    0,    0,  125,  125,    0,    0,  323,    0,  323,
  323,  493,  321,  321,  321,  321,  493,    0,    0,  493,
  493,  493,    0,    0,    0,    0,    0,  493,  493,    0,
    0,    0,    0,    0,    0,    0,  493,    0,    0,    0,
  323,  323,    0,    0,  321,    0,  321,  321,    0,    0,
  283,  283,    0,    0,  283,  283,  283,  283,  283,  296,
  283,    0,    0,  296,  296,  296,  296,  296,  497,  296,
    0,    0,  283,    0,  283,    0,  500,  321,  321,    0,
    0,  296,    0,  296,    0,    0,    0,  509,    0,    0,
    0,    0,  513,    0,    0,  517,  521,  525,    0,    0,
    0,    0,    0,  529,  533,    0,  283,    0,    0,  544,
    0,    0,  537,  295,  547,  296,  295,  550,  553,  556,
    0,    0,    0,    0,    0,  559,  562,    0,    0,    0,
    0,  295,    0,    0,  565,    0,  125,  283,  283,    0,
    0,    0,  298,    0,  465,  298,  299,  296,    0,  299,
  125,  125,  465,    0,    0,    0,    0,    0,    0,    0,
  298,    0,    0,    0,  299,  295,    0,    0,    0,    0,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  323,  323,  125,
  125,  125,  125,    0,  298,    0,    0,  295,  299,    0,
    0,    0,    0,  125,    0,    0,    0,  323,  323,  323,
  323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
  323,  323,  323,  323,  321,  321,  298,    0,  323,  323,
  299,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  323,    0,    0,    0,  321,  321,  321,  321,  321,  321,
  321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
  321,    0,    0,    0,  300,  321,  321,  300,  297,    0,
  283,    0,  297,  297,  297,  297,  297,  321,  297,  296,
    0,    0,  300,    0,  283,  283,    0,    0,    0,    0,
  297,  279,  297,  296,  296,  279,  279,  279,  279,  279,
    0,  279,    0,    0,  280,    0,    0,    0,  280,  280,
  280,  280,  280,  279,  280,  279,  300,  218,    0,  218,
  218,    0,    0,  218,  297,    0,  280,    0,  280,  295,
    0,    0,    0,    0,    0,    0,    0,  283,    0,    0,
    0,  218,    0,  295,  295,  281,  296,  279,  300,  281,
  281,  281,  281,  281,    0,  281,  297,    0,  298,    0,
  280,    0,  299,    0,    0,    0,    0,  281,    0,  281,
  218,    0,  298,  298,    0,    0,  299,  299,    0,  279,
   61,   61,    0,    0,    0,   61,   61,   61,   61,   61,
   61,  301,  280,    0,  301,  302,  295,  303,  302,    0,
  303,  281,   61,   61,   61,   61,    0,    0,    0,  301,
    0,  544,    0,  302,    0,  303,  547,    0,    0,  550,
  553,  556,    0,    0,    0,  298,    0,  559,  562,  299,
    0,    0,    0,  281,   61,    0,  565,   61,    0,    0,
    0,    0,    0,  301,    0,  304,    0,  302,  304,  303,
    0,    0,    0,  307,    0,    0,  307,    0,    0,    0,
    0,    0,    0,  304,    0,    0,  286,   61,   61,  286,
    0,  307,    0,    0,    0,  301,    0,    0,    0,  302,
  300,  303,  287,    0,  286,  287,    0,    0,  297,    0,
  284,    0,    0,  284,  300,  300,    0,  304,    0,    0,
  287,    0,  297,  297,    0,  307,    0,    0,  284,    0,
  285,  279,    0,  285,    0,    0,    0,    0,  286,    0,
    0,    0,    0,    0,  280,  279,  279,    0,  285,  304,
  311,    0,    0,  311,  287,    0,  218,  307,  280,  280,
  319,  218,  284,  319,  218,  218,  218,  300,  311,    0,
  286,    0,  218,  218,  447,  297,    0,    0,  319,    0,
    0,  218,  285,    0,    0,  281,  287,    0,    0,  218,
    0,    0,    0,    0,  284,    0,    0,    0,  279,  281,
  281,    0,  311,    0,    0,    0,    0,    0,    0,    0,
    0,  280,  319,  218,  285,    0,    0,    0,    0,    0,
    0,  218,    0,    0,    0,    0,    0,  301,  221,  221,
    0,  302,  221,  303,  311,    0,    0,    0,    0,    0,
    0,  301,  301,    0,  319,  302,  302,  303,  303,    0,
  221,    0,  281,    0,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,    0,   61,   61,   61,   61,    0,    0,  221,
  254,  304,  254,  254,    0,    0,  222,  222,    0,  307,
  222,    0,    0,    0,  301,  304,  304,    0,  302,    0,
  303,    0,  286,  307,  307,  407,    0,    0,  222,    0,
  412,    0,    0,  417,  422,  427,  286,  286,  287,    0,
    0,  432,  437,    0,    0,    0,  284,    0,    0,    0,
  442,    0,  287,  287,    0,    0,    0,  222,    0,    0,
  284,  284,    0,    0,    0,    0,  285,    0,  304,    0,
    0,    0,    0,    0,    0,    0,  307,    0,    0,    0,
  285,  285,  450,  454,  458,  462,  311,  465,  465,  286,
  469,    0,    0,    0,    0,    0,  319,    0,    0, 4546,
  311,  311,    0,    0,  578,  287,    0,  582,  586,  590,
  319,  319,    0,  284,    0,  594,  598,    0,  171,    0,
    0,    0,  166,  168,  602,  174, 4546,  164,  162,  173,
  163,  578,  165,  285,  582,  586,  590,    0,    0,    0,
    0,    0,  594,  598,    0,  160,  172,  161,    0,    0,
    0,  602,    0,  311,    0,    0,  236,  606,  609,    0,
    0,    0,    0,  319,  239,  221,    0,    0,    0,    0,
  221,    0,    0,  221,  221,  221,  175,    0,    0,  167,
    0,  221,  221,  236,  606,  609,    0,    0,    0,    0,
  221,  239,    0,    0,    0,    0,   61,   61,  221,   61,
    0,   61,   61,   61,   61,   61,   61,    0,    0,  169,
    0,  170,    0,    0,    0,    0,    0,    0,   61,   61,
   61,   61,  221,  222,    0,    0,    0,    0,  222,    0,
  221,  222,  222,  222,    0,    0,    0,   61,   61,  222,
  222,    0,   61,   61,   61,   61,   61,   61,  222,    0,
   61,    0,    0,   61,    0,    0,  222,    0,    0,   61,
   61,   61,   61,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  222,    0,    0,   61,   61,    0,    0,    0,  222,    0,
    0,   61,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  275,  277,    0,  280,    0,  273,  271,    0,
  272,  282,  274,    0,   61,   61,    0,    0,    0,    0,
    0,    0,    0,    0,  283,  269,  279,  270,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  275,  277,    0,
  280,  348,  273,  271,    0,  272,  282,  274,    0,    0,
    0,    0,    0,    0,    0,    0,  281,    0,    0,  276,
  269,  279,  270,    0,    0,    0,  137,  138,  139,  140,
  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
  151,  152,  153,  154,  155,  156,  157,  158,  159,  278,
    0,  281,    0,    0,  276,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  275,  277,    0,  280,  472,  273,  271,    0,  272,
  282,  274,    0,    0,  278,    0,    0,    0,    0,    0,
    0,   61,    0,    0,  269,  279,  270,    0,    0,    0,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,    0,   61,
   61,   61,   61,   61,    0,  281,    0,    0,  276,    0,
    0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
    0,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,  278,    0,
   61,   61,   61,   61,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1053,
    0, 1056,    0,    0,    0,    0,    0,  275,  277,    0,
  280,  474,  273,  271,    0,  272,  282,  274,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  269,  279,  270, 1059,    0,    0,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,    0,    0,  265,  266,  267,  268,    0,
    0,  281,    0,    0,  276,    0,    0,    0,    0,    0,
    0,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,    0,    0,
  265,  266,  267,  268,  278,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  275,  277,    0,  280,    0,  273,
  271,    0,  272,  282,  274,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  269,  279,  270,
    0,    0,    0,    0,    0,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,    0,    0,  265,  266,  267,  268,  281,    0,
  491,  276,  275,  277,    0,  280,    0,  273,  271,    0,
  272,  282,  274,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  269,  279,  270,    0,  275,
  277,  278,  280,  574,  273,  271,    0,  272,  282,  274,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  269,  279,  270,    0,  281,    0,  537,  276,
  990,  993,  996,  999, 1002, 1005, 1008, 1011, 1014, 1017,
 1020, 1023, 1026, 1029, 1032, 1035, 1038,    0,    0, 1041,
 1044, 1047, 1050,  281,    0,    0,  276,    0,    0,  278,
    0,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,    0,    0,
  265,  266,  267,  268,    0,    0,  278,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  275,  277,
    0,  280,  582,  273,  271,    0,  272,  282,  274,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  269,  279,  270,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  275,  277,    0,
  280,    0,  273,  271,    0,  272,  282,  274,    0,    0,
    0,    0,  281,    0,    0,  276,    0,    0,    0,    0,
  269,  279,  270,    0,    0,    0,    0,    0,  248,  249,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  278,    0,  265,  266,  267,
  268,  281,    0,  589,  276,  275,  277,    0,  280,  599,
  273,  271,    0,  272,  282,  274,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  269,  279,
  270,    0,    0,    0,  278,    0,  248,  249,  250,  251,
  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,
  262,  263,  264,    0,    0,  265,  266,  267,  268,  281,
    0,    0,  276,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
    0,    0,  265,  266,  267,  268,    0,    0,    0,    0,
    0,    0,  278,  275,  277,    0,  280,  600,  273,  271,
    0,  272,  282,  274,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  269,  279,  270,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  275,  277,    0,  280,  601,  273,  271,    0,  272,
  282,  274,    0,    0,    0,    0,    0,  281,    0,    0,
  276,    0,    0,    0,  269,  279,  270,    0,    0,    0,
    0,    0,  248,  249,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,    0,
  278,  265,  266,  267,  268,  281,    0,    0,  276,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  278,    0,
  265,  266,  267,  268,    0,    0,    0,    0,  275,  277,
    0,  280,  602,  273,  271,    0,  272,  282,  274,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  269,  279,  270,    0,    0,    0,    0,    0,  248,
  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
  259,  260,  261,  262,  263,  264,    0,    0,  265,  266,
  267,  268,  281,  275,  277,  276,  280,  612,  273,  271,
    0,  272,  282,  274,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  269,  279,  270,    0,
    0,    0,    0,    0,    0,  278,    0,    0,    0,    0,
    0,  275,  277,    0,  280,    0,  273,  271,    0,  272,
  282,  274,    0,    0,    0,    0,    0,  281,    0,    0,
  276,    0,    0,    0,  269,  279,  270,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,    0,    0,  265,  266,  267,  268,
  278,    0,    0,    0,    0,  281,    0,  633,  276,    0,
    0,    0,    0,    0,    0,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,    0,    0,  265,  266,  267,  268,  278,    0,
    0,    0,  125,    0,    0,  125,    0,    0,  125,  125,
  125,  125,  125,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  125,    0,  125,  125,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  125,    0,    0,  125,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  248,  249,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  125,
  125,  265,  266,  267,  268,    0,  275,  277,    0,  280,
    0,  273,  271,    0,  272,  282,  274,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
  279,  270,    0,    0,    0,    0,    0,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,    0,    0,  265,  266,  267,  268,
  281,    0,    0,  276,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  248,  249,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,    0,  278,  265,  266,  267,  268,    0,    0,
    0,    0,  756,  762,    0,  771,    0,  750,  744,    0,
  747,  777,  753,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  738,  768,  741,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  861,  867,    0,
  876,    0,  855,  849,    0,  852,  882,  858,    0,    0,
    0,    0,    0,    0,    0,    0,  774,    0,    0,  759,
  843,  873,  846,    0,    0,    0,  125,  125,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,   74,    0,  125,  125,  125,  125,  765,
    0,  879,    0,    0,  864,    0,  966,  972,    0,  981,
    0,  960,  954,    0,  957,  987,  963,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  948,
  978,  951,    0,    0,  870,    0,    0,    0,    0,    0,
    0, 1434, 1440,    0, 1449,    0, 1428, 1422,    0, 1425,
 1455, 1431,    0,    0,    0,    0,    0,    0,    0,    0,
  984,    0,    0,  969, 1416, 1446, 1419,    0,    0,    0,
  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,    0,    0,  265,
  266,  267,  268,  975,    0, 1452, 1539, 1545, 1437, 1554,
    0, 1533, 1527,    0, 1530, 1560, 1536,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1521,
 1551, 1524,    0,    0,    0,    0,    0,    0, 1443,    0,
    0,    0,    0,    0,    0,    0,    0, 1644, 1650,    0,
 1659,    0, 1638, 1632,    0, 1635, 1665, 1641,    0,    0,
 1557,    0,    0, 1542,    0,    0,    0,    0,    0,    0,
 1626, 1656, 1629,    0,    0,    0,  675,  678,  681,  684,
  687,  690,  693,  696,  699,  702,  705,  708,  711,  714,
  717,  720,  723, 1548,    0,  726,  729,  732,  735,    0,
    0, 1662,    0,    0, 1647,    0,    0,    0,    0,    0,
    0,  780,  783,  786,  789,  792,  795,  798,  801,  804,
  807,  810,  813,  816,  819,  822,  825,  828,    0,    0,
  831,  834,  837,  840, 1653,    0,    0,    0,    0,    0,
    0, 1801, 1807,    0, 1816,    0, 1795, 1789,    0, 1792,
 1822, 1798,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1783, 1813, 1786,    0,    0,    0,
  885,  888,  891,  894,  897,  900,  903,  906,  909,  912,
  915,  918,  921,  924,  927,  930,  933,    0,    0,  936,
  939,  942,  945,    0,    0, 1819,    0,    0, 1804,    0,
    0,    0,    0,    0,    0, 1353, 1356, 1359, 1362, 1365,
 1368, 1371, 1374, 1377, 1380, 1383, 1386, 1389, 1392, 1395,
 1398, 1401,    0,    0, 1404, 1407, 1410, 1413, 1810,    0,
    0, 1906, 1912,    0, 1921,    0, 1900, 1894,    0, 1897,
 1927, 1903,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1888, 1918, 1891,    0,    0,    0,
 1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 1482, 1485,
 1488, 1491, 1494, 1497, 1500, 1503, 1506,    0,    0, 1509,
 1512, 1515, 1518,    0,    0, 1924,    0,    0, 1909,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584, 1587,
 1590, 1593, 1596, 1599, 1602, 1605, 1608, 1611, 1915,    0,
 1614, 1617, 1620, 1623,    0, 2011, 2017,    0, 2026,    0,
 2005, 1999,    0, 2002, 2032, 2008,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1993, 2023,
 1996,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2116, 2122,    0, 2131,    0, 2110,
 2104,    0, 2107, 2137, 2113,    0,    0,    0,    0, 2029,
    0,    0, 2014,    0,    0,    0,    0, 2098, 2128, 2101,
    0,    0,    0,    0,    0, 1720, 1723, 1726, 1729, 1732,
 1735, 1738, 1741, 1744, 1747, 1750, 1753, 1756, 1759, 1762,
 1765, 1768, 2020,    0, 1771, 1774, 1777, 1780, 2134,  447,
    0, 2119, 2221, 2227,    0, 2236,    0, 2215, 2209,    0,
 2212, 2242, 2218,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2203, 2233, 2206,    0,    0,
    0, 2125,    0,    0,    0,    0,    0, 2326, 2332,    0,
 2341,    0, 2320, 2314,    0, 2317, 2347, 2323,    0,    0,
    0,    0,    0,    0,    0,    0, 2239,    0,    0, 2224,
 2308, 2338, 2311,    0,    0, 1825, 1828, 1831, 1834, 1837,
 1840, 1843, 1846, 1849, 1852, 1855, 1858, 1861, 1864, 1867,
 1870, 1873,    0,    0, 1876, 1879, 1882, 1885,    0, 2230,
    0, 2344,    0,    0, 2329, 2431, 2437,    0, 2446,    0,
 2425, 2419,    0, 2422, 2452, 2428,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2413, 2443,
 2416,    0,    0,    0, 2335,    0,    0,    0,    0,    0,
  407,    0,    0,    0,    0,  412,    0,    0,  417,  422,
  427,    0,    0,    0,    0,    0,  432,  437,    0, 2449,
    0,    0, 2434,    0,    0,  442,    0,    0,    0, 1930,
 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 1960,
 1963, 1966, 1969, 1972, 1975, 1978,    0,    0, 1981, 1984,
 1987, 1990, 2440,    0,    0,    0,    0,  450,  454,  458,
  462,    0,  465,  465,    0,  469,    0,    0, 2035, 2038,
 2041, 2044, 2047, 2050, 2053, 2056, 2059, 2062, 2065, 2068,
 2071, 2074, 2077, 2080, 2083,    0,    0, 2086, 2089, 2092,
 2095,    0,    0,    0,    0,    0,    0, 2536, 2542,    0,
 2551,    0, 2530, 2524,    0, 2527, 2557, 2533,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2518, 2548, 2521,  447,    0,    0, 2140, 2143, 2146, 2149,
 2152, 2155, 2158, 2161, 2164, 2167, 2170, 2173, 2176, 2179,
 2182, 2185, 2188,    0,    0, 2191, 2194, 2197, 2200,    0,
    0, 2554,    0,    0, 2539,    0,    0,    0,    0,    0,
    0, 2245, 2248, 2251, 2254, 2257, 2260, 2263, 2266, 2269,
 2272, 2275, 2278, 2281, 2284, 2287, 2290, 2293,    0,    0,
 2296, 2299, 2302, 2305, 2545,    0,    0,    0, 2785, 2791,
    0, 2800,    0, 2779, 2773,    0, 2776, 2806, 2782,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2767, 2797, 2770,    0,    0,    0,    0,    0, 2350,
 2353, 2356, 2359, 2362, 2365, 2368, 2371, 2374, 2377, 2380,
 2383, 2386, 2389, 2392, 2395, 2398,    0,    0, 2401, 2404,
 2407, 2410, 2803, 2890, 2896, 2788, 2905,    0, 2884, 2878,
    0, 2881, 2911, 2887,  407,    0,    0,    0,    0,  412,
    0,    0,  417,  422,  427,    0, 2872, 2902, 2875,    0,
  432,  437,    0,    0,    0, 2794,    0,    0,    0,  442,
    0, 3067, 3073,    0, 3082,    0, 3061, 3055,    0, 3058,
 3088, 3064,    0,    0,    0,    0,    0, 2908,    0,    0,
 2893,    0,    0,    0, 3049, 3079, 3052,    0,    0,    0,
    0,  450,  454,  458,  462,    0,  465,  465,    0,  469,
    0,    0,    0, 3172, 3178,    0, 3187,    0, 3166, 3160,
 2899, 3163, 3193, 3169,    0, 3085,    0,    0, 3070,    0,
    0,    0,    0,    0,    0,    0, 3154, 3184, 3157,    0,
    0, 2455, 2458, 2461, 2464, 2467, 2470, 2473, 2476, 2479,
 2482, 2485, 2488, 2491, 2494, 2497, 2500, 2503, 3076,    0,
 2506, 2509, 2512, 2515,    0,    0,    0, 3190, 3277, 3283,
 3175, 3292,    0, 3271, 3265,    0, 3268, 3298, 3274,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3259, 3289, 3262,    0,    0,    0,    0,    0,    0,
 3181,    0,    0,  493,    0,    0,    0,    0,  493,    0,
    0,  493,  493,  493,    0,    0,    0,    0,    0,  493,
  493,    0, 3295,    0,    0, 3280,    0,    0,  493,    0,
    0,    0, 2704, 2707, 2710, 2713, 2716, 2719, 2722, 2725,
 2728, 2731, 2734, 2737, 2740, 2743, 2746, 2749, 2752,    0,
    0, 2755, 2758, 2761, 2764, 3286, 3382, 3388,    0, 3397,
  497, 3376, 3370,    0, 3373, 3403, 3379,    0,  500,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3364,
 3394, 3367,    0,    0,    0,    0,    0, 2809, 2812, 2815,
 2818, 2821, 2824, 2827, 2830, 2833, 2836, 2839, 2842, 2845,
 2848, 2851, 2854, 2857,    0,    0, 2860, 2863, 2866, 2869,
 3400,    0,    0, 3385,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2986, 2989, 2992, 2995, 2998,
 3001, 3004, 3007, 3010, 3013, 3016, 3019, 3022, 3025, 3028,
 3031, 3034,    0, 3391, 3037, 3040, 3043, 3046,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3091, 3094, 3097,
 3100, 3103, 3106, 3109, 3112, 3115, 3118, 3121, 3124, 3127,
 3130, 3133, 3136, 3139,    0,    0, 3142, 3145, 3148, 3151,
    0, 3559, 3565,    0, 3574,    0, 3553, 3547,    0, 3550,
 3580, 3556,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3541, 3571, 3544,  447,    0,    0,
    0,    0, 3196, 3199, 3202, 3205, 3208, 3211, 3214, 3217,
 3220, 3223, 3226, 3229, 3232, 3235, 3238, 3241, 3244,    0,
    0, 3247, 3250, 3253, 3256, 3577, 3664, 3670, 3562, 3679,
    0, 3658, 3652,    0, 3655, 3685, 3661,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3646,
 3676, 3649,    0,    0,    0,    0,    0,    0, 3568,    0,
    0, 3769, 3775,    0, 3784,    0, 3763, 3757,    0, 3760,
 3790, 3766,    0,    0,    0,    0,    0,    0,    0,    0,
 3682,    0,    0, 3667, 3751, 3781, 3754,    0,    0,    0,
 3301, 3304, 3307, 3310, 3313, 3316, 3319, 3322, 3325, 3328,
 3331, 3334, 3337, 3340, 3343, 3346, 3349,    0,    0, 3352,
 3355, 3358, 3361, 3673,    0, 3787, 4234, 4240, 3772, 4249,
    0, 4228, 4222,    0, 4225, 4255, 4231,    0,  407,    0,
    0,    0,    0,  412,    0,    0,  417,  422,  427, 4216,
 4246, 4219,    0,    0,  432,  437,    0,    0, 3778,    0,
    0,    0,    0,  442,    0, 4631, 4637,    0, 4646,    0,
 4625, 4619,    0, 4622, 4652, 4628,    0,    0,    0,    0,
 4252,    0,    0, 4237,    0,    0,    0,    0, 4613, 4643,
 4616,    0,    0,    0,    0,  450,  454,  458,  462,    0,
  465,  465,    0,  469,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4243,    0,    0,    0,    0,    0, 4649,
    0,    0, 4634,    0, 1125,    0, 1128,    0,    0,    0,
    0,    0,    0,    0,    0, 3478, 3481, 3484, 3487, 3490,
 3493, 3496, 3499, 3502, 3505, 3508, 3511, 3514, 3517, 3520,
 3523, 3526, 4640,    0, 3529, 3532, 3535, 3538, 1131,    0,
    0, 4736, 4742,    0, 4751,    0, 4730, 4724,    0, 4727,
 4757, 4733,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4718, 4748, 4721,    0,    0,    0,
 3583, 3586, 3589, 3592, 3595, 3598, 3601, 3604, 3607, 3610,
 3613, 3616, 3619, 3622, 3625, 3628, 3631,    0,    0, 3634,
 3637, 3640, 3643,    0,    0, 4754,    0, 1197, 4739, 1200,
    0,    0,    0,    0,    0, 3688, 3691, 3694, 3697, 3700,
 3703, 3706, 3709, 3712, 3715, 3718, 3721, 3724, 3727, 3730,
 3733, 3736,    0,    0, 3739, 3742, 3745, 3748, 4745,  275,
  277, 1203,  280,    0,  273,  271,    0,  272,  282,  274,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  269,  279,    0,    0,    0,    0,    0,    0,
 4153, 4156, 4159, 4162, 4165, 4168, 4171, 4174, 4177, 4180,
 4183, 4186, 4189, 4192, 4195, 4198, 4201,    0,    0, 4204,
 4207, 4210, 4213,  281,    0,    0,  276,    0, 1272,    0,
 1275,    0,    0,    0,    0,    0,    0,    0,    0, 4550,
 4553, 4556, 4559, 4562, 4565, 4568, 4571, 4574, 4577, 4580,
 4583, 4586, 4589, 4592, 4595, 4598,  278,    0, 4601, 4604,
 4607, 4610, 1278,    0, 1344,    0, 1347,    0,    0,    0,
    0,    0,    0,    0,    0, 1062, 1065, 1068, 1071, 1074,
 1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104,
 1107, 1110,    0,    0, 1113, 1116, 1119, 1122, 1350, 2623,
    0, 2626,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2695,    0, 2698,    0,    0,    0,
    0,    0,    0, 2629,    0, 4655, 4658, 4661, 4664, 4667,
 4670, 4673, 4676, 4679, 4682, 4685, 4688, 4691, 4694, 4697,
 4700, 4703,    0,    0, 4706, 4709, 4712, 4715, 2701, 2977,
    0, 2980,    0,    0,    0,    0,    0,    0, 1134, 1137,
 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167,
 1170, 1173, 1176, 1179, 1182,    0,    0, 1185, 1188, 1191,
 1194,    0,    0, 2983,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3469,    0, 3472,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
 3475,    0,  265,  266,  267,  268,    0,    0, 3856,    0,
 3859,    0,    0,    0,    0,    0,    0,    0,    0, 1209,
 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239,
 1242, 1245, 1248, 1251, 1254, 1257,    0,    0, 1260, 1263,
 1266, 1269, 3862,    0, 3928,    0, 3931,    0,    0,    0,
    0,    0,    0,    0,    0, 1281, 1284, 1287, 1290, 1293,
 1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323,
 1326, 1329,    0,    0, 1332, 1335, 1338, 1341, 3934, 4000,
    0, 4003,    0,    0,    0,    0,    0,    0,    0,    0,
 2560, 2563, 2566, 2569, 2572, 2575, 2578, 2581, 2584, 2587,
 2590, 2593, 2596, 2599, 2602, 2605, 2608,    0,    0, 2611,
 2614, 2617, 2620, 4006,    0, 2632, 2635, 2638, 2641, 2644,
 2647, 2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671, 2674,
 2677, 2680,    0,    0, 2683, 2686, 2689, 2692,    0, 4072,
    0, 4075,    0,    0,    0,    0,    0,    0,    0,    0,
 2914, 2917, 2920, 2923, 2926, 2929, 2932, 2935, 2938, 2941,
 2944, 2947, 2950, 2953, 2956, 2959, 2962,    0,    0, 2965,
 2968, 2971, 2974, 4078,    0,    0,    0,    0,    0,    0,
 4144,    0, 4147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3406, 3409, 3412,
 3415, 3418, 3421, 3424, 3427, 3430, 3433, 3436, 3439, 3442,
 3445, 3448, 3451, 3454, 4150,    0, 3457, 3460, 3463, 3466,
    0,    0, 4321,    0, 4324,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3793,
 3796, 3799, 3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823,
 3826, 3829, 3832, 3835, 3838, 3841, 4327,    0, 3844, 3847,
 3850, 3853,    0,    0, 4393,    0, 4396,    0,    0,    0,
    0,    0,    0,    0,    0, 3865, 3868, 3871, 3874, 3877,
 3880, 3883, 3886, 3889, 3892, 3895, 3898, 3901, 3904, 3907,
 3910, 3913,    0,    0, 3916, 3919, 3922, 3925, 4399, 4465,
    0, 4468,    0,    0,    0,    0,    0,    0,    0,    0,
 3937, 3940, 3943, 3946, 3949, 3952, 3955, 3958, 3961, 3964,
 3967, 3970, 3973, 3976, 3979, 3982, 3985,    0,    0, 3988,
 3991, 3994, 3997, 4471, 4537,    0, 4540, 4546,    0,    0,
    0,    0,  578,    0,    0,  582,  586,  590,    0,    0,
    0,    0,    0,  594,  598,    0,    0,    0,    0,    0,
    0,    0,  602,    0,    0,    0,    0,    0, 4543,    0,
 4009, 4012, 4015, 4018, 4021, 4024, 4027, 4030, 4033, 4036,
 4039, 4042, 4045, 4048, 4051, 4054, 4057,    0,    0, 4060,
 4063, 4066, 4069,    0,  236,  606,  609,    0,    0,    0,
    0,    0,  239,    0,    0,    0,    0,    0,    0,    0,
    0, 4081, 4084, 4087, 4090, 4093, 4096, 4099, 4102, 4105,
 4108, 4111, 4114, 4117, 4120, 4123, 4126, 4129,    0,    0,
 4132, 4135, 4138, 4141,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  447, 4258, 4261, 4264, 4267, 4270, 4273, 4276,
 4279, 4282, 4285, 4288, 4291, 4294, 4297, 4300, 4303, 4306,
    0,    0, 4309, 4312, 4315, 4318,  447,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4330, 4333, 4336, 4339, 4342,
 4345, 4348, 4351, 4354, 4357, 4360, 4363, 4366, 4369, 4372,
 4375, 4378,    0,    0, 4381, 4384, 4387, 4390,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4402, 4405, 4408, 4411, 4414, 4417, 4420, 4423, 4426, 4429,
 4432, 4435, 4438, 4441, 4444, 4447, 4450,  447,    0, 4453,
 4456, 4459, 4462,    0,    0,    0,    0,    0,  185,    0,
  185,  185,  185,    0,  185, 4474, 4477, 4480, 4483, 4486,
 4489, 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513, 4516,
 4519, 4522,  185,  407, 4525, 4528, 4531, 4534,  412,    0,
    0,  417,  422,  427,    0,    0,    0,    0,    0,  432,
  437,    0,    0,    0,    0,    0,    0,  407,  442,    0,
    0,  185,  412,    0,    0,  417,  422,  427,  447,    0,
    0,    0,    0,  432,  437,    0,    0,    0,    0,    0,
    0,    0,  442,    0,    0,    0,    0,    0,    0,    0,
  450,  454,  458,  462,    0,  465,  465,    0,  469,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  450,  454,  458,  462,    0,  465,
  465,    0,  469,    0,    0,    0,    0,    0,  407,    0,
    0,    0,  447,  412,    0,    0,  417,  422,  427,    0,
    0,  229,    0,    0,  432,  437,  232,    0,    0,  232,
  232,  232,    0,  442,    0,    0,    0,  232,  232,    0,
    0,    0,    0,    0,    0,    0,  232,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  450,  454,  458,  462,    0,
  465,  465,    0,  469,    0,    0,    0,    0,  236,  407,
    0,    0,    0,    0,  412,    0,  239,  417,  422,  427,
    0,    0,    0,    0,    0,  432,  437,    0,    0,    0,
    0,    0,    0,    0,  442,    0,    0,  185,    0,    0,
    0,    0,  185,    0,    0,  185,  185,  185,    0,    0,
    0,    0,    0,  185,  185,    0,    0,    0,    0,    0,
    0,    0,  185,    0,    0,    0,  450,  454,  458,  462,
  185,  465,  465,  407,  469,    0,    0,    0,  412,    0,
    0,  417,  422,  427,    0,    0,    0,    0,    0,  432,
  437,    0,    0,    0,    0,    0,    0,    0,  442,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  450,  454,  458,  462,    0,  465,  465,    0,  469,
};
static int yycheck[] = {                                      17,
    0,    1,    0,   94,   38,    1,    6,   91,    8,    9,
   10,  111,  107,    5,   59,   15,   16,   60,    0,  126,
  473,   44,   38,  114,   40,   41,   42,   44,   44,   38,
   60,    5,  123,   42,   60,   41,   40,  370,   44,    5,
   59,   60,   37,   43,  592,  446,   62,   47,  273,  450,
   44,  263,   38,   44,   24,   44,   41,  282,   58,   44,
   43,   60,   32,   38,   82,   40,   44,   67,   59,   60,
   88,   46,   72,   91,  257,   91,   44,   72,  123,   49,
   41,  123,   44,   44,   67,   38,   44,   40,   60,   42,
  273,   59,   45,   93,   94,   60,  644,   59,   72,  282,
   58,   60,  125,  103,  104,  105,  106,  107,  125,  510,
   44,  107,   59,   60,  114,  107,   91,   44,   44,   93,
  573,   60,   96,  123,   60,   95,  126,   44,   44,  123,
   59,   60,  123,  107,   33,  273,  125,  107,   44,   38,
  125,   40,  112,   42,  282,  123,   45,   37,   38,  124,
  257,   41,   42,   43,   44,   45,   46,   47,  128,  129,
  130,  131,  563,   44,  125,  123,   61,   60,   60,   59,
  503,   61,  126,   37,   38,   60,  123,   41,   42,   43,
   44,   45,   46,   47,   41,  257,   43,   44,   45,  123,
   59,   60,  192,  265,  123,   59,  123,   61,  258,  125,
   58,   59,   59,   93,   61,   60,  123,  123,   60,   44,
   38,  211,   40,   59,   42,   40,  216,  123,  192,  219,
  280,  221,  222,  257,  123,   59,  218,   62,  211,   93,
  314,   60,   60,   60,  124,  125,   93,   60,  322,  282,
  214,  257,  123,  273,  218,  215,  262,  273,  218,  265,
  266,  267,  282,  257,  273,   40,  282,  223,  274,  225,
  124,  125,  228,  282,   91,  123,   91,   44,  125,  314,
  240,  257,  246,  247,  290,   44,  262,  123,   59,  265,
  266,  267,  273,   41,  284,   62,   44,  273,  274,  123,
   44,  282,  308,  275,  276,  277,  282,  297,  314,  308,
  300,  284,   58,   59,  257,   59,  322,   61,  273,   40,
   59,  317,  312,  319,  320,   37,   38,  282,  318,   41,
   42,   43,   44,   45,   46,   47,  273,  327,  314,   44,
  330,  257,  125,  299,  273,  282,  322,   59,  308,   61,
   44,   40,  123,  282,  273,  271,  272,   38,  443,   40,
  350,   42,   59,  282,   45,   59,  125,  310,  311,  258,
  259,  260,  261,   59,  263,   41,  457,  257,   44,  268,
  269,   93,  271,  272,  123,  314,  275,  276,  277,  278,
  273,  271,  272,  322,  283,  284,  285,  286,  273,  282,
  289,  290,  392,  257,   59,  369,  273,  282,  324,   59,
  257,   60,  124,  125,  273,  282,  501,  271,  272,  504,
  125,  310,  311,  282,  271,  272,   49,  391,  273,  314,
   40,  273,  321,  318,   59,  324,   46,  282,  323,  328,
  282,  431,  532,  431,  324,  334,  335,  336,  533,   72,
  339,  340,  341,  443,  273,  273,  273,  443,   41,  257,
  273,  443,  452,  282,  282,  282,  453,  457,   41,  282,
  324,   44,   40,  271,  272,  439,   59,  324,  257,  443,
  436,   91,  472,  443,  474,   33,   59,  577,   61,  112,
  308,    0,  275,  276,  277,   40,   41,  314,  257,  472,
  273,  474,  314,   44,  494,  322,  591,  126,   59,  282,
  322,  501,  271,  272,  504,  501,  480,  257,  504,  501,
  507,  494,  504,  608,   33,  512,  324,  314,  515,   38,
  257,   40,   58,   42,  314,  322,   45,  501,  453,  624,
  504,  501,  322,  533,  504,  257,  273,  533,  314,  485,
  486,  533,  257,  384,  385,  282,  322,  547,  643,  271,
  272,  123,  498,   41,  257,  324,  271,  272,   41,  533,
   43,   44,   45,  533,  561,  123,  257,   38,  126,   93,
  273,   42,  538,  539,  125,  593,   59,   40,   61,  282,
  580,  581,  507,   41,  550,  585,  586,  512,  586,   60,
  515,  591,  264,   41,  435,  591,   44,  264,   41,  591,
  597,   44,  324,  257,  123,  257,  125,  126,  608,  324,
   93,   59,  608,   61,  614,   41,  608,  591,   44,  310,
  311,  591,   41,  623,  624,   44,   41,  645,  624,   44,
  257,  614,  624,   60,  608,  635,  561,  635,  608,  257,
  623,  257,  125,  643,  610,  611,  335,  643,  648,  615,
  624,  643,   41,  264,  624,   44,  656,  657,  656,  268,
  269,  265,  266,  267,  268,  648,   40,  633,   41,  643,
   59,   44,  597,  643,  657,   23,   93,   25,   26,   27,
   28,   29,   30,   31,   32,  123,  315,  316,  317,  257,
  319,  320,   41,   58,   58,   44,   44,   45,   46,   47,
  258,  259,  260,   58,  262,   40,  257,  265,  266,  267,
   59,  317,   61,  319,  320,  273,  274,  321,  257,   41,
  271,  272,   44,  257,  282,  283,  284,  285,  286,  257,
   41,  289,  290,   44,   40,  275,  276,  277,  257,  258,
  259,  260,  261,  262,  263,   61,  265,  266,  267,  268,
  269,  257,  271,  272,  273,  274,  275,  276,  277,  278,
   42,   44,  257,  282,  283,  284,  285,  286,   38,   61,
  289,  290,   42,  324,  257,   41,   41,   41,   44,   44,
   44,  339,  340,  341,  257,  133,  134,   62,  271,  272,
   60,  310,  311,   59,   44,  314,  315,  316,  317,   44,
  319,  320,  321,  322,   62,  324,   62,   38,   62,  328,
   40,   42,  331,   41,   41,  334,  335,  336,  264,   59,
  339,  340,  341,  257,  258,  259,  260,   93,   59,   60,
   41,   40,  257,   44,   40,  262,   62,  257,  265,  266,
  267,  324,  125,  257,   40,  257,    0,  274,   59,   40,
   61,   58,   40,   40,   38,  203,  204,  205,   41,  125,
   42,   37,   38,   40,   42,   41,   42,   43,   44,   45,
   46,   47,   40,   40,   40,  125,  224,   41,   40,   33,
  125,   40,   40,   59,   38,   61,   40,  314,   42,   41,
   38,   45,  315,  316,  317,  322,  319,  320,  257,   59,
  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,   93,   61,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,   61,   59,    0,   42,  315,
  316,  317,  262,  319,  320,  265,  266,  267,  124,  125,
  257,  257,  257,  273,  274,   40,  262,   41,  257,  265,
  266,  267,  282,   59,  260,   41,   40,  273,  274,  123,
   33,  125,  126,   59,  257,   38,  282,   40,   58,   42,
   59,   41,   45,   40,   59,   41,   40,  257,  271,  272,
   40,  257,  262,   41,  314,  265,  266,  267,  260,  347,
    0,  123,  322,  123,  274,  271,  272,  257,  314,  315,
  316,   42,  257,   59,   59,  257,  322,  365,   44,  367,
   41,  271,  272,   41,  257,  257,  271,  272,  331,   40,
   60,  262,  257,  381,  265,  266,  267,  257,  308,  273,
  257,  324,  257,  274,  314,  315,  316,  317,  501,  319,
  320,  504,  322,  257,  257,   62,  515,  273,  324,   33,
  123,   37,  125,  126,   38,  443,   40,   72,   42,  457,
   72,   45,   51,  548,  324,   72,   72,  308,  634,  324,
  533,  257,  280,  314,  315,  316,  317,   -1,  319,  320,
   -1,  322,   -1,   -1,   -1,  271,  272,  315,  316,  317,
   -1,  319,  320,  257,  258,  259,  260,  261,  262,  263,
  458,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,  275,  276,  277,  278,  473,   -1,  475,  282,  283,
  284,  285,  286,   -1,   -1,  289,  290,   -1,  591,   -1,
   -1,   -1,   60,   -1,  492,   -1,   -1,   -1,  324,  123,
   38,  499,  126,   -1,   42,  608,  310,  311,   -1,   -1,
  314,  315,  316,  317,   -1,  319,  320,  321,  322,   -1,
  324,  624,   60,   91,  328,  523,  524,  525,  526,   -1,
  334,  335,  336,   -1,   -1,  339,  340,  341,   -1,   38,
  643,   -1,   -1,   42,  542,   -1,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,  275,  276,  277,  278,   -1,  565,   -1,  282,
  283,  284,  285,  286,   33,  573,  289,  290,   -1,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  587,
  328,  329,  330,  331,  332,  333,   -1,  310,  311,   -1,
   -1,  314,  315,  316,  317,   -1,  319,  320,  321,  322,
   -1,  324,   -1,   -1,   -1,  328,   -1,   -1,  331,   -1,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,   -1,
   -1,   -1,  281,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,   33,  123,  289,  290,  126,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,  325,  326,  327,  328,
  329,  330,  331,  332,  333,   -1,  310,  311,   -1,   -1,
  314,  315,  316,  317,   -1,  319,  320,  321,  322,   -1,
  324,   -1,   -1,   -1,  328,  273,   -1,   -1,   -1,   -1,
  334,  335,  336,   -1,  282,  339,  340,  341,   -1,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  257,  274,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,  314,   -1,  270,   -1,
   33,  273,  274,  123,  322,   38,  126,   40,  257,   42,
  282,   -1,   45,  262,   -1,   -1,  265,  266,  267,   -1,
  308,   -1,   -1,   -1,  273,  274,  314,  315,  316,  317,
   -1,  319,  320,  282,  322,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   61,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
  123,   91,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,   -1,
  319,  320,  321,  322,   -1,  324,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   -1,  124,  334,  335,  336,   -1,   -1,
  339,  340,  341,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,  262,   -1,  278,  265,
  266,  267,  282,  283,  284,  285,  286,  273,  274,  289,
  290,   -1,   -1,   -1,   33,   -1,  282,  123,   -1,   38,
  126,   40,   -1,   42,  290,   -1,   45,   -1,   -1,   -1,
  310,  311,   -1,   -1,  314,  315,  316,  317,   -1,  319,
  320,  321,  322,   -1,  324,   -1,   -1,   -1,  328,   -1,
   -1,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,  339,
  340,  341,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,  262,   -1,  278,  265,  266,  267,  282,
  283,  284,  285,  286,  273,  274,  289,  290,   -1,   -1,
   -1,   33,   -1,  282,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,  310,  311,   -1,
   -1,  314,  315,  316,  317,   -1,  319,  320,  321,  322,
   -1,  324,   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,   -1,   -1,  289,  290,   -1,   -1,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,
  316,  317,   -1,  319,  320,  321,  322,   -1,  324,   -1,
   -1,   -1,  328,   -1,   -1,   -1,   -1,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,   33,   -1,   -1,   -1,   -1,   38,  123,   40,
  125,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,   -1,
  319,  320,  321,  322,   -1,  324,   -1,   -1,   -1,  328,
   -1,   -1,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,   -1,   33,  289,  290,   -1,
   -1,   38,  123,   40,  125,   42,   -1,   -1,   45,  314,
  315,  316,  317,   41,  319,  320,   44,  322,  310,  311,
   -1,   -1,  314,  315,  316,  317,   -1,  319,  320,  321,
  322,   59,  324,   -1,   -1,   -1,  328,   -1,   -1,   -1,
   -1,   -1,  334,  335,  336,   42,  126,  339,  340,  341,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   93,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,   33,   -1,  289,  290,  123,   38,  125,   40,
   -1,   42,   -1,  257,   45,   -1,   -1,  125,  262,   -1,
   -1,  265,  266,  267,   -1,  310,  311,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,  321,   -1,  282,  324,
   -1,   -1,   -1,  328,   -1,   -1,  290,   -1,   -1,  334,
  335,  336,   -1,   -1,  339,  340,  341,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,   33,   -1,  289,  290,
   -1,   38,  123,   40,  125,   42,   -1,  257,   45,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,  310,
  311,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
  321,   -1,  282,  324,   -1,   -1,   -1,  328,   -1,   41,
   -1,   -1,   44,  334,  335,  336,   -1,   -1,  339,  340,
  341,  258,  259,  260,  261,   -1,  263,   59,   -1,  257,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,  271,  272,   -1,  283,  284,  285,  286,
   33,   -1,  289,  290,   -1,   38,  123,   40,  125,   42,
  257,   93,   45,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  310,  311,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,  321,  282,   -1,  324,   -1,   -1,
   -1,  328,   -1,  125,   -1,   -1,  324,  334,  335,  336,
   -1,   -1,  339,  340,  341,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   41,   -1,   -1,   44,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   59,  283,  284,  285,  286,   -1,   33,  289,  290,
  123,   -1,   38,   -1,   40,   -1,   42,   37,   38,   45,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,  310,
  311,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   59,
  321,   61,   -1,  324,   -1,   -1,   -1,  328,   -1,   -1,
   -1,   -1,   -1,  334,  335,  336,   -1,   -1,  339,  340,
  341,  258,  259,  260,  261,   91,  263,  125,   -1,   -1,
   -1,  268,  269,   93,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
   -1,   -1,  289,  290,   33,  257,   -1,  123,   -1,   38,
  126,   40,   41,   42,  124,  125,   45,   -1,   -1,  271,
  272,   -1,   -1,  310,  311,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,  321,   42,   -1,  324,   -1,   46,
   47,  328,   -1,   -1,   -1,   -1,   -1,  334,  335,  336,
   -1,   -1,  339,  340,  341,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   41,   -1,  324,   44,   -1,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,   91,   -1,  289,  290,   59,   -1,
   -1,   -1,   -1,   33,  123,   -1,   -1,  126,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,  310,  311,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  321,   -1,
   -1,  324,   93,  271,  272,  328,   -1,   -1,   -1,   -1,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,   -1,
   -1,  257,  258,  259,  260,   -1,  262,  257,   -1,  265,
  266,  267,   -1,   93,  125,   -1,   -1,  273,  274,   -1,
   -1,  271,  272,   -1,   -1,   -1,  282,  283,  284,  285,
  286,   42,   -1,  289,  290,   -1,  324,   -1,   -1,   -1,
   33,   -1,   -1,  123,   -1,   38,  126,   40,  257,   42,
   -1,   -1,   45,  262,  310,  311,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
  257,   -1,   -1,  282,  324,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  339,  340,  341,  273,  274,  257,  258,
  259,  260,   -1,  262,   -1,  282,  265,  266,  267,   -1,
   93,   -1,   37,   38,  273,  274,   41,   42,   43,   44,
   45,   46,   47,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,   -1,   -1,   59,   -1,   61,  314,  315,  316,
  123,   33,   -1,  126,   -1,  322,   38,   -1,   40,  257,
   42,  310,  311,   45,  262,   -1,  257,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   93,   -1,
  271,  272,   -1,  262,  282,   -1,  265,  266,  267,   -1,
  339,  340,  341,   -1,  273,  274,   -1,  257,  258,  259,
  260,   -1,  262,  282,   -1,  265,  266,  267,   -1,  124,
  125,   93,   -1,  273,  274,   -1,   -1,   -1,   41,   -1,
   -1,   44,  282,  283,  284,  285,  286,   -1,   -1,  289,
  290,   -1,   -1,  324,   -1,  314,   59,   -1,   -1,   -1,
   33,  123,   -1,  322,  126,   38,   -1,   40,  257,   42,
  310,  311,   45,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   93,  262,   -1,  282,  265,  266,  267,   -1,   -1,  339,
  340,  341,  273,  274,  257,  258,  259,  260,   -1,  262,
   -1,  282,  265,  266,  267,   -1,   -1,   -1,   -1,  290,
  273,  274,  125,   -1,   -1,   -1,   -1,   -1,   -1,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,  314,  315,  316,  317,   33,  319,  320,
  123,  322,   38,  126,   40,  257,   42,  310,  311,   45,
  262,   -1,  257,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,  257,   -1,  271,  272,   -1,  262,
  282,   -1,  265,  266,  267,   -1,  339,  340,  341,   -1,
  273,  274,   -1,   -1,   -1,  257,  258,  259,  260,  282,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   40,   41,   -1,   -1,   44,   -1,
  282,  283,  284,  285,  286,   -1,   -1,  289,  290,  324,
   -1,   -1,   -1,   -1,   33,   -1,   62,  123,   -1,   38,
  126,   40,  257,   42,   -1,   -1,   45,  262,  310,  311,
  265,  266,  267,   -1,  257,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  282,  271,  272,
   -1,  262,   -1,   -1,  265,  266,  267,  339,  340,  341,
   -1,   -1,  273,  274,  257,  258,  259,  260,   -1,  262,
   -1,  282,  265,  266,  267,   -1,   -1,   -1,   37,   38,
  273,  274,   41,   42,   43,   44,   45,   46,   47,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,
   59,  324,   61,  314,  123,   -1,   -1,  126,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   37,   38,  310,  311,   41,
   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   93,   -1,   -1,   59,  262,   61,
   -1,  265,  266,  267,   -1,   -1,  339,  340,  341,  273,
  274,  257,  258,  259,  260,   -1,  262,   -1,  282,  265,
  266,  267,   -1,   -1,   -1,  124,  125,  273,  274,   -1,
   -1,   93,   -1,   -1,   -1,   -1,  282,  283,  284,  285,
  286,   -1,   -1,  289,  290,   33,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,   47,
   -1,   -1,  124,  125,  310,  311,   -1,   -1,   -1,   -1,
   -1,  257,   60,   61,   62,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,  339,  340,  341,  282,   -1,   -1,  258,
  259,  260,  126,   91,  290,   -1,   94,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,
  289,  290,   59,   -1,   61,   62,  124,  257,  126,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  310,  311,  273,  274,  314,   -1,   -1,  257,   -1,
  257,   -1,  282,  322,   91,  262,   93,   94,  265,  266,
  267,   -1,  271,  272,   -1,   -1,  273,  274,   -1,   -1,
  339,  340,  341,   37,   38,  282,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,  257,  123,  124,  125,   41,
   -1,   -1,   44,   41,   -1,   59,   44,   61,   62,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,  257,
   -1,   59,   -1,   -1,  262,  324,   -1,  265,  266,  267,
   -1,   -1,   -1,  257,   -1,  273,  274,   91,  262,   93,
   94,  265,  266,  267,  282,   -1,   -1,   -1,   -1,  273,
  274,   93,   -1,   -1,   -1,   93,   -1,   -1,  282,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   -1,  125,   44,   -1,   -1,  125,   -1,   -1,
  314,  315,  316,  317,   -1,  319,  320,   -1,  322,   -1,
   -1,   -1,   62,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,   -1,   -1,   -1,
  257,   91,   -1,   -1,  322,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,  314,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,  257,   -1,  271,  272,  257,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,  271,  272,   -1,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
  324,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,  324,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   61,   62,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   91,  126,   93,   94,   -1,
  290,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   59,  314,   -1,   -1,  123,  124,  125,
   -1,   59,  322,   61,   62,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,   93,   -1,   -1,
  282,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,  125,
   -1,   59,  314,  315,  316,  123,  124,  125,   -1,   59,
  322,   61,   62,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   93,   -1,  257,  282,   -1,
   -1,   91,  262,   93,   94,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,  125,   -1,   -1,
  314,  257,   -1,  123,  124,  125,  262,   -1,  322,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   -1,  314,  315,  316,  317,   -1,  319,
  320,   -1,  322,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,  314,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  322,   -1,  324,  257,
   -1,   -1,   -1,   -1,  262,  271,  272,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,  310,  311,  312,  313,  314,   -1,  324,  257,
   -1,   -1,   -1,   -1,  322,   -1,  324,  257,   -1,   -1,
   -1,   -1,  262,  271,  272,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,  311,  312,  313,  314,   -1,  324,   -1,   -1,   -1,
   -1,   -1,  322,   -1,  324,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,
   62,  257,   -1,   -1,   59,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,  314,  315,
  316,  123,  124,  125,  257,   59,  322,   61,   62,  262,
  125,   -1,  265,  266,  267,   -1,   -1,   -1,  257,   -1,
  273,  274,   -1,  262,   -1,   -1,  265,  266,  267,  282,
   -1,   -1,   -1,   -1,  273,  274,   -1,   91,   -1,   93,
   94,   37,   38,  282,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,  123,
  124,  125,   -1,   59,   -1,  314,  315,  316,   -1,   -1,
   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   93,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,
   59,   60,   61,   62,   -1,  257,   -1,   -1,   -1,  125,
  262,   -1,  257,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,  274,   -1,   -1,   93,  271,  272,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  125,  310,  311,
  312,  313,  314,   -1,  123,  124,  125,   -1,   -1,   -1,
  322,   -1,  324,  257,   -1,   -1,   -1,   -1,  262,  324,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
  314,   -1,   -1,   -1,  257,   -1,   -1,   -1,  322,  262,
  324,  257,  265,  266,  267,  271,  272,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,  271,  272,   -1,   -1,  282,
   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,  314,  257,
   -1,  314,  315,  316,   -1,   -1,  322,   -1,  324,  322,
   -1,  257,   -1,  271,  272,   -1,  262,   -1,  324,  265,
  266,  267,  271,  272,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,  310,  311,  312,  313,  314,  324,   -1,   -1,   -1,
   -1,   -1,   -1,  322,   -1,  324,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   59,   -1,
   61,   62,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   37,   -1,   -1,   -1,   41,   -1,   43,
   44,   -1,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   59,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  314,  315,  316,   -1,   -1,   -1,
   37,   -1,  322,   -1,   41,   -1,   43,   44,   -1,   46,
   47,   -1,   -1,  124,  125,   -1,   -1,   91,   -1,   93,
   94,  257,   59,   60,   61,   62,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
  124,  125,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   37,
   47,   -1,   -1,   41,   42,   43,   44,   45,  314,   47,
   -1,   -1,   59,   -1,   61,   -1,  322,  124,  125,   -1,
   -1,   59,   -1,   61,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   93,   -1,   -1,  257,
   -1,   -1,  282,   41,  262,   93,   44,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   59,   -1,   -1,  282,   -1,  257,  124,  125,   -1,
   -1,   -1,   41,   -1,  314,   44,   41,  125,   -1,   44,
  271,  272,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   59,   93,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  271,  272,  310,
  311,  312,  313,   -1,   93,   -1,   -1,  125,   93,   -1,
   -1,   -1,   -1,  324,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  271,  272,  125,   -1,  312,  313,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,   -1,   41,  312,  313,   44,   37,   -1,
  257,   -1,   41,   42,   43,   44,   45,  324,   47,  257,
   -1,   -1,   59,   -1,  271,  272,   -1,   -1,   -1,   -1,
   59,   37,   61,  271,  272,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   37,   -1,   -1,   -1,   41,   42,
   43,   44,   45,   59,   47,   61,   93,   38,   -1,   40,
   41,   -1,   -1,   44,   93,   -1,   59,   -1,   61,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   62,   -1,  271,  272,   37,  324,   93,  125,   41,
   42,   43,   44,   45,   -1,   47,  125,   -1,  257,   -1,
   93,   -1,  257,   -1,   -1,   -1,   -1,   59,   -1,   61,
   91,   -1,  271,  272,   -1,   -1,  271,  272,   -1,  125,
   37,   38,   -1,   -1,   -1,   42,   43,   44,   45,   46,
   47,   41,  125,   -1,   44,   41,  324,   41,   44,   -1,
   44,   93,   59,   60,   61,   62,   -1,   -1,   -1,   59,
   -1,  257,   -1,   59,   -1,   59,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  324,   -1,  273,  274,  324,
   -1,   -1,   -1,  125,   91,   -1,  282,   94,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   41,   -1,   93,   44,   93,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   41,  124,  125,   44,
   -1,   59,   -1,   -1,   -1,  125,   -1,   -1,   -1,  125,
  257,  125,   41,   -1,   59,   44,   -1,   -1,  257,   -1,
   41,   -1,   -1,   44,  271,  272,   -1,   93,   -1,   -1,
   59,   -1,  271,  272,   -1,   93,   -1,   -1,   59,   -1,
   41,  257,   -1,   44,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,  257,  271,  272,   -1,   59,  125,
   41,   -1,   -1,   44,   93,   -1,  257,  125,  271,  272,
   41,  262,   93,   44,  265,  266,  267,  324,   59,   -1,
  125,   -1,  273,  274,  126,  324,   -1,   -1,   59,   -1,
   -1,  282,   93,   -1,   -1,  257,  125,   -1,   -1,  290,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,  324,  271,
  272,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  324,   93,  314,  125,   -1,   -1,   -1,   -1,   -1,
   -1,  322,   -1,   -1,   -1,   -1,   -1,  257,   40,   41,
   -1,  257,   44,  257,  125,   -1,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,  125,  271,  272,  271,  272,   -1,
   62,   -1,  324,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,   -1,   -1,   91,
  317,  257,  319,  320,   -1,   -1,   40,   41,   -1,  257,
   44,   -1,   -1,   -1,  324,  271,  272,   -1,  324,   -1,
  324,   -1,  257,  271,  272,  257,   -1,   -1,   62,   -1,
  262,   -1,   -1,  265,  266,  267,  271,  272,  257,   -1,
   -1,  273,  274,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  282,   -1,  271,  272,   -1,   -1,   -1,   91,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,  257,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,
  271,  272,  314,  315,  316,  317,  257,  319,  320,  324,
  322,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  257,
  271,  272,   -1,   -1,  262,  324,   -1,  265,  266,  267,
  271,  272,   -1,  324,   -1,  273,  274,   -1,   33,   -1,
   -1,   -1,   37,   38,  282,   40,  257,   42,   43,   44,
   45,  262,   47,  324,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   60,   61,   62,   -1,   -1,
   -1,  282,   -1,  324,   -1,   -1,  314,  315,  316,   -1,
   -1,   -1,   -1,  324,  322,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   91,   -1,   -1,   94,
   -1,  273,  274,  314,  315,  316,   -1,   -1,   -1,   -1,
  282,  322,   -1,   -1,   -1,   -1,   37,   38,  290,   40,
   -1,   42,   43,   44,   45,   46,   47,   -1,   -1,  124,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,
   61,   62,  314,  257,   -1,   -1,   -1,   -1,  262,   -1,
  322,  265,  266,  267,   -1,   -1,   -1,   37,   38,  273,
  274,   -1,   42,   43,   44,   45,   46,   47,  282,   -1,
   91,   -1,   -1,   94,   -1,   -1,  290,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,   -1,  124,  125,   -1,   -1,   -1,  322,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,   -1,  310,
  311,  312,  313,  273,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   94,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   91,   -1,
   93,   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   37,
   38,  124,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   91,   -1,   93,   94,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   91,   -1,   -1,   94,   -1,   -1,  124,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  124,   -1,  310,  311,  312,
  313,   91,   -1,   93,   94,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  124,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   91,
   -1,   -1,   94,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
  124,  310,  311,  312,  313,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   91,   37,   38,   94,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   60,   61,   62,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
  124,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   -1,   -1,   37,   -1,   -1,   40,   -1,   -1,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  124,
  125,  310,  311,  312,  313,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  124,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,  310,  311,  312,  313,  124,
   -1,   91,   -1,   -1,   94,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  124,   -1,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  124,   -1,  310,  311,  312,  313,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  124,   -1,  310,  311,  312,  313,   91,  126,
   -1,   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,  124,
   -1,   91,   -1,   -1,   94,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   91,
   -1,   -1,   94,   -1,   -1,  282,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,  124,   -1,   -1,   -1,   -1,  314,  315,  316,
  317,   -1,  319,  320,   -1,  322,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,  126,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   91,   37,   38,   94,   40,   -1,   42,   43,
   -1,   45,   46,   47,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   60,   61,   62,   -1,
  273,  274,   -1,   -1,   -1,  124,   -1,   -1,   -1,  282,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,  314,  315,  316,  317,   -1,  319,  320,   -1,  322,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
  124,   45,   46,   47,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   91,   37,   38,
   94,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   91,   -1,   -1,   94,   -1,   -1,  282,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,  124,   37,   38,   -1,   40,
  314,   42,   43,   -1,   45,   46,   47,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,  124,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,  126,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  124,   -1,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   60,
   61,   62,   -1,   -1,  273,  274,   -1,   -1,  124,   -1,
   -1,   -1,   -1,  282,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,  314,  315,  316,  317,   -1,
  319,  320,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  124,   -1,  310,  311,  312,  313,   94,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   60,   94,   62,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   37,
   38,   94,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   91,   -1,   -1,   94,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  124,   -1,  310,  311,
  312,  313,   94,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   94,   -1,  310,  311,  312,  313,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   94,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   94,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   94,   -1,  310,  311,  312,  313,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   94,   -1,  310,  311,
  312,  313,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   94,   60,   -1,   62,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   94,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,  314,  315,  316,   -1,   -1,   -1,
   -1,   -1,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  126,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  126,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   38,   -1,
   40,   41,   42,   -1,   44,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   62,  257,  310,  311,  312,  313,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,  257,  282,   -1,
   -1,   91,  262,   -1,   -1,  265,  266,  267,  126,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,   -1,  319,  320,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,  315,  316,  317,   -1,  319,
  320,   -1,  322,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,  126,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,  315,  316,  317,   -1,
  319,  320,   -1,  322,   -1,   -1,   -1,   -1,  314,  257,
   -1,   -1,   -1,   -1,  262,   -1,  322,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,  314,  315,  316,  317,
  290,  319,  320,  257,  322,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,  315,  316,  317,   -1,  319,  320,   -1,  322,
};
static int yyctable[] = {                                      1,
    2,  174,  185,  253,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  174,
  185,  253,   -1,    7,    2,   -1,    8,    2,  174,  185,
  253,   -1,    9,    2,  174,  185,  253,   -1,   10,    2,
  174,  185,  253,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  174,  185,
  253,   -1,   16,    2,  174,  185,  253,   -1,   17,    2,
   -1,   18,    2,  174,  185,  253,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,  174,   -1,   31,    2,   -1,   32,    2,   -1,
   33,    2,  174,  253,   -1,   34,    2,  174,  253,   -1,
   35,    2,  174,  253,   -1,   36,    2,  174,  253,   -1,
    2,  174,  253,   -1,   37,    2,   -1,   38,    2,  174,
  253,   -1,   39,    2,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   46,    2,   -1,   47,    2,   -1,  102,
  185,  254,   -1,    6,  185,  254,   -1,  103,  185,  254,
   -1,  104,  185,  254,   -1,  105,  185,  254,   -1,  106,
   61,  185,  254,   -1,   16,  185,  254,   -1,   18,   61,
  185,  254,   -1,  107,   61,   -1,   33,  254,   -1,   34,
  254,   -1,   35,  254,   -1,   38,  254,   -1,  110,  185,
  253,   -1,  185,  253,   -1,   33,  253,   -1,   38,  253,
   -1,  115,   64,   -1,    6,   64,   -1,  103,   64,   -1,
  104,   64,   -1,  105,   64,   -1,   15,   64,   -1,   16,
   64,   -1,   18,   64,   -1,  115,  239,   -1,    6,  239,
   -1,  103,  239,   -1,  104,  239,   -1,  105,  239,   -1,
   15,  239,   -1,   16,  239,   -1,   18,  239,   -1,  115,
  240,   -1,    6,  240,   -1,  103,  240,   -1,  104,  240,
   -1,  105,  240,   -1,   15,  240,   -1,   16,  240,   -1,
   18,  240,   -1,  115,  241,   -1,    6,  241,   -1,  103,
  241,   -1,  104,  241,   -1,  105,  241,   -1,   15,  241,
   -1,   16,  241,   -1,   18,  241,   -1,  115,   66,   -1,
    6,   66,   -1,  103,   66,   -1,  104,   66,   -1,  105,
   66,   -1,   15,   66,   -1,   16,   66,   -1,   18,   66,
   -1,  115,  323,   -1,   25,  323,   -1,   26,  323,   -1,
   27,  323,   -1,   28,  323,   -1,   29,  323,   -1,   32,
  323,   -1,  115,  185,   -1,    6,  185,   -1,  103,  185,
   -1,  104,  185,   -1,  105,  185,   -1,   15,  185,   -1,
   16,  185,   -1,   18,  185,   -1,    1,  174,  185,  253,
   -1,    6,  174,  185,  253,   -1,    8,  174,  185,  253,
   -1,    9,  174,  185,  253,   -1,   10,  174,  185,  253,
   -1,   15,  174,  185,  253,   -1,   16,  174,  185,  253,
   -1,   18,  174,  185,  253,   -1,   30,  174,   -1,   33,
  174,  253,   -1,   34,  174,  253,   -1,   35,  174,  253,
   -1,   36,  174,  253,   -1,  174,  253,   -1,   38,  174,
  253,   -1,  115,  321,   -1,   25,  321,   -1,   26,  321,
   -1,   27,  321,   -1,   28,  321,   -1,   29,  321,   -1,
   32,  321,   -1,  174,  185,   -1,   33,  174,   -1,   38,
  174,   -1,  218,  125,   -1,   74,  125,   -1,  239,  174,
  253,   -1,    6,  174,  253,   -1,    8,  174,  253,   -1,
    9,  174,  253,   -1,   10,  174,  253,   -1,   15,  174,
  253,   -1,   16,  174,  253,   -1,   18,  174,  253,   -1,
  284,   15,   -1,  296,  253,   -1,    6,  253,   -1,  103,
  253,   -1,  104,  253,   -1,  105,  253,   -1,   15,  253,
   -1,   16,  253,   -1,   18,  253,   -1,  301,  253,   -1,
   61,  256,   -1,  311,  185,  253,   -1,    6,  185,  253,
   -1,  103,  185,  253,   -1,  104,  185,  253,   -1,  105,
  185,  253,   -1,   15,  185,  253,   -1,   16,  185,  253,
   -1,   18,  185,  253,   -1,   34,  253,   -1,   35,  253,
   -1,  318,   74,   -1,  217,   74,   -1,  320,  254,   -1,
  318,   65,   -1,  217,   65,   -1,  218,   65,   -1,  318,
   68,   -1,  217,   68,   -1,  218,   68,   -1,  318,   69,
   -1,  217,   69,   -1,  218,   69,   -1,  318,   70,   -1,
  217,   70,   -1,  218,   70,   -1,  318,   62,   -1,  217,
   62,   -1,  218,   62,   -1,  318,   67,   -1,  217,   67,
   -1,  218,   67,   -1,  248,  322,   -1,  249,  322,   -1,
  250,  322,   -1,  251,  322,   -1,  252,  322,   -1,  253,
  322,   -1,  254,  322,   -1,  255,  322,   -1,  256,  322,
   -1,  257,  322,   -1,  258,  322,   -1,  259,  322,   -1,
  260,  322,   -1,  261,  322,   -1,  262,  322,   -1,  263,
  322,   -1,  264,  322,   -1,  265,  322,   -1,  266,  322,
   -1,  267,  322,   -1,  268,  322,   -1,  269,  322,   -1,
  270,  322,   -1,  271,  322,   -1,  272,  322,   -1,  273,
  322,   -1,  274,  322,   -1,  275,  322,   -1,  276,  322,
   -1,  277,  322,   -1,  278,  322,   -1,  279,  322,   -1,
  280,  322,   -1,  281,  322,   -1,  282,  322,   -1,  248,
  273,   -1,  249,  273,   -1,  250,  273,   -1,  251,  273,
   -1,  252,  273,   -1,  253,  273,   -1,  254,  273,   -1,
  255,  273,   -1,  256,  273,   -1,  257,  273,   -1,  258,
  273,   -1,  259,  273,   -1,  260,  273,   -1,  261,  273,
   -1,  262,  273,   -1,  263,  273,   -1,  264,  273,   -1,
  265,  273,   -1,  266,  273,   -1,  267,  273,   -1,  268,
  273,   -1,  269,  273,   -1,  270,  273,   -1,  271,  273,
   -1,  272,  273,   -1,  273,  273,   -1,  274,  273,   -1,
  275,  273,   -1,  276,  273,   -1,  277,  273,   -1,  278,
  273,   -1,  279,  273,   -1,  280,  273,   -1,  281,  273,
   -1,  282,  273,   -1,  248,  275,   -1,  249,  275,   -1,
  250,  275,   -1,  251,  275,   -1,  252,  275,   -1,  253,
  275,   -1,  254,  275,   -1,  255,  275,   -1,  256,  275,
   -1,  257,  275,   -1,  258,  275,   -1,  259,  275,   -1,
  260,  275,   -1,  261,  275,   -1,  262,  275,   -1,  263,
  275,   -1,  264,  275,   -1,  265,  275,   -1,  266,  275,
   -1,  267,  275,   -1,  268,  275,   -1,  269,  275,   -1,
  270,  275,   -1,  271,  275,   -1,  272,  275,   -1,  273,
  275,   -1,  274,  275,   -1,  275,  275,   -1,  276,  275,
   -1,  277,  275,   -1,  278,  275,   -1,  279,  275,   -1,
  280,  275,   -1,  281,  275,   -1,  282,  275,   -1,  248,
  268,   -1,  249,  268,   -1,  250,  268,   -1,  251,  268,
   -1,  252,  268,   -1,  253,  268,   -1,  254,  268,   -1,
  255,  268,   -1,  256,  268,   -1,  257,  268,   -1,  258,
  268,   -1,  259,  268,   -1,  260,  268,   -1,  261,  268,
   -1,  262,  268,   -1,  263,  268,   -1,  264,  268,   -1,
  265,  268,   -1,  266,  268,   -1,  267,  268,   -1,  268,
  268,   -1,  269,  268,   -1,  270,  268,   -1,  276,  268,
   -1,  248,  271,   -1,  249,  271,   -1,  250,  271,   -1,
  251,  271,   -1,  252,  271,   -1,  253,  271,   -1,  254,
  271,   -1,  255,  271,   -1,  256,  271,   -1,  257,  271,
   -1,  258,  271,   -1,  259,  271,   -1,  260,  271,   -1,
  261,  271,   -1,  262,  271,   -1,  263,  271,   -1,  264,
  271,   -1,  265,  271,   -1,  266,  271,   -1,  267,  271,
   -1,  268,  271,   -1,  269,  271,   -1,  270,  271,   -1,
  276,  271,   -1,  248,  272,   -1,  249,  272,   -1,  250,
  272,   -1,  251,  272,   -1,  252,  272,   -1,  253,  272,
   -1,  254,  272,   -1,  255,  272,   -1,  256,  272,   -1,
  257,  272,   -1,  258,  272,   -1,  259,  272,   -1,  260,
  272,   -1,  261,  272,   -1,  262,  272,   -1,  263,  272,
   -1,  264,  272,   -1,  265,  272,   -1,  266,  272,   -1,
  267,  272,   -1,  268,  272,   -1,  269,  272,   -1,  270,
  272,   -1,  276,  272,   -1,  346,   61,   -1,  248,  269,
   -1,  249,  269,   -1,  250,  269,   -1,  251,  269,   -1,
  252,  269,   -1,  253,  269,   -1,  254,  269,   -1,  255,
  269,   -1,  256,  269,   -1,  257,  269,   -1,  258,  269,
   -1,  259,  269,   -1,  260,  269,   -1,  261,  269,   -1,
  262,  269,   -1,  263,  269,   -1,  264,  269,   -1,  265,
  269,   -1,  266,  269,   -1,  267,  269,   -1,  268,  269,
   -1,  269,  269,   -1,  270,  269,   -1,  276,  269,   -1,
  248,  270,   -1,  249,  270,   -1,  250,  270,   -1,  251,
  270,   -1,  252,  270,   -1,  253,  270,   -1,  254,  270,
   -1,  255,  270,   -1,  256,  270,   -1,  257,  270,   -1,
  258,  270,   -1,  259,  270,   -1,  260,  270,   -1,  261,
  270,   -1,  262,  270,   -1,  263,  270,   -1,  264,  270,
   -1,  265,  270,   -1,  266,  270,   -1,  267,  270,   -1,
  268,  270,   -1,  269,  270,   -1,  270,  270,   -1,  276,
  270,   -1,  248,  317,   -1,  249,  317,   -1,  250,  317,
   -1,  251,  317,   -1,  252,  317,   -1,  253,  317,   -1,
  254,  317,   -1,  255,  317,   -1,  256,  317,   -1,  257,
  317,   -1,  258,  317,   -1,  259,  317,   -1,  260,  317,
   -1,  261,  317,   -1,  262,  317,   -1,  263,  317,   -1,
  264,  317,   -1,  265,  317,   -1,  266,  317,   -1,  267,
  317,   -1,  268,  317,   -1,  269,  317,   -1,  270,  317,
   -1,  271,  317,   -1,  272,  317,   -1,  273,  317,   -1,
  274,  317,   -1,  275,  317,   -1,  276,  317,   -1,  277,
  317,   -1,  278,  317,   -1,  279,  317,   -1,  280,  317,
   -1,  281,  317,   -1,  282,  317,   -1,  248,  318,   -1,
  249,  318,   -1,  250,  318,   -1,  251,  318,   -1,  252,
  318,   -1,  253,  318,   -1,  254,  318,   -1,  255,  318,
   -1,  256,  318,   -1,  257,  318,   -1,  258,  318,   -1,
  259,  318,   -1,  260,  318,   -1,  261,  318,   -1,  262,
  318,   -1,  263,  318,   -1,  264,  318,   -1,  265,  318,
   -1,  266,  318,   -1,  267,  318,   -1,  268,  318,   -1,
  269,  318,   -1,  270,  318,   -1,  271,  318,   -1,  272,
  318,   -1,  273,  318,   -1,  274,  318,   -1,  275,  318,
   -1,  276,  318,   -1,  277,  318,   -1,  278,  318,   -1,
  279,  318,   -1,  280,  318,   -1,  281,  318,   -1,  282,
  318,   -1,  248,  320,   -1,  249,  320,   -1,  250,  320,
   -1,  251,  320,   -1,  252,  320,   -1,  253,  320,   -1,
  254,  320,   -1,  255,  320,   -1,  256,  320,   -1,  257,
  320,   -1,  258,  320,   -1,  259,  320,   -1,  260,  320,
   -1,  261,  320,   -1,  262,  320,   -1,  263,  320,   -1,
  264,  320,   -1,  265,  320,   -1,  266,  320,   -1,  267,
  320,   -1,  268,  320,   -1,  269,  320,   -1,  270,  320,
   -1,  271,  320,   -1,  272,  320,   -1,  273,  320,   -1,
  274,  320,   -1,  275,  320,   -1,  276,  320,   -1,  277,
  320,   -1,  278,  320,   -1,  279,  320,   -1,  280,  320,
   -1,  281,  320,   -1,  282,  320,   -1,  110,  253,   -1,
   33,  185,   -1,   38,  185,   -1,  390,   61,  254,   -1,
   61,  254,   -1,  198,  199,   -1,  289,  198,   -1,  321,
  196,   -1,  115,  252,   -1,  467,   44,   -1,  468,   44,
   -1,  469,   44,   -1,  470,   44,   -1,  481,   61,   -1,
  318,   63,   -1,  217,   63,   -1,  218,   63,   -1,  248,
  288,   -1,  249,  288,   -1,  250,  288,   -1,  251,  288,
   -1,  252,  288,   -1,  253,  288,   -1,  254,  288,   -1,
  255,  288,   -1,  256,  288,   -1,  257,  288,   -1,  258,
  288,   -1,  259,  288,   -1,  260,  288,   -1,  261,  288,
   -1,  262,  288,   -1,  263,  288,   -1,  264,  288,   -1,
  265,  288,   -1,  266,  288,   -1,  267,  288,   -1,  268,
  288,   -1,  269,  288,   -1,  270,  288,   -1,  271,  288,
   -1,  272,  288,   -1,  273,  288,   -1,  274,  288,   -1,
  275,  288,   -1,  276,  288,   -1,  277,  288,   -1,  278,
  288,   -1,  279,  288,   -1,  280,  288,   -1,  281,  288,
   -1,  282,  288,   -1,  248,  289,   -1,  249,  289,   -1,
  250,  289,   -1,  251,  289,   -1,  252,  289,   -1,  253,
  289,   -1,  254,  289,   -1,  255,  289,   -1,  256,  289,
   -1,  257,  289,   -1,  258,  289,   -1,  259,  289,   -1,
  260,  289,   -1,  261,  289,   -1,  262,  289,   -1,  263,
  289,   -1,  264,  289,   -1,  265,  289,   -1,  266,  289,
   -1,  267,  289,   -1,  268,  289,   -1,  269,  289,   -1,
  270,  289,   -1,  271,  289,   -1,  272,  289,   -1,  273,
  289,   -1,  274,  289,   -1,  275,  289,   -1,  276,  289,
   -1,  277,  289,   -1,  278,  289,   -1,  279,  289,   -1,
  280,  289,   -1,  281,  289,   -1,  282,  289,   -1,  248,
  290,   -1,  249,  290,   -1,  250,  290,   -1,  251,  290,
   -1,  252,  290,   -1,  253,  290,   -1,  254,  290,   -1,
  255,  290,   -1,  256,  290,   -1,  257,  290,   -1,  258,
  290,   -1,  259,  290,   -1,  260,  290,   -1,  261,  290,
   -1,  262,  290,   -1,  263,  290,   -1,  264,  290,   -1,
  265,  290,   -1,  266,  290,   -1,  267,  290,   -1,  268,
  290,   -1,  269,  290,   -1,  270,  290,   -1,  271,  290,
   -1,  272,  290,   -1,  273,  290,   -1,  274,  290,   -1,
  275,  290,   -1,  276,  290,   -1,  277,  290,   -1,  278,
  290,   -1,  279,  290,   -1,  280,  290,   -1,  281,  290,
   -1,  282,  290,   -1,  248,  291,   -1,  249,  291,   -1,
  250,  291,   -1,  251,  291,   -1,  252,  291,   -1,  253,
  291,   -1,  254,  291,   -1,  255,  291,   -1,  256,  291,
   -1,  257,  291,   -1,  258,  291,   -1,  259,  291,   -1,
  260,  291,   -1,  261,  291,   -1,  262,  291,   -1,  263,
  291,   -1,  264,  291,   -1,  265,  291,   -1,  266,  291,
   -1,  267,  291,   -1,  268,  291,   -1,  269,  291,   -1,
  270,  291,   -1,  271,  291,   -1,  272,  291,   -1,  273,
  291,   -1,  274,  291,   -1,  275,  291,   -1,  276,  291,
   -1,  277,  291,   -1,  278,  291,   -1,  279,  291,   -1,
  280,  291,   -1,  281,  291,   -1,  282,  291,   -1,  248,
  292,   -1,  249,  292,   -1,  250,  292,   -1,  251,  292,
   -1,  252,  292,   -1,  253,  292,   -1,  254,  292,   -1,
  255,  292,   -1,  256,  292,   -1,  257,  292,   -1,  258,
  292,   -1,  259,  292,   -1,  260,  292,   -1,  261,  292,
   -1,  262,  292,   -1,  263,  292,   -1,  264,  292,   -1,
  265,  292,   -1,  266,  292,   -1,  267,  292,   -1,  268,
  292,   -1,  269,  292,   -1,  270,  292,   -1,  271,  292,
   -1,  272,  292,   -1,  273,  292,   -1,  274,  292,   -1,
  275,  292,   -1,  276,  292,   -1,  277,  292,   -1,  278,
  292,   -1,  279,  292,   -1,  280,  292,   -1,  281,  292,
   -1,  282,  292,   -1,  248,  293,   -1,  249,  293,   -1,
  250,  293,   -1,  251,  293,   -1,  252,  293,   -1,  253,
  293,   -1,  254,  293,   -1,  255,  293,   -1,  256,  293,
   -1,  257,  293,   -1,  258,  293,   -1,  259,  293,   -1,
  260,  293,   -1,  261,  293,   -1,  262,  293,   -1,  263,
  293,   -1,  264,  293,   -1,  265,  293,   -1,  266,  293,
   -1,  267,  293,   -1,  268,  293,   -1,  269,  293,   -1,
  270,  293,   -1,  271,  293,   -1,  272,  293,   -1,  273,
  293,   -1,  274,  293,   -1,  275,  293,   -1,  276,  293,
   -1,  277,  293,   -1,  278,  293,   -1,  279,  293,   -1,
  280,  293,   -1,  281,  293,   -1,  282,  293,   -1,  248,
  294,   -1,  249,  294,   -1,  250,  294,   -1,  251,  294,
   -1,  252,  294,   -1,  253,  294,   -1,  254,  294,   -1,
  255,  294,   -1,  256,  294,   -1,  257,  294,   -1,  258,
  294,   -1,  259,  294,   -1,  260,  294,   -1,  261,  294,
   -1,  262,  294,   -1,  263,  294,   -1,  264,  294,   -1,
  265,  294,   -1,  266,  294,   -1,  267,  294,   -1,  268,
  294,   -1,  269,  294,   -1,  270,  294,   -1,  271,  294,
   -1,  272,  294,   -1,  273,  294,   -1,  274,  294,   -1,
  275,  294,   -1,  276,  294,   -1,  277,  294,   -1,  278,
  294,   -1,  279,  294,   -1,  280,  294,   -1,  281,  294,
   -1,  282,  294,   -1,  248,  295,   -1,  249,  295,   -1,
  250,  295,   -1,  251,  295,   -1,  252,  295,   -1,  253,
  295,   -1,  254,  295,   -1,  255,  295,   -1,  256,  295,
   -1,  257,  295,   -1,  258,  295,   -1,  259,  295,   -1,
  260,  295,   -1,  261,  295,   -1,  262,  295,   -1,  263,
  295,   -1,  264,  295,   -1,  265,  295,   -1,  266,  295,
   -1,  267,  295,   -1,  268,  295,   -1,  269,  295,   -1,
  270,  295,   -1,  271,  295,   -1,  272,  295,   -1,  273,
  295,   -1,  274,  295,   -1,  275,  295,   -1,  276,  295,
   -1,  277,  295,   -1,  278,  295,   -1,  279,  295,   -1,
  280,  295,   -1,  281,  295,   -1,  282,  295,   -1,  248,
  296,   -1,  249,  296,   -1,  250,  296,   -1,  251,  296,
   -1,  252,  296,   -1,  253,  296,   -1,  254,  296,   -1,
  255,  296,   -1,  256,  296,   -1,  257,  296,   -1,  258,
  296,   -1,  259,  296,   -1,  260,  296,   -1,  261,  296,
   -1,  262,  296,   -1,  263,  296,   -1,  264,  296,   -1,
  265,  296,   -1,  266,  296,   -1,  267,  296,   -1,  268,
  296,   -1,  269,  296,   -1,  270,  296,   -1,  276,  296,
   -1,  248,  297,   -1,  249,  297,   -1,  250,  297,   -1,
  251,  297,   -1,  252,  297,   -1,  253,  297,   -1,  254,
  297,   -1,  255,  297,   -1,  256,  297,   -1,  257,  297,
   -1,  258,  297,   -1,  259,  297,   -1,  260,  297,   -1,
  261,  297,   -1,  262,  297,   -1,  263,  297,   -1,  264,
  297,   -1,  265,  297,   -1,  266,  297,   -1,  267,  297,
   -1,  268,  297,   -1,  269,  297,   -1,  270,  297,   -1,
  276,  297,   -1,  248,  298,   -1,  249,  298,   -1,  250,
  298,   -1,  251,  298,   -1,  252,  298,   -1,  253,  298,
   -1,  254,  298,   -1,  255,  298,   -1,  256,  298,   -1,
  257,  298,   -1,  258,  298,   -1,  259,  298,   -1,  260,
  298,   -1,  261,  298,   -1,  262,  298,   -1,  263,  298,
   -1,  264,  298,   -1,  265,  298,   -1,  266,  298,   -1,
  267,  298,   -1,  268,  298,   -1,  269,  298,   -1,  270,
  298,   -1,  271,  298,   -1,  272,  298,   -1,  273,  298,
   -1,  274,  298,   -1,  275,  298,   -1,  276,  298,   -1,
  277,  298,   -1,  278,  298,   -1,  279,  298,   -1,  280,
  298,   -1,  281,  298,   -1,  282,  298,   -1,  248,  299,
   -1,  249,  299,   -1,  250,  299,   -1,  251,  299,   -1,
  252,  299,   -1,  253,  299,   -1,  254,  299,   -1,  255,
  299,   -1,  256,  299,   -1,  257,  299,   -1,  258,  299,
   -1,  259,  299,   -1,  260,  299,   -1,  261,  299,   -1,
  262,  299,   -1,  263,  299,   -1,  264,  299,   -1,  265,
  299,   -1,  266,  299,   -1,  267,  299,   -1,  268,  299,
   -1,  269,  299,   -1,  270,  299,   -1,  271,  299,   -1,
  272,  299,   -1,  273,  299,   -1,  274,  299,   -1,  275,
  299,   -1,  276,  299,   -1,  277,  299,   -1,  278,  299,
   -1,  279,  299,   -1,  280,  299,   -1,  281,  299,   -1,
  282,  299,   -1,  248,  300,   -1,  249,  300,   -1,  250,
  300,   -1,  251,  300,   -1,  252,  300,   -1,  253,  300,
   -1,  254,  300,   -1,  255,  300,   -1,  256,  300,   -1,
  257,  300,   -1,  258,  300,   -1,  259,  300,   -1,  260,
  300,   -1,  261,  300,   -1,  262,  300,   -1,  263,  300,
   -1,  264,  300,   -1,  265,  300,   -1,  266,  300,   -1,
  267,  300,   -1,  268,  300,   -1,  269,  300,   -1,  270,
  300,   -1,  276,  300,   -1,  248,  301,   -1,  249,  301,
   -1,  250,  301,   -1,  251,  301,   -1,  252,  301,   -1,
  253,  301,   -1,  254,  301,   -1,  255,  301,   -1,  256,
  301,   -1,  257,  301,   -1,  258,  301,   -1,  259,  301,
   -1,  260,  301,   -1,  261,  301,   -1,  262,  301,   -1,
  263,  301,   -1,  264,  301,   -1,  265,  301,   -1,  266,
  301,   -1,  267,  301,   -1,  268,  301,   -1,  269,  301,
   -1,  270,  301,   -1,  271,  301,   -1,  272,  301,   -1,
  273,  301,   -1,  274,  301,   -1,  275,  301,   -1,  276,
  301,   -1,  277,  301,   -1,  278,  301,   -1,  279,  301,
   -1,  280,  301,   -1,  281,  301,   -1,  282,  301,   -1,
  248,  302,   -1,  249,  302,   -1,  250,  302,   -1,  251,
  302,   -1,  252,  302,   -1,  253,  302,   -1,  254,  302,
   -1,  255,  302,   -1,  256,  302,   -1,  257,  302,   -1,
  258,  302,   -1,  259,  302,   -1,  260,  302,   -1,  261,
  302,   -1,  262,  302,   -1,  263,  302,   -1,  264,  302,
   -1,  265,  302,   -1,  266,  302,   -1,  267,  302,   -1,
  268,  302,   -1,  269,  302,   -1,  270,  302,   -1,  271,
  302,   -1,  272,  302,   -1,  273,  302,   -1,  274,  302,
   -1,  275,  302,   -1,  276,  302,   -1,  277,  302,   -1,
  278,  302,   -1,  279,  302,   -1,  280,  302,   -1,  281,
  302,   -1,  282,  302,   -1,  248,  303,   -1,  249,  303,
   -1,  250,  303,   -1,  251,  303,   -1,  252,  303,   -1,
  253,  303,   -1,  254,  303,   -1,  255,  303,   -1,  256,
  303,   -1,  257,  303,   -1,  258,  303,   -1,  259,  303,
   -1,  260,  303,   -1,  261,  303,   -1,  262,  303,   -1,
  263,  303,   -1,  264,  303,   -1,  265,  303,   -1,  266,
  303,   -1,  267,  303,   -1,  268,  303,   -1,  269,  303,
   -1,  270,  303,   -1,  271,  303,   -1,  272,  303,   -1,
  273,  303,   -1,  274,  303,   -1,  275,  303,   -1,  276,
  303,   -1,  277,  303,   -1,  278,  303,   -1,  279,  303,
   -1,  280,  303,   -1,  281,  303,   -1,  282,  303,   -1,
  248,  304,   -1,  249,  304,   -1,  250,  304,   -1,  251,
  304,   -1,  252,  304,   -1,  253,  304,   -1,  254,  304,
   -1,  255,  304,   -1,  256,  304,   -1,  257,  304,   -1,
  258,  304,   -1,  259,  304,   -1,  260,  304,   -1,  261,
  304,   -1,  262,  304,   -1,  263,  304,   -1,  264,  304,
   -1,  265,  304,   -1,  266,  304,   -1,  267,  304,   -1,
  268,  304,   -1,  269,  304,   -1,  270,  304,   -1,  271,
  304,   -1,  272,  304,   -1,  273,  304,   -1,  274,  304,
   -1,  275,  304,   -1,  276,  304,   -1,  277,  304,   -1,
  278,  304,   -1,  279,  304,   -1,  280,  304,   -1,  281,
  304,   -1,  282,  304,   -1,  248,  306,   -1,  249,  306,
   -1,  250,  306,   -1,  251,  306,   -1,  252,  306,   -1,
  253,  306,   -1,  254,  306,   -1,  255,  306,   -1,  256,
  306,   -1,  257,  306,   -1,  258,  306,   -1,  259,  306,
   -1,  260,  306,   -1,  261,  306,   -1,  262,  306,   -1,
  263,  306,   -1,  264,  306,   -1,  265,  306,   -1,  266,
  306,   -1,  267,  306,   -1,  268,  306,   -1,  269,  306,
   -1,  270,  306,   -1,  276,  306,   -1,  248,  307,   -1,
  249,  307,   -1,  250,  307,   -1,  251,  307,   -1,  252,
  307,   -1,  253,  307,   -1,  254,  307,   -1,  255,  307,
   -1,  256,  307,   -1,  257,  307,   -1,  258,  307,   -1,
  259,  307,   -1,  260,  307,   -1,  261,  307,   -1,  262,
  307,   -1,  263,  307,   -1,  264,  307,   -1,  265,  307,
   -1,  266,  307,   -1,  267,  307,   -1,  268,  307,   -1,
  269,  307,   -1,  270,  307,   -1,  271,  307,   -1,  272,
  307,   -1,  273,  307,   -1,  274,  307,   -1,  275,  307,
   -1,  276,  307,   -1,  277,  307,   -1,  278,  307,   -1,
  279,  307,   -1,  280,  307,   -1,  281,  307,   -1,  282,
  307,   -1,  248,  286,   -1,  249,  286,   -1,  250,  286,
   -1,  251,  286,   -1,  252,  286,   -1,  253,  286,   -1,
  254,  286,   -1,  255,  286,   -1,  256,  286,   -1,  257,
  286,   -1,  258,  286,   -1,  259,  286,   -1,  260,  286,
   -1,  261,  286,   -1,  262,  286,   -1,  263,  286,   -1,
  264,  286,   -1,  265,  286,   -1,  266,  286,   -1,  267,
  286,   -1,  268,  286,   -1,  269,  286,   -1,  270,  286,
   -1,  271,  286,   -1,  272,  286,   -1,  273,  286,   -1,
  274,  286,   -1,  275,  286,   -1,  276,  286,   -1,  277,
  286,   -1,  278,  286,   -1,  279,  286,   -1,  280,  286,
   -1,  281,  286,   -1,  282,  286,   -1,  248,  287,   -1,
  249,  287,   -1,  250,  287,   -1,  251,  287,   -1,  252,
  287,   -1,  253,  287,   -1,  254,  287,   -1,  255,  287,
   -1,  256,  287,   -1,  257,  287,   -1,  258,  287,   -1,
  259,  287,   -1,  260,  287,   -1,  261,  287,   -1,  262,
  287,   -1,  263,  287,   -1,  264,  287,   -1,  265,  287,
   -1,  266,  287,   -1,  267,  287,   -1,  268,  287,   -1,
  269,  287,   -1,  270,  287,   -1,  271,  287,   -1,  272,
  287,   -1,  273,  287,   -1,  274,  287,   -1,  275,  287,
   -1,  276,  287,   -1,  277,  287,   -1,  278,  287,   -1,
  279,  287,   -1,  280,  287,   -1,  281,  287,   -1,  282,
  287,   -1,  248,  277,   -1,  249,  277,   -1,  250,  277,
   -1,  251,  277,   -1,  252,  277,   -1,  253,  277,   -1,
  254,  277,   -1,  255,  277,   -1,  256,  277,   -1,  257,
  277,   -1,  258,  277,   -1,  259,  277,   -1,  260,  277,
   -1,  261,  277,   -1,  262,  277,   -1,  263,  277,   -1,
  264,  277,   -1,  265,  277,   -1,  266,  277,   -1,  267,
  277,   -1,  268,  277,   -1,  269,  277,   -1,  270,  277,
   -1,  276,  277,   -1,  248,  278,   -1,  249,  278,   -1,
  250,  278,   -1,  251,  278,   -1,  252,  278,   -1,  253,
  278,   -1,  254,  278,   -1,  255,  278,   -1,  256,  278,
   -1,  257,  278,   -1,  258,  278,   -1,  259,  278,   -1,
  260,  278,   -1,  261,  278,   -1,  262,  278,   -1,  263,
  278,   -1,  264,  278,   -1,  265,  278,   -1,  266,  278,
   -1,  267,  278,   -1,  268,  278,   -1,  269,  278,   -1,
  270,  278,   -1,  276,  278,   -1,  248,  279,   -1,  249,
  279,   -1,  250,  279,   -1,  251,  279,   -1,  252,  279,
   -1,  253,  279,   -1,  254,  279,   -1,  255,  279,   -1,
  256,  279,   -1,  257,  279,   -1,  258,  279,   -1,  259,
  279,   -1,  260,  279,   -1,  261,  279,   -1,  262,  279,
   -1,  263,  279,   -1,  264,  279,   -1,  265,  279,   -1,
  266,  279,   -1,  267,  279,   -1,  268,  279,   -1,  269,
  279,   -1,  270,  279,   -1,  276,  279,   -1,  248,  280,
   -1,  249,  280,   -1,  250,  280,   -1,  251,  280,   -1,
  252,  280,   -1,  253,  280,   -1,  254,  280,   -1,  255,
  280,   -1,  256,  280,   -1,  257,  280,   -1,  258,  280,
   -1,  259,  280,   -1,  260,  280,   -1,  261,  280,   -1,
  262,  280,   -1,  263,  280,   -1,  264,  280,   -1,  265,
  280,   -1,  266,  280,   -1,  267,  280,   -1,  268,  280,
   -1,  269,  280,   -1,  270,  280,   -1,  276,  280,   -1,
  248,  281,   -1,  249,  281,   -1,  250,  281,   -1,  251,
  281,   -1,  252,  281,   -1,  253,  281,   -1,  254,  281,
   -1,  255,  281,   -1,  256,  281,   -1,  257,  281,   -1,
  258,  281,   -1,  259,  281,   -1,  260,  281,   -1,  261,
  281,   -1,  262,  281,   -1,  263,  281,   -1,  264,  281,
   -1,  265,  281,   -1,  266,  281,   -1,  267,  281,   -1,
  268,  281,   -1,  269,  281,   -1,  270,  281,   -1,  276,
  281,   -1,  248,  284,   -1,  249,  284,   -1,  250,  284,
   -1,  251,  284,   -1,  252,  284,   -1,  253,  284,   -1,
  254,  284,   -1,  255,  284,   -1,  256,  284,   -1,  257,
  284,   -1,  258,  284,   -1,  259,  284,   -1,  260,  284,
   -1,  261,  284,   -1,  262,  284,   -1,  263,  284,   -1,
  264,  284,   -1,  265,  284,   -1,  266,  284,   -1,  267,
  284,   -1,  268,  284,   -1,  269,  284,   -1,  270,  284,
   -1,  271,  284,   -1,  272,  284,   -1,  273,  284,   -1,
  274,  284,   -1,  275,  284,   -1,  276,  284,   -1,  277,
  284,   -1,  278,  284,   -1,  279,  284,   -1,  280,  284,
   -1,  281,  284,   -1,  282,  284,   -1,  248,  282,   -1,
  249,  282,   -1,  250,  282,   -1,  251,  282,   -1,  252,
  282,   -1,  253,  282,   -1,  254,  282,   -1,  255,  282,
   -1,  256,  282,   -1,  257,  282,   -1,  258,  282,   -1,
  259,  282,   -1,  260,  282,   -1,  261,  282,   -1,  262,
  282,   -1,  263,  282,   -1,  264,  282,   -1,  265,  282,
   -1,  266,  282,   -1,  267,  282,   -1,  268,  282,   -1,
  269,  282,   -1,  270,  282,   -1,  276,  282,   -1,  248,
  283,   -1,  249,  283,   -1,  250,  283,   -1,  251,  283,
   -1,  252,  283,   -1,  253,  283,   -1,  254,  283,   -1,
  255,  283,   -1,  256,  283,   -1,  257,  283,   -1,  258,
  283,   -1,  259,  283,   -1,  260,  283,   -1,  261,  283,
   -1,  262,  283,   -1,  263,  283,   -1,  264,  283,   -1,
  265,  283,   -1,  266,  283,   -1,  267,  283,   -1,  268,
  283,   -1,  269,  283,   -1,  270,  283,   -1,  276,  283,
   -1,  248,  285,   -1,  249,  285,   -1,  250,  285,   -1,
  251,  285,   -1,  252,  285,   -1,  253,  285,   -1,  254,
  285,   -1,  255,  285,   -1,  256,  285,   -1,  257,  285,
   -1,  258,  285,   -1,  259,  285,   -1,  260,  285,   -1,
  261,  285,   -1,  262,  285,   -1,  263,  285,   -1,  264,
  285,   -1,  265,  285,   -1,  266,  285,   -1,  267,  285,
   -1,  268,  285,   -1,  269,  285,   -1,  270,  285,   -1,
  276,  285,   -1,  248,  305,   -1,  249,  305,   -1,  250,
  305,   -1,  251,  305,   -1,  252,  305,   -1,  253,  305,
   -1,  254,  305,   -1,  255,  305,   -1,  256,  305,   -1,
  257,  305,   -1,  258,  305,   -1,  259,  305,   -1,  260,
  305,   -1,  261,  305,   -1,  262,  305,   -1,  263,  305,
   -1,  264,  305,   -1,  265,  305,   -1,  266,  305,   -1,
  267,  305,   -1,  268,  305,   -1,  269,  305,   -1,  270,
  305,   -1,  276,  305,   -1,  296,  185,  253,   -1,  248,
  311,   -1,  249,  311,   -1,  250,  311,   -1,  251,  311,
   -1,  252,  311,   -1,  253,  311,   -1,  254,  311,   -1,
  255,  311,   -1,  256,  311,   -1,  257,  311,   -1,  258,
  311,   -1,  259,  311,   -1,  260,  311,   -1,  261,  311,
   -1,  262,  311,   -1,  263,  311,   -1,  264,  311,   -1,
  265,  311,   -1,  266,  311,   -1,  267,  311,   -1,  268,
  311,   -1,  269,  311,   -1,  270,  311,   -1,  271,  311,
   -1,  272,  311,   -1,  273,  311,   -1,  274,  311,   -1,
  275,  311,   -1,  276,  311,   -1,  277,  311,   -1,  278,
  311,   -1,  279,  311,   -1,  280,  311,   -1,  281,  311,
   -1,  282,  311,   -1,  248,  319,   -1,  249,  319,   -1,
  250,  319,   -1,  251,  319,   -1,  252,  319,   -1,  253,
  319,   -1,  254,  319,   -1,  255,  319,   -1,  256,  319,
   -1,  257,  319,   -1,  258,  319,   -1,  259,  319,   -1,
  260,  319,   -1,  261,  319,   -1,  262,  319,   -1,  263,
  319,   -1,  264,  319,   -1,  265,  319,   -1,  266,  319,
   -1,  267,  319,   -1,  268,  319,   -1,  269,  319,   -1,
  270,  319,   -1,  271,  319,   -1,  272,  319,   -1,  273,
  319,   -1,  274,  319,   -1,  275,  319,   -1,  276,  319,
   -1,  277,  319,   -1,  278,  319,   -1,  279,  319,   -1,
  280,  319,   -1,  281,  319,   -1,  282,  319,   -1,  540,
   61,   -1,  514,   84,   -1,   13,   84,   -1,   14,   84,
   -1,  516,   84,   -1,  270,  250,   -1,
};
#define YYFINAL 48
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 352
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknTry","tknCatch","tknThrow",
"tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq","tknPerEq",
"tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift","tknLShiftEq",
"tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq","tkn3WayCmp",
"tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar","tknConst",
"tknStatic","tknExtern","tknVirtual","tknOverride","tknInline","tknExplicit",
"tknFriend","tknVolatile","tknFinal","tknPreProHash","tknDefine","tknUndef",
"tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf",
"tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew","tknDelete",
"tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW","PREFIX",
"POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumdefn : tknTypedef tknEnum optid '{' enumitemlist '}' tknID ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib tknFinal",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1063 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3511 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 281 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 3901 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 288 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 3907 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 289 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3917 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 294 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 3927 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 3933 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 3939 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 3945 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3951 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 3957 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 3963 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 3969 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 3975 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 3981 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 3987 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 3993 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 3999 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4005 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4011 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4017 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4023 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4029 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4035 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4041 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4047 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4053 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4059 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4065 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4071 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4077 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4083 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4089 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4095 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4101 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4107 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4115 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4124 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 342 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4133 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 348 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4142 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 354 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4151 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 360 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4159 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4167 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 368 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4175 "y_tab.c"
break;
case 43:
#line 373 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4180 "y_tab.c"
  if (!yytrial)
#line 373 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4187 "y_tab.c"
break;
case 44:
#line 377 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4192 "y_tab.c"
  if (!yytrial)
#line 377 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4199 "y_tab.c"
break;
case 45:
#line 381 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4204 "y_tab.c"
  if (!yytrial)
#line 381 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4211 "y_tab.c"
break;
case 46:
#line 385 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4216 "y_tab.c"
  if (!yytrial)
#line 385 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4223 "y_tab.c"
break;
case 47:
#line 389 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4228 "y_tab.c"
  if (!yytrial)
#line 389 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4235 "y_tab.c"
break;
case 48:
#line 393 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4240 "y_tab.c"
  if (!yytrial)
#line 393 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4247 "y_tab.c"
break;
case 49:
#line 399 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4252 "y_tab.c"
  if (!yytrial)
#line 399 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4256 "y_tab.c"
break;
case 50:
#line 402 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4261 "y_tab.c"
  if (!yytrial)
#line 402 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4265 "y_tab.c"
break;
case 51:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4270 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4274 "y_tab.c"
break;
case 52:
#line 409 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4279 "y_tab.c"
  if (!yytrial)
#line 409 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4283 "y_tab.c"
break;
case 53:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4288 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4292 "y_tab.c"
break;
case 54:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4297 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4301 "y_tab.c"
break;
case 55:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4306 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4310 "y_tab.c"
break;
case 56:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4315 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4319 "y_tab.c"
break;
case 57:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4324 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4328 "y_tab.c"
break;
case 58:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4333 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4337 "y_tab.c"
break;
case 59:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4342 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4346 "y_tab.c"
break;
case 60:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4351 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4355 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 424 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4361 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4367 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4373 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4379 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4385 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4391 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4397 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4403 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4409 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4415 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4421 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4427 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4436 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4442 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4448 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4454 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 449 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4460 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4466 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4472 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4478 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4484 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4493 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4502 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4510 "y_tab.c"
break;
case 85:
#line 469 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4515 "y_tab.c"
  if (!yytrial)
#line 469 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4521 "y_tab.c"
break;
case 86:
#line 472 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4526 "y_tab.c"
  if (!yytrial)
#line 472 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4532 "y_tab.c"
break;
case 87:
#line 475 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4537 "y_tab.c"
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4543 "y_tab.c"
break;
case 88:
#line 478 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4548 "y_tab.c"
  if (!yytrial)
#line 478 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4554 "y_tab.c"
break;
case 89:
#line 481 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4559 "y_tab.c"
  if (!yytrial)
#line 481 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].enumItemList);
                  }
#line 4565 "y_tab.c"
break;
case 90:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4570 "y_tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4576 "y_tab.c"
break;
case 91:
#line 488 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4581 "y_tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4587 "y_tab.c"
break;
case 92:
#line 491 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4592 "y_tab.c"
  if (!yytrial)
#line 491 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4598 "y_tab.c"
break;
case 93:
#line 496 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4603 "y_tab.c"
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4607 "y_tab.c"
break;
case 94:
#line 497 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4612 "y_tab.c"
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4616 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 500 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4622 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 503 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4631 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4637 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 512 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4648 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 518 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4658 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 523 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4669 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 529 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4679 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 534 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4690 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 540 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4700 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 549 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4708 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 552 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4716 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 555 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4724 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 561 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4732 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 564 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4741 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 568 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4749 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 573 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4755 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4761 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 4769 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 580 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 4778 "y_tab.c"
break;
case 114:
#line 586 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4783 "y_tab.c"
  if (!yytrial)
#line 586 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 4789 "y_tab.c"
break;
case 115:
#line 589 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4794 "y_tab.c"
  if (!yytrial)
#line 589 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 4801 "y_tab.c"
break;
case 116:
#line 595 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4806 "y_tab.c"
  if (!yytrial)
#line 595 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4810 "y_tab.c"
break;
case 117:
#line 598 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4815 "y_tab.c"
  if (!yytrial)
#line 598 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4822 "y_tab.c"
break;
case 118:
#line 604 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4827 "y_tab.c"
  if (!yytrial)
#line 604 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 4834 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 609 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4844 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 614 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 4854 "y_tab.c"
break;
case 121:
#line 621 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4859 "y_tab.c"
  if (!yytrial)
#line 621 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 4863 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 624 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4873 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 629 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 4883 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 4892 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4898 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4904 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4910 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4916 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4922 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4928 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4934 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4940 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4946 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4952 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4958 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4964 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4970 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4976 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4982 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4988 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4994 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5000 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5006 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5012 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5018 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5024 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5030 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5036 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5042 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5048 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5054 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5060 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5066 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5072 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5078 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5084 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5090 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5096 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5102 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5108 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5114 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5120 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5126 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5132 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5138 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5147 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5156 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5162 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5168 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5174 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5180 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5186 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5192 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5198 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5204 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5210 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5216 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 707 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5222 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5228 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5234 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5240 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5246 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 5252 "y_tab.c"
break;
case 184:
#line 715 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5257 "y_tab.c"
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5261 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5267 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 720 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5273 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 721 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5279 "y_tab.c"
break;
case 188:
#line 724 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5284 "y_tab.c"
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5288 "y_tab.c"
break;
case 189:
#line 730 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5293 "y_tab.c"
  if (!yytrial)
#line 731 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5301 "y_tab.c"
break;
case 190:
#line 736 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5306 "y_tab.c"
break;
case 191:
#line 740 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5311 "y_tab.c"
  if (!yytrial)
#line 741 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5318 "y_tab.c"
break;
case 192:
#line 745 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5323 "y_tab.c"
break;
case 193:
#line 749 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5328 "y_tab.c"
  if (!yytrial)
#line 750 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5335 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 754 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5344 "y_tab.c"
break;
case 195:
#line 761 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5356 "y_tab.c"
  if (!yytrial)
#line 769 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5362 "y_tab.c"
break;
case 196:
#line 772 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5367 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 773 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5375 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 776 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5384 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 782 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5390 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 783 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5396 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 784 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5402 "y_tab.c"
break;
case 202:
#line 787 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5407 "y_tab.c"
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5411 "y_tab.c"
break;
case 203:
#line 790 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5416 "y_tab.c"
  if (!yytrial)
#line 791 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5423 "y_tab.c"
break;
case 204:
#line 795 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5428 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 797 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-7].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-7].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5437 "y_tab.c"
break;
case 206:
#line 801 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5442 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 803 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5451 "y_tab.c"
break;
case 208:
#line 810 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5463 "y_tab.c"
  if (!yytrial)
#line 818 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5471 "y_tab.c"
break;
case 209:
#line 824 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5483 "y_tab.c"
  if (!yytrial)
#line 832 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5491 "y_tab.c"
break;
case 210:
#line 838 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5503 "y_tab.c"
  if (!yytrial)
#line 846 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5511 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 853 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5521 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 858 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5530 "y_tab.c"
break;
case 213:
#line 864 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5535 "y_tab.c"
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5539 "y_tab.c"
break;
case 214:
#line 867 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5544 "y_tab.c"
  if (!yytrial)
#line 867 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5548 "y_tab.c"
break;
case 215:
#line 868 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5553 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5557 "y_tab.c"
break;
case 216:
#line 869 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5562 "y_tab.c"
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5566 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5572 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5578 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 876 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5584 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5590 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 880 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5596 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5602 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 882 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5608 "y_tab.c"
break;
case 224:
#line 885 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5613 "y_tab.c"
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5617 "y_tab.c"
break;
case 225:
#line 887 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5627 "y_tab.c"
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5633 "y_tab.c"
break;
case 226:
#line 899 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5638 "y_tab.c"
  if (!yytrial)
#line 899 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5642 "y_tab.c"
break;
case 227:
#line 901 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5647 "y_tab.c"
  if (!yytrial)
#line 902 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5660 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 912 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5669 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 918 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5675 "y_tab.c"
break;
case 230:
#line 919 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5680 "y_tab.c"
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5684 "y_tab.c"
break;
case 231:
#line 920 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5689 "y_tab.c"
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5693 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5699 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5705 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5711 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5717 "y_tab.c"
break;
case 236:
#line 929 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5722 "y_tab.c"
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5726 "y_tab.c"
break;
case 237:
#line 930 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5731 "y_tab.c"
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5735 "y_tab.c"
break;
case 238:
#line 931 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5740 "y_tab.c"
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 5744 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5750 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5756 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5762 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 937 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5768 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5776 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5785 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 949 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 5794 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 955 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5800 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 5806 "y_tab.c"
break;
case 248:
#line 959 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5811 "y_tab.c"
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5817 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 962 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 5825 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 5834 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5840 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5846 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 5852 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5858 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5864 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5870 "y_tab.c"
break;
case 257:
#line 983 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5875 "y_tab.c"
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 5879 "y_tab.c"
break;
case 258:
#line 984 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5884 "y_tab.c"
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5888 "y_tab.c"
break;
case 259:
#line 985 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5893 "y_tab.c"
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 5897 "y_tab.c"
break;
case 260:
#line 988 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5902 "y_tab.c"
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 5906 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 5912 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 5918 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5924 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5930 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 997 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5936 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 5942 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 5948 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 5954 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 5960 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 5966 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 5972 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 5978 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 5984 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 5990 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 5996 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6002 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6008 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6014 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6020 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6026 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6032 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6038 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6044 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6050 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6056 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6062 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6068 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6074 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6080 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6086 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6092 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6098 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6104 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6110 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6116 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6122 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6128 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6134 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6140 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6146 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6152 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6158 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6164 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6170 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6176 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6182 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6188 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6194 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6200 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6206 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6212 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6218 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6224 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6230 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6236 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6242 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6248 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6254 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6260 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6266 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6272 "y_tab.c"
break;
case 322:
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6278 "y_tab.c"
break;
case 323:
  if (!yytrial)
#line 1056 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 6284 "y_tab.c"
break;
case 324:
#line 1059 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6289 "y_tab.c"
  if (!yytrial)
#line 1059 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6293 "y_tab.c"
break;
#line 6295 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
