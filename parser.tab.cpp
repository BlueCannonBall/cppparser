#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,   39,   39,   39,   40,   40,   41,   41,
   42,   42,   38,   38,   69,   69,   69,   69,   69,   69,
   70,   71,   71,   72,   72,   72,   72,   72,   72,   73,
   35,   35,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    4,    4,   11,   11,
   11,   11,   12,   12,   12,   12,    9,    9,    9,    9,
   10,   10,   10,   25,   25,   24,   23,   16,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   14,   14,   14,
   62,   62,   54,   54,   55,   55,   46,   47,    8,   43,
   43,   44,   45,   45,   45,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   22,   22,   22,   18,   18,
   18,   18,   19,   19,   64,   64,   64,   64,   64,   64,
   63,   63,   63,   63,   61,   61,   61,   49,   50,   74,
   50,   75,   50,   50,   48,   76,   48,   48,   56,   56,
   56,   52,   53,   77,   53,   78,   53,   51,   51,   51,
   20,   20,   21,   17,   17,   17,   58,   58,   59,   59,
   60,   60,   60,   28,   28,   79,   27,   27,   65,   65,
   65,   66,   66,   66,   66,   13,   13,   57,   57,   57,
   57,   30,   31,   31,   32,   32,   33,   33,   34,    6,
    6,    1,    1,    1,    1,   67,   67,   67,   29,   68,
   68,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   37,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    5,    7,    6,    8,
    9,   11,    0,    1,    4,    3,    4,    4,    4,    4,
    3,    3,    3,    3,    3,    3,    2,    3,    2,    3,
    1,    1,    1,    2,    3,    1,    2,    1,    2,    2,
    2,    2,    1,    2,    4,    1,    0,    1,    1,    3,
    1,    1,    0,    2,    3,    2,    6,    8,    9,    7,
    5,    6,    4,    2,    2,    3,    6,    3,    4,    3,
    6,    5,    5,    4,    3,    3,    3,    6,    9,    8,
    1,    1,    4,    2,    2,    4,    2,    4,    3,   11,
   10,    2,    9,    8,    2,    1,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    3,    0,    1,    3,    1,    1,
    1,    1,    1,    1,    0,    2,    2,    2,    2,    2,
    0,    2,    2,    3,    0,    1,    1,    2,    5,    0,
   11,    0,   13,    2,    4,    0,    6,    2,    0,    5,
    6,    2,    4,    0,   10,    0,   12,    4,    5,    7,
    8,    8,    2,    2,    2,    3,    0,    1,    1,    2,
    0,    1,    2,    2,    1,    0,    8,    2,    0,    3,
    4,    0,    1,    1,    1,    3,    4,    1,    1,    1,
    1,    4,    1,    3,    1,    1,    2,    2,    3,    1,
    1,    0,    1,    4,    2,    2,    2,    2,    4,    1,
    3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    4,    3,    4,    4,
    7,    7,    7,    7,    3,    2,    2,    4,    2,    1,
    2,
};
static int yydefred[] = {                                      0,
    0,  262,  263,  264,    0,    0,    0,    0,    0,    0,
  241,    0,   61,   62,    0,    0,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  186,  111,  112,    0,  187,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  265,
    3,   28,    8,    9,   12,    0,    0,    0,    6,    0,
    7,    0,    0,   10,    0,    0,   11,   27,    0,   13,
    0,   14,    0,   16,   17,   18,    0,   19,    0,   20,
   21,    0,   22,   23,    0,   24,   25,    0,   26,    0,
    0,    0,    0,   29,   30,   31,   32,   33,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  158,  159,  160,  162,  163,  138,
  139,  127,  128,  129,  130,  131,  132,  133,  134,  135,
  136,  137,  161,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   57,    0,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   74,    0,    0,  219,    0,    0,
    0,    0,    0,  214,  215,    0,  213,    0,   95,   94,
    0,    0,    0,    4,    5,  224,    0,    0,    0,  228,
  125,    0,  194,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  273,  275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  321,    0,  122,    0,  117,  188,    0,    0,    0,  202,
  114,    0,  115,    0,    0,    0,    0,    0,    0,    0,
  176,  179,  178,  177,  180,    0,    0,    0,    0,    0,
    0,  169,  167,    0,  172,    0,  216,  255,    0,    0,
  119,    0,    0,    0,   83,    0,  250,    0,    0,    0,
  243,    0,  246,    0,    0,    0,    0,    0,  164,  165,
    0,    0,    0,  315,    0,   60,    0,   51,   52,   53,
   54,   55,   56,   58,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  266,    0,    0,    0,    0,    0,  173,
    0,  174,    0,    0,  220,    0,    0,  100,    0,    0,
    0,   96,  256,  257,  258,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  308,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  236,    0,    0,    0,    0,    0,    0,  204,
  254,    0,  195,    0,    0,    0,    0,   83,   93,    0,
    0,  248,  247,  242,    0,    0,  259,    0,    0,    0,
    0,  113,  208,    0,    0,   45,   48,   49,   47,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   75,  104,    0,    0,    0,  190,    0,    0,  309,
  307,    0,  118,    0,    0,    0,  203,  116,    0,    0,
  237,    0,    0,   99,    0,    0,    0,    0,    0,  168,
    0,    0,   83,   91,    0,    0,    0,    0,    0,    0,
   84,   81,   82,  244,    0,    0,    0,    0,    0,    0,
    0,   34,    0,    0,   37,    0,    0,    0,    0,    0,
  192,    0,  103,    0,    0,    0,   36,    0,    0,  189,
  233,  234,  235,    0,    0,  226,    0,  102,    0,    0,
  209,    0,    0,    0,  223,   97,    0,    0,   83,   92,
    0,   85,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   39,   78,    0,    0,    0,    0,  206,    0,
    0,  200,    0,    0,    0,    0,    0,  108,  101,  197,
    0,    0,    0,    0,   90,    0,    0,  311,  312,  313,
  314,  210,   35,    0,   38,    0,    0,  181,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,   88,    0,    0,   40,    0,    0,    0,    0,    0,
  211,  212,  227,  110,    0,  181,    0,    0,   89,    0,
   41,    0,    0,  182,  183,    0,    0,    0,  109,    0,
    0,  205,    0,  121,  184,    0,    0,    0,  191,   42,
  120,    0,    0,    0,  207,  193,
};
static int yydgoto[] = {                                      46,
   47,  169,   49,  115,   50,  319,   51,   52,   53,   54,
  511,  441,   55,   56,   57,   58,   59,  303,  361,   60,
   61,  304,   62,   63,   64,   65,   66,   67,   68,   69,
  320,  321,  322,  323,   70,   71,   72,  347,   73,   74,
   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
   85,   86,   87,   88,   89,  278,   90,  435,  436,  502,
   91,   92,  627,   93,  490,  544,  225,  201,   94,   95,
   96,   97,   98,  429,  578,  426,  499,  611,  586,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, -218,    0,    0,    0,
    0,   48,    0,    0,  618,    0,  -80,    0,  147,  152,
  170,  227, 4773, 4501, 4501, 4501, 4501, 4501, 4588, 4501,
 4486,    0,    0,    0,  -55,    0, 2851,   43,  295,  296,
 3886, 4501,  102,   11, 4501,    0,    0,  199,   21,    0,
    0,    0,    0,    0,    0,  618,   18,  246,    0,   -3,
    0,  311,  278,    0, 3804,  297,    0,    0,  -67,    0,
 7124,    0,    0,    0,    0,    0,  314,    0,   -6,    0,
    0,  110,    0,    0,   60,    0,    0,  -11,    0,    0,
  618,  133,  401,    0,    0,    0,    0,    0,    0,  618,
  618,  618, 2744,    0,  282,  324,  366,    0,  353,  618,
    0,    0,  370,  175,  325,    0,    0,    0, 3000,    0,
    0,    0,  133,  133,  133,  133,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  408,  367,  427, 6901, 4501,  200,    0,
    0,  224,  224,  224,    0,  224,  224,  449, 7179,  252,
  255,  280,  286,  -74,  275,  292,  305,    0,  299,    0,
 4501, 4501, 4501,    0,  247,    0,  442,    0,    0, 8180,
    5,  550, 3715, 3170,    0,    0,  618,    0,  618,  706,
   71, 4501,    0,    0,    0,    0,    0,  351,    0,    0,
  551,  552,  556,    0,    0,    0,  575,  133,  -35,    0,
    0,    0,    0,    0,  320, 4501, 4501, 4501, 4501, 4501,
 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501, 4501,
 4501, 4501,    0,    0, 4501, 4501, 4501, 4501, 4501, 4501,
 4501, 4501, 4501, 4501, 4501, 4501, 4501,  473, 4501, 4501,
    0,  501,    0,    0,    0,    0,  369,  -24,    0,    0,
    0,    0,    0,  366, 3256,   90,    0,  618,    0,  373,
    0,    0,    0,    0,    0,  133,    0,  399,  210,  618,
  601,    0,    0,  445,    0,  618,    0,    0,  412,  550,
    0,  631,  618,  101,    0, 1217,    0,  417,  423,   38,
    0,  630,    0, 2524,  625,  640,  644,  659,    0,    0,
  681,  686, 4501,    0,  660,    0,  470,    0,    0,    0,
    0,    0,    0,    0, 7214, 8180,  691, 7250, 2606, 7124,
  721, 4501, 4501,    0,  506, 2658,  724,    0,    0,    0,
  703,    0,  -15,  -15,    0,  -15, 4228,    0, 8180,  631,
  631,    0,    0,    0,    0,  509,    0, 3344,  515,    0,
    0,    0,    0,    0,    0,    0,    0,  638,  638,    0,
    0,  904,    0,    0,    0,    0,  224,    0,    0,    0,
  944,  944,  638,  638,  638,    0,  377,  377,  904,    0,
  599, 7311,  224,    0, 2692,  742,  526,    0, 2780, 2862,
  738,  196,    0,  631,  132,  759,  760,    0,  763,    0,
    0,    0,    0,  766,  773,  787,   67,    0,    0,  618,
  -39,    0,    0,    0, 3000, 4501,    0,  790,  808,  814,
  823,    0,    0,    0,  824,    0,    0,    0,    0,    0,
 3972, 4501, 4059,  518, 4501,    0, 8180,  813,  826,  506,
  -99,    0,    0, 7401,  773,  773,    0,    0,  738,    0,
    0, 2948,    0, 4501,  830, 3036,    0,    0,  124,   20,
    0,  773, 4315,    0,    0,  831, 2658,    0,  849,    0,
  833,  607,    0,    0,  136,  271,  829,    0,  753,  835,
    0,    0,    0,    0, 9807, 4501, 4501, 4501, 4501,  834,
    0,    0,  838,    0,    0,  858, 7531,  646,    0,  857,
    0,  650,    0,  133,  133,  666,    0, 7589, 4501,    0,
    0,    0,    0,  618,  124,    0,  -85,    0, 7624,  617,
    0,  884,  626,  886,    0,    0,  154,  866,    0,    0,
 4501,    0,    0, 7682, 7718, 7811, 7905,  670, 3118, 4501,
 3204, 4501,    0,    0,  896,  642,  646,  905,    0,  618,
  618,    0, 7993,  -15,  618,    0, 4414,    0,    0,    0,
    0,  890,  832,  895,    0,  208, 8180,    0,    0,    0,
    0,    0,    0,  923,    0, 8031,  927,    0,  928,    0,
  930,  131,  131,    0,  -15, 3292,  133, 8086,  655,   23,
    0,    0,  916, 4141,    0,    0,   -7,  937,  657,  942,
    0,    0,    0,    0,  133,    0,    0, 3374,    0,    0,
    0,  675,  718,    0,    0,    0,  890,  862,    0,   -7,
 3460,    0, 3548,    0,    0,  679,   51,    0,    0,    0,
    0,    0, 3630, 3716,    0,    0,
};
static int yyrindex[] = {                                     46,
 6431,    0,    0,    0,  478, 5722,  869,    0,    0,    0,
    0,    0,    0,    0,    0, 5763,    0,    0,    0,    0,
    0,    0, 3426,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5861,    0,    0,  565, 8125,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  989,  893,    0,    0,  565,    0,
    0,    0,  987,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3426, 2568,    0,    0,    0,    0,    0,  737,    0,
    0,    0,    0,   -4, 6254,    0, 6744,  565,    0,    0,
    0, 4839,  870,    0,    0, 4898, 4965, 5249,    0, 5308,
 5367, -104, 3426, 3426, 3426, 3426,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5821,   31,
  213,  815,  873,  915, 7088, 5378, 6043,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  941,    0, -104,    0,  530,    0,  616,  965,   14,
    0,  511, 3426,    0,    0,  478,    0,    0,    0,    0,
  386,    0,  639,    0,    0,  639,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -45, 3426,    0,    0,
    0,  946,    0,    0, 2568,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -104,    0,    0,    0,    0, -104,    0,
    0, -104,    0,  809,    0,    0,10491,    0, 3073,    0,
    0,    0,    0,    0,    0, 3426,   36,    0, 5651,  708,
  710,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -20,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1066,    0,    0,    0,
    0,    0,    0,    0,    0,  155,    0,    0,    0,    7,
    0,    0,    0,    0,  954,    0,    0, 7027, 5438,    0,
    0,    0,  651,  684,    0,  745,    0,    0,  337, 3980,
 3980,    0,    0,    0,    0,    0,  511,    0,    0, 1090,
 3905, 4146, 4246, 4321, 4396, 4398, 4570, 6213, 6246, 5058,
 5184, 6303, 6358, 6499, 6550, 6558, 6141, 6575, 6591, 6612,
   -9,  120, 6281, 6290, 6311, 6617, 6177, 6188, 6650,    0,
    0,    0, 6152, -104,    0,    0,    0, -104,    0,    0,
   92,    0,    0, 3856,  386,    0,    0,  511,    0,    0,
    0,  281,    0,    0,  744, 6338,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 6658,    0,    0,    0,    0,    0,    0,
    0,  941,    0,    0,    0, 6732,   69,    0,    0,  954,
    0,    0,    0,    0, 4111, 4111,    0,  -47,  159,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3512,    0,
    0, 6495,    0,    0,   -4,    0,    0,   -4,    0,    0,
 6523,    0,    0,    0,    0,    0,  422,   16,    0,    0,
    0,    0,    0,    0,  963,    0,    0,    0,    0,    0,
 -104,    0,    0, -104,    0,    0,    0,  969,   -4,    0,
    0,    0,    0, 3426, 3426,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3512,    0, 2832,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  971,
    0,    0,    0,    0,    0,    0,  969,    0,    0,    0,
    0,    0,    0,  301,    0, -104,    0,    0,    0,    0,
   -4,   53,    0,    0,    0,    0,  433,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   -4,
    0,  359,  359,    0,  308,    0, 2832,    0,    0,    0,
 -104,    0,    0,    0,    0,   -4,   96,    0,    0,    0,
    0,    0,    0,    0, 2832,    0, -104,    0,    0, -104,
    0,    0,    0,    0,    0,   -4,   53,    0,    0,  119,
    0,    0,    0,    0,    0,    0,    0, -104,    0,    0,
    0, -104,    0,    0,    0,    0,
};
static int yycindex[] = {                                   1157,
 4294,    0,    0,    0, 4775, 3600,    0, 3776, 3843, 3946,
    0,    0,    0,    0,    0, 4458,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4713,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4655,    0,    0,  -16,    0,    0, 5124,   27,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5662,    0,    0,    0, 5570,    0,
    0,    0,  687,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 5040,
    0,    0,  756,    0,    0,    0,    0,    0,  234,    0,
    0,    0,    0, 5676,  235,    0,  758, 6571,    0,    0,
    0,   61,    0,    0,    0,  239,  256,  268,    0,  269,
  279, 1244,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  957, 8218,
 8307, 6804, 9746, 9840,  981, 9889, 9930,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1326,    0, 8400,    0, 8494, 8529,    0,
    0,  769,    0,    0,    0, 7525,    0,    0,    0,    0,
    0,    0,  264,    0,    0,  265,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -184,    0,    0,    0,
    0,  313,    0,  774,  776,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1413,    0,    0,    0,    0, 1500,    0,
    0, 1582,    0,  283,    0,    0,  266,    0,  -17,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  291,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  777,    0,    0,    0,    0,
    0,    0,    0, 6734,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10509,    0,
    0,    0,    0,    0,    0,    0,    0,  750,  306,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  779,    0,    0, 8587,
 8622, 8681, 8716, 8809, 8903, 8991, 9029, 9965, 9998, 9084,
 9123,10024, 9178, 9216, 9304, 9398,10059, 9491, 9526, 9585,
10100,10141,10182,10217,10276, 9620,10311,10352,10393,    0,
    0,    0,10434, 1669,10531,    0,    0, 1756,10545,10613,
    0,    0,    0,    0,    0,    0,    0,  780,    0,    0,
    0, 6702,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9678,    0,    0,    0,    0,    0,    0,
10626,    0,10689,    0,    0, 9713,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  757,    0,    0,
    0,10703,    0,    0,    0,10725,    0,    0,    0,    0,
    0,    0,    0,    0,10277,    0,    0,11046,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  204,    0,    0,
    0,    0,    0,    0,  982,    0,    0,    0,    0,    0,
 1838,    0,    0, 1925,    0,    0,    0,    0,11059,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10783,    0,
10796,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2012,    0,    0,    0,    0,
11072,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,11130,
    0,    0,    0,    0,    0,10809,    0,    0,    0,    0,
 2094,    0,    0,10867,    0,11143,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2181,10885,    0, 2268,
    0,    0,    0,    0,    0,11156,    0,    0,    0,    0,
10903,    0,10961,    0,    0,    0,    0, 2350,    0,    0,
    0, 2437,10975,10988,    0,    0,
};
static int yygindex[] = {                                      0,
   25,    1,  -91, -497, -344,    0,   73,    0,    0,    0,
  535, -370,    0,   62,    2, -100,    0,  613,    0,    0,
    0,  276,    0,    0,    0,   45,  977,    0,    0,    0,
    0,  602,    0,    0, -380,  576,    0, -448,    0,    0,
    0,    0,    3,    0,  983,    0,    0,  986,    0,  988,
    0,    0,    0,    0,    0, -559,  990, -171, 1012,  -21,
   33,    0,  426,  135,    0,  519,    0,  795,    0,    0,
    0, -360,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 11475
static int yytable[] = {                                     287,
   48,  105,  106,  302,  508,  587,  112,  109,  116,  117,
  118,  469,   63,  523,   63,  120,  121,  217,  312,  417,
    2,  461, 1558,  464,  206,  458,  532,  318,  455,  108,
  575,  276,  620,  276,  276,  276,  166,  110,  113,  166,
  216,   48,  122,   30,  206,    2,  114,  283,  353,  276,
  260,  276,  275,  643,  260,  217,  211,  260,  209,   86,
  512,  213,  208,  545,  478,   48,  417,  505,  478,  229,
  180,  272,  591,   63,  272,  190,  214,   63,  212,  609,
  513,  445,  191,  276,  166,  510,  476,  657, 1545,  272,
  286,  105,  178,  228,  417,   63,  199, 1548,  418,  444,
  116,  117,  118,  120,  105,  301,  305,  119,  202,  261,
  105,  282,  261,  195,  285,  276,  274,  296,  280,  105,
  600,  604,   48,  272,  512,  504,  206,  512,  108,  354,
  206,  260,  557,   45,   30,  229,  168,  224,  260,   28,
   86,   31,  546,   27,  513,  637,   26,  513,  423,  206,
   63,   63,  552,  288,  124,  272,  245,  531,  440,  439,
  277,  367,  277,  277,  277,  300,  324,  277,  276,  310,
    2,    2,    2,  662,  245,  199,  512,  123,  277,  508,
  277,  203,  279,  339,  325,  326,  327,  328,  596,  503,
  206,  206,  197,  261,   48,   44,  513,  508,  475,  476,
   11,   12,  229,  235,  359,  340,  123,  363,  362,  364,
  366,  124,  277,   44,  229,  512,  253,  507,  124,  253,
  253,  253,  493,  438,   45,   32,  356,  168,  253,  125,
  108,   13,   14,   36,   63,  513,  217,  378,  349,  591,
  446,  123,  203,  368,  277,  370,  205,  276,  371,  309,
  431,  508,  492,  274,  491,  206,  274,  306,  379,  296,
  558,  276,  276,  268,  357,  253,  205,  360,    2,    3,
    4,  274,    6,  253,   48,  100,  101,  102,  594,   48,
  509,  229,   48,   15,   16,  422,  126,  272,  425,  377,
  449,  452,   18,   19,   20,   21,   22,  167,  609,  281,
  211,  272,  272,  644,  215,  274,  359,  645,   63,  252,
  276,  252,  252,  437,  269,  618,  116,   63,  415,  424,
    2,    2,    2,  419,   48,  207,  420,  627,  636,  560,
  206,  302,  623,  594,  192,  193,  220,  274,  645,  306,
   63,  206,  597,  306,  230,   42,   43,   44,  205,   48,
  272,  231,  205,  318,  218,  226, 1551,  428,  111,    2,
    3,    4,  306,    6,   63, 1585,  100,  101,  102,  219,
 1555,  205,  273,   63,   15,   16,  277,   98,  359,  468,
   98,   32,  307,   18,   19,   20,   21,   22,  167,   36,
  277,  277,  507,  559,  302,   98,  224,  302,  541,  542,
  543,  356,  185,  306,  306,  309,   13,   14,   24,   25,
  507,  311,  205,  205,   48,   48,  268,  185,   48,   48,
   48,  224,  270,  230,   13,   14,  185,  313,  302,  185,
  231,  314,  105,  301,  305, 1551,   42,   43,   44,  277,
  506,   32,   32,   32,  185,  105,  185,  315,  329,   36,
   36,   36,  497,  534,  535,  509,  108,  494,  482,  330,
 4631,   48,  486,   48,  507,   79,  331,  269,  306,  274,
  547,  204,  306,  509, 4634, 4637,   80,  205,   13,   14,
  205,  205,   48,  274,  274,  433,   48,  224,  432,  333,
  302,  224,  224,  300,  530,  105,  301,  305,  105,  301,
  305, 1564, 1567, 1570, 1573,   30,  543,  585,  335,  302,
   28,  603,   31,  410,   27,  543,  588,   26,  336,  108,
  606,   48,  108, 4640,   48,  302,  290,  509,  612,  105,
  301,  305,  274,  522,  352,  525,  337,  615,  341,  591,
  621,  630,  338,  306,  584,  302,   79,  591,  342,  624,
  633,  639,  205,  108,  224, 1548,  300,   80,  224,  300,
  642,  343,  344, 1548, 1548,  569,  580,  581,  571,   48,
  316,   48, 1548,  316, 1539, 1539, 1539,  351, 1579,  588,
  612,  613, 1542, 1542, 1542,  615,   48, 1582,  316,  355,
  300,  105,  301,  305,  252,   45,  252,  252,  168,  170,
  171,  172,  173,  174,  176,  177,  179,  372,  373,  374,
  105,  301,  305,  375,  104,  108,   48,  196,  198,  199,
  200,   48,  316,  414,   48,  416,  105,  301,  305,  427,
  616,  291,  292,  293,  108,  294,  295,   48,   48,  480,
   48,  224,  353,  224,  631,  632,  105,  301,  305,  634,
  108,   48,  300,   48,  316,  430,  317,  590,   48,  317,
  432,  212,   48,   48,   48,  638,  592,  649,  434,  432,
  108,  300,  208,  442,  317,  265,  185,  268,   79,  443,
  185,  651,  608,  270,  653,  432,  448,  300,  224,   80,
  446,  107,   79,   79,  107,  636,  641,  647,  432,  455,
  432,  449,  663,   80,   80,  450,  664,  300,  317,  107,
  224,  107,  291,  292,  293,  654,  294,  295,  432,  661,
  451,  452,  432,  224,  106,  224,  453,  106,  269,  111,
    2,    3,    4,  460,    6,  224,  224,  100,  101,  102,
  317,   79,  106,  176,  106,   15,   16,  365,  171,  462,
  170,  171,   80,  170,   18,   19,   20,   21,   22,  167,
  465,  266,  107,  470,  472,  477,  345,  346,  348,  350,
  550,  479,  252,  553,   63,  252,  252,  252,   63,   24,
   25,  484,  485,  252,  252,  105,  316,  369,  105,  252,
  252,  252,  252,  252,  252,  489,   63,  252,  495,  496,
  316,  316,  498,  105,  576,  105,  431,   42,   43,   44,
  501,  380,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,  391,  392,  393,  394,  395,  396,  365,  516,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  200,  412,  413,   63,  517,  526,  316,
   63,  267,  267,  518,  528,  267,  267,  267,  267,  267,
  267,  267,  519,  556,  520,  529,  619,   63,   63,  539,
  555,  551,  317,  267,  111,  267,  175,  175,  175,    6,
  175,  175,  100,  101,  102,  629,  317,  317,  554,  561,
   15,   16,  225,  563,  568,  185,  570,  572,  577,   18,
  185,  642,  574,  185,  185,  185,  579,  267,  454,  270,
  270,  185,  185,  270,  270,  270,  270,  270,  270,  270,
  185,  656,  531,  591,  595,  225,  593,  466,  467,  602,
  225,  270,  225,  270,  225,  317,  607,  225,  267,  267,
  263,  265,  474,  268,  610,  261,  259,  277,  260,  270,
  262,  271,  271,  622,  621,  271,  271,  271,  271,  271,
  271,  271,  111,  624,  267,  270,  626,    6,  628,  630,
  100,  101,  102,  271,  639,  271,  646,  655,   15,   16,
  263,  265,  648,  268,  658,  261,   15,   18,    1,  270,
  262,   77,   78,  255,  269,  252,  270,  270,  255,   43,
  221,  255,  255,  255,  198,  319,  249,  271,  319,   77,
  255,   43,  541,  514,  591,  225,  476,  225,  225,   15,
 1074,  515, 1576,  319,   15, 1536,   15,  266,   15, 4628,
 1536,   15,  541, 1561,  269, 1536, 1536,  346,  271,  271,
  527,   63,  562, 4643,  500,  230,  514,  255,  255,  255,
  255,  231,  255,  255,  232,  255,  233,  319,  234,  538,
  210,  650,  411,  585,    0,   46,    0,  266,  549,    0,
  253,  267,    0,  253,  253,  253,  185,  186,  187,  188,
  189,  190,  253,    0,    0,  267,  267,    0,    0,  319,
    0,  564,  565,  566,  567,    0,  350,    0,   46,  350,
    0,    0,    0,   46,    0,   46,    0,   46,    0,   15,
   46,   15,   15,   63,  583,    0,    0,    0,    0,  253,
  253,  253,  253,    0,  253,  253,    0,  253,    0,  270,
  287,    0,    0,  287,  267,    0,  597,    0,    0,    0,
    0,    0,    0,  270,  270,  346,    0,  606,  287,  225,
  225,  225,  225,  225,  225,  225,    0,  225,  225,  225,
  225,  225,  618,  225,  225,  225,  225,  225,  225,  225,
  225,  271,    0,    0,  225,  225,  225,  225,  225,  225,
    0,    0,  287,    0,    0,  271,  271,    0,   46,  112,
   46,   46,  270,    0,  105,    0,  115,    0,  102,  225,
  225,   99,    0,  225,  225,  225,  225,    0,  225,  225,
    0,  225,  225,    0,  287,  350,  225,    0,    0,  225,
    0,  319,  225,  225,  225,    0,    0,  225,  225,  225,
    0,    0,    0,    0,  271,  319,  319,    0,    0,    0,
    0,    0,    0,   15,   15,   15,   15,   15,   15,   15,
    0,   15,   15,   15,   15,   15,    0,   15,   15,   15,
   15,   15,   15,   15,   15,    0,    0,    0,   15,   15,
   15,   15,   15,   15,    0,    0,  112,    0,    0,  171,
    0,  105,  108,  115,  319,  102,    0,    0,   99,    0,
    0,    0,    0,   15,   15,    0,    0,   15,   15,   15,
   15,    0,   15,   15,    0,   15,   15,    0,    0,    0,
   15,    0,    0,    0,    0,    0,   15,   15,   15,    0,
    0,   15,   15,   15,    0,    0,   46,   46,   46,    0,
   46,   46,   46,   46,   46,    0,   46,   46,   46,   46,
   46,   46,   46,   46,    0,    0,  287,   46,   46,   46,
   46,   46,   46,    0,    0,    0,    0,    0,  112,    0,
  287,  287,    0,  105,    0,  115,  171,  102,    0,  108,
   99,    0,   46,   46,    0,    0,   46,   46,   46,   46,
    0,   46,   46,    0,   46,   46,    0,    0,    0,   46,
    0,    0,   46,    0,    0,   46,   46,   46,    0,    0,
   46,   46,   46,    0,    0,    0,    0,    0,    0,  287,
    0,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,   90,    0,  112,    0,    0,  171,    0,
  105,  108,  115,    0,  102,    0,    0,   99,    0,    0,
    0,    0,    0,   93,   96,    0,    0,  118,  123,  128,
  133,    0,  137,  137,    0,  142,  147,    0,    6,    0,
  150,  100,  101,  102,    0,    0,  153,  156,  159,   15,
   16,  162,  165,  168,    0,    0,    0,    0,   18,    0,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
    0,   69,    0,    0,    0,   72,   78,   81,   84,   87,
   90,    0,  112,    0,    0,  171,    0,  105,  108,  115,
    0,  102,    0,    0,   99,    0,    0,    0,    0,    0,
   93,   96,    0,    0,  118,  123,  128,  133,    0,  137,
  137,    0,  142,  147,    0,    0,    0,  150,    0,    0,
    0,    0,    0,  153,  156,  159,    0,    0,  162,  165,
  168,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,   90,    0,  112,    0,    0,    0,    0,  105,
    0,  115,  171,  102,    0,  108,   99,    0,    0,    0,
    0,    0,   93,   96,    0,    0,  118,  123,  128,  133,
    0,  137,  137,    0,  142,  147,    0,    0,    0,  150,
    0,    0,    0,    0,    0,  153,  156,  159,    0,    0,
  162,  165,  168,    0,    0,    0,    0,    0,    0,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,   90,
    0,  112,    0,    0,  171,    0,  105,  108,  115,    0,
  102,    0,    0,   99,    0,    0,    0,    0,    0,   93,
   96,    0,    0,  118,  123,  128,  133,    0,  137,  137,
    0,  142,  147,    0,    0,    0,  150,    0,    0,    0,
    0,    0,  153,  156,  159,    0,    0,  162,  165,  168,
    0,    0,    0,    0,    0,    0,    0,    6,    9,   12,
   15,   18,   24,    0,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,   90,    0,  112,    0,
    0,  171,    0,  105,  108,  115,    0,  102,    0,    0,
   99,    0,    0,    0,    0,    0,   93,   96,    0,    0,
  118,  123,  128,  133,    0,  137,  137,    0,  142,  147,
    0,    0,    0,  150,    0,    0,    0,    0,    0,  153,
  156,  159,    0,    0,  162,  165,  168,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,   90,    0,
  112,    0,    0,    0,    0,  105,    0,  115,  171,  102,
    0,  108,   99,    0,    0,    0,    0,    0,   93,   96,
    0,    0,  118,  123,  128,  133,    0,  137,  137,    0,
  142,  147,    0,    0,    0,  150,    0,    0,    0,    0,
    0,  153,  156,  159,    0,    0,  162,  165,  168,    0,
    0,    0,    0,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,   90,    0,  112,    0,    0,
  171,    0,  105,  108,  115,    0,  102,    0,    0,   99,
    0,    0,    0,    0,    0,   93,   96,    0,    0,  118,
  123,  128,  133,    0,  137,  137,    0,  142,  147,    0,
    0,    0,  150,    0,    0,    0,    0,    0,  153,  156,
  159,    0,    0,  162,  165,  168,    0,    0,    0,    0,
    0,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,   90,    0,  112,    0,    0,  171,    0,  105,
  108,  115,    0,  102,    0,    0,   99,    0,    0,    0,
    0,    0,   93,   96,    0,    0,  118,  123,  128,  133,
    0,  137,  137,    0,  142,  147,    0,    0,    0,  150,
    0,    0,    0,    0,    0,  153,  156,  159,    0,    0,
  162,  165,  168,    0,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    0,    0,   69,    0,    0,    0,   72,
   78,   81,   84,   87,   90,    0,  112,    0,    0,    0,
    0,  105,    0,  115,  171,  102,    0,  108,   99,    0,
    0,    0,    0,    0,   93,   96,    0,    0,  118,  123,
  128,  133,    0,  137,  137,    0,  142,  147,    0,    0,
    0,  150,    0,    0,    0,    0,    0,  153,  156,  159,
    0,    0,  162,  165,  168,    0,    0,    0,    0,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,   90,    0,  112,    0,    0,  171,    0,  105,  108,
  115,    0,  102,    0,    0,   99,    0,    0,    0,    0,
    0,   93,   96,    0,    0,  118,  123,  128,  133,    0,
  137,  137,    0,  142,  147,    0,    0,    0,  150,    0,
    0,    0,    0,    0,  153,  156,  159,    0,    0,  162,
  165,  168,    0,    0,    0,    0,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,   90,    0,
  112,    0,    0,  171,    0,  105,  108,  115,    0,  102,
    0,    0,   99,    0,    0,    0,    0,    0,   93,   96,
    0,    0,  118,  123,  128,  133,    0,  137,  137,    0,
  142,  147,    0,    0,    0,  150,    0,    0,    0,    0,
    0,  153,  156,  159,    0,    0,  162,  165,  168,    0,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
    0,   69,    0,    0,    0,   72,   78,   81,   84,   87,
   90,    0,  112,    0,    0,    0,    0,  105,    0,  115,
  171,  102,    0,  108,   99,    0,    0,    0,    0,    0,
   93,   96,    0,    0,  118,  123,  128,  133,    0,  137,
  137,    0,  142,  147,    0,    0,    0,  150,    0,    0,
    0,    0,    0,  153,  156,  159,    0,    0,  162,  165,
  168,    0,    0,    0,    0,    0,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,    0,    0,    0,   69,    0,
    0,    0,   72,   78,   81,   84,   87,   90,    0,  112,
    0,    0,  171,    0,  105,  108,  115,    0,  102,    0,
    0,   99,    0,    0,    0,    0,    0,   93,   96,    0,
    0,  118,  123,  128,  133,    0,  137,  137,    0,  142,
  147,    0,    0,    0,  150,    0,    0,    0,    0,    0,
  153,  156,  159,    0,    0,  162,  165,  168,    0,    0,
    0,    0,    0,    0,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    0,    0,   69,    0,    0,    0,   72,
   78,   81,   84,   87,   90,    0,   30,    0,    0,  171,
    0,   28,  108,   31,    0,   27,    0,    0,   26,    0,
    0,    0,    0,    0,   93,   96,    0,    0,  118,  123,
  128,  133,    0,  137,  137,    0,  142,  147,    0,    0,
    0,  150,    0,    0,    0,    0,    0,  153,  156,  159,
    0,    0,  162,  165,  168,    0,    0,    6,    9,   12,
   15,   18,   24,    0,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,   90,    0,   30,    0,
    0,    0,    0,   28,    0,   31,   45,   27,  447,    0,
   26,    0,    0,    0,    0,    0,   93,   96,    0,    0,
  118,  123,  128,  133,    0,  137,  137,    0,  142,  147,
    0,    0,    0,  150,    0,    0,    0,    0,    0,  153,
  156,  159,    0,    0,  162,  165,  168,    0,    0,    0,
    0,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,   90,   30,    0,    0,    0,   45,   28,
  464,   31,    0,   27,    0,    0,   26,    0,    0,    0,
    0,    0,    0,   93,   96,    0,    0,  118,  123,  128,
  133,    0,  137,  137,    0,  142,  147,    0,    0,    0,
  150,    0,    0,    0,    0,    0,  153,  156,  159,    0,
    0,  162,  165,  168,    0,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  221,  222,
  223,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,   45,    0,  483,   28,    0,   31,
    0,   27,    0,    0,   26,    0,    0,    0,    0,  252,
   24,   25,  252,  252,  252,    0,    0,    0,    0,    0,
  252,  252,    0,   37,    0,    0,    0,   38,    0,  252,
    0,    0,    0,   39,   40,   41,    0,    0,   42,   43,
   44,    0,    0,    2,    3,    4,    5,    0,    7,  298,
    0,  185,  185,   11,   12,  185,   13,   14,  252,    0,
  221,  222,  223,   17,    0,    0,  252,    0,   19,   20,
   21,   22,   23,  185,   30,    0,    0,    0,    0,   28,
    0,   31,   45,   27,  487,    0,   26,    0,    0,    0,
    0,    0,   24,   25,  111,    0,    0,    0,    0,    6,
    0,    0,  100,  101,  102,   37,    0,    0,    0,   38,
   15,   16,    0,    0,    0,   39,   40,   41,    0,   18,
   42,   43,   44,    0,  167,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,    0,   13,   14,    0,    0,  221,  222,  223,   17,
    0,    0,    0,    0,   19,   20,   21,   22,   23,    0,
   30,    0,    0,    0,   45,   28,  488,   31,    0,   27,
    0,    0,   26,    0,    0,    0,    0,    0,   24,   25,
  297,    0,    0,    0,    0,    6,    0,    0,  100,  101,
  102,   37,    0,    0,    0,   38,   15,   16,    0,    0,
    0,   39,   40,   41,    0,   18,   42,   43,   44,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  221,  222,  223,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   23,    0,   30,    0,
   45,    0,  537,   28,    0,   31,    0,   27,    0,    0,
   26,    0,    0,    0,    0,    0,   24,   25,  185,    0,
    0,    0,    0,  185,    0,    0,  185,  185,  185,   37,
    0,    0,    0,   38,  185,  185,    0,    0,    0,   39,
   40,   41,    0,  185,   42,   43,   44,    0,  185,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,  181,   13,   14,    0,    0,  221,  222,  223,   17,
    0,    0,    0,    0,   19,   20,   21,   22,   23,    0,
   30,    0,    0,    0,    0,   28,    0,   31,   45,   27,
  540,    0,   26,    0,    0,    0,    0,    0,   24,   25,
    0,  182,  183,  184,  185,  186,  187,  188,  189,  190,
    0,   37,    0,    0,    0,   38,    0,    0,    0,    0,
    0,   39,   40,   41,    0,    0,   42,   43,   44,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,  221,  222,  223,   17,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,    0,    0,
   45,   28,  603,   31,    0,   27,    0,    0,   26,    0,
    0,    0,    0,    0,   24,   25,  111,    0,    0,    0,
    0,    6,    0,    0,  316,  101,  102,   37,    0,  317,
    0,   38,   15,   16,    0,    0,    0,   39,   40,   41,
    0,   18,   42,   43,   44,    0,    0,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
  221,  222,  223,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   23,    0,   30,    0,   45,    0,  605,   28,
    0,   31,    0,   27,  253,    0,   26,  253,  253,  253,
    0,    0,   24,   25,    0,  253,  253,    0,    0,    0,
    0,    0,    0,    0,  253,   37,    0,    0,    0,   38,
    0,    0,    0,    0,    0,   39,   40,   41,    0,    0,
   42,   43,   44,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,  253,    0,   11,   12,    0,   13,   14,
    0,  253,  221,  222,  223,   17,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,    0,    0,
    0,   28,    0,   31,   45,   27,  633,    0,   26,    0,
    0,    0,    0,    0,   24,   25,  358,    0,    0,    0,
    0,    6,    0,    0,  100,  101,  102,   37,    0,    0,
    0,   38,   15,   16,    0,    0,    0,   39,   40,   41,
    0,   18,   42,   43,   44,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  221,  222,
  223,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,    0,    0,   45,   28,  652,   31,
    0,   27,    0,    0,   26,    0,    0,    0,    0,    0,
   24,   25,  421,    0,    0,    0,    0,    6,    0,    0,
  100,  101,  102,   37,    0,    0,    0,   38,   15,   16,
    0,    0,    0,   39,   40,   41,    0,   18,   42,   43,
   44,    0,    0,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,    0,   13,   14,    0,    0,  221,  222,  223,   17,
    0,    0,    0,    0,   19,   20,   21,   22,   23,    0,
   30,    0,   45,    0,  659,   28,    0,   31,    0,   27,
    0,    0,   26,    0,    0,    0,    0,    0,   24,   25,
  478,    0,    0,    0,    0,    6,    0,    0,  100,  101,
  102,   37,    0,    0,    0,   38,   15,   16,    0,    0,
    0,   39,   40,   41,    0,   18,   42,   43,   44,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  221,  222,
  223,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,    0,    0,    0,   28,    0,   31,
   45,   27,  660,    0,   26,    0,    0,    0,    0,    0,
   24,   25,  185,    0,    0,    0,    0,  185,    0,    0,
  185,  185,  185,   37,    0,    0,    0,   38,  185,  185,
    0,    0,    0,   39,   40,   41,    0,  185,   42,   43,
   44,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  221,  222,  223,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   23,    0,   30,    0,
    0,    0,   45,   28,  665,   31,    0,   27,    0,    0,
   26,    0,    0,    0,    0,    0,   24,   25,  232,    0,
    0,    0,    0,  232,    0,    0,  232,  232,  232,   37,
    0,    0,    0,   38,  232,  232,    0,    0,    0,   39,
   40,   41,    0,  232,   42,   43,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,  221,  222,  223,   17,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,   45,    0,
  666,   28,    0,   31,    0,   27,    0,    0,   26,    0,
    0,    0,    0,    0,   24,   25,  236,    0,    0,    0,
    0,  239,    0,    0,  242,  245,  248,   37,    0,    0,
    0,   38,  251,  254,    0,    0,    0,   39,   40,   41,
    0,  257,   42,   43,   44,    0,    0,    2,    3,    4,
    5,    0,    7,  217,    0,  217,  217,   11,   12,  217,
   13,   14,    0,    0,  221,  222,  223,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   23,  217,   30,    0,
    0,    0,    0,   28,    0,   31,   45,   27,    0,    0,
   26,    0,    0,    0,    0,    0,   24,   25,    0,    0,
    0,    0,    0,    0,    0,  288,  217,    0,  288,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,   39,
   40,   41,    0,  288,   42,   43,   44,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
  221,  222,  223,   17,    0,    0,    0,  288,   19,   20,
   21,   22,   23,    0,   30,    0,    0,    0,  194,   28,
    0,   31,    0,   27,    0,    0,   26,  217,    0,    0,
    0,    0,   24,   25,    0,   32,  291,  292,  293,  288,
  294,  295,  260,   36,    0,   37,    0,  263,    0,   38,
  266,  269,  272,    0,    0,   39,   40,   41,  275,  278,
   42,   43,   44,    0,    0,    0,    0,  281,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  221,  222,
  223,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,   30,    0,    0,  521,    0,   28,    0,   31,  284,
   27,    0,    0,   26,  287,    0,    0,  290,  293,  296,
   24,   25,  217,    0,    0,  299,  302,  217,    0,    0,
  217,  217,  217,   37,  305,    0,    0,   38,  217,  217,
    0,    0,    0,   39,   40,   41,    0,  217,   42,   43,
   44,    0,  217,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
    0,  288,    0,   17,    0,    0,  217,    0,   19,   20,
   21,   22,   23,   30,  217,  288,  288,    0,   28,    0,
   31,  524,   27,    0,    0,   26,  289,    0,    0,  289,
    0,    0,   24,   25,    0,    0,    0,    0,    0,    0,
    0,    0,  308,    0,  289,   37,    0,  311,    0,   38,
  314,  317,  320,    0,    0,   39,   40,   41,  323,  326,
   42,   43,   44,    0,  288,    0,    0,  329,    0,    2,
    3,    4,    5,    0,    7,    0,  217,    0,  289,   11,
   12,  217,   13,   14,  217,  217,  217,    0,    0,   17,
    0,    0,  217,  217,   19,   20,   21,   22,   23,    0,
   30,  217,    0,  640,    0,   28,    0,   31,    0,   27,
  289,    0,   26,    0,    0,    0,    0,    0,   24,   25,
    0,    0,    0,    0,    0,    0,  290,    0,    0,  290,
  217,   37,    0,    0,    0,   38,    0,    0,  217,    0,
    0,   39,   40,   41,  290,    0,   42,   43,   44,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    5,
  473,    7,    0,    0,    0,    0,   11,   12,    0,   13,
   14,    0,    0,  208,    0,    0,   17,    0,  290,    0,
    0,   19,   20,   21,   22,   23,    0,   30,    0,    0,
   45,    0,   28,  168,   31,    0,   27,    0,    0,   26,
    0,  291,    0,    0,  291,   24,   25,  221,    0,    0,
  290,    0,  221,    0,    0,  221,  221,  221,   37,  291,
    0,    0,   38,  221,  221,    0,    0,    0,   39,   40,
   41,    0,  221,   42,   43,   44,    0,    0,    2,    3,
    4,    5,  289,    7,    0,    0,    0,  548,   11,   12,
    0,   13,   14,  291,    0,    0,  289,  289,   17,    0,
    0,  221,    0,   19,   20,   21,   22,   23,    0,  221,
    0,    0,    0,    0,    0,    0,  292,   45,  293,  292,
  168,  293,    0,    0,    0,  291,   30,   24,   25,    0,
    0,   28,    0,   31,  292,   27,  293,    0,   26,    0,
   37,    0,    0,    0,   38,  289,    0,    0,    0,    0,
   39,   40,   41,    0,    0,   42,   43,   44,    0,    0,
    0,    0,    0,    0,  111,    2,    3,    4,  292,    6,
  293,    0,  100,  101,  102,    0,    0,    0,    0,    0,
   15,   16,  290,    0,    0,    0,  617,    0,    0,   18,
   19,   20,   21,   22,  167,    0,  290,  290,   30,    0,
  292,    0,  293,   28,    0,   31,    0,   27,    0,    0,
   26,    0,    0,   30,   24,   25,   45,    0,   28,  168,
   31,    0,   27,    0,    0,   26,    0,    0,    0,    0,
  174,    0,    0,    0,    0,  178,    0,    0,  182,  186,
  190,    0,   42,   43,   44,  290,  194,  199,    0,    0,
    0,  111,    2,    3,    4,  203,    6,  291,    0,  100,
  101,  102,    0,    0,    0,    0,    0,   15,   16,    0,
    0,  291,  291,    0,    0,    0,   18,   19,   20,   21,
   22,  167,    0,    0,  211,  214,  217,    0,   45,    0,
  294,  168,  220,  294,    0,    0,    0,    0,    0,    0,
   30,   24,   25,   45,    0,   28,  168,   31,  294,   27,
    0,    0,   26,    0,    0,    0,    0,    0,    0,    0,
  291,    0,    0,    0,    0,    0,    0,    0,    0,   42,
   43,   44,  292,    0,  293,    0,    0,    0,    0,    0,
    0,    0,  294,    0,    0,    0,  292,  292,  293,  293,
  111,    2,    3,    4,    0,    6,    0,    0,  100,  101,
  102,    0,    0,    0,    0,    0,   15,   16,    0,    0,
    0,    0,    0,    0,  294,   18,   19,   20,   21,   22,
  167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   45,    0,    0,  168,  332,  292,    0,  293,    0,  335,
   24,   25,  338,  341,  344,    0,    0,    0,    0,    0,
  347,  350,    0,    0,    0,    0,    0,    0,    0,  353,
    0,    0,    0,    2,    3,    4,    0,    0,   42,   43,
   44,    0,    0,    0,    0,    0,    0,  111,    2,    3,
    4,    0,    6,    0,    0,  100,  101,  102,   19,   20,
   21,   22,  167,   15,   16,    0,    0,    0,    0,    0,
  420,    0,   18,   19,   20,   21,   22,  167,    0,    0,
    0,    0,   24,   25,    0,    0,   32,    0,    0,    0,
    0,    0,    0,    0,   36,  161,    0,   24,   25,  156,
  158,    0,  164,    0,  154,  152,  163,  153,    0,  155,
   42,   43,   44,    0,    0,    0,  294,    0,    0,    0,
    0,    0,  150,  162,  151,   42,   43,   44,    0,    0,
  294,  294,    0,    0,  175,    2,    3,    4,    0,    6,
    0,    0,  100,  101,  102,    0,    0,    0,    0,    0,
   15,   16,    0,  165,    0,    0,  157,    0,    0,   18,
   19,   20,   21,   22,  167,   67,   67,    0,   67,   67,
   67,   67,   67,   67,   67,   67,    0,    0,    0,  294,
    0,    0,    0,    0,   24,   25,  159,   67,  160,   67,
   67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  380,    0,    0,    0,    0,  385,    0,    0,  390,
  395,  400,   42,   43,   44,    0,    0,  405,  410,   67,
    0,   67,   67,    0,   70,   70,  415,   70,   70,   70,
   70,   70,   70,   70,   70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   70,    0,   70,   70,
    0,   67,   67,   67,    0,  423,  427,  431,  435,  356,
  438,  438,    0,  442,  359,    0,    0,  362,  365,  368,
    0,    0,    0,    0,    0,  371,  374,    0,   70,    0,
   70,   70,    0,    0,  377,    0,    0,    0,    0,    0,
    0,   71,   71,    0,   71,   71,   71,   71,   71,   71,
   71,   71,    0,    0,    0,    0,    0,    0,    0,    0,
   70,   70,   70,   71,    0,   71,   71,    0,    0,    0,
    0,  223,    0,    0,    0,    0,  226,    0,    0,  226,
  226,  226,    0,    0,    0,    0,    0,  226,  226,    0,
    0,    0,    0,    0,    0,   71,  226,   71,   71,    0,
  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  147,  148,  149,   32,    0,  230,    0,   71,   71,   71,
    0,   36,    0,  233,    0,   67,    0,    0,  297,    0,
   67,  297,    0,   67,   67,   67,    0,    0,    0,   67,
   67,    0,   67,    0,    0,    0,  297,    0,    0,    0,
    0,    0,    0,    0,    0,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,    0,   67,   67,   67,   67,   67,
  297,    0,    0,    0,   70,    0,    0,   67,   67,   70,
    0,    0,   70,   70,   70,    0,    0,    0,   70,   70,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  297,    0,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,    0,   70,   70,   70,   70,   70,    0,
    0,    0,    0,    0,    0,    0,   70,   70,    0,    0,
    0,   71,    0,    0,  298,    0,   71,  298,    0,   71,
   71,   71,    0,    0,    0,   71,   71,    0,   71,    0,
    0,    0,  298,    0,    0,    0,    0,    0,    0,    0,
    0,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
    0,   71,   71,   71,   71,   71,  298,    0,    0,    0,
    0,    0,    0,   71,   71,   72,   72,    0,   72,   72,
   72,   72,   72,   72,   72,   72,  517,    0,    0,    0,
    0,  520,    0,    0,  523,  526,  529,   72,  298,   72,
   72,    0,  532,  535,  297,    0,    0,    0,    0,    0,
    0,  538,    0,    0,    0,    0,    0,    0,  297,  297,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
    0,   72,   72,    0,   64,   64,    0,   64,   64,   64,
   64,   64,   64,   64,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   64,    0,   64,   64,
    0,   72,   72,   72,    0,    0,    0,  297,    0,    0,
  466,    0,    0,    0,    0,  466,    0,    0,  466,  466,
  466,    0,    0,    0,    0,    0,  466,  466,   64,    0,
   64,   64,    0,   69,   69,  466,   69,   69,   69,   69,
   69,   69,   69,   69,  268,  268,    0,    0,  268,  268,
  268,  268,  268,  268,  268,   69,    0,   69,   69,    0,
   64,   64,   64,    0,  470,    0,  268,    0,  268,    0,
  298,    0,  473,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  298,  298,    0,   69,    0,   69,
   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  268,    0,    0,    0,   65,   65,    0,   65,   65,   65,
   65,   65,   65,   65,   65,    0,    0,    0,    0,   69,
   69,   69,    0,    0,    0,    0,   65,    0,   65,   65,
    0,  268,  268,  298,    0,   72,    0,    0,    0,    0,
   72,    0,    0,   72,   72,   72,    0,    0,    0,   72,
   72,    0,   72,    0,    0,    0,    0,    0,   65,    0,
   65,   65,    0,    0,    0,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,    0,   72,   72,   72,   72,   72,
   65,   65,   65,    0,   64,    0,    0,   72,   72,   64,
    0,    0,   64,   64,   64,    0,    0,    0,   64,   64,
    0,   64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,    0,   64,   64,   64,   64,   64,    0,
    0,    0,    0,   69,    0,    0,   64,   64,   69,    0,
    0,   69,   69,   69,  268,    0,    0,   69,   69,    0,
   69,    0,    0,    0,    0,    0,    0,    0,  268,  268,
    0,    0,    0,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,    0,   69,   69,   69,   69,   69,    0,    0,
    0,    0,    0,    0,    0,   69,   69,    0,   63,    0,
    0,    0,   63,    0,   65,    0,    0,  268,    0,   65,
    0,    0,   65,   65,   65,    0,    0,    0,   65,   65,
   63,   65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,    0,   65,   65,   65,   65,   65,    0,
    0,    0,    0,    0,    0,    0,   65,   65,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,   66,   66,   66,    0,    0,    0,  420,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   68,
   68,    0,   68,   68,   68,   68,   68,   68,   68,   68,
    0,    0,   66,    0,   66,   66,    0,    0,    0,    0,
    0,   68,   68,   68,   68,    0,  482,    0,    0,    0,
    0,  486,    0,    0,  490,  494,  498,    0,    0,    0,
    0,    0,  502,  506,   66,   66,   66,    0,    0,    0,
    0,  510,    0,   68,    0,   68,   68,  126,  126,    0,
  126,  126,  126,  126,  126,  126,  126,  126,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
  438,  126,  126,    0,    0,   68,   68,   68,  438,    0,
    0,    0,    0,    0,    0,    0,    0,  320,    0,    0,
    0,  320,    0,  320,  320,    0,  320,  320,    0,    0,
    0,  126,  253,  126,  126,  253,  253,  253,  380,  320,
  320,  320,  320,  385,  253,    0,  390,  395,  400,    0,
    0,    0,  547,    0,  405,  410,    0,  551,    0,    0,
  555,  559,  563,  415,  126,  126,    0,    0,  567,  571,
    0,  320,    0,  320,  320,   63,    0,  575,    0,    0,
    0,  253,  253,  253,  253,    0,  253,  253,    0,  253,
    0,    0,  423,  427,  431,  435,    0,  438,  438,    0,
  442,    0,    0,    0,  320,  320,  230,  579,  582,    0,
    0,    0,   66,   66,  233,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,    0,   66,   66,
   66,   66,   66,   68,   68,    0,    0,    0,    0,    0,
   66,   66,    0,    0,    0,    0,    0,    0,    0,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,    0,   68,
   68,   68,   68,   68,    0,    0,    0,  126,    0,  269,
  269,   68,   68,  269,  269,  269,  269,  269,  269,  269,
    0,  126,  126,    0,    0,    0,    0,    0,    0,    0,
    0,  269,    0,  269,    0,    0,    0,    0,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,    0,    0,  126,  126,  126,
  126,  320,  320,    0,    0,  269,    0,    0,    0,    0,
  126,    0,    0,    0,    0,    0,    0,    0,  320,  320,
  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
  320,  320,  320,  320,  320,    0,  269,  269,    0,  320,
  320,    0,    0,    0,    0,    0,    0,  305,  305,    0,
  320,  305,  305,  305,  305,  305,  305,  305,  304,  304,
    0,    0,  304,  304,  304,  304,  304,  304,  304,  305,
    0,  305,    0,    0,    0,    0,    0,    0,    0,    0,
  304,    0,  304,  281,  281,    0,    0,  281,  281,  281,
  281,  281,    0,  281,  282,  282,    0,    0,  282,  282,
  282,  282,  282,  305,  282,  281,    0,  281,    0,    0,
    0,    0,    0,    0,  304,    0,  282,    0,  282,  295,
    0,    0,    0,  295,  295,  295,  295,  295,    0,  295,
    0,    0,    0,    0,  305,  305,    0,    0,    0,  281,
    0,  295,    0,  295,    0,  304,  304,    0,    0,    0,
  282,    0,  296,    0,    0,    0,  296,  296,  296,  296,
  296,   76,  296,   76,   76,   76,    0,   76,    0,  269,
  281,  281,    0,    0,  296,  295,  296,    0,    0,    0,
    0,  282,  282,  269,  269,   76,    0,  278,    0,    0,
    0,  278,  278,  278,  278,  278,  279,  278,    0,    0,
  279,  279,  279,  279,  279,    0,  279,  295,  296,  278,
    0,  278,    0,  299,   76,    0,  299,  280,  279,    0,
  279,  280,  280,  280,  280,  280,    0,  280,    0,    0,
    0,  299,  269,    0,    0,    0,    0,    0,    0,  280,
  296,  280,    0,  278,    0,  218,    0,  218,  218,    0,
    0,  218,  279,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  299,    0,  305,  300,  218,
    0,  300,    0,  280,    0,  278,    0,    0,  304,    0,
    0,  305,  305,    0,  279,    0,  300,    0,    0,    0,
    0,    0,  304,  304,    0,    0,    0,  299,  218,    0,
    0,    0,    0,  281,    0,  280,    0,    0,    0,    0,
    0,    0,    0,    0,  282,    0,    0,  281,  281,    0,
  300,    0,    0,    0,    0,    0,    0,    0,  282,  282,
  305,    0,    0,    0,    0,    0,    0,   63,   63,  295,
    0,  304,   63,   63,   63,   63,   63,   63,    0,    0,
    0,    0,  300,  295,  295,    0,    0,    0,    0,   63,
   63,   63,   63,    0,    0,    0,  281,    0,    0,    0,
    0,    0,  296,    0,    0,    0,    0,  282,    0,    0,
   76,    0,    0,    0,    0,   76,  296,  296,   76,   76,
   76,   63,    0,    0,   63,    0,    0,   76,    0,    0,
    0,    0,  295,    0,  221,  221,    0,  278,  221,  301,
   76,    0,  301,    0,    0,    0,  279,    0,    0,    0,
    0,  278,  278,    0,   63,   63,  221,  301,   76,  299,
  279,  279,  222,  222,   76,  296,  222,  280,    0,    0,
    0,    0,   76,  299,  299,    0,    0,    0,    0,    0,
    0,  280,  280,    0,  222,  221,    0,    0,    0,    0,
  302,  301,    0,  302,  218,    0,    0,    0,  303,  218,
  278,  303,  218,  218,  218,    0,    0,    0,  302,  279,
  218,  218,    0,  222,  300,  306,  303,    0,  306,  218,
    0,    0,  299,  301,  218,    0,    0,    0,  300,  300,
  280,  285,    0,  306,  285,    0,    0,    0,    0,    0,
    0,    0,  302,    0,    0,    0,    0,    0,  218,  285,
  303,    0,  286,    0,    0,  286,  218,  283,    0,    0,
  283,    0,    0,    0,    0,    0,    0,  306,    0,    0,
  286,    0,    0,    0,  302,  283,    0,  300,    0,    0,
    0,    0,  303,  285,    0,    0,    0,    0,    0,    0,
  284,    0,    0,  284,    0,    0,    0,    0,  310,  306,
    0,  310,    0,    0,  286,    0,    0,    0,  284,  283,
    0,    0,    0,    0,    0,  285,  310,    0,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,  286,   63,   63,   63,
   63,  283,  284,    0,  253,    0,  253,  253,    0,    0,
  310,  221,    0,    0,    0,  301,  221,    0,    0,  221,
  221,  221,    0,    0,    0,    0,    0,  221,  221,  301,
  301,    0,  318,    0,  284,  318,  221,    0,    0,  222,
    0,  221,  310,    0,  222,  253,    0,  222,  222,  222,
  318,    0,    0,    0,    0,  222,  222,    0,    0,    0,
    0,    0,    0,    0,  222,  221,  302,    0,    0,  222,
    0,    0,    0,  221,  303,    0,    0,    0,  301,    0,
  302,  302,    0,    0,  318,    0,    0,  466,  303,  303,
    0,  306,  466,  222,    0,  466,  466,  466,    0,    0,
    0,  222,    0,  466,  466,  306,  306,  285,    0,    0,
    0,    0,  466,    0,    0,    0,  318,    0,    0,  420,
    0,  285,  285,  921,    0,  924,    0,    0,  286,  302,
    0,    0,    0,  283,    0,    0,    0,  303,    0,    0,
    0,  470,  286,  286,    0,    0,    0,  283,  283,  473,
    0,    0,    0,    0,  306,    0,    0,  927,    0,    0,
    0,    0,    0,    0,    0,    0,  284,    0,    0,    0,
  285,    0,    0,    0,  310,    0,    0,    0,    0,    0,
  284,  284,    0,    0,    0,    0,    0,    0,  310,  310,
    0,  286,    0,  161,    0,    0,  283,  156,  158,    0,
  164,    0,  154,  152,  163,  153,    0,  155,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4414,    0,
  150,  162,  151,  551,    0,    0,  555,  559,  563,  284,
    0,    0,    0,    0,  567,  571,    0,  310,    0,    0,
    0,    0,    0,  575,    0,    0,    0,    0,  318,    0,
  380,  165,    0,    0,  157,  385,    0,    0,  390,  395,
  400,    0,  318,  318,    0,  253,  405,  410,  253,  253,
  253,    0,  230,  579,  582,  415,  253,  253,    0,    0,
  233,    0,    0,    0,  159,  253,  160,    0,    0,    0,
  253,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  423,  427,  431,  435,    0,  438,
  438,  318,  442,    0,  253,  253,  253,  253,    0,  253,
  253,    0,  253,   63,   63,    0,   63,    0,   63,   63,
   63,   63,   63,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,   63,   63,   63,    0,
    0,  858,  861,  864,  867,  870,  873,  876,  879,  882,
  885,  888,  891,  894,  897,  900,  903,  906,    0,    0,
  909,  912,  915,  918,    0,    0,    0,   63,    0,    0,
   63,    0,    0,    0,   63,   63,    0,    0,    0,   63,
   63,   63,   63,   63,   63,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   63,   63,   63,   63,
   63,   63,    0,    0,    0,    0,    0,    0,    0,    0,
  263,  265,    0,  268,    0,  261,  259,    0,  260,  270,
  262,    0,    0,    0,    0,    0,    0,    0,   63,    0,
    0,   63,  271,  257,  267,  258,    0,    0,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
  149,   63,   63,    0,  269,  263,  265,  264,  268,  334,
  261,  259,    0,  260,  270,  262,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  257,  267,
  258,    0,    0,    0,    0,    0,    0,  266,    0,    0,
  263,  265,    0,  268,  461,  261,  259,    0,  260,  270,
  262,    0,    0,    0,    0,    0,    0,    0,    0,  269,
    0,    0,  264,  257,  267,  258,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  263,  265,    0,  268,
  463,  261,  259,    0,  260,  270,  262,    0,    0,    0,
    0,    0,  266,    0,  269,    0,    0,  264,   63,  257,
  267,  258,    0,    0,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,    0,   63,   63,   63,   63,  266,    0,    0,
  269,    0,    0,  264,    0,    0,    0,  263,  265,    0,
  268,    0,  261,  259,    0,  260,  270,  262,    0,    0,
   63,    0,    0,    0,    0,    0,    0,    0,    0,   63,
  257,  267,  258,  266,    0,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,    0,    0,   63,   63,   63,   63,    0,    0,
    0,  269,    0,  481,  264,    0,    0,    0,    0,    0,
    0,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,  251,  252,    0,    0,
  253,  254,  255,  256,  266,    0,    0,  263,  265,    0,
  268,    0,  261,  259,    0,  260,  270,  262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  257,  267,  258,    0,    0,    0,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,  251,  252,    0,    0,  253,  254,  255,  256,    0,
    0,  269,    0,  533,  264,    0,    0,    0,    0,    0,
    0,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,  251,  252,    0,    0,
  253,  254,  255,  256,  266,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
  249,  250,  251,  252,    0,    0,  253,  254,  255,  256,
    0,    0,    0,    0,    0,    0,    0,  263,  265,    0,
  268,  573,  261,  259,    0,  260,  270,  262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  257,  267,  258,    0,    0,    0,    0,    0,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,    0,    0,  253,  254,  255,
  256,  269,    0,    0,  264,  263,  265,    0,  268,  582,
  261,  259,    0,  260,  270,  262,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  257,  267,
  258,    0,    0,    0,  266,    0,    0,    0,    0,    0,
  263,  265,    0,  268,    0,  261,  259,    0,  260,  270,
  262,    0,    0,    0,    0,    0,    0,    0,    0,  269,
    0,    0,  264,  257,  267,  258,    0,    0,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,    0,    0,  253,  254,  255,
  256,    0,  266,    0,  269,    0,  589,  264,  263,  265,
    0,  268,  598,  261,  259,    0,  260,  270,  262,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  257,  267,  258,    0,    0,    0,  266,    0,    0,
    0,    0,    0,    0,  263,  265,    0,  268,  599,  261,
  259,    0,  260,  270,  262,    0,    0,    0,    0,    0,
    0,    0,  269,    0,    0,  264,    0,  257,  267,  258,
    0,  223,    0,    0,    0,    0,  226,    0,    0,  226,
  226,  226,    0,    0,    0,    0,    0,  226,  226,    0,
    0,    0,    0,    0,    0,  266,  226,    0,  269,    0,
    0,  264,    0,    0,    0,    0,    0,    0,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,  230,    0,  253,  254,  255,
  256,  266,    0,  233,    0,    0,    0,  263,  265,    0,
  268,  600,  261,  259,    0,  260,  270,  262,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  257,  267,  258,    0,    0,    0,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,  251,  252,    0,    0,  253,  254,  255,  256,    0,
    0,  269,    0,    0,  264,    0,    0,    0,    0,    0,
    0,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,  251,  252,    0,    0,
  253,  254,  255,  256,  266,    0,    0,    0,    0,    0,
    0,  263,  265,    0,  268,  601,  261,  259,    0,  260,
  270,  262,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  257,  267,  258,    0,    0,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  247,  248,  249,  250,  251,  252,    0,    0,  253,  254,
  255,  256,    0,    0,    0,  269,    0,    0,  264,    0,
    0,    0,    0,    0,    0,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
  251,  252,    0,    0,  253,  254,  255,  256,  266,  263,
  265,    0,  268,  614,  261,  259,    0,  260,  270,  262,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  257,  267,  258,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  263,  265,    0,
  268,  625,  261,  259,    0,  260,  270,  262,    0,    0,
    0,    0,    0,  269,    0,    0,  264,    0,    0,    0,
  257,  267,  258,    0,    0,    0,    0,    0,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,    0,  266,  253,  254,  255,
  256,  269,  263,  265,  264,  268,    0,  261,  259,    0,
  260,  270,  262,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  257,  267,  258,    0,    0,
    0,    0,    0,    0,  266,    0,    0,    0,    0,    0,
    0,  126,    0,    0,  126,    0,    0,  126,  126,  126,
  126,  126,    0,    0,    0,    0,  269,    0,  635,  264,
    0,    0,    0,  126,    0,  126,  126,    0,    0,    0,
    0,    0,  236,  237,  238,  239,  240,  241,  242,  243,
  244,  245,  246,  247,  248,  249,  250,  251,  252,  266,
    0,  253,  254,  255,  256,  126,  263,  265,  126,  268,
    0,  261,  259,    0,  260,  270,  262,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  257,
  267,  258,    0,    0,    0,    0,    0,    0,  126,  126,
    0,    0,    0,    0,  729,  735,    0,  744,    0,  723,
  717,    0,  720,  750,  726,    0,    0,    0,    0,    0,
  269,    0,    0,  264,    0,    0,    0,  711,  741,  714,
  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
  246,  247,  248,  249,  250,  251,  252,    0,    0,  253,
  254,  255,  256,  266,    0,    0,    0,    0,  747,    0,
    0,  732,    0,    0,    0,    0,    0,    0,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,  251,  252,    0,    0,  253,  254,  255,
  256,  738,    0,  834,  840,    0,  849,    0,  828,  822,
    0,  825,  855,  831,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  816,  846,  819,    0,
    0,    0,    0,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
    0,    0,  253,  254,  255,  256,    0,  852,    0,    0,
  837,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,   76,
  843,  126,  126,  126,  126,    0, 1302, 1308,    0, 1317,
    0, 1296, 1290,    0, 1293, 1323, 1299,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1284,
 1314, 1287,    0,    0,    0,    0,    0,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
  249,  250,  251,  252,    0,    0,  253,  254,  255,  256,
 1320,    0,    0, 1305,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  648,  651,  654,  657,  660,
  663,  666,  669,  672,  675,  678,  681,  684,  687,  690,
  693,  696,    0, 1311,  699,  702,  705,  708,    0,    0,
 1407, 1413,    0, 1422,    0, 1401, 1395,    0, 1398, 1428,
 1404,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1389, 1419, 1392,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1512, 1518,    0, 1527,    0,
 1506, 1500,    0, 1503, 1533, 1509,    0,    0,    0,    0,
    0,    0,    0,    0, 1425,    0,    0, 1410, 1494, 1524,
 1497,    0,    0,    0,  753,  756,  759,  762,  765,  768,
  771,  774,  777,  780,  783,  786,  789,  792,  795,  798,
  801,    0,    0,  804,  807,  810,  813, 1416,    0, 1530,
    0,    0, 1515, 1669, 1675,    0, 1684,    0, 1663, 1657,
    0, 1660, 1690, 1666,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1651, 1681, 1654,    0,
    0,    0, 1521,    0,    0,    0,    0,    0, 1774, 1780,
    0, 1789,    0, 1768, 1762,    0, 1765, 1795, 1771,    0,
    0,    0,    0,    0,    0,    0,    0, 1687,    0,    0,
 1672, 1756, 1786, 1759,    0,    0,    0, 1221, 1224, 1227,
 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257,
 1260, 1263, 1266, 1269,    0,    0, 1272, 1275, 1278, 1281,
 1678,    0, 1792,    0,    0, 1777,    0, 1879, 1885,    0,
 1894,    0, 1873, 1867,    0, 1870, 1900, 1876,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1861, 1891, 1864,    0,    0, 1783,    0,    0,    0,    0,
    0,    0, 1984, 1990,    0, 1999,    0, 1978, 1972,    0,
 1975, 2005, 1981,    0,    0,    0,    0,    0,    0,    0,
    0, 1897,    0,    0, 1882, 1966, 1996, 1969,    0,    0,
    0, 1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350,
 1353, 1356, 1359, 1362, 1365, 1368, 1371, 1374,    0,    0,
 1377, 1380, 1383, 1386, 1888,    0, 2002,    0,    0, 1987,
    0,    0,    0,    0,    0,    0, 1431, 1434, 1437, 1440,
 1443, 1446, 1449, 1452, 1455, 1458, 1461, 1464, 1467, 1470,
 1473, 1476, 1479,    0,    0, 1482, 1485, 1488, 1491, 1993,
    0,    0,    0,    0,    0, 2089, 2095,    0, 2104,    0,
 2083, 2077,    0, 2080, 2110, 2086,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2071, 2101,
 2074,    0,    0,    0, 1588, 1591, 1594, 1597, 1600, 1603,
 1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 1630, 1633,
 1636,    0,    0, 1639, 1642, 1645, 1648,    0,    0, 2107,
    0,    0, 2092,    0,    0,    0,    0,    0,    0, 1693,
 1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723,
 1726, 1729, 1732, 1735, 1738, 1741,    0,    0, 1744, 1747,
 1750, 1753, 2098,    0,    0,    0,    0,    0,    0, 2194,
 2200,    0, 2209,    0, 2188, 2182,    0, 2185, 2215, 2191,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2176, 2206, 2179,    0,    0,    0, 1798, 1801,
 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825, 1828, 1831,
 1834, 1837, 1840, 1843, 1846,    0,    0, 1849, 1852, 1855,
 1858,    0,    0, 2212,    0,    0, 2197,    0,    0,    0,
    0,    0,    0, 1903, 1906, 1909, 1912, 1915, 1918, 1921,
 1924, 1927, 1930, 1933, 1936, 1939, 1942, 1945, 1948, 1951,
    0,    0, 1954, 1957, 1960, 1963, 2203, 2299, 2305,    0,
 2314,    0, 2293, 2287,    0, 2290, 2320, 2296,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2281, 2311, 2284,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2404, 2410,    0, 2419,    0,
 2398, 2392,    0, 2395, 2425, 2401,    0,    0,    0,    0,
    0, 2317,    0,    0, 2302,    0,    0,    0, 2386, 2416,
 2389,    0,    0,    0,    0,    0, 2008, 2011, 2014, 2017,
 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041, 2044, 2047,
 2050, 2053, 2056,    0, 2308, 2059, 2062, 2065, 2068, 2422,
 2653, 2659, 2407, 2668,    0, 2647, 2641,    0, 2644, 2674,
 2650,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2635, 2665, 2638,    0,    0,    0,    0,
    0,    0, 2413,    0,    0,    0,    0,    0,    0, 2758,
 2764,    0, 2773,    0, 2752, 2746,    0, 2749, 2779, 2755,
    0,    0,    0,    0, 2671,    0,    0, 2656,    0,    0,
    0,    0, 2740, 2770, 2743,    0,    0,    0,    0,    0,
 2113, 2116, 2119, 2122, 2125, 2128, 2131, 2134, 2137, 2140,
 2143, 2146, 2149, 2152, 2155, 2158, 2161, 2662,    0, 2164,
 2167, 2170, 2173, 2776, 2935, 2941, 2761, 2950,    0, 2929,
 2923,    0, 2926, 2956, 2932,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2917, 2947, 2920,
    0,    0,    0,    0,    0,    0, 2767,    0,    0,    0,
    0,    0, 3040, 3046,    0, 3055,    0, 3034, 3028,    0,
 3031, 3061, 3037,    0,    0,    0,    0,    0, 2953,    0,
    0, 2938,    0,    0,    0, 3022, 3052, 3025, 2218, 2221,
 2224, 2227, 2230, 2233, 2236, 2239, 2242, 2245, 2248, 2251,
 2254, 2257, 2260, 2263, 2266,    0,    0, 2269, 2272, 2275,
 2278, 2944,    0,    0,    0,    0, 3058,    0,    0, 3043,
    0,    0,    0,    0,    0,    0, 2323, 2326, 2329, 2332,
 2335, 2338, 2341, 2344, 2347, 2350, 2353, 2356, 2359, 2362,
 2365, 2368, 2371,    0,    0, 2374, 2377, 2380, 2383, 3049,
 3145, 3151,    0, 3160,    0, 3139, 3133,    0, 3136, 3166,
 3142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3127, 3157, 3130,    0,    0,    0,    0,
    0, 2572, 2575, 2578, 2581, 2584, 2587, 2590, 2593, 2596,
 2599, 2602, 2605, 2608, 2611, 2614, 2617, 2620,    0,    0,
 2623, 2626, 2629, 2632, 3163,    0,    0, 3148,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2677, 2680, 2683, 2686, 2689, 2692, 2695, 2698, 2701, 2704,
 2707, 2710, 2713, 2716, 2719, 2722, 2725, 3154,    0, 2728,
 2731, 2734, 2737,    0, 3250, 3256,    0, 3265,    0, 3244,
 3238,    0, 3241, 3271, 3247,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3232, 3262, 3235,
    0,    0,    0,    0,    0, 2854, 2857, 2860, 2863, 2866,
 2869, 2872, 2875, 2878, 2881, 2884, 2887, 2890, 2893, 2896,
 2899, 2902,    0,    0, 2905, 2908, 2911, 2914, 3268,    0,
    0, 3253,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2959, 2962, 2965, 2968, 2971, 2974, 2977,
 2980, 2983, 2986, 2989, 2992, 2995, 2998, 3001, 3004, 3007,
    0, 3259, 3010, 3013, 3016, 3019,    0, 3427, 3433,    0,
 3442,    0, 3421, 3415,    0, 3418, 3448, 3424,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3409, 3439, 3412,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3532, 3538,    0, 3547,    0, 3526, 3520,    0,
 3523, 3553, 3529,    0,    0,    0,    0,    0,    0,    0,
    0, 3445,    0,    0, 3430, 3514, 3544, 3517,    0,    0,
    0, 3064, 3067, 3070, 3073, 3076, 3079, 3082, 3085, 3088,
 3091, 3094, 3097, 3100, 3103, 3106, 3109, 3112,    0,    0,
 3115, 3118, 3121, 3124, 3436,    0, 3550,    0,    0, 3535,
    0, 3637, 3643,    0, 3652,    0, 3631, 3625,    0, 3628,
 3658, 3634,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3619, 3649, 3622,    0,    0, 3541,
    0,    0,    0,    0,    0,    0, 4102, 4108,    0, 4117,
    0, 4096, 4090,    0, 4093, 4123, 4099,    0,    0,    0,
    0,    0,    0,    0,    0, 3655,    0,    0, 3640, 4084,
 4114, 4087,    0,    0,    0, 3169, 3172, 3175, 3178, 3181,
 3184, 3187, 3190, 3193, 3196, 3199, 3202, 3205, 3208, 3211,
 3214, 3217,    0,    0, 3220, 3223, 3226, 3229, 3646,    0,
 4120,    0,    0, 4105, 4499, 4505,    0, 4514,    0, 4493,
 4487,    0, 4490, 4520, 4496,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4481, 4511, 4484,
    0,    0,    0, 4111,    0,    0,    0,    0,    0, 4604,
 4610,    0, 4619,    0, 4598, 4592,    0, 4595, 4625, 4601,
    0,    0,    0,    0,    0,    0,    0,    0, 4517,    0,
    0, 4502, 4586, 4616, 4589,    0,    0,    0, 3346, 3349,
 3352, 3355, 3358, 3361, 3364, 3367, 3370, 3373, 3376, 3379,
 3382, 3385, 3388, 3391, 3394,    0,    0, 3397, 3400, 3403,
 3406, 4508,    0, 4622,    0,  993, 4607,  996,    0,    0,
    0,    0,    0, 3451, 3454, 3457, 3460, 3463, 3466, 3469,
 3472, 3475, 3478, 3481, 3484, 3487, 3490, 3493, 3496, 3499,
    0,    0, 3502, 3505, 3508, 3511, 4613,    0,    0,  999,
    0,    0,    0,  263,  265,    0,  268,    0,  261,  259,
    0,  260,  270,  262,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  257,  267,    0,    0,
    0,    0, 3556, 3559, 3562, 3565, 3568, 3571, 3574, 3577,
 3580, 3583, 3586, 3589, 3592, 3595, 3598, 3601, 3604,    0,
    0, 3607, 3610, 3613, 3616,    0,    0,  269,    0, 1065,
  264, 1068,    0,    0,    0,    0,    0, 4021, 4024, 4027,
 4030, 4033, 4036, 4039, 4042, 4045, 4048, 4051, 4054, 4057,
 4060, 4063, 4066, 4069,    0,    0, 4072, 4075, 4078, 4081,
  266,    0,    0, 1071,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1140,    0,
 1143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4418, 4421, 4424, 4427, 4430,
 4433, 4436, 4439, 4442, 4445, 4448, 4451, 4454, 4457, 4460,
 4463, 4466, 1146,    0, 4469, 4472, 4475, 4478,    0, 1212,
    0, 1215,    0,    0,    0,    0,    0,    0,    0,    0,
 4523, 4526, 4529, 4532, 4535, 4538, 4541, 4544, 4547, 4550,
 4553, 4556, 4559, 4562, 4565, 4568, 4571,    0,    0, 4574,
 4577, 4580, 4583, 1218, 2491,    0, 2494,    0,    0,    0,
    0,    0,    0,  930,  933,  936,  939,  942,  945,  948,
  951,  954,  957,  960,  963,  966,  969,  972,  975,  978,
    0,    0,  981,  984,  987,  990,    0, 2563, 2497, 2566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2845,    0, 2848,    0,    0,    0,    0,
    0, 2569,    0,    0,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
  252,    0,    0,  253,  254,  255,  256, 2851, 3337,    0,
 3340,    0,    0,    0,    0,    0,    0, 1002, 1005, 1008,
 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038,
 1041, 1044, 1047, 1050,    0,    0, 1053, 1056, 1059, 1062,
    0,    0, 3343,    0,    0,    0,    0,    0,    0, 3724,
    0, 3727,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1077, 1080, 1083, 1086,
 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116,
 1119, 1122, 1125, 3730,    0, 1128, 1131, 1134, 1137,    0,
 3796,    0, 3799,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1149, 1152, 1155,
 1158, 1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 1185,
 1188, 1191, 1194, 1197, 3802,    0, 1200, 1203, 1206, 1209,
    0, 3868,    0, 3871,    0,    0,    0,    0,    0,    0,
    0,    0, 2428, 2431, 2434, 2437, 2440, 2443, 2446, 2449,
 2452, 2455, 2458, 2461, 2464, 2467, 2470, 2473, 2476,    0,
    0, 2479, 2482, 2485, 2488, 3874, 3940,    0, 3943,    0,
    0,    0,    0,    0,    0, 2500, 2503, 2506, 2509, 2512,
 2515, 2518, 2521, 2524, 2527, 2530, 2533, 2536, 2539, 2542,
 2545, 2548,    0,    0, 2551, 2554, 2557, 2560,    0,    0,
 3946, 2782, 2785, 2788, 2791, 2794, 2797, 2800, 2803, 2806,
 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830,    0,    0,
 2833, 2836, 2839, 2842,    0, 4012,    0, 4015,    0,    0,
    0,    0,    0,    0,    0,    0, 3274, 3277, 3280, 3283,
 3286, 3289, 3292, 3295, 3298, 3301, 3304, 3307, 3310, 3313,
 3316, 3319, 3322,    0,    0, 3325, 3328, 3331, 3334, 4018,
 4189,    0, 4192,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3661, 3664, 3667,
 3670, 3673, 3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697,
 3700, 3703, 3706, 3709, 4195,    0, 3712, 3715, 3718, 3721,
    0, 4261,    0, 4264,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3733, 3736,
 3739, 3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766,
 3769, 3772, 3775, 3778, 3781, 4267,    0, 3784, 3787, 3790,
 3793,    0, 4333,    0, 4336,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3805,
 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829, 3832, 3835,
 3838, 3841, 3844, 3847, 3850, 3853, 4339,    0, 3856, 3859,
 3862, 3865,    0, 4405,    0, 4408,    0,    0,    0,    0,
    0,    0,    0,    0, 3877, 3880, 3883, 3886, 3889, 3892,
 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922,
 3925,    0,    0, 3928, 3931, 3934, 3937, 4411,  185,    0,
  185,  185,  185, 4414,  185,    0,    0,    0,  551,    0,
    0,  555,  559,  563,    0,    0,    0,    0,    0,  567,
  571,    0,  185,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0, 3949, 3952, 3955, 3958, 3961, 3964, 3967,
 3970, 3973, 3976, 3979, 3982, 3985, 3988, 3991, 3994, 3997,
    0,  185, 4000, 4003, 4006, 4009,    0,  230,  579,  582,
    0,    0,    0,    0,    0,  233,    0,    0, 4126, 4129,
 4132, 4135, 4138, 4141, 4144, 4147, 4150, 4153, 4156, 4159,
 4162, 4165, 4168, 4171, 4174,    0,    0, 4177, 4180, 4183,
 4186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  420,    0,    0,    0,    0, 4198,
 4201, 4204, 4207, 4210, 4213, 4216, 4219, 4222, 4225, 4228,
 4231, 4234, 4237, 4240, 4243, 4246,  420,    0, 4249, 4252,
 4255, 4258,    0,    0,    0,    0,    0,    0,    0,    0,
  420,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291, 4294, 4297,
 4300, 4303, 4306, 4309, 4312, 4315, 4318,    0,    0, 4321,
 4324, 4327, 4330,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4342, 4345, 4348, 4351, 4354, 4357, 4360, 4363, 4366,
 4369, 4372, 4375, 4378, 4381, 4384, 4387, 4390,  420,    0,
 4393, 4396, 4399, 4402,    0,    0,    0,  185,    0,    0,
    0,  420,  185,    0,    0,  185,  185,  185,    0,    0,
    0,    0,    0,  185,  185,  380,    0,    0,    0,    0,
  385,    0,  185,  390,  395,  400,    0,  185,    0,    0,
    0,  405,  410,    0,    0,    0,    0,  380,    0,    0,
  415,    0,  385,    0,    0,  390,  395,  400,    0,    0,
    0,  380,    0,  405,  410,    0,  385,    0,    0,  390,
  395,  400,  415,    0,  420,    0,    0,  405,  410,  423,
  427,  431,  435,    0,  438,  438,  415,  442,  420,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  423,  427,  431,  435,    0,  438,  438,    0,  442,
  420,    0,    0,    0,    0,  423,  427,  431,  435,    0,
  438,  438,    0,  442,    0,    0,    0,    0,    0,  380,
    0,    0,    0,    0,  385,    0,    0,  390,  395,  400,
    0,    0,  380,    0,    0,  405,  410,  385,    0,    0,
  390,  395,  400,    0,  415,    0,    0,    0,  405,  410,
    0,    0,    0,    0,    0,    0,    0,  415,  420,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  420,    0,  423,  427,  431,  435,    0,  438,  438,
    0,  442,    0,    0,  420,    0,  423,  427,  431,  435,
    0,  438,  438,    0,  442,  380,    0,    0,    0,    0,
  385,    0,    0,  390,  395,  400,    0,    0,    0,  380,
    0,  405,  410,    0,  385,    0,    0,  390,  395,  400,
  415,    0,    0,    0,    0,  405,  410,    0,    0,    0,
    0,  380,    0,    0,  415,    0,  385,    0,    0,  390,
  395,  400,  420,    0,    0,    0,    0,  405,  410,  423,
  427,  431,  435,    0,  438,  438,  415,  442,    0,    0,
  420,    0,    0,  423,  427,  431,  435,    0,  438,  438,
    0,  442,    0,    0,    0,    0,    0,    0,  420,    0,
    0,    0,    0,    0,    0,  423,  427,  431,  435,  380,
  438,  438,    0,  442,  385,    0,    0,  390,  395,  400,
    0,    0,  380,    0,    0,  405,  410,  385,    0,    0,
  390,  395,  400,    0,  415,  380,    0,    0,  405,  410,
  385,    0,    0,  390,  395,  400,    0,  415,    0,    0,
    0,  405,  410,    0,    0,    0,  420,    0,    0,    0,
  415,    0,    0,  423,  427,  431,  435,    0,  438,  438,
  420,  442,    0,    0,    0,    0,  423,  427,  431,  435,
    0,  438,  438,  420,  442,    0,    0,    0,    0,  423,
  427,  431,  435,  380,  438,  438,    0,  442,  385,    0,
    0,  390,  395,  400,    0,    0,    0,    0,    0,  405,
  410,  380,    0,    0,    0,    0,  385,    0,  415,  390,
  395,  400,    0,    0,    0,    0,    0,  405,  410,  380,
    0,    0,    0,    0,  385,    0,  415,  390,  395,  400,
    0,    0,    0,    0,    0,  405,  410,  423,  427,  431,
  435,    0,  438,  438,  415,  442,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  423,  427,  431,  435,    0,
  438,  438,    0,  442,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  423,  427,  431,  435,  380,  438,  438,
    0,  442,  385,    0,    0,  390,  395,  400,    0,    0,
    0,  380,    0,  405,  410,    0,  385,    0,    0,  390,
  395,  400,  415,    0,  380,    0,    0,  405,  410,  385,
    0,    0,  390,  395,  400,    0,  415,    0,    0,    0,
  405,  410,    0,    0,    0,    0,    0,    0,    0,  415,
    0,  423,  427,  431,  435,    0,  438,  438,    0,  442,
    0,    0,    0,    0,    0,  423,  427,  431,  435,    0,
  438,  438,    0,  442,    0,    0,    0,    0,  423,  427,
  431,  435, 4414,  438,  438,    0,  442,  551,    0,    0,
  555,  559,  563,    0,    0, 4414,    0,    0,  567,  571,
  551,    0,    0,  555,  559,  563,    0,  575, 4414,    0,
    0,  567,  571,  551,    0,    0,  555,  559,  563,    0,
  575,    0,    0,    0,  567,  571,    0,    0,    0,    0,
    0,    0,    0,  575,    0,    0,  230,  579,  582,    0,
    0,    0,    0,    0,  233,    0,    0,    0,    0,  230,
  579,  582,    0,    0,    0,    0,    0,  233,    0,    0,
    0,    0,  230,  579,  582,    0, 4414,    0,    0,    0,
  233,  551,    0,    0,  555,  559,  563,    0,    0, 4414,
    0,    0,  567,  571,  551,    0,    0,  555,  559,  563,
    0,  575, 4414,    0,    0,  567,  571,  551,    0,    0,
  555,  559,  563,    0,  575,    0,    0,    0,  567,  571,
    0,    0,    0,    0,    0,    0,    0,  575,    0,    0,
  230,  579,  582,    0,    0,    0,    0,    0,  233,    0,
    0,    0,    0,  230,  579,  582,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,  230,  579,  582,    0,
    0,    0,    0,    0,  233,
};
static int yycheck[] = {                                      91,
    0,    1,    1,  104,   44,   91,    6,    5,    8,    9,
   10,  356,   60,  462,   60,   15,   16,   38,  110,   44,
  125,   38,   40,   40,   60,   42,  126,  119,   45,    5,
  528,   41,  592,   43,   44,   45,   41,    5,  257,   44,
   44,   41,  123,   33,   60,    0,  265,   59,   44,   59,
   44,   61,   59,   61,   41,   59,   56,   44,   38,   44,
  441,   44,   42,   44,   38,   65,   44,  438,   42,   69,
  126,   41,  257,   38,   44,   40,   59,   42,   61,  577,
  441,   44,   40,   93,   23,  125,   60,  647,  273,   59,
   90,   91,   31,   69,   44,   60,   44,  282,  123,   62,
  100,  101,  102,  103,  104,  104,  104,   60,   47,   41,
  110,  123,   44,   41,   90,  125,  123,   93,   59,  119,
   60,  570,  122,   93,  505,   59,   60,  508,  104,  125,
   60,  125,  503,  123,   33,   44,  126,   65,  125,   38,
  125,   40,  123,   42,  505,  123,   45,  508,   59,   60,
   59,   60,  497,   92,   59,  125,   44,  257,   58,   59,
   41,   91,   43,   44,   45,  104,  122,   58,   59,  108,
  275,  276,  277,  123,   62,  123,  557,   59,   59,   44,
   61,   47,  123,  258,  123,  124,  125,  126,  559,  123,
   60,   60,   91,  125,  194,   41,  557,   44,  370,  371,
  268,  269,   44,   69,  204,  280,   60,  207,  206,  209,
  210,   60,   93,   59,  123,  596,  262,  257,  123,  265,
  266,  267,   91,  123,  123,  311,  202,  126,  274,   60,
  206,  271,  272,  319,  282,  596,  257,  273,  194,  257,
  257,  123,  108,  211,  125,  213,  282,  257,  216,   40,
   41,   44,  424,   41,   59,   60,   44,  273,  234,  235,
  125,  271,  272,   40,  203,  311,  282,  206,  258,  259,
  260,   59,  262,  319,  274,  265,  266,  267,  125,  279,
  320,  123,  282,  273,  274,  285,   60,  257,  288,  228,
  307,  308,  282,  283,  284,  285,  286,  287,   60,  311,
  300,  271,  272,  311,   59,   93,  306,  315,  273,  314,
  320,  316,  317,  313,   91,   60,  316,  282,  274,  287,
  275,  276,  277,  279,  324,  305,  282,   60,   60,   59,
   60,  432,  125,  273,   40,   40,   59,  125,   60,  273,
  305,   60,  282,  273,   44,  335,  336,  337,  282,  349,
  320,   44,  282,  445,   44,   59,   44,  296,  257,  258,
  259,  260,  273,  262,  273,   60,  265,  266,  267,   59,
   58,  282,   59,  282,  273,  274,  257,   41,  378,  355,
   44,  311,   59,  282,  283,  284,  285,  286,  287,  319,
  271,  272,  257,  123,  495,   59,  324,  498,  275,  276,
  277,  377,   44,  273,  273,   40,  271,  272,  307,  308,
  257,   59,  282,  282,  414,  415,   40,   59,  418,  419,
  420,  349,   46,  123,  271,  272,   41,   58,  529,   44,
  123,  257,  432,  432,  432,  123,  335,  336,  337,  320,
  440,  311,  311,  311,   59,  445,   61,  123,   41,  319,
  319,  319,  428,  475,  476,  320,  432,  425,  414,   93,
  257,  461,  418,  463,  257,   44,   40,   91,  273,  257,
  492,  273,  273,  320,  271,  272,   44,  282,  271,  272,
  282,  282,  482,  271,  272,   41,  486,  415,   44,   41,
  591,  419,  420,  432,  470,  495,  495,  495,  498,  498,
  498,  257,  258,  259,  260,   33,  273,  273,  257,  610,
   38,  273,   40,   41,   42,  282,  282,   45,  264,  495,
  282,  521,  498,  320,  524,  626,  126,  320,  273,  529,
  529,  529,  320,  461,   93,  463,  257,  282,  264,  257,
  273,  273,  257,  273,  544,  646,  125,  257,  257,  282,
  282,  273,  282,  529,  482,  273,  495,  125,  486,  498,
  282,  257,  264,  273,  282,  521,  534,  535,  524,  569,
   41,  571,  282,   44,  311,  311,  311,  331,  273,  547,
  580,  581,  319,  319,  319,  585,  586,  282,   59,   40,
  529,  591,  591,  591,  314,  123,  316,  317,  126,   24,
   25,   26,   27,   28,   29,   30,   31,  257,   58,   58,
  610,  610,  610,   58,   40,  591,  616,   42,   43,   44,
   45,  621,   93,  123,  624,  257,  626,  626,  626,  257,
  586,  312,  313,  314,  610,  316,  317,  637,  638,   41,
  640,  569,   44,  571,  612,  613,  646,  646,  646,  617,
  626,  651,  591,  653,  125,  257,   41,   41,  658,   44,
   44,   61,  662,  663,  664,  621,   41,  635,  257,   44,
  646,  610,   42,  257,   59,   38,   38,   40,  257,  257,
   42,  637,   41,   46,  640,   44,   62,  626,  616,  257,
   61,   41,  271,  272,   44,   41,  624,   41,   44,   40,
   44,   62,  658,  271,  272,   62,  662,  646,   93,   59,
  638,   61,  312,  313,  314,   41,  316,  317,   44,   41,
   62,   41,   44,  651,   41,  653,   41,   44,   91,  257,
  258,  259,  260,  264,  262,  663,  664,  265,  266,  267,
  125,  320,   59,  168,   61,  273,  274,   42,   41,   59,
   41,   44,  320,   44,  282,  283,  284,  285,  286,  287,
   40,  124,  257,   40,   62,  257,  191,  192,  193,  194,
  495,  257,  262,  498,   38,  265,  266,  267,   42,  307,
  308,   40,  257,  273,  274,   41,  257,  212,   44,  312,
  313,  314,  282,  316,  317,   58,   60,  287,   40,   40,
  271,  272,   40,   59,  529,   61,   41,  335,  336,  337,
   38,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,  251,  252,   42,   40,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,   38,   40,  331,  320,
   42,   37,   38,   40,   42,   41,   42,   43,   44,   45,
   46,   47,   40,  257,   41,   40,  591,   59,   60,   40,
   38,   41,  257,   59,  257,   61,  312,  313,  314,  262,
  316,  317,  265,  266,  267,  610,  271,  272,   40,   61,
  273,  274,    0,   59,   61,  257,   59,   40,   42,  282,
  262,  626,  257,  265,  266,  267,  257,   93,  333,   37,
   38,  273,  274,   41,   42,   43,   44,   45,   46,   47,
  282,  646,  257,   40,   59,   33,   41,  352,  353,  260,
   38,   59,   40,   61,   42,  320,   41,   45,  124,  125,
   37,   38,  367,   40,   40,   42,   43,   58,   45,   46,
   47,   37,   38,   59,  123,   41,   42,   43,   44,   45,
   46,   47,  257,   41,   61,   93,   40,  262,   41,   40,
  265,  266,  267,   59,   59,   61,   40,  260,  273,  274,
   37,   38,   41,   40,  123,   42,    0,  282,    0,   46,
   47,  123,  123,  257,   91,   42,  124,  125,  262,   59,
  257,  265,  266,  267,   59,   41,   44,   93,   44,   41,
  274,   41,  257,  327,  257,  123,   60,  125,  126,   33,
   40,  446,  273,   59,   38,  257,   40,  124,   42,  273,
  257,   45,  257,  257,   91,  257,  257,  462,  124,  125,
  465,  305,  508,   62,  432,   69,  445,  311,  312,  313,
  314,   69,  316,  317,   69,  319,   69,   93,   69,  484,
   49,  636,  268,  545,   -1,    0,   -1,  124,  493,   -1,
  262,  257,   -1,  265,  266,  267,  324,  325,  326,  327,
  328,  329,  274,   -1,   -1,  271,  272,   -1,   -1,  125,
   -1,  516,  517,  518,  519,   -1,  521,   -1,   33,  524,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,  123,
   45,  125,  126,  305,  539,   -1,   -1,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,  257,
   41,   -1,   -1,   44,  320,   -1,  561,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  272,  570,   -1,  572,   59,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,  587,  271,  272,  273,  274,  275,  276,  277,
  278,  257,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   -1,   93,   -1,   -1,  271,  272,   -1,  123,   33,
  125,  126,  320,   -1,   38,   -1,   40,   -1,   42,  307,
  308,   45,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  320,   -1,  125,  640,  324,   -1,   -1,  327,
   -1,  257,  330,  331,  332,   -1,   -1,  335,  336,  337,
   -1,   -1,   -1,   -1,  320,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,  275,  276,  277,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,  320,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,   -1,   -1,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
  275,  276,  277,  278,   -1,   -1,  257,  282,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   -1,   -1,   33,   -1,
  271,  272,   -1,   38,   -1,   40,  123,   42,   -1,  126,
   45,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,  327,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  320,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,  262,   -1,
  324,  265,  266,  267,   -1,   -1,  330,  331,  332,  273,
  274,  335,  336,  337,   -1,   -1,   -1,   -1,  282,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,   -1,  126,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,
   -1,  126,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,
  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,   -1,  126,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,   -1,  126,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,  125,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   33,   -1,   -1,   -1,  123,   38,
  125,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,  123,   -1,  125,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,  262,
  307,  308,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,  320,   -1,   -1,   -1,  324,   -1,  282,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,   -1,   -1,  258,  259,  260,  261,   -1,  263,  126,
   -1,   40,   41,  268,  269,   44,  271,  272,  311,   -1,
  275,  276,  277,  278,   -1,   -1,  319,   -1,  283,  284,
  285,  286,  287,   62,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,  125,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,  320,   -1,   -1,   -1,  324,
  273,  274,   -1,   -1,   -1,  330,  331,  332,   -1,  282,
  335,  336,  337,   -1,  287,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,  123,   38,  125,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,   -1,
   -1,  330,  331,  332,   -1,  282,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,
  123,   -1,  125,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,
   -1,   -1,   -1,  324,  273,  274,   -1,   -1,   -1,  330,
  331,  332,   -1,  282,  335,  336,  337,   -1,  287,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,  281,  271,  272,   -1,   -1,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,
  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,  321,  322,  323,  324,  325,  326,  327,  328,  329,
   -1,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,
  123,   38,  125,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,  270,
   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,  332,
   -1,  282,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,  287,   -1,   33,   -1,  123,   -1,  125,   38,
   -1,   40,   -1,   42,  262,   -1,   45,  265,  266,  267,
   -1,   -1,  307,  308,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,  311,   -1,  268,  269,   -1,  271,  272,
   -1,  319,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,  125,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,   -1,
   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,  332,
   -1,  282,  335,  336,  337,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,  123,   38,  125,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,  320,   -1,   -1,   -1,  324,  273,  274,
   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,
   33,   -1,  123,   -1,  125,   38,   -1,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,   -1,
   -1,  330,  331,  332,   -1,  282,  335,  336,  337,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,  320,   -1,   -1,   -1,  324,  273,  274,
   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,   -1,  123,   38,  125,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,  320,
   -1,   -1,   -1,  324,  273,  274,   -1,   -1,   -1,  330,
  331,  332,   -1,  282,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,  123,   -1,
  125,   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,   -1,
   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,  332,
   -1,  282,  335,  336,  337,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   38,   -1,   40,   41,  268,  269,   44,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,   62,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   91,   -1,   44,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   59,  335,  336,  337,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   93,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,  123,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   38,   -1,   -1,
   -1,   -1,  307,  308,   -1,  311,  312,  313,  314,  125,
  316,  317,  257,  319,   -1,  320,   -1,  262,   -1,  324,
  265,  266,  267,   -1,   -1,  330,  331,  332,  273,  274,
  335,  336,  337,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   33,   -1,   -1,  123,   -1,   38,   -1,   40,  257,
   42,   -1,   -1,   45,  262,   -1,   -1,  265,  266,  267,
  307,  308,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,  320,  282,   -1,   -1,  324,  273,  274,
   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,
  337,   -1,  287,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
   -1,  257,   -1,  278,   -1,   -1,  311,   -1,  283,  284,
  285,  286,  287,   33,  319,  271,  272,   -1,   38,   -1,
   40,  123,   42,   -1,   -1,   45,   41,   -1,   -1,   44,
   -1,   -1,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   59,  320,   -1,  262,   -1,  324,
  265,  266,  267,   -1,   -1,  330,  331,  332,  273,  274,
  335,  336,  337,   -1,  320,   -1,   -1,  282,   -1,  258,
  259,  260,  261,   -1,  263,   -1,  257,   -1,   93,  268,
  269,  262,  271,  272,  265,  266,  267,   -1,   -1,  278,
   -1,   -1,  273,  274,  283,  284,  285,  286,  287,   -1,
   33,  282,   -1,  123,   -1,   38,   -1,   40,   -1,   42,
  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  311,  320,   -1,   -1,   -1,  324,   -1,   -1,  319,   -1,
   -1,  330,  331,  332,   59,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,
   93,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,   -1,   40,   -1,   -1,  278,   -1,   93,   -1,
   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,   41,   -1,   -1,   44,  307,  308,  257,   -1,   -1,
  125,   -1,  262,   -1,   -1,  265,  266,  267,  320,   59,
   -1,   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,
  332,   -1,  282,  335,  336,  337,   -1,   -1,  258,  259,
  260,  261,  257,  263,   -1,   -1,   -1,   93,  268,  269,
   -1,  271,  272,   93,   -1,   -1,  271,  272,  278,   -1,
   -1,  311,   -1,  283,  284,  285,  286,  287,   -1,  319,
   -1,   -1,   -1,   -1,   -1,   -1,   41,  123,   41,   44,
  126,   44,   -1,   -1,   -1,  125,   33,  307,  308,   -1,
   -1,   38,   -1,   40,   59,   42,   59,   -1,   45,   -1,
  320,   -1,   -1,   -1,  324,  320,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   93,  262,
   93,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,  257,   -1,   -1,   -1,   93,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,  271,  272,   33,   -1,
  125,   -1,  125,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   33,  307,  308,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,  335,  336,  337,  320,  273,  274,   -1,   -1,
   -1,  257,  258,  259,  260,  282,  262,  257,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,  271,  272,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   -1,  311,  312,  313,   -1,  123,   -1,
   41,  126,  319,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   33,  307,  308,  123,   -1,   38,  126,   40,   59,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  335,
  336,  337,  257,   -1,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,  271,  272,  271,  272,
  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  282,  283,  284,  285,  286,
  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,  126,  257,  320,   -1,  320,   -1,  262,
  307,  308,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,   -1,  258,  259,  260,   -1,   -1,  335,  336,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,  262,   -1,   -1,  265,  266,  267,  283,  284,
  285,  286,  287,  273,  274,   -1,   -1,   -1,   -1,   -1,
  126,   -1,  282,  283,  284,  285,  286,  287,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  319,   33,   -1,  307,  308,   37,
   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,   47,
  335,  336,  337,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,  335,  336,  337,   -1,   -1,
  271,  272,   -1,   -1,  257,  258,  259,  260,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   91,   -1,   -1,   94,   -1,   -1,  282,
  283,  284,  285,  286,  287,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,  320,
   -1,   -1,   -1,   -1,  307,  308,  124,   59,  126,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  335,  336,  337,   -1,   -1,  273,  274,   91,
   -1,   93,   94,   -1,   37,   38,  282,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,
   -1,  123,  124,  125,   -1,  311,  312,  313,  314,  257,
  316,  317,   -1,  319,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   91,   -1,
   93,   94,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,  124,  125,   59,   -1,   61,   62,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   91,  282,   93,   94,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,   -1,  311,   -1,  123,  124,  125,
   -1,  319,   -1,  319,   -1,  257,   -1,   -1,   41,   -1,
  262,   44,   -1,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,  274,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,   -1,  307,  308,  309,  310,  311,
   93,   -1,   -1,   -1,  257,   -1,   -1,  319,  320,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,   -1,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  319,  320,   -1,   -1,
   -1,  257,   -1,   -1,   41,   -1,  262,   44,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
   -1,  307,  308,  309,  310,  311,   93,   -1,   -1,   -1,
   -1,   -1,   -1,  319,  320,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   59,  125,   61,
   62,   -1,  273,  274,  257,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,
   -1,  123,  124,  125,   -1,   -1,   -1,  320,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   91,   -1,
   93,   94,   -1,   37,   38,  282,   40,   41,   42,   43,
   44,   45,   46,   47,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   59,   -1,   61,   62,   -1,
  123,  124,  125,   -1,  311,   -1,   59,   -1,   61,   -1,
  257,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,  123,
  124,  125,   -1,   -1,   -1,   -1,   59,   -1,   61,   62,
   -1,  124,  125,  320,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,
  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   93,   94,   -1,   -1,   -1,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,   -1,  307,  308,  309,  310,  311,
  123,  124,  125,   -1,  257,   -1,   -1,  319,  320,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  319,  320,  262,   -1,
   -1,  265,  266,  267,  257,   -1,   -1,  271,  272,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,  308,  309,  310,  311,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  319,  320,   -1,   38,   -1,
   -1,   -1,   42,   -1,  257,   -1,   -1,  320,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,
   60,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,   -1,  307,  308,  309,  310,  311,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  319,  320,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   60,   61,   62,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,  123,  124,  125,   -1,   -1,   -1,
   -1,  282,   -1,   91,   -1,   93,   94,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
  311,   61,   62,   -1,   -1,  123,  124,  125,  319,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   -1,   -1,
   -1,   41,   -1,   43,   44,   -1,   46,   47,   -1,   -1,
   -1,   91,  262,   93,   94,  265,  266,  267,  257,   59,
   60,   61,   62,  262,  274,   -1,  265,  266,  267,   -1,
   -1,   -1,  257,   -1,  273,  274,   -1,  262,   -1,   -1,
  265,  266,  267,  282,  124,  125,   -1,   -1,  273,  274,
   -1,   91,   -1,   93,   94,  305,   -1,  282,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,   -1,   -1,   -1,  124,  125,  311,  312,  313,   -1,
   -1,   -1,  271,  272,  319,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  311,  271,  272,   -1,   -1,   -1,   -1,   -1,
  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,   -1,  307,
  308,  309,  310,  311,   -1,   -1,   -1,  257,   -1,   37,
   38,  319,  320,   41,   42,   43,   44,   45,   46,   47,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   61,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  271,  272,   -1,   -1,   93,   -1,   -1,   -1,   -1,
  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  124,  125,   -1,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
  320,   41,   42,   43,   44,   45,   46,   47,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,   59,
   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   37,   38,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   93,   47,   59,   -1,   61,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   59,   -1,   61,   37,
   -1,   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   93,
   -1,   59,   -1,   61,   -1,  124,  125,   -1,   -1,   -1,
   93,   -1,   37,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   38,   47,   40,   41,   42,   -1,   44,   -1,  257,
  124,  125,   -1,   -1,   59,   93,   61,   -1,   -1,   -1,
   -1,  124,  125,  271,  272,   62,   -1,   37,   -1,   -1,
   -1,   41,   42,   43,   44,   45,   37,   47,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,  125,   93,   59,
   -1,   61,   -1,   41,   91,   -1,   44,   37,   59,   -1,
   61,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   59,  320,   -1,   -1,   -1,   -1,   -1,   -1,   59,
  125,   61,   -1,   93,   -1,   38,   -1,   40,   41,   -1,
   -1,   44,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,  257,   41,   62,
   -1,   44,   -1,   93,   -1,  125,   -1,   -1,  257,   -1,
   -1,  271,  272,   -1,  125,   -1,   59,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,  125,   91,   -1,
   -1,   -1,   -1,  257,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  271,  272,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
  320,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,  257,
   -1,  320,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,  125,  271,  272,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   -1,   -1,   -1,  320,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  320,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  262,  271,  272,  265,  266,
  267,   91,   -1,   -1,   94,   -1,   -1,  274,   -1,   -1,
   -1,   -1,  320,   -1,   40,   41,   -1,  257,   44,   41,
  287,   -1,   44,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  271,  272,   -1,  124,  125,   62,   59,  305,  257,
  271,  272,   40,   41,  311,  320,   44,  257,   -1,   -1,
   -1,   -1,  319,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   62,   91,   -1,   -1,   -1,   -1,
   41,   93,   -1,   44,  257,   -1,   -1,   -1,   41,  262,
  320,   44,  265,  266,  267,   -1,   -1,   -1,   59,  320,
  273,  274,   -1,   91,  257,   41,   59,   -1,   44,  282,
   -1,   -1,  320,  125,  287,   -1,   -1,   -1,  271,  272,
  320,   41,   -1,   59,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,  311,   59,
   93,   -1,   41,   -1,   -1,   44,  319,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   59,   -1,   -1,   -1,  125,   59,   -1,  320,   -1,   -1,
   -1,   -1,  125,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   41,  125,
   -1,   44,   -1,   -1,   93,   -1,   -1,   -1,   59,   93,
   -1,   -1,   -1,   -1,   -1,  125,   59,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  125,  307,  308,  309,
  310,  125,   93,   -1,  314,   -1,  316,  317,   -1,   -1,
   93,  257,   -1,   -1,   -1,  257,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  271,
  272,   -1,   41,   -1,  125,   44,  282,   -1,   -1,  257,
   -1,  287,  125,   -1,  262,   42,   -1,  265,  266,  267,
   59,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  311,  257,   -1,   -1,  287,
   -1,   -1,   -1,  319,  257,   -1,   -1,   -1,  320,   -1,
  271,  272,   -1,   -1,   93,   -1,   -1,  257,  271,  272,
   -1,  257,  262,  311,   -1,  265,  266,  267,   -1,   -1,
   -1,  319,   -1,  273,  274,  271,  272,  257,   -1,   -1,
   -1,   -1,  282,   -1,   -1,   -1,  125,   -1,   -1,  126,
   -1,  271,  272,   60,   -1,   62,   -1,   -1,  257,  320,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  320,   -1,   -1,
   -1,  311,  271,  272,   -1,   -1,   -1,  271,  272,  319,
   -1,   -1,   -1,   -1,  320,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  320,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,  320,   -1,   33,   -1,   -1,  320,   37,   38,   -1,
   40,   -1,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   60,   61,   62,  262,   -1,   -1,  265,  266,  267,  320,
   -1,   -1,   -1,   -1,  273,  274,   -1,  320,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  257,   -1,
  257,   91,   -1,   -1,   94,  262,   -1,   -1,  265,  266,
  267,   -1,  271,  272,   -1,  262,  273,  274,  265,  266,
  267,   -1,  311,  312,  313,  282,  273,  274,   -1,   -1,
  319,   -1,   -1,   -1,  124,  282,  126,   -1,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,  320,  319,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,   37,   38,   -1,   40,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   59,   60,   61,   62,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  124,  125,   -1,   91,   37,   38,   94,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,  282,   60,
   61,   62,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,   -1,  307,  308,  309,  310,  124,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
  273,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   60,   61,   62,  124,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   91,   -1,   -1,   94,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,  124,   -1,   91,   -1,   93,   94,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   60,   61,   62,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  282,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  311,   -1,  307,  308,  309,
  310,  124,   -1,  319,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,  124,   37,
   38,   -1,   40,   41,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  124,  307,  308,  309,
  310,   91,   37,   38,   94,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   -1,   -1,   40,   -1,   -1,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   59,   -1,   61,   62,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  124,
   -1,  307,  308,  309,  310,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   60,   61,   62,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  124,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  124,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  124,  307,  308,  309,  310,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,  124,  307,  308,  309,  310,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,  124,   -1,   91,
   -1,   -1,   94,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  124,   -1,   91,   -1,   -1,   94,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,  124,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,  124,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,  124,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,  124,  307,  308,  309,  310,   91,
   37,   38,   94,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  124,   -1,  307,
  308,  309,  310,   91,   37,   38,   94,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   60,   61,   62,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  124,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,  124,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  124,   -1,  307,
  308,  309,  310,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,  124,  307,  308,  309,  310,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   91,   -1,   -1,   94,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,  124,   -1,
   91,   -1,   -1,   94,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   60,   61,   62,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  124,   -1,   91,   -1,   60,   94,   62,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,  124,   -1,   -1,   94,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   -1,   91,   -1,   60,
   94,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  124,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   94,   -1,  307,  308,  309,  310,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   94,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   60,   94,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   94,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   94,   60,   -1,
   62,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   94,   -1,  307,  308,  309,  310,   -1,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   94,   -1,  307,  308,  309,  310,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   94,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   94,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   94,
   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   94,   -1,  307,  308,  309,  310,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   94,   -1,  307,  308,  309,
  310,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   94,   -1,  307,  308,
  309,  310,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   94,   38,   -1,
   40,   41,   42,  257,   44,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   62,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   91,  307,  308,  309,  310,   -1,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  126,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  126,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  126,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,  257,   -1,   -1,   -1,   -1,
  262,   -1,  282,  265,  266,  267,   -1,  287,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  282,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,
  266,  267,  282,   -1,  126,   -1,   -1,  273,  274,  311,
  312,  313,  314,   -1,  316,  317,  282,  319,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  126,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,  126,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,   -1,   -1,  126,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  257,
   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,  267,
  282,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  282,   -1,  262,   -1,   -1,  265,
  266,  267,  126,   -1,   -1,   -1,   -1,  273,  274,  311,
  312,  313,  314,   -1,  316,  317,  282,  319,   -1,   -1,
  126,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  311,  312,  313,  314,  257,
  316,  317,   -1,  319,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,  126,   -1,   -1,   -1,
  282,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
  126,  319,   -1,   -1,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,  126,  319,   -1,   -1,   -1,   -1,  311,
  312,  313,  314,  257,  316,  317,   -1,  319,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,  257,   -1,   -1,   -1,   -1,  262,   -1,  282,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  257,
   -1,   -1,   -1,   -1,  262,   -1,  282,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,  311,  312,  313,
  314,   -1,  316,  317,  282,  319,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  311,  312,  313,  314,  257,  316,  317,
   -1,  319,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,
  266,  267,  282,   -1,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,   -1,   -1,   -1,  311,  312,
  313,  314,  257,  316,  317,   -1,  319,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,  319,   -1,   -1,   -1,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,  319,   -1,   -1,
   -1,   -1,  311,  312,  313,   -1,  257,   -1,   -1,   -1,
  319,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,  319,   -1,
   -1,   -1,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,  319,   -1,   -1,   -1,   -1,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,  319,
};
static int yyctable[] = {                                      1,
    2,  175,  185,  252,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  175,
  185,  252,   -1,    7,    2,   -1,    8,    2,  175,  185,
  252,   -1,    9,    2,  175,  185,  252,   -1,   10,    2,
  175,  185,  252,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  175,  185,
  252,   -1,   16,    2,  175,  185,  252,   -1,   17,    2,
   -1,   18,    2,  175,  185,  252,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,  175,
   -1,   30,    2,   -1,   31,    2,   -1,   32,    2,  175,
  252,   -1,   33,    2,  175,  252,   -1,   34,    2,  175,
  252,   -1,   35,    2,  175,  252,   -1,    2,  175,  252,
   -1,   36,    2,  175,  252,   -1,   37,    2,   -1,   38,
    2,   -1,   39,    2,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   99,  185,  253,   -1,    6,  185,  253,
   -1,  100,  185,  253,   -1,  101,  185,  253,   -1,  102,
  185,  253,   -1,  103,   63,  185,  253,   -1,   16,  185,
  253,   -1,   18,   63,  185,  253,   -1,  104,   63,   -1,
   32,  253,   -1,   33,  253,   -1,   34,  253,   -1,   36,
  253,   -1,  107,  185,  252,   -1,  185,  252,   -1,   32,
  252,   -1,   36,  252,   -1,  111,   66,   -1,    6,   66,
   -1,  100,   66,   -1,  101,   66,   -1,  102,   66,   -1,
   15,   66,   -1,   16,   66,   -1,   18,   66,   -1,  111,
  238,   -1,    6,  238,   -1,  100,  238,   -1,  101,  238,
   -1,  102,  238,   -1,   15,  238,   -1,   16,  238,   -1,
   18,  238,   -1,  111,  239,   -1,    6,  239,   -1,  100,
  239,   -1,  101,  239,   -1,  102,  239,   -1,   15,  239,
   -1,   16,  239,   -1,   18,  239,   -1,  111,  240,   -1,
    6,  240,   -1,  100,  240,   -1,  101,  240,   -1,  102,
  240,   -1,   15,  240,   -1,   16,  240,   -1,   18,  240,
   -1,  111,   68,   -1,    6,   68,   -1,  100,   68,   -1,
  101,   68,   -1,  102,   68,   -1,   15,   68,   -1,   16,
   68,   -1,   18,   68,   -1,  111,  185,   -1,    6,  185,
   -1,  100,  185,   -1,  101,  185,   -1,  102,  185,   -1,
   15,  185,   -1,   16,  185,   -1,   18,  185,   -1,    1,
  175,  185,  252,   -1,    6,  175,  185,  252,   -1,    8,
  175,  185,  252,   -1,    9,  175,  185,  252,   -1,   10,
  175,  185,  252,   -1,   15,  175,  185,  252,   -1,   16,
  175,  185,  252,   -1,   18,  175,  185,  252,   -1,   29,
  175,   -1,   32,  175,  252,   -1,   33,  175,  252,   -1,
   34,  175,  252,   -1,   35,  175,  252,   -1,  175,  252,
   -1,   36,  175,  252,   -1,  111,  320,   -1,   24,  320,
   -1,   25,  320,   -1,   26,  320,   -1,   27,  320,   -1,
   28,  320,   -1,   31,  320,   -1,  175,  185,   -1,   32,
  175,   -1,   36,  175,   -1,  206,  126,   -1,   76,  126,
   -1,  227,  175,  252,   -1,    6,  175,  252,   -1,    8,
  175,  252,   -1,    9,  175,  252,   -1,   10,  175,  252,
   -1,   15,  175,  252,   -1,   16,  175,  252,   -1,   18,
  175,  252,   -1,  272,   15,   -1,  284,  252,   -1,    6,
  252,   -1,  100,  252,   -1,  101,  252,   -1,  102,  252,
   -1,   15,  252,   -1,   16,  252,   -1,   18,  252,   -1,
  289,  252,   -1,   63,  255,   -1,  299,  185,  252,   -1,
    6,  185,  252,   -1,  100,  185,  252,   -1,  101,  185,
  252,   -1,  102,  185,  252,   -1,   15,  185,  252,   -1,
   16,  185,  252,   -1,   18,  185,  252,   -1,   33,  252,
   -1,   34,  252,   -1,  306,   76,   -1,  205,   76,   -1,
  308,  253,   -1,  306,   67,   -1,  205,   67,   -1,  206,
   67,   -1,  306,   70,   -1,  205,   70,   -1,  206,   70,
   -1,  306,   71,   -1,  205,   71,   -1,  206,   71,   -1,
  306,   72,   -1,  205,   72,   -1,  206,   72,   -1,  306,
   64,   -1,  205,   64,   -1,  206,   64,   -1,  306,   69,
   -1,  205,   69,   -1,  206,   69,   -1,  236,  272,   -1,
  237,  272,   -1,  238,  272,   -1,  239,  272,   -1,  240,
  272,   -1,  241,  272,   -1,  242,  272,   -1,  243,  272,
   -1,  244,  272,   -1,  245,  272,   -1,  246,  272,   -1,
  247,  272,   -1,  248,  272,   -1,  249,  272,   -1,  250,
  272,   -1,  251,  272,   -1,  252,  272,   -1,  253,  272,
   -1,  254,  272,   -1,  255,  272,   -1,  256,  272,   -1,
  257,  272,   -1,  258,  272,   -1,  259,  272,   -1,  260,
  272,   -1,  261,  272,   -1,  262,  272,   -1,  263,  272,
   -1,  264,  272,   -1,  265,  272,   -1,  266,  272,   -1,
  267,  272,   -1,  268,  272,   -1,  269,  272,   -1,  270,
  272,   -1,  236,  274,   -1,  237,  274,   -1,  238,  274,
   -1,  239,  274,   -1,  240,  274,   -1,  241,  274,   -1,
  242,  274,   -1,  243,  274,   -1,  244,  274,   -1,  245,
  274,   -1,  246,  274,   -1,  247,  274,   -1,  248,  274,
   -1,  249,  274,   -1,  250,  274,   -1,  251,  274,   -1,
  252,  274,   -1,  253,  274,   -1,  254,  274,   -1,  255,
  274,   -1,  256,  274,   -1,  257,  274,   -1,  258,  274,
   -1,  259,  274,   -1,  260,  274,   -1,  261,  274,   -1,
  262,  274,   -1,  263,  274,   -1,  264,  274,   -1,  265,
  274,   -1,  266,  274,   -1,  267,  274,   -1,  268,  274,
   -1,  269,  274,   -1,  270,  274,   -1,  236,  267,   -1,
  237,  267,   -1,  238,  267,   -1,  239,  267,   -1,  240,
  267,   -1,  241,  267,   -1,  242,  267,   -1,  243,  267,
   -1,  244,  267,   -1,  245,  267,   -1,  246,  267,   -1,
  247,  267,   -1,  248,  267,   -1,  249,  267,   -1,  250,
  267,   -1,  251,  267,   -1,  252,  267,   -1,  253,  267,
   -1,  254,  267,   -1,  255,  267,   -1,  256,  267,   -1,
  257,  267,   -1,  258,  267,   -1,  264,  267,   -1,  236,
  270,   -1,  237,  270,   -1,  238,  270,   -1,  239,  270,
   -1,  240,  270,   -1,  241,  270,   -1,  242,  270,   -1,
  243,  270,   -1,  244,  270,   -1,  245,  270,   -1,  246,
  270,   -1,  247,  270,   -1,  248,  270,   -1,  249,  270,
   -1,  250,  270,   -1,  251,  270,   -1,  252,  270,   -1,
  253,  270,   -1,  254,  270,   -1,  255,  270,   -1,  256,
  270,   -1,  257,  270,   -1,  258,  270,   -1,  264,  270,
   -1,  236,  271,   -1,  237,  271,   -1,  238,  271,   -1,
  239,  271,   -1,  240,  271,   -1,  241,  271,   -1,  242,
  271,   -1,  243,  271,   -1,  244,  271,   -1,  245,  271,
   -1,  246,  271,   -1,  247,  271,   -1,  248,  271,   -1,
  249,  271,   -1,  250,  271,   -1,  251,  271,   -1,  252,
  271,   -1,  253,  271,   -1,  254,  271,   -1,  255,  271,
   -1,  256,  271,   -1,  257,  271,   -1,  258,  271,   -1,
  264,  271,   -1,  332,   63,   -1,  236,  268,   -1,  237,
  268,   -1,  238,  268,   -1,  239,  268,   -1,  240,  268,
   -1,  241,  268,   -1,  242,  268,   -1,  243,  268,   -1,
  244,  268,   -1,  245,  268,   -1,  246,  268,   -1,  247,
  268,   -1,  248,  268,   -1,  249,  268,   -1,  250,  268,
   -1,  251,  268,   -1,  252,  268,   -1,  253,  268,   -1,
  254,  268,   -1,  255,  268,   -1,  256,  268,   -1,  257,
  268,   -1,  258,  268,   -1,  264,  268,   -1,  236,  269,
   -1,  237,  269,   -1,  238,  269,   -1,  239,  269,   -1,
  240,  269,   -1,  241,  269,   -1,  242,  269,   -1,  243,
  269,   -1,  244,  269,   -1,  245,  269,   -1,  246,  269,
   -1,  247,  269,   -1,  248,  269,   -1,  249,  269,   -1,
  250,  269,   -1,  251,  269,   -1,  252,  269,   -1,  253,
  269,   -1,  254,  269,   -1,  255,  269,   -1,  256,  269,
   -1,  257,  269,   -1,  258,  269,   -1,  264,  269,   -1,
  236,  316,   -1,  237,  316,   -1,  238,  316,   -1,  239,
  316,   -1,  240,  316,   -1,  241,  316,   -1,  242,  316,
   -1,  243,  316,   -1,  244,  316,   -1,  245,  316,   -1,
  246,  316,   -1,  247,  316,   -1,  248,  316,   -1,  249,
  316,   -1,  250,  316,   -1,  251,  316,   -1,  252,  316,
   -1,  253,  316,   -1,  254,  316,   -1,  255,  316,   -1,
  256,  316,   -1,  257,  316,   -1,  258,  316,   -1,  259,
  316,   -1,  260,  316,   -1,  261,  316,   -1,  262,  316,
   -1,  263,  316,   -1,  264,  316,   -1,  265,  316,   -1,
  266,  316,   -1,  267,  316,   -1,  268,  316,   -1,  269,
  316,   -1,  270,  316,   -1,  236,  317,   -1,  237,  317,
   -1,  238,  317,   -1,  239,  317,   -1,  240,  317,   -1,
  241,  317,   -1,  242,  317,   -1,  243,  317,   -1,  244,
  317,   -1,  245,  317,   -1,  246,  317,   -1,  247,  317,
   -1,  248,  317,   -1,  249,  317,   -1,  250,  317,   -1,
  251,  317,   -1,  252,  317,   -1,  253,  317,   -1,  254,
  317,   -1,  255,  317,   -1,  256,  317,   -1,  257,  317,
   -1,  258,  317,   -1,  259,  317,   -1,  260,  317,   -1,
  261,  317,   -1,  262,  317,   -1,  263,  317,   -1,  264,
  317,   -1,  265,  317,   -1,  266,  317,   -1,  267,  317,
   -1,  268,  317,   -1,  269,  317,   -1,  270,  317,   -1,
  236,  319,   -1,  237,  319,   -1,  238,  319,   -1,  239,
  319,   -1,  240,  319,   -1,  241,  319,   -1,  242,  319,
   -1,  243,  319,   -1,  244,  319,   -1,  245,  319,   -1,
  246,  319,   -1,  247,  319,   -1,  248,  319,   -1,  249,
  319,   -1,  250,  319,   -1,  251,  319,   -1,  252,  319,
   -1,  253,  319,   -1,  254,  319,   -1,  255,  319,   -1,
  256,  319,   -1,  257,  319,   -1,  258,  319,   -1,  259,
  319,   -1,  260,  319,   -1,  261,  319,   -1,  262,  319,
   -1,  263,  319,   -1,  264,  319,   -1,  265,  319,   -1,
  266,  319,   -1,  267,  319,   -1,  268,  319,   -1,  269,
  319,   -1,  270,  319,   -1,  107,  252,   -1,   32,  185,
   -1,   36,  185,   -1,  376,   63,  253,   -1,   63,  253,
   -1,  198,  199,   -1,  277,  198,   -1,  309,  196,   -1,
  111,  251,   -1,  456,   46,   -1,  457,   46,   -1,  458,
   46,   -1,  459,   46,   -1,  471,   63,   -1,  306,   65,
   -1,  205,   65,   -1,  206,   65,   -1,  236,  287,   -1,
  237,  287,   -1,  238,  287,   -1,  239,  287,   -1,  240,
  287,   -1,  241,  287,   -1,  242,  287,   -1,  243,  287,
   -1,  244,  287,   -1,  245,  287,   -1,  246,  287,   -1,
  247,  287,   -1,  248,  287,   -1,  249,  287,   -1,  250,
  287,   -1,  251,  287,   -1,  252,  287,   -1,  253,  287,
   -1,  254,  287,   -1,  255,  287,   -1,  256,  287,   -1,
  257,  287,   -1,  258,  287,   -1,  259,  287,   -1,  260,
  287,   -1,  261,  287,   -1,  262,  287,   -1,  263,  287,
   -1,  264,  287,   -1,  265,  287,   -1,  266,  287,   -1,
  267,  287,   -1,  268,  287,   -1,  269,  287,   -1,  270,
  287,   -1,  236,  288,   -1,  237,  288,   -1,  238,  288,
   -1,  239,  288,   -1,  240,  288,   -1,  241,  288,   -1,
  242,  288,   -1,  243,  288,   -1,  244,  288,   -1,  245,
  288,   -1,  246,  288,   -1,  247,  288,   -1,  248,  288,
   -1,  249,  288,   -1,  250,  288,   -1,  251,  288,   -1,
  252,  288,   -1,  253,  288,   -1,  254,  288,   -1,  255,
  288,   -1,  256,  288,   -1,  257,  288,   -1,  258,  288,
   -1,  259,  288,   -1,  260,  288,   -1,  261,  288,   -1,
  262,  288,   -1,  263,  288,   -1,  264,  288,   -1,  265,
  288,   -1,  266,  288,   -1,  267,  288,   -1,  268,  288,
   -1,  269,  288,   -1,  270,  288,   -1,  236,  289,   -1,
  237,  289,   -1,  238,  289,   -1,  239,  289,   -1,  240,
  289,   -1,  241,  289,   -1,  242,  289,   -1,  243,  289,
   -1,  244,  289,   -1,  245,  289,   -1,  246,  289,   -1,
  247,  289,   -1,  248,  289,   -1,  249,  289,   -1,  250,
  289,   -1,  251,  289,   -1,  252,  289,   -1,  253,  289,
   -1,  254,  289,   -1,  255,  289,   -1,  256,  289,   -1,
  257,  289,   -1,  258,  289,   -1,  259,  289,   -1,  260,
  289,   -1,  261,  289,   -1,  262,  289,   -1,  263,  289,
   -1,  264,  289,   -1,  265,  289,   -1,  266,  289,   -1,
  267,  289,   -1,  268,  289,   -1,  269,  289,   -1,  270,
  289,   -1,  236,  290,   -1,  237,  290,   -1,  238,  290,
   -1,  239,  290,   -1,  240,  290,   -1,  241,  290,   -1,
  242,  290,   -1,  243,  290,   -1,  244,  290,   -1,  245,
  290,   -1,  246,  290,   -1,  247,  290,   -1,  248,  290,
   -1,  249,  290,   -1,  250,  290,   -1,  251,  290,   -1,
  252,  290,   -1,  253,  290,   -1,  254,  290,   -1,  255,
  290,   -1,  256,  290,   -1,  257,  290,   -1,  258,  290,
   -1,  259,  290,   -1,  260,  290,   -1,  261,  290,   -1,
  262,  290,   -1,  263,  290,   -1,  264,  290,   -1,  265,
  290,   -1,  266,  290,   -1,  267,  290,   -1,  268,  290,
   -1,  269,  290,   -1,  270,  290,   -1,  236,  291,   -1,
  237,  291,   -1,  238,  291,   -1,  239,  291,   -1,  240,
  291,   -1,  241,  291,   -1,  242,  291,   -1,  243,  291,
   -1,  244,  291,   -1,  245,  291,   -1,  246,  291,   -1,
  247,  291,   -1,  248,  291,   -1,  249,  291,   -1,  250,
  291,   -1,  251,  291,   -1,  252,  291,   -1,  253,  291,
   -1,  254,  291,   -1,  255,  291,   -1,  256,  291,   -1,
  257,  291,   -1,  258,  291,   -1,  259,  291,   -1,  260,
  291,   -1,  261,  291,   -1,  262,  291,   -1,  263,  291,
   -1,  264,  291,   -1,  265,  291,   -1,  266,  291,   -1,
  267,  291,   -1,  268,  291,   -1,  269,  291,   -1,  270,
  291,   -1,  236,  292,   -1,  237,  292,   -1,  238,  292,
   -1,  239,  292,   -1,  240,  292,   -1,  241,  292,   -1,
  242,  292,   -1,  243,  292,   -1,  244,  292,   -1,  245,
  292,   -1,  246,  292,   -1,  247,  292,   -1,  248,  292,
   -1,  249,  292,   -1,  250,  292,   -1,  251,  292,   -1,
  252,  292,   -1,  253,  292,   -1,  254,  292,   -1,  255,
  292,   -1,  256,  292,   -1,  257,  292,   -1,  258,  292,
   -1,  259,  292,   -1,  260,  292,   -1,  261,  292,   -1,
  262,  292,   -1,  263,  292,   -1,  264,  292,   -1,  265,
  292,   -1,  266,  292,   -1,  267,  292,   -1,  268,  292,
   -1,  269,  292,   -1,  270,  292,   -1,  236,  293,   -1,
  237,  293,   -1,  238,  293,   -1,  239,  293,   -1,  240,
  293,   -1,  241,  293,   -1,  242,  293,   -1,  243,  293,
   -1,  244,  293,   -1,  245,  293,   -1,  246,  293,   -1,
  247,  293,   -1,  248,  293,   -1,  249,  293,   -1,  250,
  293,   -1,  251,  293,   -1,  252,  293,   -1,  253,  293,
   -1,  254,  293,   -1,  255,  293,   -1,  256,  293,   -1,
  257,  293,   -1,  258,  293,   -1,  259,  293,   -1,  260,
  293,   -1,  261,  293,   -1,  262,  293,   -1,  263,  293,
   -1,  264,  293,   -1,  265,  293,   -1,  266,  293,   -1,
  267,  293,   -1,  268,  293,   -1,  269,  293,   -1,  270,
  293,   -1,  236,  294,   -1,  237,  294,   -1,  238,  294,
   -1,  239,  294,   -1,  240,  294,   -1,  241,  294,   -1,
  242,  294,   -1,  243,  294,   -1,  244,  294,   -1,  245,
  294,   -1,  246,  294,   -1,  247,  294,   -1,  248,  294,
   -1,  249,  294,   -1,  250,  294,   -1,  251,  294,   -1,
  252,  294,   -1,  253,  294,   -1,  254,  294,   -1,  255,
  294,   -1,  256,  294,   -1,  257,  294,   -1,  258,  294,
   -1,  259,  294,   -1,  260,  294,   -1,  261,  294,   -1,
  262,  294,   -1,  263,  294,   -1,  264,  294,   -1,  265,
  294,   -1,  266,  294,   -1,  267,  294,   -1,  268,  294,
   -1,  269,  294,   -1,  270,  294,   -1,  236,  295,   -1,
  237,  295,   -1,  238,  295,   -1,  239,  295,   -1,  240,
  295,   -1,  241,  295,   -1,  242,  295,   -1,  243,  295,
   -1,  244,  295,   -1,  245,  295,   -1,  246,  295,   -1,
  247,  295,   -1,  248,  295,   -1,  249,  295,   -1,  250,
  295,   -1,  251,  295,   -1,  252,  295,   -1,  253,  295,
   -1,  254,  295,   -1,  255,  295,   -1,  256,  295,   -1,
  257,  295,   -1,  258,  295,   -1,  264,  295,   -1,  236,
  296,   -1,  237,  296,   -1,  238,  296,   -1,  239,  296,
   -1,  240,  296,   -1,  241,  296,   -1,  242,  296,   -1,
  243,  296,   -1,  244,  296,   -1,  245,  296,   -1,  246,
  296,   -1,  247,  296,   -1,  248,  296,   -1,  249,  296,
   -1,  250,  296,   -1,  251,  296,   -1,  252,  296,   -1,
  253,  296,   -1,  254,  296,   -1,  255,  296,   -1,  256,
  296,   -1,  257,  296,   -1,  258,  296,   -1,  264,  296,
   -1,  236,  297,   -1,  237,  297,   -1,  238,  297,   -1,
  239,  297,   -1,  240,  297,   -1,  241,  297,   -1,  242,
  297,   -1,  243,  297,   -1,  244,  297,   -1,  245,  297,
   -1,  246,  297,   -1,  247,  297,   -1,  248,  297,   -1,
  249,  297,   -1,  250,  297,   -1,  251,  297,   -1,  252,
  297,   -1,  253,  297,   -1,  254,  297,   -1,  255,  297,
   -1,  256,  297,   -1,  257,  297,   -1,  258,  297,   -1,
  259,  297,   -1,  260,  297,   -1,  261,  297,   -1,  262,
  297,   -1,  263,  297,   -1,  264,  297,   -1,  265,  297,
   -1,  266,  297,   -1,  267,  297,   -1,  268,  297,   -1,
  269,  297,   -1,  270,  297,   -1,  236,  298,   -1,  237,
  298,   -1,  238,  298,   -1,  239,  298,   -1,  240,  298,
   -1,  241,  298,   -1,  242,  298,   -1,  243,  298,   -1,
  244,  298,   -1,  245,  298,   -1,  246,  298,   -1,  247,
  298,   -1,  248,  298,   -1,  249,  298,   -1,  250,  298,
   -1,  251,  298,   -1,  252,  298,   -1,  253,  298,   -1,
  254,  298,   -1,  255,  298,   -1,  256,  298,   -1,  257,
  298,   -1,  258,  298,   -1,  259,  298,   -1,  260,  298,
   -1,  261,  298,   -1,  262,  298,   -1,  263,  298,   -1,
  264,  298,   -1,  265,  298,   -1,  266,  298,   -1,  267,
  298,   -1,  268,  298,   -1,  269,  298,   -1,  270,  298,
   -1,  236,  299,   -1,  237,  299,   -1,  238,  299,   -1,
  239,  299,   -1,  240,  299,   -1,  241,  299,   -1,  242,
  299,   -1,  243,  299,   -1,  244,  299,   -1,  245,  299,
   -1,  246,  299,   -1,  247,  299,   -1,  248,  299,   -1,
  249,  299,   -1,  250,  299,   -1,  251,  299,   -1,  252,
  299,   -1,  253,  299,   -1,  254,  299,   -1,  255,  299,
   -1,  256,  299,   -1,  257,  299,   -1,  258,  299,   -1,
  264,  299,   -1,  236,  300,   -1,  237,  300,   -1,  238,
  300,   -1,  239,  300,   -1,  240,  300,   -1,  241,  300,
   -1,  242,  300,   -1,  243,  300,   -1,  244,  300,   -1,
  245,  300,   -1,  246,  300,   -1,  247,  300,   -1,  248,
  300,   -1,  249,  300,   -1,  250,  300,   -1,  251,  300,
   -1,  252,  300,   -1,  253,  300,   -1,  254,  300,   -1,
  255,  300,   -1,  256,  300,   -1,  257,  300,   -1,  258,
  300,   -1,  259,  300,   -1,  260,  300,   -1,  261,  300,
   -1,  262,  300,   -1,  263,  300,   -1,  264,  300,   -1,
  265,  300,   -1,  266,  300,   -1,  267,  300,   -1,  268,
  300,   -1,  269,  300,   -1,  270,  300,   -1,  236,  301,
   -1,  237,  301,   -1,  238,  301,   -1,  239,  301,   -1,
  240,  301,   -1,  241,  301,   -1,  242,  301,   -1,  243,
  301,   -1,  244,  301,   -1,  245,  301,   -1,  246,  301,
   -1,  247,  301,   -1,  248,  301,   -1,  249,  301,   -1,
  250,  301,   -1,  251,  301,   -1,  252,  301,   -1,  253,
  301,   -1,  254,  301,   -1,  255,  301,   -1,  256,  301,
   -1,  257,  301,   -1,  258,  301,   -1,  259,  301,   -1,
  260,  301,   -1,  261,  301,   -1,  262,  301,   -1,  263,
  301,   -1,  264,  301,   -1,  265,  301,   -1,  266,  301,
   -1,  267,  301,   -1,  268,  301,   -1,  269,  301,   -1,
  270,  301,   -1,  236,  302,   -1,  237,  302,   -1,  238,
  302,   -1,  239,  302,   -1,  240,  302,   -1,  241,  302,
   -1,  242,  302,   -1,  243,  302,   -1,  244,  302,   -1,
  245,  302,   -1,  246,  302,   -1,  247,  302,   -1,  248,
  302,   -1,  249,  302,   -1,  250,  302,   -1,  251,  302,
   -1,  252,  302,   -1,  253,  302,   -1,  254,  302,   -1,
  255,  302,   -1,  256,  302,   -1,  257,  302,   -1,  258,
  302,   -1,  259,  302,   -1,  260,  302,   -1,  261,  302,
   -1,  262,  302,   -1,  263,  302,   -1,  264,  302,   -1,
  265,  302,   -1,  266,  302,   -1,  267,  302,   -1,  268,
  302,   -1,  269,  302,   -1,  270,  302,   -1,  236,  303,
   -1,  237,  303,   -1,  238,  303,   -1,  239,  303,   -1,
  240,  303,   -1,  241,  303,   -1,  242,  303,   -1,  243,
  303,   -1,  244,  303,   -1,  245,  303,   -1,  246,  303,
   -1,  247,  303,   -1,  248,  303,   -1,  249,  303,   -1,
  250,  303,   -1,  251,  303,   -1,  252,  303,   -1,  253,
  303,   -1,  254,  303,   -1,  255,  303,   -1,  256,  303,
   -1,  257,  303,   -1,  258,  303,   -1,  259,  303,   -1,
  260,  303,   -1,  261,  303,   -1,  262,  303,   -1,  263,
  303,   -1,  264,  303,   -1,  265,  303,   -1,  266,  303,
   -1,  267,  303,   -1,  268,  303,   -1,  269,  303,   -1,
  270,  303,   -1,  236,  305,   -1,  237,  305,   -1,  238,
  305,   -1,  239,  305,   -1,  240,  305,   -1,  241,  305,
   -1,  242,  305,   -1,  243,  305,   -1,  244,  305,   -1,
  245,  305,   -1,  246,  305,   -1,  247,  305,   -1,  248,
  305,   -1,  249,  305,   -1,  250,  305,   -1,  251,  305,
   -1,  252,  305,   -1,  253,  305,   -1,  254,  305,   -1,
  255,  305,   -1,  256,  305,   -1,  257,  305,   -1,  258,
  305,   -1,  264,  305,   -1,  236,  306,   -1,  237,  306,
   -1,  238,  306,   -1,  239,  306,   -1,  240,  306,   -1,
  241,  306,   -1,  242,  306,   -1,  243,  306,   -1,  244,
  306,   -1,  245,  306,   -1,  246,  306,   -1,  247,  306,
   -1,  248,  306,   -1,  249,  306,   -1,  250,  306,   -1,
  251,  306,   -1,  252,  306,   -1,  253,  306,   -1,  254,
  306,   -1,  255,  306,   -1,  256,  306,   -1,  257,  306,
   -1,  258,  306,   -1,  259,  306,   -1,  260,  306,   -1,
  261,  306,   -1,  262,  306,   -1,  263,  306,   -1,  264,
  306,   -1,  265,  306,   -1,  266,  306,   -1,  267,  306,
   -1,  268,  306,   -1,  269,  306,   -1,  270,  306,   -1,
  236,  285,   -1,  237,  285,   -1,  238,  285,   -1,  239,
  285,   -1,  240,  285,   -1,  241,  285,   -1,  242,  285,
   -1,  243,  285,   -1,  244,  285,   -1,  245,  285,   -1,
  246,  285,   -1,  247,  285,   -1,  248,  285,   -1,  249,
  285,   -1,  250,  285,   -1,  251,  285,   -1,  252,  285,
   -1,  253,  285,   -1,  254,  285,   -1,  255,  285,   -1,
  256,  285,   -1,  257,  285,   -1,  258,  285,   -1,  259,
  285,   -1,  260,  285,   -1,  261,  285,   -1,  262,  285,
   -1,  263,  285,   -1,  264,  285,   -1,  265,  285,   -1,
  266,  285,   -1,  267,  285,   -1,  268,  285,   -1,  269,
  285,   -1,  270,  285,   -1,  236,  286,   -1,  237,  286,
   -1,  238,  286,   -1,  239,  286,   -1,  240,  286,   -1,
  241,  286,   -1,  242,  286,   -1,  243,  286,   -1,  244,
  286,   -1,  245,  286,   -1,  246,  286,   -1,  247,  286,
   -1,  248,  286,   -1,  249,  286,   -1,  250,  286,   -1,
  251,  286,   -1,  252,  286,   -1,  253,  286,   -1,  254,
  286,   -1,  255,  286,   -1,  256,  286,   -1,  257,  286,
   -1,  258,  286,   -1,  259,  286,   -1,  260,  286,   -1,
  261,  286,   -1,  262,  286,   -1,  263,  286,   -1,  264,
  286,   -1,  265,  286,   -1,  266,  286,   -1,  267,  286,
   -1,  268,  286,   -1,  269,  286,   -1,  270,  286,   -1,
  236,  276,   -1,  237,  276,   -1,  238,  276,   -1,  239,
  276,   -1,  240,  276,   -1,  241,  276,   -1,  242,  276,
   -1,  243,  276,   -1,  244,  276,   -1,  245,  276,   -1,
  246,  276,   -1,  247,  276,   -1,  248,  276,   -1,  249,
  276,   -1,  250,  276,   -1,  251,  276,   -1,  252,  276,
   -1,  253,  276,   -1,  254,  276,   -1,  255,  276,   -1,
  256,  276,   -1,  257,  276,   -1,  258,  276,   -1,  264,
  276,   -1,  236,  277,   -1,  237,  277,   -1,  238,  277,
   -1,  239,  277,   -1,  240,  277,   -1,  241,  277,   -1,
  242,  277,   -1,  243,  277,   -1,  244,  277,   -1,  245,
  277,   -1,  246,  277,   -1,  247,  277,   -1,  248,  277,
   -1,  249,  277,   -1,  250,  277,   -1,  251,  277,   -1,
  252,  277,   -1,  253,  277,   -1,  254,  277,   -1,  255,
  277,   -1,  256,  277,   -1,  257,  277,   -1,  258,  277,
   -1,  264,  277,   -1,  236,  278,   -1,  237,  278,   -1,
  238,  278,   -1,  239,  278,   -1,  240,  278,   -1,  241,
  278,   -1,  242,  278,   -1,  243,  278,   -1,  244,  278,
   -1,  245,  278,   -1,  246,  278,   -1,  247,  278,   -1,
  248,  278,   -1,  249,  278,   -1,  250,  278,   -1,  251,
  278,   -1,  252,  278,   -1,  253,  278,   -1,  254,  278,
   -1,  255,  278,   -1,  256,  278,   -1,  257,  278,   -1,
  258,  278,   -1,  264,  278,   -1,  236,  279,   -1,  237,
  279,   -1,  238,  279,   -1,  239,  279,   -1,  240,  279,
   -1,  241,  279,   -1,  242,  279,   -1,  243,  279,   -1,
  244,  279,   -1,  245,  279,   -1,  246,  279,   -1,  247,
  279,   -1,  248,  279,   -1,  249,  279,   -1,  250,  279,
   -1,  251,  279,   -1,  252,  279,   -1,  253,  279,   -1,
  254,  279,   -1,  255,  279,   -1,  256,  279,   -1,  257,
  279,   -1,  258,  279,   -1,  264,  279,   -1,  236,  280,
   -1,  237,  280,   -1,  238,  280,   -1,  239,  280,   -1,
  240,  280,   -1,  241,  280,   -1,  242,  280,   -1,  243,
  280,   -1,  244,  280,   -1,  245,  280,   -1,  246,  280,
   -1,  247,  280,   -1,  248,  280,   -1,  249,  280,   -1,
  250,  280,   -1,  251,  280,   -1,  252,  280,   -1,  253,
  280,   -1,  254,  280,   -1,  255,  280,   -1,  256,  280,
   -1,  257,  280,   -1,  258,  280,   -1,  264,  280,   -1,
  236,  283,   -1,  237,  283,   -1,  238,  283,   -1,  239,
  283,   -1,  240,  283,   -1,  241,  283,   -1,  242,  283,
   -1,  243,  283,   -1,  244,  283,   -1,  245,  283,   -1,
  246,  283,   -1,  247,  283,   -1,  248,  283,   -1,  249,
  283,   -1,  250,  283,   -1,  251,  283,   -1,  252,  283,
   -1,  253,  283,   -1,  254,  283,   -1,  255,  283,   -1,
  256,  283,   -1,  257,  283,   -1,  258,  283,   -1,  259,
  283,   -1,  260,  283,   -1,  261,  283,   -1,  262,  283,
   -1,  263,  283,   -1,  264,  283,   -1,  265,  283,   -1,
  266,  283,   -1,  267,  283,   -1,  268,  283,   -1,  269,
  283,   -1,  270,  283,   -1,  236,  281,   -1,  237,  281,
   -1,  238,  281,   -1,  239,  281,   -1,  240,  281,   -1,
  241,  281,   -1,  242,  281,   -1,  243,  281,   -1,  244,
  281,   -1,  245,  281,   -1,  246,  281,   -1,  247,  281,
   -1,  248,  281,   -1,  249,  281,   -1,  250,  281,   -1,
  251,  281,   -1,  252,  281,   -1,  253,  281,   -1,  254,
  281,   -1,  255,  281,   -1,  256,  281,   -1,  257,  281,
   -1,  258,  281,   -1,  264,  281,   -1,  236,  282,   -1,
  237,  282,   -1,  238,  282,   -1,  239,  282,   -1,  240,
  282,   -1,  241,  282,   -1,  242,  282,   -1,  243,  282,
   -1,  244,  282,   -1,  245,  282,   -1,  246,  282,   -1,
  247,  282,   -1,  248,  282,   -1,  249,  282,   -1,  250,
  282,   -1,  251,  282,   -1,  252,  282,   -1,  253,  282,
   -1,  254,  282,   -1,  255,  282,   -1,  256,  282,   -1,
  257,  282,   -1,  258,  282,   -1,  264,  282,   -1,  236,
  284,   -1,  237,  284,   -1,  238,  284,   -1,  239,  284,
   -1,  240,  284,   -1,  241,  284,   -1,  242,  284,   -1,
  243,  284,   -1,  244,  284,   -1,  245,  284,   -1,  246,
  284,   -1,  247,  284,   -1,  248,  284,   -1,  249,  284,
   -1,  250,  284,   -1,  251,  284,   -1,  252,  284,   -1,
  253,  284,   -1,  254,  284,   -1,  255,  284,   -1,  256,
  284,   -1,  257,  284,   -1,  258,  284,   -1,  264,  284,
   -1,  236,  304,   -1,  237,  304,   -1,  238,  304,   -1,
  239,  304,   -1,  240,  304,   -1,  241,  304,   -1,  242,
  304,   -1,  243,  304,   -1,  244,  304,   -1,  245,  304,
   -1,  246,  304,   -1,  247,  304,   -1,  248,  304,   -1,
  249,  304,   -1,  250,  304,   -1,  251,  304,   -1,  252,
  304,   -1,  253,  304,   -1,  254,  304,   -1,  255,  304,
   -1,  256,  304,   -1,  257,  304,   -1,  258,  304,   -1,
  264,  304,   -1,  284,  185,  252,   -1,  236,  310,   -1,
  237,  310,   -1,  238,  310,   -1,  239,  310,   -1,  240,
  310,   -1,  241,  310,   -1,  242,  310,   -1,  243,  310,
   -1,  244,  310,   -1,  245,  310,   -1,  246,  310,   -1,
  247,  310,   -1,  248,  310,   -1,  249,  310,   -1,  250,
  310,   -1,  251,  310,   -1,  252,  310,   -1,  253,  310,
   -1,  254,  310,   -1,  255,  310,   -1,  256,  310,   -1,
  257,  310,   -1,  258,  310,   -1,  259,  310,   -1,  260,
  310,   -1,  261,  310,   -1,  262,  310,   -1,  263,  310,
   -1,  264,  310,   -1,  265,  310,   -1,  266,  310,   -1,
  267,  310,   -1,  268,  310,   -1,  269,  310,   -1,  270,
  310,   -1,  236,  318,   -1,  237,  318,   -1,  238,  318,
   -1,  239,  318,   -1,  240,  318,   -1,  241,  318,   -1,
  242,  318,   -1,  243,  318,   -1,  244,  318,   -1,  245,
  318,   -1,  246,  318,   -1,  247,  318,   -1,  248,  318,
   -1,  249,  318,   -1,  250,  318,   -1,  251,  318,   -1,
  252,  318,   -1,  253,  318,   -1,  254,  318,   -1,  255,
  318,   -1,  256,  318,   -1,  257,  318,   -1,  258,  318,
   -1,  259,  318,   -1,  260,  318,   -1,  261,  318,   -1,
  262,  318,   -1,  263,  318,   -1,  264,  318,   -1,  265,
  318,   -1,  266,  318,   -1,  267,  318,   -1,  268,  318,
   -1,  269,  318,   -1,  270,  318,   -1,  536,   63,   -1,
  507,   86,   -1,   13,   86,   -1,   14,   86,   -1,  509,
   86,   -1,  258,  249,   -1,
};
#define YYFINAL 46
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 348
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq",
"tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift",
"tknRShift","tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq",
"tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow",
"tknArrowStar","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew",
"tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"ifblock : ifblock tknElse '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter '{' stmtlist '}'",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1065 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3892 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 280 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4282 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 287 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4288 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 288 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4298 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 293 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4308 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 298 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4314 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 301 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4320 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 302 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4326 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4332 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4338 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4344 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4350 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4356 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4362 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4368 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4374 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4380 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4386 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4392 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4398 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4404 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4410 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4416 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4422 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4428 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4434 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4440 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4446 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4452 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4458 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4464 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4470 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4476 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4482 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 331 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4491 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 335 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4500 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 339 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-4].ifBlock;
                    yyval.ifBlock->elseBlock_ = yyvsp[-1].cppCompundObj;
                  }
#line 4509 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 345 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4518 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 349 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4527 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 355 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4536 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 359 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4545 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4553 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 368 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4561 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 373 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4569 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 376 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4577 "y_tab.c"
break;
case 45:
#line 381 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4582 "y_tab.c"
  if (!yytrial)
#line 381 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4589 "y_tab.c"
break;
case 46:
#line 385 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4594 "y_tab.c"
  if (!yytrial)
#line 385 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4601 "y_tab.c"
break;
case 47:
#line 389 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4606 "y_tab.c"
  if (!yytrial)
#line 389 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4613 "y_tab.c"
break;
case 48:
#line 393 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4618 "y_tab.c"
  if (!yytrial)
#line 393 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4625 "y_tab.c"
break;
case 49:
#line 397 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4630 "y_tab.c"
  if (!yytrial)
#line 397 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4637 "y_tab.c"
break;
case 50:
#line 401 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4642 "y_tab.c"
  if (!yytrial)
#line 401 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4649 "y_tab.c"
break;
case 51:
#line 407 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4654 "y_tab.c"
  if (!yytrial)
#line 407 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4658 "y_tab.c"
break;
case 52:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4663 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4667 "y_tab.c"
break;
case 53:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4672 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4676 "y_tab.c"
break;
case 54:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4681 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4685 "y_tab.c"
break;
case 55:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4690 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4694 "y_tab.c"
break;
case 56:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4699 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4703 "y_tab.c"
break;
case 57:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4708 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4712 "y_tab.c"
break;
case 58:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4717 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4721 "y_tab.c"
break;
case 59:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4726 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4730 "y_tab.c"
break;
case 60:
#line 425 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4735 "y_tab.c"
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4739 "y_tab.c"
break;
case 61:
#line 428 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4744 "y_tab.c"
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4748 "y_tab.c"
break;
case 62:
#line 429 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4753 "y_tab.c"
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4757 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4763 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4769 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4775 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4781 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4787 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4793 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4799 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 439 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4805 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4811 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4817 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4823 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4829 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4838 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4844 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4850 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 454 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4856 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4862 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 458 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4868 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4874 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4880 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4886 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4895 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 468 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4904 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 472 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4912 "y_tab.c"
break;
case 87:
#line 477 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4917 "y_tab.c"
  if (!yytrial)
#line 477 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4923 "y_tab.c"
break;
case 88:
#line 480 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4928 "y_tab.c"
  if (!yytrial)
#line 480 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4934 "y_tab.c"
break;
case 89:
#line 483 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4939 "y_tab.c"
  if (!yytrial)
#line 483 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4945 "y_tab.c"
break;
case 90:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4950 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4956 "y_tab.c"
break;
case 91:
#line 490 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4961 "y_tab.c"
  if (!yytrial)
#line 490 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4967 "y_tab.c"
break;
case 92:
#line 493 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4972 "y_tab.c"
  if (!yytrial)
#line 493 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4978 "y_tab.c"
break;
case 93:
#line 496 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4983 "y_tab.c"
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4989 "y_tab.c"
break;
case 94:
#line 501 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4994 "y_tab.c"
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4998 "y_tab.c"
break;
case 95:
#line 502 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5003 "y_tab.c"
  if (!yytrial)
#line 502 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 5007 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 5013 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 508 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 5022 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 514 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 5028 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 517 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 5039 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 523 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 5049 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 528 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 5060 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 534 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 5070 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 539 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 5081 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 545 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 5091 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 554 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 5099 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 557 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 5107 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 560 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 5115 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 566 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 5123 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 569 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 5132 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 573 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 5140 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 5146 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 579 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5152 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 582 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 5160 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 585 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 5169 "y_tab.c"
break;
case 115:
#line 591 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5174 "y_tab.c"
  if (!yytrial)
#line 591 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 5180 "y_tab.c"
break;
case 116:
#line 594 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5185 "y_tab.c"
  if (!yytrial)
#line 594 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-3].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[-1].cppCompundObj;
                  }
#line 5192 "y_tab.c"
break;
case 117:
#line 600 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5197 "y_tab.c"
  if (!yytrial)
#line 600 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5201 "y_tab.c"
break;
case 118:
#line 603 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5206 "y_tab.c"
  if (!yytrial)
#line 603 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 5214 "y_tab.c"
break;
case 119:
#line 610 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5219 "y_tab.c"
  if (!yytrial)
#line 610 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5226 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5236 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 620 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5246 "y_tab.c"
break;
case 122:
#line 627 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5251 "y_tab.c"
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5255 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5265 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5275 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5284 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5290 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5296 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5302 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5308 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5314 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5320 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5326 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5332 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5338 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5344 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5350 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5356 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5362 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5368 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5374 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5380 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5386 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5392 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5398 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5404 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5410 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5416 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5422 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5428 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5434 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5440 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5446 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5452 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5458 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5464 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5470 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5476 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5482 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5488 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5494 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5500 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5506 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5512 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5518 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5524 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5530 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5539 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5548 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5554 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5560 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5566 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5572 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5578 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5584 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5590 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5596 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5602 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5608 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5614 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5620 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5626 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 718 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5632 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5638 "y_tab.c"
break;
case 184:
#line 720 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5643 "y_tab.c"
  if (!yytrial)
#line 721 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5647 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5653 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 725 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5659 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 726 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5665 "y_tab.c"
break;
case 188:
#line 729 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5670 "y_tab.c"
  if (!yytrial)
#line 729 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5674 "y_tab.c"
break;
case 189:
#line 735 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5679 "y_tab.c"
  if (!yytrial)
#line 736 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5687 "y_tab.c"
break;
case 190:
#line 741 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5692 "y_tab.c"
break;
case 191:
#line 745 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5697 "y_tab.c"
  if (!yytrial)
#line 746 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5704 "y_tab.c"
break;
case 192:
#line 750 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5709 "y_tab.c"
break;
case 193:
#line 754 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5714 "y_tab.c"
  if (!yytrial)
#line 755 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5721 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 759 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5730 "y_tab.c"
break;
case 195:
#line 766 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5742 "y_tab.c"
  if (!yytrial)
#line 774 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5748 "y_tab.c"
break;
case 196:
#line 777 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5753 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 778 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5761 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 781 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5770 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5776 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 788 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5782 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 789 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5788 "y_tab.c"
break;
case 202:
#line 792 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5793 "y_tab.c"
  if (!yytrial)
#line 792 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5797 "y_tab.c"
break;
case 203:
#line 795 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5802 "y_tab.c"
  if (!yytrial)
#line 796 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5809 "y_tab.c"
break;
case 204:
#line 800 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5814 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 802 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5823 "y_tab.c"
break;
case 206:
#line 806 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5828 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 808 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5837 "y_tab.c"
break;
case 208:
#line 815 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5849 "y_tab.c"
  if (!yytrial)
#line 823 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5857 "y_tab.c"
break;
case 209:
#line 829 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5869 "y_tab.c"
  if (!yytrial)
#line 837 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5877 "y_tab.c"
break;
case 210:
#line 843 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5889 "y_tab.c"
  if (!yytrial)
#line 851 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5897 "y_tab.c"
break;
case 211:
  if (!yytrial)
#line 858 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5907 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 863 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5916 "y_tab.c"
break;
case 213:
#line 869 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5921 "y_tab.c"
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5925 "y_tab.c"
break;
case 214:
#line 872 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5930 "y_tab.c"
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5934 "y_tab.c"
break;
case 215:
#line 873 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5939 "y_tab.c"
  if (!yytrial)
#line 873 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5943 "y_tab.c"
break;
case 216:
#line 874 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5948 "y_tab.c"
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5952 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 877 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5958 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 878 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5964 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 881 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5970 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 882 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5976 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 885 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5982 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 886 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5988 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 887 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5994 "y_tab.c"
break;
case 224:
#line 890 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5999 "y_tab.c"
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 6003 "y_tab.c"
break;
case 225:
#line 892 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 6013 "y_tab.c"
  if (!yytrial)
#line 898 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 6019 "y_tab.c"
break;
case 226:
#line 904 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 6024 "y_tab.c"
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 6028 "y_tab.c"
break;
case 227:
#line 906 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 6033 "y_tab.c"
  if (!yytrial)
#line 907 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 6046 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 917 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 6055 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 6061 "y_tab.c"
break;
case 230:
#line 924 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6066 "y_tab.c"
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6070 "y_tab.c"
break;
case 231:
#line 925 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6075 "y_tab.c"
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6079 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 928 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 6085 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 6091 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6097 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 6103 "y_tab.c"
break;
case 236:
#line 934 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6108 "y_tab.c"
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 6112 "y_tab.c"
break;
case 237:
#line 935 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6117 "y_tab.c"
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 6121 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 6127 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 939 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 6133 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 6139 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 6145 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 6153 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 949 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6162 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 953 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6171 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 959 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6177 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 960 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6183 "y_tab.c"
break;
case 247:
#line 963 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6188 "y_tab.c"
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6194 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6202 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6211 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6217 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6223 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 6229 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 982 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6235 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6241 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6247 "y_tab.c"
break;
case 256:
#line 987 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6252 "y_tab.c"
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6256 "y_tab.c"
break;
case 257:
#line 988 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6261 "y_tab.c"
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6265 "y_tab.c"
break;
case 258:
#line 989 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6270 "y_tab.c"
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6274 "y_tab.c"
break;
case 259:
#line 992 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6279 "y_tab.c"
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6283 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6289 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6295 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6301 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6307 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6313 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6319 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6325 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6331 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6337 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6343 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6349 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6355 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6361 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6367 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6373 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6379 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6385 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6391 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6397 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6403 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6409 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6415 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6421 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6427 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6433 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6439 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6445 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6451 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6457 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6463 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6469 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6475 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6481 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6487 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6493 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6499 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6505 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6511 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6517 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6523 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6529 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6535 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6541 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6547 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6553 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6559 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6565 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6571 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6577 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6583 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6589 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6595 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6601 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6607 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6613 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6619 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6625 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6631 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1056 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6637 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1057 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6643 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6649 "y_tab.c"
break;
case 321:
#line 1061 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6654 "y_tab.c"
  if (!yytrial)
#line 1061 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6658 "y_tab.c"
break;
#line 6660 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
