#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   30,   30,   30,   30,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   34,   44,   44,   45,   46,   47,
   43,   43,   74,   74,   74,   74,   74,   74,   75,   76,
   76,   77,   77,   77,   77,   77,   77,   78,   40,    9,
    9,    9,    9,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    3,    4,    5,
    5,   14,   14,   14,   14,   15,   15,   15,   15,   12,
   12,   12,   12,   12,   13,   13,   13,   29,   29,   28,
   27,   19,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   17,   17,   17,   67,   67,   59,   59,   60,   60,
   51,   52,   11,   48,   48,   49,   50,   50,   50,   50,
   50,   50,   50,    7,    7,    7,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
   26,   26,   26,   21,   21,   21,   21,   21,   22,   22,
   22,   22,   23,   23,   69,   69,   69,   69,   69,   69,
   68,   68,   68,   68,   68,   68,   66,   66,   66,   54,
   55,   79,   55,   80,   55,   81,   55,   55,   55,   53,
   82,   53,   53,   53,   53,   61,   61,   61,   61,   57,
   58,   83,   58,   84,   58,   85,   58,   58,   58,   56,
   56,   56,   56,   56,   86,   86,   24,   24,   25,   20,
   20,   20,   63,   63,   64,   64,   65,   65,   65,   87,
   87,   32,   32,   88,   31,   31,   70,   70,   70,   71,
   71,   71,   71,   16,   16,   16,   16,   62,   62,   62,
   62,   35,   36,   36,   37,   37,   38,   38,   39,    8,
    8,    1,    1,    1,    1,   72,   72,   72,   33,   73,
   73,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   42,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    5,    3,    5,    6,    9,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    2,    1,    2,    3,    1,    1,    2,    1,
    2,    2,    2,    2,    1,    2,    1,    4,    1,    0,
    1,    1,    3,    1,    1,    0,    2,    3,    2,    6,
    8,    9,    7,    8,    5,    6,    4,    2,    2,    3,
    6,    3,    4,    3,    6,    5,    5,    4,    3,    3,
    3,    6,    9,    8,    1,    1,    4,    2,    2,    2,
    2,    2,    3,   11,   10,    2,    9,    9,    8,    2,
    3,    3,    3,    1,    1,    3,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    2,    4,    2,    4,
    0,    1,    3,    1,    1,    1,    1,    2,    0,    1,
    2,    2,    1,    3,    0,    2,    2,    2,    2,    2,
    0,    2,    2,    2,    3,    2,    0,    1,    1,    2,
    5,    0,   11,    0,   13,    0,   14,    2,    2,    4,
    0,    6,    2,    3,    3,    0,    5,    4,    6,    2,
    2,    0,    8,    0,   10,    0,   11,    2,    2,    6,
    7,    9,    3,    3,    0,    1,    8,    8,    2,    2,
    2,    3,    0,    1,    1,    2,    0,    1,    2,    0,
    1,    2,    1,    0,    9,    2,    0,    3,    4,    0,
    1,    1,    1,    3,    4,    2,    2,    1,    1,    1,
    1,    4,    1,    3,    1,    1,    2,    2,    3,    1,
    1,    0,    1,    4,    2,    2,    2,    2,    2,    1,
    3,    1,    1,    1,    1,    3,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    5,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    4,    3,    4,
    4,    7,    7,    7,    7,    3,    2,    2,    4,    2,
    1,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  302,  303,  304,    0,    0,    0,    0,    0,    0,
  281,    0,   60,   61,    0,    0,    0,   75,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  208,   68,  115,  116,    0,    0,
  209,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   77,    0,  134,  305,    0,    3,   28,    8,    9,
   12,    0,    0,    0,    6,    0,    7,    0,    0,   10,
    0,    0,   11,   27,   34,    0,   13,    0,   14,    0,
   16,   17,   18,    0,   19,    0,   20,   21,    0,   22,
   23,    0,   24,   25,    0,   26,    0,    0,    0,    0,
   29,   30,   31,   32,   33,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  299,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  151,  152,  153,  154,  155,  156,  157,  158,  159,
  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
  170,  171,  173,  174,  149,  150,  138,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  172,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  218,    0,  238,    0,  278,  279,  280,  277,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   55,    0,   57,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   76,    0,    0,  255,    0,    0,   62,
   63,    0,    0,    0,  250,  251,    0,  249,    0,   99,
   98,    0,    0,    0,    4,    5,  262,    0,    0,  276,
  266,    0,    0,  219,  239,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  313,  315,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  364,    0,    0,  126,    0,  121,  122,    0,  210,    0,
    0,    0,  230,  231,  118,  119,  120,    0,    0,    0,
    0,    0,    0,  196,  199,  198,  197,  200,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  184,  182,
    0,    0,  187,    0,  252,  295,    0,   81,    0,    0,
    0,  123,    0,    0,    0,   86,    0,  290,    0,    0,
    0,  283,    0,  286,    0,    0,    0,    0,    0,    0,
  175,  176,    0,    0,    0,    0,  356,    0,    0,    0,
    0,  221,    0,   58,    0,   49,   50,   51,   52,   53,
   54,   56,    0,    0,    0,    0,    0,   35,    0,  306,
    0,    0,    0,    0,    0,    0,    0,    0,  136,    0,
    0,    0,  256,    0,    0,  104,    0,    0,    0,  100,
  296,  297,  298,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  349,    0,    0,
    0,    0,   37,  132,  133,  224,  225,    0,    0,    0,
  243,  244,    0,    0,  274,    0,    0,    0,    0,    0,
  232,    0,  192,    0,    0,  294,    0,  220,  188,    0,
   86,    0,    0,    0,    0,   86,   97,    0,    0,  288,
  287,  282,    0,    0,    0,    0,    0,    0,  178,  180,
  117,    0,    0,  212,    0,   43,   46,   47,   45,   48,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,  108,    0,    0,    0,    0,  350,
  348,    0,    0,    0,    0,    0,    0,  275,    0,    0,
  103,    0,    0,    0,    0,    0,    0,  183,    0,    0,
    0,   86,   95,    0,    0,    0,    0,    0,    0,   87,
   84,   85,  284,    0,    0,    0,    0,    0,   36,    0,
   38,    0,  246,    0,    0,    0,    0,    0,    0,    0,
  214,    0,  107,    0,    0,    0,  228,    0,    0,  211,
  271,  272,  273,    0,    0,  261,    0,    0,  106,    0,
    0,    0,    0,    0,  216,    0,    0,  259,  101,    0,
    0,   86,   96,    0,   88,   90,    0,    0,    0,    0,
    0,   39,  240,    0,    0,    0,    0,    0,    0,    0,
  234,    0,    0,  227,    0,    0,    0,  264,    0,  112,
  105,  222,    0,    0,    0,    0,  236,    0,    0,   93,
    0,    0,  352,  353,  354,  355,    0,    0,    0,  201,
  241,    0,    0,    0,    0,    0,    0,  229,    0,    0,
    0,    0,    0,    0,  233,    0,    0,   94,   91,    0,
    0,    0,    0,    0,    0,  201,    0,    0,  247,  248,
    0,  114,    0,  201,    0,    0,    0,   92,   40,  242,
    0,    0,  202,  203,  204,  206,    0,    0,    0,    0,
  265,  113,    0,    0,    0,    0,  125,  205,    0,    0,
  235,  213,    0,  237,  124,    0,    0,    0,    0,  215,
  217,
};
static int yydgoto[] = {                                      49,
   50,  140,   52,   53,  124,   54,   55,  360,   56,   57,
   58,   59,   60,  570,  499,   61,   62,   63,   64,   65,
  340,  334,  335,   66,   67,  341,   68,   69,   70,  226,
   72,   73,   74,   75,   76,  361,  362,  363,  364,   77,
   78,   79,  395,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
  311,   97,  493,  494,  561,   98,   99,  694,  100,  547,
  604,  256,  228,  101,  102,  103,  104,  105,  480,  640,
  656,  478,  555,  675,  687,  584,  607,  680,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0, -206,    0,  254,    0,    0,    0,
    0,  -19,    0,    0, 5367,    0,  -52,    0,   25,   58,
  103,  138, 3172, 3342, 3133, 3133, 3133, 3133, 3133, 3133,
 3133,  844, 3133, 2704,    0,    0,    0,    0, 2140,  631,
    0, 3387,   62,   66,  181, 2617, 3172,    0,    0,    0,
   57,    0,  -18,    0,    0,    0,    0,    0,    0,    0,
    0, 5367,  108,  218,    0,  232,    0,  420,  246,    0,
 2531,  266,    0,    0,    0,  118,    0, 6331,    0,    0,
    0,    0,    0,  329,    0,  444,    0,    0,  769,    0,
    0,  464,    0,    0,   -7,    0,    0, 5367,  361,  722,
    0,    0,    0,    0,    0,    0, 5367, 5367, 5367, 3409,
 3686,  304,  277,  342,  261,  165,    0,  374, 5367,    0,
    0,  412,  215,  360,    0,    0,    0, 1290,    0,    0,
    0,    0,  361,  361,  361,  361,    0, 6135, 3133,  425,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  475,  428,
    0,    0,  500,    0,    0,   55,   55,   55,   55,   55,
  511, 6521,    0,  472,    0,  540,    0,  132, 2140,  295,
    0,   28,    0,  618,    0,    0,    0,    0,  631,    0,
  327,  347,  353,  -35,  372,  358,  410,    0,  408,    0,
 3133, 3133, 3133,  344,    0, 1230, 6331,   10,  433,  578,
  686,  744, 4194,    0, 3686, 5367,    0, 5367,  515,    0,
    0,  131, 3133,    0,    0,    0,    0,    0,  474,    0,
    0,  699,  713,  735,    0,    0,    0,  477,    0,    0,
    0,    0,    0,    0,    0, 3133, 3133, 3133, 3133, 3133,
 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133,
 3133, 3133,    0,    0, 3133, 3133, 3133, 3133, 3133, 3133,
 3133, 3133, 3133, 3133, 3133, 3133, 3133,  765, 3133, 3133,
    0, 3133, 2617,    0, -267,    0,    0, -222,    0,  538,
   17,  104,    0,    0,    0,    0,    0,  261, 6141,   -1,
    0, 5367,    0,    0,    0,    0,    0,    0,  361,    0,
  542, 3686,  142,  759,  182,  745, 5367,  761,    0,    0,
  465,  304,    0, 5367,    0,    0,  615,    0,  751,  686,
 1063,    0,  841, 5367,  335,    0, 1506,    0,  635,  637,
  253,    0,  826,    0,  842,  850,  894,  900, 7525, 6024,
    0,    0,  810,  867,  923, 3133,    0, 3133,  -95,  630,
 6273,    0, 5367,    0,  702,    0,    0,    0,    0,    0,
    0,    0, 6556, 7525,  921, 6611,  941,    0, 3133,    0,
  942,  729,  733, 6024,  742,  962,    0,    0,    0,  520,
  142,  142,    0,  142, 2786,    0, 7525,  841,  841,    0,
    0,    0,    0,  477,    0,    0,  744,    0,    0,    0,
    0,    0,    0,    0,    0,  709,  709,    0,    0, 3464,
    0,    0,    0,    0,   55,    0,    0,    0, 1169, 1169,
  709,  709,  709,    0,  456,  456, 3464,    0,  616, 6646,
   55, 6705,    0,    0,    0,    0,    0,  966,  750,    0,
    0,    0,  953,  148,    0,  841,  340,  973,    0,  976,
    0,    0,    0,  747, 3686,    0,  304,    0,    0,  980,
    0,  962,  979,  986,   97,    0,    0, 5367,  -22,    0,
    0,    0, 1290, 3133,  989,  997, 1006, 1013,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2617, 3133, 2617, 3133, 7525,  739, 1017, 1019, 1028, 1031,
  733, 6024,  -84,    0,    0, 6836,  979,  979,    0,    0,
    0, 3133, 2875, 1032, 2101,  539,   56,    0,  979, 2962,
    0,  304, 6024,  304, 1034,  -80,  759,    0,   39, 1021,
  808,    0,    0,   90,  101, 1016,    0,  862, 1022,    0,
    0,    0,    0, 9386, 3133, 3133, 3133, 3133,    0, 1024,
    0, 6928,    0, 1037,  739,  165,  304,  739, 1045, 1055,
    0,  849,    0,  361,  361,    0,    0, 6983, 3133,    0,
    0,    0,    0, 5367,  539,    0,  975,  -73,    0, 7020,
  656, 1059,  732, 1060,    0,  852,  853,    0,    0,  169,
 1048,    0,    0, 3133,    0,    0, 7059, 7118, 7210, 7341,
 3133,    0,    0, 1072, 1073,  767, 1074,  165,  304, 1076,
    0, 5367, 5367,    0, 7400,  142, 5367,    0, 3053,    0,
    0,    0,  304, 1062,  -52, 1078,    0, 1064, 1066,    0,
  223, 7525,    0,    0,    0,    0, 1081, 1065, 1091,    0,
    0, 1096,  790,  304, 1092,  211,  211,    0,  142,    0,
  361, 7435,  835,   32,    0,  304, 1098,    0,    0, 1080,
 2617,  883,  304,  688, 1100,    0,  876, 1108,    0,    0,
 2187,    0,  361,    0,    0,  880, 1109,    0,    0,    0,
  886,  891,    0,    0,    0,    0,  304,  688, 1062,  -52,
    0,    0,  688, 2273, 1062,  -52,    0,    0,  898,   52,
    0,    0,   61,    0,    0,    0,    0, 2359, 2445,    0,
    0,
};
static int yyrindex[] = {                                     37,
  442,    0,    0,    0,  936, 4354, 1029,    0,    0,    0,
    0,    0,    0,    0,    0, 4631,    0,    0,    0,    0,
    0,    0, 5069, 6774,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1027,    0,
    0,    0,    0,    0,    0,    0, 5112,  -59,    0,  596,
 7490,    0,    0,    0,    0, 1052,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1164,  963,    0,    0,    0, 1027,    0,    0,    0, 1141,
    0,    0,    0,    0,    0,    0,    0,    0,   82,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6774, 3599,
    0,    0,    0,    0,    0,  501,    0,    0,    0,    0,
  516,    9, 5606,    0, 3035, 1029, 1025,    0,    0,    0,
 3437, 1044,    0,    0, 3506, 3795, 3864,    0, 3953, 4242,
  -59,    0, 6774, 6774, 6774, 6774,  461,    0,    0, 4747,
  210,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4968, 5026,    0,  885,  933,  241,  407,  864, 2938, 4852,
    0,    0, 2250,    0, 2324, 4445,  596,    0, 1027,   82,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1111,    0,    0, 2410,    0,   11,    0,    0,    0,
 1419, 6774,    0,    0,  516,    0,    0,    0,    0,    0,
    0,  655,    0, 2845,    0,    0, 2845,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1027,  596,    0,
    0,   22, 1112,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3879,    0,    0,
 6233,    0, 4584,    0,    0,    0,    0,    0, 6774,   44,
    0,  516,  649,  577,    0, 4175,  917,  931,    0,    0,
    0,  611,    0,    0,    0,    0,    0,    0,    0,    0,
 6774,    0,    6,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  585,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1316,    0,    0,    0,    0,    0,
    0,    0,    0,  467,    0,    0,    0,    0,    0,    0,
    0,    0, 1130,    0,    0, 1419, -167, 4311,    0,    0,
  692,  743,    0,  910,    0,    0,  402,   -9,   -9,    0,
    0,    0,    0, 1027,   42, 1419, 6774, 2565, 3157, 3248,
 3498, 3621, 3735, 4182, 4431, 5447, 5506, 4471, 4763, 4824,
 4826, 5758, 5774, 5816, 5385, 5835, 5846, 5968,  135,  145,
 5533, 5569, 5578, 5979, 5438, 5478, 5991,    0,    0,    0,
 5410,    0,    0,    0,    0,    0,    0,    0,    0,  -59,
    0,    0,   78,    0,    0, 5645,  655,    0, 1419,    0,
    0,  591,    0,    0,  516,    0,  611,    0,    0,    0,
    0,    0,  916, 5751,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 5998, 6007,    0,  -21,    0,    0,    0,    0,    0,
    0, 1111,    0,    0,   46, 1135,    0,    0,    0,    0,
 1130,    0,    0,    0,    0,    0, 2767, 2767, 1419,    0,
    0,    0,    0,    0,    0, 6920, 1057,    0, 6080,    0,
    0,    9,    0,    9,    0,    0,  627,    0,    0, 6093,
    0,    0,    0,    0,    0,  278,   29,    0,    0,    0,
    0,    0,    0, 1138,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1135, 1143,    9, 1135,    0,    0,
    0,    0,    0, 6774, 6774, 6037,    0,    0,    0,    0,
    0,    0,    0,    0, 6920,    0,    0, 6194,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1144,    0,    0,    0,    0,    0,    0, 1143,    9,    0,
    0,    0,    0,    0,    0,   47,    0,    0,    0,    0,
    0,    0,    9,   82,    0,    0,    0,    0,    0,    0,
    0,  302,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    9,    0,  448,  448,    0,  109,  -59,
 6194,    0,    0,    0,    0,    9,    0,    0,    0,    0,
    0,    0,    9,   89,    0,    0,    0,    0,    0,    0,
    0,    0, 6194,    0,  -59,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    9,  262,   82,    0,
    0,    0,  305,    0,   82,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -59,  -59,    0,    0,    0,
    0,
};
static int yycindex[] = {                                   1405,
 5685,    0,    0,    0, 5797, 7660,    0, 8128, 8571, 9670,
    0,    0,    0,    0,    0,10602,    0,    0,    0,    0,
    0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
    0,10615,    0,    0,    0,    0,    0,    0,  675,    0,
    0,    0,    0,    0,    0, 7399,   85, 1492,    0, 4561,
  503,    0,    0,    0,    0,  581,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9980,    0,    0,    0,    0, 4925,    0,    0,    0,  854,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10655,    0,    0,  934,
    0,    0,    0,    0,    0,  479,    0,    0,    0,    0,
    0, 3617,  496,    0,  944,    0, 5941,    0,    0,    0,
  150,    0,    0,    0,  338,  350,  369,    0,  376,  379,
 1579,    0,    0,    0,    0,    0, 4689,    0,    0, 1128,
 7564,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1117, 1119,    0, 7715, 7841, 3314, 3726, 4019, 6419, 9410,
    0,    0, 7868,    0, 7906,  351,  -91,    0,  843,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10668,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 7941,10008,    0,    0,    0,    0,
  945,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  405,    0,    0,  454,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5027, 5874,    0,
    0, 1142,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10075,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  352,    0,    0,
  458,    0,   -2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  355,    0,    0,    0,    0,
    0, 9994,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  955,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  776,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  957, 6482,  400,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 7788, 1156,  970,    0, 7996, 8031, 8221,
 8309, 8336, 8374, 8411, 8446, 9451, 9495, 8501, 8724, 9536,
 8779, 8814, 8849, 8884, 9571, 8919, 9004, 9196, 9606, 9665,
 9709, 9750, 9791, 9231, 9826, 9861, 9885,    0,    0,    0,
 9923,    0,    0,    0,    0,    0,    0,    0,    0, 1666,
    0,    0,    0,    0,    0,    0,    0,    0,  985,    0,
    0, 1177,    0,    0,    0,    0,10370,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 9281, 9316,    0,  960,    0,    0,    0,    0,    0,
10105,    0,10169,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  987,    0,
    0,    0,    0,    0,10182,    0,    0,    0,    0,    0,
    0,10383,    0,10396,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  205,    0,    0,    0,
    0,    0,    0, 1181,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10409,    0,    0,    0,
    0,    0,    0,    0,    0, 9351,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10473,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10486,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,10499,    0,    0,    0,    0,    0, 1753,
    0,    0,    0,    0,    0,10512,    0,    0,    0,    0,
10195,    0,10576, 1189,    0,    0,    0,    0,    0,    0,
10208,    0,    0,    0, 1840,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,10589, 1190,    0,    0,
    0,    0, 1196,10275,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1927, 2014,10288,10306,    0,
    0,
};
static int yygindex[] = {                                      0,
   31,    1,    0,  -94, -108, -212, -385,    0,    0,   21,
    0,    0,    0,  695, -282,  -14,  242,    2,  -67,    0,
 -268, -304, 1030,    0,    0,  431,    0,    0,    0,    5,
 1193,    0,    0,  -17,  -27,    0,  768,    0,    0,  326,
  569,    0, -489,    0,    0,    0,    0,   27,    0,  -61,
    0,    0,  -33,    0,  -25,  -16,    0,  -12,    0,    0,
 -575,  -10,   72, 1223,  125,   51,    0,   19,  318,    0,
  679,    0,  991,    0,    0,    0,  -30,    0,    0,    0,
    0,    0,    0,    0,    0,  388,    0,    0,
};
#define YYTABLESIZE 10985
static int yytable[] = {                                     132,
   51,  113,  114,  321,   71,  200,  121,  349,  125,  126,
  127,  199,  209,  201,  262,  129,  130,  649,  529,  238,
  409,  567,  202,  237,  353,  208,  203,  482,  253,  210,
  331,  118,  580,  359,  541,  117,    2, 1818,   64,  198,
  128,  592,  263,  253,  339,  616,   51,  464,   51,  181,
  264,  316,  181,  399,  300,  119,  116,  475,  235,  202,
  469,  260,  242,  265,  300,    2,  224,  300,  307,  197,
  131,   51,   89,  489,  314,  469,  198,  317,  684, 1811,
  130,   64,  567,  212,  133,   64,  301,  465,  312,  301,
  268,  255,  466, 1815,  298,  469, 1809,  320,  113,  605,
  131,  221,  569,   64,  469,  222,  259,  125,  126,  127,
  129,  333,  113,  338,   64,  131,  410,  134,  413,  113,
  407,  267,  532,  404,  535,  226,  529,  319,  113,  526,
  329,   51,  467,  567,  400,  300,   64,   64,  343,  470,
   64,  667,  117,  730,  130,  299,  590,  129,  300,  733,
  131,  244,  269,   89,  705,  563,  235,  409, 1811,  623,
  235,  514,  135,  617,  131,  263,  245,  612,  243,  268,
  301,  199,  591,  264,  736,  316,  615,  316,  316,  316,
  557,  209,  202,  737,  314,  317,  265,  317,  317,  317,
  235,  235,  316,  316,  260,  316,  425,  136,  210,  198,
  267,  235,  317,  317,  226,  317,  548,  235,  559,  698,
  320,  129,  567,  564,  621,    2,    2,    2,  558,  562,
  223,  415,  387,  622,  200,  485,   51,  316,  547,  197,
  424,  269,  201,  408,  566,  333,  411,  317,  412,  414,
  383,  202,   35,  484,  388,  203,  255,  253,   13,   14,
  362,   41,  253,  362,  689,  253,  253,  253,  198,  316,
   64,  404,  253,  253,  253,  183,  567,  362,  362,  317,
  235,  344,  253,  191,  339,  247,  246,  307,  307,  620,
  234,  307,  307,  307,  307,  307,  307,  307,  259,  236,
  248,  231,  416,  659,  418,  566,  503,  419,  307,  307,
  347,  307,  362,   51,  251,  568,  253,  253,  315,   13,
   14,    2,    2,    2,  502,  253,   64,  268,  268,  474,
  128,   82,  477,  463,  257,   64,   13,   14,  292,  233,
  292,  292,  333,  307,  362,  395,  235,  242,  234,  661,
  322,  517,  113,  338,  408,   83,  566,  690,  267,  267,
   64,   64,  310,  337,  495,  308,  204,  125,  350,   64,
   13,   14,  262,  127,  307,  307,  568,  232,  343,  344,
  408,  476,  117,  344,  365,  366,  367,  368,  234,  269,
  269,  408,  234,  474,  128,   11,   12,  304,  398,  401,
  263,  316,  498,  497,  520,  523,  424,  707,  264,  235,
  345,  317,   82,  344,  381,  316,  316,  202,  359,  716,
 1674,  265,  234,  234,  344,  317,  317,  568,  471,  339,
  344,  348,  692,  234,  198,  566,   83,  127,  725,  234,
  550,  695,  352,  528,  351,  734,  532,  342,  743,   13,
   14,   40,  102,  310,  310,  102,   35,  310,  310,  310,
  310,  310,  310,  310,  259,   41,  404,  496,  472, 1849,
  102, 4993,  316,  249,  310,  310,  362,  310,  572,  354,
   51,  355,  317,  406,  545, 4996, 4999,  635,  250,  566,
  362,  362,  356,  344,  339,  333,  339,  113,  338,  537,
  538,  207,  234,   13,   14,  298,  568,  307,  565,  310,
  426,  300,  306,  113,  305,  488,  207,   42,  487,  553,
  122,  307,  307,  343,  380,  371,  204,  117,  123,  339,
  372,   51,  313,   51,  312,   42,   35,  551,  572,  672,
  310,  310, 5002,  572,   82,   41,  572,  362,   64,  375,
  555,  579,   64,  581,  555,   51,  299,  549,   82,   82,
  568,  376,  113,  338,  113,  338,  413,  189,   83,  189,
   64,  589,  553,  485,  378,  255,  131,  293,  307,  532,
  479,  339,   83,   83,   13,   14,  427,  189,  343,  112,
  343,  534,  117,  337,  117,  339,  131,  113,  338,  572,
  384,  141,  492,  184,  185,  186,  187,  188,  189,  190,
  192,  193,  195,  385,  646,   82,  339,  689,  689,  386,
  701,  689,  344,  343,  390,  225,  227,  117,  339,  704,
  193,  234,  710, 1667, 1670,  339,  295, 1670,  285,   83,
  572,  713, 1670, 1670,  191,  389, 1670,  685,  193,  113,
  338,  719,  676,  677,  642,  643,  285,  679,  728,  339,
  722,  737,  191,  113,  338,   35,  540,  731,  650,  399,
  740,  594,  595,  310,   41,  343,  391,  342,  539,  117,
  194,  392, 1843,  608,  113,  338,   35,  310,  310,  343,
   51, 1846,  397,  117,  701,   41,  113,  338,  194,  401,
  190,   51,  190,  113,  338,  207,  652,  370,  207,  487,
  343,   51,  731,  402,  117,   51,  234,  369,  734,  724,
  190,  709,  343,  207,  718,  207,  117,  113,  338,  343,
 1788,  255,  723,  117,   51,  403,  699,  700,  337, 1791,
  420,  702,  111,   64,  310,  111,   51,   51,   51,   51,
  738,  739,   64,  343,  255,   12,  295,  117,  298,   64,
  111,  637,  111,  722,  300,  405,  421,  295,  255,  255,
  637,  293,  295,  293,  293,  295,  295,  295,  683, 1788,
  422,  120,  654, 1788,  295,  487,    6,  686, 1791,  107,
  108,  109, 1791,  110,  347,  486,  110,   15,   16,  393,
  394,  396,  423,  337,  468,  337,   18,   31,  481,  299,
  483,  110,   29,  110,   32,  458,   28,  670,   64,   27,
  487,  417,  342,  601,  602,  603,  295,  295,  295,  295,
  295,  243,  295,  295,  571,  295,  310,  309,  337,  308,
  696,   36,  296,  487,  428,  429,  430,  431,  432,  433,
  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
  444,  559,  562,  445,  446,  447,  448,  449,  450,  451,
  452,  453,  454,  455,  456,  457,  369,  460,  461,  405,
  462,  490,  606,  491,  382,  704,   31,  342,  487,  342,
  337,   29,  237,   32,  571,   28,  504,  139,   27,  571,
   30,  500,  571,  501,  337,  205,  206,  207,   11,   12,
  311,  311,  509,  505,  311,  311,  311,  311,  311,  311,
  311,  506,  342,  195,  195,  337,  719,  195,  195,  487,
  725,  311,  311,  487,  311,  312,  727,  337,  312,  487,
  292,  443,  292,  292,  337,  324,  325,  326,  735,  327,
  328,  487,  312,  312,  512,  571,  513,  324,  325,  326,
  109,  327,  328,  109,   40,  507,  311,  186,  337,  510,
  186,  508,  263,  511,  342,  520,  139,  525,  109,   30,
  109,  185,  634,  314,  185,  637,  314,  312,  342,  522,
  524,  526,  611,  536,  613,  527,  571,  311,  311,  115,
  314,  314,  445,  445,  445,  263,  449,  445,  530,  342,
  263,  531,  263,  713,  263,  543,  544,  263,  714,  312,
  546,  342,  552,  715,  716,  554,  560,  636,  342,  556,
  486,  137,    2,    3,    4,  314,    6,  413,  575,  107,
  108,  109, 1828, 1831, 1834, 1837,  576,   15,   16,  324,
  325,  326,  342,  327,  328,  577,   18,   19,   20,   21,
   22,   59,  578,   23,  138,  583,  585,  314,  618,   35,
  586,  324,  325,  326,  619,  327,  328,  587,   41,  673,
  588,  599,  574,  614,   25,   26,  624,  633,   33,   34,
  626,   36,  631,  683,   59,  263,  638,  263,  263,   59,
  394,   59,  582,   59,  639,   59,   59,  648,  653,  443,
  655,    2,    3,    4,  697,  641,  660,   47,  657,  658,
  596,  598,  668,  669,  671,  674,  706,  686,  610,  310,
  311,  691,  688,  711,  689,  692,   19,   20,   21,   22,
  693,  698,   23,  138,  311,  311,  695,  707,  708,  717,
   15,  312,  710,  627,  628,  629,  630,  729,  720,  726,
  728,   80,  292,   25,   26,  312,  312,   33,   34,   35,
  445,  445,  445,    1,  449,  445,   81,  645,   41,   41,
  223,  292,  257,   15,   59,  245,   59,   59,   15,  260,
   15,  289,   15,   80,   41,   15,   47,  553,  605,  314,
  635,  311,  662,  215,  216,  217,  218,  219,  220,  394,
  689, 1785, 1806,  314,  314,  293,  295,  854,  298,  857,
  291, 1825,  312, 1785,  300,  292, 1852,  682, 4774,  263,
  263,  263,  263,  263,  263,  263, 1785,  263,  263,  263,
  263,  263, 1840,  263,  263,  263,  263,  263,  263,  263,
  263, 1785, 5005, 1785,  263,  263,  263,  263,  263, 5116,
 5119,  263,  263,  292,  292,  292, 5122,  292,  292,  299,
  314,  625,   31,   15,  410,   15,   15,   29,  261,   32,
  573,   28,  263,  263,   27,  239,  263,  263,  263,  263,
  263,  263,  263,  647,  263,  263,  263,  263,  459,    0,
  263,    0,  296,    0,  263,    0,    0,  263,    0,    0,
  263,  263,  263,    0,    0,  263,    0,    0,   59,   59,
   59,   59,   59,   59,   59,   44,   59,   59,   59,   59,
   59,    0,    0,    0,   59,   59,   59,   59,   59,   59,
    0,    0,    0,   59,   59,   59,   59,   59,    0,    0,
   59,   59,  195,  195,  195,    0,  195,  195,   44,    0,
    0,    0,   48,   44,  398,   44,    0,   44,    0,    0,
   44,   59,   59,    0,    0,   59,   59,   59,   59,   59,
   59,   59,    0,   59,   59,   59,   59,    0,   35,   59,
  324,  325,  326,   59,  327,  328,   59,   41,    0,   59,
   59,   59,    0,    0,   59,    0,    0,   15,   15,   15,
   15,   15,   15,   15,    0,   15,   15,   15,   15,   15,
    0,   15,   15,   15,   15,   15,   15,   15,   15,    0,
    0,    0,   15,   15,   15,   15,   15,    0,    0,   15,
   15,    0,    0,    0,    0,    0,    0,  115,   44,    0,
   44,   44,  108,    0,  118,    0,  105,    0,    0,  102,
   15,   15,    0,    0,   15,   15,   15,   15,   15,   15,
   15,    0,   15,   15,   15,   15,    0,    0,   15,    0,
    0,    0,   15,    0,    0,    0,    0,    0,   15,   15,
   15,    0,    0,   15,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  252,  253,  254,   17,    0,    0,
    0,    0,   19,   20,   21,   22,    0,    0,   23,   24,
    0,    0,    0,    0,  115,    0,    0,  183,    0,  108,
  111,  118,    0,  105,    0,    0,  102,    0,    0,   25,
   26,    0,    0,   33,   34,    0,  120,    0,    0,    0,
    0,    6,    0,   40,  357,  108,  109,   42,    0,  358,
    0,   43,   15,   16,    0,    0,    0,   44,   45,   46,
    0,   18,   47,    0,    0,    0,   44,   44,   44,    0,
   44,   44,   44,   44,   44,    0,   44,   44,   44,   44,
   44,   44,   44,   44,    0,    0,    0,   44,   44,   44,
   44,   44,    0,    0,   44,   44,   36,    0,    0,    0,
    0,  115,    0,    0,  183,    0,  108,  111,  118,    0,
  105,    0,    0,  102,    0,   44,   44,    0,    0,   44,
   44,   44,   44,   44,   44,   44,    0,   44,   44,   44,
   44,    0,    0,   44,    0,    0,    0,   44,    0,    0,
   44,    0,    0,   44,   44,   44,    0,    0,   44,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
  292,    0,   69,  292,  292,  292,   72,   78,   81,   84,
   87,  292,  292,   90,   93,    0,    0,    0,  115,    0,
  292,  183,    0,  108,  111,  118,    0,  105,  292,    0,
  102,    0,    0,    0,   96,   99,    0,    0,  121,  124,
  127,  132,  138,  143,  147,    0,  152,  147,  157,  160,
    0,    0,  165,    0,    0,  292,  168,    0,    0,    0,
    0,    0,  171,  174,  177,    0,    0,  180,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    6,    0,   69,
  107,  108,  109,   72,   78,   81,   84,   87,   15,   16,
   90,   93,    0,    0,    0,  115,    0,   18,  183,    0,
  108,  111,  118,    0,  105,    0,    0,  102,    0,    0,
    0,   96,   99,    0,    0,  121,  124,  127,  132,  138,
  143,  147,    0,  152,  147,  157,  160,    0,    0,  165,
    0,    0,   36,  168,    0,    0,    0,    0,    0,  171,
  174,  177,    0,    0,  180,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,    0,    0,   90,   93,    0,
    0,    0,  115,    0,    0,  183,    0,  108,  111,  118,
    0,  105,    0,    0,  102,    0,    0,    0,   96,   99,
    0,    0,  121,  124,  127,  132,  138,  143,  147,    0,
  152,  147,  157,  160,    0,    0,  165,    0,    0,    0,
  168,    0,    0,    0,    0,    0,  171,  174,  177,    0,
    0,  180,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,    0,    0,   90,   93,    0,    0,    0,  115,
    0,    0,  183,    0,  108,  111,  118,    0,  105,    0,
    0,  102,    0,    0,    0,   96,   99,    0,    0,  121,
  124,  127,  132,  138,  143,  147,    0,  152,  147,  157,
  160,    0,    0,  165,    0,    0,    0,  168,    0,    0,
    0,    0,    0,  171,  174,  177,    0,    0,  180,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,    0,
    0,   90,   93,    0,    0,    0,  115,    0,    0,  183,
    0,  108,  111,  118,    0,  105,    0,    0,  102,    0,
    0,    0,   96,   99,    0,    0,  121,  124,  127,  132,
  138,  143,  147,    0,  152,  147,  157,  160,    0,    0,
  165,    0,    0,    0,  168,    0,    0,    0,    0,    0,
  171,  174,  177,    0,    0,  180,    0,    6,    9,   12,
   15,   18,   24,    0,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,    0,    0,   90,   93,
    0,    0,    0,   31,    0,    0,  183,    0,   29,  111,
   32,    0,   28,    0,    0,   27,    0,    0,    0,   96,
   99,    0,    0,  121,  124,  127,  132,  138,  143,  147,
    0,  152,  147,  157,  160,    0,    0,  165,    0,    0,
    0,  168,    0,    0,    0,    0,    0,  171,  174,  177,
    0,    0,  180,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,    0,    0,   90,   93,    0,    0,   31,
    0,    0,    0,   48,   29,  600,   32,    0,   28,    0,
    0,   27,    0,    0,    0,    0,   96,   99,    0,    0,
  121,  124,  127,  132,  138,  143,  147,    0,  152,  147,
  157,  160,    0,    0,  165,    0,    0,    0,  168,    0,
    0,    0,    0,    0,  171,  174,  177,    0,    0,  180,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
  357,   69,    0,  357,    0,   72,   78,   81,   84,   87,
    0,    0,   90,   93,    0,   31,    0,  357,  357,   48,
   29,  721,   32,    0,   28,    0,    0,   27,    0,    0,
    0,    0,    0,   96,   99,    0,    0,  121,  124,  127,
  132,  138,  143,  147,    0,  152,  147,  157,  160,    0,
    0,  165,  357,    0,    0,  168,    0,    0,    0,    0,
    0,  171,  174,  177,    0,    0,  180,    0,    2,    3,
    4,    5,    0,    7,  358,    0,    0,  358,   11,   12,
    0,   13,   14,    0,  357,  252,  253,  254,   17,    0,
    0,  358,  358,   19,   20,   21,   22,    0,    0,   23,
   24,   31,    0,    0,    0,   48,   29,  732,   32,    0,
   28,    6,    0,   27,  107,  108,  109,    0,   12,    0,
   25,   26,   15,   16,   33,   34,  358,    0,    0,    0,
    0,   18,    0,    0,   40,    0,    0,    0,   42,    0,
    0,    0,   43,    0,    0,    0,    0,    0,   44,   45,
   46,    0,    0,   47,    2,    3,    4,    5,  358,    7,
  360,    0,    0,  360,   11,   12,   36,   13,   14,    0,
    0,  252,  253,  254,   17,    0,    0,  360,  360,   19,
   20,   21,   22,    0,    0,   23,   24,   31,    0,    0,
    0,   48,   29,  740,   32,    0,   28,    0,    0,   27,
    0,    0,    0,    0,    0,    0,   25,   26,    0,    0,
   33,   34,  360,    0,    0,    0,  357,    0,    0,    0,
   40,    0,    0,    0,   42,    0,    0,    0,   43,    0,
  357,  357,    0,    0,   44,   45,   46,    0,    0,   47,
    2,    3,    4,    5,  360,    7,    0,    0,    0,    0,
   11,   12,    0,   13,   14,    0,    0,  252,  253,  254,
   17,    0,    0,    0,    0,   19,   20,   21,   22,    0,
    0,   23,   24,   31,    0,    0,    0,   48,   29,  741,
   32,    0,   28,    0,    0,   27,    0,  357,    0,    0,
  358,    0,   25,   26,    0,    0,   33,   34,    0,    0,
    0,    0,    0,    0,  358,  358,   40,    0,    0,    0,
   42,    0,    0,    0,   43,  328,    0,    0,  328,    0,
   44,   45,   46,    0,    0,   47,    2,    3,    4,    5,
    0,    7,  328,  328,    0,    0,   11,   12,    0,   13,
   14,    0,    0,  252,  253,  254,   17,    0,    0,    0,
    0,   19,   20,   21,   22,    0,    0,   23,   24,   31,
    0,  358,    0,   48,   29,    0,   32,  328,   28,    0,
    0,   27,    0,    0,    0,    0,  360,    0,   25,   26,
    0,    0,   33,   34,    0,    0,    0,    0,    0,    0,
  360,  360,   40,    0,    0,    0,   42,    0,    0,  328,
   43,    0,    0,    0,    0,    0,   44,   45,   46,    0,
    0,   47,    2,    3,    4,    5,    0,    7,    0,    0,
    0,    0,   11,   12,    0,   13,   14,    0,    0,  252,
  253,  254,   17,    0,    0,    0,    0,   19,   20,   21,
   22,    0,    0,   23,   24,    0,   31,  360,    0,   48,
    0,   29,    0,   32,    0,   28,    0,    0,   27,    0,
    0,    0,    0,    0,   25,   26,    0,    0,   33,   34,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
    0,    0,   42,    0,    0,    0,   43,    0,    0,    0,
    0,    0,   44,   45,   46,    0,    0,   47,    2,    3,
    4,    5,    0,    7,  194,    0,    0,    0,   11,   12,
    0,   13,   14,    0,    0,  252,  253,  254,   17,    0,
    0,    0,    0,   19,   20,   21,   22,    0,   31,   23,
   24,  328,    0,   29,    0,   32,  139,   28,    0,   30,
   27,    0,    0,    0,    0,  328,  328,    0,    0,    0,
   25,   26,    0,    0,   33,   34,    0,    0,    0,    0,
    0,    0,    0,    0,   40,    0,    0,    0,   42,    0,
    0,    0,   43,    0,    0,    0,    0,    0,   44,   45,
   46,    0,    0,   47,    2,    3,    4,    5,  535,    7,
    0,    0,  207,    0,   11,   12,  207,   13,   14,    0,
    0,    0,  328,    0,   17,    0,    0,    0,    0,   19,
   20,   21,   22,    0,    0,   23,   24,   31,  139,    0,
    0,   30,   29,    0,   32,  597,   28,    0,    0,   27,
    0,    0,    0,    0,    0,    0,   25,   26,    0,    0,
   33,   34,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,    0,    0,   42,    0,    0,    0,   43,    0,
    0,    0,    0,    0,   44,   45,   46,    0,    0,   47,
  137,    2,    3,    4,    0,    6,    0,    0,  107,  108,
  109,    0,    0,    0,  308,  308,   15,   16,  308,  308,
  308,  308,  308,  308,  308,   18,   19,   20,   21,   22,
    0,    0,   23,  138,   31,  308,  308,  139,  308,   29,
   30,   32,    0,   28,    0,    0,   27,    0,    0,    0,
    0,    0,    0,   25,   26,    0,    0,   33,   34,    0,
   36,    0,    0,  257,    0,    0,    0,    0,  257,    0,
  308,  257,  257,  257,    0,    0,    0,    0,    0,  257,
  257,    0,  137,    2,    3,    4,   47,    6,  257,    0,
  107,  108,  109,    0,  609,    0,    0,    0,   15,   16,
    0,  308,  308,    0,    0,    0,    0,   18,   19,   20,
   21,   22,    0,    0,   23,  138,  293,    0,    0,    0,
    0,    0,  257,  257,  139,   31,    0,   30,    0,    0,
   29,  257,   32,    0,   28,   25,   26,   27,    0,   33,
   34,  207,   36,    0,    0,    0,  207,    0,    0,  207,
  207,  207,    0,    0,    0,    0,    0,  207,  207,    0,
    0,    0,    0,    0,    0,    0,  207,    0,   47,    0,
    0,  137,    2,    3,    4,    0,    6,    0,    0,  107,
  108,  109,    0,    0,    0,  681,    0,   15,   16,    0,
    0,    0,    0,    0,    0,    0,   18,   19,   20,   21,
   22,  207,    0,   23,  138,   31,    0,    0,    0,    0,
   29,    0,   32,    0,   28,  139,    0,   27,   30,    0,
    0,    0,    0,    0,   25,   26,    0,    0,   33,   34,
    0,   36,    0,    0,  308,    0,    0,  329,    0,    0,
  329,    0,    0,    0,   31,    0,    0,    0,  308,  308,
    0,    0,    0,    0,  329,  329,    0,   47,  137,    2,
    3,    4,    0,    6,    0,    0,  107,  108,  109,    0,
    0,    0,    0,    0,   15,   16,    0,    0,    0,    0,
    0,    0,    0,   18,   19,   20,   21,   22,    0,  329,
   23,  138,    0,    0,    0,  139,    0,    0,   30,    0,
    0,    0,    0,    0,    0,  308,    0,    0,    0,    0,
    0,   25,   26,    0,    0,   33,   34,    0,   36,    0,
    0,  329,    0,    0,    0,    0,    0,    0,  330,    0,
    0,  330,    0,    0,  139,    0,  293,   30,    0,  293,
  293,  293,    0,    0,   47,  330,  330,  293,  293,  137,
    2,    3,    4,    0,    6,    0,  293,  107,  108,  109,
    0,    0,    0,    0,  293,   15,   16,    0,    0,    0,
    0,    0,    0,    0,   18,   19,   20,   21,   22,    0,
  330,   23,  138,    0,    0,    0,    0,    0,    0,    0,
  293,  293,  293,  293,  293,    0,  293,  293,    0,  293,
    0,    0,   25,   26,    0,    0,   33,   34,    0,   36,
    0,    0,  330, 1139,  176, 1142, 1148,    0,  171,  173,
    0,  179,    0,  169,  167,  178,  168,    0,  170,  137,
    2,    3,    4,    0,    6,   47,    0,  107,  108,  109,
    0,  165,  177,  166,    0,   15,   16, 1145,    0,    0,
    0,    0,    0,  329,   18,   19,   20,   21,   22,    0,
    0,   23,  138,    0,    0,    0,    0,  329,  329,    2,
    3,    4,  180,    6,    0,  172,  107,  108,  109,    0,
    0,    0,   25,   26,   15,   16,   33,   34,    0,   36,
    0,    0,    0,   18,   19,   20,   21,   22,    0,    0,
   23,  138,    0,    0,    0,  174,    0,  175,    0,    0,
    0,    0,    0,   69,   69,   47,   69,   69,   69,   69,
   69,   69,   69,   69,  329,   33,   34,    0,   36,    0,
    0,    0,    0,    0,   69,   69,    0,   69,   69,   69,
  293,  295,    0,  298,  330,  291,  289,    0,  290,  300,
  292,    0,    0,    0,   47,    0,    0,    0,  330,  330,
    0,    0,    0,    0,  297,    0,    0,   69,    0,   69,
   69,    0,    0,    0,  331,    0,    0,    0,  331,    0,
    0,  331,   72,   72,    0,   72,   72,   72,   72,   72,
   72,   72,   72,    0,  299,  331,  331,    0,    0,   69,
   69,   69,    0,   72,   72,    0,   72,   72,   72,    0,
    0,    0,    0,    0,    0,  330,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  296,    0,    0,
  331,    0,    0,    0,    0,    0,   72,    0,   72,   72,
    0,    0,    0,    0, 1076, 1079, 1082, 1085, 1088, 1091,
 1094, 1097, 1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121,
 1124,    0,  331, 1127, 1130, 1133, 1136,    0,   72,   72,
   72,    0,  142,  143,  144,  145,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
  160,  161,  162,  163,  164,  181,  182,   35,    0,    0,
    0,  332,    0,    0,  332,  330,   41,  211,    0,    0,
    6,    0,    0,  107,  108,  109,    0,    0,  332,  332,
    0,   15,   16,    0,    0,    0,    0,    0,    0,    0,
   18,    0,    0,   69,    0,    0,    0,    0,   69,    0,
    0,   69,   69,   69,    0,    0,    0,   69,   69,    0,
   69,    0,    0,  332,    0,  212,  213,  214,  215,  216,
  217,  218,  219,  220,    0,   36,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,  332,   69,   69,   69,   69,
    0,    0,   69,   69,  331,    0,    0,    0,    0,    0,
    0,   69,   72,    0,   69,    0,    0,   72,  331,  331,
   72,   72,   72,    0,    0,  333,   72,   72,  333,   72,
    0,    0,    0,    0,    0, 1214,    0, 1217, 1223,    0,
    0,    0,  333,  333,    0,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,    0,   72,   72,   72,   72, 1220,
    0,   72,   72,    0,    0,  331,    0,  333,    0,    0,
   72,   73,   73,   72,   73,   73,   73,   73,   73,   73,
   73,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,   73,    0,   73,   73,   73,    0,  333,
  292,    0,    0,  292,  292,  292,    0,    0,    0,    0,
    0,  292,  292,  641,    0,    0,    0,  332,  645,    0,
  292,  649,  653,  657,    0,   73,    0,   73,   73,  661,
  665,  332,  332,    0,    0,    0,    0,    0,  669,    0,
   74,   74,    0,   74,   74,   74,   74,   74,   74,   74,
   74,    0,    0,    0,  292,  292,   64,   73,   73,   73,
   64,   74,   74,  292,   74,   74,   74,    0,    0,    0,
    0,    0,  254,  673,  677,  680,    0,   64,   64,    0,
    0,  257,  120,    0,    0,    0,    0,    6,  332,    0,
  107,  108,  109,    0,   74,    0,   74,   74,   15,   16,
    0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   74,   74,   74,   65,
   65,  333,   65,   65,   65,   65,   65,   65,   65,   65,
    0,  332,   36,    0,    0,  333,  333,    0,    0,    0,
   65,   65,    0,   65,   65,   65, 1151, 1154, 1157, 1160,
 1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 1190,
 1193, 1196, 1199,    0,    0, 1202, 1205, 1208, 1211,    0,
    0,    0,    0,   65,    0,   65,   65,    0,    0,    0,
    0,   73,    0,    0,    0,    0,   73,    0,    0,   73,
   73,   73,  333,    0,    0,   73,   73,    0,   73,    0,
    0,    0,    0,    0,    0,   65,   65,   65, 1289,    0,
 1292, 1298,    0,    0,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,    0,   73,   73,   73,   73,    0,    0,
   73,   73, 1295,    0,    0,    0,    0,    0,    0,   73,
   74,    0,   73,    0,    0,   74,    0,    0,   74,   74,
   74,    0,    0,    0,   74,   74,    0,   74,    0,    0,
  293,    0,    0,  293,  293,  293,    0,    0,    0,    0,
    0,    0,  293,   74,   74,   74,   74,   74,   74,   74,
   74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
   74,   74,    0,   74,   74,   74,   74,    0,    0,   74,
   74,    0,    0,    0,    0,    0,   64,    0,   74,    0,
    0,   74,    0,    0,  293,  293,  293,  293,  293,    0,
  293,  293,    0,  293,    0,    0,    0,    0,    0,   65,
    0,    0,   64,    0,   65,    0,   64,   65,   65,   65,
    0,    0,  334,   65,   65,  334,   65,    0,    0,    0,
    0,    0,    0,    0,   64,    0,    0,    0,    0,  334,
  334,    0,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,    0,   65,   65,   65,   65,    0,    0,   65,   65,
    0,    0,    0,    0,  334,    0,    0,   65,   71,   71,
   65,   71,   71,   71,   71,   71,   71,   71,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   71,
   71,    0,   71,   71,   71,    0,  334,    0,    0, 1226,
 1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256,
 1259, 1262, 1265, 1268, 1271, 1274,    0,    0, 1277, 1280,
 1283, 1286,   71,    0,   71,   71,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   66,   66,    0,
   66,   66,   66,   66,   66,   66,   66,   66,    0,    0,
    0,    0,    0,    0,   71,   71,   71,    0,   66,   66,
    0,   66,   66,   66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   67,   67,    0,   67,   67,   67,   67,   67,   67,   67,
   67,   66,    0,   66,   66,    0,    0,    0,    0,    0,
    0,   67,   67,   67,   67,   67,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,   66,   66,  293,    0,  334,  293,
  293,  293,    0,    0,   67,    0,   67,   67,  293,    0,
  407,    0,  334,  334,    0,    6,    0,    0,  107,  108,
  109,    0,    0,    0,    0,    0,   15,   16,    0,    0,
    0,  335,    0,    0,  335,   18,   67,   67,   67,    0,
    0,    0,   64,  138,    0,    0,    0,    0,  335,  335,
  293,  293,  293,  293,  293,    0,  293,  293,   71,  293,
    0,    0,    0,   71,    0,    0,   71,   71,   71,  334,
   36,  338,   71,   71,  338,   71,    0,    0,    0,    0,
    0,    0,    0,  335,    0,    0,    0,    0,  338,  338,
    0,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
    0,   71,   71,   71,   71,  335,    0,   71,   71,    0,
    0,    0,    0,  338,    0,    0,   71,   66,    0,   71,
  293,    0,   66,    0,    0,   66,   66,   66,    0,    0,
    0,   66,   66,    0,   66,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  338,    0,    0,    0,    0,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,    0,
   66,   66,   66,   66,   67,   67,   66,   66,    0,    0,
    0,    0,    0,    0,    0,   66,    0,    0,   66,    0,
    0,    0,    0,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,    0,   67,   67,   67,   67,   70,   70,   67,
   70,   70,   70,   70,   70,   70,   70,   70,   67,    0,
    0,   67,    0,    0,    0,    0,  541,  335,   70,   70,
   70,   70,   70,   70,    0,    0,    0,    0,    0,    0,
    0,  335,  335,    0,    0,    0,  293,    0,    0,  293,
  293,  293,    0,    0,    0,    0,    0,    0,  293,    0,
    0,   70,    0,   70,   70,  219,  219,  338,  219,  219,
  219,  219,  219,  219,  219,  219,    0,    0,    0,    0,
    0,  338,  338,    0,    0,    0,  219,  219,  219,  219,
  219,  219,    0,   70,   70,   70,    0,    0,  335,    0,
  293,  293,  293,  293,  293,    0,  293,  293,    0,  293,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  219,
    0,  219,  219,  135,  135,    0,  135,  135,  135,  135,
  135,  135,  135,  135,    0,    0,    0,    0,  338,    0,
    0,    0,    0,  339,  135,  135,  339,  135,  135,  135,
    0,    0,  219,  219,    0,    0,    0,  537,    0,    0,
  339,  339,  537,    0,    0,  537,  537,  537,    0,    0,
    0,    0,    0,  537,  537,    0,    0,  135,    0,  135,
  135,    0,  537,    0,    0,  293,    0,    0,  293,  293,
  293,    0,    0,    0,    0,  339,  293,  293,    0,    0,
    0,    0,    0,    0,  340,  293,  341,  340,    0,  341,
  135,  135,    0,    0,    0,    0,  544,  537,    0,    0,
  547,  340,  340,  341,  341,  550,    0,  339,  309,  309,
    0,    0,  309,  309,  309,  309,  309,  309,  309,  293,
  293,   70,   70,    0,    0,    0,    0,    0,  293,  309,
  309,    0,  309,    0,    0,    0,  340,    0,  341,    0,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,    0,
   70,   70,   70,   70,  309,  219,   70,    0,  340,    0,
  341,    0,    0,    0,    0,   70,    0,    0,   70,  219,
  219,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  309,  309,    0,    0,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,    0,    0,  219,  219,
  219,  219,    0,  135,  177,  177,    0,  177,  177,  177,
  177,  177,  177,  177,  177,    0,  219,  135,  135,  339,
    0,    0,    0,    0,    0,  177,  177,  177,  177,  177,
  177,    0,    0,  339,  339,    0,    0,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,    0,    0,  135,  135,  135,  135,
  177,  177,  179,  179,    0,  179,  179,  179,  179,  179,
  179,  179,  179,    0,  135,    0,    0,    0,    0,    0,
  340,    0,  341,  179,  179,  179,  179,  179,  179,    0,
  339,  177,  177,    0,  340,  340,  341,  341,    0,    0,
    0,    0,    0,    0,    0,  363,    0,    0,  309,  363,
    0,  363,  363,    0,  363,  363,    0,    0,  179,  179,
    0,    0,  309,  309,    0,    0,  363,  363,  363,  363,
  363,  363,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  361,  179,
  179,  340,  361,  341,  361,  361,    0,  361,  361,  363,
    0,  363,  363,    0,    0,    0,    0,    0,    0,  361,
  361,  361,  361,  361,  361,    0,    0,    0,    0,  309,
    0,  565,    0,    0,    0,    0,  569,    0,    0,  573,
  577,  581,  363,  363,    0,    0,    0,  585,  589,    0,
    0,    0,  361,    0,  361,  361,  593,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  177,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  361,    0,  177,  177,
  445,  597,  445,  445,  445,    0,  601,  445,    0,  445,
    0,    0,    0,    0,    0,    0,    0,    0,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,    0,    0,  177,  177,  177,
  177,    0,  179,  565,    0,    0,    0,    0,  569,    0,
    0, 1794, 1798, 1802,    0,  177,  179,  179,    0,  585,
  589,    0,    0,    0,    0,    0,    0,    0,  593,    0,
    0,    0,    0,    0,    0,    0,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,  179,    0,    0,  179,  179,  179,  179,  363,
  363,    0,  445,  597,  445,  445,  445,    0,  449,  445,
    0,  445,    0,  179,    0,    0,    0,    0,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,    0,    0,    0,    0,
  363,  363,  361,  361,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  363,    0,    0,    0,
    0,    0,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,    0,
    0,  346,  346,  361,  361,  346,  346,  346,  346,  346,
  346,  346,    0,    0,    0,    0,    0,    0,    0,  361,
    0,    0,  346,  346,    0,  346,  345,  345,    0,    0,
  345,  345,  345,  345,  345,  345,  345,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  345,  345,    0,
  345,    0,    0,    0,  321,  321,    0,  346,  321,  321,
  321,  321,  321,  336,  321,    0,    0,  336,  336,  336,
  336,  336,    0,  336,    0,  321,  321,    0,  321,    0,
    0,    0,  345,    0,  336,  336,    0,  336,  346,  346,
    0,    0,    0,    0,  322,  322,    0,    0,  322,  322,
  322,  322,  322,    0,  322,    0,    0,    0,    0,    0,
  321,    0,    0,  345,  345,  322,  322,    0,  322,  336,
    0,    0,  337,    0,    0,    0,  337,  337,  337,  337,
  337,    0,  337,    0,    0,    0,    0,    0,    0,    0,
    0,  321,  321,  337,  337,    0,  337,    0,    0,  318,
  322,  336,    0,  318,  318,  318,  318,  318,    0,  318,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  318,  318,    0,  318,    0,    0,    0,    0,  337,    0,
    0,  322,  322,    0,    0,  319,    0,    0,    0,  319,
  319,  319,  319,  319,  320,  319,    0,    0,  320,  320,
  320,  320,  320,  120,  320,  318,  319,  319,    6,  319,
  337,  107,  108,  109,    0,  320,  320,    0,  320,   15,
   16,  346,    0,   79,    0,   79,   79,   79,   18,   79,
    0,    0,    0,    0,    0,  346,  346,  318,    0,    0,
    0,  319,    0,    0,    0,    0,  345,   79,    0,    0,
  320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  345,  345,  253,   36,  253,  253,    0,    0,  253,    0,
    0,    0,    0,  319,  321,    0,   79,    0,    0,    0,
    0,    0,  320,  336,    0,    0,  253,    0,  321,  321,
    0,    0,  346,    0,    0,    0,    0,  336,  336,    0,
    0,  219,  219,    0,  227,    0,  219,  219,  219,  219,
  219,  219,    0,    0,  322,  253,    0,  345,    0,    0,
    0,    0,    0,  219,  223,  219,  219,  219,  322,  322,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  337,    0,    0,  321,    0,    0,    0,    0,
    0,    0,    0,    0,  336,  219,  337,  337,  219,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  254,  318,
  254,  254,    0,    0,  254,    0,    0,    0,  342,    0,
    0,  342,    0,  318,  318,  322,    0,    0,  219,  219,
    0,    0,  254,    0,  343,  342,  342,  343,    0,    0,
    0,    0,    0,    0,    0,  319,    0,    0,    0,    0,
    0,  343,  343,  337,  320,    0,    0,    0,    0,  319,
  319,  254,    0,    0,    0,    0,    0,    0,  320,  320,
  342,    0,    0,    0,    0,    0,  344,    0,    0,  344,
  318,    0,   79,    0,    0,    0,  343,   79,    0,    0,
   79,   79,   79,  344,  344,  347,    0,    0,  347,   79,
    0,    0,  342,    0,    0,    0,  325,    0,    0,  325,
    0,    0,  347,  347,    0,   79,  319,    0,  343,    0,
    0,  253,    0,  325,  325,  320,  253,    0,  344,  253,
  253,  253,    0,   79,    0,    0,    0,  253,  253,    0,
    0,   79,   79,    0,    0,    0,  253,  347,    0,    0,
   79,    0,    0,    0,  253,    0,    0,    0,  325,    0,
  344,  186,    0,    0,    0,    0,  190,    0,    0,  194,
  198,  202,    0,    0,    0,    0,    0,  206,  211,  347,
  253,  253,    0,    0,    0,    0,  215,    0,    0,  253,
  325,    0,    0,    0,    0,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,    0,    0,  219,  219,  219,  219,    0,  541,
  231,  234,  238,  241,    0,    0,    0,  254,  326,  244,
    0,  326,  254,    0,  342,  254,  254,  254,    0,  323,
    0,    0,  323,  254,  254,  326,  326,    0,  342,  342,
  343,  324,  254,    0,  324,    0,  323,  323,  351,    0,
  254,  351,    0,    0,  343,  343,    0,  359,  324,  324,
  359,    0,    0,  247,    0,  351,  351,    0,  250,    0,
  326,  250,  250,  250,  359,  359,  254,  254,    0,  250,
  250,  323,  344,    0,    0,  254,    0,  327,  250,    0,
  327,    0,    0,  324,    0,  342,  344,  344,    0,    0,
  351,  347,  326,    0,  327,  327,    0,    0,    0,  359,
    0,  343,  325,  323,    0,  347,  347,    0,    0,    0,
    0,    0,  254,  250,    0,  324,  325,  325,    0,  257,
  257,  257,  351,  257,    0,    0,    0,    0,    0,  327,
  537,  359,  258,  258,    0,  537,  258,    0,  537,  537,
  537,  257,    0,  344,    0,    0,  537,  537,    0,    0,
    0,    0,    0,    0,  258,  537,    0,    0,    0,    0,
    0,  327,  347,    0,    0,    0,    0,  176,    0,    0,
  257,  171,  173,  325,  179,    0,  169,  167,  178,  168,
    0,  170,    0,  258,    0,    0,    0,    0,    0,  544,
  537,    0,    0,  547,  165,  177,  166,  537,  550,    0,
    0,    0,  537,    0,    0,  537,  537,  537,    0,    0,
    0,    0,    0,  537,  537,    0,    0,    0,    0,    0,
    0,    0,  537,    0,  326,  180,    0,    0,  172,    0,
    0,    0,    0,  207,  207,  323,    0,  207,  326,  326,
    0,    0,    0,    0,    0,    0,    0,  324,    0,  323,
  323,    0,    0,    0,  351,  207,  544,  537,  174,    0,
  175,  324,  324,  359,    0,  550,    0,    0,  351,  351,
  207,    0,  207,  207,  207,    0,  207,  359,  359,    0,
  137,    0,    0,    0,    0,    6,    0,    0,  107,  108,
  109,    0,    0,  327,  207,  326,   15,   16,    0,    0,
    0,    0,    0,    0,    0,   18,  323,  327,  327,    0,
    0,    0,    0,  138,    0,    0,    0,    0,  324,    0,
    0,    0,    0,  207,    0,  351,    0,    0,    0,    0,
    0,    0,    0,    0,  359,    0,  257,    0,    0,    0,
   36,  257,    0,    0,  257,  257,  257,    0,    0,  258,
    0,    0,  257,  257,  258,    0,    0,  258,  258,  258,
    0,  257,    0,    0,  327,  258,  258,  293,  295,  257,
  298,    0,  291,  289,  258,  290,  300,  292,    0,    0,
    0,    0,  258,    0,    0,    0,    0,    0,    0,  301,
  287,  297,  288,  302,    0,  257,  257,  473,    0,    0,
    0,    0,    6,    0,  257,  107,  108,  109,  258,  258,
    0,    0,    0,   15,   16,    0,    0,  258,    0,    0,
    0,  299,   18,    0,  294,  142,  143,  144,  145,  146,
  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
  157,  158,  159,  160,  161,  162,  163,  164,  181,  182,
  207,    0,    0,    0,  296,  207,    0,   36,  207,  207,
  207,    0,    0,    0,    0,    0,  207,  207,    0,    0,
    0,    0,    0,    0,    0,  207,    0,    0, 1364,    0,
 1367, 1373,    0,  207,    0,    0,    0,    0,    0,  207,
    0,    0,    0,    0,  207,    0,    0,  207,  207,  207,
    0,    0,    0,    0,    0,  207,  207,    0,    0,    0,
  207,    0, 1370,    0,  207,    0,    0,    0,  219,  219,
    0,  219,  207,  219,  219,  219,  219,  219,  219,  515,
    0,    0,    0,    0,    6,    0,    0,  107,  108,  109,
  219,  219,  219,  219,  219,   15,   16,    0,    0,  207,
    0,    0,    0,    0,   18,    0,    0,  293,  295,    0,
  298,  377,  291,  289,    0,  290,  300,  292,    0,    0,
    0,    0,  219,    0,    0,  219,    0,    0,    0,    0,
  287,  297,  288,  302,    0,    0,    0,    0,    0,   36,
    0,    0,  293,  295,    0,  298,  521,  291,  289,    0,
  290,  300,  292,    0,    0,  219,  219,    0,    0,    0,
    0,  299,    0,    0,  294,  287,  297,  288,  302,    0,
    0,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,    0,    0,
  283,  284,  285,  286,  296,    0,  299,  293,  295,  294,
  298,  523,  291,  289,    0,  290,  300,  292,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  287,  297,  288,  302,    0,    0,    0,    0,    0,  296,
    0,    0,  293,  295,    0,  298,    0,  291,  289,    0,
  290,  300,  292,    0,    0,    0,    0,    0,    0,    0,
    0,  299,    0,    0,  294,  287,  297,  288,  302, 1301,
 1304, 1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 1331,
 1334, 1337, 1340, 1343, 1346, 1349,    0,    0, 1352, 1355,
 1358, 1361,    0,    0,  296,    0,  299,    0,  541,  294,
    0,  293,  295,    0,  298,    0,  291,  289,    0,  290,
  300,  292,    0,    0, 1840,    0,    0,    0,    0,    0,
    0,    0,  542,    0,  287,  297,  288,  302,    0,  296,
    0,    0,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,    0,
    0,  219,  219,  219,  219,  299,    0,    0,  294,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  296,    0,
  283,  284,  285,  286,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,    0,    0,  283,  284,  285,  286,    0,
    0,    0,  293,  295,    0,  298,    0,  291,  289,    0,
  290,  300,  292,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  287,  297,  288,  302,    0,
    0,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,    0,    0,
  283,  284,  285,  286,    0,    0,  299,    0,  593,  294,
    0,    0,    0,    0,    0,    0,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,    0,    0,  283,  284,  285,  286,  296,
    0,    0,    0,    0,  293,  295,    0,  298,  632,  291,
  289,    0,  290,  300,  292,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  287,  297,  288,
  302,    0,    0,    0,    0,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,    0,    0,  283,  284,  285,  286,  299,  293,
  295,  294,  298,  644,  291,  289,    0,  290,  300,  292,
  207,    0,    0,    0,    0,  207,    0,    0,  207,  207,
  207,    0,  287,  297,  288,  302,  207,  207,    0,    0,
    0,  296,    0,    0,    0,  207,  293,  295,    0,  298,
    0,  291,  289,    0,  290,  300,  292,    0,    0,    0,
    0,    0,    0,  299,    0,    0,  294,    0,    0,  287,
  297,  288,  302,    0,    0,    0,    0,    0,    0,    0,
  207,    0,    0,    0,    0,  293,  295,    0,  298,  663,
  291,  289,    0,  290,  300,  292,  296,    0,    0,    0,
  299,    0,  651,  294,    0,    0,    0,    0,  287,  297,
  288,  302,    0,    0,    0,    0,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  296,    0,  283,  284,  285,  286,  299,
    0,    0,  294,    0,  293,  295,    0,  298,  664,  291,
  289,    0,  290,  300,  292,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  270,  287,  297,  288,
  302,  270,  296,    0,  270,  270,  270,    0,    0,    0,
    0,    0,  270,  270,    0,    0,    0,    0,    0,    0,
    0,  270,    0,    0,    0,    0,    0,    0,  299,    0,
    0,  294,    0,    0,    0,    0,    0,    0,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,    0,  270,  283,  284,  285,
  286,  296,    0,    0,    0,    0,  293,  295,    0,  298,
  665,  291,  289,    0,  290,  300,  292,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  287,
  297,  288,  302,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
    0,    0,  283,  284,  285,  286,    0,    0,    0,    0,
  299,    0,    0,  294,    0,    0,    0,    0,    0,    0,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,    0,    0,  283,
  284,  285,  286,  296,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,    0,    0,  283,  284,
  285,  286,    0,    0,    0,    0,    0,  293,  295,    0,
  298,  666,  291,  289,    0,  290,  300,  292,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  287,  297,  288,  302,    0,    0,    0,    0,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,    0,    0,  283,  284,  285,
  286,  299,    0,    0,  294,    0,  293,  295,    0,  298,
  678,  291,  289,    0,  290,  300,  292,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  287,
  297,  288,  302,    0,  296,    0,    0,    0,    0,    0,
    0,  293,  295,    0,  298,    0,  291,  289,    0,  290,
  300,  292,    0,    0,    0,    0,    0,    0,    0,    0,
  299,    0,    0,  294,  287,  297,  288,  302,    0,    0,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,    0,    0,  283,
  284,  285,  286,  296,  493,  299,  135,  703,  294,  135,
    0,    0,  135,  135,  135,  135,  135,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  135,    0,
  135,  135,  135,    0,    0,    0,    0,    0,  296,    0,
    0,  293,  295,    0,  298,    0,  291,  289,    0,  290,
  300,  292,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,    0,  135,  287,  297,  288,  302,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  827,  833,    0,  842,    0,  821,  815,    0,  818,  848,
  824,    0,    0,  135,  135,  299,    0,    0,  294,    0,
    0,    0,    0,  809,  839,  812,  851,    0,    0,    0,
    0,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  296,    0,
  283,  284,  285,  286,  845,  453,    0,  830,    0,    0,
  458,    0,    0,  463,  468,  473,    0,    0,    0,    0,
    0,  478,  483,    0,    0,    0,    0,    0,    0,    0,
  488,    0,    0,    0,    0,    0,    0,  836,    0,    0,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,    0,    0,  283,
  284,  285,  286,    0,  496,  500,  505,  509,  445,    0,
  449,  445,    0,  513,    0,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,    0,    0,  283,  284,  285,  286,    0,    0,
    0,  941,  947,    0,  956,    0,  935,  929,    0,  932,
  962,  938,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  923,  953,  926,  965,    0,    0,
  135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
  135,  135,  135,  135,  135,  135,  135,   79,    0,  135,
  135,  135,  135,    0,    0,  959,    0,    0,  944,    0,
    0,    0,    0,    0,    0,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,    0,    0,  283,  284,  285,  286,  950,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  746,  749,  752,  755,  758,  761,
  764,  767,  770,  773,  776,  779,  782,  785,  788,  791,
  794,    0,    0,  797,  800,  803,  806, 1049, 1055,    0,
 1064,    0, 1043, 1037,    0, 1040, 1070, 1046,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1031, 1061, 1034, 1073, 1532, 1538,    0, 1547,    0, 1526,
 1520,    0, 1523, 1553, 1529,    0,  260,    0,    0,    0,
    0,  263,    0,    0,  266,  269,  272, 1514, 1544, 1517,
 1556, 1067,  275,  278, 1052,    0,    0,    0,    0,    0,
    0,  281, 1640, 1646,    0, 1655,    0, 1634, 1628,    0,
 1631, 1661, 1637,    0,    0,    0,    0,    0, 1550,    0,
    0, 1535,    0,    0, 1058, 1622, 1652, 1625, 1664,    0,
    0,    0,    0,    0,    0,    0,  284, 1758, 1764,    0,
 1773,    0, 1752, 1746,    0, 1749, 1779, 1755,    0,    0,
    0, 1541,    0,    0,    0,    0, 1658,    0,    0, 1643,
 1740, 1770, 1743, 1782,    0,  860,  863,  866,  869,  872,
  875,  878,  881,  884,  887,  890,  893,  896,  899,  902,
  905,  908,    0,    0,  911,  914,  917,  920,    0, 1649,
    0, 1776, 1936, 1942, 1761, 1951,    0, 1930, 1924,    0,
 1927, 1957, 1933,    0,  565,    0,    0,    0,    0,  569,
    0,    0, 1794, 1798, 1802, 1918, 1948, 1921, 1960,    0,
  585,  589,    0,    0, 1767,    0,    0, 2044, 2050,  593,
 2059,    0, 2038, 2032,    0, 2035, 2065, 2041,    0,    0,
    0,    0,    0,    0,    0,    0, 1954,    0,    0, 1939,
 2026, 2056, 2029, 2068,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  445,  597,  445,  445,  445,    0,  601,
  445,    0,  445,    0,    0,    0,    0,    0,    0, 1945,
    0, 2062,    0,    0, 2047,    0,    0,    0,    0,    0,
    0,  968,  971,  974,  977,  980,  983,  986,  989,  992,
  995,  998, 1001, 1004, 1007, 1010, 1013, 1016,    0,    0,
 1019, 1022, 1025, 1028, 2053,    0,    0,    0, 1451, 1454,
 1457, 1460, 1463, 1466, 1469, 1472, 1475, 1478, 1481, 1484,
 1487, 1490, 1493, 1496, 1499,    0,    0, 1502, 1505, 1508,
 1511,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1559, 1562, 1565, 1568,
 1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 1595, 1598,
 1601, 1604, 1607,    0,    0, 1610, 1613, 1616, 1619,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1677, 1680, 1683, 1686, 1689, 1692, 1695, 1698, 1701,
 1704, 1707, 1710, 1713, 1716, 1719, 1722, 1725,    0,    0,
 1728, 1731, 1734, 1737,    0,    0,    0, 2152, 2158,    0,
 2167,    0, 2146, 2140,    0, 2143, 2173, 2149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2134, 2164, 2137, 2176,    0,    0, 1855, 1858, 1861, 1864,
 1867, 1870, 1873, 1876, 1879, 1882, 1885, 1888, 1891, 1894,
 1897, 1900, 1903,    0,    0, 1906, 1909, 1912, 1915,    0,
    0, 2170,    0,    0, 2155,    0,    0,    0,    0,    0,
    0, 1963, 1966, 1969, 1972, 1975, 1978, 1981, 1984, 1987,
 1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011,    0,    0,
 2014, 2017, 2020, 2023, 2161, 2260, 2266,    0, 2275,    0,
 2254, 2248,    0, 2251, 2281, 2257,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2242, 2272,
 2245, 2284, 2368, 2374,    0, 2383,    0, 2362, 2356,    0,
 2359, 2389, 2365,    0,  287,    0,    0,    0,    0,  290,
    0,    0,  293,  296,  299, 2350, 2380, 2353, 2392, 2278,
  302,  305, 2263,    0,    0,    0,    0,    0,    0,  308,
 2476, 2482,    0, 2491,    0, 2470, 2464,    0, 2467, 2497,
 2473,    0,    0,    0,    0,    0, 2386,    0,    0, 2371,
    0,    0, 2269, 2458, 2488, 2461, 2500,    0,    0,    0,
    0,    0,    0,    0,  311,    0,    0, 2584, 2590,    0,
 2599,    0, 2578, 2572,    0, 2575, 2605, 2581,    0, 2377,
    0,    0,    0,    0, 2494,    0,    0, 2479,    0,    0,
 2566, 2596, 2569, 2608,    0,    0,    0,    0,    0,    0,
    0,    0, 2692, 2698,    0, 2707,    0, 2686, 2680,    0,
 2683, 2713, 2689,    0,    0,    0,    0, 2485,    0,    0,
    0, 2602,    0,    0, 2587, 2674, 2704, 2677, 2716,    0,
    0, 2071, 2074, 2077, 2080, 2083, 2086, 2089, 2092, 2095,
 2098, 2101, 2104, 2107, 2110, 2113, 2116, 2119,    0,    0,
 2122, 2125, 2128, 2131, 2593,    0, 2710, 2950, 2956, 2695,
 2965,    0, 2944, 2938,    0, 2941, 2971, 2947,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2932, 2962, 2935, 2974,    0,    0,    0,    0,    0, 2701,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2968,    0,    0, 2953,    0,    0,    0,    0, 2179,
 2182, 2185, 2188, 2191, 2194, 2197, 2200, 2203, 2206, 2209,
 2212, 2215, 2218, 2221, 2224, 2227,    0,    0, 2230, 2233,
 2236, 2239,    0,    0, 2959,    0, 2287, 2290, 2293, 2296,
 2299, 2302, 2305, 2308, 2311, 2314, 2317, 2320, 2323, 2326,
 2329, 2332, 2335,    0,    0, 2338, 2341, 2344, 2347,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2395, 2398, 2401, 2404, 2407, 2410,
 2413, 2416, 2419, 2422, 2425, 2428, 2431, 2434, 2437, 2440,
 2443,    0,    0, 2446, 2449, 2452, 2455,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2524, 2527,
 2530, 2533, 2536, 2539, 2542, 2545, 2548, 2551,    0,    0,
 2554, 2557, 2560, 2563,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2611, 2614, 2617, 2620,
 2623, 2626, 2629, 2632, 2635, 2638, 2641, 2644, 2647, 2650,
 2653, 2656, 2659,    0,    0, 2662, 2665, 2668, 2671,    0,
 3058, 3064,    0, 3073,    0, 3052, 3046,    0, 3049, 3079,
 3055,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3040, 3070, 3043, 3082,    0,    0,    0,
    0, 2869, 2872, 2875, 2878, 2881, 2884, 2887, 2890, 2893,
 2896, 2899, 2902, 2905, 2908, 2911, 2914, 2917,    0,    0,
 2920, 2923, 2926, 2929, 3076, 3241, 3247, 3061, 3256,    0,
 3235, 3229,    0, 3232, 3262, 3238,    0,  314,    0,    0,
    0,    0,  317,    0,    0,  320,  323,  326, 3223, 3253,
 3226, 3265,    0,  329,  332,    0,    0, 3067,    0,    0,
 3349, 3355,  335, 3364,    0, 3343, 3337,    0, 3340, 3370,
 3346,    0,    0,    0,    0,    0,    0,    0,    0, 3259,
    0,    0, 3244, 3331, 3361, 3334, 3373,    0,    0,    0,
    0,    0,    0,    0,    0, 3457, 3463,  338, 3472,    0,
 3451, 3445,    0, 3448, 3478, 3454,    0,    0,    0,    0,
    0,    0, 3250,    0, 3367,    0,    0, 3352, 3439, 3469,
 3442, 3481,    0,    0,    0,    0,    0,    0,    0,    0,
 3565, 3571,    0, 3580,    0, 3559, 3553,    0, 3556, 3586,
 3562,    0,    0,    0,    0,    0,    0, 3358,    0, 3475,
    0,    0, 3460, 3547, 3577, 3550, 3589,    0,    0,    0,
    0,    0,    0,    0,    0, 3748, 3754,    0, 3763,    0,
 3742, 3736,    0, 3739, 3769, 3745,    0,    0,    0,    0,
    0,    0, 3466,    0, 3583,    0,    0, 3568, 3730, 3760,
 3733, 3772,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3574,    0, 3766,
    0,    0, 3751,    0, 2977, 2980, 2983, 2986, 2989, 2992,
 2995, 2998, 3001, 3004, 3007, 3010, 3013, 3016, 3019, 3022,
 3025,    0,    0, 3028, 3031, 3034, 3037,    0,    0,    0,
 3856, 3862, 3757, 3871,    0, 3850, 3844,    0, 3847, 3877,
 3853,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3838, 3868, 3841, 3880,    0,    0, 3160,
 3163, 3166, 3169, 3172, 3175, 3178, 3181, 3184, 3187, 3190,
 3193, 3196, 3199, 3202, 3205, 3208,    0,    0, 3211, 3214,
 3217, 3220,    0,    0, 3874,    0,    0, 3859,    0,    0,
    0,    0,    0,    0, 3268, 3271, 3274, 3277, 3280, 3283,
 3286, 3289, 3292, 3295, 3298, 3301, 3304, 3307, 3310, 3313,
 3316,    0,    0, 3319, 3322, 3325, 3328, 3865,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3376,
 3379, 3382, 3385, 3388, 3391, 3394, 3397, 3400, 3403, 3406,
 3409, 3412, 3415, 3418, 3421, 3424,    0,    0, 3427, 3430,
 3433, 3436,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3484, 3487, 3490, 3493, 3496, 3499,
 3502, 3505, 3508, 3511, 3514, 3517, 3520, 3523, 3526, 3529,
 3532,    0,    0, 3535, 3538, 3541, 3544,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3667,
 3670, 3673, 3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697,
 3700, 3703, 3706, 3709, 3712, 3715,    0,    0, 3718, 3721,
 3724, 3727, 3964, 3970,    0, 3979,    0, 3958, 3952,    0,
 3955, 3985, 3961,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3946, 3976, 3949, 3988,    0,
    0,    0,    0,    0,    0,    0,    0, 4447, 4453,    0,
 4462,    0, 4441, 4435,    0, 4438, 4468, 4444,    0,    0,
    0,    0,    0,    0,    0,    0, 3982,    0,    0, 3967,
 4429, 4459, 4432, 4471, 3775, 3778, 3781, 3784, 3787, 3790,
 3793, 3796, 3799, 3802, 3805, 3808, 3811, 3814, 3817, 3820,
 3823,    0,    0, 3826, 3829, 3832, 3835, 4858, 4864, 3973,
 4873, 4465, 4852, 4846, 4450, 4849, 4879, 4855,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4840, 4870, 4843, 4882,    0,    0,    0,    0,    0,    0,
    0,    0, 4966, 4972, 4456, 4981,    0, 4960, 4954,    0,
 4957, 4987, 4963,    0,    0,    0,    0,    0,    0,    0,
    0, 4876,    0,    0, 4861, 4948, 4978, 4951, 4990,    0,
    0,    0,    0,    0,    0,    0,    0, 5089, 5095,    0,
 5104,    0, 5083, 5077,    0, 5080, 5110, 5086,    0,    0,
    0,    0,    0,    0, 4867,    0, 4984,    0,    0, 4969,
 5071, 5101, 5074, 5113,    0,    0,    0,    0,    0,    0,
    0,    0,  293,  295,    0,  298,    0,  291,  289,    0,
  290,  300,  292,    0,    0,    0,    0,    0,    0, 4975,
    0, 5107,    0,    0, 5092,  287,  297,    0,  302,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1439,
    0, 1442, 1448,    0, 5098,    0,  299,    0,    0,  294,
    0,    0,    0,    0,    0,    0, 3883, 3886, 3889, 3892,
 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922,
 3925, 3928, 3931, 1445,    0, 3934, 3937, 3940, 3943,  296,
 2782,    0, 2785, 2791,    0,    0,    0,    0,    0,    0,
    0, 4366, 4369, 4372, 4375, 4378, 4381, 4384, 4387, 4390,
 4393, 4396, 4399, 4402, 4405, 4408, 4411, 4414,    0,    0,
 4417, 4420, 4423, 4426, 2788,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2857,    0, 2860, 2866,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4777, 4780, 4783, 4786, 4789, 4792, 4795, 4798, 4801,
 4804, 4807, 4810, 4813, 4816, 4819, 4822, 4825, 2863,    0,
 4828, 4831, 4834, 4837,    0, 3148,    0, 3151, 3157,    0,
    0,    0,    0,    0,    0,    0, 4885, 4888, 4891, 4894,
 4897, 4900, 4903, 4906, 4909, 4912, 4915, 4918, 4921, 4924,
 4927, 4930, 4933,    0,    0, 4936, 4939, 4942, 4945, 3154,
 3655,    0, 3658, 3664,    0,    0,    0,    0,    0,    0,
    0, 5008, 5011, 5014, 5017, 5020, 5023, 5026, 5029, 5032,
 5035, 5038, 5041, 5044, 5047, 5050, 5053, 5056,    0,    0,
 5059, 5062, 5065, 5068, 3661, 4054,    0, 4057, 4063,    0,
    0,    0,    0,    0,    0,    0,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,    0,    0,  283,  284,  285,  286, 4060,
 1376, 1379, 1382, 1385, 1388, 1391, 1394, 1397, 1400, 1403,
 1406, 1409, 1412, 1415, 1418, 1421, 1424,    0,    0, 1427,
 1430, 1433, 1436,    0, 4129,    0, 4132, 4138,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2719, 2722, 2725, 2728, 2731, 2734, 2737, 2740, 2743,
 2746, 2749, 2752, 2755, 2758, 2761, 2764, 2767, 4135,    0,
 2770, 2773, 2776, 2779,    0,    0,    0,    0, 4204,    0,
 4207, 4213,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2794, 2797, 2800, 2803, 2806,
 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830, 2833, 2836,
 2839, 2842, 4210,    0, 2845, 2848, 2851, 2854,    0, 4279,
    0, 4282, 4288,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3085, 3088, 3091, 3094,
 3097, 3100, 3103, 3106, 3109, 3112, 3115, 3118, 3121, 3124,
 3127, 3130, 3133, 4285,    0, 3136, 3139, 3142, 3145,    0,
 4354,    0, 4357, 4363,    0,    0,    0,    0,    0,    0,
    0, 3592, 3595, 3598, 3601, 3604, 3607, 3610, 3613, 3616,
 3619, 3622, 3625, 3628, 3631, 3634, 3637, 3640,    0,    0,
 3643, 3646, 3649, 3652, 4360, 4537,    0, 4540, 4546,    0,
    0,    0,    0,    0,    0,    0, 3991, 3994, 3997, 4000,
 4003, 4006, 4009, 4012, 4015, 4018, 4021, 4024, 4027, 4030,
 4033, 4036, 4039,    0,    0, 4042, 4045, 4048, 4051, 4543,
 4612,    0, 4615, 4621,    0,    0,  341,    0,    0,    0,
    0,  344,    0,    0,  347,  350,  353,    0,    0,    0,
    0,    0,  356,  359, 4687,    0, 4690, 4696,    0,    0,
    0,  362,    0,    0, 4618, 4066, 4069, 4072, 4075, 4078,
 4081, 4084, 4087, 4090, 4093, 4096, 4099, 4102, 4105, 4108,
 4111, 4114,    0,    0, 4117, 4120, 4123, 4126, 4693,    0,
    0,    0, 4762,    0, 4765, 4771,  365,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4141,
 4144, 4147, 4150, 4153, 4156, 4159, 4162, 4165, 4168, 4171,
 4174, 4177, 4180, 4183, 4186, 4189, 4768,    0, 4192, 4195,
 4198, 4201,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4216, 4219, 4222, 4225, 4228, 4231, 4234, 4237, 4240, 4243,
 4246, 4249, 4252, 4255, 4258, 4261, 4264,    0,    0, 4267,
 4270, 4273, 4276,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4291, 4294, 4297, 4300, 4303, 4306, 4309, 4312, 4315,
 4318, 4321, 4324, 4327, 4330, 4333, 4336, 4339,    0,    0,
 4342, 4345, 4348, 4351,    0,  493,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4474, 4477, 4480, 4483,
 4486, 4489, 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513,
 4516, 4519, 4522,  493,    0, 4525, 4528, 4531, 4534,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4549, 4552, 4555, 4558, 4561, 4564, 4567, 4570, 4573,
 4576, 4579, 4582, 4585, 4588, 4591, 4594, 4597,    0,    0,
 4600, 4603, 4606, 4609,    0, 4624, 4627, 4630, 4633, 4636,
 4639, 4642, 4645, 4648, 4651, 4654, 4657, 4660, 4663, 4666,
 4669, 4672,    0,    0, 4675, 4678, 4681, 4684,    0,    0,
  493,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 4699, 4702, 4705, 4708, 4711, 4714, 4717,
 4720, 4723, 4726, 4729, 4732, 4735, 4738, 4741, 4744, 4747,
  493,    0, 4750, 4753, 4756, 4759,  453,    0,    0,    0,
    0,  458,    0,    0,  463,  468,  473,    0,    0,    0,
 1821,    0,  478,  483,    0,  645,    0,    0,  649,  653,
  657,  488,    0,    0,  453,    0,  661,  665,    0,  458,
    0,    0,  463,  468,  473,  669,    0,    0,    0,    0,
  478,  483,    0,    0,    0,    0,    0,    0,    0,  488,
    0,    0,    0,    0,  493,  496,  500,  505,  509,  445,
    0,  449,  445,    0,  513,    0,    0,  493,    0,  254,
  673,  677,  680,    0,    0,    0,    0,    0,  257,    0,
  493,    0,    0,  496,  500,  505,  509,  445,    0,  449,
  445,  453,  513,  493,    0,    0,  458,    0,    0,  463,
  468,  473,    0,    0,    0,    0,    0,  478,  483,    0,
    0,    0,    0,    0,    0,    0,  488,    0,    0,    0,
    0,  453,    0,    0,    0,    0,  458,    0,    0,  463,
  468,  473,    0,    0,    0,    0,    0,  478,  483,    0,
    0,    0,    0,    0,    0,    0,  488,    0,    0,    0,
  496,  500,  505,  509,  445,    0,  449,  445,    0,  513,
  493,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  493,    0,    0,    0,    0,    0,    0,
  496,  500,  505,  509,  445,  453,  449,  445,    0,  513,
  458,  493,    0,  463,  468,  473,    0,    0,  453,    0,
    0,  478,  483,  458,    0,    0,  463,  468,  473,    0,
  488,  453,    0,    0,  478,  483,  458,    0,    0,  463,
  468,  473,    0,  488,  453,    0,    0,  478,  483,  458,
    0,    0,  463,  468,  473,    0,  488,    0,    0,    0,
  478,  483,    0,    0,  496,  500,  505,  509,  445,  488,
  449,  445,    0,  513,    0,    0,    0,  496,  500,  505,
  509,  445,    0,  449,  445,    0,  513,    0,    0,    0,
  496,  500,  505,  509,  445,    0,  449,  445,    0,  513,
    0,    0,    0,  496,  500,  505,  509,  445,    0,  449,
  445,  453,  513,    0,    0,    0,  458,    0,    0,  463,
  468,  473,    0,    0,  453,    0,    0,  478,  483,  458,
    0,    0,  463,  468,  473,    0,  488,    0,    0,    0,
  478,  483,  453,    0,    0,    0,    0,  458,    0,  488,
  463,  468,  473,    0,    0,    0,    0,    0,  478,  483,
    0,    0,    0,    0,    0,    0,    0,  488,    0,    0,
  496,  500,  505,  509,  445,    0,  449,  445,    0,  513,
    0,    0,    0,  496,  500,  505,  509,  445,    0,  449,
  445,    0,  513,    0,    0,    0,    0,    0,    0,    0,
    0,  496,  500,  505,  509,  445, 1821,  449,  445,    0,
  513,  645,    0,    0,  649,  653,  657,    0,    0, 1821,
    0,    0,  661,  665,  645,    0,    0,  649,  653,  657,
    0,  669, 1821,    0,    0,  661,  665,  645,    0,    0,
  649,  653,  657,    0,  669, 1821,    0,    0,  661,  665,
  645,    0,    0,  649,  653,  657,    0,  669,    0,    0,
    0,  661,  665,    0,    0,  254,  673,  677,  680,    0,
  669,    0,    0,    0,  257,    0,    0,    0,  254,  673,
  677,  680,    0,    0,    0,    0,    0,  257,    0,    0,
    0,  254,  673,  677,  680,    0,    0,    0,    0,    0,
  257,    0,    0,    0,  254,  673,  677,  680,    0, 1821,
    0,    0,    0,  257,  645,    0,    0,  649,  653,  657,
    0,    0, 1821,    0,    0,  661,  665,  645,    0,    0,
  649,  653,  657,    0,  669, 1821,    0,    0,  661,  665,
  645,    0,    0,  649,  653,  657,    0,  669, 1821,    0,
    0,  661,  665,  645,    0,    0,  649,  653,  657,    0,
  669,    0,    0,    0,  661,  665,    0,    0,  254,  673,
  677,  680,    0,  669,    0,    0,    0,  257,    0,    0,
    0,  254,  673,  677,  680,    0,    0,    0,    0,    0,
  257,    0,    0,    0,  254,  673,  677,  680,    0,    0,
    0,    0,    0,  257,    0,    0,    0,  254,  673,  677,
  680,    0, 1821,    0,    0,    0,  257,  645,    0,    0,
  649,  653,  657,    0,    0, 1821,    0,    0,  661,  665,
  645,    0,    0,  649,  653,  657,    0,  669,  368,    0,
    0,  661,  665,  371,    0,    0,  374,  377,  380,    0,
  669,  416,    0,    0,  383,  386,  419,    0,    0,  422,
  425,  428,    0,  389,    0,    0,    0,  431,  434,    0,
    0,  254,  673,  677,  680,    0,  437,    0,    0,    0,
  257,    0,    0,    0,  254,  673,  677,  680,    0,    0,
    0,  608,    0,  257,    0,    0,  611,    0,  392,  614,
  617,  620,    0,    0,  608,    0,    0,  623,  626,  611,
    0,  440,  614,  617,  620,    0,  629,    0,    0,    0,
  623,  626,    0,    0,    0,    0,    0,    0,    0,  629,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  632,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  632,
};
static int yycheck[] = {                                      17,
    0,    1,    1,   98,    0,   39,    6,  116,    8,    9,
   10,   39,   40,   39,   76,   15,   16,   91,  404,   38,
  233,   44,   39,   42,  119,   40,   39,  332,   38,   40,
  126,    5,  522,  128,  126,    5,    0,   40,   60,   39,
   60,  126,   76,   38,  112,  126,   46,  315,   48,   41,
   76,   59,   44,   44,   44,    5,  263,   59,   60,   76,
   44,   76,   62,   76,   41,  125,   46,   44,   86,   39,
  123,   71,   44,  342,   92,   44,   76,   95,  654,   44,
   59,   38,   44,   40,   60,   42,   41,  355,   61,   44,
   44,   71,  315,   58,   40,   44,   61,   97,   98,   44,
   59,   40,  125,   60,   44,   40,   76,  107,  108,  109,
  110,  111,  112,  112,  282,  123,   38,   60,   40,  119,
   42,   44,   38,   45,   40,   44,   42,   97,  128,   45,
  100,  131,  355,   44,  125,  125,   59,   60,  112,  123,
  308,  631,  112,  719,  123,   91,  532,   59,  125,  725,
  123,   44,   44,  125,  123,   59,   60,  370,  123,   59,
   60,  257,   60,  125,  123,  199,   59,  553,   61,  123,
  125,  199,  257,  199,  123,   41,  257,   43,   44,   45,
  485,  209,  199,  123,  202,   41,  199,   43,   44,   45,
   60,   60,   58,   59,  209,   61,  258,   60,  209,  199,
  123,   60,   58,   59,  123,   61,   59,   60,  491,   60,
  210,  123,   44,  496,  125,  275,  276,  277,  487,  123,
   40,   91,  258,  123,  258,   44,  226,   93,  320,  199,
  258,  123,  258,  233,  257,  235,  236,   93,  238,  239,
  210,  258,  316,   62,  280,  258,  226,  257,  271,  272,
   41,  325,  262,   44,  257,  265,  266,  267,  258,  125,
  282,  231,  257,  273,  274,   24,   44,   58,   59,  125,
   60,  273,  282,   32,  342,   44,   59,   37,   38,  562,
  282,   41,   42,   43,   44,   45,   46,   47,  258,  308,
   59,   50,  242,  125,  244,  257,   44,  247,   58,   59,
   40,   61,   93,  303,   59,  328,  316,  317,  316,  271,
  272,  275,  276,  277,   62,  325,  273,  271,  272,  319,
   59,   44,  322,  303,   59,  282,  271,  272,  320,  273,
  322,  323,  332,   93,  125,  257,   60,  337,  282,  622,
   99,  257,  342,  342,  344,   44,  257,  125,  271,  272,
  273,  308,   58,  112,  354,   61,   39,  357,  117,  282,
  271,  272,  424,   59,  124,  125,  328,   50,  342,  273,
  370,  321,  342,  273,  133,  134,  135,  136,  282,  271,
  272,  381,  282,  383,  123,  268,  269,   59,  310,  311,
  424,  257,   58,   59,  310,  311,  424,   60,  424,   60,
   59,  257,  125,  273,  273,  271,  272,  424,  503,   60,
   60,  424,  282,  282,  273,  271,  272,  328,  315,  487,
  273,  257,  273,  282,  424,  257,  125,  123,   60,  282,
   91,  282,   59,  403,  117,   60,  406,  112,   60,  271,
  272,  324,   41,   37,   38,   44,  316,   41,   42,   43,
   44,   45,   46,   47,  424,  325,  426,  123,  355,   60,
   59,  257,  328,   44,   58,   59,  257,   61,  499,   58,
  470,  257,  328,  232,  470,  271,  272,  586,   59,  257,
  271,  272,  123,  273,  552,  485,  554,  487,  487,  418,
  419,   44,  282,  271,  272,   40,  328,  257,  498,   93,
  259,   46,   59,  503,   61,   41,   59,   41,   44,  479,
  257,  271,  272,  487,  197,   41,  199,  487,  265,  587,
   93,  521,   59,  523,   61,   59,  316,  477,  559,  638,
  124,  125,  328,  564,  257,  325,  567,  328,   38,   40,
   38,  521,   42,  523,   42,  545,   91,  476,  271,  272,
  328,   41,  552,  552,  554,  554,   42,   42,  257,   44,
   60,  531,   60,   44,   93,  545,  123,  126,  328,  539,
  329,  639,  271,  272,  271,  272,  259,   62,  552,   40,
  554,   62,  552,  342,  554,  653,  123,  587,  587,  620,
  264,   23,  351,   25,   26,   27,   28,   29,   30,   31,
   32,   33,   34,  257,  604,  328,  674,  257,  257,  257,
  273,  257,  273,  587,  257,   47,   48,  587,  686,  282,
   44,  282,  273,  273,  273,  693,  126,  273,   44,  328,
  661,  282,  282,  282,   44,  264,  282,  655,   62,  639,
  639,  273,  642,  643,  594,  595,   62,  647,  273,  717,
  282,  273,   62,  653,  653,  316,   41,  282,  608,   44,
  282,  537,  538,  257,  325,  639,  257,  342,  427,  639,
   44,  264,  273,  549,  674,  674,  316,  271,  272,  653,
  680,  282,  339,  653,  680,  325,  686,  686,   62,  257,
   42,  691,   44,  693,  693,   41,   41,  273,   44,   44,
  674,  701,  720,  126,  674,  705,  282,  139,  726,  705,
   62,  691,  686,   59,  696,   61,  686,  717,  717,  693,
  316,  701,  704,  693,  724,   40,  676,  677,  487,  325,
  257,  681,   41,  273,  328,   44,  736,  737,  738,  739,
  736,  737,  282,  717,  724,  269,   38,  717,   40,  308,
   59,  273,   61,  703,   46,  126,   58,  257,  738,  739,
  282,  320,  262,  322,  323,  265,  266,  267,  273,  316,
   58,  257,   41,  316,  274,   44,  262,  282,  325,  265,
  266,  267,  325,   41,   40,   41,   44,  273,  274,  221,
  222,  223,   58,  552,  257,  554,  282,   33,  257,   91,
   42,   59,   38,   61,   40,   41,   42,   41,  308,   45,
   44,  243,  487,  275,  276,  277,  316,  317,  318,  319,
  320,   61,  322,  323,  499,  325,   58,   59,  587,   61,
   41,  317,  124,   44,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  271,  272,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  126,
  302,  257,  547,  123,  257,   41,   33,  552,   44,  554,
  639,   38,   42,   40,  559,   42,   61,  123,   45,  564,
  126,  257,  567,  257,  653,  265,  266,  267,  268,  269,
   37,   38,   93,   62,   41,   42,   43,   44,   45,   46,
   47,   62,  587,  318,  319,  674,   41,  322,  323,   44,
   41,   58,   59,   44,   61,   41,   41,  686,   44,   44,
  320,  257,  322,  323,  693,  318,  319,  320,   41,  322,
  323,   44,   58,   59,  376,  620,  378,  318,  319,  320,
   41,  322,  323,   44,  324,   62,   93,   41,  717,   93,
   44,   62,    0,   41,  639,  264,  123,  399,   59,  126,
   61,   41,  585,   41,   44,  588,   44,   93,  653,   59,
   40,   40,  552,  415,  554,  257,  661,  124,  125,  257,
   58,   59,  318,  319,  320,   33,  322,  323,  257,  674,
   38,   40,   40,  316,   42,   40,  257,   45,  321,  125,
   58,  686,   40,  326,  327,   40,   38,  587,  693,  273,
   41,  257,  258,  259,  260,   93,  262,   42,   40,  265,
  266,  267,  257,  258,  259,  260,   40,  273,  274,  318,
  319,  320,  717,  322,  323,   40,  282,  283,  284,  285,
  286,    0,   40,  289,  290,  317,   40,  125,   38,  316,
   42,  318,  319,  320,  257,  322,  323,   40,  325,  639,
   40,   40,  504,   40,  310,  311,   61,   41,  314,  315,
   59,  317,   59,  653,   33,  123,   42,  125,  126,   38,
  522,   40,  524,   42,   40,   44,   45,  123,   40,  257,
   41,  258,  259,  260,  674,  257,   59,  343,  257,  257,
  542,  543,   41,   41,   41,   40,  686,   40,  550,   58,
  257,   41,   59,  693,   59,   61,  283,  284,  285,  286,
   40,   40,  289,  290,  271,  272,   41,   40,   59,   40,
    0,  257,  260,  575,  576,  577,  578,  717,   41,   41,
  260,  123,  126,  310,  311,  271,  272,  314,  315,  316,
  318,  319,  320,    0,  322,  323,  123,  599,  325,   59,
   59,   42,  257,   33,  123,   41,  125,  126,   38,  123,
   40,   44,   42,   41,   41,   45,  343,   60,  335,  257,
  257,  328,  624,  332,  333,  334,  335,  336,  337,  631,
  257,  257,   61,  271,  272,   37,   38,   91,   40,   91,
   42,  257,  328,  257,   46,   47,   61,  649,   42,  257,
  258,  259,  260,  261,  262,  263,  257,  265,  266,  267,
  268,  269,  273,  271,  272,  273,  274,  275,  276,  277,
  278,  257,   62,  257,  282,  283,  284,  285,  286,   61,
   61,  289,  290,  318,  319,  320,   61,  322,  323,   91,
  328,  567,   33,  123,  235,  125,  126,   38,   76,   40,
  503,   42,  310,  311,   45,   53,  314,  315,  316,  317,
  318,  319,  320,  605,  322,  323,  324,  325,  298,   -1,
  328,   -1,  124,   -1,  332,   -1,   -1,  335,   -1,   -1,
  338,  339,  340,   -1,   -1,  343,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,    0,  265,  266,  267,  268,
  269,   -1,   -1,   -1,  273,  274,  275,  276,  277,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,  318,  319,  320,   -1,  322,  323,   33,   -1,
   -1,   -1,  123,   38,  125,   40,   -1,   42,   -1,   -1,
   45,  310,  311,   -1,   -1,  314,  315,  316,  317,  318,
  319,  320,   -1,  322,  323,  324,  325,   -1,  316,  328,
  318,  319,  320,  332,  322,  323,  335,  325,   -1,  338,
  339,  340,   -1,   -1,  343,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   33,  123,   -1,
  125,  126,   38,   -1,   40,   -1,   42,   -1,   -1,   45,
  310,  311,   -1,   -1,  314,  315,  316,  317,  318,  319,
  320,   -1,  322,  323,  324,  325,   -1,   -1,  328,   -1,
   -1,   -1,  332,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,  343,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,   -1,   -1,  289,  290,
   -1,   -1,   -1,   -1,   33,   -1,   -1,  123,   -1,   38,
  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  310,
  311,   -1,   -1,  314,  315,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,  324,  265,  266,  267,  328,   -1,  270,
   -1,  332,  273,  274,   -1,   -1,   -1,  338,  339,  340,
   -1,  282,  343,   -1,   -1,   -1,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
  275,  276,  277,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,  317,   -1,   -1,   -1,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,  310,  311,   -1,   -1,  314,
  315,  316,  317,  318,  319,  320,   -1,  322,  323,  324,
  325,   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,   -1,
  335,   -1,   -1,  338,  339,  340,   -1,   -1,  343,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
  262,   -1,  278,  265,  266,  267,  282,  283,  284,  285,
  286,  273,  274,  289,  290,   -1,   -1,   -1,   33,   -1,
  282,  123,   -1,   38,  126,   40,   -1,   42,  290,   -1,
   45,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,
  316,  317,  318,  319,  320,   -1,  322,  323,  324,  325,
   -1,   -1,  328,   -1,   -1,  317,  332,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,  343,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,  262,   -1,  278,
  265,  266,  267,  282,  283,  284,  285,  286,  273,  274,
  289,  290,   -1,   -1,   -1,   33,   -1,  282,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,  318,
  319,  320,   -1,  322,  323,  324,  325,   -1,   -1,  328,
   -1,   -1,  317,  332,   -1,   -1,   -1,   -1,   -1,  338,
  339,  340,   -1,   -1,  343,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,
   -1,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,  310,  311,
   -1,   -1,  314,  315,  316,  317,  318,  319,  320,   -1,
  322,  323,  324,  325,   -1,   -1,  328,   -1,   -1,   -1,
  332,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,  343,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,   -1,   -1,   -1,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,
  315,  316,  317,  318,  319,  320,   -1,  322,  323,  324,
  325,   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,   -1,
   -1,   -1,   -1,  338,  339,  340,   -1,   -1,  343,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,
   -1,  289,  290,   -1,   -1,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,
  318,  319,  320,   -1,  322,  323,  324,  325,   -1,   -1,
  328,   -1,   -1,   -1,  332,   -1,   -1,   -1,   -1,   -1,
  338,  339,  340,   -1,   -1,  343,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,  290,
   -1,   -1,   -1,   33,   -1,   -1,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,  310,
  311,   -1,   -1,  314,  315,  316,  317,  318,  319,  320,
   -1,  322,  323,  324,  325,   -1,   -1,  328,   -1,   -1,
   -1,  332,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,
   -1,   -1,  343,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,   33,
   -1,   -1,   -1,  123,   38,  125,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,
  314,  315,  316,  317,  318,  319,  320,   -1,  322,  323,
  324,  325,   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,  343,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   41,  278,   -1,   44,   -1,  282,  283,  284,  285,  286,
   -1,   -1,  289,  290,   -1,   33,   -1,   58,   59,  123,
   38,  125,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,  316,
  317,  318,  319,  320,   -1,  322,  323,  324,  325,   -1,
   -1,  328,   93,   -1,   -1,  332,   -1,   -1,   -1,   -1,
   -1,  338,  339,  340,   -1,   -1,  343,   -1,  258,  259,
  260,  261,   -1,  263,   41,   -1,   -1,   44,  268,  269,
   -1,  271,  272,   -1,  125,  275,  276,  277,  278,   -1,
   -1,   58,   59,  283,  284,  285,  286,   -1,   -1,  289,
  290,   33,   -1,   -1,   -1,  123,   38,  125,   40,   -1,
   42,  262,   -1,   45,  265,  266,  267,   -1,  269,   -1,
  310,  311,  273,  274,  314,  315,   93,   -1,   -1,   -1,
   -1,  282,   -1,   -1,  324,   -1,   -1,   -1,  328,   -1,
   -1,   -1,  332,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,  343,  258,  259,  260,  261,  125,  263,
   41,   -1,   -1,   44,  268,  269,  317,  271,  272,   -1,
   -1,  275,  276,  277,  278,   -1,   -1,   58,   59,  283,
  284,  285,  286,   -1,   -1,  289,  290,   33,   -1,   -1,
   -1,  123,   38,  125,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,
  314,  315,   93,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  324,   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,
  271,  272,   -1,   -1,  338,  339,  340,   -1,   -1,  343,
  258,  259,  260,  261,  125,  263,   -1,   -1,   -1,   -1,
  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,   -1,
   -1,  289,  290,   33,   -1,   -1,   -1,  123,   38,  125,
   40,   -1,   42,   -1,   -1,   45,   -1,  328,   -1,   -1,
  257,   -1,  310,  311,   -1,   -1,  314,  315,   -1,   -1,
   -1,   -1,   -1,   -1,  271,  272,  324,   -1,   -1,   -1,
  328,   -1,   -1,   -1,  332,   41,   -1,   -1,   44,   -1,
  338,  339,  340,   -1,   -1,  343,  258,  259,  260,  261,
   -1,  263,   58,   59,   -1,   -1,  268,  269,   -1,  271,
  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,
   -1,  283,  284,  285,  286,   -1,   -1,  289,  290,   33,
   -1,  328,   -1,  123,   38,   -1,   40,   93,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,  257,   -1,  310,  311,
   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,
  271,  272,  324,   -1,   -1,   -1,  328,   -1,   -1,  125,
  332,   -1,   -1,   -1,   -1,   -1,  338,  339,  340,   -1,
   -1,  343,  258,  259,  260,  261,   -1,  263,   -1,   -1,
   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,
  286,   -1,   -1,  289,  290,   -1,   33,  328,   -1,  123,
   -1,   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,   -1,   -1,
   -1,   -1,  338,  339,  340,   -1,   -1,  343,  258,  259,
  260,  261,   -1,  263,   91,   -1,   -1,   -1,  268,  269,
   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   -1,   33,  289,
  290,  257,   -1,   38,   -1,   40,  123,   42,   -1,  126,
   45,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,
  310,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,  328,   -1,
   -1,   -1,  332,   -1,   -1,   -1,   -1,   -1,  338,  339,
  340,   -1,   -1,  343,  258,  259,  260,  261,   93,  263,
   -1,   -1,   38,   -1,  268,  269,   42,  271,  272,   -1,
   -1,   -1,  328,   -1,  278,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,   -1,   -1,  289,  290,   33,  123,   -1,
   -1,  126,   38,   -1,   40,   41,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,
  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,   -1,  328,   -1,   -1,   -1,  332,   -1,
   -1,   -1,   -1,   -1,  338,  339,  340,   -1,   -1,  343,
  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   37,   38,  273,  274,   41,   42,
   43,   44,   45,   46,   47,  282,  283,  284,  285,  286,
   -1,   -1,  289,  290,   33,   58,   59,  123,   61,   38,
  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,   -1,
  317,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   93,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,  257,  258,  259,  260,  343,  262,  282,   -1,
  265,  266,  267,   -1,   93,   -1,   -1,   -1,  273,  274,
   -1,  124,  125,   -1,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   -1,  289,  290,   42,   -1,   -1,   -1,
   -1,   -1,  316,  317,  123,   33,   -1,  126,   -1,   -1,
   38,  325,   40,   -1,   42,  310,  311,   45,   -1,  314,
  315,  257,  317,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,  343,   -1,
   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   93,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  317,   -1,  289,  290,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,  123,   -1,   45,  126,   -1,
   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,
   -1,  317,   -1,   -1,  257,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   33,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   58,   59,   -1,  343,  257,  258,
  259,  260,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   93,
  289,  290,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,   -1,  317,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,  123,   -1,  262,  126,   -1,  265,
  266,  267,   -1,   -1,  343,   58,   59,  273,  274,  257,
  258,  259,  260,   -1,  262,   -1,  282,  265,  266,  267,
   -1,   -1,   -1,   -1,  290,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,
   93,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,  310,  311,   -1,   -1,  314,  315,   -1,  317,
   -1,   -1,  125,   60,   33,   62,   63,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   44,   45,   -1,   47,  257,
  258,  259,  260,   -1,  262,  343,   -1,  265,  266,  267,
   -1,   60,   61,   62,   -1,  273,  274,   94,   -1,   -1,
   -1,   -1,   -1,  257,  282,  283,  284,  285,  286,   -1,
   -1,  289,  290,   -1,   -1,   -1,   -1,  271,  272,  258,
  259,  260,   91,  262,   -1,   94,  265,  266,  267,   -1,
   -1,   -1,  310,  311,  273,  274,  314,  315,   -1,  317,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,   -1,   -1,   -1,  124,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   37,   38,  343,   40,   41,   42,   43,
   44,   45,   46,   47,  328,  314,  315,   -1,  317,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   62,   63,
   37,   38,   -1,   40,  257,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,  343,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   61,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,  126,   -1,   -1,   -1,   41,   -1,
   -1,   44,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,   91,   58,   59,   -1,   -1,  123,
  124,  125,   -1,   58,   59,   -1,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  125,  310,  311,  312,  313,   -1,  123,  124,
  125,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,   -1,
   -1,   41,   -1,   -1,   44,  257,  325,  281,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   58,   59,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,
  274,   -1,   -1,   93,   -1,  329,  330,  331,  332,  333,
  334,  335,  336,  337,   -1,  317,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  125,  310,  311,  312,  313,
   -1,   -1,  316,  317,  257,   -1,   -1,   -1,   -1,   -1,
   -1,  325,  257,   -1,  328,   -1,   -1,  262,  271,  272,
  265,  266,  267,   -1,   -1,   41,  271,  272,   44,  274,
   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   58,   59,   -1,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,  310,  311,  312,  313,   94,
   -1,  316,  317,   -1,   -1,  328,   -1,   93,   -1,   -1,
  325,   37,   38,  328,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   61,   62,   63,   -1,  125,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,  257,   -1,   -1,   -1,  257,  262,   -1,
  282,  265,  266,  267,   -1,   91,   -1,   93,   94,  273,
  274,  271,  272,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,  316,  317,   38,  123,  124,  125,
   42,   58,   59,  325,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,  316,  317,  318,  319,   -1,   59,   60,   -1,
   -1,  325,  257,   -1,   -1,   -1,   -1,  262,  328,   -1,
  265,  266,  267,   -1,   91,   -1,   93,   94,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   37,
   38,  257,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,  316,  317,   -1,   -1,  271,  272,   -1,   -1,   -1,
   58,   59,   -1,   61,   62,   63,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  328,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,  123,  124,  125,   60,   -1,
   62,   63,   -1,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,   -1,   -1,
  316,  317,   94,   -1,   -1,   -1,   -1,   -1,   -1,  325,
  257,   -1,  328,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,   -1,   -1,  316,
  317,   -1,   -1,   -1,   -1,   -1,  308,   -1,  325,   -1,
   -1,  328,   -1,   -1,  316,  317,  318,  319,  320,   -1,
  322,  323,   -1,  325,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   38,   -1,  262,   -1,   42,  265,  266,  267,
   -1,   -1,   41,  271,  272,   44,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   -1,   -1,   -1,   58,
   59,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,  310,  311,  312,  313,   -1,   -1,  316,  317,
   -1,   -1,   -1,   -1,   93,   -1,   -1,  325,   37,   38,
  328,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   62,   63,   -1,  125,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  124,  125,   -1,   58,   59,
   -1,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,  262,   -1,  257,  265,
  266,  267,   -1,   -1,   91,   -1,   93,   94,  274,   -1,
  257,   -1,  271,  272,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   41,   -1,   -1,   44,  282,  123,  124,  125,   -1,
   -1,   -1,  308,  290,   -1,   -1,   -1,   -1,   58,   59,
  316,  317,  318,  319,  320,   -1,  322,  323,  257,  325,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,  328,
  317,   41,  271,  272,   44,  274,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   58,   59,
   -1,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,  310,  311,  312,  313,  125,   -1,  316,  317,   -1,
   -1,   -1,   -1,   93,   -1,   -1,  325,  257,   -1,  328,
  126,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,  311,  312,  313,  271,  272,  316,  317,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  325,   -1,   -1,  328,   -1,
   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,   37,   38,  316,
   40,   41,   42,   43,   44,   45,   46,   47,  325,   -1,
   -1,  328,   -1,   -1,   -1,   -1,  126,  257,   58,   59,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,   -1,
   -1,   91,   -1,   93,   94,   37,   38,  257,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,  123,  124,  125,   -1,   -1,  328,   -1,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   93,   94,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,  328,   -1,
   -1,   -1,   -1,   41,   58,   59,   44,   61,   62,   63,
   -1,   -1,  124,  125,   -1,   -1,   -1,  257,   -1,   -1,
   58,   59,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   91,   -1,   93,
   94,   -1,  282,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   93,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  282,   41,   44,   -1,   44,
  124,  125,   -1,   -1,   -1,   -1,  316,  317,   -1,   -1,
  320,   58,   59,   58,   59,  325,   -1,  125,   37,   38,
   -1,   -1,   41,   42,   43,   44,   45,   46,   47,  316,
  317,  271,  272,   -1,   -1,   -1,   -1,   -1,  325,   58,
   59,   -1,   61,   -1,   -1,   -1,   93,   -1,   93,   -1,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,  311,  312,  313,   93,  257,  316,   -1,  125,   -1,
  125,   -1,   -1,   -1,   -1,  325,   -1,   -1,  328,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,  257,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,  328,  271,  272,  257,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,  271,  272,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   93,   94,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   -1,  328,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  257,   58,   59,   60,   61,   62,   63,   -1,
  328,  124,  125,   -1,  271,  272,  271,  272,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   -1,   -1,  257,   41,
   -1,   43,   44,   -1,   46,   47,   -1,   -1,   93,   94,
   -1,   -1,  271,  272,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,  124,
  125,  328,   41,  328,   43,   44,   -1,   46,   47,   91,
   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,  328,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,  124,  125,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   91,   -1,   93,   94,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,  271,  272,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,  257,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,  328,  271,  272,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  271,
  272,   -1,  316,  317,  318,  319,  320,   -1,  322,  323,
   -1,  325,   -1,  328,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,   -1,   -1,
  312,  313,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  328,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,   37,   38,  312,  313,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  328,
   -1,   -1,   58,   59,   -1,   61,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   61,   -1,   -1,   -1,   37,   38,   -1,   93,   41,   42,
   43,   44,   45,   37,   47,   -1,   -1,   41,   42,   43,
   44,   45,   -1,   47,   -1,   58,   59,   -1,   61,   -1,
   -1,   -1,   93,   -1,   58,   59,   -1,   61,  124,  125,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,  124,  125,   58,   59,   -1,   61,   93,
   -1,   -1,   37,   -1,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   58,   59,   -1,   61,   -1,   -1,   37,
   93,  125,   -1,   41,   42,   43,   44,   45,   -1,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   -1,   -1,   -1,   -1,   93,   -1,
   -1,  124,  125,   -1,   -1,   37,   -1,   -1,   -1,   41,
   42,   43,   44,   45,   37,   47,   -1,   -1,   41,   42,
   43,   44,   45,  257,   47,   93,   58,   59,  262,   61,
  125,  265,  266,  267,   -1,   58,   59,   -1,   61,  273,
  274,  257,   -1,   38,   -1,   40,   41,   42,  282,   44,
   -1,   -1,   -1,   -1,   -1,  271,  272,  125,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,  257,   62,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,  272,   38,  317,   40,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,  125,  257,   -1,   91,   -1,   -1,   -1,
   -1,   -1,  125,  257,   -1,   -1,   62,   -1,  271,  272,
   -1,   -1,  328,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   44,   45,
   46,   47,   -1,   -1,  257,   91,   -1,  328,   -1,   -1,
   -1,   -1,   -1,   59,   60,   61,   62,   63,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  328,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  328,   91,  271,  272,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,  257,
   40,   41,   -1,   -1,   44,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,  271,  272,  328,   -1,   -1,  124,  125,
   -1,   -1,   62,   -1,   41,   58,   59,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   58,   59,  328,  257,   -1,   -1,   -1,   -1,  271,
  272,   91,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   93,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
  328,   -1,  257,   -1,   -1,   -1,   93,  262,   -1,   -1,
  265,  266,  267,   58,   59,   41,   -1,   -1,   44,  274,
   -1,   -1,  125,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   58,   59,   -1,  290,  328,   -1,  125,   -1,
   -1,  257,   -1,   58,   59,  328,  262,   -1,   93,  265,
  266,  267,   -1,  308,   -1,   -1,   -1,  273,  274,   -1,
   -1,  316,  317,   -1,   -1,   -1,  282,   93,   -1,   -1,
  325,   -1,   -1,   -1,  290,   -1,   -1,   -1,   93,   -1,
  125,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  125,
  316,  317,   -1,   -1,   -1,   -1,  282,   -1,   -1,  325,
  125,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,  126,
  316,  317,  318,  319,   -1,   -1,   -1,  257,   41,  325,
   -1,   44,  262,   -1,  257,  265,  266,  267,   -1,   41,
   -1,   -1,   44,  273,  274,   58,   59,   -1,  271,  272,
  257,   41,  282,   -1,   44,   -1,   58,   59,   41,   -1,
  290,   44,   -1,   -1,  271,  272,   -1,   41,   58,   59,
   44,   -1,   -1,  257,   -1,   58,   59,   -1,  262,   -1,
   93,  265,  266,  267,   58,   59,  316,  317,   -1,  273,
  274,   93,  257,   -1,   -1,  325,   -1,   41,  282,   -1,
   44,   -1,   -1,   93,   -1,  328,  271,  272,   -1,   -1,
   93,  257,  125,   -1,   58,   59,   -1,   -1,   -1,   93,
   -1,  328,  257,  125,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  316,  317,   -1,  125,  271,  272,   -1,   40,
   41,  325,  125,   44,   -1,   -1,   -1,   -1,   -1,   93,
  257,  125,   40,   41,   -1,  262,   44,   -1,  265,  266,
  267,   62,   -1,  328,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   62,  282,   -1,   -1,   -1,   -1,
   -1,  125,  328,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   91,   37,   38,  328,   40,   -1,   42,   43,   44,   45,
   -1,   47,   -1,   91,   -1,   -1,   -1,   -1,   -1,  316,
  317,   -1,   -1,  320,   60,   61,   62,  257,  325,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  282,   -1,  257,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   40,   41,  257,   -1,   44,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  271,
  272,   -1,   -1,   -1,  257,   62,  316,  317,  124,   -1,
  126,  271,  272,  257,   -1,  325,   -1,   -1,  271,  272,
   38,   -1,   40,   41,   42,   -1,   44,  271,  272,   -1,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,  257,   62,  328,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,  328,  271,  272,   -1,
   -1,   -1,   -1,  290,   -1,   -1,   -1,   -1,  328,   -1,
   -1,   -1,   -1,   91,   -1,  328,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  328,   -1,  257,   -1,   -1,   -1,
  317,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,   -1,   -1,  328,  273,  274,   37,   38,  290,
   40,   -1,   42,   43,  282,   45,   46,   47,   -1,   -1,
   -1,   -1,  290,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,   63,   -1,  316,  317,  257,   -1,   -1,
   -1,   -1,  262,   -1,  325,  265,  266,  267,  316,  317,
   -1,   -1,   -1,  273,  274,   -1,   -1,  325,   -1,   -1,
   -1,   91,  282,   -1,   94,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  257,   -1,   -1,   -1,  124,  262,   -1,  317,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   60,   -1,
   62,   63,   -1,  290,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
  317,   -1,   94,   -1,  282,   -1,   -1,   -1,   37,   38,
   -1,   40,  290,   42,   43,   44,   45,   46,   47,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   59,   60,   61,   62,   63,  273,  274,   -1,   -1,  317,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   91,   37,   38,   94,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,  124,   -1,   91,   -1,   93,   94,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,  273,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   -1,   60,   61,   62,   63,   -1,  124,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   91,   -1,   93,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,  124,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   91,   37,
   38,   94,   40,   41,   42,   43,   -1,   45,   46,   47,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   60,   61,   62,   63,  273,  274,   -1,   -1,
   -1,  124,   -1,   -1,   -1,  282,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,  124,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  124,   -1,  310,  311,  312,  313,   91,
   -1,   -1,   94,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   60,   61,   62,
   63,  262,  124,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,  317,  310,  311,  312,
  313,  124,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   91,   -1,   -1,   94,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,  124,  126,   91,   37,   93,   94,   40,
   -1,   -1,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,  124,  125,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  124,   -1,
  310,  311,  312,  313,   91,  257,   -1,   94,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,  316,  317,  318,  319,  320,   -1,
  322,  323,   -1,  325,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   60,   61,   62,
   63,   91,  273,  274,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,  124,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  317,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,  124,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,  124,
   -1,   91,   37,   38,   94,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   60,   61,   62,   63,   -1,
  273,  274,   -1,   -1,  124,   -1,   -1,   37,   38,  282,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,  320,   -1,  322,
  323,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   60,   61,   62,   63,   91,
  273,  274,   94,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,  124,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,  124,   -1,   91,   37,   38,   94,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,  124,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   91,   37,   38,   94,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   60,   61,
   62,   63,   -1,  273,  274,   -1,   -1,  124,   -1,   -1,
   37,   38,  282,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,  317,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,
   -1,   -1,   94,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   37,   38,  124,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   37,   38,  124,
   40,   91,   42,   43,   94,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,  124,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   91,   -1,   -1,   94,   60,   61,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,  124,   -1,   91,   -1,   -1,   94,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   94,   -1,  310,  311,  312,  313,  124,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   94,   -1,
  310,  311,  312,  313,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   94,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   94,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   94,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   94,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   94,   -1,  310,  311,  312,  313,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   94,   -1,  310,  311,  312,  313,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   94,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   94,
   60,   -1,   62,   63,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   60,   -1,   62,   63,   -1,   -1,
   -1,  282,   -1,   -1,   94,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   94,   -1,
   -1,   -1,   60,   -1,   62,   63,  317,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   94,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  126,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  126,   -1,  310,  311,  312,  313,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,
  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,
  267,  282,   -1,   -1,  257,   -1,  273,  274,   -1,  262,
   -1,   -1,  265,  266,  267,  282,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,   -1,   -1,  126,  316,  317,  318,  319,  320,
   -1,  322,  323,   -1,  325,   -1,   -1,  126,   -1,  316,
  317,  318,  319,   -1,   -1,   -1,   -1,   -1,  325,   -1,
  126,   -1,   -1,  316,  317,  318,  319,  320,   -1,  322,
  323,  257,  325,  126,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,  320,  257,  322,  323,   -1,  325,
  262,  126,   -1,  265,  266,  267,   -1,   -1,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,   -1,
  273,  274,   -1,   -1,  316,  317,  318,  319,  320,  282,
  322,  323,   -1,  325,   -1,   -1,   -1,  316,  317,  318,
  319,  320,   -1,  322,  323,   -1,  325,   -1,   -1,   -1,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,   -1,  316,  317,  318,  319,  320,   -1,  322,
  323,  257,  325,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,   -1,
  273,  274,  257,   -1,   -1,   -1,   -1,  262,   -1,  282,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
  316,  317,  318,  319,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,   -1,  316,  317,  318,  319,  320,   -1,  322,
  323,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,  317,  318,  319,  320,  257,  322,  323,   -1,
  325,  262,   -1,   -1,  265,  266,  267,   -1,   -1,  257,
   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,
   -1,  282,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,
   -1,  273,  274,   -1,   -1,  316,  317,  318,  319,   -1,
  282,   -1,   -1,   -1,  325,   -1,   -1,   -1,  316,  317,
  318,  319,   -1,   -1,   -1,   -1,   -1,  325,   -1,   -1,
   -1,  316,  317,  318,  319,   -1,   -1,   -1,   -1,   -1,
  325,   -1,   -1,   -1,  316,  317,  318,  319,   -1,  257,
   -1,   -1,   -1,  325,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,
  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,   -1,   -1,   -1,  273,  274,   -1,   -1,  316,  317,
  318,  319,   -1,  282,   -1,   -1,   -1,  325,   -1,   -1,
   -1,  316,  317,  318,  319,   -1,   -1,   -1,   -1,   -1,
  325,   -1,   -1,   -1,  316,  317,  318,  319,   -1,   -1,
   -1,   -1,   -1,  325,   -1,   -1,   -1,  316,  317,  318,
  319,   -1,  257,   -1,   -1,   -1,  325,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,
  282,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,
   -1,  316,  317,  318,  319,   -1,  282,   -1,   -1,   -1,
  325,   -1,   -1,   -1,  316,  317,  318,  319,   -1,   -1,
   -1,  257,   -1,  325,   -1,   -1,  262,   -1,  317,  265,
  266,  267,   -1,   -1,  257,   -1,   -1,  273,  274,  262,
   -1,  317,  265,  266,  267,   -1,  282,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  317,
};
static int yyctable[] = {                                      1,
    2,  195,  207,  292,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  195,
  207,  292,   -1,    7,    2,   -1,    8,    2,  195,  207,
  292,   -1,    9,    2,  195,  207,  292,   -1,   10,    2,
  195,  207,  292,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  195,  207,
  292,   -1,   16,    2,  195,  207,  292,   -1,   17,    2,
   -1,   18,    2,  195,  207,  292,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,  292,   -1,   31,    2,   -1,   32,    2,   -1,
   33,    2,   -1,   34,    2,   -1,   35,    2,  195,  292,
   -1,   36,    2,  195,  207,  292,   -1,   37,    2,  195,
  292,   -1,   38,    2,  195,  292,   -1,    2,  195,  292,
   -1,   39,    2,  195,  292,   -1,   40,    2,   -1,   41,
    2,  195,  292,   -1,   42,    2,   -1,   43,    2,   -1,
   44,    2,   -1,   45,    2,   -1,   46,    2,   -1,   47,
    2,   -1,   48,    2,   -1,  106,  207,  293,   -1,    6,
  207,  293,   -1,  107,  207,  293,   -1,  108,  207,  293,
   -1,  109,  207,  293,   -1,  110,   64,  207,  293,   -1,
   16,  207,  293,   -1,   18,   64,  207,  293,   -1,   64,
  137,   -1,  111,   64,  137,   -1,  112,   64,  137,   -1,
   35,  293,   -1,   36,  207,  293,   -1,   37,  293,   -1,
   38,  293,   -1,   41,  293,   -1,  115,  207,  292,   -1,
  207,  292,   -1,   35,  292,   -1,   41,  292,   -1,  120,
   67,   -1,    6,   67,   -1,  107,   67,   -1,  108,   67,
   -1,  109,   67,   -1,   15,   67,   -1,   16,   67,   -1,
   18,   67,   -1,   36,   67,   -1,  120,  278,   -1,    6,
  278,   -1,  107,  278,   -1,  108,  278,   -1,  109,  278,
   -1,   15,  278,   -1,   16,  278,   -1,   18,  278,   -1,
   36,  278,   -1,  120,  279,   -1,    6,  279,   -1,  107,
  279,   -1,  108,  279,   -1,  109,  279,   -1,   15,  279,
   -1,   16,  279,   -1,   18,  279,   -1,   36,  279,   -1,
  120,  280,   -1,    6,  280,   -1,  107,  280,   -1,  108,
  280,   -1,  109,  280,   -1,   15,  280,   -1,   16,  280,
   -1,   18,  280,   -1,   36,  280,   -1,  120,   70,   -1,
    6,   70,   -1,  107,   70,   -1,  108,   70,   -1,  109,
   70,   -1,   15,   70,   -1,   16,   70,   -1,   18,   70,
   -1,   36,   70,   -1,  137,  363,   -1,   25,  363,   -1,
   26,  363,   -1,   27,  363,   -1,   28,  363,   -1,   29,
  363,   -1,   32,  363,   -1,  137,  207,   -1,    6,  207,
   -1,  107,  207,   -1,  108,  207,   -1,  109,  207,   -1,
   15,  207,   -1,   16,  207,   -1,   18,  207,   -1,   36,
  207,   -1,  196,  195,   -1,  195,  292,   -1,   39,  195,
  292,   -1,    1,  195,  207,  292,   -1,    6,  195,  207,
  292,   -1,    8,  195,  207,  292,   -1,    9,  195,  207,
  292,   -1,   10,  195,  207,  292,   -1,   15,  195,  207,
  292,   -1,   16,  195,  207,  292,   -1,   18,  195,  207,
  292,   -1,   30,  292,   -1,   35,  195,  292,   -1,   36,
  195,  207,  292,   -1,   37,  195,  292,   -1,   38,  195,
  292,   -1,   41,  195,  292,   -1,  137,  361,   -1,   25,
  361,   -1,   26,  361,   -1,   27,  361,   -1,   28,  361,
   -1,   29,  361,   -1,   32,  361,   -1,  195,  207,   -1,
  229,  195,   -1,   35,  195,   -1,  230,  195,   -1,   41,
  195,   -1,  235,  135,   -1,   79,  135,   -1,  240,   59,
   -1,  241,   59,   -1,  196,  195,  292,   -1,    6,  195,
  292,   -1,    8,  195,  292,   -1,    9,  195,  292,   -1,
   10,  195,  292,   -1,   15,  195,  292,   -1,   16,  195,
  292,   -1,   18,  195,  292,   -1,   36,  195,  292,   -1,
  258,  195,  292,   -1,  303,   15,   -1,  318,  292,   -1,
    6,  292,   -1,  107,  292,   -1,  108,  292,   -1,  109,
  292,   -1,   15,  292,   -1,   16,  292,   -1,   18,  292,
   -1,   36,  292,   -1,  323,  292,   -1,   64,  295,   -1,
  336,  207,  292,   -1,    6,  207,  292,   -1,  107,  207,
  292,   -1,  108,  207,  292,   -1,  109,  207,  292,   -1,
   15,  207,  292,   -1,   16,  207,  292,   -1,   18,  207,
  292,   -1,   36,  207,  292,   -1,   37,  292,   -1,   38,
  292,   -1,  344,   79,   -1,  234,   79,   -1,  346,  293,
   -1,  344,   69,   -1,  234,   69,   -1,  235,   69,   -1,
  344,   72,   -1,  234,   72,   -1,  235,   72,   -1,  344,
   73,   -1,  234,   73,   -1,  235,   73,   -1,  344,   74,
   -1,  234,   74,   -1,  235,   74,   -1,  344,   65,   -1,
  234,   65,   -1,  235,   65,   -1,  344,   71,   -1,  234,
   71,   -1,  235,   71,   -1,  266,  362,   -1,  267,  362,
   -1,  268,  362,   -1,  269,  362,   -1,  270,  362,   -1,
  271,  362,   -1,  272,  362,   -1,  273,  362,   -1,  274,
  362,   -1,  275,  362,   -1,  276,  362,   -1,  277,  362,
   -1,  278,  362,   -1,  279,  362,   -1,  280,  362,   -1,
  281,  362,   -1,  282,  362,   -1,  283,  362,   -1,  284,
  362,   -1,  285,  362,   -1,  286,  362,   -1,  287,  362,
   -1,  288,  362,   -1,  289,  362,   -1,  290,  362,   -1,
  291,  362,   -1,  292,  362,   -1,  293,  362,   -1,  294,
  362,   -1,  295,  362,   -1,  296,  362,   -1,  297,  362,
   -1,  298,  362,   -1,  299,  362,   -1,  300,  362,   -1,
  302,  362,   -1,  373,  177,   -1,  374,  179,   -1,  266,
  312,   -1,  267,  312,   -1,  268,  312,   -1,  269,  312,
   -1,  270,  312,   -1,  271,  312,   -1,  272,  312,   -1,
  273,  312,   -1,  274,  312,   -1,  275,  312,   -1,  276,
  312,   -1,  277,  312,   -1,  278,  312,   -1,  279,  312,
   -1,  280,  312,   -1,  281,  312,   -1,  282,  312,   -1,
  283,  312,   -1,  284,  312,   -1,  285,  312,   -1,  286,
  312,   -1,  287,  312,   -1,  288,  312,   -1,  289,  312,
   -1,  290,  312,   -1,  291,  312,   -1,  292,  312,   -1,
  293,  312,   -1,  294,  312,   -1,  295,  312,   -1,  296,
  312,   -1,  297,  312,   -1,  298,  312,   -1,  299,  312,
   -1,  300,  312,   -1,  302,  312,   -1,  266,  314,   -1,
  267,  314,   -1,  268,  314,   -1,  269,  314,   -1,  270,
  314,   -1,  271,  314,   -1,  272,  314,   -1,  273,  314,
   -1,  274,  314,   -1,  275,  314,   -1,  276,  314,   -1,
  277,  314,   -1,  278,  314,   -1,  279,  314,   -1,  280,
  314,   -1,  281,  314,   -1,  282,  314,   -1,  283,  314,
   -1,  284,  314,   -1,  285,  314,   -1,  286,  314,   -1,
  287,  314,   -1,  288,  314,   -1,  289,  314,   -1,  290,
  314,   -1,  291,  314,   -1,  292,  314,   -1,  293,  314,
   -1,  294,  314,   -1,  295,  314,   -1,  296,  314,   -1,
  297,  314,   -1,  298,  314,   -1,  299,  314,   -1,  300,
  314,   -1,  302,  314,   -1,  266,  307,   -1,  267,  307,
   -1,  268,  307,   -1,  269,  307,   -1,  270,  307,   -1,
  271,  307,   -1,  272,  307,   -1,  273,  307,   -1,  274,
  307,   -1,  275,  307,   -1,  276,  307,   -1,  277,  307,
   -1,  278,  307,   -1,  279,  307,   -1,  280,  307,   -1,
  281,  307,   -1,  282,  307,   -1,  283,  307,   -1,  284,
  307,   -1,  285,  307,   -1,  286,  307,   -1,  287,  307,
   -1,  288,  307,   -1,  294,  307,   -1,  302,  307,   -1,
  266,  310,   -1,  267,  310,   -1,  268,  310,   -1,  269,
  310,   -1,  270,  310,   -1,  271,  310,   -1,  272,  310,
   -1,  273,  310,   -1,  274,  310,   -1,  275,  310,   -1,
  276,  310,   -1,  277,  310,   -1,  278,  310,   -1,  279,
  310,   -1,  280,  310,   -1,  281,  310,   -1,  282,  310,
   -1,  283,  310,   -1,  284,  310,   -1,  285,  310,   -1,
  286,  310,   -1,  287,  310,   -1,  288,  310,   -1,  294,
  310,   -1,  302,  310,   -1,  266,  311,   -1,  267,  311,
   -1,  268,  311,   -1,  269,  311,   -1,  270,  311,   -1,
  271,  311,   -1,  272,  311,   -1,  273,  311,   -1,  274,
  311,   -1,  275,  311,   -1,  276,  311,   -1,  277,  311,
   -1,  278,  311,   -1,  279,  311,   -1,  280,  311,   -1,
  281,  311,   -1,  282,  311,   -1,  283,  311,   -1,  284,
  311,   -1,  285,  311,   -1,  286,  311,   -1,  287,  311,
   -1,  288,  311,   -1,  294,  311,   -1,  302,  311,   -1,
  266,  308,   -1,  267,  308,   -1,  268,  308,   -1,  269,
  308,   -1,  270,  308,   -1,  271,  308,   -1,  272,  308,
   -1,  273,  308,   -1,  274,  308,   -1,  275,  308,   -1,
  276,  308,   -1,  277,  308,   -1,  278,  308,   -1,  279,
  308,   -1,  280,  308,   -1,  281,  308,   -1,  282,  308,
   -1,  283,  308,   -1,  284,  308,   -1,  285,  308,   -1,
  286,  308,   -1,  287,  308,   -1,  288,  308,   -1,  294,
  308,   -1,  302,  308,   -1,  266,  309,   -1,  267,  309,
   -1,  268,  309,   -1,  269,  309,   -1,  270,  309,   -1,
  271,  309,   -1,  272,  309,   -1,  273,  309,   -1,  274,
  309,   -1,  275,  309,   -1,  276,  309,   -1,  277,  309,
   -1,  278,  309,   -1,  279,  309,   -1,  280,  309,   -1,
  281,  309,   -1,  282,  309,   -1,  283,  309,   -1,  284,
  309,   -1,  285,  309,   -1,  286,  309,   -1,  287,  309,
   -1,  288,  309,   -1,  294,  309,   -1,  302,  309,   -1,
  266,  357,   -1,  267,  357,   -1,  268,  357,   -1,  269,
  357,   -1,  270,  357,   -1,  271,  357,   -1,  272,  357,
   -1,  273,  357,   -1,  274,  357,   -1,  275,  357,   -1,
  276,  357,   -1,  277,  357,   -1,  278,  357,   -1,  279,
  357,   -1,  280,  357,   -1,  281,  357,   -1,  282,  357,
   -1,  283,  357,   -1,  284,  357,   -1,  285,  357,   -1,
  286,  357,   -1,  287,  357,   -1,  288,  357,   -1,  289,
  357,   -1,  290,  357,   -1,  291,  357,   -1,  292,  357,
   -1,  293,  357,   -1,  294,  357,   -1,  295,  357,   -1,
  296,  357,   -1,  297,  357,   -1,  298,  357,   -1,  299,
  357,   -1,  300,  357,   -1,  302,  357,   -1,  266,  358,
   -1,  267,  358,   -1,  268,  358,   -1,  269,  358,   -1,
  270,  358,   -1,  271,  358,   -1,  272,  358,   -1,  273,
  358,   -1,  274,  358,   -1,  275,  358,   -1,  276,  358,
   -1,  277,  358,   -1,  278,  358,   -1,  279,  358,   -1,
  280,  358,   -1,  281,  358,   -1,  282,  358,   -1,  283,
  358,   -1,  284,  358,   -1,  285,  358,   -1,  286,  358,
   -1,  287,  358,   -1,  288,  358,   -1,  289,  358,   -1,
  290,  358,   -1,  291,  358,   -1,  292,  358,   -1,  293,
  358,   -1,  294,  358,   -1,  295,  358,   -1,  296,  358,
   -1,  297,  358,   -1,  298,  358,   -1,  299,  358,   -1,
  300,  358,   -1,  302,  358,   -1,  379,   64,  293,   -1,
   64,  293,   -1,  111,   64,   -1,  266,  360,   -1,  267,
  360,   -1,  268,  360,   -1,  269,  360,   -1,  270,  360,
   -1,  271,  360,   -1,  272,  360,   -1,  273,  360,   -1,
  274,  360,   -1,  275,  360,   -1,  276,  360,   -1,  277,
  360,   -1,  278,  360,   -1,  279,  360,   -1,  280,  360,
   -1,  281,  360,   -1,  282,  360,   -1,  283,  360,   -1,
  284,  360,   -1,  285,  360,   -1,  286,  360,   -1,  287,
  360,   -1,  288,  360,   -1,  289,  360,   -1,  290,  360,
   -1,  291,  360,   -1,  292,  360,   -1,  293,  360,   -1,
  294,  360,   -1,  295,  360,   -1,  296,  360,   -1,  297,
  360,   -1,  298,  360,   -1,  299,  360,   -1,  300,  360,
   -1,  302,  360,   -1,  115,  292,   -1,   35,  207,   -1,
   41,  207,   -1,  107,  195,  292,   -1,  108,  195,  292,
   -1,  109,  195,  292,   -1,  305,  130,   -1,  308,  223,
   -1,  223,  226,   -1,  310,  223,   -1,  347,  221,   -1,
  318,  207,  292,   -1,  120,  291,   -1,  516,   44,   -1,
  517,   44,   -1,  518,   44,   -1,  519,   44,   -1,  533,
   64,   -1,  344,   66,   -1,  234,   66,   -1,  235,   66,
   -1,  305,  131,   -1,  266,  328,   -1,  267,  328,   -1,
  268,  328,   -1,  269,  328,   -1,  270,  328,   -1,  271,
  328,   -1,  272,  328,   -1,  273,  328,   -1,  274,  328,
   -1,  275,  328,   -1,  276,  328,   -1,  277,  328,   -1,
  278,  328,   -1,  279,  328,   -1,  280,  328,   -1,  281,
  328,   -1,  282,  328,   -1,  283,  328,   -1,  284,  328,
   -1,  285,  328,   -1,  286,  328,   -1,  287,  328,   -1,
  288,  328,   -1,  289,  328,   -1,  290,  328,   -1,  291,
  328,   -1,  292,  328,   -1,  293,  328,   -1,  294,  328,
   -1,  295,  328,   -1,  296,  328,   -1,  297,  328,   -1,
  298,  328,   -1,  299,  328,   -1,  300,  328,   -1,  302,
  328,   -1,  266,  329,   -1,  267,  329,   -1,  268,  329,
   -1,  269,  329,   -1,  270,  329,   -1,  271,  329,   -1,
  272,  329,   -1,  273,  329,   -1,  274,  329,   -1,  275,
  329,   -1,  276,  329,   -1,  277,  329,   -1,  278,  329,
   -1,  279,  329,   -1,  280,  329,   -1,  281,  329,   -1,
  282,  329,   -1,  283,  329,   -1,  284,  329,   -1,  285,
  329,   -1,  286,  329,   -1,  287,  329,   -1,  288,  329,
   -1,  289,  329,   -1,  290,  329,   -1,  291,  329,   -1,
  292,  329,   -1,  293,  329,   -1,  294,  329,   -1,  295,
  329,   -1,  296,  329,   -1,  297,  329,   -1,  298,  329,
   -1,  299,  329,   -1,  300,  329,   -1,  302,  329,   -1,
  266,  330,   -1,  267,  330,   -1,  268,  330,   -1,  269,
  330,   -1,  270,  330,   -1,  271,  330,   -1,  272,  330,
   -1,  273,  330,   -1,  274,  330,   -1,  275,  330,   -1,
  276,  330,   -1,  277,  330,   -1,  278,  330,   -1,  279,
  330,   -1,  280,  330,   -1,  281,  330,   -1,  282,  330,
   -1,  283,  330,   -1,  284,  330,   -1,  285,  330,   -1,
  286,  330,   -1,  287,  330,   -1,  288,  330,   -1,  289,
  330,   -1,  290,  330,   -1,  291,  330,   -1,  292,  330,
   -1,  293,  330,   -1,  294,  330,   -1,  295,  330,   -1,
  296,  330,   -1,  297,  330,   -1,  298,  330,   -1,  299,
  330,   -1,  300,  330,   -1,  302,  330,   -1,  266,  331,
   -1,  267,  331,   -1,  268,  331,   -1,  269,  331,   -1,
  270,  331,   -1,  271,  331,   -1,  272,  331,   -1,  273,
  331,   -1,  274,  331,   -1,  275,  331,   -1,  276,  331,
   -1,  277,  331,   -1,  278,  331,   -1,  279,  331,   -1,
  280,  331,   -1,  281,  331,   -1,  282,  331,   -1,  283,
  331,   -1,  284,  331,   -1,  285,  331,   -1,  286,  331,
   -1,  287,  331,   -1,  288,  331,   -1,  289,  331,   -1,
  290,  331,   -1,  291,  331,   -1,  292,  331,   -1,  293,
  331,   -1,  294,  331,   -1,  295,  331,   -1,  296,  331,
   -1,  297,  331,   -1,  298,  331,   -1,  299,  331,   -1,
  300,  331,   -1,  302,  331,   -1,  266,  332,   -1,  267,
  332,   -1,  268,  332,   -1,  269,  332,   -1,  270,  332,
   -1,  271,  332,   -1,  272,  332,   -1,  273,  332,   -1,
  274,  332,   -1,  275,  332,   -1,  276,  332,   -1,  277,
  332,   -1,  278,  332,   -1,  279,  332,   -1,  280,  332,
   -1,  281,  332,   -1,  282,  332,   -1,  283,  332,   -1,
  284,  332,   -1,  285,  332,   -1,  286,  332,   -1,  287,
  332,   -1,  288,  332,   -1,  289,  332,   -1,  290,  332,
   -1,  291,  332,   -1,  292,  332,   -1,  293,  332,   -1,
  294,  332,   -1,  295,  332,   -1,  296,  332,   -1,  297,
  332,   -1,  298,  332,   -1,  299,  332,   -1,  300,  332,
   -1,  302,  332,   -1,  266,  333,   -1,  267,  333,   -1,
  268,  333,   -1,  269,  333,   -1,  270,  333,   -1,  271,
  333,   -1,  272,  333,   -1,  273,  333,   -1,  274,  333,
   -1,  275,  333,   -1,  276,  333,   -1,  277,  333,   -1,
  278,  333,   -1,  279,  333,   -1,  280,  333,   -1,  281,
  333,   -1,  282,  333,   -1,  283,  333,   -1,  284,  333,
   -1,  285,  333,   -1,  286,  333,   -1,  287,  333,   -1,
  288,  333,   -1,  289,  333,   -1,  290,  333,   -1,  291,
  333,   -1,  292,  333,   -1,  293,  333,   -1,  294,  333,
   -1,  295,  333,   -1,  296,  333,   -1,  297,  333,   -1,
  298,  333,   -1,  299,  333,   -1,  300,  333,   -1,  302,
  333,   -1,  266,  334,   -1,  267,  334,   -1,  268,  334,
   -1,  269,  334,   -1,  270,  334,   -1,  271,  334,   -1,
  272,  334,   -1,  273,  334,   -1,  274,  334,   -1,  275,
  334,   -1,  276,  334,   -1,  277,  334,   -1,  278,  334,
   -1,  279,  334,   -1,  280,  334,   -1,  281,  334,   -1,
  282,  334,   -1,  283,  334,   -1,  284,  334,   -1,  285,
  334,   -1,  286,  334,   -1,  287,  334,   -1,  288,  334,
   -1,  289,  334,   -1,  290,  334,   -1,  291,  334,   -1,
  292,  334,   -1,  293,  334,   -1,  294,  334,   -1,  295,
  334,   -1,  296,  334,   -1,  297,  334,   -1,  298,  334,
   -1,  299,  334,   -1,  300,  334,   -1,  302,  334,   -1,
  266,  335,   -1,  267,  335,   -1,  268,  335,   -1,  269,
  335,   -1,  270,  335,   -1,  271,  335,   -1,  272,  335,
   -1,  273,  335,   -1,  274,  335,   -1,  275,  335,   -1,
  276,  335,   -1,  277,  335,   -1,  278,  335,   -1,  279,
  335,   -1,  280,  335,   -1,  281,  335,   -1,  282,  335,
   -1,  283,  335,   -1,  284,  335,   -1,  285,  335,   -1,
  286,  335,   -1,  287,  335,   -1,  288,  335,   -1,  289,
  335,   -1,  290,  335,   -1,  291,  335,   -1,  292,  335,
   -1,  293,  335,   -1,  294,  335,   -1,  295,  335,   -1,
  296,  335,   -1,  297,  335,   -1,  298,  335,   -1,  299,
  335,   -1,  300,  335,   -1,  302,  335,   -1,  266,  336,
   -1,  267,  336,   -1,  268,  336,   -1,  269,  336,   -1,
  270,  336,   -1,  271,  336,   -1,  272,  336,   -1,  273,
  336,   -1,  274,  336,   -1,  275,  336,   -1,  276,  336,
   -1,  277,  336,   -1,  278,  336,   -1,  279,  336,   -1,
  280,  336,   -1,  281,  336,   -1,  282,  336,   -1,  283,
  336,   -1,  284,  336,   -1,  285,  336,   -1,  286,  336,
   -1,  287,  336,   -1,  288,  336,   -1,  294,  336,   -1,
  302,  336,   -1,  266,  337,   -1,  267,  337,   -1,  268,
  337,   -1,  269,  337,   -1,  270,  337,   -1,  271,  337,
   -1,  272,  337,   -1,  273,  337,   -1,  274,  337,   -1,
  275,  337,   -1,  276,  337,   -1,  277,  337,   -1,  278,
  337,   -1,  279,  337,   -1,  280,  337,   -1,  281,  337,
   -1,  282,  337,   -1,  283,  337,   -1,  284,  337,   -1,
  285,  337,   -1,  286,  337,   -1,  287,  337,   -1,  288,
  337,   -1,  294,  337,   -1,  302,  337,   -1,  266,  338,
   -1,  267,  338,   -1,  268,  338,   -1,  269,  338,   -1,
  270,  338,   -1,  271,  338,   -1,  272,  338,   -1,  273,
  338,   -1,  274,  338,   -1,  275,  338,   -1,  276,  338,
   -1,  277,  338,   -1,  278,  338,   -1,  279,  338,   -1,
  280,  338,   -1,  281,  338,   -1,  282,  338,   -1,  283,
  338,   -1,  284,  338,   -1,  285,  338,   -1,  286,  338,
   -1,  287,  338,   -1,  288,  338,   -1,  289,  338,   -1,
  290,  338,   -1,  291,  338,   -1,  292,  338,   -1,  293,
  338,   -1,  294,  338,   -1,  295,  338,   -1,  296,  338,
   -1,  297,  338,   -1,  298,  338,   -1,  299,  338,   -1,
  300,  338,   -1,  302,  338,   -1,  266,  339,   -1,  267,
  339,   -1,  268,  339,   -1,  269,  339,   -1,  270,  339,
   -1,  271,  339,   -1,  272,  339,   -1,  273,  339,   -1,
  274,  339,   -1,  275,  339,   -1,  276,  339,   -1,  277,
  339,   -1,  278,  339,   -1,  279,  339,   -1,  280,  339,
   -1,  281,  339,   -1,  282,  339,   -1,  283,  339,   -1,
  284,  339,   -1,  285,  339,   -1,  286,  339,   -1,  287,
  339,   -1,  288,  339,   -1,  289,  339,   -1,  290,  339,
   -1,  291,  339,   -1,  292,  339,   -1,  293,  339,   -1,
  294,  339,   -1,  295,  339,   -1,  296,  339,   -1,  297,
  339,   -1,  298,  339,   -1,  299,  339,   -1,  300,  339,
   -1,  302,  339,   -1,  266,  340,   -1,  267,  340,   -1,
  268,  340,   -1,  269,  340,   -1,  270,  340,   -1,  271,
  340,   -1,  272,  340,   -1,  273,  340,   -1,  274,  340,
   -1,  275,  340,   -1,  276,  340,   -1,  277,  340,   -1,
  278,  340,   -1,  279,  340,   -1,  280,  340,   -1,  281,
  340,   -1,  282,  340,   -1,  283,  340,   -1,  284,  340,
   -1,  285,  340,   -1,  286,  340,   -1,  287,  340,   -1,
  288,  340,   -1,  294,  340,   -1,  302,  340,   -1,  266,
  341,   -1,  267,  341,   -1,  268,  341,   -1,  269,  341,
   -1,  270,  341,   -1,  271,  341,   -1,  272,  341,   -1,
  273,  341,   -1,  274,  341,   -1,  275,  341,   -1,  276,
  341,   -1,  277,  341,   -1,  278,  341,   -1,  279,  341,
   -1,  280,  341,   -1,  281,  341,   -1,  282,  341,   -1,
  283,  341,   -1,  284,  341,   -1,  285,  341,   -1,  286,
  341,   -1,  287,  341,   -1,  288,  341,   -1,  289,  341,
   -1,  290,  341,   -1,  291,  341,   -1,  292,  341,   -1,
  293,  341,   -1,  294,  341,   -1,  295,  341,   -1,  296,
  341,   -1,  297,  341,   -1,  298,  341,   -1,  299,  341,
   -1,  300,  341,   -1,  302,  341,   -1,  266,  342,   -1,
  267,  342,   -1,  268,  342,   -1,  269,  342,   -1,  270,
  342,   -1,  271,  342,   -1,  272,  342,   -1,  273,  342,
   -1,  274,  342,   -1,  275,  342,   -1,  276,  342,   -1,
  277,  342,   -1,  278,  342,   -1,  279,  342,   -1,  280,
  342,   -1,  281,  342,   -1,  282,  342,   -1,  283,  342,
   -1,  284,  342,   -1,  285,  342,   -1,  286,  342,   -1,
  287,  342,   -1,  288,  342,   -1,  289,  342,   -1,  290,
  342,   -1,  291,  342,   -1,  292,  342,   -1,  293,  342,
   -1,  294,  342,   -1,  295,  342,   -1,  296,  342,   -1,
  297,  342,   -1,  298,  342,   -1,  299,  342,   -1,  300,
  342,   -1,  302,  342,   -1,  266,  343,   -1,  267,  343,
   -1,  268,  343,   -1,  269,  343,   -1,  270,  343,   -1,
  271,  343,   -1,  272,  343,   -1,  273,  343,   -1,  274,
  343,   -1,  275,  343,   -1,  276,  343,   -1,  277,  343,
   -1,  278,  343,   -1,  279,  343,   -1,  280,  343,   -1,
  281,  343,   -1,  282,  343,   -1,  283,  343,   -1,  284,
  343,   -1,  285,  343,   -1,  286,  343,   -1,  287,  343,
   -1,  288,  343,   -1,  289,  343,   -1,  290,  343,   -1,
  291,  343,   -1,  292,  343,   -1,  293,  343,   -1,  294,
  343,   -1,  295,  343,   -1,  296,  343,   -1,  297,  343,
   -1,  298,  343,   -1,  299,  343,   -1,  300,  343,   -1,
  302,  343,   -1,  266,  344,   -1,  267,  344,   -1,  268,
  344,   -1,  269,  344,   -1,  270,  344,   -1,  271,  344,
   -1,  272,  344,   -1,  273,  344,   -1,  274,  344,   -1,
  275,  344,   -1,  276,  344,   -1,  277,  344,   -1,  278,
  344,   -1,  279,  344,   -1,  280,  344,   -1,  281,  344,
   -1,  282,  344,   -1,  283,  344,   -1,  284,  344,   -1,
  285,  344,   -1,  286,  344,   -1,  287,  344,   -1,  288,
  344,   -1,  289,  344,   -1,  290,  344,   -1,  291,  344,
   -1,  292,  344,   -1,  293,  344,   -1,  294,  344,   -1,
  295,  344,   -1,  296,  344,   -1,  297,  344,   -1,  298,
  344,   -1,  299,  344,   -1,  300,  344,   -1,  302,  344,
   -1,  266,  346,   -1,  267,  346,   -1,  268,  346,   -1,
  269,  346,   -1,  270,  346,   -1,  271,  346,   -1,  272,
  346,   -1,  273,  346,   -1,  274,  346,   -1,  275,  346,
   -1,  276,  346,   -1,  277,  346,   -1,  278,  346,   -1,
  279,  346,   -1,  280,  346,   -1,  281,  346,   -1,  282,
  346,   -1,  283,  346,   -1,  284,  346,   -1,  285,  346,
   -1,  286,  346,   -1,  287,  346,   -1,  288,  346,   -1,
  294,  346,   -1,  302,  346,   -1,  266,  347,   -1,  267,
  347,   -1,  268,  347,   -1,  269,  347,   -1,  270,  347,
   -1,  271,  347,   -1,  272,  347,   -1,  273,  347,   -1,
  274,  347,   -1,  275,  347,   -1,  276,  347,   -1,  277,
  347,   -1,  278,  347,   -1,  279,  347,   -1,  280,  347,
   -1,  281,  347,   -1,  282,  347,   -1,  283,  347,   -1,
  284,  347,   -1,  285,  347,   -1,  286,  347,   -1,  287,
  347,   -1,  288,  347,   -1,  289,  347,   -1,  290,  347,
   -1,  291,  347,   -1,  292,  347,   -1,  293,  347,   -1,
  294,  347,   -1,  295,  347,   -1,  296,  347,   -1,  297,
  347,   -1,  298,  347,   -1,  299,  347,   -1,  300,  347,
   -1,  302,  347,   -1,  266,  325,   -1,  267,  325,   -1,
  268,  325,   -1,  269,  325,   -1,  270,  325,   -1,  271,
  325,   -1,  272,  325,   -1,  273,  325,   -1,  274,  325,
   -1,  275,  325,   -1,  276,  325,   -1,  277,  325,   -1,
  278,  325,   -1,  279,  325,   -1,  280,  325,   -1,  281,
  325,   -1,  282,  325,   -1,  283,  325,   -1,  284,  325,
   -1,  285,  325,   -1,  286,  325,   -1,  287,  325,   -1,
  288,  325,   -1,  289,  325,   -1,  290,  325,   -1,  291,
  325,   -1,  292,  325,   -1,  293,  325,   -1,  294,  325,
   -1,  295,  325,   -1,  296,  325,   -1,  297,  325,   -1,
  298,  325,   -1,  299,  325,   -1,  300,  325,   -1,  302,
  325,   -1,  266,  326,   -1,  267,  326,   -1,  268,  326,
   -1,  269,  326,   -1,  270,  326,   -1,  271,  326,   -1,
  272,  326,   -1,  273,  326,   -1,  274,  326,   -1,  275,
  326,   -1,  276,  326,   -1,  277,  326,   -1,  278,  326,
   -1,  279,  326,   -1,  280,  326,   -1,  281,  326,   -1,
  282,  326,   -1,  283,  326,   -1,  284,  326,   -1,  285,
  326,   -1,  286,  326,   -1,  287,  326,   -1,  288,  326,
   -1,  289,  326,   -1,  290,  326,   -1,  291,  326,   -1,
  292,  326,   -1,  293,  326,   -1,  294,  326,   -1,  295,
  326,   -1,  296,  326,   -1,  297,  326,   -1,  298,  326,
   -1,  299,  326,   -1,  300,  326,   -1,  302,  326,   -1,
  266,  316,   -1,  267,  316,   -1,  268,  316,   -1,  269,
  316,   -1,  270,  316,   -1,  271,  316,   -1,  272,  316,
   -1,  273,  316,   -1,  274,  316,   -1,  275,  316,   -1,
  276,  316,   -1,  277,  316,   -1,  278,  316,   -1,  279,
  316,   -1,  280,  316,   -1,  281,  316,   -1,  282,  316,
   -1,  283,  316,   -1,  284,  316,   -1,  285,  316,   -1,
  286,  316,   -1,  287,  316,   -1,  288,  316,   -1,  294,
  316,   -1,  302,  316,   -1,  266,  317,   -1,  267,  317,
   -1,  268,  317,   -1,  269,  317,   -1,  270,  317,   -1,
  271,  317,   -1,  272,  317,   -1,  273,  317,   -1,  274,
  317,   -1,  275,  317,   -1,  276,  317,   -1,  277,  317,
   -1,  278,  317,   -1,  279,  317,   -1,  280,  317,   -1,
  281,  317,   -1,  282,  317,   -1,  283,  317,   -1,  284,
  317,   -1,  285,  317,   -1,  286,  317,   -1,  287,  317,
   -1,  288,  317,   -1,  294,  317,   -1,  302,  317,   -1,
  266,  318,   -1,  267,  318,   -1,  268,  318,   -1,  269,
  318,   -1,  270,  318,   -1,  271,  318,   -1,  272,  318,
   -1,  273,  318,   -1,  274,  318,   -1,  275,  318,   -1,
  276,  318,   -1,  277,  318,   -1,  278,  318,   -1,  279,
  318,   -1,  280,  318,   -1,  281,  318,   -1,  282,  318,
   -1,  283,  318,   -1,  284,  318,   -1,  285,  318,   -1,
  286,  318,   -1,  287,  318,   -1,  288,  318,   -1,  294,
  318,   -1,  302,  318,   -1,  266,  319,   -1,  267,  319,
   -1,  268,  319,   -1,  269,  319,   -1,  270,  319,   -1,
  271,  319,   -1,  272,  319,   -1,  273,  319,   -1,  274,
  319,   -1,  275,  319,   -1,  276,  319,   -1,  277,  319,
   -1,  278,  319,   -1,  279,  319,   -1,  280,  319,   -1,
  281,  319,   -1,  282,  319,   -1,  283,  319,   -1,  284,
  319,   -1,  285,  319,   -1,  286,  319,   -1,  287,  319,
   -1,  288,  319,   -1,  294,  319,   -1,  302,  319,   -1,
  266,  320,   -1,  267,  320,   -1,  268,  320,   -1,  269,
  320,   -1,  270,  320,   -1,  271,  320,   -1,  272,  320,
   -1,  273,  320,   -1,  274,  320,   -1,  275,  320,   -1,
  276,  320,   -1,  277,  320,   -1,  278,  320,   -1,  279,
  320,   -1,  280,  320,   -1,  281,  320,   -1,  282,  320,
   -1,  283,  320,   -1,  284,  320,   -1,  285,  320,   -1,
  286,  320,   -1,  287,  320,   -1,  288,  320,   -1,  294,
  320,   -1,  302,  320,   -1,  266,  323,   -1,  267,  323,
   -1,  268,  323,   -1,  269,  323,   -1,  270,  323,   -1,
  271,  323,   -1,  272,  323,   -1,  273,  323,   -1,  274,
  323,   -1,  275,  323,   -1,  276,  323,   -1,  277,  323,
   -1,  278,  323,   -1,  279,  323,   -1,  280,  323,   -1,
  281,  323,   -1,  282,  323,   -1,  283,  323,   -1,  284,
  323,   -1,  285,  323,   -1,  286,  323,   -1,  287,  323,
   -1,  288,  323,   -1,  289,  323,   -1,  290,  323,   -1,
  291,  323,   -1,  292,  323,   -1,  293,  323,   -1,  294,
  323,   -1,  295,  323,   -1,  296,  323,   -1,  297,  323,
   -1,  298,  323,   -1,  299,  323,   -1,  300,  323,   -1,
  302,  323,   -1,  266,  321,   -1,  267,  321,   -1,  268,
  321,   -1,  269,  321,   -1,  270,  321,   -1,  271,  321,
   -1,  272,  321,   -1,  273,  321,   -1,  274,  321,   -1,
  275,  321,   -1,  276,  321,   -1,  277,  321,   -1,  278,
  321,   -1,  279,  321,   -1,  280,  321,   -1,  281,  321,
   -1,  282,  321,   -1,  283,  321,   -1,  284,  321,   -1,
  285,  321,   -1,  286,  321,   -1,  287,  321,   -1,  288,
  321,   -1,  294,  321,   -1,  302,  321,   -1,  266,  322,
   -1,  267,  322,   -1,  268,  322,   -1,  269,  322,   -1,
  270,  322,   -1,  271,  322,   -1,  272,  322,   -1,  273,
  322,   -1,  274,  322,   -1,  275,  322,   -1,  276,  322,
   -1,  277,  322,   -1,  278,  322,   -1,  279,  322,   -1,
  280,  322,   -1,  281,  322,   -1,  282,  322,   -1,  283,
  322,   -1,  284,  322,   -1,  285,  322,   -1,  286,  322,
   -1,  287,  322,   -1,  288,  322,   -1,  294,  322,   -1,
  302,  322,   -1,  266,  324,   -1,  267,  324,   -1,  268,
  324,   -1,  269,  324,   -1,  270,  324,   -1,  271,  324,
   -1,  272,  324,   -1,  273,  324,   -1,  274,  324,   -1,
  275,  324,   -1,  276,  324,   -1,  277,  324,   -1,  278,
  324,   -1,  279,  324,   -1,  280,  324,   -1,  281,  324,
   -1,  282,  324,   -1,  283,  324,   -1,  284,  324,   -1,
  285,  324,   -1,  286,  324,   -1,  287,  324,   -1,  288,
  324,   -1,  294,  324,   -1,  302,  324,   -1,  266,  345,
   -1,  267,  345,   -1,  268,  345,   -1,  269,  345,   -1,
  270,  345,   -1,  271,  345,   -1,  272,  345,   -1,  273,
  345,   -1,  274,  345,   -1,  275,  345,   -1,  276,  345,
   -1,  277,  345,   -1,  278,  345,   -1,  279,  345,   -1,
  280,  345,   -1,  281,  345,   -1,  282,  345,   -1,  283,
  345,   -1,  284,  345,   -1,  285,  345,   -1,  286,  345,
   -1,  287,  345,   -1,  288,  345,   -1,  294,  345,   -1,
  302,  345,   -1,  483,  191,   -1,  266,  351,   -1,  267,
  351,   -1,  268,  351,   -1,  269,  351,   -1,  270,  351,
   -1,  271,  351,   -1,  272,  351,   -1,  273,  351,   -1,
  274,  351,   -1,  275,  351,   -1,  276,  351,   -1,  277,
  351,   -1,  278,  351,   -1,  279,  351,   -1,  280,  351,
   -1,  281,  351,   -1,  282,  351,   -1,  283,  351,   -1,
  284,  351,   -1,  285,  351,   -1,  286,  351,   -1,  287,
  351,   -1,  288,  351,   -1,  289,  351,   -1,  290,  351,
   -1,  291,  351,   -1,  292,  351,   -1,  293,  351,   -1,
  294,  351,   -1,  295,  351,   -1,  296,  351,   -1,  297,
  351,   -1,  298,  351,   -1,  299,  351,   -1,  300,  351,
   -1,  302,  351,   -1,  266,  359,   -1,  267,  359,   -1,
  268,  359,   -1,  269,  359,   -1,  270,  359,   -1,  271,
  359,   -1,  272,  359,   -1,  273,  359,   -1,  274,  359,
   -1,  275,  359,   -1,  276,  359,   -1,  277,  359,   -1,
  278,  359,   -1,  279,  359,   -1,  280,  359,   -1,  281,
  359,   -1,  282,  359,   -1,  283,  359,   -1,  284,  359,
   -1,  285,  359,   -1,  286,  359,   -1,  287,  359,   -1,
  288,  359,   -1,  289,  359,   -1,  290,  359,   -1,  291,
  359,   -1,  292,  359,   -1,  293,  359,   -1,  294,  359,
   -1,  295,  359,   -1,  296,  359,   -1,  297,  359,   -1,
  298,  359,   -1,  299,  359,   -1,  300,  359,   -1,  302,
  359,   -1,  566,   89,   -1,   13,   89,   -1,   14,   89,
   -1,  568,   89,   -1,  288,  289,   -1,  266,  327,   -1,
  267,  327,   -1,  268,  327,   -1,  269,  327,   -1,  270,
  327,   -1,  271,  327,   -1,  272,  327,   -1,  273,  327,
   -1,  274,  327,   -1,  275,  327,   -1,  276,  327,   -1,
  277,  327,   -1,  278,  327,   -1,  279,  327,   -1,  280,
  327,   -1,  281,  327,   -1,  282,  327,   -1,  283,  327,
   -1,  284,  327,   -1,  285,  327,   -1,  286,  327,   -1,
  287,  327,   -1,  288,  327,   -1,  289,  327,   -1,  290,
  327,   -1,  291,  327,   -1,  292,  327,   -1,  293,  327,
   -1,  294,  327,   -1,  295,  327,   -1,  296,  327,   -1,
  297,  327,   -1,  298,  327,   -1,  299,  327,   -1,  300,
  327,   -1,  302,  327,   -1,  712,  129,   -1,  712,  128,
   -1,  712,  127,   -1,
};
#define YYFINAL 49
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 355
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID",
"tknStrLit","tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum",
"tknPreProDef","tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate",
"tknTypename","tknDocBlockComment","tknDocLineComment","tknScopeResOp",
"tknNumSignSpec","tknPublic","tknProtected","tknPrivate","tknExternC",
"tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast",
"tknStaticCast","tknDynamicCast","tknReinterpretCast","tknTry","tknCatch",
"tknThrow","tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq",
"tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknNew","tknDelete","tknConst","tknVoid","tknStatic","tknExtern","tknVirtual",
"tknOverride","tknInline","tknExplicit","tknFriend","tknVolatile","tknFinal",
"tknNoExcept","tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf",
"tknIfDef","tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor","tknWhile",
"tknDo","tknSwitch","tknCase","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT",
"RSHIFT","ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
"tknDefault",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : doccommentstr",
"doccommentstr : tknDocBlockComment",
"doccommentstr : tknDocLineComment",
"doccommentstr : doccommentstr tknDocBlockComment",
"doccommentstr : doccommentstr tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknVoid",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : templidentifier",
"templidentifier : identifier '<' templateparamlist '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumdefn : tknTypedef tknEnum optid '{' enumitemlist '}' tknID ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer functype varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcdecl : templatespecifier tknInline funcdecl",
"funcdecl : funcdecl '=' tknDelete",
"funcdecl : funcdecl '=' tknDefault",
"funcname : basefuncname",
"funcname : identifier",
"funcname : identifier tknScopeResOp basefuncname",
"basefuncname : tknID",
"basefuncname : tknOperator '+'",
"basefuncname : tknOperator '-'",
"basefuncname : tknOperator '*'",
"basefuncname : tknOperator '/'",
"basefuncname : tknOperator '%'",
"basefuncname : tknOperator '^'",
"basefuncname : tknOperator '&'",
"basefuncname : tknOperator '|'",
"basefuncname : tknOperator '~'",
"basefuncname : tknOperator '!'",
"basefuncname : tknOperator '='",
"basefuncname : tknOperator '<'",
"basefuncname : tknOperator '>'",
"basefuncname : tknOperator tknPlusEq",
"basefuncname : tknOperator tknMinusEq",
"basefuncname : tknOperator tknMulEq",
"basefuncname : tknOperator tknDivEq",
"basefuncname : tknOperator tknPerEq",
"basefuncname : tknOperator tknXorEq",
"basefuncname : tknOperator tknAndEq",
"basefuncname : tknOperator tknOrEq",
"basefuncname : tknOperator tknLShift",
"basefuncname : tknOperator tknRShift",
"basefuncname : tknOperator tknLShiftEq",
"basefuncname : tknOperator tknRShiftEq",
"basefuncname : tknOperator tknCmpEq",
"basefuncname : tknOperator tknNotEq",
"basefuncname : tknOperator tknLessEq",
"basefuncname : tknOperator tknGreaterEq",
"basefuncname : tknOperator tkn3WayCmp",
"basefuncname : tknOperator tknAnd",
"basefuncname : tknOperator tknOr",
"basefuncname : tknOperator tknInc",
"basefuncname : tknOperator tknDec",
"basefuncname : tknOperator ','",
"basefuncname : tknOperator tknArrow",
"basefuncname : tknOperator tknArrowStar",
"basefuncname : tknOperator '(' ')'",
"basefuncname : tknOperator '[' ']'",
"basefuncname : tknOperator tknNew",
"basefuncname : tknOperator tknNew '[' ']'",
"basefuncname : tknOperator tknDelete",
"basefuncname : tknOperator tknDelete '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"param : doccomment param",
"templateparam :",
"templateparam : identifier",
"templateparam : tknConst templateparam",
"templateparam : templateparam '*'",
"templateparamlist : templateparam",
"templateparamlist : templateparamlist ',' templateparam",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib tknFinal",
"funcattrib : funcattrib '=' tknNumber",
"funcattrib : funcattrib tknNoExcept",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$3 :",
"ctordefn : tknID '<' templateparamlist '>' tknScopeResOp tknID $$3 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : tknInline ctordefn",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$4 :",
"ctordecl : functype tknID $$4 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"ctordecl : ctordecl '=' tknDelete",
"ctordecl : ctordecl '=' tknDefault",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : ':' tknID '(' ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$5 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"$$6 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$6 '(' ')' block",
"$$7 :",
"dtordefn : tknID '<' templateparamlist '>' tknScopeResOp '~' tknID $$7 '(' ')' block",
"dtordefn : tknInline dtordefn",
"dtordefn : templatespecifier dtordefn",
"dtordecl : apidocer '~' tknID '(' optvoid ')'",
"dtordecl : apidocer functype '~' tknID '(' optvoid ')'",
"dtordecl : apidocer tknVirtual '~' tknID '(' optvoid ')' '=' tknNumber",
"dtordecl : dtordecl '=' tknDelete",
"dtordecl : dtordecl '=' tknDefault",
"optvoid :",
"optvoid : tknVoid",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"optcomment :",
"optcomment : doccomment",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$8 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist optcomment '{' $$8 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : templatespecifier fwddecl",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr '?' expr ':' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1177 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3936 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 286 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4326 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 293 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4332 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 294 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4342 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 299 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4352 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4358 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4364 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4370 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4376 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4382 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4388 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4394 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4400 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4406 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4412 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4418 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4424 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4430 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4436 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4442 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4448 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4454 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4460 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4466 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4472 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4478 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4484 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4490 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4496 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4502 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 331 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4508 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 332 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4514 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4520 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 334 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4526 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 335 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4532 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 338 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4540 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 343 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4549 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 347 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4558 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 353 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4567 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 359 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4576 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 365 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4584 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 370 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4592 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 373 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4600 "y_tab.c"
break;
case 43:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4605 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4612 "y_tab.c"
break;
case 44:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4617 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4624 "y_tab.c"
break;
case 45:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4629 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4636 "y_tab.c"
break;
case 46:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4641 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4648 "y_tab.c"
break;
case 47:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4653 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4660 "y_tab.c"
break;
case 48:
#line 398 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4665 "y_tab.c"
  if (!yytrial)
#line 398 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4672 "y_tab.c"
break;
case 49:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4677 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4681 "y_tab.c"
break;
case 50:
#line 407 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4686 "y_tab.c"
  if (!yytrial)
#line 407 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4690 "y_tab.c"
break;
case 51:
#line 408 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4695 "y_tab.c"
  if (!yytrial)
#line 408 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4699 "y_tab.c"
break;
case 52:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4704 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4708 "y_tab.c"
break;
case 53:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4713 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4717 "y_tab.c"
break;
case 54:
#line 416 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4722 "y_tab.c"
  if (!yytrial)
#line 416 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4726 "y_tab.c"
break;
case 55:
#line 417 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4731 "y_tab.c"
  if (!yytrial)
#line 417 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4735 "y_tab.c"
break;
case 56:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4740 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4744 "y_tab.c"
break;
case 57:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4749 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4753 "y_tab.c"
break;
case 58:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4758 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4762 "y_tab.c"
break;
case 59:
#line 425 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4767 "y_tab.c"
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4771 "y_tab.c"
break;
case 60:
#line 428 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4776 "y_tab.c"
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4780 "y_tab.c"
break;
case 61:
#line 429 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4785 "y_tab.c"
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4789 "y_tab.c"
break;
case 62:
#line 430 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4794 "y_tab.c"
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4798 "y_tab.c"
break;
case 63:
#line 431 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4803 "y_tab.c"
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4807 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4813 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4819 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 4825 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4831 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4837 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 439 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4843 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4849 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4855 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4861 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4867 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4873 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4879 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 4885 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4891 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                  }
#line 4899 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4905 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 458 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, 0U); }
#line 4911 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4917 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 462 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4923 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4929 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 464 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4935 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4941 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 468 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4947 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 469 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4956 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4965 "y_tab.c"
break;
case 89:
  if (!yytrial)
#line 477 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4973 "y_tab.c"
break;
case 90:
#line 482 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4978 "y_tab.c"
  if (!yytrial)
#line 482 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4984 "y_tab.c"
break;
case 91:
#line 485 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4989 "y_tab.c"
  if (!yytrial)
#line 485 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4995 "y_tab.c"
break;
case 92:
#line 488 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5000 "y_tab.c"
  if (!yytrial)
#line 488 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 5006 "y_tab.c"
break;
case 93:
#line 491 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5011 "y_tab.c"
  if (!yytrial)
#line 491 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 5017 "y_tab.c"
break;
case 94:
#line 494 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5022 "y_tab.c"
  if (!yytrial)
#line 494 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].enumItemList);
                  }
#line 5028 "y_tab.c"
break;
case 95:
#line 498 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5033 "y_tab.c"
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 5039 "y_tab.c"
break;
case 96:
#line 501 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5044 "y_tab.c"
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 5050 "y_tab.c"
break;
case 97:
#line 504 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5055 "y_tab.c"
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 5061 "y_tab.c"
break;
case 98:
#line 509 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5066 "y_tab.c"
  if (!yytrial)
#line 509 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 5070 "y_tab.c"
break;
case 99:
#line 510 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5075 "y_tab.c"
  if (!yytrial)
#line 510 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 5079 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 5085 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 516 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 5094 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 522 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 5100 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 525 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 5111 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 531 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 5121 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 536 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 5132 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 542 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 5142 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 547 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 5153 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 5163 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 562 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 5171 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 5179 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 568 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 5187 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 5195 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 577 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 5204 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 5212 "y_tab.c"
break;
case 115:
  if (!yytrial)
#line 586 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 5218 "y_tab.c"
break;
case 116:
  if (!yytrial)
#line 587 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5224 "y_tab.c"
break;
case 117:
  if (!yytrial)
#line 590 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 5232 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 593 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 5241 "y_tab.c"
break;
case 119:
#line 599 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5246 "y_tab.c"
  if (!yytrial)
#line 599 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 5252 "y_tab.c"
break;
case 120:
#line 602 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5257 "y_tab.c"
  if (!yytrial)
#line 602 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 5264 "y_tab.c"
break;
case 121:
#line 608 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5269 "y_tab.c"
  if (!yytrial)
#line 608 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5273 "y_tab.c"
break;
case 122:
#line 611 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5278 "y_tab.c"
  if (!yytrial)
#line 611 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5285 "y_tab.c"
break;
case 123:
#line 617 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5290 "y_tab.c"
  if (!yytrial)
#line 617 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5297 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 622 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5307 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 627 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5317 "y_tab.c"
break;
case 126:
#line 634 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5322 "y_tab.c"
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5326 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5336 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-7].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-8].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5346 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5356 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5365 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-2].templSpec;
                  }
#line 5374 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= kDelete;
                  }
#line 5383 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-2].cppFuncObj;
                    yyval.cppFuncObj->attr_ |= kDefault;
                  }
#line 5392 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5398 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5404 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 5410 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5416 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5422 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5428 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5434 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5440 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5446 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5452 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5458 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5464 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5470 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5476 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5482 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5488 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5494 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5500 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5506 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 692 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5512 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5518 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5524 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5530 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5536 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5542 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5548 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5554 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 700 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5560 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 701 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5566 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5572 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5578 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5584 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5590 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5596 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 707 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5602 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 708 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5608 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5614 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5620 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5626 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 712 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5632 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 713 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5638 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 5644 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 715 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 5650 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5656 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 5662 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 718 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5668 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 5674 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 722 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5680 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 723 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5689 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 727 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5698 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 733 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5704 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 734 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5710 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 735 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5716 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 736 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5722 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 737 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].varOrFuncPtr; }
#line 5728 "y_tab.c"
break;
case 189:
  if (!yytrial)
#line 740 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, 0U); }
#line 5734 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 741 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5740 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 742 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 5746 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 743 "/home/dassat/github/cppparser/parser.y"
{
                    auto p = yyvsp[-1].str.sz + yyvsp[-1].str.len;
                    while (*p && (*p != '*'))
                      ++p;
                    if (*p == '*')
                      ++p;
                    yyval.str = makeCppToken(yyvsp[-1].str.sz, p - yyvsp[-1].str.sz);
                  }
#line 5759 "y_tab.c"
break;
case 193:
  if (!yytrial)
#line 753 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5765 "y_tab.c"
break;
case 194:
  if (!yytrial)
#line 754 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-2].str, yyvsp[0].str); }
#line 5771 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 757 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5777 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 758 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5783 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 759 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5789 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 760 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5795 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 761 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5801 "y_tab.c"
break;
case 200:
  if (!yytrial)
#line 762 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5807 "y_tab.c"
break;
case 201:
  if (!yytrial)
#line 765 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5813 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5819 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 767 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5825 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 768 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 5831 "y_tab.c"
break;
case 205:
#line 769 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5836 "y_tab.c"
  if (!yytrial)
#line 770 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5840 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 771 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kNoExcept; }
#line 5846 "y_tab.c"
break;
case 207:
  if (!yytrial)
#line 774 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5852 "y_tab.c"
break;
case 208:
  if (!yytrial)
#line 775 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5858 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 776 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5864 "y_tab.c"
break;
case 210:
#line 779 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5869 "y_tab.c"
  if (!yytrial)
#line 779 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5873 "y_tab.c"
break;
case 211:
#line 785 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5878 "y_tab.c"
  if (!yytrial)
#line 786 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5886 "y_tab.c"
break;
case 212:
#line 791 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5891 "y_tab.c"
break;
case 213:
#line 795 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5896 "y_tab.c"
  if (!yytrial)
#line 796 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, mergeCppToken(yyvsp[-10].str, yyvsp[-8].str), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5903 "y_tab.c"
break;
case 214:
#line 800 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5908 "y_tab.c"
break;
case 215:
#line 804 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5913 "y_tab.c"
  if (!yytrial)
#line 805 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5920 "y_tab.c"
break;
case 216:
#line 809 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-5].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5925 "y_tab.c"
break;
case 217:
#line 813 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5930 "y_tab.c"
  if (!yytrial)
#line 814 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, mergeCppToken(yyvsp[-13].str, yyvsp[-8].str), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5937 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 818 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kInline;
                  }
#line 5946 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 822 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5955 "y_tab.c"
break;
case 220:
#line 829 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5967 "y_tab.c"
  if (!yytrial)
#line 837 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5973 "y_tab.c"
break;
case 221:
#line 840 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5978 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 841 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5986 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 844 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5995 "y_tab.c"
break;
case 224:
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kDelete;
                  }
#line 6004 "y_tab.c"
break;
case 225:
  if (!yytrial)
#line 852 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-2].cppCtorObj;
                    yyval.cppCtorObj->attr_ |= kDefault;
                  }
#line 6013 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 858 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 6019 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 859 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 6025 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 860 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-2].str, nullptr)); }
#line 6031 "y_tab.c"
break;
case 229:
  if (!yytrial)
#line 861 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 6037 "y_tab.c"
break;
case 230:
#line 864 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6042 "y_tab.c"
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 6046 "y_tab.c"
break;
case 231:
#line 867 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6051 "y_tab.c"
  if (!yytrial)
#line 868 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6058 "y_tab.c"
break;
case 232:
#line 872 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6063 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 874 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-7].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6072 "y_tab.c"
break;
case 234:
#line 878 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6077 "y_tab.c"
break;
case 235:
  if (!yytrial)
#line 880 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-9].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6086 "y_tab.c"
break;
case 236:
#line 884 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-6].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 6091 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 886 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, mergeCppToken(yyvsp[-10].str, yyvsp[-4].str), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 6100 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 890 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kInline;
                  }
#line 6109 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 894 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[0].cppDtorObj;
                    yyval.cppDtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 6118 "y_tab.c"
break;
case 240:
#line 901 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 6130 "y_tab.c"
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-3].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-3].str.sz+yyvsp[-3].str.len-tildaStartPos), 0);
                  }
#line 6138 "y_tab.c"
break;
case 241:
#line 915 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 6150 "y_tab.c"
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-3].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-3].str.sz+yyvsp[-3].str.len-tildaStartPos), yyvsp[-5].attr);
                  }
#line 6158 "y_tab.c"
break;
case 242:
#line 929 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-5].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 6170 "y_tab.c"
  if (!yytrial)
#line 937 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-5].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-5].str.sz+yyvsp[-5].str.len-tildaStartPos), kPureVirtual);
                  }
#line 6178 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 942 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kDelete;
                  }
#line 6187 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-2].cppDtorObj;
                    yyval.cppDtorObj->attr_ |= kDefault;
                  }
#line 6196 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 6206 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 961 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 6215 "y_tab.c"
break;
case 249:
#line 967 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6220 "y_tab.c"
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 6224 "y_tab.c"
break;
case 250:
#line 970 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6229 "y_tab.c"
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 6233 "y_tab.c"
break;
case 251:
#line 971 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6238 "y_tab.c"
  if (!yytrial)
#line 971 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 6242 "y_tab.c"
break;
case 252:
#line 972 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6247 "y_tab.c"
  if (!yytrial)
#line 972 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 6251 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 975 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 6257 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 976 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 6263 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 979 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 6269 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 6275 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 983 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 6281 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 6287 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 6293 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{
                  }
#line 6300 "y_tab.c"
break;
case 261:
#line 990 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6305 "y_tab.c"
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{
                  }
#line 6310 "y_tab.c"
break;
case 262:
#line 994 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6315 "y_tab.c"
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 6319 "y_tab.c"
break;
case 263:
#line 996 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 6329 "y_tab.c"
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 6335 "y_tab.c"
break;
case 264:
#line 1008 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-3].str); ZZVALID;}
#line 6340 "y_tab.c"
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 6344 "y_tab.c"
break;
case 265:
#line 1010 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 6349 "y_tab.c"
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-8].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-7].str;
                    yyval.cppCompundObj->name_      = yyvsp[-6].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-5].inheritList;
                  }
#line 6362 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 6371 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 6377 "y_tab.c"
break;
case 268:
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6382 "y_tab.c"
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6386 "y_tab.c"
break;
case 269:
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6391 "y_tab.c"
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 6395 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 6401 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 6407 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6413 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 6419 "y_tab.c"
break;
case 274:
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6424 "y_tab.c"
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 6428 "y_tab.c"
break;
case 275:
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6433 "y_tab.c"
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 6437 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{
                    /* TODO: Assign template declaration to fwddecl.*/
                    yyval.fwdDeclObj = yyvsp[0].fwdDeclObj;
                  }
#line 6446 "y_tab.c"
break;
case 277:
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6451 "y_tab.c"
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 6455 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 6461 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 6467 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1049 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 6473 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 6479 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 6487 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6496 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1062 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6505 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1068 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6511 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1069 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6517 "y_tab.c"
break;
case 287:
#line 1072 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6522 "y_tab.c"
  if (!yytrial)
#line 1072 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6528 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1075 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6536 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1080 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6545 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1086 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6551 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1087 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6557 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1090 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(nullptr, 0U); }
#line 6563 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1091 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6569 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1092 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-3].str, yyvsp[0].str); }
#line 6575 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1093 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = mergeCppToken(yyvsp[-1].str, yyvsp[0].str); }
#line 6581 "y_tab.c"
break;
case 296:
#line 1096 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6586 "y_tab.c"
  if (!yytrial)
#line 1096 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6590 "y_tab.c"
break;
case 297:
#line 1097 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6595 "y_tab.c"
  if (!yytrial)
#line 1097 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6599 "y_tab.c"
break;
case 298:
#line 1098 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6604 "y_tab.c"
  if (!yytrial)
#line 1098 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6608 "y_tab.c"
break;
case 299:
#line 1101 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6613 "y_tab.c"
  if (!yytrial)
#line 1101 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6617 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1104 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6623 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1105 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6629 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1108 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6635 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1109 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6641 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1110 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6647 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1111 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6653 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1112 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6659 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1113 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6665 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1114 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6671 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1115 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6677 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1116 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6683 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1117 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6689 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1118 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6695 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1119 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6701 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1120 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6707 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1121 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6713 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1122 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6719 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1123 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6725 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1124 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6731 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1125 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6737 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1126 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6743 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1127 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6749 "y_tab.c"
break;
case 322:
  if (!yytrial)
#line 1128 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6755 "y_tab.c"
break;
case 323:
  if (!yytrial)
#line 1129 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6761 "y_tab.c"
break;
case 324:
  if (!yytrial)
#line 1130 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6767 "y_tab.c"
break;
case 325:
  if (!yytrial)
#line 1131 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6773 "y_tab.c"
break;
case 326:
  if (!yytrial)
#line 1132 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6779 "y_tab.c"
break;
case 327:
  if (!yytrial)
#line 1133 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppExprObj);                       }
#line 6785 "y_tab.c"
break;
case 328:
  if (!yytrial)
#line 1134 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6791 "y_tab.c"
break;
case 329:
  if (!yytrial)
#line 1135 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6797 "y_tab.c"
break;
case 330:
  if (!yytrial)
#line 1136 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6803 "y_tab.c"
break;
case 331:
  if (!yytrial)
#line 1137 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6809 "y_tab.c"
break;
case 332:
  if (!yytrial)
#line 1138 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6815 "y_tab.c"
break;
case 333:
  if (!yytrial)
#line 1139 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6821 "y_tab.c"
break;
case 334:
  if (!yytrial)
#line 1140 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6827 "y_tab.c"
break;
case 335:
  if (!yytrial)
#line 1141 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6833 "y_tab.c"
break;
case 336:
  if (!yytrial)
#line 1142 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6839 "y_tab.c"
break;
case 337:
  if (!yytrial)
#line 1143 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6845 "y_tab.c"
break;
case 338:
  if (!yytrial)
#line 1144 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6851 "y_tab.c"
break;
case 339:
  if (!yytrial)
#line 1145 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6857 "y_tab.c"
break;
case 340:
  if (!yytrial)
#line 1146 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6863 "y_tab.c"
break;
case 341:
  if (!yytrial)
#line 1147 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6869 "y_tab.c"
break;
case 342:
  if (!yytrial)
#line 1148 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6875 "y_tab.c"
break;
case 343:
  if (!yytrial)
#line 1149 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6881 "y_tab.c"
break;
case 344:
  if (!yytrial)
#line 1150 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6887 "y_tab.c"
break;
case 345:
  if (!yytrial)
#line 1152 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6893 "y_tab.c"
break;
case 346:
  if (!yytrial)
#line 1153 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6899 "y_tab.c"
break;
case 347:
  if (!yytrial)
#line 1154 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6905 "y_tab.c"
break;
case 348:
  if (!yytrial)
#line 1155 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6911 "y_tab.c"
break;
case 349:
  if (!yytrial)
#line 1156 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6917 "y_tab.c"
break;
case 350:
  if (!yytrial)
#line 1157 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6923 "y_tab.c"
break;
case 351:
  if (!yytrial)
#line 1158 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6929 "y_tab.c"
break;
case 352:
  if (!yytrial)
#line 1159 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6935 "y_tab.c"
break;
case 353:
  if (!yytrial)
#line 1160 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6941 "y_tab.c"
break;
case 354:
  if (!yytrial)
#line 1161 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6947 "y_tab.c"
break;
case 355:
  if (!yytrial)
#line 1162 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6953 "y_tab.c"
break;
case 356:
  if (!yytrial)
#line 1163 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6959 "y_tab.c"
break;
case 357:
  if (!yytrial)
#line 1164 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6965 "y_tab.c"
break;
case 358:
  if (!yytrial)
#line 1165 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6971 "y_tab.c"
break;
case 359:
  if (!yytrial)
#line 1166 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6977 "y_tab.c"
break;
case 360:
  if (!yytrial)
#line 1167 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6983 "y_tab.c"
break;
case 361:
  if (!yytrial)
#line 1168 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6989 "y_tab.c"
break;
case 362:
  if (!yytrial)
#line 1169 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6995 "y_tab.c"
break;
case 363:
  if (!yytrial)
#line 1170 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 7001 "y_tab.c"
break;
case 364:
#line 1173 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 7006 "y_tab.c"
  if (!yytrial)
#line 1173 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 7010 "y_tab.c"
break;
#line 7012 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
