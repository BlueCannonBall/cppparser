#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,   30,   40,   40,   41,   42,   43,
   39,   39,   70,   70,   70,   70,   70,   70,   71,   72,
   72,   73,   73,   73,   73,   73,   73,   74,   36,   36,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    4,    4,   11,   11,   11,   11,
   12,   12,   12,   12,    9,    9,    9,    9,    9,   10,
   10,   10,   25,   25,   24,   23,   16,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   14,   14,   14,   63,
   63,   55,   55,   56,   56,   47,   48,    8,   44,   44,
   45,   46,   46,   46,   46,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,   22,
   22,   22,   18,   18,   18,   18,   19,   19,   65,   65,
   65,   65,   65,   65,   64,   64,   64,   64,   64,   62,
   62,   62,   50,   51,   75,   51,   76,   51,   51,   49,
   77,   49,   49,   57,   57,   57,   53,   54,   78,   54,
   79,   54,   52,   52,   52,   20,   20,   21,   17,   17,
   17,   59,   59,   60,   60,   61,   61,   61,   28,   28,
   80,   27,   27,   66,   66,   66,   67,   67,   67,   67,
   13,   13,   13,   58,   58,   58,   58,   31,   32,   32,
   33,   33,   34,   34,   35,    6,    6,    1,    1,    1,
    1,   68,   68,   68,   29,   69,   69,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   38,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    3,    5,    3,    5,    6,    9,
    0,    1,    4,    3,    4,    4,    4,    4,    3,    3,
    3,    3,    3,    3,    2,    3,    2,    3,    1,    1,
    1,    2,    3,    1,    2,    1,    2,    2,    2,    2,
    1,    2,    4,    1,    0,    1,    1,    3,    1,    1,
    0,    2,    3,    2,    6,    8,    9,    7,    8,    5,
    6,    4,    2,    2,    3,    6,    3,    4,    3,    6,
    5,    5,    4,    3,    3,    3,    6,    9,    8,    1,
    1,    4,    2,    2,    2,    2,    2,    3,   11,   10,
    2,    9,    9,    8,    2,    1,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    3,    2,    4,    2,    4,    0,
    1,    3,    1,    1,    1,    1,    1,    1,    0,    2,
    2,    2,    2,    2,    0,    2,    2,    2,    3,    0,
    1,    1,    2,    5,    0,   11,    0,   13,    2,    4,
    0,    6,    2,    0,    5,    6,    2,    2,    0,    8,
    0,   10,    4,    5,    7,    8,    8,    2,    2,    2,
    3,    0,    1,    1,    2,    0,    1,    2,    2,    1,
    0,    8,    2,    0,    3,    4,    0,    1,    1,    1,
    3,    4,    2,    1,    1,    1,    1,    4,    1,    3,
    1,    1,    2,    2,    3,    1,    1,    0,    1,    4,
    2,    2,    2,    2,    2,    1,    3,    1,    1,    1,
    1,    3,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    5,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    4,    3,    4,    4,    7,    7,    7,
    7,    3,    2,    2,    4,    2,    1,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  268,  269,  270,    0,    0,    0,    0,    0,    0,
  247,    0,   59,   60,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  191,  110,  111,    0,    0,  192,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,    3,   28,    8,    9,   12,    0,    0,    0,
    6,    0,    7,    0,    0,   10,    0,    0,   11,   27,
   34,    0,   13,    0,   14,    0,   16,   17,   18,    0,
   19,    0,   20,   21,    0,   22,   23,    0,   24,   25,
    0,   26,    0,    0,    0,    0,   29,   30,   31,   32,
   33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  265,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  140,  141,  142,  143,
  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
  154,  155,  156,  157,  158,  159,  160,  162,  163,  138,
  139,  127,  128,  129,  130,  131,  132,  133,  134,  135,
  136,  137,  161,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  244,  245,  246,  243,    0,    0,    0,    0,
    0,    0,    0,    0,   55,    0,   57,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,    0,
    0,  224,    0,    0,    0,    0,    0,  219,  220,    0,
  218,    0,   94,   93,    0,    0,    0,    4,    5,  229,
    0,    0,    0,  233,  125,    0,  199,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  279,  281,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  330,    0,    0,  121,  116,  117,
  193,    0,    0,  207,  208,  113,  114,  115,    0,    0,
    0,    0,    0,    0,    0,  180,  183,  182,  181,  184,
    0,    0,    0,    0,    0,    0,  173,  171,    0,  176,
    0,  221,  261,    0,   76,    0,    0,    0,  118,    0,
    0,    0,   81,    0,  256,    0,    0,    0,  249,    0,
  252,    0,    0,    0,    0,    0,  164,  165,    0,    0,
    0,    0,    0,  322,    0,    0,    0,   58,    0,   49,
   50,   51,   52,   53,   54,   56,    0,    0,    0,    0,
    0,   35,    0,  272,    0,    0,    0,    0,    0,  177,
    0,  178,    0,    0,  225,    0,    0,   99,    0,    0,
    0,   95,  262,  263,  264,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  315,    0,    0,    0,    0,   37,    0,    0,    0,    0,
    0,  241,    0,    0,    0,    0,    0,    0,  209,  260,
    0,  200,    0,   81,    0,    0,    0,    0,   81,   92,
    0,    0,  254,  253,  248,    0,    0,    0,    0,    0,
    0,  167,  169,  112,  213,    0,    0,    0,   43,   46,
   47,   45,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,  103,    0,    0,    0,  195,    0,
    0,    0,  316,  314,    0,    0,    0,    0,    0,    0,
  242,    0,    0,   98,    0,    0,    0,    0,    0,  172,
    0,    0,    0,   81,   90,    0,    0,    0,    0,    0,
    0,   82,   79,   80,  250,    0,    0,    0,    0,    0,
    0,   36,    0,   38,    0,    0,    0,    0,    0,  197,
    0,  102,    0,    0,    0,    0,    0,    0,  194,  238,
  239,  240,    0,    0,  231,    0,  101,    0,    0,  214,
    0,    0,    0,    0,  228,   96,    0,    0,   81,   91,
    0,   83,   85,    0,    0,    0,    0,    0,    0,   39,
    0,    0,    0,    0,    0,  211,    0,    0,  205,    0,
    0,    0,    0,    0,  107,  100,  202,    0,    0,    0,
    0,    0,   88,    0,    0,  318,  319,  320,  321,  215,
    0,    0,  185,    0,    0,    0,    0,    0,    0,  206,
    0,    0,    0,    0,    0,    0,  210,   89,   86,    0,
    0,    0,    0,    0,  185,    0,    0,  216,  217,  232,
  109,    0,  185,    0,   87,   40,    0,    0,  186,  187,
  188,    0,    0,    0,    0,  108,    0,    0,  120,  189,
    0,    0,  212,  196,  119,    0,    0,  198,
};
static int yydgoto[] = {                                      48,
   49,  135,   51,  119,   52,  337,   53,   54,   55,   56,
  532,  462,   57,   58,   59,   60,   61,  318,  381,   62,
   63,  319,   64,   65,   66,  213,   68,   69,   70,   71,
   72,  338,  339,  340,  341,   73,   74,   75,  369,   76,
   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   92,  293,   93,  456,  457,
  523,   94,   95,  643,   96,  510,  563,  239,  215,   97,
   98,   99,  100,  101,  448,  595,  445,  519,  627,  603,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0, -233,    0,  199,    0,    0,    0,
    0,   54,    0,    0, 2449,    0,   22,    0,   92,  109,
  130,  150,  844, 3071, 2771, 2771, 2771, 2771, 2771, 2810,
 2771,  108, 2771, 2336,    0,    0,    0,   57,  589,    0,
 1077,  203,  207,  260, 2301,  844,    0,    0,    0,  -45,
  -14,    0,    0,    0,    0,    0,    0, 2449,  678,  234,
    0,   11,    0,   42,  246,    0, 2215,  262,    0,    0,
    0, -171,    0, 5915,    0,    0,    0,    0,    0,  264,
    0,  -34,    0,    0,  356,    0,    0,  -20,    0,    0,
  -32,    0,    0, 2449,  243,  236,    0,    0,    0,    0,
    0,    0, 2449, 2449, 2449, 1844,    0,  287,  304,  312,
  128,    0,  311, 2449,    0,    0,  345,  152,  308,    0,
    0,    0, 2098,    0,    0,    0,    0,  243,  243,  243,
  243, 5564, 2771, 2771,  175,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  392,  361,    0,    0,  426,    0,    0,
   39,   39,   39,    0,   39,   39,  427, 5950,    0,  385,
    0,  237,    0,    0,    0,    0,    0,  247,  261,  266,
 -211,  273,  268,  292,    0,  305,    0, 2771, 2771, 2771,
  233,    0, 1793, 5915,   -6,  516,  896, 3506,    0,    0,
 2449,    0, 2449,  489,  113, 2771,    0,    0,    0,    0,
    0,  348,    0,    0,  556,  561,  563,    0,    0,    0,
  585,    0,   77,    0,    0,    0,    0,    0,  779, 2771,
 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771,
 2771, 2771, 2771, 2771, 2771, 2771,    0,    0, 2771, 2771,
 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771, 2771,
 2771, 2398, 2771, 2771,    0, 2771, 2301,    0,    0,    0,
    0,  379,  -13,    0,    0,    0,    0,    0,  312, 3533,
  -18,    0, 2449,    0,  388,    0,    0,    0,    0,    0,
  243,    0,  390,  503, 2449,  591,    0,    0,  179,    0,
 2449,    0,    0,  414,    0,  558,  516,  896,    0,  656,
 2449,  250,    0, 1253,    0,  442,  447,   -4,    0,  650,
    0,  663,  668,  672,  681, 7175,    0,    0,  659,  684,
  747,  748, 2771,    0, 2771,  777, 2449,    0,  554,    0,
    0,    0,    0,    0,    0,    0, 5985, 7175,  780, 6262,
  803,    0, 2771,    0,  587, 2617,  805,    0,    0,    0,
  788,    0,   99,   99,    0,   99, 2603,    0, 7175,  656,
  656,    0,    0,    0,    0,  594,    0,  896, 3964,  601,
    0,    0,    0,    0,    0,    0,    0,    0,  500,  500,
    0,    0, 1130,    0,    0,    0,    0,   39,    0,    0,
    0,  871,  871,  500,  500,  500,    0,  155,  155, 1130,
    0,  546, 6035,   39, 6312,    0,  838,  606,    0,  821,
  129,    0,  656,  475,  840,  848,    0,  850,    0,    0,
    0,    0,  854,    0,  805,  847,  856,   33,    0,    0,
 2449,  -12,    0,    0,    0, 2098, 2771,  860,  861,  862,
  867,    0,    0,    0,    0,    0,    0,  869,    0,    0,
    0,    0,    0, 2301, 2771, 2301, 2771, 7175,  872,  875,
  587, 2617, -106,    0,    0, 6347,  847,  847,    0,    0,
    0,  821,    0,    0, 2771, 2771,  880, 1877,  521,   -1,
    0,  847, 2665,    0,    0,  881, 2617,    0,  891,    0,
   82,  908,  707,    0,    0,   84,  190,  899,    0,  541,
  906,    0,    0,    0,    0, 9067, 2771, 2771, 2771, 2771,
  907,    0,  910,    0, 6382,  128,    0,  929,  932,    0,
  717,    0,  243,  243,  723,    0, 6417, 2771,    0,    0,
    0,    0, 2449,  521,    0,  -83,    0, 6452,  620,    0,
  947,  624,  951,  741,    0,    0,  156,  940,    0,    0,
 2771,    0,    0, 6729, 6756, 6794, 6821,  742, 2771,    0,
  960,  641,  128,    0,  966,    0, 2449, 2449,    0, 6859,
   99, 2449,    0, 2700,    0,    0,    0,    0,  949,   22,
  950,  954,    0,  219, 7175,    0,    0,    0,    0,    0,
  969,  974,    0,  977,  669,    0,  975,  101,  101,    0,
   99, 1961,  243, 6886,  694,   85,    0,    0,    0,  963,
 2301,    0,   26,  983,    0,  703,  984,    0,    0,    0,
    0,  243,    0,    0,    0,    0,  709,  766,    0,    0,
    0,    0,   26,  949,   22,    0,   26, 2047,    0,    0,
  720,   89,    0,    0,    0,    0, 2131,    0,
};
static int yyrindex[] = {                                     49,
 5089,    0,    0,    0,  834, 4026,  915,    0,    0,    0,
    0,    0,    0,    0,    0, 4084,    0,    0,    0,    0,
    0,    0, 4514, 5306,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4553,  571,    0,  843, 6952,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1030,  667,    0,    0,
    0,    0,    0,    0,    0,  921,    0,    0,    0,    0,
    0,    0,    0,    0,  172,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5306, 2281,    0,    0,    0,    0,
    0,  462,    0,    0,    0,    0,  -23,  122,    0, 5505,
  915,  843,    0,    0,    0, 3131,  916,    0,    0, 3199,
 3267, 3557,    0, 3625, 3693,  571,    0, 5306, 5306, 5306,
 5306,    0,    0,    0, 4142,  794,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4419, 4477,    0, 1175, 2748,
  133,  224,  823, 5879, 2706, 4611,    0,    0, 3142,    0,
 3568,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  972,    0,
    0, 3685,    0,    7,    0, 1285, 5306,    0,    0,  834,
    0,    0,    0,    0,  662,    0, 2562,    0,    0, 2562,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1186,  843,    0,    0,    0,  989,    0,    0, 2281,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  575,    0,
    0, 9509,    0, 3899,    0,    0,    0,    0,    0,    0,
 5306,   98,    0,   12,  731,  818,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 5306,    0,  -25,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
    0,    0,    0,    0,    0,   -7,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1012,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,    0,    0,    0, 1000,    0, 1285, 5843, 3983,    0,
    0,    0,  845,  914,    0,  935,    0,    0,  316,   45,
   45,    0,    0,    0,    0,    0, 1285, 5306,    0,    0,
 3786, 4097, 4959, 5017, 5029, 5097, 5103, 5147, 1421, 4928,
 5177, 5198, 5204, 5206, 5225, 5234, 5305, 4843, 5312, 5373,
 5392,  469, 2224, 4954, 4987, 4996, 5394,   19, 4901, 5400,
    0,    0,    0, 4868,    0,    0,    0,    0,  571,  376,
    0,    0, 2734,  662,    0,    0, 1285,    0,    0,    0,
  353,    0,    0,    0,    0,  786, 4829,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5421, 5430,    0,    0,    0,
    0,    0,    0,    0,  972,    0,    0,   40,    0,    0,
 1000,    0,    0,    0,    0,    0, 4427, 4427,    0, 1285,
  -55,  253,    0,    0,    0,    0,    0,    0, 5355,    0,
    0, 5276,    0,    0,  -23,    0,    0,  -23,    0,    0,
    0, 5495,    0,    0,    0,    0,    0,  382,    9,    0,
    0,    0,    0,    0,    0, 1009,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1017,  -23,    0,    0,    0,
    0,    0, 5306, 5306,    0, 5468,    0,    0,    0,    0,
    0,    0,    0, 5355,    0, 2249,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1018,    0,
    0,    0, 1017,  -23,    0,    0,    0,    0,    0,    0,
  259,    0,  571,    0,    0,    0,    0,  -23,  172,    0,
    0,    0,    0,    0,  416,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -23,    0,  158,  158,    0,
  293,    0, 2249,    0,    0,    0,    0,    0,    0,    0,
    0,  -23,   16,    0,    0,    0,    0,    0,    0,    0,
    0, 2249,    0,  571,    0,    0,    0,    0,    0,    0,
    0,  -23,   76,  172,    0,    0,   83,    0,    0,    0,
    0,    0,    0,    0,    0,  571,    0,    0,
};
static int yycindex[] = {                                   1103,
  754,    0,    0,    0, 5449, 5462,    0, 5826, 5845, 6548,
    0,    0,    0,    0,    0, 6694,    0,    0,    0,    0,
    0,    0,  405,    0,    0,    0,    0,    0,    0,    0,
    0, 6708,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2947,  463, 1271,    0, 5476,  547,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5524,    0,    0,    0,
    0, 3015,    0,    0,    0,  727,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 7022,    0,    0,  804,    0,    0,    0,    0,
    0,  216,    0,    0,    0,    0,  767,  244,    0,  807,
    0, 9840,    0,    0,    0,  188,    0,    0,    0,  215,
  220,  278,    0,  347,  419, 1358,    0,    0,    0,    0,
    0,    0,    0,    0, 1002, 7230,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  976,  978,    0, 7265, 7300,
 2843, 4198, 7145, 1028, 8565, 8908,    0,    0, 7335,    0,
 7370,    0,    0,    0,    0,    0, 7439,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 7455, 6265,    0,    0,  816,    0,    0,    0, 9892,
    0,    0,    0,    0,    0,    0,  276,    0,    0,  307,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  201, 9905,    0,    0,    0,   44,    0,  817,  819,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9345,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  290,    0,
    0,  335,    0,  -28,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  329,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  820,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  509,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  822,  802,  420,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  824,    0,    0,    0,
 7647, 7682, 7732, 7767, 7802, 7837, 7872, 8149, 8941, 8976,
 8176, 8214, 9012, 8241, 8279, 8306, 8372, 9090, 8595, 8650,
 8685, 9130, 9163, 9196, 9232, 9281, 8720, 9344, 9384, 9417,
    0,    0,    0, 9452,    0,    0,    0,    0, 1445,    0,
    0,    0,    0,    0,    0,    0,  825,    0,    0,    0,
 3373,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 8755, 8790,    0,    0,    0,
    0,    0,    0, 9527,    0, 9545,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  829,
  826,    0,    0,    0,    0,    0,    0, 9608,    0,    0,
    0,    0,    0,    0, 3441,    0,    0, 3836,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  461,    0,
    0,    0,    0,    0,    0, 1031,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4363,    0,    0,    0,
    0,    0,    0,    0,    0, 8875,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9621,    0,    0,    0,    0,    0,    0,
    0,    0, 1532,    0,    0,    0,    0, 9738,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 9801,    0,    0,    0,    0,
    0, 9634,    0,    0,    0,    0,    0,    0,    0,    0,
 9697, 9814,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1619,    0,    0,    0,    0,    0,    0,
    0, 9827,    0,    0,    0,    0,    0, 9710,    0,    0,
    0,    0,    0,    0,    0, 1706, 9724,    0,
};
static int yygindex[] = {                                      0,
   24,    1,  -88, -107, -324,    0,  -31,    0,    0,    0,
  576, -343, 1053,  123,   14,  -74,    0,  661,    0,    0,
    0, 1548,    0,    0,    0,    3, 1035,    0,    0,  -17,
    0,    0,  647,    0,    0, -372,  550,    0, -466,    0,
    0,    0,    0,   18,    0, 1042,    0,    0, 1043,    0,
 1044,    0,    0,    0,    0,    0, -565,   37, -204, 1068,
 -301,   62,    0, -161,  -27,    0,  557,    0,  841,    0,
    0,    0,  168,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 10229
static int yytable[] = {                                     127,
   50,  108,   67,  326,   61,  302,  116,  604,  120,  121,
  122, 1729,  222,  211,  109,  124,  125,  170,  543,  551,
  170,  217,  113,  223,  289,  330,  297,  222,  112,  111,
  438,  529,  317,  266,  336,  238,  266,  373,  294,  466,
  442,  220,  564,  636,  249,   50,  361,   50,    2,   61,
  266,  490,   84,   61,  230,  287,  287,  465,  225,  287,
  287,  287,  287,  287,  290,  287,  114,   50,  362,  231,
  295,   61,  243,  298,  124,  197,  287,  287,  282,  287,
  267,  251,  222,  267,  328,  232,  658, 1722,  126,  533,
  126,  525,  220,  301,  108,  242,   11,   12,  672,  251,
  233, 1726,  126,  120,  121,  122,  124,  108,  248,  439,
  521,  287,  531,  123,  108,  526,  300,  266,  374,  311,
  316,  565,  621,  108,  320,  529,   50,  529,  438,  283,
  112,  266,  438,   84,  123,   61,  220,  195,  124,   61,
   31,  122,  287,  287,  126,   29,  178,   32,  533,   28,
  550,  128,   27,  533,  187,  524,  533,   61,  220,   74,
  220,   74,   74,   74,  267,   74, 1722,  549,  129,  273,
  273,  216,  220,  273,  273,  273,  273,  273,  273,  273,
  577,  238,  192,   74,   42,  497,  498,  511,  220,  130,
  273,  273,  571,  273,  282,  553,  554,  301,  123,  529,
  284,  190,   42,  387,  533,  122,  574,  654,  578,  131,
  566,  676,   74,   50,  398,  204,  190,  303,  379,  452,
  357,  383,  451,  384,  386,  273,   61,  218,  618,  315,
  134,  222,   35,  133,  327,  614,  219,  382,  512,  376,
   40,  533,  208,  112,  528,  283,  209,  627,  580,  220,
  342,  343,  344,  345,  321,  436,  273,  273,   13,   14,
  276,  276,  529,  219,  276,  276,  276,  276,  276,  276,
  276,  400,  311,  259,  636,  287,  259,  259,  259,  645,
  612,  276,  276,  296,  276,  259,  388,   50,  390,  287,
  287,  391,  229,  221,  204,  258,  234,  258,  258,  210,
  441,  222,  235,  444,  234,  321,  222,  461,  460,  222,
  222,  222,  579,  530,  219,  225,  276,  222,  222,   61,
  240,  379,  288,    2,    2,    2,  222,  259,  259,  259,
  259,  458,  259,  259,  120,  259,  236,  654,  528,  377,
  528,  659,  380,  640,  287,  660,  220,  276,  276,  399,
  661,  324,   13,   14,   13,   14,   97,  441,  219,   97,
  222,  305,  322,  443,  397,    2,    3,    4,  222,  329,
   61,  321,  459,  321,   97,  234,  317,  336,   74,   61,
  219,  235,  219,   74,  325,  321,   74,   74,   74,  273,
   19,   20,   21,   22,  219,   74,   23,  132,  489,  379,
  492,  321,  331,  273,  273,   61,  663,  530,  332,  530,
  219,   74,  528,  292,  291,  236,   35,   25,   26,  234,
  376,   33,   34,   35,   40,   77,   13,   14,   35,   74,
  333,   40,  347,  447,   61,   61,   40,   74,  591,   50,
  317,  508,  377,  317,  380,   74,  374,  321,   46,  371,
  455,  108,  542,  348,  544,  117,  219,  618,  273,   78,
  621,  527,  321,  118,  316,  351,  108,  353,  320,  624,
  517,  219,  317, 1716,  112,  528,  238,  355,  672, 1756,
  276,  530, 1719,  663,   50,  624,   50,  630,  570,   13,
   14,  667,  639,  356,  276,  276,  633,  570,  234,   61,
  488,  642,  491,   61,  485,  514,   77,  482,   50,  282,
  358,  282,  282,  282,  548,  108,  612,  359,  108,  317,
  500,   61,  360,  492,  364,  615,  282,  282,  316,  282,
  385,  316,  320,  317,  220,  320,  363,  279,  112,  282,
   78,  112,  324,  450,  530,  284,  618,  108,  365,  276,
  648,  317,  306,  307,  308,  375,  309,  310,   35,  651,
  316,  282, 1719,  601,  320,  513,   40,  317,  366,  371,
  112, 1719,  136,  315,  179,  180,  181,  182,  183,  185,
  186,  188,  189,  191,  505,  618,  503,  317,  505,  373,
  283, 1710,  637,  282,  108,  212,  214,  628,  629, 1713,
  238, 1719,  631,   50,  392,  632,  503,  316,  108,  656,
 1719,  320,   61,  393,  597,  598,   61,  112,  394,  657,
  395,  316, 1710,  280,  107,  320,  108,  605,  660,  534,
 1713,  112,   50,   61,   61,  437,  238,  315,   77,  316,
  315,   50,  108,  320,  446,  238,  449,  673,   61,  112,
 1710,  226,   77,   77,   50,  316,  668,   61, 1713,  320,
  607,  362,  108,  451,  609,  112,  230,  451,   50,  315,
  453,  258,   78,  258,  258,  316,   50,   50,  677,  320,
  454,  623,  185,  346,  451,  112,   78,   78,  534,  648,
  649,  666, 1750,  534,  651,    2,  534,  222,  463,  230,
  669, 1753,  190,  464,  230,  190,  230,   77,  230,  645,
  467,  230,  451,  666,  365,  368,  315, 4901,  261,  473,
  190,  227,  190,  261,  468,  282,  261,  261,  261,  469,
  315, 4904, 4907,  470,  653,  261,  228,  451,  226,  282,
  282,   78,  471,  664,  534,  115,  451,  321,  315,  669,
    6,  472,  451,  103,  104,  105,  219,  367,  368,  370,
  675,   15,   16,  451,  315, 1735, 1738, 1741, 1744,   61,
   18,  175,  476,  479,  175,  389,  473,  261,  261,  261,
  261,  534,  261,  261,  315,  261, 4910,  474,  475,  230,
   35,  230,  230,  214,  282,  560,  561,  562,   40,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  416,  417,  478,  483,  418,  419,
  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
  430,  346,  433,  434,  328,  435,  259,  328,  485,  259,
  259,  259,  487,  110,  491,    2,    2,    2,  259,  494,
  499,  328,  328,  193,  194,  195,   11,  502,  174,  277,
  277,  174,  507,  277,  277,  277,  277,  277,  277,  277,
  202,  203,  204,  205,  206,  207,   31,  506,  509,  515,
  277,  277,   61,  277,  522,  106,  328,  516,  106,  518,
  259,  259,  259,  259,  450,  259,  259,  385,  259,  537,
  538,  539,  476,  106,  477,  106,  540,  277,  279,  541,
  282,   39,  275,  546,  547,  277,  284,  276,  328,  558,
   15,  570,  488,  230,  230,  230,  230,  230,  230,  230,
  573,  230,  230,  230,  230,  230,  496,  230,  230,  230,
  230,  230,  230,  230,  230,  575,  277,  277,  230,  230,
  230,  230,  230,   15,  105,  230,  230,  105,   15,  581,
   15,  283,   15,  576,  583,   15,  134,  588,  589,  133,
  593,  594,  105,  596,  105,  104,  230,  230,  104,  550,
  230,  230,  230,  230,  230,  230,  608,  230,  230,  230,
  230,  610,  230,  104,  280,  104,  230,  611,  613,  230,
  622,  620,  230,  230,  230,  626,  292,  230,  638,  641,
  180,   44,  639,  642,  647,  184,  536,  644,  188,  192,
  196,  655,  662,  574,  665,  670,  200,  205,  578,    1,
   41,  582,  586,  590,  368,  209,  545,   75,   76,  594,
  598,  258,  226,   15,   44,   15,   15,  203,  602,   44,
  328,   44,  255,   44,  556,  557,   44,   75,   41,  541,
  568,  503,  568,  618,  328,  328,  783, 1230,  786,  217,
  220,  223, 1707, 1707, 1747,  568, 1732,  226, 1707,  277,
 1707, 1707,  236,  606,  609, 1707,  584,  585,  586,  587,
  239,  196, 4913,  277,  277,  306,  307,  308, 4898,  309,
  310,    2,    3,    4,  582,    6,  244,  600,  103,  104,
  105,  520,  535,  245,  246,  247,   15,   16,  224,  328,
  602,    0,  432,    0,    0,   18,   19,   20,   21,   22,
  615,    0,   23,  132,   44,  115,   44,   44,  368,    0,
  108,    0,  118,    0,  105,    0,    0,  102,  277,    0,
  258,  258,  258,  634,  258,  258,    0,   33,   34,  179,
  179,  179,    0,  179,  179,    0,  277,  279,    0,  282,
    0,  275,  273,    0,  274,  284,  276,   15,   15,   15,
   15,   15,   15,   15,   46,   15,   15,   15,   15,   15,
  281,   15,   15,   15,   15,   15,   15,   15,   15,    0,
    0,    0,   15,   15,   15,   15,   15,    0,    0,   15,
   15,   35,  306,  307,  308,  278,  309,  310,  278,   40,
  283,    0,    0,    0,    0,  177,    0,    0,  111,    0,
   15,   15,  278,  278,   15,   15,   15,   15,   15,   15,
    0,   15,   15,   15,   15,   61,   15,    0,    0,    0,
   15,    0,    0,  280,    0,    0,   15,   15,   15,    0,
    0,   15,    0,    0,    0,    0,    0,  278,    0,    0,
    0,    0,   44,   44,   44,    0,   44,   44,   44,   44,
   44,    0,   44,   44,   44,   44,   44,   44,   44,   44,
    0,    0,    0,   44,   44,   44,   44,   44,    0,  278,
   44,   44,    0,  115,    0,    0,    0,    0,  108,    0,
  118,    0,  105,    0,    0,  102,    0,    0,    0,    0,
    0,   44,   44,    0,    0,   44,   44,   44,   44,   44,
   44,    0,   44,   44,   44,   44,    0,   44,    0,    0,
    0,   44,    0,    0,   44,    0,    0,   44,   44,   44,
    0,    0,   44,    0,    0,    0,    0,  198,    0,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,    0,
  115,   90,   93,  177,    0,  108,  111,  118,    0,  105,
    0,    0,  102,  199,  200,  201,  202,  203,  204,  205,
  206,  207,   96,   99,    0,    0,  121,  124,  127,  132,
  137,  142,    0,  146,  146,  151,  154,    0,  159,    0,
    0,  278,  162,    0,    0,    0,    0,    0,  165,  168,
  171,    0,    0,  174,    0,  278,  278,  259,    0,    0,
  259,  259,  259,    0,    0,    0,    0,  302,    0,  259,
    0,  302,  302,  302,  302,  302,    0,  302,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,  302,  302,
  177,  302,  108,  111,  118,    0,  105,    0,    0,  102,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  278,  259,  259,  259,  259,    0,  259,  259,    0,  259,
    0,    0,    0,  302,    6,    0,    0,  103,  104,  105,
    0,    0,    0,    0,    0,   15,   16,    0,    6,    9,
   12,   15,   18,   24,   18,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,  302,  258,    0,   69,  258,
  258,  258,   72,   78,   81,   84,   87,  258,  258,   90,
   93,    0,    0,    0,  115,    0,  258,  177,    0,  108,
  111,  118,    0,  105,  258,    0,  102,    0,    0,    0,
   96,   99,    0,    0,  121,  124,  127,  132,  137,  142,
    0,  146,  146,  151,  154,    0,  159,    0,    0,    0,
  162,    0,    0,    0,    0,    0,  165,  168,  171,    0,
    0,  174,    0,    0,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    0,    0,   69,    0,    0,    0,   72,
   78,   81,   84,   87,    0,    0,   90,   93,    0,    0,
    0,  115,    0,    0,  177,    0,  108,  111,  118,    0,
  105,    0,    0,  102,    0,    0,    0,   96,   99,    0,
    0,  121,  124,  127,  132,  137,  142,  302,  146,  146,
  151,  154,    0,  159,    0,    0,    0,  162,    0,    0,
    0,  302,  302,  165,  168,  171,    0,    0,  174,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,    0,    0,   90,   93,    0,    0,    0,  115,    0,
    0,  177,    0,  108,  111,  118,  302,  105,    0,    0,
  102,    0,    0,    0,   96,   99,    0,    0,  121,  124,
  127,  132,  137,  142,    0,  146,  146,  151,  154,    0,
  159,    0,    0,    0,  162,    0,    0,    0,    0,    0,
  165,  168,  171,    0,    0,  174,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,    0,    0,
   90,   93,    0,    0,    0,   31,    0,    0,  177,    0,
   29,  111,   32,    0,   28,    0,    0,   27,    0,    0,
    0,   96,   99,    0,    0,  121,  124,  127,  132,  137,
  142,    0,  146,  146,  151,  154,    0,  159,    0,    0,
    0,  162,    0,    0,    0,    0,    0,  165,  168,  171,
    0,    0,  174,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,    0,    0,   90,   93,   31,
    0,    0,    0,    0,   29,   47,   32,  372,   28,    0,
    0,   27,    0,    0,    0,    0,    0,    0,   96,   99,
    0,    0,  121,  124,  127,  132,  137,  142,    0,  146,
  146,  151,  154,    0,  159,    0,    0,    0,  162,    0,
    0,    0,    0,    0,  165,  168,  171,    0,    0,  174,
    0,    0,    0,    6,    9,   12,   15,   18,   24,  313,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,    0,   31,   90,   93,    0,    0,   29,   47,
   32,  559,   28,    0,    0,   27,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   96,   99,    0,    0,  121,
  124,  127,  132,  137,  142,    0,  146,  146,  151,  154,
    0,  159,    0,    0,    0,  162,    0,    0,    0,    0,
    0,  165,  168,  171,    0,    0,  174,    0,    0,    0,
    2,    3,    4,    5,    0,    7,    0,    0,    0,    0,
   11,   12,  569,   13,   14,  572,    0,  235,  236,  237,
   17,    0,    0,    0,    0,   19,   20,   21,   22,   31,
    0,   23,   24,   47,   29,  650,   32,    0,   28,    0,
    0,   27,    0,    0,  592,    0,    0,    0,    0,    0,
  312,    0,   25,   26,    0,    6,   33,   34,  103,  104,
  105,    0,    0,    0,    0,   39,   15,   16,   41,    0,
    0,    0,   42,    0,    0,   18,    0,    0,   43,   44,
   45,    0,    0,   46,    2,    3,    4,    5,    0,    7,
    0,  625,    0,    0,   11,   12,    0,   13,   14,    0,
    0,  235,  236,  237,   17,  635,    0,    0,    0,   19,
   20,   21,   22,   31,    0,   23,   24,    0,   29,   47,
   32,  674,   28,  646,    0,   27,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   25,   26,    0,  657,
   33,   34,    0,    0,    0,    0,    0,    0,    0,   39,
    0,    0,   41,    0,    0,    0,   42,    0,    0,  671,
    0,    0,   43,   44,   45,    0,    0,   46,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
    0,   13,   14,    0,    0,  235,  236,  237,   17,    0,
    0,    0,    0,   19,   20,   21,   22,   31,    0,   23,
   24,    0,   29,   47,   32,  678,   28,    0,    0,   27,
    0,    0,    0,    0,  283,    0,  283,  283,  283,    0,
   25,   26,    0,    0,   33,   34,    0,    0,    0,    0,
    0,  283,  283,   39,  283,    0,   41,    0,  190,  190,
   42,    0,  190,    0,    0,    0,   43,   44,   45,    0,
    0,   46,    0,    0,    2,    3,    4,    5,    0,    7,
  190,    0,    0,    0,   11,   12,  283,   13,   14,    0,
    0,  235,  236,  237,   17,    0,    0,    0,    0,   19,
   20,   21,   22,   31,    0,   23,   24,   47,   29,    0,
   32,    0,   28,    0,    0,   27,    0,    0,  283,    0,
    0,    0,    0,    0,  115,    0,   25,   26,    0,    6,
   33,   34,  334,  104,  105,    0,    0,  335,   31,   39,
   15,   16,   41,   29,    0,   32,   42,   28,    0,   18,
   27,    0,   43,   44,   45,    0,    0,   46,    2,    3,
    4,    5,    0,    7,    0,    0,    0,    0,   11,   12,
    0,   13,   14,    0,    0,  235,  236,  237,   17,    0,
    0,    0,    0,   19,   20,   21,   22,    0,    0,   23,
   24,    0,    0,   47,    0,    0,  190,    0,    0,    0,
   31,    0,    0,    0,    0,   29,    0,   32,  431,   28,
   25,   26,   27,    0,   33,   34,    0,    0,    0,    0,
    0,    0,    0,   39,    0,    0,   41,    0,  134,    0,
   42,  133,    0,    0,    0,    0,   43,   44,   45,    0,
    0,   46,    2,    3,    4,    5,    0,    7,    0,    0,
  283,    0,   11,   12,    0,   13,   14,    0,    0,  235,
  236,  237,   17,    0,  283,  283,    0,   19,   20,   21,
   22,    0,    0,   23,   24,  190,    0,    0,    0,    0,
  190,    0,    0,  190,  190,  190,    0,    0,    0,    0,
  134,  190,  190,  133,   25,   26,    0,    0,   33,   34,
  190,    0,    0,    0,    0,    0,    0,   39,  190,    0,
   41,    0,  258,    0,   42,  258,  258,  258,    0,  283,
   43,   44,   45,  258,  258,   46,    0,    0,    2,    3,
    4,    5,  258,    7,    0,    0,    0,    0,   11,   12,
    0,   13,   14,    0,    0,    0,    0,    0,   17,    0,
    0,    0,    0,   19,   20,   21,   22,    0,    0,   23,
   24,    0,  115,    2,    3,    4,  258,    6,    0,  190,
  103,  104,  105,  190,  258,    0,    0,    0,   15,   16,
   25,   26,    0,    0,   33,   34,    0,   18,   19,   20,
   21,   22,    0,   39,   23,  132,   41,    0,    0,    0,
   42,    0,    0,    0,    0,   31,   43,   44,   45,    0,
   29,   46,   32,    0,   28,   25,   26,   27,    0,   33,
   34,    0,    0,    0,  115,    2,    3,    4,    0,    6,
    0,    0,  103,  104,  105,    0,    0,    0,    0,    0,
   15,   16,    0,    0,    0,    0,   46,    0,    0,   18,
   19,   20,   21,   22,    0,    0,   23,  132,    0,    0,
    0,    0,    0,    0,    0,  495,    0,   31,    0,    0,
    0,    0,   29,    0,   32,  115,   28,   25,   26,   27,
    6,   33,   34,  103,  104,  105,    0,    0,    0,    0,
    0,   15,   16,    0,    0,  134,    0,    0,  133,    0,
   18,    0,   31,    0,    0,    0,    0,   29,   46,   32,
    0,   28,  274,  274,   27,    0,  274,  274,  274,  274,
  274,  274,  274,    0,    0,    0,    0,  567,    0,    0,
    0,    0,    0,  274,  274,    0,  274,    0,    0,    0,
    0,  222,    0,  222,  222,    0,    0,  222,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  134,  280,    0,
  133,  280,  633,    0,    0,  222,    0,    0,  274,    0,
    0,    0,    0,   31,    0,  280,  280,    0,   29,    0,
   32,    0,   28,    0,    0,   27,    0,    0,  190,    0,
    0,    0,  134,  190,  222,  133,  190,  190,  190,  274,
  274,    0,    0,    0,  190,  190,    0,    0,    0,    0,
  280,    0,   31,  190,    0,    0,    0,   29,    0,   32,
    0,   28,    0,    0,   27,    0,    0,    0,    0,  115,
    2,    3,    4,    0,    6,    0,    0,  103,  104,  105,
    0,    0,  280,  115,    0,   15,   16,    0,    6,    0,
    0,  103,  104,  105,   18,   19,   20,   21,   22,   15,
   16,   23,  132,  134,    0,    0,  133,    0,   18,    0,
    0,    0, 1068,    0, 1071, 1077,  132,    0,    0,    0,
    0,    0,   25,   26,    0,    0,   33,   34,    0,    0,
    0,  115,    2,    3,    4,    0,    6,    0,    0,  103,
  104,  105,  134,    0,    0,  133, 1074,   15,   16,    0,
    0,    0,    0,   46,    0,    0,   18,   19,   20,   21,
   22,    0,    0,   23,  132,    0,  115,    2,    3,    4,
    0,    6,  274,    0,  103,  104,  105,    0,    0,    0,
    0,    0,   15,   16,   25,   26,  274,  274,   33,   34,
    0,   18,   19,   20,   21,   22,    0,    0,   23,  132,
  222,    0,    0,    0,    0,  222,    0,    0,  222,  222,
  222,    0,    0,    0,  280,   46,  222,  222,    0,   25,
   26,    0,    0,   33,   34,  222,    0,    0,  280,  280,
    0,    0,    0,  222,    0,    0,    0,  115,    2,    3,
    4,  274,    6,    0,    0,  103,  104,  105,    0,    0,
   46,    0,    0,   15,   16,    0,    0,    0,    0,  222,
    0,    0,   18,   19,   20,   21,   22,  222,    0,   23,
  132,    0,    0,    0,    0,    0,  184,    2,    3,    4,
    0,    6,  447,  280,  103,  104,  105,    0,    0,    0,
   25,   26,   15,   16,   33,   34,    0,    0,    0,    0,
    0,   18,   19,   20,   21,   22,    0,    0,   23,  132,
    0,    0,    0,  171,    0,    0,    0,  166,  168,    0,
  174,   46,  164,  162,  173,  163,    0,  165,    0,   25,
   26,    0,    0,   33,   34,    0,    0,    0,    0,    0,
  160,  172,  161, 1005, 1008, 1011, 1014, 1017, 1020, 1023,
 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053,
   46,    0, 1056, 1059, 1062, 1065,    0,    0,    0,    0,
    0,  175,    0,    0,  167,    0,    0,   65,   65,    0,
   65,   65,   65,   65,   65,   65,   65,   65,    0,    0,
    0,    0,  323,    0,    0,  323,    0,    0,   65,   65,
    0,   65,   65,   65,  169,    0,  170,    0,    0,  323,
  323,    0,    0,  407,    0,    0,    0,    0,  412,    0,
    0,  417,  422,  427,    0,    0,    0,    0,    0,  432,
  437,   65,    0,   65,   65,    0,    0,    0,  442,    0,
    0,    0,    0,    0,  323,   68,   68,    0,   68,   68,
   68,   68,   68,   68,   68,   68,    0,    0,    0,    0,
    0,    0,    0,   65,   65,   65,   68,   68,    0,   68,
   68,   68,  450,  454,  458,  462,  323,  465,  465,    0,
  469,  509,    0,    0,    0,    0,  513,    0,    0,  517,
  521,  525,    0,    0,    0,    0,    0,  529,  533,   68,
    0,   68,   68,    0,    0,    0,  537,    0,    0,    0,
    0,    0,    0,   69,   69,    0,   69,   69,   69,   69,
   69,   69,   69,   69,    0,    0,    0,    0,    0,    0,
    0,   68,   68,   68,   69,   69,    0,   69,   69,   69,
  465,  465,  465,  465,    0,  465,  465,    0,  465,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   69,    0,   69,
   69,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
  156,  157,  158,  159,  176,  177,   35,   65,    0,   69,
   69,   69,   65,    0,   40,   65,   65,   65,  323,    0,
    0,   65,   65,    0,   65,    0,    0,    0,    0,    0,
    0,    0,  323,  323,    0,    0,    0,    0,    0,    0,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,    0,
   65,   65,   65,   65,    0,    0,   65,    0,    0,    0,
    0,    0,    0,    0,   65,   68,   65,    0,    0,    0,
   68,    0,    0,   68,   68,   68,    0,  323,    0,   68,
   68,    0,   68,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,    0,   68,   68,
   68,   68,    0,    0,   68,    0,    0,    0,    0,    0,
    0,    0,   68,   69,   68,    0,    0,    0,   69,    0,
    0,   69,   69,   69,    0,    0,    0,   69,   69,    0,
   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,    0,   69,   69,   69,   69,
    0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
   69,    0,   69,   70,   70,    0,   70,   70,   70,   70,
   70,   70,   70,   70,    0,    0,    0,    0,  324,    0,
    0,  324,    0,    0,   70,   70,    0,   70,   70,   70,
    0,    0,    0,    0,    0,  324,  324,    0,    0, 4678,
    0,    0,    0,    0,  578,    0,    0,  582,  586,  590,
    0,    0,    0,    0,    0,  594,  598,   70,    0,   70,
   70,    0,    0,    0,  602,    0,    0,    0,    0,    0,
  324,   62,   62,    0,   62,   62,   62,   62,   62,   62,
   62,   62,    0,    0,    0,    0,    0,    0,    0,   70,
   70,   70,   62,   62,    0,   62,   62,   62,  236,  606,
  609,    0,  324,    0,    0,    0,  239, 4678,    0,    0,
    0,    0,  578,    0,    0,  582,  586,  590,    0,    0,
    0,    0,    0,  594,  598,   62,    0,   62,   62,    0,
    0,    0,  602,    0,    0,  326,    0,    0,  326,   67,
   67,    0,   67,   67,   67,   67,   67,   67,   67,   67,
    0,    0,  326,  326,    0,    0,    0,   62,   62,   62,
   67,   67,    0,   67,   67,   67,  236,  606,  609,    0,
    0,    0,  378,    0,  239,    0,    0,    6,    0,    0,
  103,  104,  105,    0,    0,    0,    0,  326,   15,   16,
    0,    0,    0,   67,    0,   67,   67,   18,    0,  440,
    0,    0,    0,    0,    6,    0,    0,  103,  104,  105,
    0,    0,    0,    0,    0,   15,   16,    0,    0,  326,
    0,    0,    0,   70,   18,   67,   67,   67,   70,    0,
    0,   70,   70,   70,  324,    0,  294,   70,   70,  294,
   70,    0,    0,    0,    0,    0,    0,    0,  324,  324,
    0,    0,    0,  294,  294,    0,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,    0,   70,   70,   70,   70,
    0,    0,   70,    0,    0,    0,    0,    0,  294,    0,
   70,   62,   70,    0,    0,    0,   62,    0,    0,   62,
   62,   62,    0,  324,    0,   62,   62,    0,   62,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  294,    0,    0,    0,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,    0,   62,   62,   62,   62,    0,    0,
   62,  326,    0,    0,    0,    0,    0,    0,   62,   67,
   62,    0,    0,    0,   67,  326,  326,   67,   67,   67,
    0,    0,    0,   67,   67,    0,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,    0,   67,   67,   67,   67,    0,    0,   67,    0,
  326,    0,    0,    0,    0,    0,   67,    0,   67,   63,
   63,    0,   63,   63,   63,   63,   63,   63,   63,   63,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   63,   63,  294,   63,   63,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  294,  294,    0,    0,
    0,    0,   64,   64,    0,   64,   64,   64,   64,   64,
   64,   64,   64,   63,    0,   63,   63,    0,    0,    0,
    0,    0,    0,   64,   64,   64,   64,   64,   64,    0,
    0,    0, 4678,    0,    0,    0,    0,  578,    0,    0,
  582,  586,  590,    0,    0,   63,   63,   63,  594,  598,
    0,  294,    0,    0,    0,    0,   64,  602,   64,   64,
   66,   66,    0,   66,   66,   66,   66,   66,   66,   66,
   66,    0,    0,    0,    0,    0,    0,  295,    0,    0,
  295,   66,   66,   66,   66,   66,   66,    0,   64,   64,
   64,  236,  606,  609,  295,  295,    0,    0,    0,  239,
  259,    0,    0,  259,  259,  259,    0,    0,    0,    0,
    0,  259,  259,    0,   66,    0,   66,   66,  126,  126,
  259,  126,  126,  126,  126,  126,  126,  126,  126,  295,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
  126,    0,  126,  126,  126,    0,   66,   66,   66,    0,
    0,    0,    0,    0,  259,    0,    0,    0,    0,    0,
  501,  295,  259,    0,    0,    6,    0,    0,  103,  104,
  105,    0,  126,    0,  126,  126,   15,   16,    0,   63,
    0,    0,    0,    0,   63,   18,    0,   63,   63,   63,
    0,    0,    0,   63,   63,    0,   63, 1143,    0, 1146,
 1152,    0,    0,    0,    0,  126,  126,    0,    0,    0,
    0,    0,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63, 1149,   63,   63,   63,   63,   64,   64,   63,    0,
    0,    0,    0,    0,    0,    0,   63,    0,   63,    0,
    0,    0,    0,    0,    0,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,    0,   64,   64,   64,   64,    0,
    0,   64,    0,    0,    0,    0,    0,    0,    0,   64,
    0,   64,    0,  295,   66,   66,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  295,  295,    0,
    0,    0,    0,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,    0,   66,   66,   66,   66,    0,  126,   66,
    0,    0,    0,    0,    0,    0,    0,   66,    0,   66,
    0,    0,  126,  126,    0,    0,    0,    0,    0,    0,
    0,    0,  295,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,    0,
    0,  126,  126,  126,  126,  166,  166,    0,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  126,    0,    0,
    0,    0,    0,    0,    0,    0,  166,  166,  166,  166,
  166,  166,    0,    0,    0,    0,    0,    0, 1080, 1083,
 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 1113,
 1116, 1119, 1122, 1125, 1128,    0,    0, 1131, 1134, 1137,
 1140,  166,  166,  168,  168,    0,  168,  168,  168,  168,
  168,  168,  168,  168,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  168,  168,  168,  168,  168,  168,
    0,    0,  166,  166,    0,    0,    0,    0,    0,    0,
  329,    0,    0,    0,  329,    0,  329,  329,    0,  329,
  329,    0,    0,    0,    0,    0,    0,    0,    0,  168,
  168,  329,  329,  329,  329,  329,  329,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  327,
    0,    0,    0,  327,    0,  327,  327,    0,  327,  327,
  168,  168,    0,    0,  329,    0,  329,  329,    0,    0,
  327,  327,  327,  327,  327,  327,    0,    0,    0, 4678,
    0,    0,    0,    0,  578,    0,    0,  582,  586,  590,
    0,    0,    0,    0,    0,  594,  598,  329,  329,    0,
    0,    0,    0,  327,  602,  327,  327,  275,  275,    0,
    0,  275,  275,  275,  275,  275,  275,  275,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  275,  275,
    0,  275,    0,    0,    0,  166,  327,  327,  236,  606,
  609,    0,    0,  226,    0,    0,  239,    0,  226,  166,
  166,  226,  226,  226,    0,    0,    0,    0,    0,  226,
  226,    0,    0,  275,    0,    0,    0,    0,  226,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,    0,    0,  166,  166,
  166,  166,    0,  168,  275,  275,    0,    0,    0,    0,
    0,    0,  226,    0,  166,    0,    0,  168,  168,    0,
  226,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  168,  168,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  168,  168,  168,  168,  329,  329,  168,  168,  168,  168,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  168,    0,  329,  329,  329,  329,  329,  329,
  329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
  329,    0,    0,  327,  327,  329,  329,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  329,
    0,    0,    0,  327,  327,  327,  327,  327,  327,  327,
  327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
    0,    0,    0,    0,  327,  327,  223,  275,  223,  223,
    0,    0,  223,    0,    0,    0,    0,    0,  327,  312,
  312,  275,  275,  312,  312,  312,  312,  312,  312,  312,
  223,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  312,  312,    0,  312,  311,  311,    0,    0,  311,  311,
  311,  311,  311,  311,  311,    0,    0,    0,    0,  223,
    0,    0,    0,    0,    0,  311,  311,    0,  311,    0,
    0,    0,    0,    0,    0,  312,  275,  288,  288,    0,
    0,  288,  288,  288,  288,  288,    0,  288,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  288,  288,
  311,  288,    0,    0,  303,    0,  312,  312,  303,  303,
  303,  303,  303,    0,  303,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  303,  303,    0,  303,    0,
  284,  311,  311,  288,  284,  284,  284,  284,  284,  296,
  284,    0,  296,    0,    0,    0,    0,    0,    0,    0,
    0,  284,  284,    0,  284,    0,  296,  296,    0,    0,
  303,    0,    0,  285,  288,  288,    0,  285,  285,  285,
  285,  285,  286,  285,    0,    0,  286,  286,  286,  286,
  286,    0,  286,    0,  285,  285,  284,  285,    0,    0,
    0,  296,  303,  286,  286,    0,  286,  297,    0,    0,
  297,    0,    0,    0,    0,    0,    0,    0,    0,  298,
    0,    0,  298,    0,  297,  297,    0,    0,  284,  285,
    0,    0,    0,  296,    0,  223,  298,  298,  286,    0,
  223,    0,    0,  223,  223,  223,    0,    0,    0,  312,
    0,  223,  223,    0,    0,    0,    0,    0,    0,  297,
  223,  285,    0,  312,  312,    0,    0,    0,  223,    0,
  286,  298,    0,    0,  311,   61,   61,    0,    0,    0,
   61,   61,   61,   61,   61,   61,    0,  299,  311,  311,
  299,  297,    0,  300,  223,    0,  300,   61,   61,   61,
   61,   61,  223,  298,  299,  299,    0,  288,    0,    0,
  300,  300,    0,    0,    0,    0,    0,    0,  312,    0,
    0,  288,  288,    0,    0,    0,    0,    0,    0,   61,
    0,    0,   61,    0,  303,    0,    0,  301,    0,  299,
  301,    0,    0,  311,    0,  300,    0,    0,  303,  303,
    0,    0,    0,    0,  301,  301,    0,    0,    0,    0,
  284,    0,   61,   61,    0,  296,    0,  304,    0,    0,
  304,  299,    0,    0,  284,  284,  288,  300,    0,  296,
  296,    0,    0,    0,  304,  304,    0,    0,  305,  301,
    0,  305,    0,  285,  306,    0,  307,  306,    0,  307,
    0,    0,  286,  303,    0,  305,  305,  285,  285,    0,
    0,  306,  306,  307,  307,  308,  286,  286,  308,  304,
    0,  301,    0,  297,  309,    0,    0,  309,    0,  284,
    0,    0,  308,  308,  296,  298,    0,  297,  297,    0,
  305,  309,  309,    0,    0,    0,  306,    0,  307,  298,
  298,  304,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  285,    0,    0,  226,  226,  308,    0,  226,
    0,  286,  305,    0,    0,    0,  309,    0,  306,    0,
  307,    0,    0,    0,    0,    0,    0,  226,    0,    0,
    0,    0,  297,    0,    0,  310,    0,    0,  310,  308,
    0,    0,  313,  299,  298,  313,    0,    0,  309,  300,
    0,    0,  310,  310,    0,    0,  226,  299,  299,  313,
  313,    0,    0,  300,  300,    0,    0,    0,    0,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,  310,   61,   61,
   61,   61,    0,  301,  313,    0,    0,  259,    0,  259,
  259,    0,    0,  291,    0,    0,  291,  301,  301,    0,
    0,    0,  299,    0,    0,    0,    0,    0,  300,  310,
  291,  291,  292,  304,  289,  292,  313,  289,    0,    0,
  290,    0,    0,  290,    0,    0,    0,  304,  304,  292,
  292,  289,  289,    0,  305,    0,    0,  290,  290,    0,
  306,  317,  307,    0,  317,  291,    0,    0,  305,  305,
  325,    0,  301,  325,  306,  306,  307,  307,  317,  317,
    0,  308,    0,    0,  292,    0,  289,  325,  325,    0,
  309,    0,  290,    0,    0,  308,  308,  291,    0,    0,
    0,    0,  304,    0,  309,  309,    0,    0,  293,    0,
    0,  293,    0,  317,    0,    0,  292,    0,  289,    0,
    0,    0,  325,  305,  290,  293,  293,    0,    0,  306,
    0,  307,  226,    0,  227,  227,    0,  226,  227,    0,
  226,  226,  226,    0,    0,  317,  259,    0,  226,  226,
  308,    0,    0,    0,  325,    0,  227,  226,    0,  309,
  293,  310,  190,    0,    0,  226,    0,  190,  313,    0,
  190,  190,  190,    0,    0,  310,  310,    0,  190,  190,
    0,    0,  313,  313,    0,  227,    0,  190,    0,    0,
    0,  226,  293,    0,    0,    0,  171,    0,    0,  226,
  166,  168,    0,  174,    0,  164,  162,  173,  163,    0,
  165,  237,    0,    0,    0,    0,  237,    0,    0,  237,
  237,  237,    0,  160,  172,  161,    0,  237,  237,  291,
  310,    0,    0,    0,    0,    0,  237,  313,    0,    0,
    0,    0,    0,  291,  291,    0,    0,    0,  292,  447,
  289,    0,    0,    0,  175,    0,  290,  167,    0,    0,
    0,    0,  292,  292,  289,  289,    0,    0,    0,    0,
  290,  290,    0,    0,    0,    0,    0,  317,    0,    0,
    0,    0,    0,    0,    0,    0,  325,  169,    0,  170,
    0,  317,  317,    0,    0,    0,    0,    0,  291,    0,
  325,  325,    0,    0,    0,  229,    0,    0,    0,    0,
  232,    0,    0,  232,  232,  232,    0,  292,  242,  289,
    0,  232,  232,  245,  293,  290,  248,  251,  254,    0,
  232,    0,  493,    0,  257,  260,    0,  493,  293,  293,
  493,  493,  493,  263,    0,    0,  317,    0,  493,  493,
    0,  227,    0,    0,    0,  325,  227,  493,    0,  227,
  227,  227,    0,    0,  236,    0,  259,  227,  227,  259,
  259,  259,  239,    0,    0,    0,  227,  259,  259,    0,
  407,    0,    0,    0,  227,  412,  259,    0,  417,  422,
  427,  497,    0,  293,  259,    0,  432,  437,    0,  500,
    0,    0,    0,    0,    0,  442,    0,    0,    0,    0,
  227,    0,    0,    0,    0,    0,    0,    0,  227,    0,
  259,  259,  259,  259,    0,  259,  259,    0,  259,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  450,
  454,  458,  462,    0,  465,  465,    0,  469,    0,    0,
    0,    0,    0,    0,  137,  138,  139,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  155,  156,  157,  158,  159,  176,  177,   61,
   61,    0,   61,    0,   61,   61,   61,   61,   61,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,   61,   61,   61,   61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   61,   61,    0,    0,    0,
   61,   61,   61,   61,   61,   61,    0,    0,    0,    0,
    0,    0,    0,   61,    0,    0,   61,   61,   61,   61,
   61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  279,    0,  282,    0,  275,  273,    0,  274,
  284,  276,    0,    0,    0,    0,   61,   61,    0,   61,
    0,    0,   61,  285,  271,  281,  272,  286,    0,    0,
    0,    0,    0,    0,    0,    0,  277,  279,    0,  282,
  354,  275,  273,    0,  274,  284,  276,    0,    0,    0,
    0,    0,   61,   61,    0,  283,    0,    0,  278,  271,
  281,  272,  286,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  279,    0,  282,  484,  275,  273,    0,  274,
  284,  276,    0,    0,    0,    0,    0,    0,  280,    0,
  283,    0,    0,  278,  271,  281,  272,  286,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  277,  279,  280,  282,  283,  275,  273,  278,  274,
  284,  276,  266,    0,    0,    0,    0,  269,    0,    0,
  272,  275,  278,    0,  271,  281,  272,  286,  281,  284,
    0,  290,    0,    0,    0,    0,  293,  287,  280,  296,
  299,  302,    0,    0,    0,    0,    0,  305,  308,    0,
    0,    0,    0,    0,   61,  283,  311,  504,  278,    0,
    0,    0,    0,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,    0,    0,  280,    0,
   61,    0,    0,    0,    0,    0,    0,    0,    0,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,    0,    0,   61,   61,
   61,   61,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,    0,    0,  267,  268,  269,  270,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,    0,    0,  267,
  268,  269,  270,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,    0,    0,  267,  268,  269,  270,  277,  279,
    0,  282,  486,  275,  273,    0,  274,  284,  276,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  271,  281,  272,  286,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,    0,    0,  267,  268,  269,  270,  277,  279,
    0,  282,  283,  275,  273,  278,  274,  284,  276,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  505,
    0,  271,  281,  272,  286,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  279,  280,  282,    0,  275,  273,
  447,  274,  284,  276,    0,    0,    0,    0,    0,    0,
    0,    0,  283,    0,    0,  278,  271,  281,  272,  286,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  279,
    0,  282,  590,  275,  273,    0,  274,  284,  276,    0,
    0,    0,    0,    0,    0,  280,    0,  283,    0,  552,
  278,  271,  281,  272,  286,    0,    0,    0,    0,    0,
    0,    0,    0,  277,  279,    0,  282,  599,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
  280,    0,  283,    0,    0,  278,  271,  281,  272,  286,
    0,    0,    0,    0,    0,    0,    0,    0,  277,  279,
    0,  282,    0,  275,  273,    0,  274,  284,  276,    0,
    0,    0,    0,    0,    0,  280,    0,  283,    0,    0,
  278,  271,  281,  272,  286,    0,    0,    0,    0,    0,
    0,  407,    0,    0,    0,    0,  412,    0,    0,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,    0,
  280,    0,  283,    0,  606,  278,  442,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,  280,    0,    0,    0,    0,
  450,  454,  458,  462,    0,  465,  465,    0,  469,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,    0,    0,  267,  268,  269,  270,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,    0,    0,  267,  268,  269,  270,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  250,  251,  252,  253,  254,  255,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,    0,
    0,  267,  268,  269,  270,  277,  279,    0,  282,  616,
  275,  273,    0,  274,  284,  276,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,  281,
  272,  286,  277,  279,    0,  282,  617,  275,  273,    0,
  274,  284,  276,    0,  314,    0,    0,    0,    0,  317,
    0,    0,  320,  323,  326,  271,  281,  272,  286,  283,
  329,  332,  278,    0,    0,    0,    0,    0,    0,  335,
  277,  279,    0,  282,  618,  275,  273,    0,  274,  284,
  276,    0,    0,    0,    0,    0,  283,    0,    0,  278,
    0,    0,  280,  271,  281,  272,  286,  277,  279,    0,
  282,  619,  275,  273,    0,  274,  284,  276,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  280,
  271,  281,  272,  286,  283,    0,    0,  278,    0,    0,
    0,    0,    0,    0,    0,  277,  279,    0,  282,  630,
  275,  273,    0,  274,  284,  276,    0,    0,    0,    0,
    0,  283,    0,    0,  278,    0,    0,  280,  271,  281,
  272,  286,  277,  279,    0,  282,    0,  275,  273,    0,
  274,  284,  276,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  280,  271,  281,  272,  286,  283,
  338,    0,  278,    0,    0,  341,    0,    0,  344,  347,
  350,    0,    0,    0,  383,    0,  353,  356,    0,  386,
    0,    0,  389,  392,  395,  359,  283,    0,  652,  278,
  398,  401,  280,    0,    0,    0,    0,    0,  126,  404,
    0,  126,    0,    0,  126,  126,  126,  126,  126,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  280,
  126,    0,  126,  126,  126,    0,    0,    0,    0,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,    0,    0,  267,  268,
  269,  270,  126,    0,    0,  126,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,    0,    0,  267,  268,  269,  270,    0,
    0,    0,    0,    0,    0,  126,  126,    0,    0,    0,
    0,    0,    0,    0,  250,  251,  252,  253,  254,  255,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,    0,    0,  267,  268,  269,  270,    0,    0,    0,
    0,  250,  251,  252,  253,  254,  255,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,    0,    0,
  267,  268,  269,  270,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,    0,    0,  267,  268,
  269,  270,    0,    0,    0,    0,  250,  251,  252,  253,
  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,    0,    0,  267,  268,  269,  270,    0,
    0,    0,    0,    0, 1218,    0, 1221, 1227,    0,    0,
    0,  277,  279,    0,  282,    0,  275,  273,    0,  274,
  284,  276,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  271,  281,  272,  286, 1224,    0,
    0,    0,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,   74,
    0,  126,  126,  126,  126,  283,  756,  762,  278,  771,
    0,  750,  744,    0,  747,  777,  753,    0,  544,    0,
    0,    0,    0,  547,    0,    0,  550,  553,  556,  738,
  768,  741,  780,    0,  559,  562,    0,    0,  280,    0,
    0,  870,  876,  565,  885,    0,  864,  858,    0,  861,
  891,  867,    0,    0,    0,    0,    0,    0,    0,    0,
  774,    0,    0,  759,  852,  882,  855,  894,    0,    0,
    0,    0,    0,    0,    0,    0,  978,  984,    0,  993,
    0,  972,  966,    0,  969,  999,  975,    0,    0,    0,
    0,    0,    0,  765,    0,  888,    0,    0,  873,  960,
  990,  963, 1002,    0,    0,    0,    0,    0,    0,    0,
    0, 1464, 1470,    0, 1479,    0, 1458, 1452,    0, 1455,
 1485, 1461,    0,    0,    0,    0,    0,    0,  879,    0,
  996,    0,    0,  981, 1446, 1476, 1449, 1488,    0,    0,
    0,    0,    0,    0,    0,    0, 1572, 1578,    0, 1587,
    0, 1566, 1560,    0, 1563, 1593, 1569,    0,    0,    0,
    0,    0,    0,  987,    0, 1482,    0,    0, 1467, 1554,
 1584, 1557, 1596,    0,    0, 1155, 1158, 1161, 1164, 1167,
 1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197,
 1200, 1203,    0,    0, 1206, 1209, 1212, 1215, 1473,    0,
 1590,    0,    0, 1575,    0,  250,  251,  252,  253,  254,
  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
  265,  266,    0,    0,  267,  268,  269,  270,    0,    0,
    0, 1680, 1686, 1581, 1695,    0, 1674, 1668,    0, 1671,
 1701, 1677,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1662, 1692, 1665, 1704,    0,    0,
  675,  678,  681,  684,  687,  690,  693,  696,  699,  702,
  705,  708,  711,  714,  717,  720,  723,    0,    0,  726,
  729,  732,  735,    0,    0, 1698,    0,    0, 1683,    0,
    0,    0,    0,    0,    0,  789,  792,  795,  798,  801,
  804,  807,  810,  813,  816,  819,  822,  825,  828,  831,
  834,  837,    0,    0,  840,  843,  846,  849, 1689,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  897,  900,  903,  906,  909,  912,  915,  918,  921,  924,
  927,  930,  933,  936,  939,  942,  945,    0,    0,  948,
  951,  954,  957,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1383, 1386, 1389, 1392, 1395,
 1398, 1401, 1404, 1407, 1410, 1413, 1416, 1419, 1422, 1425,
 1428, 1431,    0,    0, 1434, 1437, 1440, 1443,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1491, 1494, 1497, 1500, 1503, 1506, 1509, 1512, 1515, 1518,
 1521, 1524, 1527, 1530, 1533, 1536, 1539,    0,    0, 1542,
 1545, 1548, 1551, 1840, 1846,    0, 1855,    0, 1834, 1828,
    0, 1831, 1861, 1837,    0,  544,    0,    0,    0,    0,
  547,    0,    0,  550,  553,  556, 1822, 1852, 1825, 1864,
    0,  559,  562,    0,    0,    0,    0,    0, 1948, 1954,
  565, 1963,    0, 1942, 1936,    0, 1939, 1969, 1945,    0,
    0,    0,    0,    0,    0,    0,    0, 1858,    0,    0,
 1843, 1930, 1960, 1933, 1972, 1599, 1602, 1605, 1608, 1611,
 1614, 1617, 1620, 1623, 1626, 1629, 1632, 1635, 1638, 1641,
 1644, 1647,    0,    0, 1650, 1653, 1656, 1659, 2056, 2062,
 1849, 2071, 1966, 2050, 2044, 1951, 2047, 2077, 2053,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2038, 2068, 2041, 2080,    0,    0,    0,    0,    0,
    0,    0,    0, 2164, 2170, 1957, 2179,    0, 2158, 2152,
    0, 2155, 2185, 2161,    0,    0,    0,    0,    0,    0,
    0,    0, 2074,    0,    0, 2059, 2146, 2176, 2149, 2188,
    0,    0,    0,    0,    0,    0,    0,    0, 2272, 2278,
    0, 2287,    0, 2266, 2260,    0, 2263, 2293, 2269,    0,
    0,    0,    0,    0,    0, 2065,    0, 2182,    0,    0,
 2167, 2254, 2284, 2257, 2296,    0,    0,    0,    0,    0,
    0,    0,    0, 2380, 2386,    0, 2395,    0, 2374, 2368,
    0, 2371, 2401, 2377,    0,    0,    0,    0,    0,    0,
 2173,    0, 2290,    0,    0, 2275, 2362, 2392, 2365, 2404,
    0,    0,    0,    0,    0,    0,    0,    0, 2488, 2494,
    0, 2503,    0, 2482, 2476,    0, 2479, 2509, 2485,    0,
    0,    0,    0,    0,    0, 2281,    0, 2398,    0,    0,
 2383, 2470, 2500, 2473, 2512,    0,    0, 1759, 1762, 1765,
 1768, 1771, 1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795,
 1798, 1801, 1804, 1807,    0,    0, 1810, 1813, 1816, 1819,
 2389,    0, 2506,    0,    0, 2491,    0,    0,    0,    0,
    0,    0, 1867, 1870, 1873, 1876, 1879, 1882, 1885, 1888,
 1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1915,    0,
    0, 1918, 1921, 1924, 1927, 2497,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996,
 1999, 2002, 2005, 2008, 2011, 2014, 2017, 2020, 2023,    0,
    0, 2026, 2029, 2032, 2035,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2083, 2086, 2089,
 2092, 2095, 2098, 2101, 2104, 2107, 2110, 2113, 2116, 2119,
 2122, 2125, 2128, 2131,    0,    0, 2134, 2137, 2140, 2143,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2191, 2194, 2197, 2200, 2203, 2206, 2209, 2212,
 2215, 2218, 2221, 2224, 2227, 2230, 2233, 2236, 2239,    0,
    0, 2242, 2245, 2248, 2251,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2299, 2302, 2305,
 2308, 2311, 2314, 2317, 2320, 2323, 2326, 2329, 2332, 2335,
 2338, 2341, 2344, 2347,    0,    0, 2350, 2353, 2356, 2359,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2407, 2410, 2413, 2416, 2419, 2422, 2425, 2428,
 2431, 2434, 2437, 2440, 2443, 2446, 2449, 2452, 2455,    0,
    0, 2458, 2461, 2464, 2467, 2596, 2602,    0, 2611,    0,
 2590, 2584,    0, 2587, 2617, 2593,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2578, 2608,
 2581, 2620, 2854, 2860,    0, 2869,    0, 2848, 2842,    0,
 2845, 2875, 2851,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2836, 2866, 2839, 2878, 2614,
    0,    0, 2599,    0,    0,    0,    0,    0,    0,    0,
 2962, 2968,    0, 2977,    0, 2956, 2950,    0, 2953, 2983,
 2959,    0,    0,    0,    0,    0, 2872,    0,    0, 2857,
    0,    0, 2605, 2944, 2974, 2947, 2986, 3145, 3151,    0,
 3160,    0, 3139, 3133,    0, 3136, 3166, 3142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2863,
 3127, 3157, 3130, 3169, 2980,    0,    0, 2965,    0,    0,
    0,    0,    0,    0,    0, 3253, 3259,    0, 3268,    0,
 3247, 3241,    0, 3244, 3274, 3250,    0,    0,    0,    0,
    0, 3163,    0,    0, 3148,    0,    0, 2971, 3235, 3265,
 3238, 3277, 3361, 3367,    0, 3376,    0, 3355, 3349,    0,
 3352, 3382, 3358,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3154, 3343, 3373, 3346, 3385, 3271,
    0,    0, 3256,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3379,    0,    0, 3364,
    0,    0, 3262,    0,    0,    0,    0,    0, 3469, 3475,
    0, 3484,    0, 3463, 3457,    0, 3460, 3490, 3466,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3370,
    0, 3451, 3481, 3454, 3493,    0,    0,    0,    0, 2515,
 2518, 2521, 2524, 2527, 2530, 2533, 2536, 2539, 2542, 2545,
 2548, 2551, 2554, 2557, 2560, 2563,    0,    0, 2566, 2569,
 2572, 2575, 3487,    0,    0, 3472, 2773, 2776, 2779, 2782,
 2785, 2788, 2791, 2794, 2797, 2800, 2803, 2806, 2809, 2812,
 2815, 2818, 2821,    0,    0, 2824, 2827, 2830, 2833,    0,
    0,    0,    0,    0,    0, 3478,    0,    0,    0,    0,
    0,    0,    0,    0, 2881, 2884, 2887, 2890, 2893, 2896,
 2899, 2902, 2905, 2908, 2911, 2914, 2917, 2920, 2923, 2926,
 2929,    0,    0, 2932, 2935, 2938, 2941,    0,    0,    0,
    0, 3064, 3067, 3070, 3073, 3076, 3079, 3082, 3085, 3088,
 3091, 3094, 3097, 3100, 3103, 3106, 3109, 3112,    0,    0,
 3115, 3118, 3121, 3124,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3172,
 3175, 3178, 3181, 3184, 3187, 3190, 3193, 3196, 3199, 3202,
 3205, 3208, 3211, 3214, 3217, 3220,    0,    0, 3223, 3226,
 3229, 3232,    0,    0,    0,    0, 3280, 3283, 3286, 3289,
 3292, 3295, 3298, 3301, 3304, 3307, 3310, 3313, 3316, 3319,
 3322, 3325, 3328,    0,    0, 3331, 3334, 3337, 3340,    0,
    0,    0,    0,    0, 1296,    0, 1299, 1305,    0,    0,
    0, 3652, 3658,    0, 3667,    0, 3646, 3640,    0, 3643,
 3673, 3649,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3634, 3664, 3637, 3676, 1302,    0,
    0,    0, 3388, 3391, 3394, 3397, 3400, 3403, 3406, 3409,
 3412, 3415, 3418, 3421, 3424, 3427, 3430, 3433, 3436,    0,
    0, 3439, 3442, 3445, 3448, 3670, 3760, 3766, 3655, 3775,
    0, 3754, 3748,    0, 3751, 3781, 3757,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3742,
 3772, 3745, 3784,    0,    0,    0,    0,    0, 3661,    0,
    0, 3868, 3874,    0, 3883,    0, 3862, 3856,    0, 3859,
 3889, 3865,    0,    0,    0,    0,    0,    0,    0,    0,
 3778,    0,    0, 3763, 3850, 3880, 3853, 3892,    0,    0,
    0,    0,    0,    0,    0,    0, 4351, 4357,    0, 4366,
    0, 4345, 4339,    0, 4342, 4372, 4348,    0,    0,    0,
    0,    0,    0, 3769,    0, 3886,    0,    0, 3871, 4333,
 4363, 4336, 4375,    0,    0,    0,    0,    0,    0,    0,
    0, 4763, 4769,    0, 4778,    0, 4757, 4751,    0, 4754,
 4784, 4760,    0,    0,    0,    0,    0,    0, 3877,    0,
 4369,    0,    0, 4354, 4745, 4775, 4748, 4787,    0,    0,
    0,    0,    0,    0,    0,    0, 4871, 4877,    0, 4886,
    0, 4865, 4859,    0, 4862, 4892, 4868,    0,    0,    0,
    0,    0,    0, 4360,    0, 4781,    0,    0, 4766, 4853,
 4883, 4856, 4895,    0,    0, 1233, 1236, 1239, 1242, 1245,
 1248, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275,
 1278, 1281,    0,    0, 1284, 1287, 1290, 1293, 4772,    0,
 4889,    0,    0, 4874,    0, 3571, 3574, 3577, 3580, 3583,
 3586, 3589, 3592, 3595, 3598, 3601, 3604, 3607, 3610, 3613,
 3616, 3619,    0,    0, 3622, 3625, 3628, 3631,    0,    0,
    0, 4997, 5003, 4880, 5012,    0, 4991, 4985,    0, 4988,
 5018, 4994,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 4979, 5009, 4982, 5021,    0,    0,
 3679, 3682, 3685, 3688, 3691, 3694, 3697, 3700, 3703, 3706,
 3709, 3712, 3715, 3718, 3721, 3724, 3727,    0,    0, 3730,
 3733, 3736, 3739,    0,    0, 5015,    0, 1371, 5000, 1374,
 1380,    0,    0,    0,    0, 3787, 3790, 3793, 3796, 3799,
 3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829,
 3832, 3835,    0,    0, 3838, 3841, 3844, 3847, 5006,    0,
 2686, 1377, 2689, 2695,    0,    0,    0,    0,    0,    0,
 4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291, 4294, 4297,
 4300, 4303, 4306, 4309, 4312, 4315, 4318,    0,    0, 4321,
 4324, 4327, 4330,    0, 2692, 2761,    0, 2764, 2770,    0,
    0,    0,    0,    0,    0, 4682, 4685, 4688, 4691, 4694,
 4697, 4700, 4703, 4706, 4709, 4712, 4715, 4718, 4721, 4724,
 4727, 4730,    0,    0, 4733, 4736, 4739, 4742,    0, 2767,
    0, 3052,    0, 3055, 3061,    0,    0,    0,    0,    0,
 4790, 4793, 4796, 4799, 4802, 4805, 4808, 4811, 4814, 4817,
 4820, 4823, 4826, 4829, 4832, 4835, 4838,    0,    0, 4841,
 4844, 4847, 4850,  277,  279, 3058,  282,    0,  275,  273,
    0,  274,  284,  276,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,  281,    0,  286,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3559,
    0, 3562, 3568,    0,    0,    0,    0,  283,    0,    0,
  278,    0,    0,    0,    0, 4916, 4919, 4922, 4925, 4928,
 4931, 4934, 4937, 4940, 4943, 4946, 4949, 4952, 4955, 4958,
 4961, 4964,    0, 3565, 4967, 4970, 4973, 4976,    0, 3958,
  280, 3961, 3967,    0,    0,    0,    0,    0, 1308, 1311,
 1314, 1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341,
 1344, 1347, 1350, 1353, 1356,    0,    0, 1359, 1362, 1365,
 1368,    0, 4033, 3964, 4036, 4042,    0,    0,    0,    0,
    0, 2623, 2626, 2629, 2632, 2635, 2638, 2641, 2644, 2647,
 2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671,    0,    0,
 2674, 2677, 2680, 2683,    0, 4108, 4039, 4111, 4117,    0,
    0,    0,    0,    0,    0,    0, 2698, 2701, 2704, 2707,
 2710, 2713, 2716, 2719, 2722, 2725, 2728, 2731, 2734, 2737,
 2740, 2743, 2746,    0,    0, 2749, 2752, 2755, 2758, 4114,
    0, 4183,    0, 4186, 4192,    0,    0,    0,    0,    0,
    0,    0, 2989, 2992, 2995, 2998, 3001, 3004, 3007, 3010,
 3013, 3016, 3019, 3022, 3025, 3028, 3031, 3034, 3037,    0,
    0, 3040, 3043, 3046, 3049, 4189,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4258,    0, 4261, 4267,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  250,  251,  252,
  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266, 4264,    0,  267,  268,  269,  270,
 3496, 3499, 3502, 3505, 3508, 3511, 3514, 3517, 3520, 3523,
 3526, 3529, 3532, 3535, 3538, 3541, 3544,    0,    0, 3547,
 3550, 3553, 3556, 4441,    0, 4444, 4450,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922,
 3925, 3928, 3931, 3934, 3937, 3940, 3943, 4447,    0, 3946,
 3949, 3952, 3955, 4516,    0, 4519, 4525,    0,    0,    0,
    0,    0,    0, 3970, 3973, 3976, 3979, 3982, 3985, 3988,
 3991, 3994, 3997, 4000, 4003, 4006, 4009, 4012, 4015, 4018,
  447,    0, 4021, 4024, 4027, 4030, 4591, 4522, 4594, 4600,
    0,    0,    0,    0,    0,    0, 4045, 4048, 4051, 4054,
 4057, 4060, 4063, 4066, 4069, 4072, 4075, 4078, 4081, 4084,
 4087, 4090, 4093,    0,    0, 4096, 4099, 4102, 4105,    0,
 4597, 4666,    0, 4669, 4675,    0,    0,    0,    0,    0,
    0,    0, 4120, 4123, 4126, 4129, 4132, 4135, 4138, 4141,
 4144, 4147, 4150, 4153, 4156, 4159, 4162, 4165, 4168,    0,
    0, 4171, 4174, 4177, 4180, 4672,  190,    0,  190,  190,
  190,    0,  190,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  190, 4195, 4198, 4201, 4204, 4207, 4210, 4213, 4216, 4219,
 4222, 4225, 4228, 4231, 4234, 4237, 4240, 4243,    0,    0,
 4246, 4249, 4252, 4255,    0,    0,    0,    0,    0,  190,
    0,  407,    0,    0,    0,    0,  412,    0,    0,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,    0,
    0,    0,    0,    0,    0,    0,  442,    0,    0,    0,
    0,    0,    0,    0, 4378, 4381, 4384, 4387, 4390, 4393,
 4396, 4399, 4402, 4405, 4408, 4411, 4414, 4417, 4420, 4423,
 4426,    0,  447, 4429, 4432, 4435, 4438,    0,    0,    0,
  450,  454,  458,  462,    0,  465,  465,    0,  469,    0,
  447,    0,    0,    0, 4453, 4456, 4459, 4462, 4465, 4468,
 4471, 4474, 4477, 4480, 4483, 4486, 4489, 4492, 4495, 4498,
 4501,    0,    0, 4504, 4507, 4510, 4513,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4528, 4531, 4534,
 4537, 4540, 4543, 4546, 4549, 4552, 4555, 4558, 4561, 4564,
 4567, 4570, 4573, 4576,    0,    0, 4579, 4582, 4585, 4588,
    0,    0,    0,  447,    0,    0,    0,    0,    0,    0,
    0,    0, 4603, 4606, 4609, 4612, 4615, 4618, 4621, 4624,
 4627, 4630, 4633, 4636, 4639, 4642, 4645, 4648, 4651,  447,
    0, 4654, 4657, 4660, 4663,  190,    0,    0,    0,    0,
  190,    0,    0,  190,  190,  190,    0,    0,    0,    0,
    0,  190,  190,  407,    0,    0,    0,    0,  412,    0,
  190,  417,  422,  427,    0,    0,    0,    0,  190,  432,
  437,  407,    0,    0,    0,    0,  412,    0,  442,  417,
  422,  427,    0,    0,    0,    0,    0,  432,  437,    0,
    0,    0,  447,    0,    0,    0,  442,    0,    0,    0,
    0,    0,    0,    0,    0,  447,    0,    0,    0,    0,
    0,    0,  450,  454,  458,  462,    0,  465,  465,  447,
  469,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  450,  454,  458,  462,  407,  465,  465,    0,  469,  412,
    0,    0,  417,  422,  427,    0,    0, 4678,    0,    0,
  432,  437,  578,    0,    0,  582,  586,  590,    0,  442,
  407,    0,    0,  594,  598,  412,    0,    0,  417,  422,
  427,    0,  602,    0,    0,    0,  432,  437,    0,    0,
    0,    0,    0,    0,    0,  442,    0,    0,    0,    0,
    0,    0,    0,  450,  454,  458,  462,    0,  465,  465,
    0,  469,    0,    0,    0,    0,  236,  606,  609,    0,
    0,    0,    0,    0,  239,    0,    0,    0,    0,  450,
  454,  458,  462,  407,  465,  465,    0,  469,  412,    0,
    0,  417,  422,  427,    0,    0,  407,    0,    0,  432,
  437,  412,    0,    0,  417,  422,  427,    0,  442,    0,
  407,    0,  432,  437,    0,  412,    0,    0,  417,  422,
  427,  442,    0,    0, 4678,    0,  432,  437,    0,  578,
    0,    0,  582,  586,  590,  442,    0,    0,    0,    0,
  594,  598,  450,  454,  458,  462,    0,  465,  465,  602,
  469,    0,    0,    0,    0,  450,  454,  458,  462,    0,
  465,  465,    0,  469,    0,    0,    0,    0,    0,  450,
  454,  458,  462,    0,  465,  465,    0,  469,    0,    0,
    0,    0,    0,  236,  606,  609,    0, 4678,    0,    0,
    0,  239,  578,    0,    0,  582,  586,  590,    0,    0,
 4678,    0,    0,  594,  598,  578,    0,    0,  582,  586,
  590,    0,  602, 4678,    0,    0,  594,  598,  578,    0,
    0,  582,  586,  590,    0,  602,  493,    0,    0,  594,
  598,  493,    0,    0,  493,  493,  493,    0,  602,    0,
    0,    0,  493,  493,    0,    0,  236,  606,  609,    0,
    0,  493,    0,    0,  239,    0,    0,    0,    0,  236,
  606,  609,    0,    0,    0,    0,    0,  239,    0,    0,
    0,    0,  236,  606,  609,    0,    0,    0,  229,    0,
  239,    0,    0,  232,    0,  497,  232,  232,  232,    0,
    0,  493,    0,  500,  232,  232,  493,    0,    0,  493,
  493,  493,    0,  232,    0,    0,    0,  493,  493,    0,
    0,    0,    0,    0,    0,    0,  493,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  236,    0,    0,
    0,    0,    0,    0,    0,  239,    0,    0,    0,    0,
  497,    0,    0,    0,    0,    0,    0,    0,  500,
};
static int yycheck[] = {                                      17,
    0,    1,    0,  111,   60,   94,    6,   91,    8,    9,
   10,   40,   38,   45,    1,   15,   16,   41,  485,  126,
   44,   49,    5,   38,   59,  114,   59,   42,    5,  263,
   44,   44,  107,   41,  123,   67,   44,   44,   59,   44,
   59,   60,   44,  609,   72,   45,  258,   47,    0,   38,
   44,  376,   44,   42,   44,   37,   38,   62,   58,   41,
   42,   43,   44,   45,   82,   47,    5,   67,  280,   59,
   88,   60,   72,   91,   59,   39,   58,   59,   40,   61,
   41,   44,   38,   44,  112,   44,   61,   44,  123,  462,
  123,   59,   60,   93,   94,   72,  268,  269,  664,   62,
   59,   58,  123,  103,  104,  105,  106,  107,   72,  123,
  454,   93,  125,   60,  114,  459,   93,  125,  125,   96,
  107,  123,  589,  123,  107,   44,  126,   44,   44,   91,
  107,  125,   44,  125,   59,   38,   60,   40,  123,   42,
   33,   59,  124,  125,  123,   38,   24,   40,  521,   42,
  257,   60,   45,  526,   32,  123,  529,   60,   60,   38,
   60,   40,   41,   42,  125,   44,  123,  492,   60,   37,
   38,   49,   60,   41,   42,   43,   44,   45,   46,   47,
  524,  213,  126,   62,   41,  390,  391,   59,   60,   60,
   58,   59,  517,   61,   40,  497,  498,  197,  123,   44,
   46,   44,   59,   91,  577,  123,  125,  123,  125,   60,
  512,  123,   91,  213,  242,   44,   59,   95,  218,   41,
  197,  221,   44,  223,  224,   93,  282,  273,  257,  107,
  123,  257,  316,  126,  112,  579,  282,  220,  443,  216,
  324,  614,   40,  220,  257,   91,   40,   60,   59,   60,
  128,  129,  130,  131,  273,  287,  124,  125,  271,  272,
   37,   38,   44,  282,   41,   42,   43,   44,   45,   46,
   47,  248,  249,  262,   60,  257,  265,  266,  267,   60,
  125,   58,   59,  316,   61,  274,  225,  287,  227,  271,
  272,  230,   59,  308,  123,  319,   44,  321,  322,   40,
  300,  257,   44,  303,   59,  273,  262,   58,   59,  265,
  266,  267,  123,  326,  282,  315,   93,  273,  274,  308,
   59,  321,   59,  275,  276,  277,  282,  316,  317,  318,
  319,  331,  321,  322,  334,  324,   44,   60,  257,  217,
  257,  316,  220,  125,  326,  320,   60,  124,  125,  273,
  325,   40,  271,  272,  271,  272,   41,  357,  282,   44,
  316,  126,   59,  302,  242,  258,  259,  260,  324,   59,
  273,  273,  123,  273,   59,  123,  451,  466,  257,  282,
  282,  123,  282,  262,  257,  273,  265,  266,  267,  257,
  283,  284,  285,  286,  282,  274,  289,  290,  375,  399,
  377,  273,   58,  271,  272,  308,   60,  326,  257,  326,
  282,  290,  257,   58,   59,  123,  316,  310,  311,   44,
  397,  314,  315,  316,  324,   44,  271,  272,  316,  308,
  123,  324,   41,  311,   59,   60,  324,  316,  546,  439,
  515,  439,   38,  518,   40,  324,   42,  273,  341,   45,
  328,  451,  484,   93,  486,  257,  282,  257,  326,   44,
  273,  461,  273,  265,  451,   40,  466,   41,  451,  282,
  447,  282,  547,  273,  451,  257,  508,   93,   60,   60,
  257,  326,  282,  645,  484,  593,  486,  273,  273,  271,
  272,  653,  273,  257,  271,  272,  282,  282,  123,   38,
   38,  282,   40,   42,   42,  444,  125,   45,  508,   41,
  264,   43,   44,   45,  491,  515,  273,  257,  518,  594,
  398,   60,  257,  500,  257,  282,   58,   59,  515,   61,
   42,  518,  515,  608,   60,  518,  264,   38,  515,   40,
  125,  518,   40,   41,  326,   46,  257,  547,  257,  326,
  273,  626,  317,  318,  319,   40,  321,  322,  316,  282,
  547,   93,  273,  563,  547,   91,  324,  642,  264,  337,
  547,  282,   23,  451,   25,   26,   27,   28,   29,   30,
   31,   32,   33,   34,   38,  257,   41,  662,   42,   44,
   91,  316,  610,  125,  594,   46,   47,  597,  598,  324,
  632,  273,  602,  603,  257,  603,   60,  594,  608,  641,
  282,  594,   38,   58,  553,  554,   42,  594,   58,  273,
   58,  608,  316,  124,   40,  608,  626,  566,  282,  462,
  324,  608,  632,   59,   60,  257,  668,  515,  257,  626,
  518,  641,  642,  626,  257,  677,  257,  665,  273,  626,
  316,   61,  271,  272,  654,  642,  654,  282,  324,  642,
   41,  257,  662,   44,   41,  642,    0,   44,  668,  547,
  257,  319,  257,  321,  322,  662,  676,  677,  676,  662,
  123,   41,  133,  134,   44,  662,  271,  272,  521,  628,
  629,  273,  273,  526,  633,  125,  529,   42,  257,   33,
  282,  282,   41,  257,   38,   44,   40,  326,   42,   41,
   61,   45,   44,  652,  310,  311,  594,  257,  257,  257,
   59,   44,   61,  262,   62,  257,  265,  266,  267,   62,
  608,  271,  272,   62,   41,  274,   59,   44,   61,  271,
  272,  326,   62,   41,  577,  257,   44,  273,  626,   41,
  262,   93,   44,  265,  266,  267,  282,  208,  209,  210,
   41,  273,  274,   44,  642,  257,  258,  259,  260,  308,
  282,   41,  310,  311,   44,  226,   93,  316,  317,  318,
  319,  614,  321,  322,  662,  324,  326,   41,   41,  123,
  316,  125,  126,   40,  326,  275,  276,  277,  324,  250,
  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,   40,  264,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,   41,  286,  262,   44,   59,  265,
  266,  267,   40,  257,   40,  275,  276,  277,  274,   62,
  257,   58,   59,  265,  266,  267,  268,  257,   41,   37,
   38,   44,  257,   41,   42,   43,   44,   45,   46,   47,
  330,  331,  332,  333,  334,  335,   33,   40,   58,   40,
   58,   59,  308,   61,   38,   41,   93,   40,   44,   40,
  316,  317,  318,  319,   41,  321,  322,   42,  324,   40,
   40,   40,  353,   59,  355,   61,   40,   37,   38,   41,
   40,  323,   42,   42,   40,   93,   46,   47,  125,   40,
    0,   41,  373,  257,  258,  259,  260,  261,  262,  263,
   40,  265,  266,  267,  268,  269,  387,  271,  272,  273,
  274,  275,  276,  277,  278,   38,  124,  125,  282,  283,
  284,  285,  286,   33,   41,  289,  290,   44,   38,   61,
   40,   91,   42,  257,   59,   45,  123,   61,   59,  126,
   42,   40,   59,  257,   61,   41,  310,  311,   44,  257,
  314,  315,  316,  317,  318,  319,   40,  321,  322,  323,
  324,   41,  326,   59,  124,   61,  330,  257,   59,  333,
   41,  260,  336,  337,  338,   40,   58,  341,   59,   41,
  257,    0,   59,   40,   40,  262,  467,   41,  265,  266,
  267,   59,   40,  257,   41,  260,  273,  274,  262,    0,
   59,  265,  266,  267,  485,  282,  487,  123,  123,  273,
  274,   42,  257,  123,   33,  125,  126,   59,  282,   38,
  257,   40,   44,   42,  505,  506,   45,   41,   41,  333,
  257,   60,  513,  257,  271,  272,   91,   40,   91,  316,
  317,  318,  257,  257,  273,  257,  257,  324,  257,  257,
  257,  257,  316,  317,  318,  257,  537,  538,  539,  540,
  324,   39,   62,  271,  272,  317,  318,  319,  273,  321,
  322,  258,  259,  260,  529,  262,   72,  558,  265,  266,
  267,  451,  466,   72,   72,   72,  273,  274,   51,  326,
  564,   -1,  282,   -1,   -1,  282,  283,  284,  285,  286,
  581,   -1,  289,  290,  123,   33,  125,  126,  589,   -1,
   38,   -1,   40,   -1,   42,   -1,   -1,   45,  326,   -1,
  317,  318,  319,  604,  321,  322,   -1,  314,  315,  317,
  318,  319,   -1,  321,  322,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,  257,  258,  259,
  260,  261,  262,  263,  341,  265,  266,  267,  268,  269,
   61,  271,  272,  273,  274,  275,  276,  277,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,
  290,  316,  317,  318,  319,   41,  321,  322,   44,  324,
   91,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
  310,  311,   58,   59,  314,  315,  316,  317,  318,  319,
   -1,  321,  322,  323,  324,   60,  326,   -1,   -1,   -1,
  330,   -1,   -1,  124,   -1,   -1,  336,  337,  338,   -1,
   -1,  341,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,  275,  276,  277,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,  125,
  289,  290,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,  318,
  319,   -1,  321,  322,  323,  324,   -1,  326,   -1,   -1,
   -1,  330,   -1,   -1,  333,   -1,   -1,  336,  337,  338,
   -1,   -1,  341,   -1,   -1,   -1,   -1,  281,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,
   33,  289,  290,  123,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   45,  327,  328,  329,  330,  331,  332,  333,
  334,  335,  310,  311,   -1,   -1,  314,  315,  316,  317,
  318,  319,   -1,  321,  322,  323,  324,   -1,  326,   -1,
   -1,  257,  330,   -1,   -1,   -1,   -1,   -1,  336,  337,
  338,   -1,   -1,  341,   -1,  271,  272,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   37,   -1,  274,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   58,   59,
  123,   61,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  326,  316,  317,  318,  319,   -1,  321,  322,   -1,  324,
   -1,   -1,   -1,   93,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,  257,  258,  259,
  260,  261,  262,  263,  282,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,  125,  262,   -1,  278,  265,
  266,  267,  282,  283,  284,  285,  286,  273,  274,  289,
  290,   -1,   -1,   -1,   33,   -1,  282,  123,   -1,   38,
  126,   40,   -1,   42,  290,   -1,   45,   -1,   -1,   -1,
  310,  311,   -1,   -1,  314,  315,  316,  317,  318,  319,
   -1,  321,  322,  323,  324,   -1,  326,   -1,   -1,   -1,
  330,   -1,   -1,   -1,   -1,   -1,  336,  337,  338,   -1,
   -1,  341,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,  310,  311,   -1,
   -1,  314,  315,  316,  317,  318,  319,  257,  321,  322,
  323,  324,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,
   -1,  271,  272,  336,  337,  338,   -1,   -1,  341,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,   -1,   -1,  289,  290,   -1,   -1,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,  326,   42,   -1,   -1,
   45,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,  315,
  316,  317,  318,  319,   -1,  321,  322,  323,  324,   -1,
  326,   -1,   -1,   -1,  330,   -1,   -1,   -1,   -1,   -1,
  336,  337,  338,   -1,   -1,  341,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,   -1,   -1,
  289,  290,   -1,   -1,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,  310,  311,   -1,   -1,  314,  315,  316,  317,  318,
  319,   -1,  321,  322,  323,  324,   -1,  326,   -1,   -1,
   -1,  330,   -1,   -1,   -1,   -1,   -1,  336,  337,  338,
   -1,   -1,  341,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,   -1,   -1,  289,  290,   33,
   -1,   -1,   -1,   -1,   38,  123,   40,  125,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,  310,  311,
   -1,   -1,  314,  315,  316,  317,  318,  319,   -1,  321,
  322,  323,  324,   -1,  326,   -1,   -1,   -1,  330,   -1,
   -1,   -1,   -1,   -1,  336,  337,  338,   -1,   -1,  341,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,  126,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,   -1,   33,  289,  290,   -1,   -1,   38,  123,
   40,  125,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,
  315,  316,  317,  318,  319,   -1,  321,  322,  323,  324,
   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,   -1,   -1,
   -1,  336,  337,  338,   -1,   -1,  341,   -1,   -1,   -1,
  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,
  268,  269,  515,  271,  272,  518,   -1,  275,  276,  277,
  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,   33,
   -1,  289,  290,  123,   38,  125,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,  547,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  310,  311,   -1,  262,  314,  315,  265,  266,
  267,   -1,   -1,   -1,   -1,  323,  273,  274,  326,   -1,
   -1,   -1,  330,   -1,   -1,  282,   -1,   -1,  336,  337,
  338,   -1,   -1,  341,  258,  259,  260,  261,   -1,  263,
   -1,  594,   -1,   -1,  268,  269,   -1,  271,  272,   -1,
   -1,  275,  276,  277,  278,  608,   -1,   -1,   -1,  283,
  284,  285,  286,   33,   -1,  289,  290,   -1,   38,  123,
   40,  125,   42,  626,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  310,  311,   -1,  642,
  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  323,
   -1,   -1,  326,   -1,   -1,   -1,  330,   -1,   -1,  662,
   -1,   -1,  336,  337,  338,   -1,   -1,  341,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   33,   -1,  289,
  290,   -1,   38,  123,   40,  125,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
  310,  311,   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,
   -1,   58,   59,  323,   61,   -1,  326,   -1,   40,   41,
  330,   -1,   44,   -1,   -1,   -1,  336,  337,  338,   -1,
   -1,  341,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   62,   -1,   -1,   -1,  268,  269,   93,  271,  272,   -1,
   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,   33,   -1,  289,  290,  123,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  310,  311,   -1,  262,
  314,  315,  265,  266,  267,   -1,   -1,  270,   33,  323,
  273,  274,  326,   38,   -1,   40,  330,   42,   -1,  282,
   45,   -1,  336,  337,  338,   -1,   -1,  341,  258,  259,
  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,  289,
  290,   -1,   -1,  123,   -1,   -1,   91,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
  310,  311,   45,   -1,  314,  315,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  323,   -1,   -1,  326,   -1,  123,   -1,
  330,  126,   -1,   -1,   -1,   -1,  336,  337,  338,   -1,
   -1,  341,  258,  259,  260,  261,   -1,  263,   -1,   -1,
  257,   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,
  276,  277,  278,   -1,  271,  272,   -1,  283,  284,  285,
  286,   -1,   -1,  289,  290,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
  123,  273,  274,  126,  310,  311,   -1,   -1,  314,  315,
  282,   -1,   -1,   -1,   -1,   -1,   -1,  323,  290,   -1,
  326,   -1,  262,   -1,  330,  265,  266,  267,   -1,  326,
  336,  337,  338,  273,  274,  341,   -1,   -1,  258,  259,
  260,  261,  282,  263,   -1,   -1,   -1,   -1,  268,  269,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  283,  284,  285,  286,   -1,   -1,  289,
  290,   -1,  257,  258,  259,  260,  316,  262,   -1,   38,
  265,  266,  267,   42,  324,   -1,   -1,   -1,  273,  274,
  310,  311,   -1,   -1,  314,  315,   -1,  282,  283,  284,
  285,  286,   -1,  323,  289,  290,  326,   -1,   -1,   -1,
  330,   -1,   -1,   -1,   -1,   33,  336,  337,  338,   -1,
   38,  341,   40,   -1,   42,  310,  311,   45,   -1,  314,
  315,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,  341,   -1,   -1,  282,
  283,  284,  285,  286,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,  257,   42,  310,  311,   45,
  262,  314,  315,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   -1,  123,   -1,   -1,  126,   -1,
  282,   -1,   33,   -1,   -1,   -1,   -1,   38,  341,   40,
   -1,   42,   37,   38,   45,   -1,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   -1,
   -1,   38,   -1,   40,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   41,   -1,
  126,   44,   93,   -1,   -1,   62,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   33,   -1,   58,   59,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,  257,   -1,
   -1,   -1,  123,  262,   91,  126,  265,  266,  267,  124,
  125,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,
   93,   -1,   33,  282,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,  125,  257,   -1,  273,  274,   -1,  262,   -1,
   -1,  265,  266,  267,  282,  283,  284,  285,  286,  273,
  274,  289,  290,  123,   -1,   -1,  126,   -1,  282,   -1,
   -1,   -1,   60,   -1,   62,   63,  290,   -1,   -1,   -1,
   -1,   -1,  310,  311,   -1,   -1,  314,  315,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,
  266,  267,  123,   -1,   -1,  126,   94,  273,  274,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  282,  283,  284,  285,
  286,   -1,   -1,  289,  290,   -1,  257,  258,  259,  260,
   -1,  262,  257,   -1,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,  310,  311,  271,  272,  314,  315,
   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,  290,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  257,  341,  273,  274,   -1,  310,
  311,   -1,   -1,  314,  315,  282,   -1,   -1,  271,  272,
   -1,   -1,   -1,  290,   -1,   -1,   -1,  257,  258,  259,
  260,  326,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
  341,   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,  316,
   -1,   -1,  282,  283,  284,  285,  286,  324,   -1,  289,
  290,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
   -1,  262,  126,  326,  265,  266,  267,   -1,   -1,   -1,
  310,  311,  273,  274,  314,  315,   -1,   -1,   -1,   -1,
   -1,  282,  283,  284,  285,  286,   -1,   -1,  289,  290,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   37,   38,   -1,
   40,  341,   42,   43,   44,   45,   -1,   47,   -1,  310,
  311,   -1,   -1,  314,  315,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  341,   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   58,   59,
   -1,   61,   62,   63,  124,   -1,  126,   -1,   -1,   58,
   59,   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   91,   -1,   93,   94,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,   93,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,  124,  125,   58,   59,   -1,   61,
   62,   63,  316,  317,  318,  319,  125,  321,  322,   -1,
  324,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   91,
   -1,   93,   94,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,  124,  125,   58,   59,   -1,   61,   62,   63,
  316,  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,
   94,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  257,   -1,  123,
  124,  125,  262,   -1,  324,  265,  266,  267,  257,   -1,
   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,  311,  312,  313,   -1,   -1,  316,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  324,  257,  326,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,  326,   -1,  271,
  272,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,   -1,  310,  311,
  312,  313,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,  257,  326,   -1,   -1,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,  271,  272,   -1,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,  326,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   58,   59,   -1,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   91,   -1,   93,
   94,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   93,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  124,  125,   58,   59,   -1,   61,   62,   63,  316,  317,
  318,   -1,  125,   -1,   -1,   -1,  324,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   91,   -1,   93,   94,   -1,
   -1,   -1,  282,   -1,   -1,   41,   -1,   -1,   44,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   58,   59,   -1,   -1,   -1,  123,  124,  125,
   58,   59,   -1,   61,   62,   63,  316,  317,  318,   -1,
   -1,   -1,  257,   -1,  324,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   93,  273,  274,
   -1,   -1,   -1,   91,   -1,   93,   94,  282,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,  125,
   -1,   -1,   -1,  257,  282,  123,  124,  125,  262,   -1,
   -1,  265,  266,  267,  257,   -1,   41,  271,  272,   44,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,
   -1,   -1,   -1,   58,   59,   -1,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,   -1,  310,  311,  312,  313,
   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,   93,   -1,
  324,  257,  326,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,  326,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,  310,  311,  312,  313,   -1,   -1,
  316,  257,   -1,   -1,   -1,   -1,   -1,   -1,  324,  257,
  326,   -1,   -1,   -1,  262,  271,  272,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,  310,  311,  312,  313,   -1,   -1,  316,   -1,
  326,   -1,   -1,   -1,   -1,   -1,  324,   -1,  326,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,  257,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,
   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   46,   47,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  123,  124,  125,  273,  274,
   -1,  326,   -1,   -1,   -1,   -1,   91,  282,   93,   94,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   58,   59,   60,   61,   62,   63,   -1,  123,  124,
  125,  316,  317,  318,   58,   59,   -1,   -1,   -1,  324,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,   91,   -1,   93,   94,   37,   38,
  282,   40,   41,   42,   43,   44,   45,   46,   47,   93,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   61,   62,   63,   -1,  123,  124,  125,   -1,
   -1,   -1,   -1,   -1,  316,   -1,   -1,   -1,   -1,   -1,
  257,  125,  324,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   91,   -1,   93,   94,  273,  274,   -1,  257,
   -1,   -1,   -1,   -1,  262,  282,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,  274,   60,   -1,   62,
   63,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   94,  310,  311,  312,  313,  271,  272,  316,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,  326,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,  310,  311,  312,  313,   -1,
   -1,  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,  326,   -1,  257,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,  311,  312,  313,   -1,  257,  316,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,  326,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,  326,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   93,   94,   37,   38,   -1,   40,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   -1,   -1,   -1,   41,   -1,   43,   44,   -1,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   -1,   -1,   -1,   41,   -1,   43,   44,   -1,   46,   47,
  124,  125,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,
   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,  124,  125,   -1,
   -1,   -1,   -1,   91,  282,   93,   94,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   -1,   -1,  257,  124,  125,  316,  317,
  318,   -1,   -1,  257,   -1,   -1,  324,   -1,  262,  271,
  272,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   93,   -1,   -1,   -1,   -1,  282,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,  257,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  326,   -1,   -1,  271,  272,   -1,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  271,  272,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  271,  272,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  326,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
   -1,   -1,   -1,   -1,  312,  313,   38,  257,   40,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  326,   37,
   38,  271,  272,   41,   42,   43,   44,   45,   46,   47,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   61,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   -1,   -1,   -1,   -1,   -1,   93,  326,   37,   38,   -1,
   -1,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   93,   61,   -1,   -1,   37,   -1,  124,  125,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,
   37,  124,  125,   93,   41,   42,   43,   44,   45,   41,
   47,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   61,   -1,   58,   59,   -1,   -1,
   93,   -1,   -1,   37,  124,  125,   -1,   41,   42,   43,
   44,   45,   37,   47,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   58,   59,   93,   61,   -1,   -1,
   -1,   93,  125,   58,   59,   -1,   61,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,   -1,   58,   59,   -1,   -1,  125,   93,
   -1,   -1,   -1,  125,   -1,  257,   58,   59,   93,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,  257,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   93,
  282,  125,   -1,  271,  272,   -1,   -1,   -1,  290,   -1,
  125,   93,   -1,   -1,  257,   37,   38,   -1,   -1,   -1,
   42,   43,   44,   45,   46,   47,   -1,   41,  271,  272,
   44,  125,   -1,   41,  316,   -1,   44,   59,   60,   61,
   62,   63,  324,  125,   58,   59,   -1,  257,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,  326,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   -1,  257,   -1,   -1,   41,   -1,   93,
   44,   -1,   -1,  326,   -1,   93,   -1,   -1,  271,  272,
   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,
  257,   -1,  124,  125,   -1,  257,   -1,   41,   -1,   -1,
   44,  125,   -1,   -1,  271,  272,  326,  125,   -1,  271,
  272,   -1,   -1,   -1,   58,   59,   -1,   -1,   41,   93,
   -1,   44,   -1,  257,   41,   -1,   41,   44,   -1,   44,
   -1,   -1,  257,  326,   -1,   58,   59,  271,  272,   -1,
   -1,   58,   59,   58,   59,   41,  271,  272,   44,   93,
   -1,  125,   -1,  257,   41,   -1,   -1,   44,   -1,  326,
   -1,   -1,   58,   59,  326,  257,   -1,  271,  272,   -1,
   93,   58,   59,   -1,   -1,   -1,   93,   -1,   93,  271,
  272,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   40,   41,   93,   -1,   44,
   -1,  326,  125,   -1,   -1,   -1,   93,   -1,  125,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   62,   -1,   -1,
   -1,   -1,  326,   -1,   -1,   41,   -1,   -1,   44,  125,
   -1,   -1,   41,  257,  326,   44,   -1,   -1,  125,  257,
   -1,   -1,   58,   59,   -1,   -1,   91,  271,  272,   58,
   59,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,   93,  310,  311,
  312,  313,   -1,  257,   93,   -1,   -1,  319,   -1,  321,
  322,   -1,   -1,   41,   -1,   -1,   44,  271,  272,   -1,
   -1,   -1,  326,   -1,   -1,   -1,   -1,   -1,  326,  125,
   58,   59,   41,  257,   41,   44,  125,   44,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,  271,  272,   58,
   59,   58,   59,   -1,  257,   -1,   -1,   58,   59,   -1,
  257,   41,  257,   -1,   44,   93,   -1,   -1,  271,  272,
   41,   -1,  326,   44,  271,  272,  271,  272,   58,   59,
   -1,  257,   -1,   -1,   93,   -1,   93,   58,   59,   -1,
  257,   -1,   93,   -1,   -1,  271,  272,  125,   -1,   -1,
   -1,   -1,  326,   -1,  271,  272,   -1,   -1,   41,   -1,
   -1,   44,   -1,   93,   -1,   -1,  125,   -1,  125,   -1,
   -1,   -1,   93,  326,  125,   58,   59,   -1,   -1,  326,
   -1,  326,  257,   -1,   40,   41,   -1,  262,   44,   -1,
  265,  266,  267,   -1,   -1,  125,   42,   -1,  273,  274,
  326,   -1,   -1,   -1,  125,   -1,   62,  282,   -1,  326,
   93,  257,  257,   -1,   -1,  290,   -1,  262,  257,   -1,
  265,  266,  267,   -1,   -1,  271,  272,   -1,  273,  274,
   -1,   -1,  271,  272,   -1,   91,   -1,  282,   -1,   -1,
   -1,  316,  125,   -1,   -1,   -1,   33,   -1,   -1,  324,
   37,   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,
   47,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   60,   61,   62,   -1,  273,  274,  257,
  326,   -1,   -1,   -1,   -1,   -1,  282,  326,   -1,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,  257,  126,
  257,   -1,   -1,   -1,   91,   -1,  257,   94,   -1,   -1,
   -1,   -1,  271,  272,  271,  272,   -1,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  124,   -1,  126,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,  326,   -1,
  271,  272,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,  326,  257,  326,
   -1,  273,  274,  262,  257,  326,  265,  266,  267,   -1,
  282,   -1,  257,   -1,  273,  274,   -1,  262,  271,  272,
  265,  266,  267,  282,   -1,   -1,  326,   -1,  273,  274,
   -1,  257,   -1,   -1,   -1,  326,  262,  282,   -1,  265,
  266,  267,   -1,   -1,  316,   -1,  262,  273,  274,  265,
  266,  267,  324,   -1,   -1,   -1,  282,  273,  274,   -1,
  257,   -1,   -1,   -1,  290,  262,  282,   -1,  265,  266,
  267,  316,   -1,  326,  290,   -1,  273,  274,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,   37,
   38,   -1,   40,   -1,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   60,   61,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   -1,   -1,   94,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,  124,  125,   -1,   91,
   -1,   -1,   94,   59,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,  124,   40,   91,   42,   43,   94,   45,
   46,   47,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   60,   61,   62,   63,  273,  274,
   -1,  257,   -1,   -1,   -1,   -1,  262,  282,  124,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,  282,   91,  282,   93,   94,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  273,  310,  311,  312,  313,   -1,   -1,  124,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   37,   38,
   -1,   40,   91,   42,   43,   94,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,  124,   40,   -1,   42,   43,
  126,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   93,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
  124,   -1,   91,   -1,   93,   94,  282,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,  124,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,   60,   61,   62,   63,   91,
  273,  274,   94,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   60,   61,   62,   63,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,   61,
   62,   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   60,   61,   62,   63,   91,
  257,   -1,   94,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,  257,   -1,  273,  274,   -1,  262,
   -1,   -1,  265,  266,  267,  282,   91,   -1,   93,   94,
  273,  274,  124,   -1,   -1,   -1,   -1,   -1,   37,  282,
   -1,   40,   -1,   -1,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   59,   -1,   61,   62,   63,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   91,   -1,   -1,   94,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   94,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,  310,  311,  312,  313,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   60,
   61,   62,   63,   -1,  273,  274,   -1,   -1,  124,   -1,
   -1,   37,   38,  282,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   91,   -1,   -1,   94,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   37,   38,  124,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   60,   61,   62,   63,
   -1,  273,  274,   -1,   -1,   -1,   -1,   -1,   37,   38,
  282,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   37,   38,
  124,   40,   91,   42,   43,   94,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,  124,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   60,   61,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,
   94,   60,   61,   62,   63,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   63,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   60,   61,   62,   63,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   60,   61,   62,   63,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,  124,   60,   61,
   62,   63,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   60,   61,   62,   63,   91,
   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
   -1,   60,   61,   62,   63,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   91,   -1,   -1,   94,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,   -1,   -1,  310,  311,
  312,  313,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   94,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   91,   37,   38,   94,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   91,   -1,   -1,   94,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   63,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   91,   -1,   -1,   94,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,
   -1,   37,   38,  124,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   63,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   -1,   91,   -1,   60,   94,   62,
   63,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,  124,   -1,
   60,   94,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   -1,   94,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,   94,
   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   37,   38,   94,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,   -1,   94,  310,  311,  312,  313,   -1,   60,
  124,   62,   63,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,   -1,   -1,  310,  311,  312,
  313,   -1,   60,   94,   62,   63,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   60,   94,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   94,
   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   94,   -1,  310,  311,  312,  313,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   -1,   -1,  310,
  311,  312,  313,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,   94,   -1,  310,
  311,  312,  313,   60,   -1,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  126,   -1,  310,  311,  312,  313,   60,   94,   62,   63,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,   -1,   -1,  310,  311,  312,  313,   -1,
   94,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,   -1,
   -1,  310,  311,  312,  313,   94,   38,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   62,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,   -1,   -1,
  310,  311,  312,  313,   -1,   -1,   -1,   -1,   -1,   91,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,  126,  310,  311,  312,  313,   -1,   -1,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,
  126,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,   -1,   -1,  310,  311,  312,  313,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,   -1,   -1,  310,  311,  312,  313,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  126,
   -1,  310,  311,  312,  313,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,  257,   -1,   -1,   -1,   -1,  262,   -1,
  282,  265,  266,  267,   -1,   -1,   -1,   -1,  290,  273,
  274,  257,   -1,   -1,   -1,   -1,  262,   -1,  282,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,  126,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,  126,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,  257,  321,  322,   -1,  324,  262,
   -1,   -1,  265,  266,  267,   -1,   -1,  257,   -1,   -1,
  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,
   -1,  324,   -1,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,  257,  321,  322,   -1,  324,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,  257,   -1,   -1,  273,
  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,
  257,   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,
  267,  282,   -1,   -1,  257,   -1,  273,  274,   -1,  262,
   -1,   -1,  265,  266,  267,  282,   -1,   -1,   -1,   -1,
  273,  274,  316,  317,  318,  319,   -1,  321,  322,  282,
  324,   -1,   -1,   -1,   -1,  316,  317,  318,  319,   -1,
  321,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,  316,
  317,  318,  319,   -1,  321,  322,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  316,  317,  318,   -1,  257,   -1,   -1,
   -1,  324,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,   -1,  282,  257,   -1,   -1,  273,  274,  262,   -1,
   -1,  265,  266,  267,   -1,  282,  257,   -1,   -1,  273,
  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,
   -1,   -1,  273,  274,   -1,   -1,  316,  317,  318,   -1,
   -1,  282,   -1,   -1,  324,   -1,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,   -1,  257,   -1,
  324,   -1,   -1,  262,   -1,  316,  265,  266,  267,   -1,
   -1,  257,   -1,  324,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
};
static int yyctable[] = {                                      1,
    2,  179,  190,  258,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  179,
  190,  258,   -1,    7,    2,   -1,    8,    2,  179,  190,
  258,   -1,    9,    2,  179,  190,  258,   -1,   10,    2,
  179,  190,  258,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  179,  190,
  258,   -1,   16,    2,  179,  190,  258,   -1,   17,    2,
   -1,   18,    2,  179,  190,  258,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,   -1,
   30,    2,  179,   -1,   31,    2,   -1,   32,    2,   -1,
   33,    2,   -1,   34,    2,   -1,   35,    2,  179,  258,
   -1,   36,    2,  179,  258,   -1,   37,    2,  179,  258,
   -1,   38,    2,  179,  258,   -1,    2,  179,  258,   -1,
   39,    2,   -1,   40,    2,  179,  258,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   46,    2,   -1,   47,    2,   -1,  102,
  190,  259,   -1,    6,  190,  259,   -1,  103,  190,  259,
   -1,  104,  190,  259,   -1,  105,  190,  259,   -1,  106,
   61,  190,  259,   -1,   16,  190,  259,   -1,   18,   61,
  190,  259,   -1,  107,   61,   -1,   35,  259,   -1,   36,
  259,   -1,   37,  259,   -1,   40,  259,   -1,  110,  190,
  258,   -1,  190,  258,   -1,   35,  258,   -1,   40,  258,
   -1,  115,   64,   -1,    6,   64,   -1,  103,   64,   -1,
  104,   64,   -1,  105,   64,   -1,   15,   64,   -1,   16,
   64,   -1,   18,   64,   -1,  115,  244,   -1,    6,  244,
   -1,  103,  244,   -1,  104,  244,   -1,  105,  244,   -1,
   15,  244,   -1,   16,  244,   -1,   18,  244,   -1,  115,
  245,   -1,    6,  245,   -1,  103,  245,   -1,  104,  245,
   -1,  105,  245,   -1,   15,  245,   -1,   16,  245,   -1,
   18,  245,   -1,  115,  246,   -1,    6,  246,   -1,  103,
  246,   -1,  104,  246,   -1,  105,  246,   -1,   15,  246,
   -1,   16,  246,   -1,   18,  246,   -1,  115,   66,   -1,
    6,   66,   -1,  103,   66,   -1,  104,   66,   -1,  105,
   66,   -1,   15,   66,   -1,   16,   66,   -1,   18,   66,
   -1,  115,  329,   -1,   25,  329,   -1,   26,  329,   -1,
   27,  329,   -1,   28,  329,   -1,   29,  329,   -1,   32,
  329,   -1,  115,  190,   -1,    6,  190,   -1,  103,  190,
   -1,  104,  190,   -1,  105,  190,   -1,   15,  190,   -1,
   16,  190,   -1,   18,  190,   -1,    1,  179,  190,  258,
   -1,    6,  179,  190,  258,   -1,    8,  179,  190,  258,
   -1,    9,  179,  190,  258,   -1,   10,  179,  190,  258,
   -1,   15,  179,  190,  258,   -1,   16,  179,  190,  258,
   -1,   18,  179,  190,  258,   -1,   30,  179,   -1,   35,
  179,  258,   -1,   36,  179,  258,   -1,   37,  179,  258,
   -1,   38,  179,  258,   -1,  179,  258,   -1,   40,  179,
  258,   -1,  115,  327,   -1,   25,  327,   -1,   26,  327,
   -1,   27,  327,   -1,   28,  327,   -1,   29,  327,   -1,
   32,  327,   -1,  179,  190,   -1,   35,  179,   -1,   40,
  179,   -1,  220,  126,   -1,   74,  126,   -1,  241,  179,
  258,   -1,    6,  179,  258,   -1,    8,  179,  258,   -1,
    9,  179,  258,   -1,   10,  179,  258,   -1,   15,  179,
  258,   -1,   16,  179,  258,   -1,   18,  179,  258,   -1,
  287,   15,   -1,  299,  258,   -1,    6,  258,   -1,  103,
  258,   -1,  104,  258,   -1,  105,  258,   -1,   15,  258,
   -1,   16,  258,   -1,   18,  258,   -1,  304,  258,   -1,
   61,  261,   -1,  314,  190,  258,   -1,    6,  190,  258,
   -1,  103,  190,  258,   -1,  104,  190,  258,   -1,  105,
  190,  258,   -1,   15,  190,  258,   -1,   16,  190,  258,
   -1,   18,  190,  258,   -1,   36,  258,   -1,   37,  258,
   -1,  321,   74,   -1,  219,   74,   -1,  323,  259,   -1,
  321,   65,   -1,  219,   65,   -1,  220,   65,   -1,  321,
   68,   -1,  219,   68,   -1,  220,   68,   -1,  321,   69,
   -1,  219,   69,   -1,  220,   69,   -1,  321,   70,   -1,
  219,   70,   -1,  220,   70,   -1,  321,   62,   -1,  219,
   62,   -1,  220,   62,   -1,  321,   67,   -1,  219,   67,
   -1,  220,   67,   -1,  250,  328,   -1,  251,  328,   -1,
  252,  328,   -1,  253,  328,   -1,  254,  328,   -1,  255,
  328,   -1,  256,  328,   -1,  257,  328,   -1,  258,  328,
   -1,  259,  328,   -1,  260,  328,   -1,  261,  328,   -1,
  262,  328,   -1,  263,  328,   -1,  264,  328,   -1,  265,
  328,   -1,  266,  328,   -1,  267,  328,   -1,  268,  328,
   -1,  269,  328,   -1,  270,  328,   -1,  271,  328,   -1,
  272,  328,   -1,  273,  328,   -1,  274,  328,   -1,  275,
  328,   -1,  276,  328,   -1,  277,  328,   -1,  278,  328,
   -1,  279,  328,   -1,  280,  328,   -1,  281,  328,   -1,
  282,  328,   -1,  283,  328,   -1,  284,  328,   -1,  286,
  328,   -1,  349,  166,   -1,  350,  168,   -1,  250,  278,
   -1,  251,  278,   -1,  252,  278,   -1,  253,  278,   -1,
  254,  278,   -1,  255,  278,   -1,  256,  278,   -1,  257,
  278,   -1,  258,  278,   -1,  259,  278,   -1,  260,  278,
   -1,  261,  278,   -1,  262,  278,   -1,  263,  278,   -1,
  264,  278,   -1,  265,  278,   -1,  266,  278,   -1,  267,
  278,   -1,  268,  278,   -1,  269,  278,   -1,  270,  278,
   -1,  271,  278,   -1,  272,  278,   -1,  273,  278,   -1,
  274,  278,   -1,  275,  278,   -1,  276,  278,   -1,  277,
  278,   -1,  278,  278,   -1,  279,  278,   -1,  280,  278,
   -1,  281,  278,   -1,  282,  278,   -1,  283,  278,   -1,
  284,  278,   -1,  286,  278,   -1,  250,  280,   -1,  251,
  280,   -1,  252,  280,   -1,  253,  280,   -1,  254,  280,
   -1,  255,  280,   -1,  256,  280,   -1,  257,  280,   -1,
  258,  280,   -1,  259,  280,   -1,  260,  280,   -1,  261,
  280,   -1,  262,  280,   -1,  263,  280,   -1,  264,  280,
   -1,  265,  280,   -1,  266,  280,   -1,  267,  280,   -1,
  268,  280,   -1,  269,  280,   -1,  270,  280,   -1,  271,
  280,   -1,  272,  280,   -1,  273,  280,   -1,  274,  280,
   -1,  275,  280,   -1,  276,  280,   -1,  277,  280,   -1,
  278,  280,   -1,  279,  280,   -1,  280,  280,   -1,  281,
  280,   -1,  282,  280,   -1,  283,  280,   -1,  284,  280,
   -1,  286,  280,   -1,  250,  273,   -1,  251,  273,   -1,
  252,  273,   -1,  253,  273,   -1,  254,  273,   -1,  255,
  273,   -1,  256,  273,   -1,  257,  273,   -1,  258,  273,
   -1,  259,  273,   -1,  260,  273,   -1,  261,  273,   -1,
  262,  273,   -1,  263,  273,   -1,  264,  273,   -1,  265,
  273,   -1,  266,  273,   -1,  267,  273,   -1,  268,  273,
   -1,  269,  273,   -1,  270,  273,   -1,  271,  273,   -1,
  272,  273,   -1,  278,  273,   -1,  286,  273,   -1,  250,
  276,   -1,  251,  276,   -1,  252,  276,   -1,  253,  276,
   -1,  254,  276,   -1,  255,  276,   -1,  256,  276,   -1,
  257,  276,   -1,  258,  276,   -1,  259,  276,   -1,  260,
  276,   -1,  261,  276,   -1,  262,  276,   -1,  263,  276,
   -1,  264,  276,   -1,  265,  276,   -1,  266,  276,   -1,
  267,  276,   -1,  268,  276,   -1,  269,  276,   -1,  270,
  276,   -1,  271,  276,   -1,  272,  276,   -1,  278,  276,
   -1,  286,  276,   -1,  250,  277,   -1,  251,  277,   -1,
  252,  277,   -1,  253,  277,   -1,  254,  277,   -1,  255,
  277,   -1,  256,  277,   -1,  257,  277,   -1,  258,  277,
   -1,  259,  277,   -1,  260,  277,   -1,  261,  277,   -1,
  262,  277,   -1,  263,  277,   -1,  264,  277,   -1,  265,
  277,   -1,  266,  277,   -1,  267,  277,   -1,  268,  277,
   -1,  269,  277,   -1,  270,  277,   -1,  271,  277,   -1,
  272,  277,   -1,  278,  277,   -1,  286,  277,   -1,  352,
   61,   -1,  250,  274,   -1,  251,  274,   -1,  252,  274,
   -1,  253,  274,   -1,  254,  274,   -1,  255,  274,   -1,
  256,  274,   -1,  257,  274,   -1,  258,  274,   -1,  259,
  274,   -1,  260,  274,   -1,  261,  274,   -1,  262,  274,
   -1,  263,  274,   -1,  264,  274,   -1,  265,  274,   -1,
  266,  274,   -1,  267,  274,   -1,  268,  274,   -1,  269,
  274,   -1,  270,  274,   -1,  271,  274,   -1,  272,  274,
   -1,  278,  274,   -1,  286,  274,   -1,  250,  275,   -1,
  251,  275,   -1,  252,  275,   -1,  253,  275,   -1,  254,
  275,   -1,  255,  275,   -1,  256,  275,   -1,  257,  275,
   -1,  258,  275,   -1,  259,  275,   -1,  260,  275,   -1,
  261,  275,   -1,  262,  275,   -1,  263,  275,   -1,  264,
  275,   -1,  265,  275,   -1,  266,  275,   -1,  267,  275,
   -1,  268,  275,   -1,  269,  275,   -1,  270,  275,   -1,
  271,  275,   -1,  272,  275,   -1,  278,  275,   -1,  286,
  275,   -1,  250,  323,   -1,  251,  323,   -1,  252,  323,
   -1,  253,  323,   -1,  254,  323,   -1,  255,  323,   -1,
  256,  323,   -1,  257,  323,   -1,  258,  323,   -1,  259,
  323,   -1,  260,  323,   -1,  261,  323,   -1,  262,  323,
   -1,  263,  323,   -1,  264,  323,   -1,  265,  323,   -1,
  266,  323,   -1,  267,  323,   -1,  268,  323,   -1,  269,
  323,   -1,  270,  323,   -1,  271,  323,   -1,  272,  323,
   -1,  273,  323,   -1,  274,  323,   -1,  275,  323,   -1,
  276,  323,   -1,  277,  323,   -1,  278,  323,   -1,  279,
  323,   -1,  280,  323,   -1,  281,  323,   -1,  282,  323,
   -1,  283,  323,   -1,  284,  323,   -1,  286,  323,   -1,
  250,  324,   -1,  251,  324,   -1,  252,  324,   -1,  253,
  324,   -1,  254,  324,   -1,  255,  324,   -1,  256,  324,
   -1,  257,  324,   -1,  258,  324,   -1,  259,  324,   -1,
  260,  324,   -1,  261,  324,   -1,  262,  324,   -1,  263,
  324,   -1,  264,  324,   -1,  265,  324,   -1,  266,  324,
   -1,  267,  324,   -1,  268,  324,   -1,  269,  324,   -1,
  270,  324,   -1,  271,  324,   -1,  272,  324,   -1,  273,
  324,   -1,  274,  324,   -1,  275,  324,   -1,  276,  324,
   -1,  277,  324,   -1,  278,  324,   -1,  279,  324,   -1,
  280,  324,   -1,  281,  324,   -1,  282,  324,   -1,  283,
  324,   -1,  284,  324,   -1,  286,  324,   -1,  250,  326,
   -1,  251,  326,   -1,  252,  326,   -1,  253,  326,   -1,
  254,  326,   -1,  255,  326,   -1,  256,  326,   -1,  257,
  326,   -1,  258,  326,   -1,  259,  326,   -1,  260,  326,
   -1,  261,  326,   -1,  262,  326,   -1,  263,  326,   -1,
  264,  326,   -1,  265,  326,   -1,  266,  326,   -1,  267,
  326,   -1,  268,  326,   -1,  269,  326,   -1,  270,  326,
   -1,  271,  326,   -1,  272,  326,   -1,  273,  326,   -1,
  274,  326,   -1,  275,  326,   -1,  276,  326,   -1,  277,
  326,   -1,  278,  326,   -1,  279,  326,   -1,  280,  326,
   -1,  281,  326,   -1,  282,  326,   -1,  283,  326,   -1,
  284,  326,   -1,  286,  326,   -1,  110,  258,   -1,   35,
  190,   -1,   40,  190,   -1,  396,   61,  259,   -1,   61,
  259,   -1,  203,  204,   -1,  292,  203,   -1,  324,  201,
   -1,  115,  257,   -1,  479,   44,   -1,  480,   44,   -1,
  481,   44,   -1,  482,   44,   -1,  493,   61,   -1,  321,
   63,   -1,  219,   63,   -1,  220,   63,   -1,  250,  294,
   -1,  251,  294,   -1,  252,  294,   -1,  253,  294,   -1,
  254,  294,   -1,  255,  294,   -1,  256,  294,   -1,  257,
  294,   -1,  258,  294,   -1,  259,  294,   -1,  260,  294,
   -1,  261,  294,   -1,  262,  294,   -1,  263,  294,   -1,
  264,  294,   -1,  265,  294,   -1,  266,  294,   -1,  267,
  294,   -1,  268,  294,   -1,  269,  294,   -1,  270,  294,
   -1,  271,  294,   -1,  272,  294,   -1,  273,  294,   -1,
  274,  294,   -1,  275,  294,   -1,  276,  294,   -1,  277,
  294,   -1,  278,  294,   -1,  279,  294,   -1,  280,  294,
   -1,  281,  294,   -1,  282,  294,   -1,  283,  294,   -1,
  284,  294,   -1,  286,  294,   -1,  250,  295,   -1,  251,
  295,   -1,  252,  295,   -1,  253,  295,   -1,  254,  295,
   -1,  255,  295,   -1,  256,  295,   -1,  257,  295,   -1,
  258,  295,   -1,  259,  295,   -1,  260,  295,   -1,  261,
  295,   -1,  262,  295,   -1,  263,  295,   -1,  264,  295,
   -1,  265,  295,   -1,  266,  295,   -1,  267,  295,   -1,
  268,  295,   -1,  269,  295,   -1,  270,  295,   -1,  271,
  295,   -1,  272,  295,   -1,  273,  295,   -1,  274,  295,
   -1,  275,  295,   -1,  276,  295,   -1,  277,  295,   -1,
  278,  295,   -1,  279,  295,   -1,  280,  295,   -1,  281,
  295,   -1,  282,  295,   -1,  283,  295,   -1,  284,  295,
   -1,  286,  295,   -1,  250,  296,   -1,  251,  296,   -1,
  252,  296,   -1,  253,  296,   -1,  254,  296,   -1,  255,
  296,   -1,  256,  296,   -1,  257,  296,   -1,  258,  296,
   -1,  259,  296,   -1,  260,  296,   -1,  261,  296,   -1,
  262,  296,   -1,  263,  296,   -1,  264,  296,   -1,  265,
  296,   -1,  266,  296,   -1,  267,  296,   -1,  268,  296,
   -1,  269,  296,   -1,  270,  296,   -1,  271,  296,   -1,
  272,  296,   -1,  273,  296,   -1,  274,  296,   -1,  275,
  296,   -1,  276,  296,   -1,  277,  296,   -1,  278,  296,
   -1,  279,  296,   -1,  280,  296,   -1,  281,  296,   -1,
  282,  296,   -1,  283,  296,   -1,  284,  296,   -1,  286,
  296,   -1,  250,  297,   -1,  251,  297,   -1,  252,  297,
   -1,  253,  297,   -1,  254,  297,   -1,  255,  297,   -1,
  256,  297,   -1,  257,  297,   -1,  258,  297,   -1,  259,
  297,   -1,  260,  297,   -1,  261,  297,   -1,  262,  297,
   -1,  263,  297,   -1,  264,  297,   -1,  265,  297,   -1,
  266,  297,   -1,  267,  297,   -1,  268,  297,   -1,  269,
  297,   -1,  270,  297,   -1,  271,  297,   -1,  272,  297,
   -1,  273,  297,   -1,  274,  297,   -1,  275,  297,   -1,
  276,  297,   -1,  277,  297,   -1,  278,  297,   -1,  279,
  297,   -1,  280,  297,   -1,  281,  297,   -1,  282,  297,
   -1,  283,  297,   -1,  284,  297,   -1,  286,  297,   -1,
  250,  298,   -1,  251,  298,   -1,  252,  298,   -1,  253,
  298,   -1,  254,  298,   -1,  255,  298,   -1,  256,  298,
   -1,  257,  298,   -1,  258,  298,   -1,  259,  298,   -1,
  260,  298,   -1,  261,  298,   -1,  262,  298,   -1,  263,
  298,   -1,  264,  298,   -1,  265,  298,   -1,  266,  298,
   -1,  267,  298,   -1,  268,  298,   -1,  269,  298,   -1,
  270,  298,   -1,  271,  298,   -1,  272,  298,   -1,  273,
  298,   -1,  274,  298,   -1,  275,  298,   -1,  276,  298,
   -1,  277,  298,   -1,  278,  298,   -1,  279,  298,   -1,
  280,  298,   -1,  281,  298,   -1,  282,  298,   -1,  283,
  298,   -1,  284,  298,   -1,  286,  298,   -1,  250,  299,
   -1,  251,  299,   -1,  252,  299,   -1,  253,  299,   -1,
  254,  299,   -1,  255,  299,   -1,  256,  299,   -1,  257,
  299,   -1,  258,  299,   -1,  259,  299,   -1,  260,  299,
   -1,  261,  299,   -1,  262,  299,   -1,  263,  299,   -1,
  264,  299,   -1,  265,  299,   -1,  266,  299,   -1,  267,
  299,   -1,  268,  299,   -1,  269,  299,   -1,  270,  299,
   -1,  271,  299,   -1,  272,  299,   -1,  273,  299,   -1,
  274,  299,   -1,  275,  299,   -1,  276,  299,   -1,  277,
  299,   -1,  278,  299,   -1,  279,  299,   -1,  280,  299,
   -1,  281,  299,   -1,  282,  299,   -1,  283,  299,   -1,
  284,  299,   -1,  286,  299,   -1,  250,  300,   -1,  251,
  300,   -1,  252,  300,   -1,  253,  300,   -1,  254,  300,
   -1,  255,  300,   -1,  256,  300,   -1,  257,  300,   -1,
  258,  300,   -1,  259,  300,   -1,  260,  300,   -1,  261,
  300,   -1,  262,  300,   -1,  263,  300,   -1,  264,  300,
   -1,  265,  300,   -1,  266,  300,   -1,  267,  300,   -1,
  268,  300,   -1,  269,  300,   -1,  270,  300,   -1,  271,
  300,   -1,  272,  300,   -1,  273,  300,   -1,  274,  300,
   -1,  275,  300,   -1,  276,  300,   -1,  277,  300,   -1,
  278,  300,   -1,  279,  300,   -1,  280,  300,   -1,  281,
  300,   -1,  282,  300,   -1,  283,  300,   -1,  284,  300,
   -1,  286,  300,   -1,  250,  301,   -1,  251,  301,   -1,
  252,  301,   -1,  253,  301,   -1,  254,  301,   -1,  255,
  301,   -1,  256,  301,   -1,  257,  301,   -1,  258,  301,
   -1,  259,  301,   -1,  260,  301,   -1,  261,  301,   -1,
  262,  301,   -1,  263,  301,   -1,  264,  301,   -1,  265,
  301,   -1,  266,  301,   -1,  267,  301,   -1,  268,  301,
   -1,  269,  301,   -1,  270,  301,   -1,  271,  301,   -1,
  272,  301,   -1,  273,  301,   -1,  274,  301,   -1,  275,
  301,   -1,  276,  301,   -1,  277,  301,   -1,  278,  301,
   -1,  279,  301,   -1,  280,  301,   -1,  281,  301,   -1,
  282,  301,   -1,  283,  301,   -1,  284,  301,   -1,  286,
  301,   -1,  250,  302,   -1,  251,  302,   -1,  252,  302,
   -1,  253,  302,   -1,  254,  302,   -1,  255,  302,   -1,
  256,  302,   -1,  257,  302,   -1,  258,  302,   -1,  259,
  302,   -1,  260,  302,   -1,  261,  302,   -1,  262,  302,
   -1,  263,  302,   -1,  264,  302,   -1,  265,  302,   -1,
  266,  302,   -1,  267,  302,   -1,  268,  302,   -1,  269,
  302,   -1,  270,  302,   -1,  271,  302,   -1,  272,  302,
   -1,  278,  302,   -1,  286,  302,   -1,  250,  303,   -1,
  251,  303,   -1,  252,  303,   -1,  253,  303,   -1,  254,
  303,   -1,  255,  303,   -1,  256,  303,   -1,  257,  303,
   -1,  258,  303,   -1,  259,  303,   -1,  260,  303,   -1,
  261,  303,   -1,  262,  303,   -1,  263,  303,   -1,  264,
  303,   -1,  265,  303,   -1,  266,  303,   -1,  267,  303,
   -1,  268,  303,   -1,  269,  303,   -1,  270,  303,   -1,
  271,  303,   -1,  272,  303,   -1,  278,  303,   -1,  286,
  303,   -1,  250,  304,   -1,  251,  304,   -1,  252,  304,
   -1,  253,  304,   -1,  254,  304,   -1,  255,  304,   -1,
  256,  304,   -1,  257,  304,   -1,  258,  304,   -1,  259,
  304,   -1,  260,  304,   -1,  261,  304,   -1,  262,  304,
   -1,  263,  304,   -1,  264,  304,   -1,  265,  304,   -1,
  266,  304,   -1,  267,  304,   -1,  268,  304,   -1,  269,
  304,   -1,  270,  304,   -1,  271,  304,   -1,  272,  304,
   -1,  273,  304,   -1,  274,  304,   -1,  275,  304,   -1,
  276,  304,   -1,  277,  304,   -1,  278,  304,   -1,  279,
  304,   -1,  280,  304,   -1,  281,  304,   -1,  282,  304,
   -1,  283,  304,   -1,  284,  304,   -1,  286,  304,   -1,
  250,  305,   -1,  251,  305,   -1,  252,  305,   -1,  253,
  305,   -1,  254,  305,   -1,  255,  305,   -1,  256,  305,
   -1,  257,  305,   -1,  258,  305,   -1,  259,  305,   -1,
  260,  305,   -1,  261,  305,   -1,  262,  305,   -1,  263,
  305,   -1,  264,  305,   -1,  265,  305,   -1,  266,  305,
   -1,  267,  305,   -1,  268,  305,   -1,  269,  305,   -1,
  270,  305,   -1,  271,  305,   -1,  272,  305,   -1,  273,
  305,   -1,  274,  305,   -1,  275,  305,   -1,  276,  305,
   -1,  277,  305,   -1,  278,  305,   -1,  279,  305,   -1,
  280,  305,   -1,  281,  305,   -1,  282,  305,   -1,  283,
  305,   -1,  284,  305,   -1,  286,  305,   -1,  250,  306,
   -1,  251,  306,   -1,  252,  306,   -1,  253,  306,   -1,
  254,  306,   -1,  255,  306,   -1,  256,  306,   -1,  257,
  306,   -1,  258,  306,   -1,  259,  306,   -1,  260,  306,
   -1,  261,  306,   -1,  262,  306,   -1,  263,  306,   -1,
  264,  306,   -1,  265,  306,   -1,  266,  306,   -1,  267,
  306,   -1,  268,  306,   -1,  269,  306,   -1,  270,  306,
   -1,  271,  306,   -1,  272,  306,   -1,  278,  306,   -1,
  286,  306,   -1,  250,  307,   -1,  251,  307,   -1,  252,
  307,   -1,  253,  307,   -1,  254,  307,   -1,  255,  307,
   -1,  256,  307,   -1,  257,  307,   -1,  258,  307,   -1,
  259,  307,   -1,  260,  307,   -1,  261,  307,   -1,  262,
  307,   -1,  263,  307,   -1,  264,  307,   -1,  265,  307,
   -1,  266,  307,   -1,  267,  307,   -1,  268,  307,   -1,
  269,  307,   -1,  270,  307,   -1,  271,  307,   -1,  272,
  307,   -1,  273,  307,   -1,  274,  307,   -1,  275,  307,
   -1,  276,  307,   -1,  277,  307,   -1,  278,  307,   -1,
  279,  307,   -1,  280,  307,   -1,  281,  307,   -1,  282,
  307,   -1,  283,  307,   -1,  284,  307,   -1,  286,  307,
   -1,  250,  308,   -1,  251,  308,   -1,  252,  308,   -1,
  253,  308,   -1,  254,  308,   -1,  255,  308,   -1,  256,
  308,   -1,  257,  308,   -1,  258,  308,   -1,  259,  308,
   -1,  260,  308,   -1,  261,  308,   -1,  262,  308,   -1,
  263,  308,   -1,  264,  308,   -1,  265,  308,   -1,  266,
  308,   -1,  267,  308,   -1,  268,  308,   -1,  269,  308,
   -1,  270,  308,   -1,  271,  308,   -1,  272,  308,   -1,
  273,  308,   -1,  274,  308,   -1,  275,  308,   -1,  276,
  308,   -1,  277,  308,   -1,  278,  308,   -1,  279,  308,
   -1,  280,  308,   -1,  281,  308,   -1,  282,  308,   -1,
  283,  308,   -1,  284,  308,   -1,  286,  308,   -1,  250,
  309,   -1,  251,  309,   -1,  252,  309,   -1,  253,  309,
   -1,  254,  309,   -1,  255,  309,   -1,  256,  309,   -1,
  257,  309,   -1,  258,  309,   -1,  259,  309,   -1,  260,
  309,   -1,  261,  309,   -1,  262,  309,   -1,  263,  309,
   -1,  264,  309,   -1,  265,  309,   -1,  266,  309,   -1,
  267,  309,   -1,  268,  309,   -1,  269,  309,   -1,  270,
  309,   -1,  271,  309,   -1,  272,  309,   -1,  273,  309,
   -1,  274,  309,   -1,  275,  309,   -1,  276,  309,   -1,
  277,  309,   -1,  278,  309,   -1,  279,  309,   -1,  280,
  309,   -1,  281,  309,   -1,  282,  309,   -1,  283,  309,
   -1,  284,  309,   -1,  286,  309,   -1,  250,  310,   -1,
  251,  310,   -1,  252,  310,   -1,  253,  310,   -1,  254,
  310,   -1,  255,  310,   -1,  256,  310,   -1,  257,  310,
   -1,  258,  310,   -1,  259,  310,   -1,  260,  310,   -1,
  261,  310,   -1,  262,  310,   -1,  263,  310,   -1,  264,
  310,   -1,  265,  310,   -1,  266,  310,   -1,  267,  310,
   -1,  268,  310,   -1,  269,  310,   -1,  270,  310,   -1,
  271,  310,   -1,  272,  310,   -1,  273,  310,   -1,  274,
  310,   -1,  275,  310,   -1,  276,  310,   -1,  277,  310,
   -1,  278,  310,   -1,  279,  310,   -1,  280,  310,   -1,
  281,  310,   -1,  282,  310,   -1,  283,  310,   -1,  284,
  310,   -1,  286,  310,   -1,  250,  312,   -1,  251,  312,
   -1,  252,  312,   -1,  253,  312,   -1,  254,  312,   -1,
  255,  312,   -1,  256,  312,   -1,  257,  312,   -1,  258,
  312,   -1,  259,  312,   -1,  260,  312,   -1,  261,  312,
   -1,  262,  312,   -1,  263,  312,   -1,  264,  312,   -1,
  265,  312,   -1,  266,  312,   -1,  267,  312,   -1,  268,
  312,   -1,  269,  312,   -1,  270,  312,   -1,  271,  312,
   -1,  272,  312,   -1,  278,  312,   -1,  286,  312,   -1,
  250,  313,   -1,  251,  313,   -1,  252,  313,   -1,  253,
  313,   -1,  254,  313,   -1,  255,  313,   -1,  256,  313,
   -1,  257,  313,   -1,  258,  313,   -1,  259,  313,   -1,
  260,  313,   -1,  261,  313,   -1,  262,  313,   -1,  263,
  313,   -1,  264,  313,   -1,  265,  313,   -1,  266,  313,
   -1,  267,  313,   -1,  268,  313,   -1,  269,  313,   -1,
  270,  313,   -1,  271,  313,   -1,  272,  313,   -1,  273,
  313,   -1,  274,  313,   -1,  275,  313,   -1,  276,  313,
   -1,  277,  313,   -1,  278,  313,   -1,  279,  313,   -1,
  280,  313,   -1,  281,  313,   -1,  282,  313,   -1,  283,
  313,   -1,  284,  313,   -1,  286,  313,   -1,  250,  291,
   -1,  251,  291,   -1,  252,  291,   -1,  253,  291,   -1,
  254,  291,   -1,  255,  291,   -1,  256,  291,   -1,  257,
  291,   -1,  258,  291,   -1,  259,  291,   -1,  260,  291,
   -1,  261,  291,   -1,  262,  291,   -1,  263,  291,   -1,
  264,  291,   -1,  265,  291,   -1,  266,  291,   -1,  267,
  291,   -1,  268,  291,   -1,  269,  291,   -1,  270,  291,
   -1,  271,  291,   -1,  272,  291,   -1,  273,  291,   -1,
  274,  291,   -1,  275,  291,   -1,  276,  291,   -1,  277,
  291,   -1,  278,  291,   -1,  279,  291,   -1,  280,  291,
   -1,  281,  291,   -1,  282,  291,   -1,  283,  291,   -1,
  284,  291,   -1,  286,  291,   -1,  250,  292,   -1,  251,
  292,   -1,  252,  292,   -1,  253,  292,   -1,  254,  292,
   -1,  255,  292,   -1,  256,  292,   -1,  257,  292,   -1,
  258,  292,   -1,  259,  292,   -1,  260,  292,   -1,  261,
  292,   -1,  262,  292,   -1,  263,  292,   -1,  264,  292,
   -1,  265,  292,   -1,  266,  292,   -1,  267,  292,   -1,
  268,  292,   -1,  269,  292,   -1,  270,  292,   -1,  271,
  292,   -1,  272,  292,   -1,  273,  292,   -1,  274,  292,
   -1,  275,  292,   -1,  276,  292,   -1,  277,  292,   -1,
  278,  292,   -1,  279,  292,   -1,  280,  292,   -1,  281,
  292,   -1,  282,  292,   -1,  283,  292,   -1,  284,  292,
   -1,  286,  292,   -1,  250,  282,   -1,  251,  282,   -1,
  252,  282,   -1,  253,  282,   -1,  254,  282,   -1,  255,
  282,   -1,  256,  282,   -1,  257,  282,   -1,  258,  282,
   -1,  259,  282,   -1,  260,  282,   -1,  261,  282,   -1,
  262,  282,   -1,  263,  282,   -1,  264,  282,   -1,  265,
  282,   -1,  266,  282,   -1,  267,  282,   -1,  268,  282,
   -1,  269,  282,   -1,  270,  282,   -1,  271,  282,   -1,
  272,  282,   -1,  278,  282,   -1,  286,  282,   -1,  250,
  283,   -1,  251,  283,   -1,  252,  283,   -1,  253,  283,
   -1,  254,  283,   -1,  255,  283,   -1,  256,  283,   -1,
  257,  283,   -1,  258,  283,   -1,  259,  283,   -1,  260,
  283,   -1,  261,  283,   -1,  262,  283,   -1,  263,  283,
   -1,  264,  283,   -1,  265,  283,   -1,  266,  283,   -1,
  267,  283,   -1,  268,  283,   -1,  269,  283,   -1,  270,
  283,   -1,  271,  283,   -1,  272,  283,   -1,  278,  283,
   -1,  286,  283,   -1,  250,  284,   -1,  251,  284,   -1,
  252,  284,   -1,  253,  284,   -1,  254,  284,   -1,  255,
  284,   -1,  256,  284,   -1,  257,  284,   -1,  258,  284,
   -1,  259,  284,   -1,  260,  284,   -1,  261,  284,   -1,
  262,  284,   -1,  263,  284,   -1,  264,  284,   -1,  265,
  284,   -1,  266,  284,   -1,  267,  284,   -1,  268,  284,
   -1,  269,  284,   -1,  270,  284,   -1,  271,  284,   -1,
  272,  284,   -1,  278,  284,   -1,  286,  284,   -1,  250,
  285,   -1,  251,  285,   -1,  252,  285,   -1,  253,  285,
   -1,  254,  285,   -1,  255,  285,   -1,  256,  285,   -1,
  257,  285,   -1,  258,  285,   -1,  259,  285,   -1,  260,
  285,   -1,  261,  285,   -1,  262,  285,   -1,  263,  285,
   -1,  264,  285,   -1,  265,  285,   -1,  266,  285,   -1,
  267,  285,   -1,  268,  285,   -1,  269,  285,   -1,  270,
  285,   -1,  271,  285,   -1,  272,  285,   -1,  278,  285,
   -1,  286,  285,   -1,  250,  286,   -1,  251,  286,   -1,
  252,  286,   -1,  253,  286,   -1,  254,  286,   -1,  255,
  286,   -1,  256,  286,   -1,  257,  286,   -1,  258,  286,
   -1,  259,  286,   -1,  260,  286,   -1,  261,  286,   -1,
  262,  286,   -1,  263,  286,   -1,  264,  286,   -1,  265,
  286,   -1,  266,  286,   -1,  267,  286,   -1,  268,  286,
   -1,  269,  286,   -1,  270,  286,   -1,  271,  286,   -1,
  272,  286,   -1,  278,  286,   -1,  286,  286,   -1,  250,
  289,   -1,  251,  289,   -1,  252,  289,   -1,  253,  289,
   -1,  254,  289,   -1,  255,  289,   -1,  256,  289,   -1,
  257,  289,   -1,  258,  289,   -1,  259,  289,   -1,  260,
  289,   -1,  261,  289,   -1,  262,  289,   -1,  263,  289,
   -1,  264,  289,   -1,  265,  289,   -1,  266,  289,   -1,
  267,  289,   -1,  268,  289,   -1,  269,  289,   -1,  270,
  289,   -1,  271,  289,   -1,  272,  289,   -1,  273,  289,
   -1,  274,  289,   -1,  275,  289,   -1,  276,  289,   -1,
  277,  289,   -1,  278,  289,   -1,  279,  289,   -1,  280,
  289,   -1,  281,  289,   -1,  282,  289,   -1,  283,  289,
   -1,  284,  289,   -1,  286,  289,   -1,  250,  287,   -1,
  251,  287,   -1,  252,  287,   -1,  253,  287,   -1,  254,
  287,   -1,  255,  287,   -1,  256,  287,   -1,  257,  287,
   -1,  258,  287,   -1,  259,  287,   -1,  260,  287,   -1,
  261,  287,   -1,  262,  287,   -1,  263,  287,   -1,  264,
  287,   -1,  265,  287,   -1,  266,  287,   -1,  267,  287,
   -1,  268,  287,   -1,  269,  287,   -1,  270,  287,   -1,
  271,  287,   -1,  272,  287,   -1,  278,  287,   -1,  286,
  287,   -1,  250,  288,   -1,  251,  288,   -1,  252,  288,
   -1,  253,  288,   -1,  254,  288,   -1,  255,  288,   -1,
  256,  288,   -1,  257,  288,   -1,  258,  288,   -1,  259,
  288,   -1,  260,  288,   -1,  261,  288,   -1,  262,  288,
   -1,  263,  288,   -1,  264,  288,   -1,  265,  288,   -1,
  266,  288,   -1,  267,  288,   -1,  268,  288,   -1,  269,
  288,   -1,  270,  288,   -1,  271,  288,   -1,  272,  288,
   -1,  278,  288,   -1,  286,  288,   -1,  250,  290,   -1,
  251,  290,   -1,  252,  290,   -1,  253,  290,   -1,  254,
  290,   -1,  255,  290,   -1,  256,  290,   -1,  257,  290,
   -1,  258,  290,   -1,  259,  290,   -1,  260,  290,   -1,
  261,  290,   -1,  262,  290,   -1,  263,  290,   -1,  264,
  290,   -1,  265,  290,   -1,  266,  290,   -1,  267,  290,
   -1,  268,  290,   -1,  269,  290,   -1,  270,  290,   -1,
  271,  290,   -1,  272,  290,   -1,  278,  290,   -1,  286,
  290,   -1,  250,  311,   -1,  251,  311,   -1,  252,  311,
   -1,  253,  311,   -1,  254,  311,   -1,  255,  311,   -1,
  256,  311,   -1,  257,  311,   -1,  258,  311,   -1,  259,
  311,   -1,  260,  311,   -1,  261,  311,   -1,  262,  311,
   -1,  263,  311,   -1,  264,  311,   -1,  265,  311,   -1,
  266,  311,   -1,  267,  311,   -1,  268,  311,   -1,  269,
  311,   -1,  270,  311,   -1,  271,  311,   -1,  272,  311,
   -1,  278,  311,   -1,  286,  311,   -1,  299,  190,  258,
   -1,  250,  317,   -1,  251,  317,   -1,  252,  317,   -1,
  253,  317,   -1,  254,  317,   -1,  255,  317,   -1,  256,
  317,   -1,  257,  317,   -1,  258,  317,   -1,  259,  317,
   -1,  260,  317,   -1,  261,  317,   -1,  262,  317,   -1,
  263,  317,   -1,  264,  317,   -1,  265,  317,   -1,  266,
  317,   -1,  267,  317,   -1,  268,  317,   -1,  269,  317,
   -1,  270,  317,   -1,  271,  317,   -1,  272,  317,   -1,
  273,  317,   -1,  274,  317,   -1,  275,  317,   -1,  276,
  317,   -1,  277,  317,   -1,  278,  317,   -1,  279,  317,
   -1,  280,  317,   -1,  281,  317,   -1,  282,  317,   -1,
  283,  317,   -1,  284,  317,   -1,  286,  317,   -1,  250,
  325,   -1,  251,  325,   -1,  252,  325,   -1,  253,  325,
   -1,  254,  325,   -1,  255,  325,   -1,  256,  325,   -1,
  257,  325,   -1,  258,  325,   -1,  259,  325,   -1,  260,
  325,   -1,  261,  325,   -1,  262,  325,   -1,  263,  325,
   -1,  264,  325,   -1,  265,  325,   -1,  266,  325,   -1,
  267,  325,   -1,  268,  325,   -1,  269,  325,   -1,  270,
  325,   -1,  271,  325,   -1,  272,  325,   -1,  273,  325,
   -1,  274,  325,   -1,  275,  325,   -1,  276,  325,   -1,
  277,  325,   -1,  278,  325,   -1,  279,  325,   -1,  280,
  325,   -1,  281,  325,   -1,  282,  325,   -1,  283,  325,
   -1,  284,  325,   -1,  286,  325,   -1,  555,   61,   -1,
  528,   84,   -1,   13,   84,   -1,   14,   84,   -1,  530,
   84,   -1,  272,  255,   -1,  250,  293,   -1,  251,  293,
   -1,  252,  293,   -1,  253,  293,   -1,  254,  293,   -1,
  255,  293,   -1,  256,  293,   -1,  257,  293,   -1,  258,
  293,   -1,  259,  293,   -1,  260,  293,   -1,  261,  293,
   -1,  262,  293,   -1,  263,  293,   -1,  264,  293,   -1,
  265,  293,   -1,  266,  293,   -1,  267,  293,   -1,  268,
  293,   -1,  269,  293,   -1,  270,  293,   -1,  271,  293,
   -1,  272,  293,   -1,  273,  293,   -1,  274,  293,   -1,
  275,  293,   -1,  276,  293,   -1,  277,  293,   -1,  278,
  293,   -1,  279,  293,   -1,  280,  293,   -1,  281,  293,
   -1,  282,  293,   -1,  283,  293,   -1,  284,  293,   -1,
  286,  293,   -1,
};
#define YYFINAL 48
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 352
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID",
"tknStrLit","tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum",
"tknPreProDef","tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate",
"tknTypename","tknDocBlockComment","tknDocLineComment","tknScopeResOp",
"tknNumSignSpec","tknPublic","tknProtected","tknPrivate","tknExternC",
"tknUnRecogPrePro","tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast",
"tknStaticCast","tknDynamicCast","tknReinterpretCast","tknTry","tknCatch",
"tknThrow","tknOperator","tknPlusEq","tknMinusEq","tknMulEq","tknDivEq",
"tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift","tknRShift",
"tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq","tknGreaterEq",
"tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow","tknArrowStar",
"tknNew","tknDelete","tknConst","tknStatic","tknExtern","tknVirtual",
"tknOverride","tknInline","tknExplicit","tknFriend","tknVolatile","tknFinal",
"tknPreProHash","tknDefine","tknUndef","tknInclude","tknIf","tknIfDef",
"tknIfNDef","tknElse","tknElIf","tknEndIf","tknFor","tknWhile","tknDo",
"tknSwitch","tknCase","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT",
"ARROW","PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : typeconverterstmt",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : block",
"block : '{' stmtlist '}'",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : ifblock tknElse stmt",
"whileblock : tknWhile '(' expr ')' stmt",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"optexpr :",
"optexpr : expr",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumdefn : tknTypedef tknEnum optid '{' enumitemlist '}' tknID ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"typeconverter : tknOperator varqual '(' ')'",
"typeconverter : typeconverter tknConst",
"typeconverterstmt : typeconverter ';'",
"typeconverterstmt : typeconverter block",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl block",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer functype varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"funcname : tknOperator tknNew",
"funcname : tknOperator tknNew '[' ']'",
"funcname : tknOperator tknDelete",
"funcname : tknOperator tknDelete '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib tknFinal",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl block",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' block",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' block",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"fwddecl : tknFriend fwddecl",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC block",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr '?' expr ':' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"expr : tknThrow expr",
"expr : tknThrow",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1075 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3698 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 282 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4088 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 289 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4094 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4104 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4114 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4120 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4126 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4132 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4138 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4144 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4150 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4156 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4162 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4168 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4174 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4180 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4186 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4192 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4198 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4204 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4210 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4216 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4222 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4228 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4234 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4240 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppTypeConverter; }
#line 4246 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4252 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4258 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4264 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4270 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4276 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4282 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4288 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 331 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4294 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 334 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 4302 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 339 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4311 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 343 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = yyvsp[-2].ifBlock;
                    yyval.ifBlock->else_ = yyvsp[0].cppObj;
                  }
#line 4320 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 349 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4329 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 355 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4338 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 361 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4346 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4354 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 369 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4362 "y_tab.c"
break;
case 43:
#line 374 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4367 "y_tab.c"
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4374 "y_tab.c"
break;
case 44:
#line 378 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4379 "y_tab.c"
  if (!yytrial)
#line 378 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4386 "y_tab.c"
break;
case 45:
#line 382 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4391 "y_tab.c"
  if (!yytrial)
#line 382 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4398 "y_tab.c"
break;
case 46:
#line 386 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4403 "y_tab.c"
  if (!yytrial)
#line 386 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4410 "y_tab.c"
break;
case 47:
#line 390 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4415 "y_tab.c"
  if (!yytrial)
#line 390 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4422 "y_tab.c"
break;
case 48:
#line 394 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4427 "y_tab.c"
  if (!yytrial)
#line 394 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4434 "y_tab.c"
break;
case 49:
#line 400 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4439 "y_tab.c"
  if (!yytrial)
#line 400 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4443 "y_tab.c"
break;
case 50:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4448 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4452 "y_tab.c"
break;
case 51:
#line 404 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4457 "y_tab.c"
  if (!yytrial)
#line 404 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4461 "y_tab.c"
break;
case 52:
#line 410 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4466 "y_tab.c"
  if (!yytrial)
#line 410 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4470 "y_tab.c"
break;
case 53:
#line 411 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4475 "y_tab.c"
  if (!yytrial)
#line 411 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4479 "y_tab.c"
break;
case 54:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4484 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4488 "y_tab.c"
break;
case 55:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4493 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4497 "y_tab.c"
break;
case 56:
#line 414 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4502 "y_tab.c"
  if (!yytrial)
#line 414 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4506 "y_tab.c"
break;
case 57:
#line 415 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4511 "y_tab.c"
  if (!yytrial)
#line 415 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4515 "y_tab.c"
break;
case 58:
#line 418 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4520 "y_tab.c"
  if (!yytrial)
#line 418 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4524 "y_tab.c"
break;
case 59:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4529 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4533 "y_tab.c"
break;
case 60:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4538 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4542 "y_tab.c"
break;
case 61:
  if (!yytrial)
#line 425 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4548 "y_tab.c"
break;
case 62:
  if (!yytrial)
#line 426 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4554 "y_tab.c"
break;
case 63:
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4560 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 428 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4566 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 429 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4572 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4578 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4584 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 432 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4590 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 433 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4596 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4602 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4608 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4614 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4623 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4629 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4635 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 447 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4641 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 450 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4647 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 451 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4653 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4659 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 453 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4665 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4671 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 457 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4680 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4689 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 465 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4697 "y_tab.c"
break;
case 85:
#line 470 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4702 "y_tab.c"
  if (!yytrial)
#line 470 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4708 "y_tab.c"
break;
case 86:
#line 473 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4713 "y_tab.c"
  if (!yytrial)
#line 473 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4719 "y_tab.c"
break;
case 87:
#line 476 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4724 "y_tab.c"
  if (!yytrial)
#line 476 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4730 "y_tab.c"
break;
case 88:
#line 479 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4735 "y_tab.c"
  if (!yytrial)
#line 479 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4741 "y_tab.c"
break;
case 89:
#line 482 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4746 "y_tab.c"
  if (!yytrial)
#line 482 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].enumItemList);
                  }
#line 4752 "y_tab.c"
break;
case 90:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4757 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4763 "y_tab.c"
break;
case 91:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4768 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4774 "y_tab.c"
break;
case 92:
#line 492 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4779 "y_tab.c"
  if (!yytrial)
#line 492 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4785 "y_tab.c"
break;
case 93:
#line 497 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4790 "y_tab.c"
  if (!yytrial)
#line 497 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4794 "y_tab.c"
break;
case 94:
#line 498 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4799 "y_tab.c"
  if (!yytrial)
#line 498 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4803 "y_tab.c"
break;
case 95:
  if (!yytrial)
#line 501 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4809 "y_tab.c"
break;
case 96:
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4818 "y_tab.c"
break;
case 97:
  if (!yytrial)
#line 510 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4824 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 513 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4835 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 519 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4845 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 524 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4856 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 530 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4866 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 535 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4877 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 541 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4887 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 550 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 4895 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 553 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 4903 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 556 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 4911 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 562 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 4919 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 565 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 4928 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 569 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 4936 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 574 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 4942 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 575 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 4948 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 578 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = new CppTypeCoverter(yyvsp[-2].cppVarObj, gCurProtLevel);
                  }
#line 4956 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->attr_ |= kConst;
                  }
#line 4965 "y_tab.c"
break;
case 114:
#line 587 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4970 "y_tab.c"
  if (!yytrial)
#line 587 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                  }
#line 4976 "y_tab.c"
break;
case 115:
#line 590 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4981 "y_tab.c"
  if (!yytrial)
#line 590 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppTypeConverter = yyvsp[-1].cppTypeConverter;
                    yyval.cppTypeConverter->defn_ = yyvsp[0].cppCompundObj;
                  }
#line 4988 "y_tab.c"
break;
case 116:
#line 596 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4993 "y_tab.c"
  if (!yytrial)
#line 596 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 4997 "y_tab.c"
break;
case 117:
#line 599 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5002 "y_tab.c"
  if (!yytrial)
#line 599 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-1].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5009 "y_tab.c"
break;
case 118:
#line 605 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5014 "y_tab.c"
  if (!yytrial)
#line 605 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5021 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 610 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5031 "y_tab.c"
break;
case 120:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5041 "y_tab.c"
break;
case 121:
#line 622 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5046 "y_tab.c"
  if (!yytrial)
#line 622 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5050 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5060 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 630 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-7].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-8].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5070 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5080 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5089 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5095 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5101 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5107 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5113 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5119 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5125 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5131 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5137 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5143 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5149 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5155 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5161 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5167 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5173 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5179 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5185 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5191 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5197 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5203 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5209 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5215 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5221 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5227 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5233 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 671 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5239 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 672 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5245 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5251 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5257 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 675 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5263 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 676 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5269 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 677 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5275 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5281 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 679 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5287 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 680 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5293 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 681 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5299 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 682 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5305 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 683 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5311 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5317 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5323 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5329 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5335 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 688 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5341 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 689 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5347 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 5353 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 693 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5359 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5368 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5377 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5383 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 705 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5389 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5395 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 707 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5401 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5407 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5413 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;           }
#line 5419 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 715 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;    }
#line 5425 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 716 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5431 "y_tab.c"
break;
case 182:
  if (!yytrial)
#line 717 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;   }
#line 5437 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 718 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5443 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 719 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5449 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 722 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5455 "y_tab.c"
break;
case 186:
  if (!yytrial)
#line 723 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5461 "y_tab.c"
break;
case 187:
  if (!yytrial)
#line 724 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5467 "y_tab.c"
break;
case 188:
  if (!yytrial)
#line 725 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kFinal; }
#line 5473 "y_tab.c"
break;
case 189:
#line 726 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5478 "y_tab.c"
  if (!yytrial)
#line 727 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5482 "y_tab.c"
break;
case 190:
  if (!yytrial)
#line 730 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5488 "y_tab.c"
break;
case 191:
  if (!yytrial)
#line 731 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5494 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 732 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5500 "y_tab.c"
break;
case 193:
#line 735 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5505 "y_tab.c"
  if (!yytrial)
#line 735 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5509 "y_tab.c"
break;
case 194:
#line 741 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5514 "y_tab.c"
  if (!yytrial)
#line 742 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5522 "y_tab.c"
break;
case 195:
#line 747 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5527 "y_tab.c"
break;
case 196:
#line 751 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5532 "y_tab.c"
  if (!yytrial)
#line 752 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5539 "y_tab.c"
break;
case 197:
#line 756 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5544 "y_tab.c"
break;
case 198:
#line 760 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5549 "y_tab.c"
  if (!yytrial)
#line 761 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5556 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 765 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5565 "y_tab.c"
break;
case 200:
#line 772 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5577 "y_tab.c"
  if (!yytrial)
#line 780 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5583 "y_tab.c"
break;
case 201:
#line 783 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5588 "y_tab.c"
break;
case 202:
  if (!yytrial)
#line 784 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5596 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5605 "y_tab.c"
break;
case 204:
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5611 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 794 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5617 "y_tab.c"
break;
case 206:
  if (!yytrial)
#line 795 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5623 "y_tab.c"
break;
case 207:
#line 798 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5628 "y_tab.c"
  if (!yytrial)
#line 798 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5632 "y_tab.c"
break;
case 208:
#line 801 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5637 "y_tab.c"
  if (!yytrial)
#line 802 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-1].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5644 "y_tab.c"
break;
case 209:
#line 806 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5649 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 808 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-7].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-7].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5658 "y_tab.c"
break;
case 211:
#line 812 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5663 "y_tab.c"
break;
case 212:
  if (!yytrial)
#line 814 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-4].str.sz+yyvsp[-4].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[0].cppCompundObj ? yyvsp[0].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5672 "y_tab.c"
break;
case 213:
#line 821 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5684 "y_tab.c"
  if (!yytrial)
#line 829 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5692 "y_tab.c"
break;
case 214:
#line 835 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5704 "y_tab.c"
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5712 "y_tab.c"
break;
case 215:
#line 849 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5724 "y_tab.c"
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5732 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 864 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5742 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 869 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5751 "y_tab.c"
break;
case 218:
#line 875 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5756 "y_tab.c"
  if (!yytrial)
#line 875 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5760 "y_tab.c"
break;
case 219:
#line 878 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5765 "y_tab.c"
  if (!yytrial)
#line 878 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5769 "y_tab.c"
break;
case 220:
#line 879 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5774 "y_tab.c"
  if (!yytrial)
#line 879 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5778 "y_tab.c"
break;
case 221:
#line 880 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5783 "y_tab.c"
  if (!yytrial)
#line 880 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5787 "y_tab.c"
break;
case 222:
  if (!yytrial)
#line 883 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5793 "y_tab.c"
break;
case 223:
  if (!yytrial)
#line 884 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5799 "y_tab.c"
break;
case 224:
  if (!yytrial)
#line 887 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5805 "y_tab.c"
break;
case 225:
  if (!yytrial)
#line 888 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5811 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 891 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5817 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5823 "y_tab.c"
break;
case 228:
  if (!yytrial)
#line 893 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5829 "y_tab.c"
break;
case 229:
#line 896 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5834 "y_tab.c"
  if (!yytrial)
#line 896 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5838 "y_tab.c"
break;
case 230:
#line 898 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5848 "y_tab.c"
  if (!yytrial)
#line 904 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5854 "y_tab.c"
break;
case 231:
#line 910 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5859 "y_tab.c"
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5863 "y_tab.c"
break;
case 232:
#line 912 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5868 "y_tab.c"
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5881 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5890 "y_tab.c"
break;
case 234:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5896 "y_tab.c"
break;
case 235:
#line 930 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5901 "y_tab.c"
  if (!yytrial)
#line 930 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5905 "y_tab.c"
break;
case 236:
#line 931 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5910 "y_tab.c"
  if (!yytrial)
#line 931 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5914 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5920 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 935 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5926 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 936 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5932 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 937 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5938 "y_tab.c"
break;
case 241:
#line 940 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5943 "y_tab.c"
  if (!yytrial)
#line 940 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5947 "y_tab.c"
break;
case 242:
#line 941 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5952 "y_tab.c"
  if (!yytrial)
#line 941 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5956 "y_tab.c"
break;
case 243:
#line 942 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5961 "y_tab.c"
  if (!yytrial)
#line 942 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = yyvsp[0].fwdDeclObj; yyval.fwdDeclObj->attr_ = kFriend; }
#line 5965 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5971 "y_tab.c"
break;
case 245:
  if (!yytrial)
#line 946 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5977 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 947 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 5983 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 948 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 5989 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 5997 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6006 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 960 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6015 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6021 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6027 "y_tab.c"
break;
case 253:
#line 970 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6032 "y_tab.c"
  if (!yytrial)
#line 970 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6038 "y_tab.c"
break;
case 254:
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6046 "y_tab.c"
break;
case 255:
  if (!yytrial)
#line 978 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6055 "y_tab.c"
break;
case 256:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6061 "y_tab.c"
break;
case 257:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6067 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 6073 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6079 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6085 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6091 "y_tab.c"
break;
case 262:
#line 994 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6096 "y_tab.c"
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6100 "y_tab.c"
break;
case 263:
#line 995 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6105 "y_tab.c"
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6109 "y_tab.c"
break;
case 264:
#line 996 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6114 "y_tab.c"
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6118 "y_tab.c"
break;
case 265:
#line 999 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6123 "y_tab.c"
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[0].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6127 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6133 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6139 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6145 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6151 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6157 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6163 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6169 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6175 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6181 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6187 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6193 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6199 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6205 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6211 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6217 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6223 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6229 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6235 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6241 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6247 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6253 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6259 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1026 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6265 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6271 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6277 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6283 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6289 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppExprObj);                       }
#line 6295 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6301 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6307 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6313 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6319 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6325 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6331 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6337 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6343 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6349 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6355 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6361 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6367 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1044 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6373 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1045 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6379 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6385 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1047 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6391 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1048 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6397 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1050 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6403 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1051 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6409 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1052 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6415 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1053 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6421 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1054 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6427 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1055 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6433 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1056 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6439 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1057 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6445 "y_tab.c"
break;
case 319:
  if (!yytrial)
#line 1058 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6451 "y_tab.c"
break;
case 320:
  if (!yytrial)
#line 1059 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6457 "y_tab.c"
break;
case 321:
  if (!yytrial)
#line 1060 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6463 "y_tab.c"
break;
case 322:
  if (!yytrial)
#line 1061 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6469 "y_tab.c"
break;
case 323:
  if (!yytrial)
#line 1062 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6475 "y_tab.c"
break;
case 324:
  if (!yytrial)
#line 1063 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6481 "y_tab.c"
break;
case 325:
  if (!yytrial)
#line 1064 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6487 "y_tab.c"
break;
case 326:
  if (!yytrial)
#line 1065 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6493 "y_tab.c"
break;
case 327:
  if (!yytrial)
#line 1066 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6499 "y_tab.c"
break;
case 328:
  if (!yytrial)
#line 1067 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kThrow;             }
#line 6505 "y_tab.c"
break;
case 329:
  if (!yytrial)
#line 1068 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kThrow);   }
#line 6511 "y_tab.c"
break;
case 330:
#line 1071 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6516 "y_tab.c"
  if (!yytrial)
#line 1071 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6520 "y_tab.c"
break;
#line 6522 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
