#line 8 "btyaccpa.ske"

//
// @(#)btyaccpar, based on byacc 1.8 (Berkeley)
//
#define YYBTYACC 1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int Yshort;

#line 25 "/home/dassat/github/cppparser/parser.y"
#include "cpptoken.h"
#include "cppdom.h"
#include "parser.tab.h"
#include "cppobjfactory.h"

#include <stack>

/*////////////////////////////////////////////////////////////////////////*/

#ifndef NDEBUG
#  define YYDEBUG 1
#else 
#  define YYDEBUG 0
#endif /*#ifndef NDEBUG*/

#define YYERROR_DETAILED

#define YYDELETEPOSN(x, y)
#define YYDELETEVAL(x, y)

#ifndef TRUE /* Need this to fix BtYacc compilation error.*/
#  define TRUE true
#endif

static int gLog = 0;
#define ZZVALID   \
  if (gLog) \
    printf("YYVALID @line#%d\n", __LINE__); \
  YYVALID
  
/** {Globals} */
/**
* A program unit is the entire parse tree of a source/header file
*/
static CppCompound*  gProgUnit;

/**
* A stack to know where (i.e. how deep inside class defnition) the current parsing activity is taking place.
*/
typedef std::stack<CppToken>        CppCompoundStack;
static CppCompoundStack             gCompoundStack;

static CppObjProtLevel              gCurProtLevel;
static std::stack<CppObjProtLevel>  gProtLevelStack;

extern CppObjFactory*               gObjFactory;

/** {End of Globals} */

template<typename... Params>
CppCompound* newCompound(Params... params)
{
  return gObjFactory->CreateCompound(params...);
}

template<typename... Params>
CppConstructor* newConstructor(Params... params)
{
  return gObjFactory->CreateConstructor(params...);
}

template<typename... Params>
CppDestructor* newDestructor(Params... params)
{
  return gObjFactory->CreateDestructor(params...);
}

template<typename... Params>
CppFunction* newFunction(Params... params)
{
  return gObjFactory->CreateFunction(params...);
}

#define YYPOSN char*
/**
* To track the line being parsed so that we can emit precise location of parsing error.
*/
int gLineNo = 1;

extern int yylex();

#line 111 "/home/dassat/github/cppparser/parser.y"
#line 98 "y_tab.c"
static int yylhs[] = {                                        -1,
    0,   26,   26,   26,   26,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,   39,   39,   40,   40,   41,   41,   42,
   42,   38,   38,   72,   72,   67,   67,   67,   67,   67,
   67,   68,   69,   69,   70,   70,   70,   70,   70,   70,
   71,   35,   35,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    3,    4,    4,   11,
   11,   11,   11,   11,   12,   12,   12,   12,    9,    9,
    9,    9,   10,   10,   10,   25,   25,   24,   23,   16,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   14,
   14,   14,   60,   60,   46,   47,    8,   43,   43,   44,
   45,   45,   45,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   22,   22,   22,   18,   18,   18,   18,
   19,   19,   62,   62,   62,   62,   62,   62,   61,   61,
   61,   61,   59,   59,   59,   49,   50,   73,   50,   74,
   50,   50,   48,   75,   48,   48,   54,   54,   54,   52,
   53,   76,   53,   77,   53,   51,   51,   51,   20,   20,
   21,   17,   17,   17,   56,   56,   57,   57,   58,   58,
   58,   28,   28,   78,   27,   27,   63,   63,   63,   64,
   64,   64,   64,   13,   13,   55,   55,   55,   55,   30,
   31,   31,   32,   32,   33,   33,   34,    6,    6,    1,
    1,    1,    1,   65,   65,   65,   29,   66,   66,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   37,
};
static int yylen[] = {                                         2,
    1,    0,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    7,    5,    7,    6,    8,    9,
   11,    0,    1,    1,    2,    4,    3,    4,    4,    4,
    4,    3,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    1,    1,    1,    2,    3,    1,    2,    1,    2,
    2,    2,    2,    1,    2,    4,    1,    0,    1,    1,
    3,    1,    1,    1,    0,    2,    3,    2,    6,    8,
    9,    7,    5,    6,    4,    2,    2,    3,    6,    3,
    4,    3,    6,    5,    5,    4,    3,    3,    3,    6,
    9,    8,    1,    1,    2,    4,    3,   11,   10,    2,
    9,    8,    2,    1,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    3,    0,    1,    3,    1,    1,    1,    1,
    1,    1,    0,    2,    2,    2,    2,    2,    0,    2,
    2,    3,    0,    1,    1,    2,    5,    0,   11,    0,
   13,    2,    4,    0,    6,    2,    0,    5,    6,    2,
    4,    0,   10,    0,   12,    4,    5,    7,    8,    8,
    2,    2,    2,    3,    0,    1,    1,    2,    0,    1,
    2,    2,    1,    0,    8,    2,    0,    3,    4,    0,
    1,    1,    1,    3,    4,    1,    1,    1,    1,    4,
    1,    3,    1,    1,    2,    2,    3,    1,    1,    0,
    1,    4,    2,    2,    2,    2,    4,    1,    3,    1,
    1,    1,    1,    3,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    4,    3,    4,    4,    7,    7,
    7,    7,    3,    2,    2,    4,    2,    1,    2,
};
static int yydefred[] = {                                      0,
    0,  260,  261,  262,    0,    0,    0,    0,    0,    0,
  239,    0,   62,   63,    0,    0,    0,   74,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  184,  113,  114,    0,  185,    0,    0,    0,    0,
    0,    0,    0,    0,   44,    0,    0,    0,    0,    0,
  263,    3,   27,    8,    9,   12,    0,    0,    0,    6,
    0,    7,    0,    0,   10,    0,    0,   11,   26,    0,
   13,    0,   14,   15,   16,   17,   18,    0,   19,    0,
   20,   21,    0,   22,   23,    0,   24,   25,    0,    0,
    0,    0,   28,   29,   30,   31,   32,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  138,  139,  140,  141,
  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
  152,  153,  154,  155,  156,  157,  158,  160,  161,  136,
  137,  125,  126,  127,  128,  129,  130,  131,  132,  133,
  134,  135,  159,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   58,    0,   60,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   75,    0,    0,  217,    0,    0,    0,    0,
    0,  212,  213,    0,  211,    0,   97,   96,    0,    0,
    0,    4,    5,  222,    0,    0,    0,  226,  123,    0,
  192,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  271,  273,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  319,  120,
    0,  115,  186,    0,    0,    0,  200,    0,    0,    0,
    0,    0,    0,    0,  174,  177,  176,  175,  178,    0,
   45,    0,    0,    0,    0,    0,  167,  165,    0,  170,
    0,  214,  253,    0,    0,  117,    0,    0,    0,   85,
    0,  248,    0,    0,    0,  241,    0,  244,    0,    0,
    0,    0,    0,  162,  163,    0,    0,  313,    0,   61,
    0,   52,   53,   54,   55,   56,   57,   59,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  171,    0,  172,    0,    0,  218,    0,
    0,  102,    0,    0,    0,   98,  254,  255,  256,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  306,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  234,    0,    0,    0,    0,    0,
    0,  202,  252,    0,  193,    0,    0,    0,    0,   85,
   95,    0,    0,  246,  245,  240,    0,    0,  257,    0,
    0,    0,    0,  206,    0,    0,   46,   49,   50,   48,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   76,  106,    0,    0,    0,  188,    0,    0,
  307,  305,  116,    0,    0,    0,  201,    0,    0,  235,
    0,    0,  101,    0,    0,    0,    0,    0,  166,    0,
    0,   85,   93,    0,    0,    0,    0,    0,    0,   86,
   82,   83,    0,  242,    0,    0,    0,    0,    0,    0,
    0,   34,    0,    0,   36,    0,    0,    0,    0,    0,
  190,    0,  105,    0,    0,    0,    0,    0,  187,  231,
  232,  233,    0,    0,  224,    0,  104,    0,    0,  207,
    0,    0,    0,  221,   99,    0,    0,   85,   94,    0,
   87,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   38,   79,    0,    0,    0,    0,  204,    0,    0,
  198,    0,    0,    0,    0,    0,  110,  103,  195,    0,
    0,    0,    0,   92,    0,    0,  309,  310,  311,  312,
  208,   35,    0,   37,    0,    0,  179,    0,    0,    0,
    0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
   90,    0,    0,   39,    0,    0,    0,    0,    0,  209,
  210,  225,  112,    0,  179,    0,    0,   91,    0,   40,
    0,    0,  180,  181,    0,    0,    0,  111,    0,    0,
  203,    0,  119,  182,    0,    0,    0,  189,   41,  118,
    0,    0,    0,  205,  191,
};
static int yydgoto[] = {                                      47,
   48,  167,   50,  115,   51,  314,   52,   53,   54,   55,
  500,  433,   56,   57,   58,   59,   60,  298,  355,   61,
   62,  299,   63,   64,   65,   66,   67,   68,   69,   70,
  315,  316,  317,  318,   71,   72,   73,  341,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
   86,   87,   88,  275,   89,  427,  428,  491,   90,   91,
  616,   92,  479,  533,  223,  199,   93,   94,   95,   96,
   97,   98,  421,  567,  418,  488,  600,  575,
};
static int yysindex[] = {                                      0,
    0,    0,    0,    0,    0,    0, -170,    0,    0,    0,
    0,  -34,    0,    0, 2400,    0,  -61,    0,   28,  147,
  170,  175, 6564, 4081, 4081, 4081, 4081, 4081, 4146, 4081,
  702,    0,    0,    0,  125,    0,  818,  236,  248,  261,
 3450, 4081,   93, 3994,    0, 4081,    0,    0,  -95,  -19,
    0,    0,    0,    0,    0,    0, 2400,  474,  272,    0,
  131,    0,  151,  276,    0, 3364,  282,    0,    0, -219,
    0, 6754,    0,    0,    0,    0,    0,  295,    0,   27,
    0,    0,  123,    0,    0,   71,    0,    0,    0, 2400,
   87,   70,    0,    0,    0,    0,    0,    0,    0, 2400,
 2400, 2400, 2478,    0,  332,  346,  371,    0,  351, 2400,
    0,    0,  377,  189,  325,    0,    0,    0, 2734,    0,
    0,    0,   87,   87,   87,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  434,  400, 4081,   42,    0,    0,  -15,
  -15,  -15,    0,  -15,  -15,  502, 6789,  299,  296,  310,
  316, -197,  321,  334,  340,    0,  341,    0, 4081, 4081,
 4081,    0,  258,    0,  514,    0,    0, 7787,    4,  578,
  563, 2904,    0,    0, 2400,    0, 2400,  570,  190, 4081,
    0,    0,    0,    0,    0,  353,    0,    0,  561,  565,
  568,    0,    0,    0,  581,   87,  -48,    0,    0,    0,
    0,    0,  499, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
    0,    0, 4081, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
 4081, 4081, 4081, 4081, 4081, 3792, 4081, 4081,    0,    0,
    0,    0,    0,  374,   36,    0,    0,  371, 2990,    9,
    0, 2400,    0,  376,    0,    0,    0,    0,    0,   87,
    0,    0,  385,  381, 2400,  586,    0,    0,   22,    0,
 2400,    0,    0,  392,  578,    0,  608, 2400,  245,    0,
  949,    0,  394,  398,   63,    0,  595,    0, 2258,  598,
  601,  606,  607,    0,    0,  633, 4081,    0,  636,    0,
  414,    0,    0,    0,    0,    0,    0,    0, 6877, 7787,
  637, 6912, 2340, 6754,  652, 4081, 4081,    0,  451, 2648,
  673,    0,    0,    0,  660,    0,  -30,  -30,    0,  -30,
 3874,    0, 7787,  608,  608,    0,    0,    0,    0,  461,
    0, 3424,  467,    0,    0,    0,    0,    0,    0,    0,
    0,  107,  107,    0,    0, 2530,    0,    0,    0,    0,
  -15,    0,    0,    0,  874,  874,  107,  107,  107,    0,
  273,  273, 2530,    0,   78, 6977,  -15, 2426,  686,  472,
    0, 2514,  669,  141,    0,  608,  194,  691,  692,    0,
  696,    0,    0,    0,    0,  707,  699,  708,   57,    0,
    0, 2400,  -31,    0,    0,    0, 2734, 4081,    0,  709,
  712,  749,  751,    0,    0,  753,    0,    0,    0,    0,
    0, 3537, 4081, 3619,  465, 4081,    0, 7787,  755,  759,
  451, -120,    0,    0, 7065,  699,  699,    0,    0,  669,
    0,    0,    0, 4081,  764, 2596,    0,  264,   40,    0,
  699, 3963,    0,    0,  765, 2648,    0,  768,    0,  779,
  566,    0,    0,  -12,   92,  763,    0,  643,  767,    0,
    0,    0,    0,    0, 9468, 4081, 4081, 4081, 4081,  770,
    0,    0,  775,    0,    0,  799, 7100,  584,    0,  804,
    0,  592,    0,   87,   87,  594, 7197, 4081,    0,    0,
    0,    0, 2400,  264,    0,  -46,    0, 7252,  395,    0,
  814,  425,  822,    0,    0,  132,  796,    0,    0, 4081,
    0,    0, 7287, 7378, 7474, 7565,  609, 2682, 4081, 2770,
 4081,    0,    0,  830,  458,  584,  832,    0, 2400, 2400,
    0, 7600,  -30, 2400,    0, 4050,    0,    0,    0,    0,
  826,  762,  828,    0,  266, 7787,    0,    0,    0,    0,
    0,    0,  849,    0, 7655,  851,    0,  853,    0,  855,
   50,   50,    0,  -30, 2852,   87, 7694,  470,   56,    0,
    0,  845, 3705,    0,    0,  -53,  865,  486,  866,    0,
    0,    0,    0,   87,    0,    0, 2938,    0,    0,    0,
  524,  649,    0,    0,    0,  826,  783,    0,  -53, 3026,
    0, 3108,    0,    0,  543,   65,    0,    0,    0,    0,
    0, 3194, 3282,    0,    0,
};
static int yyrindex[] = {                                     18,
 6463,    0,    0,    0,  679, 5203,  790,    0,    0,    0,
    0,    0,    0,    0,    0, 5261,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5483,    0,    0,    0,  687, 7752,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  915,  800,    0,    0,  687,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,    0,    0,    0,    0,    0,    0,
 3489, 2807,    0,    0,    0,    0,    0,  978, 5019,    0,
    0,    0,    0,  -17, 6210,    0, 6354,  687,    0,    0,
    0, 4332,  801,    0,    0, 4400, 4459, 4743,    0, 4802,
 4861,  -55, 3489, 3489, 3489, 3489,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 5333,  145,  626,  124,
 5551, 5613, 6687, 5640, 5666,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  860,
    0,  -55,    0, 3469,    0, 3614, 3624,    3,    0,  670,
 3489,    0,    0,  679,    0,    0,    0,    0,  554,    0,
  536,    0,    0,  536,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  634, 3489,    0,    0,    0,  869,
    0,    0, 2807,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -55,    0,    0,    0,    0,  -55,    0, 4676,    0,    0,
10120,    0, 3070,    0,    0,    0,    0,    0,    0, 3489,
    0,   -7,    0, 6149,  552,  558,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  267,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  889,    0,    0,    0,    0,    0,    0,    0,    0,  277,
    0,    0,    0,   29,    0,    0,    0,    0,  888,    0,
    0, 6602, 5145,    0,    0,    0,  656,  662,    0,  684,
    0,    0,  420,  591,  591,    0,    0,    0,    0,    0,
  670,    0,    0, 3894, 4471, 4551, 4619, 4962, 5422, 5766,
 5773,   99,  646, 5801, 5875, 5891, 5921, 5926, 5962, 5967,
 5702, 5990, 6035, 6040,   -4,  621, 5831, 5902, 5946, 6064,
 4874, 5806, 6075,    0,    0,    0, 5793,    0,    0,    0,
  -55,    0,  169,    0,    0, 3334,  554,    0,    0,  670,
    0,    0,    0,  238,    0,    0,  676, 6229,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 6111,    0,    0,    0,    0,    0,
    0,    0,  860,    0,    0,    0, 6117,   31,    0,    0,
  888,    0,    0,    0,    0, 4203, 4203,    0,    5,   95,
    0,    0,    0,    0,    0,    0,    0, 3502,    0,    0,
 6299,    0,    0,  -17,    0,    0,  -17,    0,    0, 6318,
    0,    0,    0,    0,    0,  548,   30,    0,    0,    0,
    0,    0,    7,    0,  894,    0,    0,    0,    0,    0,
  -55,    0,    0,  -55,    0,    0,    0,  898,  -17,    0,
    0,    0,    0, 3489, 3489,    0,    0,    0,    0,    0,
    0,    0,    0, 3502,    0, 2566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  899,    0,
    0,    0,    0,    0,    0,  898,    0,    0,    0,    0,
    0,    0,  161,    0,  -55,    0,    0,    0,    0,  -17,
   74,    0,    0,    0,    0,  550,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -17,    0,
  284,  284,    0,  167,    0, 2566,    0,    0,    0,  -55,
    0,    0,    0,    0,  -17,   89,    0,    0,    0,    0,
    0,    0,    0, 2566,    0,  -55,    0,    0,  -55,    0,
    0,    0,    0,    0,  -17,   74,    0,    0,  114,    0,
    0,    0,    0,    0,    0,    0,  -55,    0,    0,    0,
  -55,    0,    0,    0,    0,
};
static int yycindex[] = {                                   1060,
 4274,    0,    0,    0, 4559, 3663,    0, 3836, 4029, 4292,
    0,    0,    0,    0,    0, 4306,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4696,    0,    0,    0,    0,    0,    0,    0,    0,    0,
10151,    0,    0,   14,    0,    0,    0, 4709,  466,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10164,    0,    0,    0, 6271,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5205,    0,
    0,  685,    0,    0,    0,    0,    0,  610,  117,    0,
    0,    0,    0, 3581,  159,    0,  690, 9373,    0,    0,
    0,   64,    0,    0,    0,  142,  172,  176,    0,  186,
  209, 1147,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  890, 7875, 7974, 9314,
 9408, 9501,  909, 9534, 9565,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1234,    0, 8062,    0, 8097, 8155,    0,    0,  694,
    0,    0,    0,10619,    0,    0,    0,    0,    0,    0,
  179,    0,    0,  206,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   60,    0,    0,    0,    0,   34,
    0,  697,  698,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1316,    0,    0,    0,    0, 1403,    0,  246,    0,    0,
  213,    0,  -18,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  249,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  706,    0,    0,    0,    0,    0,    0,    0,10232,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  602,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,10245,    0,    0,    0,    0,    0,    0,    0,
    0,  683,  214,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  717,    0,    0, 8194, 8249, 8284, 8375, 8471, 8562, 8597,
 8652, 9589, 9625, 8691, 8749, 9660, 8784, 8872, 8971, 9059,
 9685, 9094, 9152, 9191, 9720, 9753, 9842, 9877, 9937, 9246,
 9972,10005,10028,    0,    0,    0,10053,10258,    0,    0,
 1490,10316,    0,    0,    0,    0,    0,    0,    0,  718,
    0,    0,    0, 3749,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 9281,    0,    0,    0,    0,    0,
    0,10329,    0,10343,    0,    0, 9372,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  704,    0,
    0,    0,    0,    0,    0,10404,    0,    0,    0,    0,
    0,    0,    0, 4948,    0,    0, 5077,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  136,    0,    0,    0,
    0,    0,  641,    0,  918,    0,    0,    0,    0,    0,
 1572,    0,    0, 1659,    0,    0,    0,    0, 6052,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,10426,    0,10440,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1746,    0,    0,    0,    0, 6168,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 9807,    0,
    0,    0,    0,    0,10462,    0,    0,    0,    0, 1828,
    0,    0,10498,    0, 9939,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1915,10525,    0, 2002,    0,
    0,    0,    0,    0,10138,    0,    0,    0,    0,10561,
    0,10583,    0,    0,    0,    0, 2084,    0,    0,    0,
 2171,10641,10659,    0,    0,
};
static int yygindex[] = {                                      0,
   23,    1,  -90, -484, -314,    0,   19,    0,    0,    0,
  484, -384,    0,  -27,    2,  -99,    0,  559,    0,    0,
    0,  215,    0,    0,    0,   69,  912,    0,    0,    0,
    0,  553,    0,    0,  187,  520,    0, -410,    0,    0,
    0,    0,   10,    0,  927,    0,    0,  935,    0,  936,
    0,    0,    0, -502,  937,  -59,  958, -118,   33,    0,
  397,  370,    0,  483,    0,  758,    0,    0,    0,  207,
    0,  244,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 10978
static int yytable[] = {                                     281,
   49,  105,  106,  176,  297,  522,  112,  632,  116,  117,
  118,  204,  497,  215,  109,  120,  121,    2,  207,  307,
  200, 1561,  206,  164,  266,  119,  164,  108,  313,  204,
   64,  497,  188,  564,   64,  460,  274,  110,  274,  274,
  274,   49,  513,  258,  576,  494,  258,  347,   11,   12,
   84,  464,   64,  467,  274,  461,  274,  209,  458,  193,
  333,  122,  425,  282,   64,  424,   49,  415,  204,    2,
  227,  259,  258,   88,  259,  267,  295, 1554,  609,  410,
  305,  598,  334,  534,  222,  272,  113,  123,  274,  280,
  105, 1558,  226,  499,  114,  320,  321,  322,  323,  410,
  116,  117,  118,  120,  105,  296,  437,  546,  410,  204,
  105,  279,  547,  300,  290,  493,  204,  197,  471,  105,
  274,  347,   49,  603,  436,   30,  108,  258,  348,  277,
   28,   84,   31,  646,   27,  293,  521,   26,  227,  293,
  293,  293,  293,  293,  263,  293,  266,  122,  593,  271,
  549,  204,  268,  258,   88,  259, 1554,  293,  411,  293,
  265,  265,  535,  585,  265,  265,  265,  265,  265,  265,
  265,  541,  121,  351,  214,  497,  354,  202,  626,  492,
  274,  273,  265,  195,  265,  270,  203,  651,  270,  215,
  319,  293,   49,  276,  216,  284,  197,  267,  371,  480,
  204,  612,  353,  270,  228,  357,  124,  358,  360,  217,
  229,  122,  227,  356,  548,   46,  265,  227,  166,    2,
    2,    2,  350,  293,  372,  496,  108,   64,   64,  125,
  264,  621,  215,  203,  126,  630,  121,  270,  594,   13,
   14,  362,  301,  364,  496,  639,  365,  265,  265,  204,
  178,  203,  274,  204,  373,  290,  583,  633,   13,   14,
  343,  634,  420,   84,   32,   64,  274,  274,  648,  270,
  449,   49,   36, 1588,   64,  189,   49,   84,   84,  414,
  361,  301,  417,  228,  482,  205,   64,  190,  498,  229,
  203,  227,    2,    2,    2,  209,  250,   64,  250,  250,
  191,  353,  432,  431,  466,  467,   45,  498,  429,  497,
  243,  116,  266,  416,  301,  274,  594,   43,  268,   49,
  452,  455,  301,  203,  297,   45,   84,  183,  243,  301,
  213,  203, 1548,  274,  218,   43,  597,  222,  203,  408,
  224, 1551,  183,   49,  412,  600,  313,  524,  525,  111,
    2,    3,    4,  270,    6,  293,  481,  100,  101,  102,
   32,  222,  536,  267,  301,   15,   16,  430,   36,  293,
  293,  459,  353,  203,   18,   19,   20,   21,   22,   23,
  265,  285,  286,  287,  297,  288,  289,  297,  496,  546,
  612,  204, 4634,  350,  265,  265,  295,   32,  546,   24,
   25,  270,   13,   14,  302,   36, 4637, 4640,   49,  306,
  304,   49,   49,  301,  606,  270,  270,  201,  293,  297,
  304,  423,  203,  609,  105,  296,  222,   42,   43,   44,
  222,  588,  495,  300,  308,  579,  293,  105,  424,  233,
  591,   64,  486,  265,  615,  309,  108,  310,  624,  483,
   64,  498,   49,  618,   49, 4643,  295,  627,  633,  295,
  100,  265,  301,  100,  270,  581,  301,  636,  424,   45,
  512,  203,  515, 4646,  324,  203,   49,  201,  100,  476,
  297,  642,  270,  520,  105,  296, 1582,  105,  296, 1542,
  645,  295,  325,  300,  222, 1585,  300, 1545,  597,  297,
   32,  424,  594,  481,   32,  594,  108,  481,   36,  108,
  625,   49,   36,  424,   49,  297, 1542,  211, 1551,  105,
  296, 1551,  496, 1542, 1545,  479,  636, 1551,  300,  424,
 1551, 1545,  212,  573,  210,  297,   13,   14,  530,  531,
  532,  108,  327,  168,  169,  170,  171,  172,  174,  175,
  177,  250,  295,  250,  250,  329,  569,  570,   49,  330,
   49,  194,  196,  197,  643,  198,  331,  424,  577,  601,
  602,  295,  332,  183,  604,   49,  222,  183,  222,  558,
  105,  296,  560,  650,  335,  498,  424,  295,  345,  300,
  336,   80,  169,   81,  183,  169,  337,  183,  168,  105,
  296,  168,  108,   45,  338,   49,  346,  295,  300,  366,
   49,  359,  183,   49,  183,  105,  296,  349,  367,  501,
  104,  108,  368,  222,  300,  369,   49,   49,  215,   49,
  409,  630,  419,  620,  621,  105,  296,  108,  623,  502,
   49,  422,   49,  605,  300,  222,  210,   49,  426,  206,
  434,   49,   49,   49,  435,  438,  638,  108,  222,  440,
  222,  275,  441,  275,  275,  275,  272,  442,  443,  272,
  222,  222,   80,  444,   81,  446,  503,  451,  627,  275,
  501,  275,  294,  501,  272,  174,  294,  294,  294,  294,
  294,  456,  294,   64,  640,  453,  109,  642,  539,  109,
  502,  542,  108,  502,  294,  108,  294,  107,  339,  340,
  342,  344,  461,  275,  109,  652,  109,  468,  272,  653,
  108,  463,  108,  470,  107,  474,  478,  107,  475,  363,
  484,  485,  501,  565,   30,  487,  490,  503,  294,   28,
  503,   31,  107,   27,  107,  275,   26,  423,  506,  359,
  272,  507,  502,  374,  375,  376,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
  294,  501,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  198,  406,  407,  508,  503,
  509,  502,  183,  510,  608,  516,  518,  183,  519,  223,
  183,  183,  183,  528,   80,  540,   81,  543,  183,  183,
  285,  286,  287,  618,  288,  289,  544,  183,   80,   80,
   81,   81,  545,  550,   46,  552,  111,  166,  503,  631,
  557,    6,  223,  559,  100,  101,  102,  223,  561,  223,
  563,  223,   15,   16,  223,  566,  445,  215,  568,  645,
  521,   18,  215,  580,  584,  215,  215,  215, 1567, 1570,
 1573, 1576,  582,  215,  215,  457,  458,   80,  591,   81,
  596,  599,  215,   32,  285,  286,  287,  275,  288,  289,
  465,   36,  272,  274,  610,   80,  611,   81,   47,  613,
  615,  275,  275,  617,  619,  251,  272,  272,  251,  251,
  251,  215,  294,  628,  635,  647,  637,  251,  644,  215,
  261,  263,   78,  266,    1,  259,  294,  294,   42,  268,
  260,   47,  223,   79,  223,  223,   47,  196,   47,  250,
   47,  250,  219,   47,  250,  250,  250,  247,   78,   42,
  275,  541,  250,  250,  251,  272,  594,  544, 1077,  479,
 1539,  250,  251, 1539,  541, 1579,  250,  505,  275,    2,
    3,    4, 1564,  272,  267,  294,  183,  184,  185,  186,
  187,  188,  340, 1539, 1539,  517, 4631,   33, 4649, 4652,
  551,  228,  489,  294,   19,   20,   21,   22,   23,  504,
  250,  250,  250,  527,  250,  250,  229,  264,  173,  173,
  173,  538,  173,  173,  230,  231,  232,  208,   24,   25,
   33,   47,   32,   47,   47,   33,  574,   33,    0,   33,
   36,  639,   33,  405,    0,  553,  554,  555,  556,    0,
  344,    0,    0,  344,    0,    0,   42,   43,   44,    0,
    0,    0,    0,    0,    0,    0,    0,  572,    0,    0,
    0,    0,    0,    0,    0,    0,  223,  223,  223,  223,
  223,  223,  223,    0,  223,  223,  223,  223,  223,  586,
  223,  223,  223,  223,  223,  223,  223,  223,  340,    0,
  595,  223,  223,  223,  223,  223,  223,    0,    0,    0,
    0,    0,  112,    0,    0,  607,    0,  105,  179,  115,
   33,  102,   33,   33,   99,    0,  223,  223,    0,    0,
  223,  223,  223,  223,    0,  223,  223,    0,  223,  223,
    0,    0,    0,  223,    0,    0,    0,    0,    0,  223,
  223,  223,    0,    0,  223,  223,  223,  223,  180,  181,
  182,  183,  184,  185,  186,  187,  188,    0,  344,   47,
   47,   47,    0,   47,   47,   47,   47,   47,    0,   47,
   47,   47,   47,   47,   47,   47,   47,    0,    0,    0,
   47,   47,   47,   47,   47,   47,    0,    0,    0,  112,
    0,    0,  174,    0,  105,  108,  115,    0,  102,    0,
    0,   99,    0,    0,    0,   47,   47,    0,    0,   47,
   47,   47,   47,    0,   47,   47,    0,   47,   47,    0,
    6,    0,   47,  100,  101,  102,    0,    0,   47,   47,
   47,   15,   16,   47,   47,   47,   47,    0,    0,    0,
   18,    0,    0,    0,   33,   33,   33,   33,   33,   33,
   33,    0,   33,   33,   33,   33,   33,    0,   33,   33,
   33,   33,   33,   33,   33,   33,    0,    0,    0,   33,
   33,   33,   33,   33,   33,    0,  112,    0,    0,  174,
    0,  105,  108,  115,    0,  102,    0,    0,   99,    0,
    0,    0,    0,    0,   33,   33,    0,    0,   33,   33,
   33,   33,    0,   33,   33,    0,   33,   33,    0,    0,
    0,   33,    0,    0,    0,    0,    0,   33,   33,   33,
    0,    0,   33,   33,   33,    0,    0,    6,    9,   12,
   15,   18,   24,    0,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,   90,    0,  112,    0,
    0,    0,    0,  105,    0,  115,  174,  102,    0,  108,
   99,    0,    0,    0,    0,    0,   93,   96,    0,    0,
  118,  123,  128,  133,    0,  137,  137,    0,  142,  147,
    0,    0,    0,  150,    0,    0,    0,    0,    0,  153,
  156,  159,    0,    0,  162,  165,  168,  171,    0,    0,
    0,    0,    0,    0,    6,    9,   12,   15,   18,   24,
    0,   27,   33,   39,   45,   48,    0,   51,   54,   57,
   63,    0,    0,    0,   69,    0,    0,    0,   72,   78,
   81,   84,   87,   90,    0,  112,    0,    0,  174,    0,
  105,  108,  115,    0,  102,    0,    0,   99,    0,    0,
    0,    0,    0,   93,   96,    0,    0,  118,  123,  128,
  133,    0,  137,  137,    0,  142,  147,    0,    0,    0,
  150,    0,    0,    0,    0,    0,  153,  156,  159,    0,
    0,  162,  165,  168,  171,    0,    0,    0,    0,    0,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
    0,   69,    0,    0,    0,   72,   78,   81,   84,   87,
   90,    0,  112,    0,    0,  174,    0,  105,  108,  115,
    0,  102,    0,    0,   99,    0,    0,    0,    0,    0,
   93,   96,    0,    0,  118,  123,  128,  133,    0,  137,
  137,    0,  142,  147,    0,    0,    0,  150,    0,    0,
    0,    0,    0,  153,  156,  159,    0,    0,  162,  165,
  168,  171,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,   90,    0,  112,    0,    0,    0,    0,  105,
    0,  115,  174,  102,    0,  108,   99,    0,    0,    0,
    0,    0,   93,   96,    0,    0,  118,  123,  128,  133,
    0,  137,  137,    0,  142,  147,    0,    0,    0,  150,
    0,    0,    0,    0,    0,  153,  156,  159,    0,    0,
  162,  165,  168,  171,    0,    0,    0,    0,    0,    0,
    6,    9,   12,   15,   18,   24,    0,   27,   33,   39,
   45,   48,    0,   51,   54,   57,   63,    0,    0,    0,
   69,    0,    0,    0,   72,   78,   81,   84,   87,   90,
    0,  112,    0,    0,  174,    0,  105,  108,  115,    0,
  102,    0,    0,   99,    0,    0,    0,    0,    0,   93,
   96,    0,    0,  118,  123,  128,  133,    0,  137,  137,
    0,  142,  147,    0,    0,    0,  150,    0,    0,    0,
    0,    0,  153,  156,  159,    0,    0,  162,  165,  168,
  171,    0,    0,    0,    0,    0,    0,    6,    9,   12,
   15,   18,   24,    0,   27,   33,   39,   45,   48,    0,
   51,   54,   57,   63,    0,    0,    0,   69,    0,    0,
    0,   72,   78,   81,   84,   87,   90,    0,  112,    0,
    0,  174,    0,  105,  108,  115,    0,  102,    0,    0,
   99,    0,    0,    0,    0,    0,   93,   96,    0,    0,
  118,  123,  128,  133,    0,  137,  137,    0,  142,  147,
    0,    0,    0,  150,    0,    0,    0,    0,    0,  153,
  156,  159,    0,    0,  162,  165,  168,  171,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,   90,    0,
  112,    0,    0,    0,    0,  105,    0,  115,  174,  102,
    0,  108,   99,    0,    0,    0,    0,    0,   93,   96,
    0,    0,  118,  123,  128,  133,    0,  137,  137,    0,
  142,  147,    0,    0,    0,  150,    0,    0,    0,    0,
    0,  153,  156,  159,    0,    0,  162,  165,  168,  171,
    0,    0,    0,    0,    0,    0,    6,    9,   12,   15,
   18,   24,    0,   27,   33,   39,   45,   48,    0,   51,
   54,   57,   63,    0,    0,    0,   69,    0,    0,    0,
   72,   78,   81,   84,   87,   90,    0,  112,    0,    0,
  174,    0,  105,  108,  115,    0,  102,    0,    0,   99,
    0,    0,    0,    0,    0,   93,   96,    0,    0,  118,
  123,  128,  133,    0,  137,  137,    0,  142,  147,    0,
    0,    0,  150,    0,    0,    0,    0,    0,  153,  156,
  159,    0,    0,  162,  165,  168,  171,    0,    0,    0,
    0,    0,    0,    6,    9,   12,   15,   18,   24,    0,
   27,   33,   39,   45,   48,    0,   51,   54,   57,   63,
    0,    0,    0,   69,    0,    0,    0,   72,   78,   81,
   84,   87,   90,    0,  112,    0,    0,  174,    0,  105,
  108,  115,    0,  102,    0,    0,   99,    0,    0,    0,
    0,    0,   93,   96,    0,    0,  118,  123,  128,  133,
    0,  137,  137,    0,  142,  147,    0,    0,    0,  150,
    0,    0,    0,    0,    0,  153,  156,  159,    0,    0,
  162,  165,  168,  171,    0,    6,    9,   12,   15,   18,
   24,    0,   27,   33,   39,   45,   48,    0,   51,   54,
   57,   63,    0,    0,    0,   69,    0,    0,    0,   72,
   78,   81,   84,   87,   90,    0,  112,    0,    0,    0,
    0,  105,    0,  115,  174,  102,    0,  108,   99,    0,
    0,    0,    0,    0,   93,   96,    0,    0,  118,  123,
  128,  133,    0,  137,  137,    0,  142,  147,    0,    0,
    0,  150,    0,    0,    0,    0,    0,  153,  156,  159,
    0,    0,  162,  165,  168,  171,    0,    0,    0,    0,
    0,    0,    6,    9,   12,   15,   18,   24,    0,   27,
   33,   39,   45,   48,    0,   51,   54,   57,   63,    0,
    0,    0,   69,    0,    0,    0,   72,   78,   81,   84,
   87,   90,    0,  112,    0,    0,  174,    0,  105,  108,
  115,    0,  102,    0,    0,   99,    0,    0,    0,    0,
    0,   93,   96,    0,    0,  118,  123,  128,  133,    0,
  137,  137,    0,  142,  147,    0,    0,    0,  150,    0,
    0,    0,    0,    0,  153,  156,  159,    0,    0,  162,
  165,  168,  171,    0,    0,    0,    0,    0,    0,    6,
    9,   12,   15,   18,   24,    0,   27,   33,   39,   45,
   48,    0,   51,   54,   57,   63,    0,    0,    0,   69,
    0,    0,    0,   72,   78,   81,   84,   87,   90,    0,
   30,    0,    0,  174,    0,   28,  108,   31,    0,   27,
    0,    0,   26,    0,    0,    0,    0,    0,   93,   96,
    0,    0,  118,  123,  128,  133,    0,  137,  137,    0,
  142,  147,    0,    0,    0,  150,    0,    0,    0,    0,
    0,  153,  156,  159,    0,    0,  162,  165,  168,  171,
    0,    6,    9,   12,   15,   18,   24,    0,   27,   33,
   39,   45,   48,    0,   51,   54,   57,   63,    0,    0,
    0,   69,    0,    0,    0,   72,   78,   81,   84,   87,
   90,    0,   30,    0,    0,    0,    0,   28,    0,   31,
   46,   27,  439,    0,   26,    0,    0,    0,    0,    0,
   93,   96,    0,    0,  118,  123,  128,  133,    0,  137,
  137,    0,  142,  147,    0,    0,    0,  150,    0,    0,
    0,    0,    0,  153,  156,  159,    0,    0,  162,  165,
  168,  171,    0,    0,    0,    0,    0,    0,    6,    9,
   12,   15,   18,   24,    0,   27,   33,   39,   45,   48,
    0,   51,   54,   57,   63,    0,    0,    0,   69,    0,
    0,    0,   72,   78,   81,   84,   87,   90,   30,    0,
    0,    0,   46,   28,  455,   31,    0,   27,    0,    0,
   26,    0,    0,    0,    0,    0,    0,   93,   96,    0,
    0,  118,  123,  128,  133,    0,  137,  137,    0,  142,
  147,    0,    0,    0,  150,    0,    0,    0,    0,    0,
  153,  156,  159,    0,    0,  162,  165,  168,  171,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,  219,  220,  221,   17,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,   46,    0,
  473,   28,    0,   31,    0,   27,    0,    0,   26,    0,
    0,    0,    0,    0,   24,   25,  261,  263,    0,  266,
    0,  259,  257,    0,  258,  268,  260,   37,    0,    0,
    0,   38,    0,    0,    0,    0,    0,   39,   40,   41,
  265,    0,   42,   43,   44,   45,    0,    2,    3,    4,
    5,    0,    7,  293,    0,  183,  183,   11,   12,  183,
   13,   14,    0,    0,  219,  220,  221,   17,    0,    0,
  267,    0,   19,   20,   21,   22,   23,  183,   30,    0,
    0,    0,    0,   28,    0,   31,   46,   27,  477,    0,
   26,    0,    0,    0,    0,    0,   24,   25,    0,    0,
    0,    0,    0,  264,    0,    0,  111,    0,    0,   37,
    0,    6,    0,   38,  100,  101,  102,    0,    0,   39,
   40,   41,   15,   16,   42,   43,   44,   45,    0,    0,
    0,   18,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
  219,  220,  221,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   23,    0,   30,    0,    0,    0,   46,   28,
  529,   31,    0,   27,    0,    0,   26,    0,    0,    0,
    0,    0,   24,   25,  292,    0,    0,    0,    0,    6,
    0,    0,  100,  101,  102,   37,    0,    0,    0,   38,
   15,   16,    0,    0,    0,   39,   40,   41,    0,   18,
   42,   43,   44,   45,    0,    0,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  219,  220,
  221,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,   46,    0,  592,   28,    0,   31,
    0,   27,    0,    0,   26,    0,    0,    0,    0,    0,
   24,   25,  183,    0,    0,    0,    0,  183,    0,    0,
  183,  183,  183,   37,    0,    0,    0,   38,  183,  183,
    0,    0,    0,   39,   40,   41,    0,  183,   42,   43,
   44,   45,  183,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
  219,  220,  221,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   23,    0,   30,    0,    0,    0,    0,   28,
    0,   31,   46,   27,  594,    0,   26,    0,    0,    0,
    0,    0,   24,   25,  111,    0,    0,    0,    0,    6,
    0,    0,  100,  101,  102,   37,    0,    0,    0,   38,
   15,   16,    0,    0,    0,   39,   40,   41,    0,   18,
   42,   43,   44,   45,   23,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,    0,   13,   14,    0,    0,  219,  220,  221,   17,
    0,    0,    0,    0,   19,   20,   21,   22,   23,    0,
   30,    0,    0,    0,   46,   28,  622,   31,    0,   27,
    0,    0,   26,    0,    0,    0,    0,    0,   24,   25,
  111,    0,    0,    0,    0,    6,    0,    0,  311,  101,
  102,   37,    0,  312,    0,   38,   15,   16,    0,    0,
    0,   39,   40,   41,    0,   18,   42,   43,   44,   45,
    0,    0,    0,    0,    0,    0,    0,    2,    3,    4,
    5,    0,    7,    0,    0,    0,    0,   11,   12,    0,
   13,   14,    0,    0,  219,  220,  221,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   23,    0,   30,    0,
   46,    0,  641,   28,    0,   31,    0,   27,  250,    0,
   26,  250,  250,  250,    0,    0,   24,   25,    0,  250,
  250,    0,    0,    0,    0,    0,    0,    0,  250,   37,
    0,    0,    0,   38,    0,    0,    0,    0,    0,   39,
   40,   41,    0,    0,   42,   43,   44,   45,    0,    2,
    3,    4,    5,    0,    7,    0,    0,  250,    0,   11,
   12,    0,   13,   14,    0,  250,  219,  220,  221,   17,
    0,    0,    0,    0,   19,   20,   21,   22,   23,    0,
   30,    0,    0,    0,    0,   28,    0,   31,   46,   27,
  648,    0,   26,    0,    0,    0,    0,    0,   24,   25,
  352,    0,    0,    0,    0,    6,    0,    0,  100,  101,
  102,   37,    0,    0,    0,   38,   15,   16,    0,    0,
    0,   39,   40,   41,    0,   18,   42,   43,   44,   45,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    0,
    7,    0,    0,    0,    0,   11,   12,    0,   13,   14,
    0,    0,  219,  220,  221,   17,    0,    0,    0,    0,
   19,   20,   21,   22,   23,    0,   30,    0,    0,    0,
   46,   28,  649,   31,    0,   27,    0,    0,   26,    0,
    0,    0,    0,    0,   24,   25,  413,    0,    0,    0,
    0,    6,    0,    0,  100,  101,  102,   37,    0,    0,
    0,   38,   15,   16,    0,    0,    0,   39,   40,   41,
    0,   18,   42,   43,   44,   45,    0,    0,    0,    0,
    0,    0,    0,    2,    3,    4,    5,    0,    7,    0,
    0,    0,    0,   11,   12,    0,   13,   14,    0,    0,
  219,  220,  221,   17,    0,    0,    0,    0,   19,   20,
   21,   22,   23,    0,   30,    0,   46,    0,  654,   28,
    0,   31,    0,   27,    0,    0,   26,    0,    0,    0,
    0,  251,   24,   25,  251,  251,  251,    0,    0,    0,
    0,    0,  251,  251,    0,   37,    0,    0,    0,   38,
    0,  251,    0,    0,    0,   39,   40,   41,    0,    0,
   42,   43,   44,   45,    0,    2,    3,    4,    5,    0,
    7,  215,    0,  215,  215,   11,   12,  215,   13,   14,
  251,    0,  219,  220,  221,   17,    0,    0,  251,    0,
   19,   20,   21,   22,   23,  215,   30,    0,    0,    0,
    0,   28,    0,   31,   46,   27,  655,    0,   26,    0,
    0,    0,    0,    0,   24,   25,    0,    0,    0,    0,
    0,    0,    0,    0,  215,    0,    0,   37,    0,    0,
    0,   38,    0,    0,    0,    0,    0,   39,   40,   41,
    0,    0,   42,   43,   44,   45,    0,    0,    0,    0,
    0,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  219,  220,
  221,   17,    0,    0,    0,    0,   19,   20,   21,   22,
   23,    0,   30,    0,    0,    0,   46,   28,    0,   31,
    0,   27,    0,    0,   26,    0,    0,    0,    0,    0,
   24,   25,    0,    0,    0,    0,    0,    0,    0,  314,
    0,    0,  314,   37,    0,    0,    0,   38,    0,    0,
    0,    0,    0,   39,   40,   41,    0,  314,   42,   43,
   44,   45,    0,    0,    0,    0,    0,    0,    0,    2,
    3,    4,    5,    0,    7,    0,    0,    0,    0,   11,
   12,    0,   13,   14,    0,    0,  219,  220,  221,   17,
    0,  314,    0,    0,   19,   20,   21,   22,   23,   30,
    0,    0,  192,    0,   28,    0,   31,    0,   27,    0,
    0,   26,    0,    0,    0,    0,    0,    0,   24,   25,
  215,    0,    0,  314,    0,  215,    0,    0,  215,  215,
  215,   37,    0,    0,    0,   38,  215,  215,    0,    0,
    0,   39,   40,   41,    0,  215,   42,   43,   44,   45,
  215,    2,    3,    4,    5,    0,    7,    0,    0,    0,
    0,   11,   12,    0,   13,   14,    0,    0,  219,  220,
  221,   17,    0,    0,  215,    0,   19,   20,   21,   22,
   23,   30,  215,    0,  315,    0,   28,  315,   31,  511,
   27,    0,    0,   26,  317,    0,    0,  317,    0,    0,
   24,   25,  315,    0,    0,    0,    0,    0,    0,    0,
  469,    0,  317,   37,    0,    6,    0,   38,  100,  101,
  102,    0,    0,   39,   40,   41,   15,   16,   42,   43,
   44,   45,    0,    0,    0,   18,  315,    2,    3,    4,
    5,    0,    7,    0,    0,    0,  317,   11,   12,    0,
   13,   14,    0,    0,    0,  314,    0,   17,    0,    0,
    0,    0,   19,   20,   21,   22,   23,   30,  315,  314,
  314,  514,   28,    0,   31,  183,   27,    0,  317,   26,
  183,    0,    0,  183,  183,  183,   24,   25,  230,    0,
    0,  183,  183,  230,    0,    0,  230,  230,  230,   37,
  183,    0,    0,   38,  230,  230,    0,    0,    0,   39,
   40,   41,    0,  230,   42,   43,   44,   45,  314,    0,
    0,    0,    0,    0,    2,    3,    4,    5,    0,    7,
    0,    0,    0,    0,   11,   12,  314,   13,   14,    0,
    0,    0,    0,    0,   17,    0,    0,    0,    0,   19,
   20,   21,   22,   23,   30,    0,    0,  629,    0,   28,
    0,   31,  404,   27,    0,    0,   26,  550,    0,    0,
    0,    0,  554,   24,   25,  558,  562,  566,    0,    0,
    0,    0,    0,  570,  574,    0,   37,    0,    0,    0,
   38,    0,  578,    0,    0,    0,   39,   40,   41,    0,
  315,   42,   43,   44,   45,    0,    2,    3,    4,    5,
  317,    7,    0,    0,  315,  315,   11,   12,    0,   13,
   14,  233,  582,  585,  317,  317,   17,    0,    0,  236,
    0,   19,   20,   21,   22,   23,   30,    0,    0,    0,
    0,   28,    0,   31,   46,   27,    0,  166,   26,  239,
    0,    0,    0,    0,  242,   24,   25,  245,  248,  251,
    0,    0,    0,  315,  285,  254,  257,  285,   37,    0,
    0,    0,   38,  317,  260,    0,    0,    0,   39,   40,
   41,  315,  285,   42,   43,   44,   45,    0,    0,    0,
    0,  317,    2,    3,    4,    5,  464,    7,    0,    0,
    0,    0,   11,   12,    0,   13,   14,    0,    0,    0,
    0,    0,   17,    0,    0,    0,  285,   19,   20,   21,
   22,   23,    0,    0,    0,   30,   46,    0,    0,  166,
   28,    0,   31,    0,   27, 4417,    0,   26,    0,    0,
  554,   24,   25,  558,  562,  566,    0,    0,  285,    0,
    0,  570,  574,    0,   37,    0,   30,    0,   38,    0,
  578,    0,    0,    0,   39,   40,   41,    0,    0,   42,
   43,   44,   45,    0,    0,    0,    0,    0,  111,    2,
    3,    4,    0,    6,    0,  537,  100,  101,  102,  233,
  582,  585,    0,    0,   15,   16,    0,  236,    0,    0,
    0,    0,    0,   18,   19,   20,   21,   22,   23,    0,
    0,    0,   30,    0,    0,   46,    0,   28,  166,   31,
    0,   27,  263,    0,   26,    0,    0,  266,   24,   25,
  269,  272,  275,    0,    0,    0,    0,    0,  278,  281,
    0,    0,    0,   30,    0,    0,   46,  284,   28,  166,
   31,    0,   27,    0,    0,   26,   42,   43,   44,    0,
  111,    2,    3,    4,    0,    6,    0,    0,  100,  101,
  102,    0,  606,    0,    0,    0,   15,   16,    0,    0,
  285,    0,    0,    0,    0,   18,   19,   20,   21,   22,
   23,    0,    0,    0,  285,  285,    0,    0,    0,    0,
    0,    0,   46,    0,    0,  166,    0,    0,   30,    0,
   24,   25,    0,   28,    0,   31,    0,   27,    0,    0,
   26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   46,    0,    0,  166,    0,   42,   43,
   44,    0,    0,  285,    0,    0,    0,    0,    0,  111,
    2,    3,    4,    0,    6,    0,    0,  100,  101,  102,
    0,  285,    0,    0,    0,   15,   16,    0,    0,    0,
    0,    0,    0,    0,   18,   19,   20,   21,   22,   23,
    0,    2,    3,    4,    0,    6,    0,    0,  100,  101,
  102,    0,    0,    0,    0,    0,   15,   16,   46,   24,
   25,  166,    0,    0,    0,   18,   19,   20,   21,   22,
   23,    0,    0,    0,    0,  287,    0,    0,    0,    0,
  290,    0,    0,  293,  296,  299,    0,   42,   43,   44,
    0,  302,  305,    0,    0,    0,  111,    2,    3,    4,
  308,    6,    0,  211,  100,  101,  102,    0,    0,    0,
    0,    0,   15,   16,    0,    0,    0,    0,   42,   43,
   44,   18,   19,   20,   21,   22,   23,  111,    2,    3,
    4,    0,    6,    0,    0,  100,  101,  102,    0,    0,
    0,    0,    0,   15,   16,    0,   24,   25,    0,    0,
    0,    0,   18,   19,   20,   21,   22,   23,   68,   68,
    0,   68,   68,   68,   68,   68,   68,   68,   68,    0,
    0,    0,    0,    0,   42,   43,   44,   24,   25,    0,
   68,    0,   68,   68,    0,    0,    0,    0,    0,    0,
    0,    0,  173,    2,    3,    4,    0,    6,    0,    0,
  100,  101,  102,    0,    0,   42,   43,   44,   15,   16,
    0,    0,   68,    0,   68,   68,    0,   18,   19,   20,
   21,   22,   23,    0,    0,    0,   71,   71,    0,   71,
   71,   71,   71,   71,   71,   71,   71,    0,    0,    0,
    0,    0,   24,   25,   68,   68,   68,    0,   71,  219,
   71,   71,    0,    0,  219,    0,    0,  219,  219,  219,
    0,    0,    0,    0,    0,  219,  219,    0,    0,    0,
   42,   43,   44,    0,  219,    0,    0,    0,    0,    0,
   71,    0,   71,   71,    0,   72,   72,    0,   72,   72,
   72,   72,   72,   72,   72,   72,    0,    0,    0,    0,
    0,  286,    0,  219,  286,    0,    0,   72,    0,   72,
   72,  219,   71,   71,   71,    0,    0,    0,    0,  286,
  177,    0,    0,    0,    0,  181,    0,    0,  185,  189,
  193,    0,    0,    0,    0,    0,  197,  202,  311,   72,
    0,   72,   72,  314,    0,  206,  317,  320,  323,    0,
    0,    0,  335,  286,  326,  329,    0,  338,    0,    0,
  341,  344,  347,  332,    0,    0,    0,    0,  350,  353,
    0,   72,   72,   72,  214,  217,  220,  356,   68,    0,
    0,  287,  223,   68,  287,  286,   68,   68,   68,    0,
    0,    0,   68,   68,    0,   68,    0,    0,    0,  287,
    0,    0,    0,    0,    0,    0,    0,    0,   68,   68,
   68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
   68,   68,   68,   68,   68,   68,   68,    0,   68,   68,
   68,   68,   68,  287,    0,    0,    0,    0,    0,    0,
   68,   68,    0,    0,    0,    0,   71,    0,    0,  288,
    0,   71,  288,    0,   71,   71,   71,    0,    0,   68,
   71,   71,    0,   71,    0,  287,    0,  288,    0,    0,
    0,    0,    0,    0,    0,    0,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,    0,   71,   71,   71,   71,
   71,  288,    0,   64,    0,   72,    0,   64,   71,   71,
   72,    0,    0,   72,   72,   72,    0,  286,    0,   72,
   72,    0,   72,    0,   64,   64,    0,   71,    0,    0,
    0,  286,  286,  288,    0,   72,   72,   72,   72,   72,
   72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
   72,   72,   72,   72,    0,   72,   72,   72,   72,   72,
    0,    0,    0,    0,    0,    0,    0,   72,   72,   73,
   73,    0,   73,   73,   73,   73,   73,   73,   73,   73,
  286,    0,    0,    0,    0,    0,   72,    0,    0,    0,
    0,   73,    0,   73,   73,    0,    0,  287,  286,    0,
    0,    0,    0,    0,    0,  226,    0,    0,    0,    0,
  229,  287,  287,  229,  229,  229,    0,    0,    0,    0,
    0,  229,  229,   73,    0,   73,   73,    0,   65,   65,
  229,   65,   65,   65,   65,   65,   65,   65,   65,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   65,    0,   65,   65,    0,   73,   73,   73,    0,  233,
  287,    0,    0,    0,    0,  288,    0,  236,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  287,  288,
  288,    0,   65,    0,   65,   65,    0,   70,   70,    0,
   70,   70,   70,   70,   70,   70,   70,   70,    0,    0,
  279,  279,    0,    0,  279,  279,  279,  279,  279,   70,
  279,   70,   70,    0,   65,   65,   65,    0,    0,    0,
    0,    0,  279,    0,  279,    0,    0,  251,  288,    0,
  251,  251,  251,    0,    0,    0,    0,    0,    0,  251,
    0,   70,  359,   70,   70,    0,  288,  362,    0,    0,
  365,  368,  371,    0,    0,  469,  279,    0,  374,  377,
  469,    0,    0,  469,  469,  469,    0,  380,    0,    0,
   64,  469,  469,   70,   70,   70,  251,  251,  251,  251,
  469,  251,  251,    0,  251,    0,    0,  279,  279,   73,
    0,    0,  289,    0,   73,  289,    0,   73,   73,   73,
    0,    0,    0,   73,   73,    0,   73,    0,    0,  473,
  289,    0,    0,    0,    0,    0,    0,  476,    0,   73,
   73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   73,   73,   73,   73,   73,   73,    0,   73,
   73,   73,   73,   73,  289,    0,   64,    0,   65,    0,
   64,   73,   73,   65,    0,    0,   65,   65,   65,    0,
    0,    0,   65,   65,    0,   65,    0,    0,   64,    0,
   73,    0,    0,    0,    0,    0,  289,    0,   65,   65,
   65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
   65,   65,   65,   65,   65,   65,   65,    0,   65,   65,
   65,   65,   65,    0,    0,    0,    0,   70,    0,    0,
   65,   65,   70,    0,    0,   70,   70,   70,    0,    0,
  279,   70,   70,    0,   70,    0,    0,    0,    0,   65,
    0,    0,    0,    0,  279,  279,    0,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,    0,   70,   70,   70,
   70,   70,    0,    0,    0,    0,    0,    0,    0,   70,
   70,   66,   66,    0,   66,   66,   66,   66,   66,   66,
   66,   66,    0,  279,    0,    0,    0,    0,   70,    0,
    0,    0,    0,   66, 4417,   66,   66,    0,    0,  554,
    0,  279,  558,  562,  566,    0,    0,    0,  289,    0,
  570,  574,    0,    0,    0,    0,    0,    0,    0,  578,
    0,    0,  289,  289,    0,   66,    0,   66,   66,   67,
   67,    0,   67,   67,   67,   67,   67,   67,   67,   67,
    0,    0,    0,    0,    0,    0,    0,    0,  233,  582,
  585,   67,   67,   67,   67,    0,  236,   66,   66,   66,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
  253,  289,    0,  253,  253,  253,    0,    0,    0,    0,
    0,    0,  253,   67,    0,   67,   67,   69,   69,  289,
   69,   69,   69,   69,   69,   69,   69,   69,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
   69,   69,   69,   64,    0,   67,   67,   67,    0,  253,
  253,  253,  253, 4417,  253,  253,    0,  253,  554,    0,
    0,  558,  562,  566,    0,    0,    0,    0,    0,  570,
  574,   69,    0,   69,   69,    0,    0,    0,  578,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
  124,    0,  124,  124,  124,  124,  124,  124,  124,  124,
    0,    0,    0,   69,   69,   69,    0,  233,  582,  585,
    0,  124,    0,  124,  124,  236,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   66,    0,    0,   66,
   66,   66,    0,    0,    0,   66,   66,    0,   66,    0,
    0,    0,    0,  124,    0,  124,  124,    0,    0,    0,
    0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
    0,   66,   66,   66,   66,   66,  124,  124,    0,    0,
    0,  517,  290,   66,   66,  290,  520,    0,    0,  523,
  526,  529,    0,   67,   67,    0,    0,  532,  535,    0,
  290,    0,   66,    0,    0,    0,  538,    0,    0,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
   67,   67,   67,   67,  290,    0,    0,    0,    0,  318,
    0,   67,   67,  318,    0,  318,  318,    0,  318,  318,
    0,   69,   69,    0,    0,    0,    0,    0,    0,    0,
   67,  318,  318,  318,  318,    0,  290,   69,   69,   69,
   69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   69,   69,   69,   69,    0,   69,   69,   69,
   69,   69,    0,  318,    0,  318,  318,    0,    0,   69,
   69,    0,    0,    0,    0,    0,    0,  268,  268,  124,
    0,  268,  268,  268,  268,  268,  268,  268,   69,    0,
    0,    0,    0,  124,  124,    0,  318,  318,    0,  268,
    0,  268,    0,    0,    0,    0,    0,    0,    0,    0,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,    0,    0,  124,
  124,  124,  124,  268,    0,    0,    0,    0,    0,  269,
  269,    0,  124,  269,  269,  269,  269,  269,  269,  269,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  124,  269,    0,  269,  268,  268,  266,  266,  290,    0,
  266,  266,  266,  266,  266,  266,  266,    0,    0,    0,
    0,    0,  290,  290,    0,    0,    0,    0,  266,    0,
  266,    0,  267,  267,    0,  269,  267,  267,  267,  267,
  267,  267,  267,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,  267,    0,    0,    0,
    0,    0,  266,    0,    0,    0,  269,  269,  303,  303,
    0,  290,  303,  303,  303,  303,  303,  303,  303,    0,
    0,    0,    0,  318,  318,    0,    0,    0,  267,  290,
  303,    0,  303,  266,  266,    0,    0,    0,    0,    0,
  318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
  318,  318,  318,  318,  318,  318,  318,    0,    0,  267,
  267,  318,  318,    0,  303,    0,    0,    0,    0,    0,
    0,    0,  318,    0,    0,    0,  291,  268,    0,  291,
    0,    0,    0,  292,    0,    0,  292,    0,    0,    0,
  318,  268,  268,    0,  291,  303,  303,    0,    0,  302,
  302,  292,    0,  302,  302,  302,  302,  302,  302,  302,
    0,  295,  280,  280,  295,    0,  280,  280,  280,  280,
  280,  302,  280,  302,    0,    0,    0,    0,  291,  295,
    0,    0,    0,    0,  280,  292,  280,  276,    0,  269,
  268,  276,  276,  276,  276,  276,    0,  276,    0,    0,
    0,    0,    0,  269,  269,  302,    0,    0,  268,  276,
  291,  276,    0,  295,    0,    0,  266,  292,  280,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  266,  266,    0,    0,    0,  296,  302,  302,  296,    0,
    0,    0,  267,  276,    0,  295,    0,    0,    0,  280,
  280,  297,  269,  296,  297,    0,  267,  267,  277,    0,
    0,    0,  277,  277,  277,  277,  277,    0,  277,  297,
  269,    0,    0,    0,    0,  276,    0,    0,  303,  266,
  277,  298,  277,    0,  298,    0,  299,  296,    0,  299,
    0,    0,  303,  303,    0,    0,    0,  266,    0,  298,
    0,    0,  278,  297,  299,  267,  278,  278,  278,  278,
  278,    0,  278,    0,  277,    0,    0,    0,    0,  296,
    0,    0,  300,  267,  278,  300,  278,  301,    0,    0,
  301,    0,    0,  298,    0,  297,    0,    0,  299,    0,
  300,  303,  291,    0,    0,  301,  277,    0,    0,  292,
  304,    0,    0,  304,    0,    0,  291,  291,  278,  303,
    0,    0,    0,  292,  292,  298,    0,    0,  304,  302,
  299,    0,    0,    0,  300,    0,    0,  295,    0,  301,
    0,    0,  280,  302,  302,    0,    0,    0,    0,    0,
  278,  295,  295,    0,    0,  283,  280,  280,  283,    0,
  284,    0,  304,  284,    0,  291,  300,  276,    0,    0,
    0,  301,  292,  283,    0,    0,    0,    0,  284,    0,
    0,  276,  276,  291,  281,    0,    0,  281,    0,    0,
  292,    0,  302,    0,  304,  282,    0,    0,  282,    0,
  295,    0,  281,    0,    0,  280,    0,  283,    0,    0,
  302,  296,  284,  282,    0,    0,    0,    0,  295,    0,
    0,    0,    0,  280,    0,  296,  296,  297,    0,    0,
  276,  308,    0,    0,  308,    0,  281,  316,  277,  283,
  316,  297,  297,    0,  284,    0,    0,  282,  276,  308,
    0,    0,  277,  277,    0,  316,    0,  298,    0,    0,
    0,    0,  299,    0,    0,    0,   64,    0,  281,    0,
   64,  298,  298,    0,  296,    0,  299,  299,    0,  282,
    0,    0,  278,  308,    0,    0,    0,    0,   64,  316,
  297,    0,  296,    0,    0,    0,  278,  278,  300,    0,
    0,  277,    0,  301,    0,    0,    0,    0,  297,    0,
    0,    0,  300,  300,    0,  308,    0,  301,  301,  277,
  298,  316,    0,    0,    0,  299,  304,   77,    0,   77,
   77,   77,    0,   77,    0,    0,    0,    0,  298,    0,
  304,  304,    0,  299,    0,  278,  216,    0,  216,  216,
    0,   77,  216,    0,    0,    0,    0,    0,    0,    0,
    0,  300,    0,  278,    0,    0,  301,    0,    0,    0,
  216,  283,    0,    0,    0,    0,  284,    0,    0,  300,
   77,    0,    0,    0,  301,  283,  283,    0, 4417,  304,
  284,  284,    0,  554,    0,    0,  558,  562,  566,  216,
  281,    0,    0,    0,  570,  574,    0,  304,    0,    0,
    0,  282,    0,  578,  281,  281,    0,    0,  219,  219,
    0,    0,  219,    0,    0,  282,  282,    0,    0,    0,
    0,    0,    0,    0,  283,    0,    0,  220,  220,  284,
  219,  220,  233,  582,  585,    0,    0,  308,    0,    0,
  236,    0,  283,  316,    0,    0,    0,  284,    0,  220,
    0,  308,  308,  281,    0,    0,    0,  316,  316,  219,
    0,    0,    0,    0,  282,  251,    0,    0,    0,    0,
    0,  281,    0,    0,    0,    0,    0,    0,  220,    0,
  251,    0,  282,  251,  251,  251,    0,    0,    0,    0,
    0,    0,  251,    0, 4417,    0,    0,    0,    0,  554,
  308,    0,  558,  562,  566,    0,  316,    0,    0,    0,
  570,  574,    0,    0,    0,    0,    0,    0,  308,  578,
    0,    0,    0,   64,  316,    0,    0,    0,    0,  251,
  251,  251,  251,    0,  251,  251,   77,  251,    0,    0,
    0,   77,    0,    0,   77,   77,   77,    0,  233,  582,
  585,    0,    0,   77,    0,  216,  236,    0,    0,    0,
  216,    0,    0,  216,  216,  216,   77,    0,    0,   64,
   64,  216,  216,    0,   64,   64,   64,   64,   64,   64,
  216,    0,    0,    0,   77,  216,    0,    0,    0,    0,
   77,   64,   64,   64,   64,    0,    0,  485,   77,    0,
    0,    0,  489,    0,    0,  493,  497,  501,    0,  216,
    0,    0,    0,  505,  509,    0,    0,  216,    0,    0,
    0,    0,  513,   64,    0,  219,   64,    0,    0,    0,
  219,    0,    0,  219,  219,  219,    0,    0,    0,    0,
    0,  219,  219,    0,  220,    0,    0,    0,    0,  220,
  219,  441,  220,  220,  220,  219,   64,   64,    0,  441,
  220,  220,    0,    0,    0,    0,  161,    0,    0,  220,
  156,  158,    0,  164,  220,  154,  152,  163,  153,  219,
  155,    0,    0,    0,    0,  251,    0,  219,  251,  251,
  251,    0,    0,  150,  162,  151,  251,  251,  220,    0,
    0,    0,    0,    0,    0,  251,  220,    0,   64,   64,
  251,   64,    0,   64,   64,   64,   64,   64,   64,    0,
    0,    0,    0,    0,  165,    0,    0,  157,    0,    0,
   64,   64,   64,   64,  251,  251,  251,  251,    0,  251,
  251,    0,  251,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  159,    0,  160,
    0,    0,   64,    0,    0,   64,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   64,   64,   64,   64,    0,   64,   64,
   64,   64,   64,   64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   64,   64,   64,   64,    0,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,    0,    0,    0,  251,   64,  251,  251,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  261,  263,    0,  266,    0,  259,  257,    0,  258,  268,
  260,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,   64,  269,  255,  265,  256,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  261,  263,    0,  266,  328,
  259,  257,    0,  258,  268,  260,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,    0,  262,  255,  265,
  256,  127,  128,  129,  130,  131,  132,  133,  134,  135,
  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,    0,    0,    0,  264,    0,  267,
    0,    0,  262,   64,    0,    0,    0,    0,    0,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,    0,   64,   64,
   64,   64,  264,  261,  263,    0,  266,  452,  259,  257,
    0,  258,  268,  260,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  255,  265,  256,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  261,  263,
    0,  266,  454,  259,  257,    0,  258,  268,  260,   64,
    0,    0,    0,    0,    0,    0,    0,  267,   64,    0,
  262,  255,  265,  256,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,    0,    0,   64,   64,   64,   64,    0,    0,    0,
  264,    0,  267,    0,    0,  262,    0,    0,    0,    0,
    0,    0,    0,  261,  263,    0,  266,    0,  259,  257,
    0,  258,  268,  260,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  264,  255,  265,  256,    0,
    0,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,  248,  249,  250,    0,    0,
  251,  252,  253,  254,    0,    0,    0,  267,    0,  472,
  262,    0,    0,    0,    0,    0,  234,  235,  236,  237,
  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
  248,  249,  250,    0,    0,  251,  252,  253,  254,    0,
  264,  261,  263,    0,  266,    0,  259,  257,    0,  258,
  268,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  255,  265,  256,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  261,  263,    0,  266,
  562,  259,  257,    0,  258,  268,  260,    0,    0,    0,
    0,    0,    0,    0,    0,  267,    0,  523,  262,  255,
  265,  256,    0,    0,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,    0,    0,  251,  252,  253,  254,    0,  264,    0,
  267,    0,    0,  262,    0,    0,    0,    0,    0,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,    0,    0,  251,  252,
  253,  254,    0,  264,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  261,  263,    0,  266,  571,  259,  257,
    0,  258,  268,  260,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  255,  265,  256,    0,
    0,    0,    0,    0,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,    0,    0,  251,  252,  253,  254,  267,  261,  263,
  262,  266,    0,  259,  257,    0,  258,  268,  260,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  255,  265,  256,    0,    0,    0,    0,    0,    0,
  264,    0,    0,  261,  263,    0,  266,  587,  259,  257,
    0,  258,  268,  260,    0,    0,    0,    0,    0,    0,
    0,    0,  267,    0,  578,  262,  255,  265,  256,    0,
    0,    0,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,    0,
    0,  251,  252,  253,  254,  264,    0,  267,    0,    0,
  262,    0,    0,    0,    0,    0,    0,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  247,  248,  249,  250,    0,    0,  251,  252,  253,  254,
  264,    0,    0,    0,  261,  263,    0,  266,  588,  259,
  257,    0,  258,  268,  260,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  255,  265,  256,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  267,    0,
    0,  262,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,  264,    0,  251,  252,  253,  254,    0,    0,    0,
  261,  263,    0,  266,  589,  259,  257,    0,  258,  268,
  260,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  255,  265,  256,    0,    0,    0,  234,
  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
  245,  246,  247,  248,  249,  250,    0,    0,  251,  252,
  253,  254,    0,    0,  267,    0,    0,  262,    0,    0,
    0,    0,    0,    0,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,    0,    0,  251,  252,  253,  254,  264,    0,    0,
    0,  261,  263,    0,  266,  590,  259,  257,    0,  258,
  268,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  255,  265,  256,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  261,  263,    0,  266,
  603,  259,  257,    0,  258,  268,  260,    0,    0,    0,
    0,    0,    0,    0,    0,  267,    0,    0,  262,  255,
  265,  256,    0,    0,    0,  234,  235,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
  249,  250,    0,    0,  251,  252,  253,  254,  264,    0,
  267,  261,  263,  262,  266,  614,  259,  257,    0,  258,
  268,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  255,  265,  256,    0,    0,    0,
    0,    0,    0,  264,    0,    0,    0,    0,    0,    0,
  261,  263,    0,  266,    0,  259,  257,    0,  258,  268,
  260,    0,    0,    0,    0,  267,    0,    0,  262,    0,
    0,    0,    0,  255,  265,  256,    0,    0,    0,    0,
    0,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,  248,  249,  250,  264,    0,
  251,  252,  253,  254,  267,    0,  624,  262,  124,    0,
    0,  124,    0,    0,  124,  124,  124,  124,  124,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  124,    0,  124,  124,    0,    0,    0,  264,    0,    0,
    0,    0,    0,  261,  263,    0,  266,    0,  259,  257,
    0,  258,  268,  260,    0,    0,    0,    0,    0,    0,
    0,    0,  124,    0,    0,  124,  255,  265,  256,    0,
    0,    0,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,    0,
    0,  251,  252,  253,  254,  124,  124,  267,    0,    0,
  262,    0,    0,    0,    0,    0,    0,  234,  235,  236,
  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
  247,  248,  249,  250,    0,    0,  251,  252,  253,  254,
  264,  732,  738,    0,  747,    0,  726,  720,    0,  723,
  753,  729,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  714,  744,  717,    0,    0,    0,
    0,    0,  234,  235,  236,  237,  238,  239,  240,  241,
  242,  243,  244,  245,  246,  247,  248,  249,  250,    0,
    0,  251,  252,  253,  254,  750,    0,    0,  735,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  234,  235,  236,  237,  238,  239,  240,  241,  242,
  243,  244,  245,  246,  247,  248,  249,  250,  741,    0,
  251,  252,  253,  254,    0,    0,    0,    0,    0,    0,
  837,  843,    0,  852,    0,  831,  825,    0,  828,  858,
  834,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  819,  849,  822,    0,    0,    0,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,   77,    0,  124,  124,
  124,  124,    0,    0,  855,    0,    0,  840,    0,    0,
    0,    0,    0,    0,  234,  235,  236,  237,  238,  239,
  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,
  250,    0,    0,  251,  252,  253,  254,  846, 1305, 1311,
    0, 1320,    0, 1299, 1293,    0, 1296, 1326, 1302,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1287, 1317, 1290,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1410, 1416,    0, 1425,    0, 1404, 1398,
    0, 1401, 1431, 1407,    0,    0,    0,    0,    0,    0,
    0,    0, 1323,    0,    0, 1308, 1392, 1422, 1395,    0,
    0,    0,  651,  654,  657,  660,  663,  666,  669,  672,
  675,  678,  681,  684,  687,  690,  693,  696,  699,    0,
    0,  702,  705,  708,  711, 1314,    0, 1428,    0,    0,
 1413, 1515, 1521,    0, 1530,    0, 1509, 1503,    0, 1506,
 1536, 1512,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1497, 1527, 1500,    0,    0,    0,
 1419,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1672, 1678,    0, 1687,    0, 1666, 1660,    0, 1663, 1693,
 1669,    0,    0,    0,    0, 1533,    0,    0, 1518,    0,
    0,    0,    0, 1654, 1684, 1657,    0,    0,    0,    0,
    0,  756,  759,  762,  765,  768,  771,  774,  777,  780,
  783,  786,  789,  792,  795,  798,  801,  804, 1524,    0,
  807,  810,  813,  816, 1690, 1777, 1783, 1675, 1792,    0,
 1771, 1765,    0, 1768, 1798, 1774,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1759, 1789,
 1762,    0,    0,    0,    0,    0,    0, 1681,    0,    0,
 1882, 1888,    0, 1897,    0, 1876, 1870,    0, 1873, 1903,
 1879,    0,    0,    0,    0,    0,    0,    0,    0, 1795,
    0,    0, 1780, 1864, 1894, 1867,    0,    0,    0, 1224,
 1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 1254,
 1257, 1260, 1263, 1266, 1269, 1272,    0,    0, 1275, 1278,
 1281, 1284, 1786,    0, 1900,    0,    0, 1885,    0,    0,
    0,    0,    0,    0, 1329, 1332, 1335, 1338, 1341, 1344,
 1347, 1350, 1353, 1356, 1359, 1362, 1365, 1368, 1371, 1374,
 1377,    0,    0, 1380, 1383, 1386, 1389, 1891,    0,    0,
    0, 1987, 1993,    0, 2002,    0, 1981, 1975,    0, 1978,
 2008, 1984,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1969, 1999, 1972,    0,    0,    0,
    0,    0, 1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455,
 1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 1482,    0,
    0, 1485, 1488, 1491, 1494, 2005,    0,    0, 1990,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615,
 1618, 1621, 1624, 1627, 1630, 1633, 1636, 1639, 1996,    0,
 1642, 1645, 1648, 1651,    0,    0,    0, 2092, 2098,    0,
 2107,    0, 2086, 2080,    0, 2083, 2113, 2089,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 2074, 2104, 2077,    0,    0,    0, 1696, 1699, 1702, 1705,
 1708, 1711, 1714, 1717, 1720, 1723, 1726, 1729, 1732, 1735,
 1738, 1741, 1744,    0,    0, 1747, 1750, 1753, 1756,    0,
    0, 2110,    0,    0, 2095,    0,    0,    0,    0,    0,
    0, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825,
 1828, 1831, 1834, 1837, 1840, 1843, 1846, 1849,    0,    0,
 1852, 1855, 1858, 1861, 2101,    0,    0,    0, 2197, 2203,
    0, 2212,    0, 2191, 2185,    0, 2188, 2218, 2194,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2179, 2209, 2182,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 2302, 2308,    0, 2317,    0, 2296, 2290,
    0, 2293, 2323, 2299,    0,    0,    0,    0,    0,    0,
    0,    0, 2215,    0,    0, 2200, 2284, 2314, 2287,    0,
    0,    0, 1906, 1909, 1912, 1915, 1918, 1921, 1924, 1927,
 1930, 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954,    0,
    0, 1957, 1960, 1963, 1966, 2206,    0, 2320, 2407, 2413,
 2305, 2422,    0, 2401, 2395,    0, 2398, 2428, 2404,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2389, 2419, 2392,    0,    0,    0,    0,    0,    0,
 2311,    0,    0,    0,    0,    0,    0, 2656, 2662,    0,
 2671,    0, 2650, 2644,    0, 2647, 2677, 2653,    0,    0,
    0,    0, 2425,    0,    0, 2410,    0,    0,    0,    0,
 2638, 2668, 2641,    0,    0,    0,    0,    0, 2011, 2014,
 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041, 2044,
 2047, 2050, 2053, 2056, 2059, 2416,    0, 2062, 2065, 2068,
 2071, 2674,    0,    0, 2659, 2761, 2767,    0, 2776,    0,
 2755, 2749,    0, 2752, 2782, 2758,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2743, 2773,
 2746,    0,    0,    0, 2665,    0,    0,    0,    0,    0,
 2938, 2944,    0, 2953,    0, 2932, 2926,    0, 2929, 2959,
 2935,    0,    0,    0,    0,    0,    0,    0,    0, 2779,
    0,    0, 2764, 2920, 2950, 2923,    0,    0,    0, 2116,
 2119, 2122, 2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146,
 2149, 2152, 2155, 2158, 2161, 2164,    0,    0, 2167, 2170,
 2173, 2176, 2770,    0, 2956,    0,    0, 2941,    0,    0,
    0,    0,    0,    0, 2221, 2224, 2227, 2230, 2233, 2236,
 2239, 2242, 2245, 2248, 2251, 2254, 2257, 2260, 2263, 2266,
 2269,    0,    0, 2272, 2275, 2278, 2281, 2947, 3043, 3049,
    0, 3058,    0, 3037, 3031,    0, 3034, 3064, 3040,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3025, 3055, 3028,    0,    0,    0,    0,    0, 2326,
 2329, 2332, 2335, 2338, 2341, 2344, 2347, 2350, 2353, 2356,
 2359, 2362, 2365, 2368, 2371, 2374,    0,    0, 2377, 2380,
 2383, 2386, 3061,    0,    0, 3046,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2575, 2578,
 2581, 2584, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608,
 2611, 2614, 2617, 2620, 2623, 3052,    0, 2626, 2629, 2632,
 2635,    0,    0,    0,    0,    0,    0, 3148, 3154,    0,
 3163,    0, 3142, 3136,    0, 3139, 3169, 3145,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3130, 3160, 3133,    0,    0,    0, 2680, 2683, 2686, 2689,
 2692, 2695, 2698, 2701, 2704, 2707, 2710, 2713, 2716, 2719,
 2722, 2725, 2728,    0,    0, 2731, 2734, 2737, 2740,    0,
    0, 3166,    0,    0, 3151,    0,    0,    0,    0,    0,
    0, 2857, 2860, 2863, 2866, 2869, 2872, 2875, 2878, 2881,
 2884, 2887, 2890, 2893, 2896, 2899, 2902, 2905,    0,    0,
 2908, 2911, 2914, 2917, 3157, 3253, 3259,    0, 3268,    0,
 3247, 3241,    0, 3244, 3274, 3250,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3235, 3265,
 3238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3430, 3436,    0, 3445,    0, 3424, 3418,    0, 3421, 3451,
 3427,    0,    0,    0,    0,    0,    0,    0,    0, 3271,
    0,    0, 3256, 3412, 3442, 3415,    0,    0,    0, 2962,
 2965, 2968, 2971, 2974, 2977, 2980, 2983, 2986, 2989, 2992,
 2995, 2998, 3001, 3004, 3007, 3010,    0,    0, 3013, 3016,
 3019, 3022, 3262,    0, 3448,    0,    0, 3433, 3535, 3541,
    0, 3550,    0, 3529, 3523,    0, 3526, 3556, 3532,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3517, 3547, 3520,    0,    0,    0, 3439,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 3640, 3646,    0,
 3655,    0, 3634, 3628,    0, 3631, 3661, 3637,    0,    0,
    0,    0, 3553,    0,    0, 3538,    0,    0,    0,    0,
 3622, 3652, 3625,    0,    0,    0,    0,    0, 3067, 3070,
 3073, 3076, 3079, 3082, 3085, 3088, 3091, 3094, 3097, 3100,
 3103, 3106, 3109, 3112, 3115, 3544,    0, 3118, 3121, 3124,
 3127, 3658, 4105, 4111, 3643, 4120,    0, 4099, 4093,    0,
 4096, 4126, 4102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4087, 4117, 4090,    0,    0,
    0,    0,    0,    0, 3649,    0,    0, 4502, 4508,    0,
 4517,    0, 4496, 4490,    0, 4493, 4523, 4499,    0,    0,
    0,    0,    0,    0,    0,    0, 4123,    0,    0, 4108,
 4484, 4514, 4487,    0,    0,    0, 3172, 3175, 3178, 3181,
 3184, 3187, 3190, 3193, 3196, 3199, 3202, 3205, 3208, 3211,
 3214, 3217, 3220,    0,    0, 3223, 3226, 3229, 3232, 4114,
    0, 4520,    0,  924, 4505,  927,    0,    0,    0,    0,
    0, 3349, 3352, 3355, 3358, 3361, 3364, 3367, 3370, 3373,
 3376, 3379, 3382, 3385, 3388, 3391, 3394, 3397,    0,    0,
 3400, 3403, 3406, 3409, 4511,    0,    0,  930, 4607, 4613,
    0, 4622,    0, 4601, 4595,    0, 4598, 4628, 4604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4589, 4619, 4592,    0,    0,    0,    0,    0, 3454,
 3457, 3460, 3463, 3466, 3469, 3472, 3475, 3478, 3481, 3484,
 3487, 3490, 3493, 3496, 3499, 3502,    0,    0, 3505, 3508,
 3511, 3514, 4625,    0,    0, 4610,    0,  996,    0,  999,
    0,    0,    0,    0,    0,    0,    0,    0, 3559, 3562,
 3565, 3568, 3571, 3574, 3577, 3580, 3583, 3586, 3589, 3592,
 3595, 3598, 3601, 3604, 3607, 4616,    0, 3610, 3613, 3616,
 3619, 1002,    0,    0,  261,  263,    0,  266,    0,  259,
  257,    0,  258,  268,  260,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  255,  265,    0,
    0,    0,    0, 4024, 4027, 4030, 4033, 4036, 4039, 4042,
 4045, 4048, 4051, 4054, 4057, 4060, 4063, 4066, 4069, 4072,
    0,    0, 4075, 4078, 4081, 4084,    0,    0,  267,    0,
 1068,  262, 1071,    0,    0,    0,    0,    0, 4421, 4424,
 4427, 4430, 4433, 4436, 4439, 4442, 4445, 4448, 4451, 4454,
 4457, 4460, 4463, 4466, 4469,    0,    0, 4472, 4475, 4478,
 4481,  264,    0, 1143, 1074, 1146,    0,    0,    0,    0,
    0,  861,  864,  867,  870,  873,  876,  879,  882,  885,
  888,  891,  894,  897,  900,  903,  906,  909,    0,    0,
  912,  915,  918,  921, 1215,    0, 1218, 1149,    0,  469,
    0,    0,    0,    0,  469,    0,    0,  469,  469,  469,
    0,    0,    0,    0,    0,  469,  469,    0, 2494,    0,
 2497,    0,    0,    0,  469,    0,    0,    0, 1221, 4526,
 4529, 4532, 4535, 4538, 4541, 4544, 4547, 4550, 4553, 4556,
 4559, 4562, 4565, 4568, 4571, 4574,    0,    0, 4577, 4580,
 4583, 4586, 2500,  473, 2566,    0, 2569,    0,    0,    0,
    0,  476,    0,    0,    0,  933,  936,  939,  942,  945,
  948,  951,  954,  957,  960,  963,  966,  969,  972,  975,
  978,  981,    0,    0,  984,  987,  990,  993, 2572, 2848,
    0, 2851,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3340,    0, 3343,    0,    0,    0,
    0,    0,    0, 2854,    0,  234,  235,  236,  237,  238,
  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
  249,  250,    0,    0,  251,  252,  253,  254, 3346, 3727,
    0, 3730,    0,    0,    0,    0,    0,    0, 1005, 1008,
 1011, 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038,
 1041, 1044, 1047, 1050, 1053,    0,    0, 1056, 1059, 1062,
 1065,    0, 3799, 3733, 3802,    0,    0,    0,    0,    0,
    0, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104,
 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128,    0,    0,
 1131, 1134, 1137, 1140,    0,    0, 3805,    0,    0,    0,
    0,    0, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173,
 1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200,    0,
    0, 1203, 1206, 1209, 1212,    0, 2431, 2434, 2437, 2440,
 2443, 2446, 2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470,
 2473, 2476, 2479,    0,    0, 2482, 2485, 2488, 2491,    0,
    0, 3871,    0, 3874,    0,    0,    0,    0,    0,    0,
    0,    0, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2524,
 2527, 2530, 2533, 2536, 2539, 2542, 2545, 2548, 2551,    0,
    0, 2554, 2557, 2560, 2563, 3877, 3943,    0, 3946,    0,
    0,    0,    0,    0,    0,    0,    0, 2785, 2788, 2791,
 2794, 2797, 2800, 2803, 2806, 2809, 2812, 2815, 2818, 2821,
 2824, 2827, 2830, 2833,    0,    0, 2836, 2839, 2842, 2845,
 3949,    0, 3277, 3280, 3283, 3286, 3289, 3292, 3295, 3298,
 3301, 3304, 3307, 3310, 3313, 3316, 3319, 3322, 3325,    0,
    0, 3328, 3331, 3334, 3337,    0, 4015,    0, 4018,    0,
    0,    0,    0,    0,    0,    0,    0, 3664, 3667, 3670,
 3673, 3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697, 3700,
 3703, 3706, 3709, 3712,    0,    0, 3715, 3718, 3721, 3724,
 4021, 4192,    0, 4195,    0,    0,    0,    0,    0,    0,
 3736, 3739, 3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763,
 3766, 3769, 3772, 3775, 3778, 3781, 3784,    0,    0, 3787,
 3790, 3793, 3796, 4417, 4264, 4198, 4267,    0,  554,    0,
    0,  558,  562,  566,    0,    0,    0,    0,    0,  570,
  574,    0,    0,    0,    0,    0,    0, 4336,  578, 4339,
    0,    0,    0,    0,    0,    0,    0,    0, 4270,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4408,    0, 4411,    0,    0,  233,  582,  585,
    0, 4342,    0,    0,    0,  236,    0,    0,    0, 3808,
 3811, 3814, 3817, 3820, 3823, 3826, 3829, 3832, 3835, 3838,
 3841, 3844, 3847, 3850, 3853, 3856, 4414,    0, 3859, 3862,
 3865, 3868,    0,    0,    0,    0,    0,  183,    0,  183,
  183,  183,    0,  183, 3880, 3883, 3886, 3889, 3892, 3895,
 3898, 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922, 3925,
 3928,  183,    0, 3931, 3934, 3937, 3940,    0,    0,    0,
    0,    0,    0,    0,    0, 4417,    0,    0,    0,    0,
  554,    0,    0,  558,  562,  566,    0,    0,    0,    0,
  183,  570,  574,    0,    0,    0,    0,    0,    0,    0,
  578,    0,    0,    0, 3952, 3955, 3958, 3961, 3964, 3967,
 3970, 3973, 3976, 3979, 3982, 3985, 3988, 3991, 3994, 3997,
 4000,    0,    0, 4003, 4006, 4009, 4012,    0,    0,  233,
  582,  585,    0,    0,    0,    0,    0,  236,    0, 4129,
 4132, 4135, 4138, 4141, 4144, 4147, 4150, 4153, 4156, 4159,
 4162, 4165, 4168, 4171, 4174, 4177,  423,    0, 4180, 4183,
 4186, 4189,    0,    0,    0,    0,    0,    0,    0,  423,
    0,    0, 4201, 4204, 4207, 4210, 4213, 4216, 4219, 4222,
 4225, 4228, 4231, 4234, 4237, 4240, 4243, 4246, 4249,    0,
    0, 4252, 4255, 4258, 4261, 4273, 4276, 4279, 4282, 4285,
 4288, 4291, 4294, 4297, 4300, 4303, 4306, 4309, 4312, 4315,
 4318, 4321,    0,    0, 4324, 4327, 4330, 4333,    0,    0,
 4345, 4348, 4351, 4354, 4357, 4360, 4363, 4366, 4369, 4372,
 4375, 4378, 4381, 4384, 4387, 4390, 4393,  423,    0, 4396,
 4399, 4402, 4405,    0,    0,    0,    0,    0,    0,    0,
  423,    0,    0,    0,    0,    0,  183,    0,    0,    0,
    0,  183,    0,  423,  183,  183,  183,    0,    0,    0,
    0,    0,  183,  183, 4417,    0,    0,    0,    0,  554,
    0,  183,  558,  562,  566,    0,  183,  383,    0,    0,
  570,  574,  388,    0,    0,  393,  398,  403,    0,  578,
  383,    0,    0,  408,  413,  388,    0,    0,  393,  398,
  403,    0,  418,    0,    0,    0,  408,  413,    0,    0,
    0,  423,    0,    0,    0,  418,    0,    0,  233,  582,
  585,    0,    0,    0,  423,    0,  236,    0,    0,    0,
    0,  426,  430,  434,  438,    0,  441,  441,  423,  445,
    0,    0,    0,    0,  426,  430,  434,  438,    0,  441,
  441,    0,  445,    0,    0,    0,    0,    0,  383,    0,
    0,    0,    0,  388,    0,    0,  393,  398,  403,    0,
    0,  383,    0,    0,  408,  413,  388,    0,    0,  393,
  398,  403,    0,  418,  383,    0,    0,  408,  413,  388,
    0,    0,  393,  398,  403,    0,  418,    0,    0,  423,
  408,  413,    0,    0,    0,    0,    0,    0,    0,  418,
    0,    0,  426,  430,  434,  438,    0,  441,  441,    0,
  445,  423,    0,    0,    0,  426,  430,  434,  438,    0,
  441,  441,    0,  445,    0,  423,    0,    0,  426,  430,
  434,  438,  383,  441,  441,    0,  445,  388,    0,    0,
  393,  398,  403,    0,    0,  383,    0,  423,  408,  413,
  388,    0,    0,  393,  398,  403,    0,  418,    0,  383,
    0,  408,  413,    0,  388,    0,    0,  393,  398,  403,
  418,    0,    0,    0,    0,  408,  413,    0,    0,    0,
    0,    0,    0,  423,  418,    0,  426,  430,  434,  438,
    0,  441,  441,    0,  445,    0,    0,    0,    0,  426,
  430,  434,  438,    0,  441,  441,    0,  445,    0,    0,
  423,    0,    0,  426,  430,  434,  438,    0,  441,  441,
  383,  445,    0,    0,    0,  388,    0,    0,  393,  398,
  403,    0,    0,    0,    0,    0,  408,  413,    0,    0,
    0,    0,  383,    0,    0,  418,  423,  388,    0,    0,
  393,  398,  403,    0,    0,    0,  383,    0,  408,  413,
    0,  388,    0,    0,  393,  398,  403,  418,  423,    0,
    0,    0,  408,  413,  426,  430,  434,  438,  383,  441,
  441,  418,  445,  388,    0,    0,  393,  398,  403,    0,
    0,    0,    0,    0,  408,  413,  426,  430,  434,  438,
    0,  441,  441,  418,  445,    0,    0,    0,    0,    0,
  426,  430,  434,  438,  383,  441,  441,    0,  445,  388,
    0,    0,  393,  398,  403,    0,  423,    0,    0,    0,
  408,  413,  426,  430,  434,  438,    0,  441,  441,  418,
  445,  383,    0,    0,  423,    0,  388,    0,    0,  393,
  398,  403,    0,    0,    0,    0,    0,  408,  413,    0,
    0,    0,    0,    0,    0,    0,  418,    0,  426,  430,
  434,  438,    0,  441,  441,    0,  445,  383,    0,    0,
    0,    0,  388,    0,    0,  393,  398,  403,    0,    0,
    0,    0,    0,  408,  413,  426,  430,  434,  438,  383,
  441,  441,  418,  445,  388,    0,    0,  393,  398,  403,
    0,    0,    0,    0,    0,  408,  413,    0,    0,    0,
    0,    0,    0,    0,  418,    0,    0,    0,    0,    0,
    0,  426,  430,  434,  438,  226,  441,  441,    0,  445,
  229,    0,    0,  229,  229,  229,    0,    0,    0,    0,
    0,  229,  229,  426,  430,  434,  438,  383,  441,  441,
  229,  445,  388,    0,    0,  393,  398,  403,    0,    0,
    0,    0,    0,  408,  413,  383,    0,    0,    0,    0,
  388,    0,  418,  393,  398,  403,    0,    0,    0,  233,
    0,  408,  413,    0,    0,    0,    0,  236,    0,    0,
  418,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  426,  430,  434,  438,    0,  441,  441,    0,  445,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  426,
  430,  434,  438,    0,  441,  441,    0,  445,
};
static int yycheck[] = {                                      90,
    0,    1,    1,   31,  104,  126,    6,   61,    8,    9,
   10,   60,   44,   38,    5,   15,   16,    0,   38,  110,
   48,   40,   42,   41,   40,   60,   44,    5,  119,   60,
   38,   44,   40,  518,   42,  350,   41,    5,   43,   44,
   45,   41,  453,   41,   91,  430,   44,   44,  268,  269,
   44,   38,   60,   40,   59,   42,   61,   57,   45,   41,
  258,  123,   41,   91,   60,   44,   66,   59,   60,  125,
   70,   41,   44,   44,   44,   91,  104,   44,  581,   44,
  108,  566,  280,   44,   66,   59,  257,   60,   93,   89,
   90,   58,   70,  125,  265,  123,  124,  125,  126,   44,
  100,  101,  102,  103,  104,  104,   44,  492,   44,   60,
  110,   89,  125,  104,   92,   59,   60,   44,   41,  119,
  125,   44,  122,   60,   62,   33,  104,  125,  125,   59,
   38,  125,   40,  636,   42,   37,  257,   45,   44,   41,
   42,   43,   44,   45,   38,   47,   40,   59,  559,  123,
   59,   60,   46,  125,  125,  125,  123,   59,  123,   61,
   37,   38,  123,  548,   41,   42,   43,   44,   45,   46,
   47,  486,   59,  201,   44,   44,  204,  273,  123,  123,
   58,   59,   59,   91,   61,   41,  282,  123,   44,   59,
  122,   93,  192,  123,   44,  126,  123,   91,  226,   59,
   60,   60,  202,   59,   44,  205,   60,  207,  208,   59,
   44,  123,   44,  204,  123,  123,   93,  123,  126,  275,
  276,  277,  200,  125,  273,  257,  204,   59,   60,   60,
  124,   60,  257,  282,   60,   60,  123,   93,  257,  271,
  272,  209,  273,  211,  257,   60,  214,  124,  125,   60,
  126,  282,  257,   60,  232,  233,  125,  311,  271,  272,
  192,  315,  290,  257,  311,  273,  271,  272,   60,  125,
  257,  271,  319,   60,  282,   40,  276,  271,  272,  279,
   91,  273,  282,  123,   91,  305,  282,   40,  320,  123,
  282,  123,  275,  276,  277,  295,  314,  305,  316,  317,
   40,  301,   58,   59,  364,  365,  338,  320,  308,   44,
   44,  311,   40,  281,  273,  320,  257,   41,   46,  319,
  307,  308,  273,  282,  424,  338,  320,   44,   62,  273,
   59,  282,  273,  338,   59,   59,  273,  319,  282,  271,
   59,  282,   59,  343,  276,  282,  437,  466,  467,  257,
  258,  259,  260,   59,  262,  257,  416,  265,  266,  267,
  311,  343,  481,   91,  273,  273,  274,  123,  319,  271,
  272,  349,  372,  282,  282,  283,  284,  285,  286,  287,
  257,  312,  313,  314,  484,  316,  317,  487,  257,  273,
  125,   60,  257,  371,  271,  272,  424,  311,  282,  307,
  308,  257,  271,  272,   59,  319,  271,  272,  408,   59,
   40,  411,  412,  273,  273,  271,  272,   48,  320,  519,
   40,   41,  282,  282,  424,  424,  408,  335,  336,  337,
  412,  273,  432,  424,   58,   41,  338,  437,   44,   70,
  282,  273,  420,  320,  273,  257,  424,  123,  273,  417,
  282,  320,  452,  282,  454,  320,  484,  282,  273,  487,
   41,  338,  273,   44,  320,   41,  273,  282,   44,  338,
  452,  282,  454,  338,   41,  282,  476,  108,   59,  411,
  580,  273,  338,  461,  484,  484,  273,  487,  487,  311,
  282,  519,   93,  484,  476,  282,  487,  319,   41,  599,
  311,   44,  257,   38,  311,  257,  484,   42,  319,  487,
   41,  511,  319,   44,  514,  615,  311,   44,  273,  519,
  519,  273,  257,  311,  319,   60,   41,  282,  519,   44,
  282,  319,   59,  533,   61,  635,  271,  272,  275,  276,
  277,  519,   41,   24,   25,   26,   27,   28,   29,   30,
   31,  314,  580,  316,  317,  257,  524,  525,  558,  264,
  560,   42,   43,   44,   41,   46,  257,   44,  536,  569,
  570,  599,  257,   38,  574,  575,  558,   42,  560,  511,
  580,  580,  514,   41,  264,  320,   44,  615,  331,  580,
  257,   44,   41,   44,   41,   44,  257,   44,   41,  599,
  599,   44,  580,  338,  264,  605,   93,  635,  599,  257,
  610,   42,   59,  613,   61,  615,  615,   40,   58,  433,
   40,  599,   58,  605,  615,   58,  626,  627,   38,  629,
  257,  613,  257,  601,  602,  635,  635,  615,  606,  433,
  640,  257,  642,  575,  635,  627,   61,  647,  257,   42,
  257,  651,  652,  653,  257,   61,  624,  635,  640,   62,
  642,   41,   62,   43,   44,   45,   41,   62,   62,   44,
  652,  653,  125,   41,  125,   40,  433,  264,  610,   59,
  494,   61,   37,  497,   59,  166,   41,   42,   43,   44,
   45,   40,   47,   60,  626,   59,   41,  629,  484,   44,
  494,  487,   41,  497,   59,   44,   61,  257,  189,  190,
  191,  192,   40,   93,   59,  647,   61,  257,   93,  651,
   59,   62,   61,  257,   41,   40,   58,   44,  257,  210,
   40,   40,  546,  519,   33,   40,   38,  494,   93,   38,
  497,   40,   59,   42,   61,  125,   45,   41,   40,   42,
  125,   40,  546,  234,  235,  236,  237,  238,  239,  240,
  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,
  125,  585,  253,  254,  255,  256,  257,  258,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,   40,  546,
   40,  585,  257,   41,  580,  331,   42,  262,   40,    0,
  265,  266,  267,   40,  257,   41,  257,   40,  273,  274,
  312,  313,  314,  599,  316,  317,   38,  282,  271,  272,
  271,  272,  257,   61,  123,   59,  257,  126,  585,  615,
   61,  262,   33,   59,  265,  266,  267,   38,   40,   40,
  257,   42,  273,  274,   45,   42,  327,  257,  257,  635,
  257,  282,  262,   40,   59,  265,  266,  267,  257,  258,
  259,  260,   41,  273,  274,  346,  347,  320,  260,  320,
   41,   40,  282,  311,  312,  313,  314,  257,  316,  317,
  361,  319,  257,   58,  123,  338,   59,  338,    0,   41,
   40,  271,  272,   41,   40,  262,  271,  272,  265,  266,
  267,  311,  257,   59,   40,  123,   41,  274,  260,  319,
   37,   38,  123,   40,    0,   42,  271,  272,   59,   46,
   47,   33,  123,  123,  125,  126,   38,   59,   40,   42,
   42,  262,  257,   45,  265,  266,  267,   44,   41,   41,
  320,  257,  273,  274,  311,  320,  257,  338,   40,   60,
  257,  282,  319,  257,  257,  273,  287,  438,  338,  258,
  259,  260,  257,  338,   91,  320,  324,  325,  326,  327,
  328,  329,  453,  257,  257,  456,  273,    0,  338,   62,
  497,   70,  424,  338,  283,  284,  285,  286,  287,  437,
  312,  313,  314,  474,  316,  317,   70,  124,  312,  313,
  314,  482,  316,  317,   70,   70,   70,   50,  307,  308,
   33,  123,  311,  125,  126,   38,  534,   40,   -1,   42,
  319,  625,   45,  266,   -1,  506,  507,  508,  509,   -1,
  511,   -1,   -1,  514,   -1,   -1,  335,  336,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  528,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,  550,
  271,  272,  273,  274,  275,  276,  277,  278,  559,   -1,
  561,  282,  283,  284,  285,  286,  287,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  576,   -1,   38,  281,   40,
  123,   42,  125,  126,   45,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,  321,  322,
  323,  324,  325,  326,  327,  328,  329,   -1,  629,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,  275,  276,  277,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,   -1,   -1,   -1,   33,
   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,
  262,   -1,  324,  265,  266,  267,   -1,   -1,  330,  331,
  332,  273,  274,  335,  336,  337,  338,   -1,   -1,   -1,
  282,   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,  275,  276,  277,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,
   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,   -1,  126,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  261,  262,  263,
   -1,  265,  266,  267,  268,  269,   -1,  271,  272,  273,
  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,
   38,  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,
  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,
   -1,  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,  338,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,   -1,  126,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  262,  263,   -1,  265,  266,  267,
  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,
   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,
   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,
  338,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
  261,  262,  263,   -1,  265,  266,  267,  268,  269,   -1,
  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,  286,  287,   -1,   33,   -1,
   -1,  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
  311,  312,  313,  314,   -1,  316,  317,   -1,  319,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,
   -1,  126,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,  338,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,  263,   -1,  265,  266,  267,  268,  269,   -1,  271,
  272,  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,
  123,   -1,   38,  126,   40,   -1,   42,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,
  332,   -1,   -1,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,  262,  263,   -1,
  265,  266,  267,  268,  269,   -1,  271,  272,  273,  274,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,
  126,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,  338,  257,  258,  259,  260,  261,  262,
  263,   -1,  265,  266,  267,  268,  269,   -1,  271,  272,
  273,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,   -1,  126,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  262,  263,   -1,  265,
  266,  267,  268,  269,   -1,  271,  272,  273,  274,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
  286,  287,   -1,   33,   -1,   -1,  123,   -1,   38,  126,
   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,
   -1,  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,
   -1,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,  262,  263,   -1,  265,  266,  267,  268,
  269,   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,  123,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,
   -1,  330,  331,  332,   -1,   -1,  335,  336,  337,  338,
  257,  258,  259,  260,  261,  262,  263,   -1,  265,  266,
  267,  268,  269,   -1,  271,  272,  273,  274,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  123,   42,  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,  336,
  337,  338,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,  262,  263,   -1,  265,  266,  267,  268,  269,
   -1,  271,  272,  273,  274,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   33,   -1,
   -1,   -1,  123,   38,  125,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
  320,   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  330,  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,  123,   -1,
  125,   38,   -1,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   46,   47,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   61,   -1,  335,  336,  337,  338,   -1,  258,  259,  260,
  261,   -1,  263,  126,   -1,   40,   41,  268,  269,   44,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   91,   -1,  283,  284,  285,  286,  287,   62,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,  125,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,  257,   -1,   -1,  320,
   -1,  262,   -1,  324,  265,  266,  267,   -1,   -1,  330,
  331,  332,  273,  274,  335,  336,  337,  338,   -1,   -1,
   -1,  282,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,  123,   38,
  125,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,  320,   -1,   -1,   -1,  324,
  273,  274,   -1,   -1,   -1,  330,  331,  332,   -1,  282,
  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,  123,   -1,  125,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  265,  266,  267,  320,   -1,   -1,   -1,  324,  273,  274,
   -1,   -1,   -1,  330,  331,  332,   -1,  282,  335,  336,
  337,  338,  287,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,  287,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  123,   42,  125,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  307,  308,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  265,  266,  267,  320,   -1,   -1,   -1,  324,
  273,  274,   -1,   -1,   -1,  330,  331,  332,   -1,  282,
  335,  336,  337,  338,  287,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,  123,   38,  125,   40,   -1,   42,
   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,  320,   -1,  270,   -1,  324,  273,  274,   -1,   -1,
   -1,  330,  331,  332,   -1,  282,  335,  336,  337,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   -1,  268,  269,   -1,
  271,  272,   -1,   -1,  275,  276,  277,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,   -1,   33,   -1,
  123,   -1,  125,   38,   -1,   40,   -1,   42,  262,   -1,
   45,  265,  266,  267,   -1,   -1,  307,  308,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,  320,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,
  331,  332,   -1,   -1,  335,  336,  337,  338,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,  311,   -1,  268,
  269,   -1,  271,  272,   -1,  319,  275,  276,  277,  278,
   -1,   -1,   -1,   -1,  283,  284,  285,  286,  287,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  123,   42,
  125,   -1,   45,   -1,   -1,   -1,   -1,   -1,  307,  308,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,   -1,
   -1,  330,  331,  332,   -1,  282,  335,  336,  337,  338,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,
  263,   -1,   -1,   -1,   -1,  268,  269,   -1,  271,  272,
   -1,   -1,  275,  276,  277,  278,   -1,   -1,   -1,   -1,
  283,  284,  285,  286,  287,   -1,   33,   -1,   -1,   -1,
  123,   38,  125,   40,   -1,   42,   -1,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,  320,   -1,   -1,
   -1,  324,  273,  274,   -1,   -1,   -1,  330,  331,  332,
   -1,  282,  335,  336,  337,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,   -1,
   -1,   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,
  275,  276,  277,  278,   -1,   -1,   -1,   -1,  283,  284,
  285,  286,  287,   -1,   33,   -1,  123,   -1,  125,   38,
   -1,   40,   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,
   -1,  262,  307,  308,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  320,   -1,   -1,   -1,  324,
   -1,  282,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,
  335,  336,  337,  338,   -1,  258,  259,  260,  261,   -1,
  263,   38,   -1,   40,   41,  268,  269,   44,  271,  272,
  311,   -1,  275,  276,  277,  278,   -1,   -1,  319,   -1,
  283,  284,  285,  286,  287,   62,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,  125,   -1,   45,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,  320,   -1,   -1,
   -1,  324,   -1,   -1,   -1,   -1,   -1,  330,  331,  332,
   -1,   -1,  335,  336,  337,  338,   -1,   -1,   -1,   -1,
   -1,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,   -1,   -1,  283,  284,  285,  286,
  287,   -1,   33,   -1,   -1,   -1,  123,   38,   -1,   40,
   -1,   42,   -1,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,  320,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,   -1,  330,  331,  332,   -1,   59,  335,  336,
  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,  260,  261,   -1,  263,   -1,   -1,   -1,   -1,  268,
  269,   -1,  271,  272,   -1,   -1,  275,  276,  277,  278,
   -1,   93,   -1,   -1,  283,  284,  285,  286,  287,   33,
   -1,   -1,  123,   -1,   38,   -1,   40,   -1,   42,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,  308,
  257,   -1,   -1,  125,   -1,  262,   -1,   -1,  265,  266,
  267,  320,   -1,   -1,   -1,  324,  273,  274,   -1,   -1,
   -1,  330,  331,  332,   -1,  282,  335,  336,  337,  338,
  287,  258,  259,  260,  261,   -1,  263,   -1,   -1,   -1,
   -1,  268,  269,   -1,  271,  272,   -1,   -1,  275,  276,
  277,  278,   -1,   -1,  311,   -1,  283,  284,  285,  286,
  287,   33,  319,   -1,   41,   -1,   38,   44,   40,  123,
   42,   -1,   -1,   45,   41,   -1,   -1,   44,   -1,   -1,
  307,  308,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   59,  320,   -1,  262,   -1,  324,  265,  266,
  267,   -1,   -1,  330,  331,  332,  273,  274,  335,  336,
  337,  338,   -1,   -1,   -1,  282,   93,  258,  259,  260,
  261,   -1,  263,   -1,   -1,   -1,   93,  268,  269,   -1,
  271,  272,   -1,   -1,   -1,  257,   -1,  278,   -1,   -1,
   -1,   -1,  283,  284,  285,  286,  287,   33,  125,  271,
  272,  123,   38,   -1,   40,  257,   42,   -1,  125,   45,
  262,   -1,   -1,  265,  266,  267,  307,  308,  257,   -1,
   -1,  273,  274,  262,   -1,   -1,  265,  266,  267,  320,
  282,   -1,   -1,  324,  273,  274,   -1,   -1,   -1,  330,
  331,  332,   -1,  282,  335,  336,  337,  338,  320,   -1,
   -1,   -1,   -1,   -1,  258,  259,  260,  261,   -1,  263,
   -1,   -1,   -1,   -1,  268,  269,  338,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  283,
  284,  285,  286,  287,   33,   -1,   -1,  123,   -1,   38,
   -1,   40,   41,   42,   -1,   -1,   45,  257,   -1,   -1,
   -1,   -1,  262,  307,  308,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,  320,   -1,   -1,   -1,
  324,   -1,  282,   -1,   -1,   -1,  330,  331,  332,   -1,
  257,  335,  336,  337,  338,   -1,  258,  259,  260,  261,
  257,  263,   -1,   -1,  271,  272,  268,  269,   -1,  271,
  272,  311,  312,  313,  271,  272,  278,   -1,   -1,  319,
   -1,  283,  284,  285,  286,  287,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,  123,   42,   -1,  126,   45,  257,
   -1,   -1,   -1,   -1,  262,  307,  308,  265,  266,  267,
   -1,   -1,   -1,  320,   41,  273,  274,   44,  320,   -1,
   -1,   -1,  324,  320,  282,   -1,   -1,   -1,  330,  331,
  332,  338,   59,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,  338,  258,  259,  260,  261,   93,  263,   -1,   -1,
   -1,   -1,  268,  269,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   93,  283,  284,  285,
  286,  287,   -1,   -1,   -1,   33,  123,   -1,   -1,  126,
   38,   -1,   40,   -1,   42,  257,   -1,   45,   -1,   -1,
  262,  307,  308,  265,  266,  267,   -1,   -1,  125,   -1,
   -1,  273,  274,   -1,  320,   -1,   33,   -1,  324,   -1,
  282,   -1,   -1,   -1,  330,  331,  332,   -1,   -1,  335,
  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,  262,   -1,   93,  265,  266,  267,  311,
  312,  313,   -1,   -1,  273,  274,   -1,  319,   -1,   -1,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,   -1,
   -1,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,  257,   -1,   45,   -1,   -1,  262,  307,  308,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,   -1,   -1,   33,   -1,   -1,  123,  282,   38,  126,
   40,   -1,   42,   -1,   -1,   45,  335,  336,  337,   -1,
  257,  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   93,   -1,   -1,   -1,  273,  274,   -1,   -1,
  257,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,   33,   -1,
  307,  308,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,  335,  336,
  337,   -1,   -1,  320,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,  338,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
   -1,  258,  259,  260,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  123,  307,
  308,  126,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,  335,  336,  337,
   -1,  273,  274,   -1,   -1,   -1,  257,  258,  259,  260,
  282,  262,   -1,   40,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,   -1,   -1,   -1,  335,  336,
  337,  282,  283,  284,  285,  286,  287,  257,  258,  259,
  260,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,   -1,  307,  308,   -1,   -1,
   -1,   -1,  282,  283,  284,  285,  286,  287,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,  335,  336,  337,  307,  308,   -1,
   59,   -1,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  335,  336,  337,  273,  274,
   -1,   -1,   91,   -1,   93,   94,   -1,  282,  283,  284,
  285,  286,  287,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,  307,  308,  123,  124,  125,   -1,   59,  257,
   61,   62,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
  335,  336,  337,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,   37,   38,   -1,   40,   41,
   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   41,   -1,  311,   44,   -1,   -1,   59,   -1,   61,
   62,  319,  123,  124,  125,   -1,   -1,   -1,   -1,   59,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,  257,   91,
   -1,   93,   94,  262,   -1,  282,  265,  266,  267,   -1,
   -1,   -1,  257,   93,  273,  274,   -1,  262,   -1,   -1,
  265,  266,  267,  282,   -1,   -1,   -1,   -1,  273,  274,
   -1,  123,  124,  125,  311,  312,  313,  282,  257,   -1,
   -1,   41,  319,  262,   44,  125,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,  274,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  311,   93,   -1,   -1,   -1,   -1,   -1,   -1,
  319,  320,   -1,   -1,   -1,   -1,  257,   -1,   -1,   41,
   -1,  262,   44,   -1,  265,  266,  267,   -1,   -1,  338,
  271,  272,   -1,  274,   -1,  125,   -1,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,   -1,  307,  308,  309,  310,
  311,   93,   -1,   38,   -1,  257,   -1,   42,  319,  320,
  262,   -1,   -1,  265,  266,  267,   -1,  257,   -1,  271,
  272,   -1,  274,   -1,   59,   60,   -1,  338,   -1,   -1,
   -1,  271,  272,  125,   -1,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,   -1,  307,  308,  309,  310,  311,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,  320,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
  320,   -1,   -1,   -1,   -1,   -1,  338,   -1,   -1,   -1,
   -1,   59,   -1,   61,   62,   -1,   -1,  257,  338,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,  271,  272,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   91,   -1,   93,   94,   -1,   37,   38,
  282,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   62,   -1,  123,  124,  125,   -1,  311,
  320,   -1,   -1,   -1,   -1,  257,   -1,  319,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,  271,
  272,   -1,   91,   -1,   93,   94,   -1,   37,   38,   -1,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   59,
   47,   61,   62,   -1,  123,  124,  125,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   61,   -1,   -1,  262,  320,   -1,
  265,  266,  267,   -1,   -1,   -1,   -1,   -1,   -1,  274,
   -1,   91,  257,   93,   94,   -1,  338,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   93,   -1,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,
  305,  273,  274,  123,  124,  125,  311,  312,  313,  314,
  282,  316,  317,   -1,  319,   -1,   -1,  124,  125,  257,
   -1,   -1,   41,   -1,  262,   44,   -1,  265,  266,  267,
   -1,   -1,   -1,  271,  272,   -1,  274,   -1,   -1,  311,
   59,   -1,   -1,   -1,   -1,   -1,   -1,  319,   -1,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,   -1,  307,
  308,  309,  310,  311,   93,   -1,   38,   -1,  257,   -1,
   42,  319,  320,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,  271,  272,   -1,  274,   -1,   -1,   60,   -1,
  338,   -1,   -1,   -1,   -1,   -1,  125,   -1,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  311,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  319,  320,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
  257,  271,  272,   -1,  274,   -1,   -1,   -1,   -1,  338,
   -1,   -1,   -1,   -1,  271,  272,   -1,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  319,
  320,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,  320,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,   -1,   59,  257,   61,   62,   -1,   -1,  262,
   -1,  338,  265,  266,  267,   -1,   -1,   -1,  257,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,  271,  272,   -1,   91,   -1,   93,   94,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,  312,
  313,   59,   60,   61,   62,   -1,  319,  123,  124,  125,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,  320,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   91,   -1,   93,   94,   37,   38,  338,
   40,   41,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   60,   61,   62,  305,   -1,  123,  124,  125,   -1,  311,
  312,  313,  314,  257,  316,  317,   -1,  319,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   91,   -1,   93,   94,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,  123,  124,  125,   -1,  311,  312,  313,
   -1,   59,   -1,   61,   62,  319,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,  271,  272,   -1,  274,   -1,
   -1,   -1,   -1,   91,   -1,   93,   94,   -1,   -1,   -1,
   -1,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
   -1,  307,  308,  309,  310,  311,  124,  125,   -1,   -1,
   -1,  257,   41,  319,  320,   44,  262,   -1,   -1,  265,
  266,  267,   -1,  271,  272,   -1,   -1,  273,  274,   -1,
   59,   -1,  338,   -1,   -1,   -1,  282,   -1,   -1,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,   -1,  307,
  308,  309,  310,  311,   93,   -1,   -1,   -1,   -1,   37,
   -1,  319,  320,   41,   -1,   43,   44,   -1,   46,   47,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,   59,   60,   61,   62,   -1,  125,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,   -1,  307,  308,  309,
  310,  311,   -1,   91,   -1,   93,   94,   -1,   -1,  319,
  320,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,  257,
   -1,   41,   42,   43,   44,   45,   46,   47,  338,   -1,
   -1,   -1,   -1,  271,  272,   -1,  124,  125,   -1,   59,
   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,   93,   -1,   -1,   -1,   -1,   -1,   37,
   38,   -1,  320,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  338,   59,   -1,   61,  124,  125,   37,   38,  257,   -1,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   59,   -1,
   61,   -1,   37,   38,   -1,   93,   41,   42,   43,   44,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,  124,  125,   37,   38,
   -1,  320,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   93,  338,
   59,   -1,   61,  124,  125,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  124,
  125,  309,  310,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  320,   -1,   -1,   -1,   41,  257,   -1,   44,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
  338,  271,  272,   -1,   59,  124,  125,   -1,   -1,   37,
   38,   59,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   41,   37,   38,   44,   -1,   41,   42,   43,   44,
   45,   59,   47,   61,   -1,   -1,   -1,   -1,   93,   59,
   -1,   -1,   -1,   -1,   59,   93,   61,   37,   -1,  257,
  320,   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,
   -1,   -1,   -1,  271,  272,   93,   -1,   -1,  338,   59,
  125,   61,   -1,   93,   -1,   -1,  257,  125,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,  272,   -1,   -1,   -1,   41,  124,  125,   44,   -1,
   -1,   -1,  257,   93,   -1,  125,   -1,   -1,   -1,  124,
  125,   41,  320,   59,   44,   -1,  271,  272,   37,   -1,
   -1,   -1,   41,   42,   43,   44,   45,   -1,   47,   59,
  338,   -1,   -1,   -1,   -1,  125,   -1,   -1,  257,  320,
   59,   41,   61,   -1,   44,   -1,   41,   93,   -1,   44,
   -1,   -1,  271,  272,   -1,   -1,   -1,  338,   -1,   59,
   -1,   -1,   37,   93,   59,  320,   41,   42,   43,   44,
   45,   -1,   47,   -1,   93,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   41,  338,   59,   44,   61,   41,   -1,   -1,
   44,   -1,   -1,   93,   -1,  125,   -1,   -1,   93,   -1,
   59,  320,  257,   -1,   -1,   59,  125,   -1,   -1,  257,
   41,   -1,   -1,   44,   -1,   -1,  271,  272,   93,  338,
   -1,   -1,   -1,  271,  272,  125,   -1,   -1,   59,  257,
  125,   -1,   -1,   -1,   93,   -1,   -1,  257,   -1,   93,
   -1,   -1,  257,  271,  272,   -1,   -1,   -1,   -1,   -1,
  125,  271,  272,   -1,   -1,   41,  271,  272,   44,   -1,
   41,   -1,   93,   44,   -1,  320,  125,  257,   -1,   -1,
   -1,  125,  320,   59,   -1,   -1,   -1,   -1,   59,   -1,
   -1,  271,  272,  338,   41,   -1,   -1,   44,   -1,   -1,
  338,   -1,  320,   -1,  125,   41,   -1,   -1,   44,   -1,
  320,   -1,   59,   -1,   -1,  320,   -1,   93,   -1,   -1,
  338,  257,   93,   59,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,   -1,  338,   -1,  271,  272,  257,   -1,   -1,
  320,   41,   -1,   -1,   44,   -1,   93,   41,  257,  125,
   44,  271,  272,   -1,  125,   -1,   -1,   93,  338,   59,
   -1,   -1,  271,  272,   -1,   59,   -1,  257,   -1,   -1,
   -1,   -1,  257,   -1,   -1,   -1,   38,   -1,  125,   -1,
   42,  271,  272,   -1,  320,   -1,  271,  272,   -1,  125,
   -1,   -1,  257,   93,   -1,   -1,   -1,   -1,   60,   93,
  320,   -1,  338,   -1,   -1,   -1,  271,  272,  257,   -1,
   -1,  320,   -1,  257,   -1,   -1,   -1,   -1,  338,   -1,
   -1,   -1,  271,  272,   -1,  125,   -1,  271,  272,  338,
  320,  125,   -1,   -1,   -1,  320,  257,   38,   -1,   40,
   41,   42,   -1,   44,   -1,   -1,   -1,   -1,  338,   -1,
  271,  272,   -1,  338,   -1,  320,   38,   -1,   40,   41,
   -1,   62,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  320,   -1,  338,   -1,   -1,  320,   -1,   -1,   -1,
   62,  257,   -1,   -1,   -1,   -1,  257,   -1,   -1,  338,
   91,   -1,   -1,   -1,  338,  271,  272,   -1,  257,  320,
  271,  272,   -1,  262,   -1,   -1,  265,  266,  267,   91,
  257,   -1,   -1,   -1,  273,  274,   -1,  338,   -1,   -1,
   -1,  257,   -1,  282,  271,  272,   -1,   -1,   40,   41,
   -1,   -1,   44,   -1,   -1,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  320,   -1,   -1,   40,   41,  320,
   62,   44,  311,  312,  313,   -1,   -1,  257,   -1,   -1,
  319,   -1,  338,  257,   -1,   -1,   -1,  338,   -1,   62,
   -1,  271,  272,  320,   -1,   -1,   -1,  271,  272,   91,
   -1,   -1,   -1,   -1,  320,   42,   -1,   -1,   -1,   -1,
   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
  262,   -1,  338,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,   -1,  274,   -1,  257,   -1,   -1,   -1,   -1,  262,
  320,   -1,  265,  266,  267,   -1,  320,   -1,   -1,   -1,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,  338,  282,
   -1,   -1,   -1,  305,  338,   -1,   -1,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,  257,  319,   -1,   -1,
   -1,  262,   -1,   -1,  265,  266,  267,   -1,  311,  312,
  313,   -1,   -1,  274,   -1,  257,  319,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,  287,   -1,   -1,   37,
   38,  273,  274,   -1,   42,   43,   44,   45,   46,   47,
  282,   -1,   -1,   -1,  305,  287,   -1,   -1,   -1,   -1,
  311,   59,   60,   61,   62,   -1,   -1,  257,  319,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,  311,
   -1,   -1,   -1,  273,  274,   -1,   -1,  319,   -1,   -1,
   -1,   -1,  282,   91,   -1,  257,   94,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,  257,   -1,   -1,   -1,   -1,  262,
  282,  311,  265,  266,  267,  287,  124,  125,   -1,  319,
  273,  274,   -1,   -1,   -1,   -1,   33,   -1,   -1,  282,
   37,   38,   -1,   40,  287,   42,   43,   44,   45,  311,
   47,   -1,   -1,   -1,   -1,  262,   -1,  319,  265,  266,
  267,   -1,   -1,   60,   61,   62,  273,  274,  311,   -1,
   -1,   -1,   -1,   -1,   -1,  282,  319,   -1,   37,   38,
  287,   40,   -1,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   59,   60,   61,   62,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,  126,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,  124,  125,   -1,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   59,   60,   61,   62,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,  314,   91,  316,  317,
   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,   61,
   62,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,   -1,   -1,   -1,  124,   -1,   91,
   -1,   -1,   94,  282,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,  124,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   46,   47,  273,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,  282,   -1,
   94,   60,   61,   62,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
  124,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   60,   61,   62,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   91,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
  124,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   93,   94,   60,
   61,   62,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,  124,   -1,
   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   91,   37,   38,
   94,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   37,   38,   -1,   40,   41,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   93,   94,   60,   61,   62,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  124,   -1,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  124,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,
   -1,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  124,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
   37,   38,   -1,   40,   41,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,  124,   -1,   -1,
   -1,   37,   38,   -1,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   60,
   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,  124,   -1,
   91,   37,   38,   94,   40,   41,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  124,   -1,
  307,  308,  309,  310,   91,   -1,   93,   94,   37,   -1,
   -1,   40,   -1,   -1,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   61,   62,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  124,  125,   91,   -1,   -1,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
  124,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  124,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,   -1,  307,  308,
  309,  310,   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,  124,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  124,   -1,   91,   -1,   -1,
   94,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  124,   -1,
  307,  308,  309,  310,   91,   37,   38,   94,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,  124,   -1,   -1,
   -1,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   91,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  124,   -1,
  307,  308,  309,  310,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   -1,   -1,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   60,   61,   62,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  124,   -1,   91,   37,   38,
   94,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  124,   -1,  307,  308,  309,
  310,   91,   -1,   -1,   94,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,  124,   -1,   91,   -1,   -1,   94,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,  124,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  124,   -1,  307,  308,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,   46,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   94,   60,   61,   62,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,  124,   -1,   91,   -1,   -1,   94,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,  124,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   94,   -1,   -1,   -1,   -1,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  124,   -1,  307,  308,  309,
  310,   91,   37,   38,   94,   40,   -1,   42,   43,   -1,
   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   -1,   -1,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,
   60,   61,   62,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,  124,
   -1,   91,   -1,   60,   94,   62,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,  124,   -1,   -1,   94,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   91,   -1,   -1,   94,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  124,   -1,  307,  308,  309,
  310,   94,   -1,   -1,   37,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   91,   -1,
   60,   94,   62,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,  124,   -1,   60,   94,   62,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   60,   -1,   62,   94,   -1,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   60,   -1,
   62,   -1,   -1,   -1,  282,   -1,   -1,   -1,   94,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,   -1,  307,  308,
  309,  310,   94,  311,   60,   -1,   62,   -1,   -1,   -1,
   -1,  319,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   94,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   94,   60,
   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,   -1,  307,  308,  309,
  310,   -1,   60,   94,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,   -1,   -1,
  307,  308,  309,  310,   -1,   -1,   94,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,
   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   94,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   94,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,   -1,   60,   -1,   62,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,   -1,   -1,  307,  308,  309,  310,
   94,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,  307,
  308,  309,  310,  257,   60,   94,   62,   -1,  262,   -1,
   -1,  265,  266,  267,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,   -1,   -1,   -1,   -1,   -1,   60,  282,   62,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   94,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,  311,  312,  313,
   -1,   94,   -1,   -1,   -1,  319,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   94,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,
   41,   42,   -1,   44,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   62,   -1,  307,  308,  309,  310,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   91,  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,  311,
  312,  313,   -1,   -1,   -1,   -1,   -1,  319,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  126,   -1,  307,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
   -1,  307,  308,  309,  310,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  126,   -1,  307,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
   -1,  262,   -1,  126,  265,  266,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,  257,   -1,   -1,   -1,   -1,  262,
   -1,  282,  265,  266,  267,   -1,  287,  257,   -1,   -1,
  273,  274,  262,   -1,   -1,  265,  266,  267,   -1,  282,
  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,  266,
  267,   -1,  282,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,  126,   -1,   -1,   -1,  282,   -1,   -1,  311,  312,
  313,   -1,   -1,   -1,  126,   -1,  319,   -1,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,  126,  319,
   -1,   -1,   -1,   -1,  311,  312,  313,  314,   -1,  316,
  317,   -1,  319,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,  257,   -1,   -1,  273,  274,  262,   -1,   -1,  265,
  266,  267,   -1,  282,  257,   -1,   -1,  273,  274,  262,
   -1,   -1,  265,  266,  267,   -1,  282,   -1,   -1,  126,
  273,  274,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  282,
   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,
  319,  126,   -1,   -1,   -1,  311,  312,  313,  314,   -1,
  316,  317,   -1,  319,   -1,  126,   -1,   -1,  311,  312,
  313,  314,  257,  316,  317,   -1,  319,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,  257,   -1,  126,  273,  274,
  262,   -1,   -1,  265,  266,  267,   -1,  282,   -1,  257,
   -1,  273,  274,   -1,  262,   -1,   -1,  265,  266,  267,
  282,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,  126,  282,   -1,  311,  312,  313,  314,
   -1,  316,  317,   -1,  319,   -1,   -1,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,   -1,   -1,
  126,   -1,   -1,  311,  312,  313,  314,   -1,  316,  317,
  257,  319,   -1,   -1,   -1,  262,   -1,   -1,  265,  266,
  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  282,  126,  262,   -1,   -1,
  265,  266,  267,   -1,   -1,   -1,  257,   -1,  273,  274,
   -1,  262,   -1,   -1,  265,  266,  267,  282,  126,   -1,
   -1,   -1,  273,  274,  311,  312,  313,  314,  257,  316,
  317,  282,  319,  262,   -1,   -1,  265,  266,  267,   -1,
   -1,   -1,   -1,   -1,  273,  274,  311,  312,  313,  314,
   -1,  316,  317,  282,  319,   -1,   -1,   -1,   -1,   -1,
  311,  312,  313,  314,  257,  316,  317,   -1,  319,  262,
   -1,   -1,  265,  266,  267,   -1,  126,   -1,   -1,   -1,
  273,  274,  311,  312,  313,  314,   -1,  316,  317,  282,
  319,  257,   -1,   -1,  126,   -1,  262,   -1,   -1,  265,
  266,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  282,   -1,  311,  312,
  313,  314,   -1,  316,  317,   -1,  319,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,  311,  312,  313,  314,  257,
  316,  317,  282,  319,  262,   -1,   -1,  265,  266,  267,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,   -1,
   -1,  311,  312,  313,  314,  257,  316,  317,   -1,  319,
  262,   -1,   -1,  265,  266,  267,   -1,   -1,   -1,   -1,
   -1,  273,  274,  311,  312,  313,  314,  257,  316,  317,
  282,  319,  262,   -1,   -1,  265,  266,  267,   -1,   -1,
   -1,   -1,   -1,  273,  274,  257,   -1,   -1,   -1,   -1,
  262,   -1,  282,  265,  266,  267,   -1,   -1,   -1,  311,
   -1,  273,  274,   -1,   -1,   -1,   -1,  319,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  311,  312,  313,  314,   -1,  316,  317,   -1,  319,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  311,
  312,  313,  314,   -1,  316,  317,   -1,  319,
};
static int yyctable[] = {                                      1,
    2,  173,  183,  250,   -1,    2,    2,   -1,    3,    2,
   -1,    4,    2,   -1,    5,    2,   -1,    6,    2,  173,
  183,  250,   -1,    7,    2,   -1,    8,    2,  173,  183,
  250,   -1,    9,    2,  173,  183,  250,   -1,   10,    2,
  173,  183,  250,   -1,   11,    2,   -1,   12,    2,   -1,
   13,    2,   -1,   14,    2,   -1,   15,    2,  173,  183,
  250,   -1,   16,    2,  173,  183,  250,   -1,   17,    2,
   -1,   18,    2,  173,  183,  250,   -1,   19,    2,   -1,
   20,    2,   -1,   21,    2,   -1,   22,    2,   -1,   23,
    2,   -1,   24,    2,   -1,   25,    2,   -1,   26,    2,
   -1,   27,    2,   -1,   28,    2,   -1,   29,    2,  173,
   -1,   30,    2,   -1,   31,    2,   -1,   32,    2,  173,
  250,   -1,   33,    2,  173,  250,   -1,   34,    2,  173,
  250,   -1,   35,    2,  173,  250,   -1,    2,  173,  250,
   -1,   36,    2,  173,  250,   -1,   37,    2,   -1,   38,
    2,   -1,   39,    2,   -1,   40,    2,   -1,   41,    2,
   -1,   42,    2,   -1,   43,    2,   -1,   44,    2,   -1,
   45,    2,   -1,   46,    2,   -1,   99,  183,  251,   -1,
    6,  183,  251,   -1,  100,  183,  251,   -1,  101,  183,
  251,   -1,  102,  183,  251,   -1,  103,   64,  183,  251,
   -1,   16,  183,  251,   -1,   18,   64,  183,  251,   -1,
  104,   64,   -1,   32,  251,   -1,   33,  251,   -1,   34,
  251,   -1,   36,  251,   -1,  107,  183,  250,   -1,  183,
  250,   -1,   32,  250,   -1,   36,  250,   -1,  111,   67,
   -1,    6,   67,   -1,  100,   67,   -1,  101,   67,   -1,
  102,   67,   -1,   15,   67,   -1,   16,   67,   -1,   18,
   67,   -1,  111,  236,   -1,    6,  236,   -1,  100,  236,
   -1,  101,  236,   -1,  102,  236,   -1,   15,  236,   -1,
   16,  236,   -1,   18,  236,   -1,  111,  237,   -1,    6,
  237,   -1,  100,  237,   -1,  101,  237,   -1,  102,  237,
   -1,   15,  237,   -1,   16,  237,   -1,   18,  237,   -1,
  111,  238,   -1,    6,  238,   -1,  100,  238,   -1,  101,
  238,   -1,  102,  238,   -1,   15,  238,   -1,   16,  238,
   -1,   18,  238,   -1,  111,   69,   -1,    6,   69,   -1,
  100,   69,   -1,  101,   69,   -1,  102,   69,   -1,   15,
   69,   -1,   16,   69,   -1,   18,   69,   -1,  111,  183,
   -1,    6,  183,   -1,  100,  183,   -1,  101,  183,   -1,
  102,  183,   -1,   15,  183,   -1,   16,  183,   -1,   18,
  183,   -1,    1,  173,  183,  250,   -1,    6,  173,  183,
  250,   -1,    8,  173,  183,  250,   -1,    9,  173,  183,
  250,   -1,   10,  173,  183,  250,   -1,   15,  173,  183,
  250,   -1,   16,  173,  183,  250,   -1,   18,  173,  183,
  250,   -1,   29,  173,   -1,   32,  173,  250,   -1,   33,
  173,  250,   -1,   34,  173,  250,   -1,   35,  173,  250,
   -1,  173,  250,   -1,   36,  173,  250,   -1,  111,  318,
   -1,   24,  318,   -1,   25,  318,   -1,   26,  318,   -1,
   27,  318,   -1,   28,  318,   -1,   31,  318,   -1,  173,
  183,   -1,   32,  173,   -1,   36,  173,   -1,  204,  124,
   -1,   77,  124,   -1,  225,  173,  250,   -1,    6,  173,
  250,   -1,    8,  173,  250,   -1,    9,  173,  250,   -1,
   10,  173,  250,   -1,   15,  173,  250,   -1,   16,  173,
  250,   -1,   18,  173,  250,   -1,  278,  250,   -1,    6,
  250,   -1,  100,  250,   -1,  101,  250,   -1,  102,  250,
   -1,   15,  250,   -1,   16,  250,   -1,   18,  250,   -1,
  283,  250,   -1,  291,   33,   -1,   64,  253,   -1,  294,
  183,  250,   -1,    6,  183,  250,   -1,  100,  183,  250,
   -1,  101,  183,  250,   -1,  102,  183,  250,   -1,   15,
  183,  250,   -1,   16,  183,  250,   -1,   18,  183,  250,
   -1,   33,  250,   -1,   34,  250,   -1,  301,   77,   -1,
  203,   77,   -1,  303,  251,   -1,  301,   68,   -1,  203,
   68,   -1,  204,   68,   -1,  301,   71,   -1,  203,   71,
   -1,  204,   71,   -1,  301,   72,   -1,  203,   72,   -1,
  204,   72,   -1,  301,   73,   -1,  203,   73,   -1,  204,
   73,   -1,  301,   65,   -1,  203,   65,   -1,  204,   65,
   -1,  301,   70,   -1,  203,   70,   -1,  204,   70,   -1,
  234,  270,   -1,  235,  270,   -1,  236,  270,   -1,  237,
  270,   -1,  238,  270,   -1,  239,  270,   -1,  240,  270,
   -1,  241,  270,   -1,  242,  270,   -1,  243,  270,   -1,
  244,  270,   -1,  245,  270,   -1,  246,  270,   -1,  247,
  270,   -1,  248,  270,   -1,  249,  270,   -1,  250,  270,
   -1,  251,  270,   -1,  252,  270,   -1,  253,  270,   -1,
  254,  270,   -1,  255,  270,   -1,  256,  270,   -1,  257,
  270,   -1,  258,  270,   -1,  259,  270,   -1,  260,  270,
   -1,  261,  270,   -1,  262,  270,   -1,  263,  270,   -1,
  264,  270,   -1,  265,  270,   -1,  266,  270,   -1,  267,
  270,   -1,  268,  270,   -1,  234,  272,   -1,  235,  272,
   -1,  236,  272,   -1,  237,  272,   -1,  238,  272,   -1,
  239,  272,   -1,  240,  272,   -1,  241,  272,   -1,  242,
  272,   -1,  243,  272,   -1,  244,  272,   -1,  245,  272,
   -1,  246,  272,   -1,  247,  272,   -1,  248,  272,   -1,
  249,  272,   -1,  250,  272,   -1,  251,  272,   -1,  252,
  272,   -1,  253,  272,   -1,  254,  272,   -1,  255,  272,
   -1,  256,  272,   -1,  257,  272,   -1,  258,  272,   -1,
  259,  272,   -1,  260,  272,   -1,  261,  272,   -1,  262,
  272,   -1,  263,  272,   -1,  264,  272,   -1,  265,  272,
   -1,  266,  272,   -1,  267,  272,   -1,  268,  272,   -1,
  234,  265,   -1,  235,  265,   -1,  236,  265,   -1,  237,
  265,   -1,  238,  265,   -1,  239,  265,   -1,  240,  265,
   -1,  241,  265,   -1,  242,  265,   -1,  243,  265,   -1,
  244,  265,   -1,  245,  265,   -1,  246,  265,   -1,  247,
  265,   -1,  248,  265,   -1,  249,  265,   -1,  250,  265,
   -1,  251,  265,   -1,  252,  265,   -1,  253,  265,   -1,
  254,  265,   -1,  255,  265,   -1,  256,  265,   -1,  262,
  265,   -1,  234,  268,   -1,  235,  268,   -1,  236,  268,
   -1,  237,  268,   -1,  238,  268,   -1,  239,  268,   -1,
  240,  268,   -1,  241,  268,   -1,  242,  268,   -1,  243,
  268,   -1,  244,  268,   -1,  245,  268,   -1,  246,  268,
   -1,  247,  268,   -1,  248,  268,   -1,  249,  268,   -1,
  250,  268,   -1,  251,  268,   -1,  252,  268,   -1,  253,
  268,   -1,  254,  268,   -1,  255,  268,   -1,  256,  268,
   -1,  262,  268,   -1,  234,  269,   -1,  235,  269,   -1,
  236,  269,   -1,  237,  269,   -1,  238,  269,   -1,  239,
  269,   -1,  240,  269,   -1,  241,  269,   -1,  242,  269,
   -1,  243,  269,   -1,  244,  269,   -1,  245,  269,   -1,
  246,  269,   -1,  247,  269,   -1,  248,  269,   -1,  249,
  269,   -1,  250,  269,   -1,  251,  269,   -1,  252,  269,
   -1,  253,  269,   -1,  254,  269,   -1,  255,  269,   -1,
  256,  269,   -1,  262,  269,   -1,  326,   64,   -1,  234,
  266,   -1,  235,  266,   -1,  236,  266,   -1,  237,  266,
   -1,  238,  266,   -1,  239,  266,   -1,  240,  266,   -1,
  241,  266,   -1,  242,  266,   -1,  243,  266,   -1,  244,
  266,   -1,  245,  266,   -1,  246,  266,   -1,  247,  266,
   -1,  248,  266,   -1,  249,  266,   -1,  250,  266,   -1,
  251,  266,   -1,  252,  266,   -1,  253,  266,   -1,  254,
  266,   -1,  255,  266,   -1,  256,  266,   -1,  262,  266,
   -1,  234,  267,   -1,  235,  267,   -1,  236,  267,   -1,
  237,  267,   -1,  238,  267,   -1,  239,  267,   -1,  240,
  267,   -1,  241,  267,   -1,  242,  267,   -1,  243,  267,
   -1,  244,  267,   -1,  245,  267,   -1,  246,  267,   -1,
  247,  267,   -1,  248,  267,   -1,  249,  267,   -1,  250,
  267,   -1,  251,  267,   -1,  252,  267,   -1,  253,  267,
   -1,  254,  267,   -1,  255,  267,   -1,  256,  267,   -1,
  262,  267,   -1,  234,  314,   -1,  235,  314,   -1,  236,
  314,   -1,  237,  314,   -1,  238,  314,   -1,  239,  314,
   -1,  240,  314,   -1,  241,  314,   -1,  242,  314,   -1,
  243,  314,   -1,  244,  314,   -1,  245,  314,   -1,  246,
  314,   -1,  247,  314,   -1,  248,  314,   -1,  249,  314,
   -1,  250,  314,   -1,  251,  314,   -1,  252,  314,   -1,
  253,  314,   -1,  254,  314,   -1,  255,  314,   -1,  256,
  314,   -1,  257,  314,   -1,  258,  314,   -1,  259,  314,
   -1,  260,  314,   -1,  261,  314,   -1,  262,  314,   -1,
  263,  314,   -1,  264,  314,   -1,  265,  314,   -1,  266,
  314,   -1,  267,  314,   -1,  268,  314,   -1,  234,  315,
   -1,  235,  315,   -1,  236,  315,   -1,  237,  315,   -1,
  238,  315,   -1,  239,  315,   -1,  240,  315,   -1,  241,
  315,   -1,  242,  315,   -1,  243,  315,   -1,  244,  315,
   -1,  245,  315,   -1,  246,  315,   -1,  247,  315,   -1,
  248,  315,   -1,  249,  315,   -1,  250,  315,   -1,  251,
  315,   -1,  252,  315,   -1,  253,  315,   -1,  254,  315,
   -1,  255,  315,   -1,  256,  315,   -1,  257,  315,   -1,
  258,  315,   -1,  259,  315,   -1,  260,  315,   -1,  261,
  315,   -1,  262,  315,   -1,  263,  315,   -1,  264,  315,
   -1,  265,  315,   -1,  266,  315,   -1,  267,  315,   -1,
  268,  315,   -1,  234,  317,   -1,  235,  317,   -1,  236,
  317,   -1,  237,  317,   -1,  238,  317,   -1,  239,  317,
   -1,  240,  317,   -1,  241,  317,   -1,  242,  317,   -1,
  243,  317,   -1,  244,  317,   -1,  245,  317,   -1,  246,
  317,   -1,  247,  317,   -1,  248,  317,   -1,  249,  317,
   -1,  250,  317,   -1,  251,  317,   -1,  252,  317,   -1,
  253,  317,   -1,  254,  317,   -1,  255,  317,   -1,  256,
  317,   -1,  257,  317,   -1,  258,  317,   -1,  259,  317,
   -1,  260,  317,   -1,  261,  317,   -1,  262,  317,   -1,
  263,  317,   -1,  264,  317,   -1,  265,  317,   -1,  266,
  317,   -1,  267,  317,   -1,  268,  317,   -1,  107,  250,
   -1,   32,  183,   -1,   36,  183,   -1,  370,   64,  251,
   -1,   64,  251,   -1,  196,  197,   -1,  274,  196,   -1,
  304,  194,   -1,  111,  249,   -1,  447,   47,   -1,  448,
   47,   -1,  449,   47,   -1,  450,   47,   -1,  462,   64,
   -1,  301,   66,   -1,  203,   66,   -1,  204,   66,   -1,
  234,  285,   -1,  235,  285,   -1,  236,  285,   -1,  237,
  285,   -1,  238,  285,   -1,  239,  285,   -1,  240,  285,
   -1,  241,  285,   -1,  242,  285,   -1,  243,  285,   -1,
  244,  285,   -1,  245,  285,   -1,  246,  285,   -1,  247,
  285,   -1,  248,  285,   -1,  249,  285,   -1,  250,  285,
   -1,  251,  285,   -1,  252,  285,   -1,  253,  285,   -1,
  254,  285,   -1,  255,  285,   -1,  256,  285,   -1,  257,
  285,   -1,  258,  285,   -1,  259,  285,   -1,  260,  285,
   -1,  261,  285,   -1,  262,  285,   -1,  263,  285,   -1,
  264,  285,   -1,  265,  285,   -1,  266,  285,   -1,  267,
  285,   -1,  268,  285,   -1,  234,  286,   -1,  235,  286,
   -1,  236,  286,   -1,  237,  286,   -1,  238,  286,   -1,
  239,  286,   -1,  240,  286,   -1,  241,  286,   -1,  242,
  286,   -1,  243,  286,   -1,  244,  286,   -1,  245,  286,
   -1,  246,  286,   -1,  247,  286,   -1,  248,  286,   -1,
  249,  286,   -1,  250,  286,   -1,  251,  286,   -1,  252,
  286,   -1,  253,  286,   -1,  254,  286,   -1,  255,  286,
   -1,  256,  286,   -1,  257,  286,   -1,  258,  286,   -1,
  259,  286,   -1,  260,  286,   -1,  261,  286,   -1,  262,
  286,   -1,  263,  286,   -1,  264,  286,   -1,  265,  286,
   -1,  266,  286,   -1,  267,  286,   -1,  268,  286,   -1,
  234,  287,   -1,  235,  287,   -1,  236,  287,   -1,  237,
  287,   -1,  238,  287,   -1,  239,  287,   -1,  240,  287,
   -1,  241,  287,   -1,  242,  287,   -1,  243,  287,   -1,
  244,  287,   -1,  245,  287,   -1,  246,  287,   -1,  247,
  287,   -1,  248,  287,   -1,  249,  287,   -1,  250,  287,
   -1,  251,  287,   -1,  252,  287,   -1,  253,  287,   -1,
  254,  287,   -1,  255,  287,   -1,  256,  287,   -1,  257,
  287,   -1,  258,  287,   -1,  259,  287,   -1,  260,  287,
   -1,  261,  287,   -1,  262,  287,   -1,  263,  287,   -1,
  264,  287,   -1,  265,  287,   -1,  266,  287,   -1,  267,
  287,   -1,  268,  287,   -1,  234,  288,   -1,  235,  288,
   -1,  236,  288,   -1,  237,  288,   -1,  238,  288,   -1,
  239,  288,   -1,  240,  288,   -1,  241,  288,   -1,  242,
  288,   -1,  243,  288,   -1,  244,  288,   -1,  245,  288,
   -1,  246,  288,   -1,  247,  288,   -1,  248,  288,   -1,
  249,  288,   -1,  250,  288,   -1,  251,  288,   -1,  252,
  288,   -1,  253,  288,   -1,  254,  288,   -1,  255,  288,
   -1,  256,  288,   -1,  257,  288,   -1,  258,  288,   -1,
  259,  288,   -1,  260,  288,   -1,  261,  288,   -1,  262,
  288,   -1,  263,  288,   -1,  264,  288,   -1,  265,  288,
   -1,  266,  288,   -1,  267,  288,   -1,  268,  288,   -1,
  234,  289,   -1,  235,  289,   -1,  236,  289,   -1,  237,
  289,   -1,  238,  289,   -1,  239,  289,   -1,  240,  289,
   -1,  241,  289,   -1,  242,  289,   -1,  243,  289,   -1,
  244,  289,   -1,  245,  289,   -1,  246,  289,   -1,  247,
  289,   -1,  248,  289,   -1,  249,  289,   -1,  250,  289,
   -1,  251,  289,   -1,  252,  289,   -1,  253,  289,   -1,
  254,  289,   -1,  255,  289,   -1,  256,  289,   -1,  257,
  289,   -1,  258,  289,   -1,  259,  289,   -1,  260,  289,
   -1,  261,  289,   -1,  262,  289,   -1,  263,  289,   -1,
  264,  289,   -1,  265,  289,   -1,  266,  289,   -1,  267,
  289,   -1,  268,  289,   -1,  234,  290,   -1,  235,  290,
   -1,  236,  290,   -1,  237,  290,   -1,  238,  290,   -1,
  239,  290,   -1,  240,  290,   -1,  241,  290,   -1,  242,
  290,   -1,  243,  290,   -1,  244,  290,   -1,  245,  290,
   -1,  246,  290,   -1,  247,  290,   -1,  248,  290,   -1,
  249,  290,   -1,  250,  290,   -1,  251,  290,   -1,  252,
  290,   -1,  253,  290,   -1,  254,  290,   -1,  255,  290,
   -1,  256,  290,   -1,  257,  290,   -1,  258,  290,   -1,
  259,  290,   -1,  260,  290,   -1,  261,  290,   -1,  262,
  290,   -1,  263,  290,   -1,  264,  290,   -1,  265,  290,
   -1,  266,  290,   -1,  267,  290,   -1,  268,  290,   -1,
  234,  291,   -1,  235,  291,   -1,  236,  291,   -1,  237,
  291,   -1,  238,  291,   -1,  239,  291,   -1,  240,  291,
   -1,  241,  291,   -1,  242,  291,   -1,  243,  291,   -1,
  244,  291,   -1,  245,  291,   -1,  246,  291,   -1,  247,
  291,   -1,  248,  291,   -1,  249,  291,   -1,  250,  291,
   -1,  251,  291,   -1,  252,  291,   -1,  253,  291,   -1,
  254,  291,   -1,  255,  291,   -1,  256,  291,   -1,  257,
  291,   -1,  258,  291,   -1,  259,  291,   -1,  260,  291,
   -1,  261,  291,   -1,  262,  291,   -1,  263,  291,   -1,
  264,  291,   -1,  265,  291,   -1,  266,  291,   -1,  267,
  291,   -1,  268,  291,   -1,  234,  292,   -1,  235,  292,
   -1,  236,  292,   -1,  237,  292,   -1,  238,  292,   -1,
  239,  292,   -1,  240,  292,   -1,  241,  292,   -1,  242,
  292,   -1,  243,  292,   -1,  244,  292,   -1,  245,  292,
   -1,  246,  292,   -1,  247,  292,   -1,  248,  292,   -1,
  249,  292,   -1,  250,  292,   -1,  251,  292,   -1,  252,
  292,   -1,  253,  292,   -1,  254,  292,   -1,  255,  292,
   -1,  256,  292,   -1,  257,  292,   -1,  258,  292,   -1,
  259,  292,   -1,  260,  292,   -1,  261,  292,   -1,  262,
  292,   -1,  263,  292,   -1,  264,  292,   -1,  265,  292,
   -1,  266,  292,   -1,  267,  292,   -1,  268,  292,   -1,
  234,  293,   -1,  235,  293,   -1,  236,  293,   -1,  237,
  293,   -1,  238,  293,   -1,  239,  293,   -1,  240,  293,
   -1,  241,  293,   -1,  242,  293,   -1,  243,  293,   -1,
  244,  293,   -1,  245,  293,   -1,  246,  293,   -1,  247,
  293,   -1,  248,  293,   -1,  249,  293,   -1,  250,  293,
   -1,  251,  293,   -1,  252,  293,   -1,  253,  293,   -1,
  254,  293,   -1,  255,  293,   -1,  256,  293,   -1,  262,
  293,   -1,  234,  294,   -1,  235,  294,   -1,  236,  294,
   -1,  237,  294,   -1,  238,  294,   -1,  239,  294,   -1,
  240,  294,   -1,  241,  294,   -1,  242,  294,   -1,  243,
  294,   -1,  244,  294,   -1,  245,  294,   -1,  246,  294,
   -1,  247,  294,   -1,  248,  294,   -1,  249,  294,   -1,
  250,  294,   -1,  251,  294,   -1,  252,  294,   -1,  253,
  294,   -1,  254,  294,   -1,  255,  294,   -1,  256,  294,
   -1,  262,  294,   -1,  234,  295,   -1,  235,  295,   -1,
  236,  295,   -1,  237,  295,   -1,  238,  295,   -1,  239,
  295,   -1,  240,  295,   -1,  241,  295,   -1,  242,  295,
   -1,  243,  295,   -1,  244,  295,   -1,  245,  295,   -1,
  246,  295,   -1,  247,  295,   -1,  248,  295,   -1,  249,
  295,   -1,  250,  295,   -1,  251,  295,   -1,  252,  295,
   -1,  253,  295,   -1,  254,  295,   -1,  255,  295,   -1,
  256,  295,   -1,  257,  295,   -1,  258,  295,   -1,  259,
  295,   -1,  260,  295,   -1,  261,  295,   -1,  262,  295,
   -1,  263,  295,   -1,  264,  295,   -1,  265,  295,   -1,
  266,  295,   -1,  267,  295,   -1,  268,  295,   -1,  234,
  296,   -1,  235,  296,   -1,  236,  296,   -1,  237,  296,
   -1,  238,  296,   -1,  239,  296,   -1,  240,  296,   -1,
  241,  296,   -1,  242,  296,   -1,  243,  296,   -1,  244,
  296,   -1,  245,  296,   -1,  246,  296,   -1,  247,  296,
   -1,  248,  296,   -1,  249,  296,   -1,  250,  296,   -1,
  251,  296,   -1,  252,  296,   -1,  253,  296,   -1,  254,
  296,   -1,  255,  296,   -1,  256,  296,   -1,  257,  296,
   -1,  258,  296,   -1,  259,  296,   -1,  260,  296,   -1,
  261,  296,   -1,  262,  296,   -1,  263,  296,   -1,  264,
  296,   -1,  265,  296,   -1,  266,  296,   -1,  267,  296,
   -1,  268,  296,   -1,  234,  297,   -1,  235,  297,   -1,
  236,  297,   -1,  237,  297,   -1,  238,  297,   -1,  239,
  297,   -1,  240,  297,   -1,  241,  297,   -1,  242,  297,
   -1,  243,  297,   -1,  244,  297,   -1,  245,  297,   -1,
  246,  297,   -1,  247,  297,   -1,  248,  297,   -1,  249,
  297,   -1,  250,  297,   -1,  251,  297,   -1,  252,  297,
   -1,  253,  297,   -1,  254,  297,   -1,  255,  297,   -1,
  256,  297,   -1,  262,  297,   -1,  234,  298,   -1,  235,
  298,   -1,  236,  298,   -1,  237,  298,   -1,  238,  298,
   -1,  239,  298,   -1,  240,  298,   -1,  241,  298,   -1,
  242,  298,   -1,  243,  298,   -1,  244,  298,   -1,  245,
  298,   -1,  246,  298,   -1,  247,  298,   -1,  248,  298,
   -1,  249,  298,   -1,  250,  298,   -1,  251,  298,   -1,
  252,  298,   -1,  253,  298,   -1,  254,  298,   -1,  255,
  298,   -1,  256,  298,   -1,  257,  298,   -1,  258,  298,
   -1,  259,  298,   -1,  260,  298,   -1,  261,  298,   -1,
  262,  298,   -1,  263,  298,   -1,  264,  298,   -1,  265,
  298,   -1,  266,  298,   -1,  267,  298,   -1,  268,  298,
   -1,  234,  299,   -1,  235,  299,   -1,  236,  299,   -1,
  237,  299,   -1,  238,  299,   -1,  239,  299,   -1,  240,
  299,   -1,  241,  299,   -1,  242,  299,   -1,  243,  299,
   -1,  244,  299,   -1,  245,  299,   -1,  246,  299,   -1,
  247,  299,   -1,  248,  299,   -1,  249,  299,   -1,  250,
  299,   -1,  251,  299,   -1,  252,  299,   -1,  253,  299,
   -1,  254,  299,   -1,  255,  299,   -1,  256,  299,   -1,
  257,  299,   -1,  258,  299,   -1,  259,  299,   -1,  260,
  299,   -1,  261,  299,   -1,  262,  299,   -1,  263,  299,
   -1,  264,  299,   -1,  265,  299,   -1,  266,  299,   -1,
  267,  299,   -1,  268,  299,   -1,  234,  300,   -1,  235,
  300,   -1,  236,  300,   -1,  237,  300,   -1,  238,  300,
   -1,  239,  300,   -1,  240,  300,   -1,  241,  300,   -1,
  242,  300,   -1,  243,  300,   -1,  244,  300,   -1,  245,
  300,   -1,  246,  300,   -1,  247,  300,   -1,  248,  300,
   -1,  249,  300,   -1,  250,  300,   -1,  251,  300,   -1,
  252,  300,   -1,  253,  300,   -1,  254,  300,   -1,  255,
  300,   -1,  256,  300,   -1,  257,  300,   -1,  258,  300,
   -1,  259,  300,   -1,  260,  300,   -1,  261,  300,   -1,
  262,  300,   -1,  263,  300,   -1,  264,  300,   -1,  265,
  300,   -1,  266,  300,   -1,  267,  300,   -1,  268,  300,
   -1,  234,  301,   -1,  235,  301,   -1,  236,  301,   -1,
  237,  301,   -1,  238,  301,   -1,  239,  301,   -1,  240,
  301,   -1,  241,  301,   -1,  242,  301,   -1,  243,  301,
   -1,  244,  301,   -1,  245,  301,   -1,  246,  301,   -1,
  247,  301,   -1,  248,  301,   -1,  249,  301,   -1,  250,
  301,   -1,  251,  301,   -1,  252,  301,   -1,  253,  301,
   -1,  254,  301,   -1,  255,  301,   -1,  256,  301,   -1,
  257,  301,   -1,  258,  301,   -1,  259,  301,   -1,  260,
  301,   -1,  261,  301,   -1,  262,  301,   -1,  263,  301,
   -1,  264,  301,   -1,  265,  301,   -1,  266,  301,   -1,
  267,  301,   -1,  268,  301,   -1,  234,  303,   -1,  235,
  303,   -1,  236,  303,   -1,  237,  303,   -1,  238,  303,
   -1,  239,  303,   -1,  240,  303,   -1,  241,  303,   -1,
  242,  303,   -1,  243,  303,   -1,  244,  303,   -1,  245,
  303,   -1,  246,  303,   -1,  247,  303,   -1,  248,  303,
   -1,  249,  303,   -1,  250,  303,   -1,  251,  303,   -1,
  252,  303,   -1,  253,  303,   -1,  254,  303,   -1,  255,
  303,   -1,  256,  303,   -1,  262,  303,   -1,  234,  304,
   -1,  235,  304,   -1,  236,  304,   -1,  237,  304,   -1,
  238,  304,   -1,  239,  304,   -1,  240,  304,   -1,  241,
  304,   -1,  242,  304,   -1,  243,  304,   -1,  244,  304,
   -1,  245,  304,   -1,  246,  304,   -1,  247,  304,   -1,
  248,  304,   -1,  249,  304,   -1,  250,  304,   -1,  251,
  304,   -1,  252,  304,   -1,  253,  304,   -1,  254,  304,
   -1,  255,  304,   -1,  256,  304,   -1,  257,  304,   -1,
  258,  304,   -1,  259,  304,   -1,  260,  304,   -1,  261,
  304,   -1,  262,  304,   -1,  263,  304,   -1,  264,  304,
   -1,  265,  304,   -1,  266,  304,   -1,  267,  304,   -1,
  268,  304,   -1,  234,  283,   -1,  235,  283,   -1,  236,
  283,   -1,  237,  283,   -1,  238,  283,   -1,  239,  283,
   -1,  240,  283,   -1,  241,  283,   -1,  242,  283,   -1,
  243,  283,   -1,  244,  283,   -1,  245,  283,   -1,  246,
  283,   -1,  247,  283,   -1,  248,  283,   -1,  249,  283,
   -1,  250,  283,   -1,  251,  283,   -1,  252,  283,   -1,
  253,  283,   -1,  254,  283,   -1,  255,  283,   -1,  256,
  283,   -1,  257,  283,   -1,  258,  283,   -1,  259,  283,
   -1,  260,  283,   -1,  261,  283,   -1,  262,  283,   -1,
  263,  283,   -1,  264,  283,   -1,  265,  283,   -1,  266,
  283,   -1,  267,  283,   -1,  268,  283,   -1,  234,  284,
   -1,  235,  284,   -1,  236,  284,   -1,  237,  284,   -1,
  238,  284,   -1,  239,  284,   -1,  240,  284,   -1,  241,
  284,   -1,  242,  284,   -1,  243,  284,   -1,  244,  284,
   -1,  245,  284,   -1,  246,  284,   -1,  247,  284,   -1,
  248,  284,   -1,  249,  284,   -1,  250,  284,   -1,  251,
  284,   -1,  252,  284,   -1,  253,  284,   -1,  254,  284,
   -1,  255,  284,   -1,  256,  284,   -1,  257,  284,   -1,
  258,  284,   -1,  259,  284,   -1,  260,  284,   -1,  261,
  284,   -1,  262,  284,   -1,  263,  284,   -1,  264,  284,
   -1,  265,  284,   -1,  266,  284,   -1,  267,  284,   -1,
  268,  284,   -1,  234,  274,   -1,  235,  274,   -1,  236,
  274,   -1,  237,  274,   -1,  238,  274,   -1,  239,  274,
   -1,  240,  274,   -1,  241,  274,   -1,  242,  274,   -1,
  243,  274,   -1,  244,  274,   -1,  245,  274,   -1,  246,
  274,   -1,  247,  274,   -1,  248,  274,   -1,  249,  274,
   -1,  250,  274,   -1,  251,  274,   -1,  252,  274,   -1,
  253,  274,   -1,  254,  274,   -1,  255,  274,   -1,  256,
  274,   -1,  262,  274,   -1,  234,  275,   -1,  235,  275,
   -1,  236,  275,   -1,  237,  275,   -1,  238,  275,   -1,
  239,  275,   -1,  240,  275,   -1,  241,  275,   -1,  242,
  275,   -1,  243,  275,   -1,  244,  275,   -1,  245,  275,
   -1,  246,  275,   -1,  247,  275,   -1,  248,  275,   -1,
  249,  275,   -1,  250,  275,   -1,  251,  275,   -1,  252,
  275,   -1,  253,  275,   -1,  254,  275,   -1,  255,  275,
   -1,  256,  275,   -1,  262,  275,   -1,  234,  276,   -1,
  235,  276,   -1,  236,  276,   -1,  237,  276,   -1,  238,
  276,   -1,  239,  276,   -1,  240,  276,   -1,  241,  276,
   -1,  242,  276,   -1,  243,  276,   -1,  244,  276,   -1,
  245,  276,   -1,  246,  276,   -1,  247,  276,   -1,  248,
  276,   -1,  249,  276,   -1,  250,  276,   -1,  251,  276,
   -1,  252,  276,   -1,  253,  276,   -1,  254,  276,   -1,
  255,  276,   -1,  256,  276,   -1,  262,  276,   -1,  234,
  277,   -1,  235,  277,   -1,  236,  277,   -1,  237,  277,
   -1,  238,  277,   -1,  239,  277,   -1,  240,  277,   -1,
  241,  277,   -1,  242,  277,   -1,  243,  277,   -1,  244,
  277,   -1,  245,  277,   -1,  246,  277,   -1,  247,  277,
   -1,  248,  277,   -1,  249,  277,   -1,  250,  277,   -1,
  251,  277,   -1,  252,  277,   -1,  253,  277,   -1,  254,
  277,   -1,  255,  277,   -1,  256,  277,   -1,  262,  277,
   -1,  234,  278,   -1,  235,  278,   -1,  236,  278,   -1,
  237,  278,   -1,  238,  278,   -1,  239,  278,   -1,  240,
  278,   -1,  241,  278,   -1,  242,  278,   -1,  243,  278,
   -1,  244,  278,   -1,  245,  278,   -1,  246,  278,   -1,
  247,  278,   -1,  248,  278,   -1,  249,  278,   -1,  250,
  278,   -1,  251,  278,   -1,  252,  278,   -1,  253,  278,
   -1,  254,  278,   -1,  255,  278,   -1,  256,  278,   -1,
  262,  278,   -1,  234,  281,   -1,  235,  281,   -1,  236,
  281,   -1,  237,  281,   -1,  238,  281,   -1,  239,  281,
   -1,  240,  281,   -1,  241,  281,   -1,  242,  281,   -1,
  243,  281,   -1,  244,  281,   -1,  245,  281,   -1,  246,
  281,   -1,  247,  281,   -1,  248,  281,   -1,  249,  281,
   -1,  250,  281,   -1,  251,  281,   -1,  252,  281,   -1,
  253,  281,   -1,  254,  281,   -1,  255,  281,   -1,  256,
  281,   -1,  257,  281,   -1,  258,  281,   -1,  259,  281,
   -1,  260,  281,   -1,  261,  281,   -1,  262,  281,   -1,
  263,  281,   -1,  264,  281,   -1,  265,  281,   -1,  266,
  281,   -1,  267,  281,   -1,  268,  281,   -1,  234,  279,
   -1,  235,  279,   -1,  236,  279,   -1,  237,  279,   -1,
  238,  279,   -1,  239,  279,   -1,  240,  279,   -1,  241,
  279,   -1,  242,  279,   -1,  243,  279,   -1,  244,  279,
   -1,  245,  279,   -1,  246,  279,   -1,  247,  279,   -1,
  248,  279,   -1,  249,  279,   -1,  250,  279,   -1,  251,
  279,   -1,  252,  279,   -1,  253,  279,   -1,  254,  279,
   -1,  255,  279,   -1,  256,  279,   -1,  262,  279,   -1,
  234,  280,   -1,  235,  280,   -1,  236,  280,   -1,  237,
  280,   -1,  238,  280,   -1,  239,  280,   -1,  240,  280,
   -1,  241,  280,   -1,  242,  280,   -1,  243,  280,   -1,
  244,  280,   -1,  245,  280,   -1,  246,  280,   -1,  247,
  280,   -1,  248,  280,   -1,  249,  280,   -1,  250,  280,
   -1,  251,  280,   -1,  252,  280,   -1,  253,  280,   -1,
  254,  280,   -1,  255,  280,   -1,  256,  280,   -1,  262,
  280,   -1,  234,  282,   -1,  235,  282,   -1,  236,  282,
   -1,  237,  282,   -1,  238,  282,   -1,  239,  282,   -1,
  240,  282,   -1,  241,  282,   -1,  242,  282,   -1,  243,
  282,   -1,  244,  282,   -1,  245,  282,   -1,  246,  282,
   -1,  247,  282,   -1,  248,  282,   -1,  249,  282,   -1,
  250,  282,   -1,  251,  282,   -1,  252,  282,   -1,  253,
  282,   -1,  254,  282,   -1,  255,  282,   -1,  256,  282,
   -1,  262,  282,   -1,  234,  302,   -1,  235,  302,   -1,
  236,  302,   -1,  237,  302,   -1,  238,  302,   -1,  239,
  302,   -1,  240,  302,   -1,  241,  302,   -1,  242,  302,
   -1,  243,  302,   -1,  244,  302,   -1,  245,  302,   -1,
  246,  302,   -1,  247,  302,   -1,  248,  302,   -1,  249,
  302,   -1,  250,  302,   -1,  251,  302,   -1,  252,  302,
   -1,  253,  302,   -1,  254,  302,   -1,  255,  302,   -1,
  256,  302,   -1,  262,  302,   -1,  278,  183,  250,   -1,
  234,  308,   -1,  235,  308,   -1,  236,  308,   -1,  237,
  308,   -1,  238,  308,   -1,  239,  308,   -1,  240,  308,
   -1,  241,  308,   -1,  242,  308,   -1,  243,  308,   -1,
  244,  308,   -1,  245,  308,   -1,  246,  308,   -1,  247,
  308,   -1,  248,  308,   -1,  249,  308,   -1,  250,  308,
   -1,  251,  308,   -1,  252,  308,   -1,  253,  308,   -1,
  254,  308,   -1,  255,  308,   -1,  256,  308,   -1,  257,
  308,   -1,  258,  308,   -1,  259,  308,   -1,  260,  308,
   -1,  261,  308,   -1,  262,  308,   -1,  263,  308,   -1,
  264,  308,   -1,  265,  308,   -1,  266,  308,   -1,  267,
  308,   -1,  268,  308,   -1,  234,  316,   -1,  235,  316,
   -1,  236,  316,   -1,  237,  316,   -1,  238,  316,   -1,
  239,  316,   -1,  240,  316,   -1,  241,  316,   -1,  242,
  316,   -1,  243,  316,   -1,  244,  316,   -1,  245,  316,
   -1,  246,  316,   -1,  247,  316,   -1,  248,  316,   -1,
  249,  316,   -1,  250,  316,   -1,  251,  316,   -1,  252,
  316,   -1,  253,  316,   -1,  254,  316,   -1,  255,  316,
   -1,  256,  316,   -1,  257,  316,   -1,  258,  316,   -1,
  259,  316,   -1,  260,  316,   -1,  261,  316,   -1,  262,
  316,   -1,  263,  316,   -1,  264,  316,   -1,  265,  316,
   -1,  266,  316,   -1,  267,  316,   -1,  268,  316,   -1,
  526,   64,   -1,  496,   88,   -1,   13,   88,   -1,   14,
   88,   -1,  498,   88,   -1,   45,   88,   -1,  291,   84,
   -1,  256,  247,   -1,
};
#define YYFINAL 47
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 348
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"tknID","tknStrLit",
"tknCharLit","tknNumber","tknTypedef","tknLong","tknEnum","tknPreProDef",
"tknClass","tknStruct","tknUnion","tknNamespace","tknTemplate","tknTypename",
"tknDocBlockComment","tknDocLineComment","tknScopeResOp","tknNumSignSpec",
"tknPublic","tknProtected","tknPrivate","tknExternC","tknUnRecogPrePro",
"tknStdHdrInclude","tknPragma","tknEllipsis","tknConstCast","tknStaticCast",
"tknDynamicCast","tknReinterpretCast","tknOperator","tknPlusEq","tknMinusEq",
"tknMulEq","tknDivEq","tknPerEq","tknXorEq","tknAndEq","tknOrEq","tknLShift",
"tknRShift","tknLShiftEq","tknRShiftEq","tknCmpEq","tknNotEq","tknLessEq",
"tknGreaterEq","tkn3WayCmp","tknAnd","tknOr","tknInc","tknDec","tknArrow",
"tknArrowStar","tknConst","tknStatic","tknExtern","tknVirtual","tknOverride",
"tknInline","tknExplicit","tknFriend","tknVolatile","tknPreProHash","tknDefine",
"tknUndef","tknInclude","tknIf","tknIfDef","tknIfNDef","tknElse","tknElIf",
"tknEndIf","tknFor","tknWhile","tknDo","tknSwitch","tknCase","tknNew",
"tknDelete","tknReturn","tknBlankLine","CMPEQUAL","LSHIFT","RSHIFT","ARROW",
"PREFIX","POSTFIX","PTRDECL","REFDECL","CTORDECL","DTORDECL",
};
static char *yyrule[] = {
"$accept : progunit",
"progunit : stmtlist",
"stmtlist :",
"stmtlist : stmt",
"stmtlist : stmtlist stmt",
"stmtlist : stmtlist changeprotlevel",
"stmt : vardeclstmt",
"stmt : vardeclliststmt",
"stmt : enumdefn",
"stmt : enumfwddecl",
"stmt : typedefnamestmt",
"stmt : classdefnstmt",
"stmt : fwddecl",
"stmt : doccomment",
"stmt : exprstmt",
"stmt : ifblock",
"stmt : whileblock",
"stmt : dowhileblock",
"stmt : forblock",
"stmt : funcpointerdecl",
"stmt : funcdeclstmt",
"stmt : funcdefn",
"stmt : ctordeclstmt",
"stmt : ctordefn",
"stmt : dtordeclstmt",
"stmt : dtordefn",
"stmt : externcblock",
"stmt : functptrtype",
"stmt : define",
"stmt : undef",
"stmt : include",
"stmt : hashif",
"stmt : pragma",
"stmt : blankline",
"ifblock : tknIf '(' expr ')' stmt",
"ifblock : tknIf '(' expr ')' '{' stmtlist '}'",
"whileblock : tknWhile '(' expr ')' stmt",
"whileblock : tknWhile '(' expr ')' '{' stmtlist '}'",
"dowhileblock : tknDo stmt tknWhile '(' expr ')'",
"dowhileblock : tknDo '{' stmtlist '}' tknWhile '(' expr ')'",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' stmt",
"forblock : tknFor '(' optexpr ';' optexpr ';' optexpr ')' '{' stmtlist '}'",
"optexpr :",
"optexpr : expr",
"blankline : tknBlankLine",
"blankline : blankline tknBlankLine",
"define : tknPreProHash tknDefine tknID tknID",
"define : tknPreProHash tknDefine tknID",
"define : tknPreProHash tknDefine tknID tknNumber",
"define : tknPreProHash tknDefine tknID tknStrLit",
"define : tknPreProHash tknDefine tknID tknCharLit",
"define : tknPreProHash tknDefine tknID tknPreProDef",
"undef : tknPreProHash tknUndef tknID",
"include : tknPreProHash tknInclude tknStrLit",
"include : tknPreProHash tknInclude tknStdHdrInclude",
"hashif : tknPreProHash tknIf tknPreProDef",
"hashif : tknPreProHash tknIfDef tknID",
"hashif : tknPreProHash tknIfNDef tknID",
"hashif : tknPreProHash tknElse",
"hashif : tknPreProHash tknElIf tknPreProDef",
"hashif : tknPreProHash tknEndIf",
"pragma : tknPreProHash tknPragma tknPreProDef",
"doccomment : tknDocBlockComment",
"doccomment : tknDocLineComment",
"identifier : tknID",
"identifier : tknScopeResOp identifier",
"identifier : identifier tknScopeResOp identifier",
"identifier : tknLong",
"identifier : tknLong identifier",
"identifier : tknNumSignSpec",
"identifier : tknNumSignSpec identifier",
"identifier : tknClass identifier",
"identifier : tknStruct identifier",
"identifier : tknUnion identifier",
"identifier : tknEllipsis",
"identifier : identifier tknEllipsis",
"identifier : identifier '<' templateparam '>'",
"vartype : identifier",
"optid :",
"optid : tknID",
"enumitem : tknID",
"enumitem : tknID '=' expr",
"enumitem : doccomment",
"enumitem : hashif",
"enumitem : blankline",
"enumitemlist :",
"enumitemlist : enumitemlist enumitem",
"enumitemlist : enumitemlist ',' enumitem",
"enumitemlist : enumitemlist ','",
"enumdefn : tknEnum optid '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID ':' identifier '{' enumitemlist '}' ';'",
"enumdefn : tknEnum tknClass tknID '{' enumitemlist '}' ';'",
"enumfwddecl : tknEnum tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ':' identifier ';'",
"enumfwddecl : tknEnum tknClass tknID ';'",
"typedefnamestmt : typedefnamelist ';'",
"typedefnamestmt : typedefname ';'",
"typedefnamelist : typedefname ',' tknID",
"typedefname : tknTypedef optattr vartype ptrlevelopt reftype tknID",
"varinit : vardecl '=' expr",
"vardecl : varattrib varqual identifier optattr",
"vardecl : varqual identifier optattr",
"vardecl : varattrib varqual identifier '[' expr ']'",
"vardecl : varattrib varqual identifier '[' ']'",
"vardecl : varqual identifier '[' expr ']'",
"vardecl : varqual identifier '[' ']'",
"vardecl : vartype ptrlevel identifier",
"vardecl : vartype '&' identifier",
"vardecl : vartype tknAnd identifier",
"varqual : optattr vartype optattr ptrlevelopt reftype optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' expr ']' optattr",
"varqual : optattr vartype optattr ptrlevelopt reftype '[' ']' optattr",
"varattrib : tknStatic",
"varattrib : tknExtern",
"funcdeclstmt : funcdecl ';'",
"funcdefn : funcdecl '{' stmtlist '}'",
"functptrtype : tknTypedef functionpointer ';'",
"functionpointer : apidocer functype varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"functionpointer : apidocer varqual '(' apidocer '*' optid ')' '(' paramlist ')'",
"funcpointerdecl : functionpointer ';'",
"funcdecl : functype apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : apidocer varqual apidocer funcname '(' paramlist ')' funcattrib",
"funcdecl : templatespecifier funcdecl",
"funcname : identifier",
"funcname : tknOperator '+'",
"funcname : tknOperator '-'",
"funcname : tknOperator '*'",
"funcname : tknOperator '/'",
"funcname : tknOperator '%'",
"funcname : tknOperator '^'",
"funcname : tknOperator '&'",
"funcname : tknOperator '|'",
"funcname : tknOperator '~'",
"funcname : tknOperator '!'",
"funcname : tknOperator '='",
"funcname : tknOperator '<'",
"funcname : tknOperator '>'",
"funcname : tknOperator tknPlusEq",
"funcname : tknOperator tknMinusEq",
"funcname : tknOperator tknMulEq",
"funcname : tknOperator tknDivEq",
"funcname : tknOperator tknPerEq",
"funcname : tknOperator tknXorEq",
"funcname : tknOperator tknAndEq",
"funcname : tknOperator tknOrEq",
"funcname : tknOperator tknLShift",
"funcname : tknOperator tknRShift",
"funcname : tknOperator tknLShiftEq",
"funcname : tknOperator tknRShiftEq",
"funcname : tknOperator tknCmpEq",
"funcname : tknOperator tknNotEq",
"funcname : tknOperator tknLessEq",
"funcname : tknOperator tknGreaterEq",
"funcname : tknOperator tkn3WayCmp",
"funcname : tknOperator tknAnd",
"funcname : tknOperator tknOr",
"funcname : tknOperator tknInc",
"funcname : tknOperator tknDec",
"funcname : tknOperator ','",
"funcname : tknOperator tknArrow",
"funcname : tknOperator tknArrowStar",
"funcname : tknOperator '(' ')'",
"funcname : tknOperator '[' ']'",
"paramlist :",
"paramlist : param",
"paramlist : paramlist ',' param",
"param : varinit",
"param : vardecl",
"param : varqual",
"param : functionpointer",
"templateparam : varqual",
"templateparam : functionpointer",
"functype :",
"functype : functype tknStatic",
"functype : functype tknInline",
"functype : functype tknVirtual",
"functype : functype tknExtern",
"functype : functype tknExplicit",
"funcattrib :",
"funcattrib : funcattrib tknConst",
"funcattrib : funcattrib tknOverride",
"funcattrib : funcattrib '=' tknNumber",
"optattr :",
"optattr : tknConst",
"optattr : tknVolatile",
"ctordeclstmt : ctordecl ';'",
"ctordefn : ctordecl meminitlist '{' stmtlist '}'",
"$$1 :",
"ctordefn : tknID tknScopeResOp tknID $$1 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"$$2 :",
"ctordefn : identifier tknScopeResOp tknID tknScopeResOp tknID $$2 '(' paramlist ')' meminitlist '{' stmtlist '}'",
"ctordefn : templatespecifier ctordefn",
"ctordecl : tknID '(' paramlist ')'",
"$$3 :",
"ctordecl : functype tknID $$3 '(' paramlist ')'",
"ctordecl : templatespecifier ctordecl",
"meminitlist :",
"meminitlist : ':' tknID '(' expr ')'",
"meminitlist : meminitlist ',' tknID '(' expr ')'",
"dtordeclstmt : dtordecl ';'",
"dtordefn : dtordecl '{' stmtlist '}'",
"$$4 :",
"dtordefn : tknID tknScopeResOp '~' tknID $$4 '(' ')' '{' stmtlist '}'",
"$$5 :",
"dtordefn : identifier tknScopeResOp tknID tknScopeResOp '~' tknID $$5 '(' ')' '{' stmtlist '}'",
"dtordecl : '~' tknID '(' ')'",
"dtordecl : functype '~' tknID '(' ')'",
"dtordecl : tknVirtual '~' tknID '(' ')' '=' tknNumber",
"vardecllist : vardecl ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardecllist : vardecllist ',' optattr ptrlevelopt reftype optattr identifier optattr",
"vardeclliststmt : vardecllist ';'",
"vardeclstmt : vardecl ';'",
"vardeclstmt : varinit ';'",
"vardeclstmt : tknID vardecl ';'",
"ptrlevelopt :",
"ptrlevelopt : ptrlevel",
"ptrlevel : '*'",
"ptrlevel : ptrlevel '*'",
"reftype :",
"reftype : '&'",
"reftype : '&' '&'",
"classdefnstmt : classdefn ';'",
"classdefnstmt : classdefn",
"$$6 :",
"classdefn : compoundSpecifier apidocer tknID inheritlist '{' $$6 stmtlist '}'",
"classdefn : templatespecifier classdefn",
"inheritlist :",
"inheritlist : ':' protlevel identifier",
"inheritlist : inheritlist ',' protlevel identifier",
"protlevel :",
"protlevel : tknPublic",
"protlevel : tknProtected",
"protlevel : tknPrivate",
"fwddecl : compoundSpecifier identifier ';'",
"fwddecl : compoundSpecifier apidocer identifier ';'",
"compoundSpecifier : tknClass",
"compoundSpecifier : tknStruct",
"compoundSpecifier : tknUnion",
"compoundSpecifier : tknNamespace",
"templatespecifier : tknTemplate '<' temparglist '>'",
"temparglist : temparg",
"temparglist : temparglist ',' temparg",
"temparg : tempargwodefault",
"temparg : tempargwdefault",
"tempargwodefault : typenamespecifier tknID",
"tempargwodefault : vartype tknID",
"tempargwdefault : tempargwodefault '=' expr",
"typenamespecifier : tknTypename",
"typenamespecifier : tknClass",
"apidocer :",
"apidocer : tknID",
"apidocer : tknID '(' tknID ')'",
"apidocer : tknID tknID",
"changeprotlevel : tknPublic ':'",
"changeprotlevel : tknProtected ':'",
"changeprotlevel : tknPrivate ':'",
"externcblock : tknExternC '{' stmtlist '}'",
"exprlist : expr",
"exprlist : exprlist ',' expr",
"expr : tknStrLit",
"expr : tknCharLit",
"expr : tknNumber",
"expr : funcname",
"expr : '{' exprlist '}'",
"expr : '-' expr",
"expr : '~' expr",
"expr : '!' expr",
"expr : '*' expr",
"expr : '&' expr",
"expr : tknInc expr",
"expr : expr tknInc",
"expr : tknDec expr",
"expr : expr tknDec",
"expr : expr '+' expr",
"expr : expr '-' expr",
"expr : expr '*' expr",
"expr : expr '/' expr",
"expr : expr '%' expr",
"expr : expr '&' expr",
"expr : expr '|' expr",
"expr : expr '^' expr",
"expr : expr '=' expr",
"expr : expr '<' expr",
"expr : expr '>' expr",
"expr : expr tknPlusEq expr",
"expr : expr tknMinusEq expr",
"expr : expr tknMulEq expr",
"expr : expr tknDivEq expr",
"expr : expr tknPerEq expr",
"expr : expr tknXorEq expr",
"expr : expr tknAndEq expr",
"expr : expr tknOrEq expr",
"expr : expr tknLShift expr",
"expr : expr tknRShift expr",
"expr : expr tknLShiftEq expr",
"expr : expr tknRShiftEq expr",
"expr : expr tknCmpEq expr",
"expr : expr tknNotEq expr",
"expr : expr tknLessEq expr",
"expr : expr tknGreaterEq expr",
"expr : expr tkn3WayCmp expr",
"expr : expr '.' expr",
"expr : expr tknArrow expr",
"expr : expr tknArrowStar expr",
"expr : expr '[' expr ']'",
"expr : expr '(' ')'",
"expr : expr '(' exprlist ')'",
"expr : '(' varqual ')' expr",
"expr : tknConstCast '<' varqual '>' '(' expr ')'",
"expr : tknStaticCast '<' varqual '>' '(' expr ')'",
"expr : tknDynamicCast '<' varqual '>' '(' expr ')'",
"expr : tknReinterpretCast '<' varqual '>' '(' expr ')'",
"expr : '(' expr ')'",
"expr : tknNew expr",
"expr : tknDelete expr",
"expr : tknDelete '[' ']' expr",
"expr : tknReturn expr",
"expr : tknReturn",
"exprstmt : expr ';'",
};
#endif
#line 42 "btyaccpa.ske"

//
// YYPOSN is user-defined text position type.
//
#ifndef YYPOSN
#define YYPOSN int
#endif

#ifdef YYREDUCEPOSNFUNC
#define YYCALLREDUCEPOSN(e)   \
	if(reduce_posn) {     \
	  YYREDUCEPOSNFUNC(yyps->pos, &(yyps->psp)[1-yym], &(yyps->vsp)[1-yym], \
			   yym, yyps->psp - yyps->ps, yychar, yyposn, e);       \
	  reduce_posn = 0;    \
	}

#ifndef YYCALLREDUCEPOSNARG
#define YYCALLREDUCEPOSNARG yyps->val
#endif


#define YYPOSNARG(n) ((yyps->psp)[1-yym+(n)-1])
#define YYPOSNOUT    (yyps->pos)
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEVAL
#define YYDELETEVAL(v) 
#endif

// If delete function is not defined by the user, do not deletions.
#ifndef YYDELETEPOSN
#define YYDELETEPOSN(v) 
#endif

#define yyclearin (yychar=(-1))

#define yyerrok (yyps->errflag=0)

#ifndef YYSTACKGROWTH
#define YYSTACKGROWTH 16
#endif

#ifndef YYDEFSTACKSIZE
#define YYDEFSTACKSIZE 12
#endif

#ifdef YYDEBUG
int yydebug;
#endif

int yynerrs;

/* These value/posn are taken from the lexer */
YYSTYPE yylval;
YYPOSN  yyposn;

/* These value/posn of the root non-terminal are returned to the caller */
YYSTYPE yyretlval;
YYPOSN  yyretposn;

#define YYABORT  goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
#define YYVALID         do { if (yyps->save)          goto yyvalid; } while(0)
#define YYVALID_NESTED  do { if (yyps->save && \
                                 yyps->save->save==0) goto yyvalid; } while(0)

struct yyparsestate {
  yyparsestate *save;        // Previously saved parser state
  int           state;
  int           errflag;
  Yshort       *ssp;         // state stack pointer
  YYSTYPE      *vsp;         // value stack pointer
  YYPOSN       *psp;         // position stack pointer
  YYSTYPE       val;         // value as returned by actions
  YYPOSN        pos;         // position as returned by universal action
  Yshort       *ss;          // state stack base
  YYSTYPE      *vs;          // values stack base
  YYPOSN       *ps;          // position stack base
  int           lexeme;      // index of the conflict lexeme in the lexical queue
  unsigned int  stacksize;   // current maximum stack size
  Yshort        ctry;        // index in yyctable[] for this conflict
};

// Current parser state
static yyparsestate *yyps=0;

// yypath!=NULL: do the full parse, starting at *yypath parser state.
static yyparsestate *yypath=0;

// Base of the lexical value queue
static YYSTYPE *yylvals=0;

// Current posistion at lexical value queue
static YYSTYPE *yylvp=0;

// End position of lexical value queue
static YYSTYPE *yylve=0;

// The last allocated position at the lexical value queue
static YYSTYPE *yylvlim=0;

// Base of the lexical position queue
static YYPOSN *yylpsns=0;

// Current posistion at lexical position queue
static YYPOSN *yylpp=0;

// End position of lexical position queue
static YYPOSN *yylpe=0;

// The last allocated position at the lexical position queue
static YYPOSN *yylplim=0;

// Current position at lexical token queue
static Yshort *yylexp=0;

static Yshort *yylexemes=0;

//
// For use in generated program
//
#define yytrial (yyps->save)
#define yyvsp   (yyps->vsp)
#define yyval   (yyps->val)
#define yydepth (yyps->ssp - yyps->ss)


//
// Local prototypes.
//
int yyparse(void);

int  YYLex1();
int  yyexpand();
void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size);
void YYPCopy(YYPOSN  *to, YYPOSN  *from, int size);
void YYMoreStack(yyparsestate *yyps);
yyparsestate *YYNewState(int size);
void YYFreeState(yyparsestate *p);


#line 1050 "/home/dassat/github/cppparser/parser.y"

//////////////////////////////////////////////////////////////////////////

/**
 * yyparser() invokes this function when it encounters unexpected token.
 */
void yyerror_detailed  (  char* text,
              int errt,
              YYSTYPE& errt_value,
              YYPOSN& errt_posn
            )
{
  extern const char* get_start_of_buffer();
  extern int get_context();

  const char* lineStart = errt_posn;
  const char* buffStart = get_start_of_buffer();
  while(lineStart > buffStart)
  {
    if(lineStart[-1] == '\n' || lineStart[-1] == '\r')
      break;
    --lineStart;
  }
  char* lineEnd = errt_posn;
  char endReplaceChar = 0;
  while(*lineEnd)
  {
    if(*lineEnd == '\r' || *lineEnd == '\n')
    {
      endReplaceChar = *lineEnd;
      *lineEnd = '\0'; // So that printing of lineStart does not print things beyond current line.
    }
    else
    {
      ++lineEnd;
    }
  }
  char spacechars[1024] = {0}; // For printing enough whitespace chars so that we can show a ^ below the start of unexpected token.
  for(const char* p = lineStart; p < errt_posn; ++p)
    spacechars[p-lineStart] = *p == '\t' ? '\t' : ' ';
  char errmsg[1024];
  sprintf(errmsg, "%s%s%s%d%s%d%c%s%c%s%c%c",
    "Error: Unexpected token '", errt_posn, "', while in context=", get_context(), ", found at line#", gLineNo, '\n', // The error message
    lineStart, '\n',    // Line that contains the error.
    spacechars, '^', '\n');  // A ^ below the beginning of unexpected token.
  printf("%s", errmsg);
  // Replace back the end char
  if(endReplaceChar)
    *lineEnd = endReplaceChar;
}

CppCompound* parseStream(char* stm, size_t stmSize)
{
  gProgUnit = nullptr;
  gCurProtLevel = kUnknownProt;
  
  void setupScanBuffer(char* buf, size_t bufsize);
  void cleanupScanBuffer();
  setupScanBuffer(stm, stmSize);
  gLineNo = 1; // Reset so that we do not start counting beyond previous parsing.
  yyparse();
  cleanupScanBuffer();
  
  return gProgUnit;
}
#line 3785 "y_tab.c"
#line 186 "btyaccpa.ske"


//
// Parser function
//
int yyparse() {
  int yym, yyn, yystate, yychar, yynewerrflag;
  yyparsestate *yyerrctx = NULL;
  int reduce_posn;

#if YYDEBUG
  char *yys;
  
  if ((yys = getenv("YYDEBUG"))) {
    yyn = *yys;
    if (yyn >= '0' && yyn <= '9')
      yydebug = yyn - '0'; 
  }
#endif
  
  yyps = YYNewState(YYDEFSTACKSIZE);
  yyps->save = 0;
  yynerrs = 0;
  yyps->errflag = 0;
  yychar = (-1);
  
  yyps->ssp = yyps->ss;
  yyps->vsp = yyps->vs;
  yyps->psp = yyps->ps;
  *(yyps->ssp) = yystate = 0;
  

  //
  // Main parsing loop
  //
 yyloop:
  if ((yyn = yydefred[yystate])) {
    goto yyreduce;
  }

  //
  // Read one token
  //
  if (yychar < 0) {
    if ((yychar = YYLex1()) < 0) yychar = 0;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, reading %d (%s)", 
	     yydepth, (int)yytrial, yystate, yychar, yys);
#ifdef YYDBPR
      printf("<");
      YYDBPR(yylval);
      printf(">");
#endif
      printf("\n"); 
    }
#endif
  }

  //
  // Do we have a conflict?
  //
  if ((yyn = yycindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    int ctry;

    if (yypath) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d: following successful trial parse\n", 
	       yydepth, (int)yytrial, yystate);
      }
#endif
      // Switch to the next conflict context
      yyparsestate *save = yypath;
      yypath = save->save;
      ctry = save->ctry;
      if (save->state != yystate) 
        goto yyabort;
      YYFreeState(save); 

    } else {

#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d,%d]: CONFLICT in state %d. ", 
	       yydepth, (int)yytrial, yystate);
        if(yyps->save) {
          printf("ALREADY in conflict. Continue trial parse.");
        } else {
          printf("Start trial parse.");
        }
        printf("\n");
      }
#endif
      yyparsestate *save = YYNewState(yyps->ssp - yyps->ss);
      save->save    = yyps->save;
      save->state   = yystate;
      save->errflag = yyps->errflag;
      save->ssp     = save->ss + (yyps->ssp - yyps->ss);
      save->vsp     = save->vs + (yyps->vsp - yyps->vs);
      save->psp     = save->ps + (yyps->psp - yyps->ps);
      memcpy (save->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(save->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(save->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      ctry = yytable[yyn];
      if (yyctable[ctry] == -1) {
#if YYDEBUG
        if (yydebug && yychar >= 0)
          printf("yydebug[%d]: backtracking 1 token\n", 
		 (int)yytrial);
#endif
        ctry++; 
      }
      save->ctry = ctry;
      if (!yyps->save) {
        // If this is a first conflict in the stack, start saving lexemes
        if (!yylexemes) {
          yylexemes = new Yshort[YYSTACKGROWTH];
          yylvals = new YYSTYPE[YYSTACKGROWTH];
          yylvlim = yylvals + YYSTACKGROWTH; 
          yylpsns = new YYPOSN[YYSTACKGROWTH];
          yylplim = yylpsns + YYSTACKGROWTH; 
        }
        if (yylvp == yylve) {
          yylvp = yylve = yylvals;
	  yylpp = yylpe = yylpsns;
          yylexp = yylexemes;
          if (yychar >= 0) {
            *yylve++ = yylval;
            *yylpe++ = yyposn;
            *yylexp = yychar;
            yychar = -1; 
          } 
        } 
      }
      if (yychar >= 0) {
        yylvp--, yylpp--, yylexp--;
        yychar = -1; 
      }
      save->lexeme = yylvp - yylvals;
      yyps->save = save; 
    }
    if (yytable[yyn] == ctry) {
#if YYDEBUG
      if (yydebug)
        printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
               yydepth, (int)yytrial, yystate, yyctable[ctry]);
#endif
      if (yychar < 0)
        yylvp++, yylpp++, yylexp++;
      yychar = -1;
      if (yyps->errflag > 0) --yyps->errflag;
      yystate = yyctable[ctry];
      goto yyshift; 
    } else {
      yyn = yyctable[ctry];
      goto yyreduce; 
    } 
  }

  //
  // Is action a shift?
  //
  if ((yyn = yysindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: state %d, shifting to state %d\n",
             yydepth, (int)yytrial, yystate, yytable[yyn]);
#endif
    yychar = (-1);
    if (yyps->errflag > 0)  --yyps->errflag;
    yystate = yytable[yyn];
  yyshift:
    if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
      YYMoreStack(yyps);
    }
    *++(yyps->ssp) = yystate;
    *++(yyps->vsp) = yylval;
    *++(yyps->psp) = yyposn;
    goto yyloop;
  }
  if ((yyn = yyrindex[yystate]) &&
      (yyn += yychar) >= 0 &&
      yyn <= YYTABLESIZE &&
      yycheck[yyn] == yychar) {
    yyn = yytable[yyn];
    goto yyreduce;
  }

  //
  // Action: error
  //
  if (yyps->errflag) goto yyinrecovery;
  yynewerrflag = 1;
  goto yyerrhandler;
yyerrlab:
  yynewerrflag = 0;
yyerrhandler:
  while (yyps->save) { 
    int ctry; 
    yyparsestate *save = yyps->save;
#if YYDEBUG
    if (yydebug)
      printf("yydebug[%d,%d]: ERROR in state %d, CONFLICT BACKTRACKING to state %d, %d tokens\n",
             yydepth, (int)yytrial, yystate, yyps->save->state, yylvp - yylvals - yyps->save->lexeme);
#endif
    // Memorize most forward-looking error state in case
    // it's really an error.
    if(yyerrctx==NULL || yyerrctx->lexeme<yylvp-yylvals) {
      // Free old saved error context state
      if(yyerrctx) YYFreeState(yyerrctx);
      // Create and fill out new saved error context state
      yyerrctx = YYNewState(yyps->ssp - yyps->ss);
      yyerrctx->save = yyps->save;
      yyerrctx->state = yystate;
      yyerrctx->errflag = yyps->errflag;
      yyerrctx->ssp = yyerrctx->ss + (yyps->ssp - yyps->ss);
      yyerrctx->vsp = yyerrctx->vs + (yyps->vsp - yyps->vs);
      yyerrctx->psp = yyerrctx->ps + (yyps->psp - yyps->ps);
      memcpy (yyerrctx->ss, yyps->ss, (yyps->ssp - yyps->ss + 1)*sizeof(Yshort));
      YYSCopy(yyerrctx->vs, yyps->vs, (yyps->ssp - yyps->ss + 1));
      YYPCopy(yyerrctx->ps, yyps->ps, (yyps->ssp - yyps->ss + 1));
      yyerrctx->lexeme = yylvp - yylvals;
    }
    yylvp  = yylvals   + save->lexeme;
    yylpp  = yylpsns   + save->lexeme;
    yylexp = yylexemes + save->lexeme;
    yychar = -1;
    yyps->ssp = yyps->ss + (save->ssp - save->ss);
    yyps->vsp = yyps->vs + (save->vsp - save->vs);
    yyps->psp = yyps->ps + (save->psp - save->ps);
    memcpy (yyps->ss, save->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
    YYSCopy(yyps->vs, save->vs,  yyps->vsp - yyps->vs + 1);
    YYPCopy(yyps->ps, save->ps,  yyps->psp - yyps->ps + 1);
    ctry = ++save->ctry;
    yystate = save->state;
    // We tried shift, try reduce now
    if ((yyn = yyctable[ctry]) >= 0) {
      goto yyreduce;
    }
    yyps->save = save->save;
    YYFreeState(save);
    //
    // Nothing left on the stack -- error
    //
    if (!yyps->save) {
#if YYDEBUG
      if (yydebug) {
        printf("yydebug[%d]: trial parse FAILED, entering ERROR mode\n", 
	       (int)yytrial);
      }
#endif
      // Restore state as it was in the most forward-advanced error
      yylvp  = yylvals   + yyerrctx->lexeme;
      yylpp  = yylpsns   + yyerrctx->lexeme;
      yylexp = yylexemes + yyerrctx->lexeme;
      yychar = yylexp[-1];
      yylval = yylvp[-1];
      yyposn = yylpp[-1];
      yyps->ssp = yyps->ss + (yyerrctx->ssp - yyerrctx->ss);
      yyps->vsp = yyps->vs + (yyerrctx->vsp - yyerrctx->vs);
      yyps->psp = yyps->ps + (yyerrctx->psp - yyerrctx->ps);
      memcpy (yyps->ss, yyerrctx->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
      YYSCopy(yyps->vs, yyerrctx->vs,  yyps->vsp - yyps->vs + 1);
      YYPCopy(yyps->ps, yyerrctx->ps,  yyps->psp - yyps->ps + 1);
      yystate = yyerrctx->state;
      YYFreeState(yyerrctx);
      yyerrctx = NULL;
    }
    yynewerrflag = 1; 
  }
  if (yynewerrflag) {
#ifdef YYERROR_DETAILED
    yyerror_detailed("syntax error", yychar, yylval, yyposn);
#else
    yyerror("syntax error");
#endif
  }
  ++yynerrs;
 yyinrecovery:
  if (yyps->errflag < 3) {
    yyps->errflag = 3;
    for (;;) {
      if ((yyn = yysindex[*(yyps->ssp)]) && 
	  (yyn += YYERRCODE) >= 0 &&
          yyn <= YYTABLESIZE && 
	  yycheck[yyn] == YYERRCODE) {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: state %d, ERROR recovery shifts to state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp), yytable[yyn]);
#endif
        /* Use label yyerrlab, so that compiler does not warn */
        if(yyps->errflag != yyps->errflag) goto yyerrlab;
        yystate = yytable[yyn];
        goto yyshift; 
      } else {
#if YYDEBUG
        if (yydebug)
          printf("yydebug[%d,%d]: ERROR recovery discards state %d\n",
                 yydepth, (int)yytrial, *(yyps->ssp));
#endif
        if (yyps->ssp <= yyps->ss) {
	  goto yyabort;
	}
	if(!yytrial) {
	  YYDELETEVAL(yyps->vsp[0],1);
	  YYDELETEPOSN(yyps->psp[0],1);
	}
        --(yyps->ssp);
        --(yyps->vsp);
        --(yyps->psp);
      }
    }
  } else {
    if (yychar == 0) goto yyabort;
#if YYDEBUG
    if (yydebug) {
      yys = 0;
      if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
      if (!yys) yys = "illegal-symbol";
      printf("yydebug[%d,%d]: state %d, ERROR recovery discards token %d (%s)\n",
             yydepth, (int)yytrial, yystate, yychar, yys); 
    }
#endif
    if(!yytrial) {
      YYDELETEVAL(yylval,0);
      YYDELETEPOSN(yyposn,0);
    }
    yychar = (-1);
    goto yyloop;
  }

  //
  // Reduce the rule
  //
yyreduce:
  yym = yylen[yyn];
#if YYDEBUG
  if (yydebug) {
    printf("yydebug[%d,%d]: state %d, reducing by rule %d (%s)",
           yydepth, (int)yytrial, yystate, yyn, yyrule[yyn]);
#ifdef YYDBPR
    if (yym) {
      int i;
      printf("<");
      for (i=yym; i>0; i--) {
        if (i!=yym) printf(", ");
        YYDBPR((yyps->vsp)[1-i]);
      }
      printf(">");
    }
#endif
    printf("\n");
  }
#endif
  if (yyps->ssp + 1 - yym >= yyps->ss + yyps->stacksize) {
    YYMoreStack(yyps);
  }

  /* "$$ = NULL" default action */
  memset(&yyps->val, 0, sizeof(yyps->val));

  /* default reduced position is NULL -- no position at all.
     no position will be assigned at trial time and if no position handling is present */
  memset(&yyps->pos, 0, sizeof(yyps->pos));

  reduce_posn = TRUE;

  switch (yyn) {

case 1:
  if (!yytrial)
#line 282 "/home/dassat/github/cppparser/parser.y"
{
                    gProgUnit = yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    if (gProgUnit)
                      gProgUnit->compoundType_ = kCppFile;
                  }
#line 4175 "y_tab.c"
break;
case 2:
  if (!yytrial)
#line 289 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = 0; }
#line 4181 "y_tab.c"
break;
case 3:
  if (!yytrial)
#line 290 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top());
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4191 "y_tab.c"
break;
case 4:
  if (!yytrial)
#line 295 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = (yyvsp[-1].cppCompundObj == 0) ? newCompound(gProtLevelStack.empty() ? gCurProtLevel : gProtLevelStack.top()) : yyvsp[-1].cppCompundObj;
                    yyvsp[0].cppObj->owner_ = yyval.cppCompundObj;
                    yyval.cppCompundObj->addMember(yyvsp[0].cppObj);
                  }
#line 4201 "y_tab.c"
break;
case 5:
  if (!yytrial)
#line 300 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj; gCurProtLevel = yyvsp[0].protLevel; }
#line 4207 "y_tab.c"
break;
case 6:
  if (!yytrial)
#line 303 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObj; }
#line 4213 "y_tab.c"
break;
case 7:
  if (!yytrial)
#line 304 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppVarObjList; }
#line 4219 "y_tab.c"
break;
case 8:
  if (!yytrial)
#line 305 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4225 "y_tab.c"
break;
case 9:
  if (!yytrial)
#line 306 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppEnum; }
#line 4231 "y_tab.c"
break;
case 10:
  if (!yytrial)
#line 307 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].typedefObj; }
#line 4237 "y_tab.c"
break;
case 11:
  if (!yytrial)
#line 308 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4243 "y_tab.c"
break;
case 12:
  if (!yytrial)
#line 309 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].fwdDeclObj; }
#line 4249 "y_tab.c"
break;
case 13:
  if (!yytrial)
#line 310 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].docCommentObj; }
#line 4255 "y_tab.c"
break;
case 14:
  if (!yytrial)
#line 311 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppExprObj; }
#line 4261 "y_tab.c"
break;
case 15:
  if (!yytrial)
#line 312 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].ifBlock; }
#line 4267 "y_tab.c"
break;
case 16:
  if (!yytrial)
#line 313 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].whileBlock; }
#line 4273 "y_tab.c"
break;
case 17:
  if (!yytrial)
#line 314 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].doWhileBlock; }
#line 4279 "y_tab.c"
break;
case 18:
  if (!yytrial)
#line 315 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].forBlock; }
#line 4285 "y_tab.c"
break;
case 19:
  if (!yytrial)
#line 316 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncPointerObj; }
#line 4291 "y_tab.c"
break;
case 20:
  if (!yytrial)
#line 317 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4297 "y_tab.c"
break;
case 21:
  if (!yytrial)
#line 318 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppFuncObj; }
#line 4303 "y_tab.c"
break;
case 22:
  if (!yytrial)
#line 319 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4309 "y_tab.c"
break;
case 23:
  if (!yytrial)
#line 320 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCtorObj; }
#line 4315 "y_tab.c"
break;
case 24:
  if (!yytrial)
#line 321 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4321 "y_tab.c"
break;
case 25:
  if (!yytrial)
#line 322 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppDtorObj; }
#line 4327 "y_tab.c"
break;
case 26:
  if (!yytrial)
#line 323 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppCompundObj; }
#line 4333 "y_tab.c"
break;
case 27:
  if (!yytrial)
#line 324 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].cppObj; }
#line 4339 "y_tab.c"
break;
case 28:
  if (!yytrial)
#line 325 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashDefine; }
#line 4345 "y_tab.c"
break;
case 29:
  if (!yytrial)
#line 326 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashUndef; }
#line 4351 "y_tab.c"
break;
case 30:
  if (!yytrial)
#line 327 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashInclude; }
#line 4357 "y_tab.c"
break;
case 31:
  if (!yytrial)
#line 328 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashIf; }
#line 4363 "y_tab.c"
break;
case 32:
  if (!yytrial)
#line 329 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].hashPragma; }
#line 4369 "y_tab.c"
break;
case 33:
  if (!yytrial)
#line 330 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppObj = yyvsp[0].blankLine; }
#line 4375 "y_tab.c"
break;
case 34:
  if (!yytrial)
#line 333 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-2].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4384 "y_tab.c"
break;
case 35:
  if (!yytrial)
#line 337 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.ifBlock = new CppIfBlock(yyvsp[-4].cppExprObj);
                    yyval.ifBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4393 "y_tab.c"
break;
case 36:
  if (!yytrial)
#line 343 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-2].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[0].cppObj;
                  }
#line 4402 "y_tab.c"
break;
case 37:
  if (!yytrial)
#line 347 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.whileBlock = new CppWhileBlock(yyvsp[-4].cppExprObj);
                    yyval.whileBlock->body_ = yyvsp[-1].cppCompundObj;
                  }
#line 4411 "y_tab.c"
break;
case 38:
  if (!yytrial)
#line 353 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-4].cppObj;
                  }
#line 4420 "y_tab.c"
break;
case 39:
  if (!yytrial)
#line 357 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.doWhileBlock = new CppDoWhileBlock(yyvsp[-1].cppExprObj);
                    yyval.doWhileBlock->body_ = yyvsp[-5].cppCompundObj;
                  }
#line 4429 "y_tab.c"
break;
case 40:
  if (!yytrial)
#line 363 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-2].cppExprObj, yyvsp[0].cppObj);
                  }
#line 4437 "y_tab.c"
break;
case 41:
  if (!yytrial)
#line 366 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.forBlock = new CppForBlock(yyvsp[-8].cppExprObj, yyvsp[-6].cppExprObj, yyvsp[-4].cppExprObj, yyvsp[-1].cppCompundObj);
                  }
#line 4445 "y_tab.c"
break;
case 42:
  if (!yytrial)
#line 371 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = nullptr;
                  }
#line 4453 "y_tab.c"
break;
case 43:
  if (!yytrial)
#line 374 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppExprObj = yyvsp[0].cppExprObj;
                  }
#line 4461 "y_tab.c"
break;
case 44:
  if (!yytrial)
#line 379 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = new CppBlankLine; }
#line 4467 "y_tab.c"
break;
case 45:
  if (!yytrial)
#line 380 "/home/dassat/github/cppparser/parser.y"
{ yyval.blankLine = yyvsp[-1].blankLine; yyval.blankLine->numLines_++; }
#line 4473 "y_tab.c"
break;
case 46:
#line 383 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4478 "y_tab.c"
  if (!yytrial)
#line 383 "/home/dassat/github/cppparser/parser.y"
{ /* Simple rename using #define*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4485 "y_tab.c"
break;
case 47:
#line 387 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4490 "y_tab.c"
  if (!yytrial)
#line 387 "/home/dassat/github/cppparser/parser.y"
{ /* blank define*/
                    yyval.hashDefine = new CppDefine(yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kRename;
                  }
#line 4497 "y_tab.c"
break;
case 48:
#line 391 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4502 "y_tab.c"
  if (!yytrial)
#line 391 "/home/dassat/github/cppparser/parser.y"
{/* Constant definition*/
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstNumDef;
                  }
#line 4509 "y_tab.c"
break;
case 49:
#line 395 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4514 "y_tab.c"
  if (!yytrial)
#line 395 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstStrDef;
                  }
#line 4521 "y_tab.c"
break;
case 50:
#line 399 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4526 "y_tab.c"
  if (!yytrial)
#line 399 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kConstCharDef;
                  }
#line 4533 "y_tab.c"
break;
case 51:
#line 403 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4538 "y_tab.c"
  if (!yytrial)
#line 403 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.hashDefine = new CppDefine(yyvsp[-1].str, yyvsp[0].str);
                    yyval.hashDefine->defType_ = CppDefine::kComplexMacro;
                  }
#line 4545 "y_tab.c"
break;
case 52:
#line 409 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4550 "y_tab.c"
  if (!yytrial)
#line 409 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashUndef = new CppUndef(yyvsp[0].str); }
#line 4554 "y_tab.c"
break;
case 53:
#line 412 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4559 "y_tab.c"
  if (!yytrial)
#line 412 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4563 "y_tab.c"
break;
case 54:
#line 413 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4568 "y_tab.c"
  if (!yytrial)
#line 413 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashInclude = new CppInclude((std::string) yyvsp[0].str); }
#line 4572 "y_tab.c"
break;
case 55:
#line 419 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4577 "y_tab.c"
  if (!yytrial)
#line 419 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIf,      yyvsp[0].str); }
#line 4581 "y_tab.c"
break;
case 56:
#line 420 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4586 "y_tab.c"
  if (!yytrial)
#line 420 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfDef,   yyvsp[0].str); }
#line 4590 "y_tab.c"
break;
case 57:
#line 421 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4595 "y_tab.c"
  if (!yytrial)
#line 421 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kIfNDef,  yyvsp[0].str); }
#line 4599 "y_tab.c"
break;
case 58:
#line 422 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4604 "y_tab.c"
  if (!yytrial)
#line 422 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElse       ); }
#line 4608 "y_tab.c"
break;
case 59:
#line 423 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4613 "y_tab.c"
  if (!yytrial)
#line 423 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kElIf,    yyvsp[0].str); }
#line 4617 "y_tab.c"
break;
case 60:
#line 424 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4622 "y_tab.c"
  if (!yytrial)
#line 424 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashIf = new CppHashIf(CppHashIf::kEndIf      ); }
#line 4626 "y_tab.c"
break;
case 61:
#line 427 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4631 "y_tab.c"
  if (!yytrial)
#line 427 "/home/dassat/github/cppparser/parser.y"
{ yyval.hashPragma = new CppPragma(yyvsp[0].str); }
#line 4635 "y_tab.c"
break;
case 62:
#line 430 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4640 "y_tab.c"
  if (!yytrial)
#line 430 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4644 "y_tab.c"
break;
case 63:
#line 431 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4649 "y_tab.c"
  if (!yytrial)
#line 431 "/home/dassat/github/cppparser/parser.y"
{ yyval.docCommentObj = new CppDocComment((std::string) yyvsp[0].str, gCurProtLevel); }
#line 4653 "y_tab.c"
break;
case 64:
  if (!yytrial)
#line 434 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4659 "y_tab.c"
break;
case 65:
  if (!yytrial)
#line 435 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4665 "y_tab.c"
break;
case 66:
  if (!yytrial)
#line 436 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 4671 "y_tab.c"
break;
case 67:
  if (!yytrial)
#line 437 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4677 "y_tab.c"
break;
case 68:
  if (!yytrial)
#line 438 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4683 "y_tab.c"
break;
case 69:
  if (!yytrial)
#line 439 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4689 "y_tab.c"
break;
case 70:
  if (!yytrial)
#line 440 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4695 "y_tab.c"
break;
case 71:
  if (!yytrial)
#line 441 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4701 "y_tab.c"
break;
case 72:
  if (!yytrial)
#line 442 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4707 "y_tab.c"
break;
case 73:
  if (!yytrial)
#line 443 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4713 "y_tab.c"
break;
case 74:
  if (!yytrial)
#line 444 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4719 "y_tab.c"
break;
case 75:
  if (!yytrial)
#line 445 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 4725 "y_tab.c"
break;
case 76:
  if (!yytrial)
#line 446 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+1-yyvsp[-3].str.sz);
                    delete yyvsp[-1].varOrFuncPtr.cppObj; /* We don't need template parameter*/
                  }
#line 4734 "y_tab.c"
break;
case 77:
  if (!yytrial)
#line 452 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4740 "y_tab.c"
break;
case 78:
  if (!yytrial)
#line 455 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 4746 "y_tab.c"
break;
case 79:
  if (!yytrial)
#line 456 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 4752 "y_tab.c"
break;
case 80:
  if (!yytrial)
#line 459 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].str);     }
#line 4758 "y_tab.c"
break;
case 81:
  if (!yytrial)
#line 460 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[-2].str, yyvsp[0].cppExprObj); }
#line 4764 "y_tab.c"
break;
case 82:
  if (!yytrial)
#line 461 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].docCommentObj);     }
#line 4770 "y_tab.c"
break;
case 83:
  if (!yytrial)
#line 462 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].hashIf);     }
#line 4776 "y_tab.c"
break;
case 84:
  if (!yytrial)
#line 463 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItem = new CppEnumItem(yyvsp[0].blankLine);     }
#line 4782 "y_tab.c"
break;
case 85:
  if (!yytrial)
#line 466 "/home/dassat/github/cppparser/parser.y"
{ yyval.enumItemList = 0; }
#line 4788 "y_tab.c"
break;
case 86:
  if (!yytrial)
#line 467 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList ? yyvsp[-1].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4797 "y_tab.c"
break;
case 87:
  if (!yytrial)
#line 471 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-2].enumItemList ? yyvsp[-2].enumItemList : new CppEnumItemList;
                    yyval.enumItemList->push_back(yyvsp[0].enumItem);
                  }
#line 4806 "y_tab.c"
break;
case 88:
  if (!yytrial)
#line 475 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.enumItemList = yyvsp[-1].enumItemList;
                  }
#line 4814 "y_tab.c"
break;
case 89:
#line 480 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4819 "y_tab.c"
  if (!yytrial)
#line 480 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList);
                  }
#line 4825 "y_tab.c"
break;
case 90:
#line 483 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4830 "y_tab.c"
  if (!yytrial)
#line 483 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, false, yyvsp[-4].str);
                  }
#line 4836 "y_tab.c"
break;
case 91:
#line 486 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4841 "y_tab.c"
  if (!yytrial)
#line 486 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-6].str, yyvsp[-2].enumItemList, true, yyvsp[-4].str);
                  }
#line 4847 "y_tab.c"
break;
case 92:
#line 489 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4852 "y_tab.c"
  if (!yytrial)
#line 489 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-4].str, yyvsp[-2].enumItemList, true);
                  }
#line 4858 "y_tab.c"
break;
case 93:
#line 493 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4863 "y_tab.c"
  if (!yytrial)
#line 493 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, false, yyvsp[-1].str);
                  }
#line 4869 "y_tab.c"
break;
case 94:
#line 496 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4874 "y_tab.c"
  if (!yytrial)
#line 496 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-3].str, nullptr, true, yyvsp[-1].str);
                  }
#line 4880 "y_tab.c"
break;
case 95:
#line 499 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4885 "y_tab.c"
  if (!yytrial)
#line 499 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppEnum = new CppEnum(gCurProtLevel, yyvsp[-1].str, nullptr, true);
                  }
#line 4891 "y_tab.c"
break;
case 96:
#line 504 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4896 "y_tab.c"
  if (!yytrial)
#line 504 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4900 "y_tab.c"
break;
case 97:
#line 505 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 4905 "y_tab.c"
  if (!yytrial)
#line 505 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-1].typedefObj; }
#line 4909 "y_tab.c"
break;
case 98:
  if (!yytrial)
#line 508 "/home/dassat/github/cppparser/parser.y"
{ yyval.typedefObj = yyvsp[-2].typedefObj; yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str); }
#line 4915 "y_tab.c"
break;
case 99:
  if (!yytrial)
#line 511 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.typedefObj = new CppTypedef(gCurProtLevel, yyvsp[-3].str, yyvsp[-4].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType);
                    yyval.typedefObj->names_.push_back((std::string) yyvsp[0].str);
                  }
#line 4924 "y_tab.c"
break;
case 100:
  if (!yytrial)
#line 517 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-2].cppVarObj; yyval.cppVarObj->assign_ = yyvsp[0].cppExprObj; }
#line 4930 "y_tab.c"
break;
case 101:
  if (!yytrial)
#line 520 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                    yyval.cppVarObj->typeAttr_|= yyvsp[-3].attr;
                  }
#line 4941 "y_tab.c"
break;
case 102:
  if (!yytrial)
#line 526 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-2].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-1].str;
                    yyval.cppVarObj->varAttr_ |= yyvsp[0].attr;
                  }
#line 4951 "y_tab.c"
break;
case 103:
  if (!yytrial)
#line 531 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-5].attr|kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4962 "y_tab.c"
break;
case 104:
  if (!yytrial)
#line 537 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= yyvsp[-4].attr|kArray;
                  }
#line 4972 "y_tab.c"
break;
case 105:
  if (!yytrial)
#line 542 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-4].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-3].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                    yyval.cppVarObj->arraySize_ = yyvsp[-1].cppExprObj;
                  }
#line 4983 "y_tab.c"
break;
case 106:
  if (!yytrial)
#line 548 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = yyvsp[-3].cppVarObj;
                    yyval.cppVarObj->name_ = yyvsp[-2].str;
                    yyval.cppVarObj->varAttr_|= kArray;
                  }
#line 4993 "y_tab.c"
break;
case 107:
  if (!yytrial)
#line 557 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, yyvsp[-1].ptrLevel, kNoRef, yyvsp[0].str);
                  }
#line 5001 "y_tab.c"
break;
case 108:
  if (!yytrial)
#line 560 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kByRef, yyvsp[0].str);
                  }
#line 5009 "y_tab.c"
break;
case 109:
  if (!yytrial)
#line 563 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-2].str, 0, 0, 0, kRValRef, yyvsp[0].str);
                  }
#line 5017 "y_tab.c"
break;
case 110:
  if (!yytrial)
#line 569 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-4].str, yyvsp[-5].attr|yyvsp[-3].attr, yyvsp[0].attr, yyvsp[-2].ptrLevel, yyvsp[-1].refType, "");
                  }
#line 5025 "y_tab.c"
break;
case 111:
  if (!yytrial)
#line 572 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-7].str, yyvsp[-8].attr|yyvsp[-6].attr|kArray, yyvsp[0].attr, yyvsp[-5].ptrLevel, yyvsp[-4].refType, "");
                    yyval.cppVarObj->arraySize_ = yyvsp[-2].cppExprObj;
                  }
#line 5034 "y_tab.c"
break;
case 112:
  if (!yytrial)
#line 576 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObj = new CppVar(gCurProtLevel, yyvsp[-6].str, yyvsp[-7].attr|yyvsp[-5].attr|kArray, yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, "");
                  }
#line 5042 "y_tab.c"
break;
case 113:
  if (!yytrial)
#line 581 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kStatic;  }
#line 5048 "y_tab.c"
break;
case 114:
  if (!yytrial)
#line 582 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kExtern;  }
#line 5054 "y_tab.c"
break;
case 115:
#line 585 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5059 "y_tab.c"
  if (!yytrial)
#line 585 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncObj = yyvsp[-1].cppFuncObj; }
#line 5063 "y_tab.c"
break;
case 116:
#line 588 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5068 "y_tab.c"
  if (!yytrial)
#line 588 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[-3].cppFuncObj;
                    yyval.cppFuncObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt);
                    yyval.cppFuncObj->defn_->compoundType_ = kBlock;
                  }
#line 5076 "y_tab.c"
break;
case 117:
#line 595 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5081 "y_tab.c"
  if (!yytrial)
#line 595 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-1].cppFuncPointerObj->attr_ |= kTypedef;
                    yyval.cppObj = yyvsp[-1].cppFuncPointerObj;
                  }
#line 5088 "y_tab.c"
break;
case 118:
  if (!yytrial)
#line 600 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, yyvsp[-9].attr);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-10].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5098 "y_tab.c"
break;
case 119:
  if (!yytrial)
#line 605 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncPointerObj = new CppFunctionPtr(gCurProtLevel, yyvsp[-4].str, yyvsp[-8].cppVarObj, yyvsp[-1].paramList, 0);
                    yyval.cppFuncPointerObj->docer1_ = yyvsp[-9].str;
                    yyval.cppFuncPointerObj->docer2_ = yyvsp[-6].str;
                  }
#line 5108 "y_tab.c"
break;
case 120:
#line 612 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5113 "y_tab.c"
  if (!yytrial)
#line 612 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppFuncPointerObj = yyvsp[-1].cppFuncPointerObj;}
#line 5117 "y_tab.c"
break;
case 121:
  if (!yytrial)
#line 615 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[-8].attr | yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5127 "y_tab.c"
break;
case 122:
  if (!yytrial)
#line 620 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = newFunction(gCurProtLevel, yyvsp[-4].str, yyvsp[-6].cppVarObj, yyvsp[-2].paramList, yyvsp[0].attr);
                    yyval.cppFuncObj->docer1_ = yyvsp[-7].str;
                    yyval.cppFuncObj->docer2_ = yyvsp[-5].str;
                  }
#line 5137 "y_tab.c"
break;
case 123:
  if (!yytrial)
#line 625 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppFuncObj = yyvsp[0].cppFuncObj;
                    yyval.cppFuncObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5146 "y_tab.c"
break;
case 124:
  if (!yytrial)
#line 631 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 5152 "y_tab.c"
break;
case 125:
  if (!yytrial)
#line 632 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5158 "y_tab.c"
break;
case 126:
  if (!yytrial)
#line 633 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5164 "y_tab.c"
break;
case 127:
  if (!yytrial)
#line 634 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5170 "y_tab.c"
break;
case 128:
  if (!yytrial)
#line 635 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5176 "y_tab.c"
break;
case 129:
  if (!yytrial)
#line 636 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5182 "y_tab.c"
break;
case 130:
  if (!yytrial)
#line 637 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5188 "y_tab.c"
break;
case 131:
  if (!yytrial)
#line 638 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5194 "y_tab.c"
break;
case 132:
  if (!yytrial)
#line 639 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5200 "y_tab.c"
break;
case 133:
  if (!yytrial)
#line 640 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5206 "y_tab.c"
break;
case 134:
  if (!yytrial)
#line 641 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5212 "y_tab.c"
break;
case 135:
  if (!yytrial)
#line 642 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5218 "y_tab.c"
break;
case 136:
  if (!yytrial)
#line 643 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5224 "y_tab.c"
break;
case 137:
  if (!yytrial)
#line 644 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5230 "y_tab.c"
break;
case 138:
  if (!yytrial)
#line 645 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5236 "y_tab.c"
break;
case 139:
  if (!yytrial)
#line 646 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5242 "y_tab.c"
break;
case 140:
  if (!yytrial)
#line 647 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5248 "y_tab.c"
break;
case 141:
  if (!yytrial)
#line 648 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5254 "y_tab.c"
break;
case 142:
  if (!yytrial)
#line 649 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5260 "y_tab.c"
break;
case 143:
  if (!yytrial)
#line 650 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5266 "y_tab.c"
break;
case 144:
  if (!yytrial)
#line 651 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5272 "y_tab.c"
break;
case 145:
  if (!yytrial)
#line 652 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5278 "y_tab.c"
break;
case 146:
  if (!yytrial)
#line 653 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5284 "y_tab.c"
break;
case 147:
  if (!yytrial)
#line 654 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5290 "y_tab.c"
break;
case 148:
  if (!yytrial)
#line 655 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5296 "y_tab.c"
break;
case 149:
  if (!yytrial)
#line 656 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5302 "y_tab.c"
break;
case 150:
  if (!yytrial)
#line 657 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5308 "y_tab.c"
break;
case 151:
  if (!yytrial)
#line 658 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5314 "y_tab.c"
break;
case 152:
  if (!yytrial)
#line 659 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5320 "y_tab.c"
break;
case 153:
  if (!yytrial)
#line 660 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5326 "y_tab.c"
break;
case 154:
  if (!yytrial)
#line 661 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5332 "y_tab.c"
break;
case 155:
  if (!yytrial)
#line 662 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5338 "y_tab.c"
break;
case 156:
  if (!yytrial)
#line 663 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5344 "y_tab.c"
break;
case 157:
  if (!yytrial)
#line 664 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5350 "y_tab.c"
break;
case 158:
  if (!yytrial)
#line 665 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5356 "y_tab.c"
break;
case 159:
  if (!yytrial)
#line 666 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5362 "y_tab.c"
break;
case 160:
  if (!yytrial)
#line 667 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5368 "y_tab.c"
break;
case 161:
  if (!yytrial)
#line 668 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 5374 "y_tab.c"
break;
case 162:
  if (!yytrial)
#line 669 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5380 "y_tab.c"
break;
case 163:
  if (!yytrial)
#line 670 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-2].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-2].str.sz); }
#line 5386 "y_tab.c"
break;
case 164:
  if (!yytrial)
#line 673 "/home/dassat/github/cppparser/parser.y"
{ yyval.paramList = 0; }
#line 5392 "y_tab.c"
break;
case 165:
  if (!yytrial)
#line 674 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.paramList = new CppParamList;
                    yyval.paramList->push_back(yyvsp[0].varOrFuncPtr);
                  }
#line 5401 "y_tab.c"
break;
case 166:
  if (!yytrial)
#line 678 "/home/dassat/github/cppparser/parser.y"
{
                    yyvsp[-2].paramList->push_back(yyvsp[0].varOrFuncPtr);
                    yyval.paramList = yyvsp[-2].paramList;
                  }
#line 5410 "y_tab.c"
break;
case 167:
  if (!yytrial)
#line 684 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5416 "y_tab.c"
break;
case 168:
  if (!yytrial)
#line 685 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5422 "y_tab.c"
break;
case 169:
  if (!yytrial)
#line 686 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; yyvsp[0].cppVarObj->varAttr_ |= kFuncParam;  }
#line 5428 "y_tab.c"
break;
case 170:
  if (!yytrial)
#line 687 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; yyvsp[0].cppFuncPointerObj->attr_ |= kFuncParam;    }
#line 5434 "y_tab.c"
break;
case 171:
  if (!yytrial)
#line 690 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppVarObj; }
#line 5440 "y_tab.c"
break;
case 172:
  if (!yytrial)
#line 691 "/home/dassat/github/cppparser/parser.y"
{ yyval.varOrFuncPtr = yyvsp[0].cppFuncPointerObj; }
#line 5446 "y_tab.c"
break;
case 173:
  if (!yytrial)
#line 694 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0;      }
#line 5452 "y_tab.c"
break;
case 174:
  if (!yytrial)
#line 695 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kStatic;     }
#line 5458 "y_tab.c"
break;
case 175:
  if (!yytrial)
#line 696 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kInline;    }
#line 5464 "y_tab.c"
break;
case 176:
  if (!yytrial)
#line 697 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kVirtual;  }
#line 5470 "y_tab.c"
break;
case 177:
  if (!yytrial)
#line 698 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExtern;    }
#line 5476 "y_tab.c"
break;
case 178:
  if (!yytrial)
#line 699 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr |= kExplicit;  }
#line 5482 "y_tab.c"
break;
case 179:
  if (!yytrial)
#line 702 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5488 "y_tab.c"
break;
case 180:
  if (!yytrial)
#line 703 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kConst; }
#line 5494 "y_tab.c"
break;
case 181:
  if (!yytrial)
#line 704 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-1].attr | kOverride; }
#line 5500 "y_tab.c"
break;
case 182:
#line 705 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[0].str.len != 1 || yyvsp[0].str.sz[0] != '0') YYABORT; else ZZVALID;}
#line 5505 "y_tab.c"
  if (!yytrial)
#line 706 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = yyvsp[-2].attr | kPureVirtual; }
#line 5509 "y_tab.c"
break;
case 183:
  if (!yytrial)
#line 709 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = 0; }
#line 5515 "y_tab.c"
break;
case 184:
  if (!yytrial)
#line 710 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kConst; }
#line 5521 "y_tab.c"
break;
case 185:
  if (!yytrial)
#line 711 "/home/dassat/github/cppparser/parser.y"
{ yyval.attr = kVolatile; }
#line 5527 "y_tab.c"
break;
case 186:
#line 714 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5532 "y_tab.c"
  if (!yytrial)
#line 714 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCtorObj = yyvsp[-1].cppCtorObj; }
#line 5536 "y_tab.c"
break;
case 187:
#line 720 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5541 "y_tab.c"
  if (!yytrial)
#line 721 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[-4].cppCtorObj;
                    yyval.cppCtorObj->memInitList_  = yyvsp[-3].memInitList;
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5549 "y_tab.c"
break;
case 188:
#line 726 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5554 "y_tab.c"
break;
case 189:
#line 730 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5559 "y_tab.c"
  if (!yytrial)
#line 731 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-10].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-10].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5566 "y_tab.c"
break;
case 190:
#line 735 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-2].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5571 "y_tab.c"
break;
case 191:
#line 739 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5576 "y_tab.c"
  if (!yytrial)
#line 740 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, makeCppToken(yyvsp[-12].str.sz, yyvsp[-8].str.sz+yyvsp[-8].str.len-yyvsp[-12].str.sz), yyvsp[-5].paramList, yyvsp[-3].memInitList, 0);
                    yyval.cppCtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel, kBlock);
                  }
#line 5583 "y_tab.c"
break;
case 192:
  if (!yytrial)
#line 744 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5592 "y_tab.c"
break;
case 193:
#line 751 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-3].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5604 "y_tab.c"
  if (!yytrial)
#line 759 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-3].str, yyvsp[-1].paramList, nullptr, 0);
                  }
#line 5610 "y_tab.c"
break;
case 194:
#line 762 "/home/dassat/github/cppparser/parser.y"
{if(gCompoundStack.empty()) YYERROR; if(gCompoundStack.top() != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5615 "y_tab.c"
break;
case 195:
  if (!yytrial)
#line 763 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = newConstructor(gCurProtLevel, yyvsp[-4].str, yyvsp[-1].paramList, nullptr, yyvsp[-5].attr);
                  }
#line 5623 "y_tab.c"
break;
case 196:
  if (!yytrial)
#line 766 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCtorObj = yyvsp[0].cppCtorObj;
                    yyval.cppCtorObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5632 "y_tab.c"
break;
case 197:
  if (!yytrial)
#line 772 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = NULL; }
#line 5638 "y_tab.c"
break;
case 198:
  if (!yytrial)
#line 773 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = new CppMemInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5644 "y_tab.c"
break;
case 199:
  if (!yytrial)
#line 774 "/home/dassat/github/cppparser/parser.y"
{ yyval.memInitList = yyvsp[-5].memInitList; yyval.memInitList->push_back(CppMemInit(yyvsp[-3].str, yyvsp[-1].cppExprObj)); }
#line 5650 "y_tab.c"
break;
case 200:
#line 777 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5655 "y_tab.c"
  if (!yytrial)
#line 777 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppDtorObj = yyvsp[-1].cppDtorObj; }
#line 5659 "y_tab.c"
break;
case 201:
#line 780 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5664 "y_tab.c"
  if (!yytrial)
#line 781 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = yyvsp[-3].cppDtorObj;
                    yyval.cppDtorObj->defn_ = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5671 "y_tab.c"
break;
case 202:
#line 785 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5676 "y_tab.c"
break;
case 203:
  if (!yytrial)
#line 787 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-9].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-9].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5685 "y_tab.c"
break;
case 204:
#line 791 "/home/dassat/github/cppparser/parser.y"
{if(yyvsp[-3].str != yyvsp[0].str) YYERROR; else ZZVALID;}
#line 5690 "y_tab.c"
break;
case 205:
  if (!yytrial)
#line 793 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(yyvsp[-11].str.sz, yyvsp[-6].str.sz+yyvsp[-6].str.len-yyvsp[-11].str.sz), 0);
                    yyval.cppDtorObj->defn_      = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(kUnknownProt, kBlock);
                  }
#line 5699 "y_tab.c"
break;
case 206:
#line 800 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5711 "y_tab.c"
  if (!yytrial)
#line 808 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), 0);
                  }
#line 5719 "y_tab.c"
break;
case 207:
#line 814 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-2].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5731 "y_tab.c"
  if (!yytrial)
#line 822 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-2].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-2].str.sz+yyvsp[-2].str.len-tildaStartPos), yyvsp[-4].attr);
                  }
#line 5739 "y_tab.c"
break;
case 208:
#line 828 "/home/dassat/github/cppparser/parser.y"
{
                    if(gCompoundStack.empty())
                      YYERROR;
                    if(gCompoundStack.top() != yyvsp[-4].str)
                      YYERROR;
                    else
                      ZZVALID;
                  }
#line 5751 "y_tab.c"
  if (!yytrial)
#line 836 "/home/dassat/github/cppparser/parser.y"
{
                    const char* tildaStartPos = yyvsp[-4].str.sz-1;
                    while(*tildaStartPos != '~') --tildaStartPos;
                    yyval.cppDtorObj = newDestructor(gCurProtLevel, makeCppToken(tildaStartPos, yyvsp[-4].str.sz+yyvsp[-4].str.len-tildaStartPos), kPureVirtual);
                  }
#line 5759 "y_tab.c"
break;
case 209:
  if (!yytrial)
#line 843 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = new CppVarList();
                    yyval.cppVarObjList->addVar(yyvsp[-7].cppVarObj);
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObj->baseType_, yyvsp[-7].cppVarObj->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5769 "y_tab.c"
break;
case 210:
  if (!yytrial)
#line 848 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppVarObjList = yyvsp[-7].cppVarObjList;
                    yyval.cppVarObjList->addVar(new CppVar(gCurProtLevel, yyvsp[-7].cppVarObjList->varlist_.back()->baseType_, yyvsp[-7].cppVarObjList->varlist_.back()->typeAttr_|yyvsp[-5].attr, yyvsp[-2].attr|yyvsp[0].attr, yyvsp[-4].ptrLevel, yyvsp[-3].refType, yyvsp[-1].str));
                  }
#line 5778 "y_tab.c"
break;
case 211:
#line 854 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5783 "y_tab.c"
  if (!yytrial)
#line 854 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObjList = yyvsp[-1].cppVarObjList; }
#line 5787 "y_tab.c"
break;
case 212:
#line 857 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5792 "y_tab.c"
  if (!yytrial)
#line 857 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5796 "y_tab.c"
break;
case 213:
#line 858 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5801 "y_tab.c"
  if (!yytrial)
#line 858 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; }
#line 5805 "y_tab.c"
break;
case 214:
#line 859 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5810 "y_tab.c"
  if (!yytrial)
#line 859 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppVarObj = yyvsp[-1].cppVarObj; yyval.cppVarObj->apidocer_ = yyvsp[-2].str; }
#line 5814 "y_tab.c"
break;
case 215:
  if (!yytrial)
#line 862 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 0;    }
#line 5820 "y_tab.c"
break;
case 216:
  if (!yytrial)
#line 863 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[0].ptrLevel;    }
#line 5826 "y_tab.c"
break;
case 217:
  if (!yytrial)
#line 866 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = 1;    }
#line 5832 "y_tab.c"
break;
case 218:
  if (!yytrial)
#line 867 "/home/dassat/github/cppparser/parser.y"
{ yyval.ptrLevel = yyvsp[-1].ptrLevel + 1;  }
#line 5838 "y_tab.c"
break;
case 219:
  if (!yytrial)
#line 870 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kNoRef;    }
#line 5844 "y_tab.c"
break;
case 220:
  if (!yytrial)
#line 871 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kByRef;    }
#line 5850 "y_tab.c"
break;
case 221:
  if (!yytrial)
#line 872 "/home/dassat/github/cppparser/parser.y"
{ yyval.refType = kRValRef;  }
#line 5856 "y_tab.c"
break;
case 222:
#line 875 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5861 "y_tab.c"
  if (!yytrial)
#line 875 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppCompundObj = yyvsp[-1].cppCompundObj;}
#line 5865 "y_tab.c"
break;
case 223:
#line 877 "/home/dassat/github/cppparser/parser.y"
{
                        if (yyvsp[0].cppCompundObj->compoundType_ == kNamespace)
                        {
                          ZZVALID;
                        }
                      }
#line 5875 "y_tab.c"
  if (!yytrial)
#line 883 "/home/dassat/github/cppparser/parser.y"
{
                        yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                      }
#line 5881 "y_tab.c"
break;
case 224:
#line 889 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.push(yyvsp[-2].str); ZZVALID;}
#line 5886 "y_tab.c"
  if (!yytrial)
#line 889 "/home/dassat/github/cppparser/parser.y"
{ gProtLevelStack.push(gCurProtLevel); gCurProtLevel = kUnknownProt; }
#line 5890 "y_tab.c"
break;
case 225:
#line 891 "/home/dassat/github/cppparser/parser.y"
{gCompoundStack.pop(); ZZVALID;}
#line 5895 "y_tab.c"
  if (!yytrial)
#line 892 "/home/dassat/github/cppparser/parser.y"
{
                    gCurProtLevel = gProtLevelStack.top();
                    gProtLevelStack.pop();

                    yyval.cppCompundObj = yyvsp[-1].cppCompundObj ? yyvsp[-1].cppCompundObj : newCompound(gCurProtLevel);
                    yyval.cppCompundObj->compoundType_  = yyvsp[-7].compoundType;
                    yyval.cppCompundObj->apidocer_    = yyvsp[-6].str;
                    yyval.cppCompundObj->name_      = yyvsp[-5].str;
                    yyval.cppCompundObj->inheritList_  = yyvsp[-4].inheritList;
                  }
#line 5908 "y_tab.c"
break;
case 226:
  if (!yytrial)
#line 902 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.cppCompundObj = yyvsp[0].cppCompundObj;
                    yyval.cppCompundObj->templSpec_ = yyvsp[-1].templSpec;
                  }
#line 5917 "y_tab.c"
break;
case 227:
  if (!yytrial)
#line 908 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = 0; }
#line 5923 "y_tab.c"
break;
case 228:
#line 909 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5928 "y_tab.c"
  if (!yytrial)
#line 909 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = new CppInheritanceList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5932 "y_tab.c"
break;
case 229:
#line 910 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5937 "y_tab.c"
  if (!yytrial)
#line 910 "/home/dassat/github/cppparser/parser.y"
{ yyval.inheritList = yyvsp[-3].inheritList; yyval.inheritList->push_back(CppInheritInfo((std::string) yyvsp[0].str, yyvsp[-1].protLevel)); }
#line 5941 "y_tab.c"
break;
case 230:
  if (!yytrial)
#line 913 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kUnknownProt;}
#line 5947 "y_tab.c"
break;
case 231:
  if (!yytrial)
#line 914 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;    }
#line 5953 "y_tab.c"
break;
case 232:
  if (!yytrial)
#line 915 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 5959 "y_tab.c"
break;
case 233:
  if (!yytrial)
#line 916 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;  }
#line 5965 "y_tab.c"
break;
case 234:
#line 919 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5970 "y_tab.c"
  if (!yytrial)
#line 919 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-2].compoundType); }
#line 5974 "y_tab.c"
break;
case 235:
#line 920 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 5979 "y_tab.c"
  if (!yytrial)
#line 920 "/home/dassat/github/cppparser/parser.y"
{ yyval.fwdDeclObj = new CppFwdClsDecl(gCurProtLevel, yyvsp[-1].str, yyvsp[-3].compoundType); }
#line 5983 "y_tab.c"
break;
case 236:
  if (!yytrial)
#line 923 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kClass;    }
#line 5989 "y_tab.c"
break;
case 237:
  if (!yytrial)
#line 924 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kStruct;    }
#line 5995 "y_tab.c"
break;
case 238:
  if (!yytrial)
#line 925 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kUnion;    }
#line 6001 "y_tab.c"
break;
case 239:
  if (!yytrial)
#line 926 "/home/dassat/github/cppparser/parser.y"
{ yyval.compoundType = kNamespace;  }
#line 6007 "y_tab.c"
break;
case 240:
  if (!yytrial)
#line 929 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-1].templSpec;
                  }
#line 6015 "y_tab.c"
break;
case 241:
  if (!yytrial)
#line 934 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = new CppTemplateArgList;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6024 "y_tab.c"
break;
case 242:
  if (!yytrial)
#line 938 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templSpec = yyvsp[-2].templSpec;
                    yyval.templSpec->push_back(yyvsp[0].templArg);
                  }
#line 6033 "y_tab.c"
break;
case 243:
  if (!yytrial)
#line 944 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6039 "y_tab.c"
break;
case 244:
  if (!yytrial)
#line 945 "/home/dassat/github/cppparser/parser.y"
{ yyval.templArg = yyvsp[0].templArg; }
#line 6045 "y_tab.c"
break;
case 245:
#line 948 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6050 "y_tab.c"
  if (!yytrial)
#line 948 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6056 "y_tab.c"
break;
case 246:
  if (!yytrial)
#line 951 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = new CppTemplateArg{yyvsp[-1].str, yyvsp[0].str, nullptr};
                  }
#line 6064 "y_tab.c"
break;
case 247:
  if (!yytrial)
#line 956 "/home/dassat/github/cppparser/parser.y"
{
                    yyval.templArg = yyvsp[-2].templArg;
                    yyval.templArg->defaultArgVal_ = yyvsp[0].cppExprObj;
                  }
#line 6073 "y_tab.c"
break;
case 248:
  if (!yytrial)
#line 962 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6079 "y_tab.c"
break;
case 249:
  if (!yytrial)
#line 963 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6085 "y_tab.c"
break;
case 250:
  if (!yytrial)
#line 966 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(0, 0); }
#line 6091 "y_tab.c"
break;
case 251:
  if (!yytrial)
#line 967 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = yyvsp[0].str; }
#line 6097 "y_tab.c"
break;
case 252:
  if (!yytrial)
#line 968 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-3].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-3].str.sz); }
#line 6103 "y_tab.c"
break;
case 253:
  if (!yytrial)
#line 969 "/home/dassat/github/cppparser/parser.y"
{ yyval.str = makeCppToken(yyvsp[-1].str.sz, yyvsp[0].str.sz+yyvsp[0].str.len-yyvsp[-1].str.sz); }
#line 6109 "y_tab.c"
break;
case 254:
#line 972 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6114 "y_tab.c"
  if (!yytrial)
#line 972 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPublic;     }
#line 6118 "y_tab.c"
break;
case 255:
#line 973 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6123 "y_tab.c"
  if (!yytrial)
#line 973 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kProtected;  }
#line 6127 "y_tab.c"
break;
case 256:
#line 974 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6132 "y_tab.c"
  if (!yytrial)
#line 974 "/home/dassat/github/cppparser/parser.y"
{ yyval.protLevel = kPrivate;    }
#line 6136 "y_tab.c"
break;
case 257:
#line 977 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6141 "y_tab.c"
  if (!yytrial)
#line 977 "/home/dassat/github/cppparser/parser.y"
{yyval.cppCompundObj = yyvsp[-1].cppCompundObj; yyval.cppCompundObj->compoundType_ = kExternCBlock; }
#line 6145 "y_tab.c"
break;
case 258:
  if (!yytrial)
#line 980 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = new CppExprList(); yyval.exprList->push_back(yyvsp[0].cppExprObj);  }
#line 6151 "y_tab.c"
break;
case 259:
  if (!yytrial)
#line 981 "/home/dassat/github/cppparser/parser.y"
{ yyval.exprList = yyvsp[-2].exprList; yyval.exprList->push_back(yyvsp[0].cppExprObj);                 }
#line 6157 "y_tab.c"
break;
case 260:
  if (!yytrial)
#line 984 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6163 "y_tab.c"
break;
case 261:
  if (!yytrial)
#line 985 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6169 "y_tab.c"
break;
case 262:
  if (!yytrial)
#line 986 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6175 "y_tab.c"
break;
case 263:
  if (!yytrial)
#line 987 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr((std::string) yyvsp[0].str, kNone);          }
#line 6181 "y_tab.c"
break;
case 264:
  if (!yytrial)
#line 988 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].exprList, CppExpr::kInitializer);        }
#line 6187 "y_tab.c"
break;
case 265:
  if (!yytrial)
#line 989 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kUnaryMinus);                  }
#line 6193 "y_tab.c"
break;
case 266:
  if (!yytrial)
#line 990 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kBitToggle);                   }
#line 6199 "y_tab.c"
break;
case 267:
  if (!yytrial)
#line 991 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kLogNot);                      }
#line 6205 "y_tab.c"
break;
case 268:
  if (!yytrial)
#line 992 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kDerefer);                     }
#line 6211 "y_tab.c"
break;
case 269:
  if (!yytrial)
#line 993 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kRefer);                       }
#line 6217 "y_tab.c"
break;
case 270:
  if (!yytrial)
#line 994 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreIncrement);                }
#line 6223 "y_tab.c"
break;
case 271:
  if (!yytrial)
#line 995 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostIncrement);               }
#line 6229 "y_tab.c"
break;
case 272:
  if (!yytrial)
#line 996 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[0].cppExprObj, kPreDecrement);                }
#line 6235 "y_tab.c"
break;
case 273:
  if (!yytrial)
#line 997 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-1].cppExprObj, kPostDecrement);               }
#line 6241 "y_tab.c"
break;
case 274:
  if (!yytrial)
#line 998 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlus, yyvsp[0].cppExprObj);                    }
#line 6247 "y_tab.c"
break;
case 275:
  if (!yytrial)
#line 999 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinus, yyvsp[0].cppExprObj);                   }
#line 6253 "y_tab.c"
break;
case 276:
  if (!yytrial)
#line 1000 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMul, yyvsp[0].cppExprObj);                     }
#line 6259 "y_tab.c"
break;
case 277:
  if (!yytrial)
#line 1001 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDiv, yyvsp[0].cppExprObj);                     }
#line 6265 "y_tab.c"
break;
case 278:
  if (!yytrial)
#line 1002 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPercent, yyvsp[0].cppExprObj);                     }
#line 6271 "y_tab.c"
break;
case 279:
  if (!yytrial)
#line 1003 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitAnd, yyvsp[0].cppExprObj);                  }
#line 6277 "y_tab.c"
break;
case 280:
  if (!yytrial)
#line 1004 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kBitOr, yyvsp[0].cppExprObj);                   }
#line 6283 "y_tab.c"
break;
case 281:
  if (!yytrial)
#line 1005 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXor, yyvsp[0].cppExprObj);                  }
#line 6289 "y_tab.c"
break;
case 282:
  if (!yytrial)
#line 1006 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kEqual, yyvsp[0].cppExprObj);                   }
#line 6295 "y_tab.c"
break;
case 283:
  if (!yytrial)
#line 1007 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLess, yyvsp[0].cppExprObj);                    }
#line 6301 "y_tab.c"
break;
case 284:
  if (!yytrial)
#line 1008 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreater, yyvsp[0].cppExprObj);                 }
#line 6307 "y_tab.c"
break;
case 285:
  if (!yytrial)
#line 1009 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPlusEqual, yyvsp[0].cppExprObj);             }
#line 6313 "y_tab.c"
break;
case 286:
  if (!yytrial)
#line 1010 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMinusEqual, yyvsp[0].cppExprObj);             }
#line 6319 "y_tab.c"
break;
case 287:
  if (!yytrial)
#line 1011 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kMulEqual, yyvsp[0].cppExprObj);             }
#line 6325 "y_tab.c"
break;
case 288:
  if (!yytrial)
#line 1012 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDivEqual, yyvsp[0].cppExprObj);             }
#line 6331 "y_tab.c"
break;
case 289:
  if (!yytrial)
#line 1013 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kPerEqual, yyvsp[0].cppExprObj);             }
#line 6337 "y_tab.c"
break;
case 290:
  if (!yytrial)
#line 1014 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kXorEqual, yyvsp[0].cppExprObj);             }
#line 6343 "y_tab.c"
break;
case 291:
  if (!yytrial)
#line 1015 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kAndEqual, yyvsp[0].cppExprObj);             }
#line 6349 "y_tab.c"
break;
case 292:
  if (!yytrial)
#line 1016 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kOrEqual, yyvsp[0].cppExprObj);             }
#line 6355 "y_tab.c"
break;
case 293:
  if (!yytrial)
#line 1017 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLeftShift, yyvsp[0].cppExprObj);               }
#line 6361 "y_tab.c"
break;
case 294:
  if (!yytrial)
#line 1018 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRightShift, yyvsp[0].cppExprObj);              }
#line 6367 "y_tab.c"
break;
case 295:
  if (!yytrial)
#line 1019 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLShiftEqual, yyvsp[0].cppExprObj);             }
#line 6373 "y_tab.c"
break;
case 296:
  if (!yytrial)
#line 1020 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kRShiftEqual, yyvsp[0].cppExprObj);             }
#line 6379 "y_tab.c"
break;
case 297:
  if (!yytrial)
#line 1021 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kCmpEqual, yyvsp[0].cppExprObj);                }
#line 6385 "y_tab.c"
break;
case 298:
  if (!yytrial)
#line 1022 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kNotEqual, yyvsp[0].cppExprObj);                }
#line 6391 "y_tab.c"
break;
case 299:
  if (!yytrial)
#line 1023 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kLessEqual, yyvsp[0].cppExprObj);             }
#line 6397 "y_tab.c"
break;
case 300:
  if (!yytrial)
#line 1024 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kGreaterEqual, yyvsp[0].cppExprObj);          }
#line 6403 "y_tab.c"
break;
case 301:
  if (!yytrial)
#line 1025 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, k3WayCmp, yyvsp[0].cppExprObj);                }
#line 6409 "y_tab.c"
break;
case 302:
  if (!yytrial)
#line 1027 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kDot, yyvsp[0].cppExprObj);                     }
#line 6415 "y_tab.c"
break;
case 303:
  if (!yytrial)
#line 1028 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrow, yyvsp[0].cppExprObj);                   }
#line 6421 "y_tab.c"
break;
case 304:
  if (!yytrial)
#line 1029 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kArrowStar, yyvsp[0].cppExprObj);                   }
#line 6427 "y_tab.c"
break;
case 305:
  if (!yytrial)
#line 1030 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kArrayElem, yyvsp[-1].cppExprObj);               }
#line 6433 "y_tab.c"
break;
case 306:
  if (!yytrial)
#line 1031 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppExprObj, kFunctionCall);                }
#line 6439 "y_tab.c"
break;
case 307:
  if (!yytrial)
#line 1032 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-3].cppExprObj, kFunctionCall, yyvsp[-1].exprList);            }
#line 6445 "y_tab.c"
break;
case 308:
  if (!yytrial)
#line 1033 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-2].cppVarObj, kCStyleCast, yyvsp[0].cppExprObj);              }
#line 6451 "y_tab.c"
break;
case 309:
  if (!yytrial)
#line 1034 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kConstCast, yyvsp[-1].cppExprObj);       }
#line 6457 "y_tab.c"
break;
case 310:
  if (!yytrial)
#line 1035 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kStaticCast, yyvsp[-1].cppExprObj);       }
#line 6463 "y_tab.c"
break;
case 311:
  if (!yytrial)
#line 1036 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kDynamicCast, yyvsp[-1].cppExprObj);       }
#line 6469 "y_tab.c"
break;
case 312:
  if (!yytrial)
#line 1037 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(yyvsp[-4].cppVarObj, kReinterpretCast, yyvsp[-1].cppExprObj); }
#line 6475 "y_tab.c"
break;
case 313:
  if (!yytrial)
#line 1038 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; yyvsp[-1].cppExprObj->flags_ |= CppExpr::kBracketed;         }
#line 6481 "y_tab.c"
break;
case 314:
  if (!yytrial)
#line 1039 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kNew;               }
#line 6487 "y_tab.c"
break;
case 315:
  if (!yytrial)
#line 1040 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDelete;            }
#line 6493 "y_tab.c"
break;
case 316:
  if (!yytrial)
#line 1041 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kDeleteArray;       }
#line 6499 "y_tab.c"
break;
case 317:
  if (!yytrial)
#line 1042 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[0].cppExprObj; yyvsp[0].cppExprObj->flags_ |= CppExpr::kReturn;            }
#line 6505 "y_tab.c"
break;
case 318:
  if (!yytrial)
#line 1043 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = new CppExpr(CppExprAtom(), CppExpr::kReturn);  }
#line 6511 "y_tab.c"
break;
case 319:
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ZZVALID;}
#line 6516 "y_tab.c"
  if (!yytrial)
#line 1046 "/home/dassat/github/cppparser/parser.y"
{ yyval.cppExprObj = yyvsp[-1].cppExprObj; }
#line 6520 "y_tab.c"
break;
#line 6522 "y_tab.c"
#line 567 "btyaccpa.ske"

  default:
    break;
  }

#if YYDEBUG && defined(YYDBPR)
  if (yydebug) {
    printf("yydebug[%d]: after reduction, result is ", yytrial);
    YYDBPR(yyps->val);
    printf("\n");
  }
#endif

  // Perform user-defined position reduction
#ifdef YYREDUCEPOSNFUNC
  if(!yytrial) {
    YYCALLREDUCEPOSN(YYREDUCEPOSNFUNCARG);
  }
#endif

  yyps->ssp -= yym;
  yystate = *(yyps->ssp);
  yyps->vsp -= yym;
  yyps->psp -= yym;

  yym = yylhs[yyn];
  if (yystate == 0 && yym == 0) {
#if YYDEBUG
    if (yydebug) {
      printf("yydebug[%d,%d]: after reduction, shifting from state 0 to state %d\n", 
	     yydepth, (int)yytrial, YYFINAL);
    }
#endif
    yystate = YYFINAL;
    *++(yyps->ssp) = YYFINAL;
    *++(yyps->vsp) = yyps->val;
    yyretlval = yyps->val;	// return value of root non-terminal to yylval
    *++(yyps->psp) = yyps->pos;
    yyretposn = yyps->pos;	// return value of root position to yyposn
    if (yychar < 0) {
      if ((yychar = YYLex1()) < 0) {
        yychar = 0;
      }
#if YYDEBUG
      if (yydebug) {
        yys = 0;
        if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
        if (!yys) yys = "illegal-symbol";
        printf("yydebug[%d,%d]: state %d, reading %d (%s)\n", 
	       yydepth, (int)yytrial, YYFINAL, yychar, yys); 
      }
#endif
    }
    if (yychar == 0) goto yyaccept;
    goto yyloop;
  }

  if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
      yyn <= YYTABLESIZE && yycheck[yyn] == yystate) {
    yystate = yytable[yyn];
  } else {
    yystate = yydgoto[yym];
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: after reduction, shifting from state %d to state %d\n",
           yydepth, (int)yytrial, *(yyps->ssp), yystate);
#endif
  if (yyps->ssp >= yyps->ss + yyps->stacksize - 1) {
    YYMoreStack(yyps);
  }
  *++(yyps->ssp) = yystate;
  *++(yyps->vsp) = yyps->val;
  *++(yyps->psp) = yyps->pos;
  goto yyloop;


  //
  // Reduction declares that this path is valid.
  // Set yypath and do a full parse
  //
yyvalid:
  if (yypath) {
    goto yyabort;
  }
  while (yyps->save) {
    yyparsestate *save = yyps->save;
    yyps->save = save->save;
    save->save = yypath;
    yypath = save;
  }
#if YYDEBUG
  if (yydebug)
    printf("yydebug[%d,%d]: CONFLICT trial successful, backtracking to state %d, %d tokens\n",
           yydepth, (int)yytrial, yypath->state, yylvp - yylvals - yypath->lexeme);
#endif
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  yychar = -1;
  yyps->ssp = yyps->ss + (yypath->ssp - yypath->ss);
  yyps->vsp = yyps->vs + (yypath->vsp - yypath->vs);
  yyps->psp = yyps->ps + (yypath->psp - yypath->ps);
  memcpy (yyps->ss, yypath->ss, (yyps->ssp - yyps->ss + 1) * sizeof(Yshort));
  YYSCopy(yyps->vs, yypath->vs,  yyps->vsp - yyps->vs + 1);
  YYPCopy(yyps->ps, yypath->ps,  yyps->psp - yyps->ps + 1);
  yylvp = yylvals + yypath->lexeme;
  yylpp = yylpsns + yypath->lexeme;
  yylexp = yylexemes + yypath->lexeme;
  yystate = yypath->state;
  goto yyloop;


yyabort:
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }

  YYSTYPE *pv;
  for(pv=yyps->vs; pv<yyps->vsp; pv++) {
    YYDELETEVAL(*pv,2);
  }

  YYPOSN *pp;
  for(pp=yyps->ps; pp<yyps->psp; pp++) {
    YYDELETEPOSN(*pp,2);
  }

  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (1);


yyaccept:
  if (yyps->save) goto yyvalid;
  if(yyerrctx) {
    YYFreeState(yyerrctx); yyerrctx = NULL;
  }
  while (yyps) {
    yyparsestate *save = yyps;
    yyps = save->save;
    YYFreeState(save);
  }
  while (yypath) {
    yyparsestate *save = yypath;
    yypath = save->save;
    YYFreeState(save); 
  }
  return (0);
}


int YYLex1() {
  if(yylvp<yylve) {
    yylval = *yylvp++;
    yyposn = *yylpp++;
    return *yylexp++;
  } else {
    if(yyps->save) {
      if(yylvp==yylvlim) {
	yyexpand();
      }
      *yylexp = yylex();
      *yylvp++ = yylval;
      yylve++;
      *yylpp++ = yyposn;
      yylpe++;
      return *yylexp++;
    } else {
      return yylex();
    }
  }
}

int yyexpand() {
  int p = yylvp-yylvals;
  int s = yylvlim-yylvals;
  s += YYSTACKGROWTH;
  { Yshort  *tl = yylexemes; 
    YYSTYPE *tv = yylvals;
    YYPOSN  *tp = yylpsns;
    yylvals = new YYSTYPE[s];
    yylpsns = new YYPOSN[s];
    yylexemes = new Yshort[s];
    memcpy(yylexemes, tl, (s-YYSTACKGROWTH)*sizeof(Yshort));
    YYSCopy(yylvals, tv, s-YYSTACKGROWTH);
    YYPCopy(yylpsns, tp, s-YYSTACKGROWTH);
    delete[] tl;
    delete[] tv;
    delete[] tp;
  }
  yylvp = yylve = yylvals + p;
  yylvlim = yylvals + s;
  yylpp = yylpe = yylpsns + p;
  yylplim = yylpsns + s;
  yylexp = yylexemes + p;
  return 0;
}

void YYSCopy(YYSTYPE *to, YYSTYPE *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYPCopy(YYPOSN *to, YYPOSN *from, int size) {
  int i;                             
  for (i = size-1; i >= 0; i--) {
    to[i] = from[i];
  }
}

void YYMoreStack(yyparsestate *yyps) {
  int p = yyps->ssp - yyps->ss;                               
  Yshort  *tss = yyps->ss;
  YYSTYPE *tvs = yyps->vs;
  YYPOSN  *tps = yyps->ps;
  yyps->ss = new Yshort [yyps->stacksize + YYSTACKGROWTH];   
  yyps->vs = new YYSTYPE[yyps->stacksize + YYSTACKGROWTH];  
  yyps->ps = new YYPOSN [yyps->stacksize + YYSTACKGROWTH];  
  memcpy(yyps->ss, tss, yyps->stacksize * sizeof(Yshort));  
  YYSCopy(yyps->vs, tvs, yyps->stacksize);                  
  YYPCopy(yyps->ps, tps, yyps->stacksize);                  
  yyps->stacksize += YYSTACKGROWTH;                           
  delete[] tss;
  delete[] tvs;
  delete[] tps;
  yyps->ssp = yyps->ss + p;                                   
  yyps->vsp = yyps->vs + p;                                   
  yyps->psp = yyps->ps + p;                                   
}

yyparsestate *YYNewState(int size) {
  yyparsestate *p = new yyparsestate;
  p->stacksize = size+4;
  p->ss = new Yshort [size + 4];
  p->vs = new YYSTYPE[size + 4];
  p->ps = new YYPOSN [size + 4];
  memset(&p->vs[0], 0, (size+4)*sizeof(YYSTYPE));
  memset(&p->ps[0], 0, (size+4)*sizeof(YYPOSN));
  return p;
}

void YYFreeState(yyparsestate *p) {
  delete[] p->ss;
  delete[] p->vs;
  delete[] p->ps;
  delete p;
}
