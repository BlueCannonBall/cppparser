#line 2 "/home/dassat/github/cppparser/parser.lex.cpp"

#line 4 "/home/dassat/github/cppparser/parser.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 112
#define YY_END_OF_BUFFER 113
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[716] =
    {   0,
       23,   23,   23,   23,   51,   51,  113,  112,    1,  112,
      112,  112,    1,  112,  112,    4,  112,    4,  112,  110,
      112,  112,  110,  112,  112,  110,  112,  112,  110,  112,
      110,  112,  110,  112,  110,  112,  110,  112,  107,  112,
      107,  112,  110,  112,  110,  112,  110,  112,  110,  112,
        5,  112,  112,    5,  112,    5,  112,    5,  112,    5,
      112,    5,  112,    5,  112,    5,  112,    5,  112,    5,
      112,    5,  112,    5,  112,    5,  112,    5,  112,    5,
      112,    5,  112,  110,  112,    1,  112,    3,    4,  112,
        3,    4,  112,   30,  110,  112,  110,  112,   23,  112,

        1,   23,  112,    4,   24,  112,    4,   23,  112,   25,
      112,   23,  112,   23,  112,    1,   23,  112,   23,  112,
       23,  112,    1,   23,  112,   24,  112,   25,  112,   23,
      112,   23,  112,    1,   23,  112,   23,  112,   53,  112,
       53,  112,    5,  112,    5,  112,    5,  112,    5,  112,
        5,  112,   43,  112,   43,  112,  112,  112,   32,  112,
       37,  112,   38,  112,   38,  112,   37,  112,   37,  112,
       37,  112,   37,  112,   36,   37,  112,   36,   37,  112,
       33,   37,  112,   37,  112,   37,  112,   51,  112,    1,
       51,  112,   52,  112,   51,   52,  112,   51,  112,   51,

      112,    1,   51,  112,   51,  112,    1,   22,   29,    2,
        2,    1,   28,   29,    4,   97,  108,   88,  101,   90,
      109,   85,   86,  103,   83,  104,   84,  105,  107,   87,
      107,  107,  107,  107,   54,   92,   98,   96,   99,   93,
        5,    5,   89,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   91,  102,    1,    3,
        3,   30,    3,    4,   20,   22,   23,   24,    1,   23,
       25,    4,   24,   25,   26,   21,   22,   23,   29,   23,

        2,   24,    2,   23,    1,   23,   23,   23,   28,   29,
       23,    1,   23,   25,   25,   27,   22,   23,   29,   23,
        2,   23,    1,   23,   23,   23,   28,   29,   53,    5,
        5,    5,    5,    5,    5,    5,   43,   42,   32,   32,
       38,   34,   35,   36,   29,   36,   36,   36,   36,   33,
       33,   28,   29,   51,    1,   51,   52,   22,   51,   29,
       51,   51,    2,   51,    1,   51,   51,   28,   29,   51,
       29,   28,   28,   29,  106,  111,  107,  107,  107,   94,
      100,   95,    5,    5,    5,    5,    5,   71,    5,    5,
        5,    5,    5,    5,    5,   68,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,   20,   23,   29,   29,   23,   28,   23,   28,   29,
       28,   29,   23,   29,   29,   23,   28,   23,   28,   29,
       28,   29,    5,    5,    5,    5,   44,    5,    5,    5,
        5,    5,   29,   39,   29,   39,   36,   36,   36,   28,
       29,   28,   29,   39,   29,   51,   28,   51,   28,   29,
       51,   28,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   70,    5,    5,    5,    5,   65,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,   79,    5,    5,    5,    5,    5,    5,    5,   29,
       21,   29,   23,   28,   28,   28,   29,   21,   28,   29,
       29,   27,   29,   23,   28,   28,   28,   29,   27,   28,
       29,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       39,   28,   51,   74,    5,    5,    5,    5,    5,   47,
       69,   14,    5,    5,    5,    5,    7,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,   28,
       21,   28,   28,   27,   28,    5,   48,   47,    5,    5,
        5,    5,    5,    5,   80,   10,   55,    5,    5,    5,

       69,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,16390,    5,    5,    5,    5,   81,
        5,    5,   13,    5,    9,    5,    5,   72,    5,   49,
       45,    5,    5,    5,   40,    5,   66,    5,    5,   60,
       60,   62,   57,    5,    5,    5,    5,    5,   15,    5,
       67, 8198,   56,    5,   12,   73,    5,    5,    5,    5,
        5,    5,   31,   46,    5,   50,    5,    5,    5,   60,
        5,    5,    5,   17,    5,    5,    5,    5,    8,    5,
       58,    5,   41,    5,    5,   61,    5,   82,   59,    5,
        5,    5,   18,   19,   64,    5,    5,   63,   11,   16,

        5,    5,   75,    5,    5,    5,    5,    5,   76,   77,
        5,    5,    5,    5,   78
    } ;

static yyconst flex_int16_t yy_accept[582] =
    {   0,
        1,    1,    1,    1,    1,    2,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,    7,    8,
        9,   11,   12,   13,   15,   16,   18,   20,   22,   23,
       25,   26,   28,   29,   31,   33,   35,   37,   39,   41,
       43,   45,   47,   49,   51,   53,   54,   56,   58,   60,
       62,   64,   66,   68,   70,   72,   74,   76,   78,   80,
       82,   84,   86,   88,   91,   94,   97,   99,  101,  104,
      107,  110,  112,  114,  116,  119,  121,  123,  126,  128,
      130,  132,  134,  137,  139,  141,  143,  145,  147,  149,
      151,  153,  155,  157,  158,  159,  161,  163,  165,  167,

      169,  171,  173,  175,  178,  181,  184,  186,  188,  190,
      193,  195,  198,  200,  202,  205,  207,  208,  209,  210,
      210,  211,  212,  213,  213,  215,  216,  217,  217,  218,
      219,  220,  221,  221,  222,  224,  225,  226,  227,  228,
      229,  229,  230,  231,  232,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  281,  282,  283,  283,  285,  287,  288,

      289,  289,  291,  292,  294,  295,  296,  297,  298,  300,
      301,  303,  305,  307,  308,  311,  312,  312,  314,  315,
      316,  317,  318,  320,  321,  323,  325,  326,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  338,  339,
      340,  341,  342,  342,  343,  343,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  354,  355,  357,  358,  360,
      362,  363,  365,  367,  368,  371,  372,  373,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
      397,  398,  399,  400,  401,  402,  403,  404,  405,  406,

      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  423,  423,  425,  426,
      428,  431,  433,  433,  435,  436,  438,  441,  443,  444,
      445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
      455,  457,  458,  459,  460,  462,  465,  467,  469,  472,
      473,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498,  499,  500,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  513,
      515,  516,  518,  521,  522,  524,  526,  527,  529,  532,

      533,  534,  535,  536,  537,  538,  539,  540,  541,  542,
      544,  545,  546,  547,  548,  549,  550,  552,  553,  554,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  583,  584,  586,
      587,  588,  589,  590,  591,  592,  593,  594,  595,  596,
      597,  598,  599,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  629,  630,  631,  632,  633,  634,  635,  636,  637,

      638,  639,  640,  641,  642,  643,  644,  645,  646,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  676,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  699,  700,  701,  702,  703,  704,  705,  706,
      707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
      716
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   27,   28,   27,   27,   27,
       29,   29,   29,   29,   29,   30,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   32,   29,   29,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   29,   29,   47,   48,   49,
       50,   51,   29,   52,   53,   54,   55,   56,   57,   58,
       59,   29,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[674] =
    {   0,
        0,    1,   35,    2,   97,  100,  103,  106,  140,    5,
      202,  208,  242,    6,  305,    8,  367,  370, 1405, 4772,
     1402,    3,    9,   12,    4, 4772, 1394, 1370, 1387, 4772,
     1355,   98, 1334, 1308,    1,  101,   12,  114,  359,  363,
     1223,    4, 1218,   87,  109, 1209,  377,  379,  383,  392,
      388,  400,  196,  403,  406,  198,  414,  420,  427,  432,
      429,  392,  481, 4772, 1229, 4772,  206,  117,  219, 4772,
      120,  210,  374,  453,  484,  478,  224,  487, 4772,  490,
      491,  503,  508,  509, 4772, 1228,  450,  494,  499,  504,
      509, 4772, 1196, 1101,  116,  416, 4772, 4772, 1120, 1116,

     1101,  444,  368,  514,  519,  532,  551,  382,    0, 1026,
     4772, 1022,  502,  560,  499,  512, 1010, 4772,    0,  573,
     4772,  998,  555,  979,    0, 4772, 4772,  989,  972, 4772,
     4772, 4772,  966,  960, 4772, 4772, 4772, 4772, 4772,  945,
      937,  540, 4772,  548,  561, 4772,  598, 4772,  909,  902,
     4772, 4772,  888,    0,  551, 4772,  566,  563,  574,  568,
      641,  578,  576,  580,  570,  686,  584,  738,  586,  688,
      783,  785,  590,  592,  787,  690,  789,  692,  792,  794,
      797,  799,  801,  803,  806,  809,  819,  827,  829, 4772,
     4772,  712, 4772,  884, 4772,  519, 4772, 4772,  226, 4772,

      522,  715,  850, 4772,  854, 4772,  851,  566,  464,  718,
     4772,  710,  863,  866,  721,  722,  589,  875,  867,  879,
      845,  714,  821,  887,  870,  891,  883,  892, 4772,  879,
      883,  887,  906,  891,  894,  896, 4772,  831,  825,    0,
      594, 4772,  727,  720,  621,  618,  842,  914,  900,  904,
     4772,  941,    0,  919,  937,    0,  620, 4772,    0,    0,
      940,  562,  928,  529,    0,    0,    0,    0, 4772, 4772,
      929,  966,  991, 4772, 4772, 4772,  933,  937,  943,  945,
      947,    0,  952,  972,  954,  968,  980, 1034, 1079,    0,
     1081, 1084, 1087, 1129, 1174, 1176, 1178, 1181, 1183, 1187,

     1185, 1189, 1191, 1193, 1195, 1199, 1197, 1250, 1201, 1295,
     1297, 1299, 1301, 1203, 1303, 4772,  485, 1000,  797, 1013,
     1014,  814,  482, 1099,  823, 1102, 1105,  932, 1305, 1309,
     1307, 1311, 4772, 1314, 1205, 1316, 1318, 1322, 1017, 4772,
     1020, 1090, 1346, 1371, 1110, 1113,    0,    0,    0,    0,
     1414, 1327, 1339, 1341, 1348, 1334, 1477, 1540, 1350, 1356,
        0, 1358, 1585, 1634, 1679,    0, 1587, 1681, 1589, 1361,
     1683, 1685, 1688, 1591, 1690, 1694, 1697, 1699, 1692,    0,
     1701, 1703, 1707, 1711, 1705, 1724, 1728,  462,  460, 1224,
     1106,  432,  430,  415,  400, 1226, 1107,  371,  362, 1734,

     1381, 1783, 1737, 1739, 1828, 1830, 1832, 1834, 4772,    0,
        0, 1885, 1948, 2011, 1836, 1838,    0,    0, 1841, 2056,
     2058, 2060,    0, 1320, 2062, 2064, 2066, 1843, 2068, 2070,
     2072, 2074, 2077, 2081, 2084, 1593, 2135, 2180, 1743, 2222,
     2267, 2316, 2087, 2269, 2379,  228,  222,  220,  196, 2271,
     4772, 4772, 2442, 2107, 2487, 2273, 2094, 2199,    0,    0,
        0, 2489, 2530, 2575,    0, 2577, 2623, 2686, 2749, 2183,
     2794, 2579, 2796, 2798, 2852, 2897, 2949, 3012, 3075, 3138,
     3201, 3246,    0, 2800, 2802,    0, 2804,    0, 2899, 2901,
        0, 2292, 4772, 4772, 2508, 2806, 2598, 4772, 2583,    0,

     1595, 3248,    0,  403,    0,    0, 2809, 3251, 2903, 3303,
     2905,    0, 3348,    0,    0,    0, 2811,    0,    0, 3253,
     3399, 3255, 3257, 3462, 3259, 4772, 4772, 2924, 4772, 3507,
     3350, 3560,  179, 3352, 3623, 3686,    0, 3354, 3731, 3261,
     3783,    0, 3846,    0, 3909, 4772, 3954, 3358,    0,  133,
     4008,    0,    0, 4071, 3356, 4116,    0,    0,    0, 4169,
     4214, 4772,    0,    0, 4216, 4218,    0, 4220, 1845, 4274,
     4337, 3509,    0,    0, 3512, 4382, 4384, 4438,    0, 4772,
     4501, 4505, 4509, 4513, 4517, 4521, 4523, 4527, 4531, 4535,
     4539, 4543, 4545, 4549, 4553, 4555, 4559, 4563, 4567,  111,

     4569, 4573, 4577, 4581, 4585, 4589, 4593, 4595, 4599,   30,
     4601, 4605, 4609, 4613, 4617, 4621, 4625, 4629, 4631, 4633,
     4637, 4641, 4645, 4649, 4653, 4657, 4661, 4665, 4669, 4673,
     4677, 4681, 4685, 4687, 4689, 4691, 4695, 4699, 4701, 4703,
     4705, 4707, 4709, 4711, 4713, 4715, 4717, 4719, 4721, 4723,
     4725, 4727, 4729, 4731, 4733, 4735, 4737, 4739, 4741, 4743,
     4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763,
     4765, 4767, 4769
    } ;

static yyconst flex_int16_t yy_def[674] =
    {   0,
      581,  581,  580,    3,  582,  582,  583,  583,  580,    9,
      581,  581,  580,   13,  580,   15,  584,  584,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  585,  580,
      580,  580,  586,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  587,  580,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  580,  580,  580,  580,  580,  580,  588,  588,  580,
      588,  589,  588,  588,  588,  588,  590,  590,  580,  591,
      590,  590,  590,  590,  580,  580,  587,  587,  587,  587,
      587,  580,  580,  592,  580,  593,  580,  580,  580,  594,

      595,  580,  580,  580,  580,  596,  580,  580,  597,  597,
      580,  597,  597,  597,  597,  597,  580,  580,  598,  580,
      580,  580,  580,  580,  599,  580,  580,  585,  585,  580,
      580,  580,  586,  586,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  600,  580,  580,  580,
      580,  580,  580,  601,  587,  580,  587,  587,  587,  587,
      580,  587,  587,  587,  587,  587,  587,  580,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  588,  580,

      602,  588,  589,  580,  589,  580,  602,  602,  603,  588,
      580,  588,  588,  588,  604,  590,  605,  590,  591,  591,
      605,  605,  606,  590,  590,  590,  590,  607,  580,  587,
      587,  587,  587,  587,  587,  587,  580,  592,  592,  608,
      593,  580,  594,  594,  595,  595,  580,  609,  580,  580,
      580,  610,  611,  596,  612,  597,  597,  580,  597,  613,
      597,  597,  597,  597,  614,  615,  616,  617,  580,  580,
      580,  600,  272,  580,  580,  580,  587,  587,  587,  587,
      587,  618,  587,  587,  587,  587,  587,  580,  587,  619,
      587,  587,  587,  580,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  580,  587,  587,
      587,  587,  587,  587,  587,  580,  620,  621,  622,  623,
      624,  625,  626,  627,  628,  629,  630,  631,  587,  587,
      587,  587,  580,  587,  587,  587,  587,  587,  609,  580,
      609,  580,  610,  343,  612,  612,  613,  632,  614,  616,
      580,  587,  587,  587,  587,  587,  580,  580,  587,  587,
      633,  587,  587,  580,  587,  634,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  635,
      587,  587,  587,  587,  587,  587,  587,  622,  622,  623,
      636,  625,  625,  628,  628,  629,  637,  631,  631,  587,

      587,  580,  587,  587,  587,  587,  587,  587,  580,  632,
      638,  580,  580,  580,  587,  587,  639,  640,  587,  587,
      587,  587,  641,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  580,  587,  587,  580,
      587,  580,  587,  587,  580,  636,  636,  637,  637,  587,
      580,  580,  580,  587,  587,  587,  587,  587,  642,  643,
      644,  587,  580,  587,  639,  587,  580,  580,  580,  587,
      587,  587,  587,  587,  580,  587,  580,  580,  580,  580,
      580,  587,  645,  587,  587,  646,  587,  647,  587,  587,
      648,  587,  580,  580,  587,  587,  587,  580,  587,  649,

      587,  587,  650,  650,  651,  652,  587,  587,  587,  580,
      587,  653,  587,  654,  655,  656,  587,  657,  658,  587,
      580,  587,  587,  580,  587,  580,  580,  587,  580,  587,
      587,  580,  650,  587,  580,  580,  659,  587,  587,  587,
      580,  660,  580,  661,  580,  580,  587,  587,  662,  580,
      580,  663,  664,  580,  587,  587,  665,  666,  667,  580,
      587,  580,  668,  669,  587,  587,  670,  587,  587,  580,
      580,  587,  671,  672,  587,  587,  587,  580,  673,    0,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580
    } ;

static yyconst flex_uint16_t yy_nxt[4836] =
    {   0,
      580,   21,   24,   63,   64,   65,   24,   24,   66,   24,
      120,  121,  122,  123,  136,  118,  118,   22,   25,   67,
      119,  125,   25,   25,  137,  108,  149,  150,  141,  124,
      142,  142,  344,   23,   23,   20,   21,   26,   27,   28,
       29,   30,   31,   32,   33,   30,   30,   34,   35,   30,
       36,   37,   38,   39,   40,   41,   30,   42,   43,   44,
       30,   45,   45,   45,   45,   45,   45,   30,   23,   30,
       46,   45,   45,   45,   47,   48,   49,   50,   45,   45,
       51,   52,   45,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   45,   45,   30,   62,   30,   30,   69,   70,

       71,   75,   70,   71,   78,   79,  131,   83,   79,   72,
      152,  153,   72,  273,   73,   80,  138,   76,   80,  200,
       81,  132,  204,   84,  139,  140,  118,  154,  154,  201,
       74,  119,  201,   74,  142,  142,   82,  143,  562,   82,
       20,   21,   85,   86,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   22,   20,   20,
       20,   20,   20,   20,   20,   20,   45,   45,   45,   45,
       45,   45,   20,   23,   20,   20,   45,   45,   45,   45,
       87,   88,   45,   45,   45,   89,   45,   45,   45,   45,
       90,   45,   45,   45,   91,   45,   45,   45,   45,   20,

       20,   20,   20,   21,   92,   93,  550,   29,  397,   24,
       92,   93,  206,   29,  154,  154,  154,  154,  198,   22,
      202,  200,  203,  125,   94,   25,  200,  207,  200,  143,
       94,  203,  397,  171,  391,   23,  217,  172,  201,  177,
      391,   23,   20,   21,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   95,   22,
       39,   40,   20,   20,   20,   20,   20,   20,   96,   96,
       96,   96,   96,   96,   20,   23,   20,   20,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   20,   20,   20,   20,   97,   21,   98,   99,   97,
      100,   97,   97,   97,  101,   97,   97,   97,   97,   97,
       97,  102,  103,  104,  105,   97,   97,   97,   97,   97,
       97,  106,  106,  106,  106,  106,  106,   97,  107,   97,
       97,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   97,   97,   97,   97,  110,  111,
      112,  115,  111,  112,  328,  144,  200,  145,  145,  144,
      118,  145,  145,  328,  113,  248,  208,  116,  146,  146,
      147,  209,  146,  146,  118,  154,  154,  154,  154,  255,

      114,  154,  154,  114,  504,  146,  154,  154,  533,  146,
      154,  154,  325,  146,  157,  190,  147,  146,  154,  154,
      160,  154,  154,  158,  154,  154,  159,  325,  161,  163,
      168,  164,  154,  154,  240,  240,  169,  162,  154,  154,
      165,  166,  322,  167,  322,  154,  154,  154,  154,  170,
      154,  154,  191,  173,  210,  211,  212,  175,  174,  178,
      176,  181,  247,  247,  182,  201,  200,  179,  154,  154,
      180,  183,  319,  189,  319,  185,  319,  187,  184,  186,
      200,  188,  192,  193,  194,  213,  200,  195,  218,  200,
      208,  230,  206,  200,  217,  215,  203,  201,  196,  219,

      263,  214,  219,  222,  224,  211,  225,  221,  223,  226,
      200,  200,  154,  154,  259,  217,  264,  154,  154,  260,
      219,  222,  154,  154,  259,  227,  228,  154,  154,  265,
      249,  316,  250,  250,  201,  249,  267,  250,  250,  207,
      231,  233,  232,  251,  251,  252,  348,  234,  251,  251,
      253,  253,  120,  121,  122,  235,  123,  236,  142,  142,
      251,  261,  121,  262,  121,  251,  271,  271,  251,  154,
      154,  252,  124,  251,  120,  121,  122,  144,  201,  145,
      145,  154,  154,  207,  154,  154,  154,  154,  154,  154,
      146,  146,  154,  154,  154,  154,  154,  154,  154,  154,

      279,  217,  154,  154,  154,  154,  221,  146,  154,  154,
      154,  154,  240,  240,  281,  146,  272,  272,  277,  278,
      286,  257,  280,  287,  272,  272,  283,  246,  284,  289,
      246,  295,  291,  296,  285,  272,  272,  272,  272,  272,
      272,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  154,
      154,  282,  282,  282,  282,  282,  282,  155,  155,  155,
      155,  155,  155,  282,  282,  282,  282,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      282,  282,  282,  282,  154,  154,  154,  154,  154,  154,
      154,  154,  211,  192,  193,  194,  202,  200,  195,  210,
      211,  212,  201,  200,  200,  244,  217,  203,  299,  196,
      201,  221,  244,  322,  217,  302,  292,  288,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  154,  154,  290,  290,
      290,  290,  290,  290,  155,  155,  155,  155,  155,  155,
      290,  290,  290,  290,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  290,  290,  290,

      290,  154,  154,  154,  154,  154,  154,  154,  154,  319,
      154,  154,  154,  154,  389,  154,  154,  154,  154,  154,
      154,  154,  154,  200,  154,  154,  322,  154,  154,  303,
      293,  393,  297,  325,  300,  325,  298,  154,  154,  305,
      395,  294,  301,  304,  306,  154,  154,  154,  154,  239,
      307,  310,  206,  309,  312,  239,  206,  217,  311,  308,
      247,  247,  203,  201,  213,  200,  201,  207,  200,  206,
      313,  317,  211,  314,  315,  203,  218,  200,  201,  219,
      214,  206,  217,  320,  221,  200,  193,  219,  224,  211,
      225,  217,  226,  200,  200,  217,  323,  154,  154,  217,

      326,  154,  154,  219,  328,  154,  154,  333,  227,  154,
      154,  276,  154,  154,  154,  154,  340,  341,  342,  342,
      249,  329,  250,  250,  154,  154,  275,  332,  330,  263,
      336,  337,  274,  251,  251,  331,  338,  253,  253,  340,
      346,  261,  121,  262,  328,  264,  334,  271,  271,  399,
      251,  154,  154,  270,  335,  154,  154,  269,  251,  343,
      343,  154,  154,  154,  154,  154,  154,  343,  343,  134,
      154,  154,  154,  154,  351,  134,  352,  129,  343,  343,
      343,  343,  343,  343,  272,  272,  154,  154,  355,  356,
      154,  154,  272,  272,  129,  353,  267,  354,  154,  154,

      121,  358,  200,  272,  272,  272,  272,  272,  272,  273,
      273,  117,  319,  357,  359,  200,  200,  273,  273,  340,
      341,  360,  409,  341,  258,  391,  322,  257,  273,  273,
      273,  273,  273,  273,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  154,  154,  361,  361,  361,  361,  361,  361,
      155,  155,  155,  155,  155,  155,  361,  361,  361,  361,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  361,  361,  361,  361,  154,  154,  154,

      154,  200,  154,  154,  200,  154,  154,  200,  342,  342,
      246,  325,  340,  346,  397,  409,  346,  328,  391,  397,
      362,  244,  242,  447,  449,  239,  363,  364,  365,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  154,  154,  366,
      366,  366,  366,  366,  366,  155,  155,  155,  155,  155,
      155,  366,  366,  366,  366,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  366,  366,
      366,  366,  154,  154,  154,  154,  154,  154,  237,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  367,  200,  368,  200,  371,
      229,  197,  156,  369,  370,  372,  391,  374,  397,  373,
      386,  151,  381,  148,  375,  405,  379,  376,  377,  378,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  154,  154,
      380,  380,  380,  380,  380,  380,  155,  155,  155,  155,
      155,  155,  380,  380,  380,  380,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  380,
      380,  380,  380,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  135,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  383,  134,  382,  154,  154,  384,  402,  387,
      400,  401,  154,  154,  385,  404,  403,  154,  154,  154,
      154,  407,  406,  408,  343,  343,  154,  154,  154,  154,
      470,  412,  343,  343,  154,  154,  154,  154,  130,  154,
      154,  416,  451,  343,  343,  343,  343,  343,  343,  344,
      344,  413,  129,  127,  414,  419,  126,  344,  344,  154,

      154,  415,  428,  117,  580,  580,  421,  420,  344,  344,
      344,  344,  344,  344,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  154,  154,  411,  411,  411,  411,  411,  411,
      155,  155,  155,  155,  155,  155,  411,  411,  411,  411,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  411,  411,  411,  411,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  154,  154,  417,  417,  417,

      417,  417,  417,  155,  155,  155,  155,  155,  155,  417,
      417,  417,  417,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  417,  417,  417,  417,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  154,  154,
      418,  418,  418,  418,  418,  418,  155,  155,  155,  155,
      155,  155,  418,  418,  418,  418,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  418,

      418,  418,  418,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  425,  580,  427,  580,  580,  580,
      482,  531,  432,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  154,  154,  423,  423,  423,  423,  423,  423,
      155,  155,  155,  155,  155,  155,  423,  423,  423,  423,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  423,  423,  423,  423,  154,  154,  154,

      154,  154,  154,  154,  154,  580,  154,  154,  154,  154,
      154,  154,  154,  154,  580,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  580,  429,  154,
      154,  424,  426,  434,  580,  433,  435,  580,  430,  431,
      580,  438,  154,  154,  580,  436,  154,  154,  437,  439,
      441,  440,  154,  154,  442,  154,  154,  154,  154,  443,
      580,  154,  154,  580,  580,  580,  580,  580,  580,  445,
      580,  580,  580,  580,  580,  580,  580,  444,  580,  453,
      485,  454,  450,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  154,  154,  452,  452,  452,  452,  452,  452,  155,
      155,  155,  155,  155,  155,  452,  452,  452,  452,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  452,  452,  452,  452,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  580,  154,
      154,  154,  154,  154,  154,  580,  580,  580,  580,  455,
      580,  580,  580,  580,  580,  580,  458,  463,  580,  457,
      466,  572,  474,  464,  456,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  154,  154,  459,  459,  459,  459,  459,
      459,  155,  155,  155,  155,  155,  155,  459,  459,  459,
      459,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  459,  459,  459,  459,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  154,  154,  460,  460,
      460,  460,  460,  460,  155,  155,  155,  155,  155,  155,
      460,  460,  460,  460,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  460,  460,  460,
      460,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  154,
      154,  461,  461,  461,  461,  461,  461,  155,  155,  155,
      155,  155,  155,  461,  461,  461,  461,  462,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      461,  461,  461,  461,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  580,  154,  154,  580,  468,  154,

      154,  469,  154,  154,  467,  154,  154,  475,  494,  472,
      580,  476,  154,  154,  478,  471,  479,  580,  580,  473,
      477,  580,  580,  580,  489,  154,  154,  580,  481,  580,
      580,  497,  580,  580,  480,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  154,  154,  483,  483,  483,  483,  483,
      483,  155,  155,  155,  155,  155,  155,  483,  483,  483,
      483,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  483,  483,  483,  483,  154,  154,

      498,  154,  154,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  154,  154,  580,
      507,  484,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      154,  154,  486,  486,  486,  486,  486,  486,  155,  155,
      155,  155,  155,  155,  486,  486,  486,  486,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  486,  486,  486,  486,  154,  154,  154,  154,  154,
      154,  154,  154,  526,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      154,  154,  492,  496,  490,  487,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  154,  154,  488,  488,  488,  488,
      488,  488,  155,  155,  155,  155,  155,  155,  488,  488,
      488,  488,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  488,  488,  488,  488,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  154,  154,  491,

      491,  491,  491,  491,  491,  155,  155,  155,  155,  155,
      155,  491,  491,  491,  491,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  491,  491,
      491,  491,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      154,  154,  493,  493,  493,  493,  493,  493,  155,  155,
      155,  155,  155,  155,  493,  493,  493,  493,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  493,  493,  493,  493,  154,  154,  154,  154,  527,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  154,  154,  499,  495,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  154,  154,
      500,  500,  500,  500,  500,  500,  155,  155,  155,  155,
      155,  155,  500,  500,  500,  500,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  500,
      500,  500,  500,  154,  154,  154,  154,  154,  154,  529,

      580,  154,  154,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  501,  580,  154,  154,  580,  509,
      530,  580,  502,  503,  504,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  154,  154,  503,  503,  503,  503,  503,  503,  155,
      155,  155,  155,  155,  155,  503,  503,  503,  503,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  503,  503,  503,  503,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  154,  154,  505,  505,  505,  505,
      505,  505,  155,  155,  155,  155,  155,  155,  505,  505,
      505,  505,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  505,  505,  505,  505,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  154,  154,  506,
      506,  506,  506,  506,  506,  155,  155,  155,  155,  155,
      155,  506,  506,  506,  506,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  506,  506,
      506,  506,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  580,  154,  154,  154,
      154,  580,  580,  580,  580,  580,  580,  510,  580,  580,
      580,  580,  521,  508,  580,  523,  580,  528,  534,  522,
      540,  511,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      154,  154,  512,  512,  512,  512,  512,  512,  155,  155,
      155,  155,  155,  155,  512,  512,  512,  512,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  512,  512,  512,  512,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  546,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  154,  154,  536,  524,  538,  525,  513,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  154,  154,  514,
      514,  514,  514,  514,  514,  155,  155,  155,  155,  155,
      155,  514,  514,  514,  514,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  514,  514,
      514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      154,  154,  515,  515,  515,  515,  515,  515,  155,  155,
      155,  155,  155,  155,  515,  515,  515,  515,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  515,  515,  515,  515,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  154,  154,  516,  516,  516,  516,  516,

      516,  155,  155,  155,  155,  155,  155,  516,  516,  516,
      516,  517,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  516,  516,  516,  516,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  154,  154,  518,  518,
      518,  518,  518,  518,  155,  155,  155,  155,  155,  155,
      518,  518,  518,  518,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  518,  518,  518,

      518,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  154,
      154,  519,  519,  519,  519,  519,  519,  155,  155,  155,
      155,  155,  155,  519,  519,  519,  519,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      519,  519,  519,  519,  154,  154,  154,  154,  580,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  541,  580,  543,  478,  556,  520,

      545,  532,  535,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  154,  154,  537,  537,  537,  537,  537,  537,  155,
      155,  155,  155,  155,  155,  537,  537,  537,  537,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  537,  537,  537,  537,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  548,
      580,  580,  580,  551,  554,  561,  580,  565,  539,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  154,  154,  542,
      542,  542,  542,  542,  542,  155,  155,  155,  155,  155,
      155,  542,  542,  542,  542,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  542,  542,
      542,  542,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      154,  154,  544,  544,  544,  544,  544,  544,  155,  155,
      155,  155,  155,  155,  544,  544,  544,  544,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  544,  544,  544,  544,  154,  154,  154,  154,  580,
      154,  154,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  575,  576,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  547,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  154,  154,
      549,  549,  549,  549,  549,  549,  155,  155,  155,  155,
      155,  155,  549,  549,  549,  549,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  549,
      549,  549,  549,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  154,  154,  552,  552,  552,  552,  552,  552,  155,
      155,  155,  155,  155,  155,  552,  552,  552,  552,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  552,  552,  552,  552,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  154,  154,  553,  553,  553,  553,
      553,  553,  155,  155,  155,  155,  155,  155,  553,  553,
      553,  553,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  553,  553,  553,  553,  154,
      154,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  555,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  154,  154,  557,  557,  557,  557,  557,  557,  155,
      155,  155,  155,  155,  155,  557,  557,  557,  557,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  557,  557,  557,  557,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  154,  154,  558,  558,  558,  558,
      558,  558,  155,  155,  155,  155,  155,  155,  558,  558,
      558,  558,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  558,  558,  558,  558,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  154,  154,  559,
      559,  559,  559,  559,  559,  155,  155,  155,  155,  155,
      155,  559,  559,  559,  559,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  559,  559,
      559,  559,  154,  154,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  560,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  154,  154,  563,  563,
      563,  563,  563,  563,  155,  155,  155,  155,  155,  155,
      563,  563,  563,  563,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  563,  563,  563,
      563,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  154,
      154,  564,  564,  564,  564,  564,  564,  155,  155,  155,

      155,  155,  155,  564,  564,  564,  564,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      564,  564,  564,  564,  154,  154,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  566,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  154,  154,  567,
      567,  567,  567,  567,  567,  155,  155,  155,  155,  155,

      155,  567,  567,  567,  567,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  567,  567,
      567,  567,  154,  154,  154,  154,  154,  154,  154,  154,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  568,  580,  580,  569,
      580,  570,  580,  571,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  154,  154,  573,  573,  573,  573,  573,  573,

      155,  155,  155,  155,  155,  155,  573,  573,  573,  573,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  573,  573,  573,  573,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  154,  154,  574,  574,  574,
      574,  574,  574,  155,  155,  155,  155,  155,  155,  574,
      574,  574,  574,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  574,  574,  574,  574,

      154,  154,  154,  154,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  577,  580,  580,  578,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  154,  154,  579,  579,
      579,  579,  579,  579,  155,  155,  155,  155,  155,  155,
      579,  579,  579,  579,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  579,  579,  579,

      579,   20,   20,   20,   20,   68,   68,   68,   68,   77,
       77,   77,   77,  109,  109,  109,  109,  128,  580,  128,
      128,  133,  580,  133,  133,  155,  155,  199,  199,  199,
      199,  205,  205,  205,  205,  216,  216,  216,  216,  220,
      220,  220,  220,  238,  580,  238,  238,  241,  241,  243,
      580,  243,  243,  245,  580,  245,  245,  254,  254,  256,
      580,  256,  256,  266,  580,  266,  266,  268,  580,  268,
      268,  154,  154,  317,  580,  317,  317,  318,  318,  318,
      318,  321,  321,  321,  321,  323,  580,  323,  323,  324,
      324,  324,  324,  327,  327,  327,  327,  240,  240,  339,

      339,  339,  339,  253,  253,  345,  345,  345,  345,  347,
      580,  347,  347,  349,  580,  349,  349,  266,  580,  266,
      266,  350,  580,  350,  350,  268,  580,  268,  268,  282,
      282,  290,  290,  317,  580,  317,  317,  318,  318,  318,
      318,  388,  580,  388,  388,  390,  390,  390,  390,  321,
      321,  321,  321,  392,  580,  392,  392,  323,  580,  323,
      323,  324,  324,  324,  324,  394,  580,  394,  394,  396,
      396,  396,  396,  327,  327,  327,  327,  398,  580,  398,
      398,  410,  580,  410,  410,  361,  361,  366,  366,  380,
      380,  446,  580,  446,  446,  448,  580,  448,  448,  411,

      411,  465,  465,  418,  418,  423,  423,  459,  459,  460,
      460,  461,  461,  483,  483,  486,  486,  488,  488,  491,
      491,  500,  500,  503,  503,  505,  505,  506,  506,  512,
      512,  514,  514,  515,  515,  516,  516,  518,  518,  519,
      519,  537,  537,  542,  542,  544,  544,  549,  549,  552,
      552,  553,  553,  557,  557,  558,  558,  559,  559,  563,
      563,  564,  564,  567,  567,  573,  573,  574,  574,  579,
      579,   19,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580
    } ;

static yyconst flex_int16_t yy_chk[4836] =
    {   0,
        0,    1,    2,    4,    4,    4,   10,   14,    4,   16,
       23,   23,   23,   24,   35,   22,   25,    1,    2,    4,
       22,   25,   10,   14,   35,   16,   42,   42,   37,   24,
       37,   37,  610,    1,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,

        5,    6,    6,    6,    7,    7,   32,    8,    8,    5,
       44,   44,    6,  600,    5,    7,   36,    6,    8,   68,
        7,   32,   71,    8,   36,   36,   38,   45,   45,   68,
        5,   38,   71,    6,   95,   95,    7,   38,  550,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,   11,   11,   11,  533,   11,  449,   12,
       12,   12,   72,   12,   53,   53,   56,   56,   67,   11,
       69,   69,   72,   67,   11,   12,   77,   72,  199,   67,
       12,   69,  448,   53,  447,   11,   77,   53,  199,   56,
      446,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,   17,
       17,   18,   18,   18,  399,   39,   73,   39,   39,   40,
      103,   40,   40,  398,   17,  103,   73,   18,   39,   39,
       39,   73,   40,   40,  108,   47,   47,   48,   48,  108,

       17,   49,   49,   18,  504,   39,   51,   51,  504,   40,
       50,   50,  395,   39,   47,   62,   39,   40,   52,   52,
       48,   54,   54,   47,   55,   55,   47,  394,   48,   49,
       51,   49,   57,   57,   96,   96,   51,   48,   58,   58,
       49,   50,  393,   50,  392,   59,   59,   61,   61,   52,
       60,   60,   62,   54,   74,   74,   74,   55,   54,   57,
       55,   58,  102,  102,   58,   74,  209,   57,   87,   87,
       57,   58,  389,   61,  388,   59,  209,   60,   58,   59,
       76,   60,   63,   63,   63,   75,   75,   63,   78,   78,
       76,   87,   80,   81,  323,   76,   75,  317,   63,   78,

      115,   75,   80,   81,   82,   82,   82,   80,   81,   83,
       83,   84,   88,   88,  113,   82,  115,   89,   89,  113,
       83,   84,   90,   90,  116,   83,   84,   91,   91,  116,
      104,  196,  104,  104,  201,  105,  196,  105,  105,  201,
       88,   89,   88,  104,  104,  104,  264,   89,  105,  105,
      106,  106,  107,  107,  107,   90,  123,   91,  142,  142,
      104,  114,  114,  114,  262,  105,  144,  144,  104,  155,
      155,  104,  123,  105,  120,  120,  120,  145,  208,  145,
      145,  158,  158,  208,  157,  157,  160,  160,  165,  165,
      145,  145,  159,  159,  163,  163,  162,  162,  164,  164,

      158,  217,  167,  167,  169,  169,  217,  145,  173,  173,
      174,  174,  241,  241,  160,  145,  147,  147,  157,  157,
      165,  257,  159,  165,  147,  147,  162,  246,  163,  167,
      245,  173,  169,  174,  164,  147,  147,  147,  147,  147,
      147,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  166,  166,  170,  170,  176,  176,
      178,  178,  212,  192,  192,  192,  202,  202,  192,  210,
      210,  210,  212,  215,  216,  244,  222,  202,  176,  192,
      210,  222,  243,  215,  216,  178,  170,  166,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      168,  171,  171,  172,  172,  175,  175,  177,  177,  319,
      179,  179,  180,  180,  319,  181,  181,  182,  182,  183,
      183,  184,  184,  223,  185,  185,  322,  186,  186,  179,
      171,  322,  175,  223,  177,  325,  175,  187,  187,  180,
      325,  172,  177,  179,  181,  188,  188,  189,  189,  239,
      182,  185,  203,  184,  186,  238,  205,  221,  185,  183,
      247,  247,  203,  207,  213,  213,  205,  203,  214,  219,
      187,  205,  225,  188,  189,  213,  218,  218,  214,  219,
      213,  220,  225,  214,  219,  227,  194,  218,  224,  224,
      224,  220,  226,  226,  228,  227,  220,  230,  230,  224,

      227,  231,  231,  226,  228,  232,  232,  233,  226,  234,
      234,  153,  235,  235,  236,  236,  248,  248,  249,  249,
      250,  230,  250,  250,  233,  233,  150,  232,  231,  263,
      234,  235,  149,  250,  250,  231,  236,  254,  254,  255,
      255,  261,  261,  261,  328,  263,  233,  271,  271,  328,
      250,  277,  277,  141,  233,  278,  278,  140,  250,  252,
      252,  279,  279,  280,  280,  281,  281,  252,  252,  134,
      283,  283,  285,  285,  277,  133,  278,  129,  252,  252,
      252,  252,  252,  252,  272,  272,  286,  286,  281,  283,
      284,  284,  272,  272,  128,  279,  124,  280,  287,  287,

      122,  285,  318,  272,  272,  272,  272,  272,  272,  273,
      273,  117,  318,  284,  286,  320,  321,  273,  273,  339,
      339,  287,  341,  341,  112,  320,  321,  110,  273,  273,
      273,  273,  273,  273,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  289,  289,  291,

      291,  324,  292,  292,  326,  293,  293,  327,  342,  342,
      101,  324,  345,  345,  326,  346,  346,  327,  391,  397,
      289,  100,   99,  391,  397,   94,  291,  292,  293,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  295,  295,  296,  296,  297,  297,   93,  298,

      298,  299,  299,  301,  301,  300,  300,  302,  302,  303,
      303,  304,  304,  305,  305,  307,  307,  306,  306,  309,
      309,  314,  314,  335,  335,  295,  390,  296,  396,  299,
       86,   65,   46,  297,  298,  300,  390,  302,  396,  301,
      314,   43,  309,   41,  303,  335,  307,  304,  305,  306,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  310,  310,  311,  311,  312,  312,  313,
      313,  315,  315,  329,  329,  331,  331,  330,  330,  332,
      332,   34,  334,  334,  336,  336,  337,  337,  424,  424,
      338,  338,  311,   33,  310,  352,  352,  312,  331,  315,
      329,  330,  356,  356,  313,  334,  332,  353,  353,  354,
      354,  337,  336,  338,  343,  343,  355,  355,  359,  359,
      424,  352,  343,  343,  360,  360,  362,  362,   31,  370,
      370,  356,  401,  343,  343,  343,  343,  343,  343,  344,
      344,  353,   29,   28,  354,  359,   27,  344,  344,  401,

      401,  355,  370,   21,   19,    0,  362,  360,  344,  344,
      344,  344,  344,  344,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  358,  358,  363,  363,  367,  367,  369,  369,  374,
      374,  436,  436,  501,  501,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  367,    0,  369,    0,    0,    0,
      436,  501,  374,  363,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  365,  365,  368,

      368,  371,  371,  372,  372,    0,  373,  373,  375,  375,
      379,  379,  376,  376,    0,  377,  377,  378,  378,  381,
      381,  382,  382,  385,  385,  383,  383,    0,  371,  384,
      384,  365,  368,  376,    0,  375,  377,    0,  372,  373,
        0,  381,  386,  386,    0,  378,  387,  387,  379,  381,
      383,  382,  400,  400,  384,  403,  403,  404,  404,  385,
        0,  439,  439,    0,    0,    0,    0,    0,    0,  387,
        0,    0,    0,    0,    0,    0,    0,  386,    0,  403,
      439,  404,  400,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  405,  405,  406,  406,
      407,  407,  408,  408,  415,  415,  416,  416,    0,  419,
      419,  428,  428,  569,  569,    0,    0,    0,    0,  405,
        0,    0,    0,    0,    0,    0,  408,  415,    0,  407,
      419,  569,  428,  416,  406,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  420,  420,  421,  421,  422,  422,
      425,  425,  426,  426,  427,  427,  429,  429,  430,  430,
      431,  431,  432,  432,    0,  433,  433,    0,  421,  434,

      434,  422,  435,  435,  420,  443,  443,  429,  454,  426,
        0,  430,  457,  457,  432,  425,  433,    0,    0,  427,
      431,    0,    0,    0,  443,  454,  454,    0,  435,    0,
        0,  457,    0,    0,  434,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  438,  438,

      458,  470,  470,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  458,  458,    0,
      470,  438,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  441,  441,  444,  444,  450,
      450,  456,  456,  492,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      492,  492,  450,  456,  444,  441,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  455,  455,  462,  462,  495,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  495,  495,  462,  455,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  464,  464,  466,  466,  472,  472,  497,

        0,  499,  499,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  464,    0,  497,  497,    0,  472,
      499,    0,  466,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  471,  471,  473,  473,  474,  474,  484,  484,
      485,  485,  487,  487,  496,  496,    0,  507,  507,  517,
      517,    0,    0,    0,    0,    0,    0,  473,    0,    0,
        0,    0,  484,  471,    0,  487,    0,  496,  507,  485,
      517,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  476,  476,  489,  489,  490,
      490,  509,  509,  511,  511,  528,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  528,  528,  509,  489,  511,  490,  476,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  482,  502,  502,    0,  508,
      508,  520,  520,  522,  522,  523,  523,  525,  525,  540,
      540,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  520,    0,  522,  523,  540,  482,

      525,  502,  508,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  513,  513,  531,  531,
      534,  534,  538,  538,  555,  555,  548,  548,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  531,
        0,    0,    0,  534,  538,  548,    0,  555,  513,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  530,  530,  572,  572,    0,
      575,  575,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  572,  575,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  530,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  539,
      539,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  539,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  547,  547,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  547,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,

      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  556,  556,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  556,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,

      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  561,  561,  565,  565,  566,  566,  568,  568,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  561,    0,    0,  565,
        0,  566,    0,  568,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,

      576,  576,  577,  577,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  576,    0,    0,  577,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  581,  581,  581,  581,  582,  582,  582,  582,  583,
      583,  583,  583,  584,  584,  584,  584,  585,    0,  585,
      585,  586,    0,  586,  586,  587,  587,  588,  588,  588,
      588,  589,  589,  589,  589,  590,  590,  590,  590,  591,
      591,  591,  591,  592,    0,  592,  592,  593,  593,  594,
        0,  594,  594,  595,    0,  595,  595,  596,  596,  597,
        0,  597,  597,  598,    0,  598,  598,  599,    0,  599,
      599,  601,  601,  602,    0,  602,  602,  603,  603,  603,
      603,  604,  604,  604,  604,  605,    0,  605,  605,  606,
      606,  606,  606,  607,  607,  607,  607,  608,  608,  609,

      609,  609,  609,  611,  611,  612,  612,  612,  612,  613,
        0,  613,  613,  614,    0,  614,  614,  615,    0,  615,
      615,  616,    0,  616,  616,  617,    0,  617,  617,  618,
      618,  619,  619,  620,    0,  620,  620,  621,  621,  621,
      621,  622,    0,  622,  622,  623,  623,  623,  623,  624,
      624,  624,  624,  625,    0,  625,  625,  626,    0,  626,
      626,  627,  627,  627,  627,  628,    0,  628,  628,  629,
      629,  629,  629,  630,  630,  630,  630,  631,    0,  631,
      631,  632,    0,  632,  632,  633,  633,  634,  634,  635,
      635,  636,    0,  636,  636,  637,    0,  637,  637,  638,

      638,  639,  639,  640,  640,  641,  641,  642,  642,  643,
      643,  644,  644,  645,  645,  646,  646,  647,  647,  648,
      648,  649,  649,  650,  650,  651,  651,  652,  652,  653,
      653,  654,  654,  655,  655,  656,  656,  657,  657,  658,
      658,  659,  659,  660,  660,  661,  661,  662,  662,  663,
      663,  664,  664,  665,  665,  666,  666,  667,  667,  668,
      668,  669,  669,  670,  670,  671,  671,  672,  672,  673,
      673,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/dassat/github/cppparser/parser.l"
/*
The MIT License (MIT)

Copyright (c) 2014

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/*
IMPORTANT: This file contains code to tokenify the input using flex
For simplicity and ease of tracking error in input lexer's output is always a string (represented by CppToken).
Responsiblity of token synthesis is solely on parser.
For this very reason this file does not use any class that are defined in cppdom.h
*/
#line 32 "/home/dassat/github/cppparser/parser.l"
#include "cppdom.h" // To shutup the compiler
#include "cppconst.h" // To shutup the compiler

#include "cpptoken.h"
#include "parser.tab.h"

static int gLog = 0;

  // Easy MACRO to quickly push current context and switch to another one.
#define BEGINCONTEXT(ctx) { \
  int prevState = YYSTATE;  \
  yy_push_state(ctx);       \
  if (gLog)                 \
    printf("@line#%d, pushed state=%d and started state=%d from source code line#%d\n", gLineNo, prevState, YYSTATE, __LINE__); \
}

#define ENDCONTEXT() {      \
  int prevState = YYSTATE;  \
  yy_pop_state();           \
  if (gLog)                 \
    printf("@line#%d, ended state=%d and starting state=%d from source code line#%d\n", gLineNo, prevState, YYSTATE, __LINE__); \
}

//////////////////////////////////////////////////////////////////////////

#ifdef WIN32
#  define fileno _fileno /* Avoid compiler warning for VS. */
#endif //#ifdef WIN32

extern int gLineNo;
const char* oyytext;

// Its a hack because it uses undocumented thing.
// Returns start of buffer pointer.
const char* get_start_of_buffer()
{
  if (YY_CURRENT_BUFFER)
	  return YY_CURRENT_BUFFER->yy_ch_buf;
  return nullptr;
}

int get_context()
{
  return YYSTATE;
}

inline void set_token_and_yyposn()
{
	extern char* yyposn;
	yyposn = yytext;
	yylval.str = makeCppToken(yytext, yyleng);
}

/*
Parsing of #define is complex. So we will try to parse simple #defines to know what it trys to define.
For any thing complex we will treat the entire definition as one BLOB.
*/
enum DefineLooksLike {
	kNoDef		= 0,
	kNumDef		= tknNumber, // #define is used to define a numeric constant.
	kStrLitDef	= tknStrLit, // #define is used to define a string literal.
	kCharLitDef	= tknCharLit, // #define is used to define a character literal.
	kReDef		= tknID, // #define is used to rename something, e.g. #define CALLTYPE __stdcall
	kComplexDef	= tknPreProDef, // It is something beyond our parser can comprehand.
};
DefineLooksLike gDefLooksLike;

extern "C"
{

	int yywrap()
	{
		return 1;
	}

}
/************************************************************************/
/*@ { Comonly used regular expressions. */
/* White space */
/* Token sparator */
/* C/C++ identifier */
/* New line */
/* Number */
/* String literal */
/* Char literal */
/*@}*/



/* This context starts when # is encountered as first thing in line while state is ctxGeneral */

/* This context starts when include is encountered while state is ctxPreprocessor */

/* This context starts when define is encountered while state is ctxPreprocessor */

/* This context starts when definition name is found after #define */

/*
This context starts after #if, #elif, and #pragma to capture everyting till a new line is not found.
*/

#line 1968 "/home/dassat/github/cppparser/parser.lex.cpp"

#define INITIAL 0
#define ctxGeneral 1
#define ctxDocBlockComment 2
#define ctxBlockComment 3
#define ctxPreprocessor 4
#define ctxInclude 5
#define ctxDefine 6
#define ctxDefineDefn 7
#define ctxPreProBody 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int _new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 161 "/home/dassat/github/cppparser/parser.l"


#line 2216 "/home/dassat/github/cppparser/parser.lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 581 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 580 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 163 "/home/dassat/github/cppparser/parser.l"
{
	/* Ignore white spaces */
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 167 "/home/dassat/github/cppparser/parser.l"
{
	// We will always ignore line continuation character
	++gLineNo;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 172 "/home/dassat/github/cppparser/parser.l"
{
	++gLineNo;
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 176 "/home/dassat/github/cppparser/parser.l"
{
	++gLineNo;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 180 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknID;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 185 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknNumSignSpec;
}
	YY_BREAK
case 7:
/* rule 7 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 190 "/home/dassat/github/cppparser/parser.l"
{
  set_token_and_yyposn();
  return tknLong;
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 195 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknTypedef;
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 200 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknUsing;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 205 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknClass;
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 210 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknNamespace;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 215 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknStruct;
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 220 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknUnion;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 225 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknEnum;
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknPublic;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
(yy_c_buf_p) = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknProtected;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 240 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknPrivate;
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 245 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknTemplate;
}
	YY_BREAK
case 19:
/* rule 19 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 250 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknTypename;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 255 "/home/dassat/github/cppparser/parser.l"
{
	oyytext = yytext;
  BEGINCONTEXT(ctxDocBlockComment);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 260 "/home/dassat/github/cppparser/parser.l"
{
	yylval.str = makeCppToken(oyytext, yytext+yyleng-oyytext);
  ENDCONTEXT(); /* Begin the same state we were before encountering comment. */
	return tknDocBlockComment;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 266 "/home/dassat/github/cppparser/parser.l"
{
  BEGINCONTEXT(ctxBlockComment);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 269 "/home/dassat/github/cppparser/parser.l"
{
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 271 "/home/dassat/github/cppparser/parser.l"
{
  ++gLineNo;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 274 "/home/dassat/github/cppparser/parser.l"
{
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 276 "/home/dassat/github/cppparser/parser.l"
{
  ++gLineNo;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 279 "/home/dassat/github/cppparser/parser.l"
{
  ENDCONTEXT(); /* Begin the same state we were before encountering comment. */
  /* Ignore block comment if it does not stand all alone */
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 284 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknDocLineComment;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 289 "/home/dassat/github/cppparser/parser.l"
{
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 292 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	BEGINCONTEXT(ctxPreprocessor);
	return tknPreProHash;
}
	YY_BREAK
case 31:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 298 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
  ENDCONTEXT();
  BEGINCONTEXT(ctxDefine);
	return tknDefine;

	/*
	Parsing of #define is tricky
	We want to know if #define is used to define simple constants.
	For all other cases it is OK to capture the entire block as one BLOB.
	An attempt to parse MACRO is difficult because we can have things like:
		#define GLUT_BITMAP_HELVETICA_18	((void*)8)
		In this case '(' is part of definition rather than used to specify parameter of MACRO.
	MACRO can be used to define partial expression like:
		#define BEGIN yy_start = 1 + 2 *
		So, if we want to parse the definition as an expression then that too will fail.
	Basically #define can be used in myriad ways which will be too difficult for us to parse.
	*/
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 318 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
  ENDCONTEXT();
	BEGINCONTEXT(ctxDefineDefn);
	gDefLooksLike = kNoDef;
	oyytext = 0;
	return tknID;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 327 "/home/dassat/github/cppparser/parser.l"
{
	if(gDefLooksLike == kNoDef)
	{
		gDefLooksLike = kReDef;
		oyytext = yytext;
	}
	else if(gDefLooksLike == kStrLitDef || gDefLooksLike == kReDef)
	{
		// Looks like string literal definition by concatination of different token
		// e.g. #define APP_NAME PROD_NAME VER_STR
		// Where PROD_NAME and VER_STR are already #defined as string literals.
		gDefLooksLike = kStrLitDef;
	}
	else
	{ // It does not look like simple #define.
		gDefLooksLike = kComplexDef;
	}
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 346 "/home/dassat/github/cppparser/parser.l"
{
	if(gDefLooksLike == kNoDef || gDefLooksLike == kStrLitDef || gDefLooksLike == kReDef)
	{
		gDefLooksLike = kStrLitDef;
		if(oyytext == 0)
			oyytext = yytext;
	}
	else
	{ // It does not look like simple #define.
		gDefLooksLike = kComplexDef;
	}
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 359 "/home/dassat/github/cppparser/parser.l"
{
	if(gDefLooksLike == kNoDef)
	{
		gDefLooksLike = kCharLitDef;
		oyytext = yytext;
	}
	else
	{ // It does not look like simple #define.
		gDefLooksLike = kComplexDef;
	}
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 371 "/home/dassat/github/cppparser/parser.l"
{
	if(gDefLooksLike == kNoDef)
	{
		gDefLooksLike = kNumDef;
		oyytext = yytext;
	}
	else
	{ // It does not look like simple #define.
		gDefLooksLike = kComplexDef;
	}
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 383 "/home/dassat/github/cppparser/parser.l"
{ // Any unrecognized character other than whitespace indicates a complex #define
	gDefLooksLike = kComplexDef;
	if(oyytext == 0)
		oyytext = yytext;
}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 389 "/home/dassat/github/cppparser/parser.l"
{
	yylval.str = makeCppToken(oyytext, yytext-oyytext);
  ENDCONTEXT();
  ++gLineNo;
	if(gDefLooksLike != kNoDef)
		return gDefLooksLike;
}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 397 "/home/dassat/github/cppparser/parser.l"
{
	/* Ignore line comment when it does not stand alone in a line. */
	// We are also ignoring the last new-line character
	// It is because we want the #define to conclude if C++ comment is present at the end of #define.
	yyless(yyleng-1);
}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 404 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknUndef;
}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 409 "/home/dassat/github/cppparser/parser.l"
{
  ENDCONTEXT();
	set_token_and_yyposn();
	BEGINCONTEXT(ctxInclude);
	return tknInclude;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 416 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknStdHdrInclude;
}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 421 "/home/dassat/github/cppparser/parser.l"
{
  ENDCONTEXT();
	++gLineNo;
}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 426 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	oyytext = yytext+yyleng;
  ENDCONTEXT();
  BEGINCONTEXT(ctxPreProBody);
	return tknIf;
}
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 434 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknIfDef;
}
	YY_BREAK
case 46:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 439 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknIfNDef;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 444 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknElse;
}
	YY_BREAK
case 48:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 449 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	oyytext = yytext+yyleng;
  ENDCONTEXT();
  BEGINCONTEXT(ctxPreProBody);
	return tknElIf;
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 457 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknEndIf;
}
	YY_BREAK
case 50:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 462 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	oyytext = yytext+yyleng;
  ENDCONTEXT();
  BEGINCONTEXT(ctxPreProBody);
	return tknPragma;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 470 "/home/dassat/github/cppparser/parser.l"
{
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 473 "/home/dassat/github/cppparser/parser.l"
{
	yylval.str = makeCppToken(oyytext, yytext-oyytext);
  ENDCONTEXT();
	++gLineNo;
	return tknPreProDef;
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 480 "/home/dassat/github/cppparser/parser.l"
{
  ENDCONTEXT();
	++gLineNo;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 485 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknScopeResOp;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 490 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknConst;
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 495 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknStatic;
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 500 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknInline;
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 7);
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 505 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknVirtual;
}
	YY_BREAK
case 59:
/* rule 59 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 510 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknOverride;
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 515 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknExtern;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 520 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknExplicit;
}
	YY_BREAK
case 62:
/* rule 62 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 525 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknFriend;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 530 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknExternC;
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 535 "/home/dassat/github/cppparser/parser.l"
{
  set_token_and_yyposn();
  return tknVolatile;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 540 "/home/dassat/github/cppparser/parser.l"
{
	return tknNew;
}
	YY_BREAK
case 66:
/* rule 66 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 544 "/home/dassat/github/cppparser/parser.l"
{
	return tknDelete;
}
	YY_BREAK
case 67:
/* rule 67 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 548 "/home/dassat/github/cppparser/parser.l"
{
	return tknReturn;
}
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 552 "/home/dassat/github/cppparser/parser.l"
{
	return tknIf;
}
	YY_BREAK
case 69:
/* rule 69 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 556 "/home/dassat/github/cppparser/parser.l"
{
	return tknElse;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 560 "/home/dassat/github/cppparser/parser.l"
{
	return tknFor;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 564 "/home/dassat/github/cppparser/parser.l"
{
	return tknDo;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 568 "/home/dassat/github/cppparser/parser.l"
{
	return tknWhile;
}
	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 572 "/home/dassat/github/cppparser/parser.l"
{
	return tknSwitch;
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 576 "/home/dassat/github/cppparser/parser.l"
{
	return tknCase;
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 10);
(yy_c_buf_p) = yy_cp = yy_bp + 10;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 580 "/home/dassat/github/cppparser/parser.l"
{
	return tknConstCast;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 11);
(yy_c_buf_p) = yy_cp = yy_bp + 11;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 584 "/home/dassat/github/cppparser/parser.l"
{
	return tknStaticCast;
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 12);
(yy_c_buf_p) = yy_cp = yy_bp + 12;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 588 "/home/dassat/github/cppparser/parser.l"
{
	return tknDynamicCast;
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 16);
(yy_c_buf_p) = yy_cp = yy_bp + 16;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 592 "/home/dassat/github/cppparser/parser.l"
{
	return tknReinterpretCast;
}
	YY_BREAK
case 79:
/* rule 79 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 596 "/home/dassat/github/cppparser/parser.l"
{
	return tknTry;
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 600 "/home/dassat/github/cppparser/parser.l"
{
	return tknCatch;
}
	YY_BREAK
case 81:
/* rule 81 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 604 "/home/dassat/github/cppparser/parser.l"
{
	return tknThrow;
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 608 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknOperator;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 613 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknPlusEq;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 618 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknMinusEq;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 623 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknMulEq;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 628 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknMulEq;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 633 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknDivEq;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 638 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknPerEq;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 643 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknXorEq;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 648 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknAndEq;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 653 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknOrEq;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 658 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknLShift;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 663 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknRShift;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 668 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknLShiftEq;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 673 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknRShiftEq;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 678 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknCmpEq;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 683 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknNotEq;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 688 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknLessEq;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 693 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknGreaterEq;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 698 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tkn3WayCmp;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 703 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknAnd;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 708 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknOr;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 713 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknInc;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 718 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknDec;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 723 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknArrow;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 728 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknArrowStar;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 733 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknNumber;
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 738 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknStrLit;
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 743 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknCharLit;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 748 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return yytext[0];
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 753 "/home/dassat/github/cppparser/parser.l"
{
	set_token_and_yyposn();
	return tknEllipsis;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 758 "/home/dassat/github/cppparser/parser.l"
ECHO;
	YY_BREAK
#line 3472 "/home/dassat/github/cppparser/parser.lex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(ctxGeneral):
			case YY_STATE_EOF(ctxDocBlockComment):
			case YY_STATE_EOF(ctxBlockComment):
			case YY_STATE_EOF(ctxPreprocessor):
			case YY_STATE_EOF(ctxInclude):
			case YY_STATE_EOF(ctxDefine):
			case YY_STATE_EOF(ctxDefineDefn):
			case YY_STATE_EOF(ctxPreProBody):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 581 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 581 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 580);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 758 "/home/dassat/github/cppparser/parser.l"



static YY_BUFFER_STATE gParseBuffer = nullptr;
void setupScanBuffer(char* buf, size_t bufsize)
{
  gParseBuffer = yy_scan_buffer(buf,bufsize);
  gLineNo = 0;
  BEGINCONTEXT(ctxGeneral);
}

void cleanupScanBuffer()
{
  yy_delete_buffer(gParseBuffer);
  gParseBuffer = nullptr;
}


